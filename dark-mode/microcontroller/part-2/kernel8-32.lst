
kernel8-32.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	@ 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	@ 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	@ 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	@ 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	@ 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	@ 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	@ 0x228000
    8060:	ea00b04e 	b	341a0 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <main>:
    8070:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    8074:	e24ddc21 	sub	sp, sp, #8448	@ 0x2100
    8078:	e24dd034 	sub	sp, sp, #52	@ 0x34
    807c:	e28d0004 	add	r0, sp, #4
    8080:	eb000017 	bl	80e4 <CKernel::CKernel()>
    8084:	e28d0004 	add	r0, sp, #4
    8088:	eb0000a3 	bl	831c <CKernel::Initialize()>
    808c:	e3500000 	cmp	r0, #0
    8090:	0a000003 	beq	80a4 <main+0x34>
    8094:	e28d0004 	add	r0, sp, #4
    8098:	eb0000df 	bl	841c <CKernel::Run()>
    809c:	e3500002 	cmp	r0, #2
    80a0:	0a000000 	beq	80a8 <main+0x38>
    80a4:	eb00b02f 	bl	34168 <halt>
    80a8:	eb00b033 	bl	3417c <reboot>

000080ac <foo(void*)>:
    80ac:	e2800d73 	add	r0, r0, #7360	@ 0x1cc0
    80b0:	e3a02003 	mov	r2, #3
    80b4:	e2800038 	add	r0, r0, #56	@ 0x38
    80b8:	e92d4010 	push	{r4, lr}
    80bc:	e3093c98 	movw	r3, #40088	@ 0x9c98
    80c0:	e3403003 	movt	r3, #3
    80c4:	e30e1b64 	movw	r1, #60260	@ 0xeb64
    80c8:	e3401003 	movt	r1, #3
    80cc:	eb009b86 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    80d0:	e3043050 	movw	r3, #16464	@ 0x4050
    80d4:	e3403004 	movt	r3, #4
    80d8:	e3a02001 	mov	r2, #1
    80dc:	e5c32000 	strb	r2, [r3]
    80e0:	e8bd8010 	pop	{r4, pc}

000080e4 <CKernel::CKernel()>:
    80e4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    80e8:	e1a04000 	mov	r4, r0
    80ec:	e3a05000 	mov	r5, #0
    80f0:	e24dd014 	sub	sp, sp, #20
    80f4:	e2847d72 	add	r7, r4, #7296	@ 0x1c80
    80f8:	eb00983c 	bl	2e1f0 <CKernelOptions::CKernelOptions()>
    80fc:	e2840e89 	add	r0, r4, #2192	@ 0x890
    8100:	e2800004 	add	r0, r0, #4
    8104:	e2877038 	add	r7, r7, #56	@ 0x38
    8108:	eb0091ca 	bl	2c838 <CDeviceNameService::CDeviceNameService()>
    810c:	e1a00004 	mov	r0, r4
    8110:	eb009765 	bl	2deac <CKernelOptions::GetWidth() const>
    8114:	e1a06000 	mov	r6, r0
    8118:	e1a00004 	mov	r0, r4
    811c:	eb009764 	bl	2deb4 <CKernelOptions::GetHeight() const>
    8120:	e1a02000 	mov	r2, r0
    8124:	e2840e89 	add	r0, r4, #2192	@ 0x890
    8128:	e1a03005 	mov	r3, r5
    812c:	e1a01006 	mov	r1, r6
    8130:	e58d5000 	str	r5, [sp]
    8134:	e280000c 	add	r0, r0, #12
    8138:	e2846c1a 	add	r6, r4, #6656	@ 0x1a00
    813c:	eb009ff7 	bl	30120 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    8140:	e2840e92 	add	r0, r4, #2336	@ 0x920
    8144:	e1a03005 	mov	r3, r5
    8148:	e1a02005 	mov	r2, r5
    814c:	e1a01005 	mov	r1, r5
    8150:	e280000c 	add	r0, r0, #12
    8154:	eb00a679 	bl	31b40 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
    8158:	e2840c1a 	add	r0, r4, #6656	@ 0x1a00
    815c:	e2866018 	add	r6, r6, #24
    8160:	e2800014 	add	r0, r0, #20
    8164:	eb00bc22 	bl	371f4 <CExceptionHandler::CExceptionHandler()>
    8168:	e1a00006 	mov	r0, r6
    816c:	eb00be4b 	bl	37aa0 <CInterruptSystem::CInterruptSystem()>
    8170:	e1a01006 	mov	r1, r6
    8174:	e1a00007 	mov	r0, r7
    8178:	eb00b04a 	bl	342a8 <CTimer::CTimer(CInterruptSystem*)>
    817c:	e1a00004 	mov	r0, r4
    8180:	eb009750 	bl	2dec8 <CKernelOptions::GetLogLevel() const>
    8184:	e1a01000 	mov	r1, r0
    8188:	e2840d73 	add	r0, r4, #7360	@ 0x1cc0
    818c:	e1a02007 	mov	r2, r7
    8190:	e3a03001 	mov	r3, #1
    8194:	e2800038 	add	r0, r0, #56	@ 0x38
    8198:	eb009952 	bl	2e6e8 <CLogger::CLogger(unsigned int, CTimer*, bool)>
    819c:	e2840d77 	add	r0, r4, #7616	@ 0x1dc0
    81a0:	e1a01006 	mov	r1, r6
    81a4:	e2800034 	add	r0, r0, #52	@ 0x34
    81a8:	eb00933a 	bl	2ce98 <CGPIOManager::CGPIOManager(CInterruptSystem*)>
    81ac:	e2840d7b 	add	r0, r4, #7872	@ 0x1ec0
    81b0:	e1a03005 	mov	r3, r5
    81b4:	e3a02001 	mov	r2, #1
    81b8:	e3a01012 	mov	r1, #18
    81bc:	e2800014 	add	r0, r0, #20
    81c0:	eb0096ae 	bl	2dc80 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    81c4:	e2840d7b 	add	r0, r4, #7872	@ 0x1ec0
    81c8:	e1a03005 	mov	r3, r5
    81cc:	e1a02007 	mov	r2, r7
    81d0:	e1a01006 	mov	r1, r6
    81d4:	e280003c 	add	r0, r0, #60	@ 0x3c
    81d8:	eb000135 	bl	86b4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)>
    81dc:	e2840d7e 	add	r0, r4, #8064	@ 0x1f80
    81e0:	e2800014 	add	r0, r0, #20
    81e4:	e3046050 	movw	r6, #16464	@ 0x4050
    81e8:	e3406004 	movt	r6, #4
    81ec:	eb008b5d 	bl	2af68 <CScheduler::CScheduler()>
    81f0:	e3033e78 	movw	r3, #15992	@ 0x3e78
    81f4:	e3403004 	movt	r3, #4
    81f8:	e2832010 	add	r2, r3, #16
    81fc:	e58d5008 	str	r5, [sp, #8]
    8200:	e58d2000 	str	r2, [sp]
    8204:	e2831008 	add	r1, r3, #8
    8208:	e2840a02 	add	r0, r4, #8192	@ 0x2000
    820c:	e593200c 	ldr	r2, [r3, #12]
    8210:	e58d2004 	str	r2, [sp, #4]
    8214:	e2832004 	add	r2, r3, #4
    8218:	eb005fa2 	bl	200a8 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>
    821c:	e2860004 	add	r0, r6, #4
    8220:	e3a03f7d 	mov	r3, #500	@ 0x1f4
    8224:	e3a020c8 	mov	r2, #200	@ 0xc8
    8228:	e3a01005 	mov	r1, #5
    822c:	eb008ec0 	bl	2bd34 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>
    8230:	e1a00004 	mov	r0, r4
    8234:	e5c65000 	strb	r5, [r6]
    8238:	e28dd014 	add	sp, sp, #20
    823c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00008240 <CKernel::myInterruptHandler()>:
    8240:	e2800d73 	add	r0, r0, #7360	@ 0x1cc0
    8244:	e3a02003 	mov	r2, #3
    8248:	e2800038 	add	r0, r0, #56	@ 0x38
    824c:	e92d4010 	push	{r4, lr}
    8250:	e3093c98 	movw	r3, #40088	@ 0x9c98
    8254:	e3403003 	movt	r3, #3
    8258:	e30e1b64 	movw	r1, #60260	@ 0xeb64
    825c:	e3401003 	movt	r1, #3
    8260:	eb009b21 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8264:	e3043050 	movw	r3, #16464	@ 0x4050
    8268:	e3403004 	movt	r3, #4
    826c:	e3a02001 	mov	r2, #1
    8270:	e5c32000 	strb	r2, [r3]
    8274:	e8bd8010 	pop	{r4, pc}

00008278 <CKernel::~CKernel()>:
    8278:	e92d4010 	push	{r4, lr}
    827c:	e1a04000 	mov	r4, r0
    8280:	e2800a02 	add	r0, r0, #8192	@ 0x2000
    8284:	eb00606f 	bl	20448 <CNetSubSystem::~CNetSubSystem()>
    8288:	e2840d7e 	add	r0, r4, #8064	@ 0x1f80
    828c:	e2800014 	add	r0, r0, #20
    8290:	eb008b59 	bl	2affc <CScheduler::~CScheduler()>
    8294:	e2840d7b 	add	r0, r4, #7872	@ 0x1ec0
    8298:	e280003c 	add	r0, r0, #60	@ 0x3c
    829c:	eb000c29 	bl	b348 <CDWHCIDevice::~CDWHCIDevice()>
    82a0:	e2840d7b 	add	r0, r4, #7872	@ 0x1ec0
    82a4:	e2800014 	add	r0, r0, #20
    82a8:	eb0093cd 	bl	2d1e4 <CGPIOPin::~CGPIOPin()>
    82ac:	e2840d77 	add	r0, r4, #7616	@ 0x1dc0
    82b0:	e2800034 	add	r0, r0, #52	@ 0x34
    82b4:	eb009300 	bl	2cebc <CGPIOManager::~CGPIOManager()>
    82b8:	e2840d73 	add	r0, r4, #7360	@ 0x1cc0
    82bc:	e2800038 	add	r0, r0, #56	@ 0x38
    82c0:	eb009920 	bl	2e748 <CLogger::~CLogger()>
    82c4:	e2840d72 	add	r0, r4, #7296	@ 0x1c80
    82c8:	e2800038 	add	r0, r0, #56	@ 0x38
    82cc:	eb00b017 	bl	34330 <CTimer::~CTimer()>
    82d0:	e2840c1a 	add	r0, r4, #6656	@ 0x1a00
    82d4:	e2800018 	add	r0, r0, #24
    82d8:	eb00bdfb 	bl	37acc <CInterruptSystem::~CInterruptSystem()>
    82dc:	e2840c1a 	add	r0, r4, #6656	@ 0x1a00
    82e0:	e2800014 	add	r0, r0, #20
    82e4:	eb00bb66 	bl	37084 <CExceptionHandler::~CExceptionHandler()>
    82e8:	e2840e92 	add	r0, r4, #2336	@ 0x920
    82ec:	e280000c 	add	r0, r0, #12
    82f0:	eb00a945 	bl	3280c <CSerialDevice::~CSerialDevice()>
    82f4:	e2840e89 	add	r0, r4, #2192	@ 0x890
    82f8:	e280000c 	add	r0, r0, #12
    82fc:	eb009f13 	bl	2ff50 <CScreenDevice::~CScreenDevice()>
    8300:	e2840e89 	add	r0, r4, #2192	@ 0x890
    8304:	e2800004 	add	r0, r0, #4
    8308:	eb00915b 	bl	2c87c <CDeviceNameService::~CDeviceNameService()>
    830c:	e1a00004 	mov	r0, r4
    8310:	eb0096ca 	bl	2de40 <CKernelOptions::~CKernelOptions()>
    8314:	e1a00004 	mov	r0, r4
    8318:	e8bd8010 	pop	{r4, pc}

0000831c <CKernel::Initialize()>:
    831c:	e92d4070 	push	{r4, r5, r6, lr}
    8320:	e2805e89 	add	r5, r0, #2192	@ 0x890
    8324:	e285500c 	add	r5, r5, #12
    8328:	e24dd008 	sub	sp, sp, #8
    832c:	e1a04000 	mov	r4, r0
    8330:	e1a00005 	mov	r0, r5
    8334:	eb00a336 	bl	31014 <CScreenDevice::Initialize()>
    8338:	e3500000 	cmp	r0, #0
    833c:	1a000002 	bne	834c <CKernel::Initialize()+0x30>
    8340:	e3a00000 	mov	r0, #0
    8344:	e28dd008 	add	sp, sp, #8
    8348:	e8bd8070 	pop	{r4, r5, r6, pc}
    834c:	e2840e92 	add	r0, r4, #2336	@ 0x920
    8350:	e3a06000 	mov	r6, #0
    8354:	e3a03001 	mov	r3, #1
    8358:	e3a02008 	mov	r2, #8
    835c:	e280000c 	add	r0, r0, #12
    8360:	e3a01cc2 	mov	r1, #49664	@ 0xc200
    8364:	e3401001 	movt	r1, #1
    8368:	e58d6000 	str	r6, [sp]
    836c:	eb00a65d 	bl	31ce8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
    8370:	e1500006 	cmp	r0, r6
    8374:	0afffff1 	beq	8340 <CKernel::Initialize()+0x24>
    8378:	e1a00004 	mov	r0, r4
    837c:	eb0096ce 	bl	2debc <CKernelOptions::GetLogDevice() const>
    8380:	e1a01000 	mov	r1, r0
    8384:	e2840e89 	add	r0, r4, #2192	@ 0x890
    8388:	e1a02006 	mov	r2, r6
    838c:	e2800004 	add	r0, r0, #4
    8390:	eb0091c1 	bl	2ca9c <CDeviceNameService::GetDevice(char const*, bool)>
    8394:	e1a01000 	mov	r1, r0
    8398:	e1510006 	cmp	r1, r6
    839c:	e2840d73 	add	r0, r4, #7360	@ 0x1cc0
    83a0:	01a01005 	moveq	r1, r5
    83a4:	e2800038 	add	r0, r0, #56	@ 0x38
    83a8:	eb009adb 	bl	2ef1c <CLogger::Initialize(CDevice*)>
    83ac:	e1500006 	cmp	r0, r6
    83b0:	0affffe2 	beq	8340 <CKernel::Initialize()+0x24>
    83b4:	e2840c1a 	add	r0, r4, #6656	@ 0x1a00
    83b8:	e2800018 	add	r0, r0, #24
    83bc:	eb00bdd2 	bl	37b0c <CInterruptSystem::Initialize()>
    83c0:	e1500006 	cmp	r0, r6
    83c4:	0affffdd 	beq	8340 <CKernel::Initialize()+0x24>
    83c8:	e2840d72 	add	r0, r4, #7296	@ 0x1c80
    83cc:	e2800038 	add	r0, r0, #56	@ 0x38
    83d0:	eb00b274 	bl	34da8 <CTimer::Initialize()>
    83d4:	e1500006 	cmp	r0, r6
    83d8:	0affffd8 	beq	8340 <CKernel::Initialize()+0x24>
    83dc:	e2840d77 	add	r0, r4, #7616	@ 0x1dc0
    83e0:	e2800034 	add	r0, r0, #52	@ 0x34
    83e4:	eb0092d4 	bl	2cf3c <CGPIOManager::Initialize()>
    83e8:	e1500006 	cmp	r0, r6
    83ec:	0affffd3 	beq	8340 <CKernel::Initialize()+0x24>
    83f0:	e2840d7b 	add	r0, r4, #7872	@ 0x1ec0
    83f4:	e3a01001 	mov	r1, #1
    83f8:	e280003c 	add	r0, r0, #60	@ 0x3c
    83fc:	eb000c38 	bl	b4e4 <CDWHCIDevice::Initialize(bool)>
    8400:	e1500006 	cmp	r0, r6
    8404:	0affffcd 	beq	8340 <CKernel::Initialize()+0x24>
    8408:	e3a01001 	mov	r1, #1
    840c:	e2840a02 	add	r0, r4, #8192	@ 0x2000
    8410:	e28dd008 	add	sp, sp, #8
    8414:	e8bd4070 	pop	{r4, r5, r6, lr}
    8418:	ea005f6f 	b	201dc <CNetSubSystem::Initialize(bool)>

0000841c <CKernel::Run()>:
    841c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8420:	e2808d73 	add	r8, r0, #7360	@ 0x1cc0
    8424:	e2888038 	add	r8, r8, #56	@ 0x38
    8428:	e24dd064 	sub	sp, sp, #100	@ 0x64
    842c:	e3a02003 	mov	r2, #3
    8430:	e1a06000 	mov	r6, r0
    8434:	e3093cac 	movw	r3, #40108	@ 0x9cac
    8438:	e3403003 	movt	r3, #3
    843c:	e1a00008 	mov	r0, r8
    8440:	e30e1b64 	movw	r1, #60260	@ 0xeb64
    8444:	e3401003 	movt	r1, #3
    8448:	eb009aa7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    844c:	e28d0018 	add	r0, sp, #24
    8450:	eb00a97b 	bl	32a44 <CString::CString()>
    8454:	e2863a02 	add	r3, r6, #8192	@ 0x2000
    8458:	e1a00003 	mov	r0, r3
    845c:	e58d3000 	str	r3, [sp]
    8460:	eb005fd6 	bl	203c0 <CNetSubSystem::GetConfig()>
    8464:	e3047050 	movw	r7, #16464	@ 0x4050
    8468:	e3407004 	movt	r7, #4
    846c:	eb007fe0 	bl	283f4 <CNetConfig::GetIPAddress() const>
    8470:	e28d1018 	add	r1, sp, #24
    8474:	e30ebb64 	movw	fp, #60260	@ 0xeb64
    8478:	e340b003 	movt	fp, #3
    847c:	eb008119 	bl	288e8 <CIPAddress::Format(CString*) const>
    8480:	e28d0018 	add	r0, sp, #24
    8484:	e30f9ea9 	movw	r9, #65193	@ 0xfea9
    8488:	e3459b47 	movt	r9, #23367	@ 0x5b47
    848c:	eb00a9a4 	bl	32b24 <CString::operator char const*() const>
    8490:	e3a02003 	mov	r2, #3
    8494:	e1a03000 	mov	r3, r0
    8498:	e30e1b64 	movw	r1, #60260	@ 0xeb64
    849c:	e3401003 	movt	r1, #3
    84a0:	e1a00008 	mov	r0, r8
    84a4:	eb009a90 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84a8:	e3a02003 	mov	r2, #3
    84ac:	e1a00008 	mov	r0, r8
    84b0:	e3093cd0 	movw	r3, #40144	@ 0x9cd0
    84b4:	e3403003 	movt	r3, #3
    84b8:	e30e1b64 	movw	r1, #60260	@ 0xeb64
    84bc:	e3401003 	movt	r1, #3
    84c0:	eb009a89 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    84c4:	e2863d77 	add	r3, r6, #7616	@ 0x1dc0
    84c8:	e2833034 	add	r3, r3, #52	@ 0x34
    84cc:	e3a02000 	mov	r2, #0
    84d0:	e3a01011 	mov	r1, #17
    84d4:	e28d0038 	add	r0, sp, #56	@ 0x38
    84d8:	eb0095e8 	bl	2dc80 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
    84dc:	e1a02006 	mov	r2, r6
    84e0:	e3a03001 	mov	r3, #1
    84e4:	e28d0038 	add	r0, sp, #56	@ 0x38
    84e8:	e30810ac 	movw	r1, #32940	@ 0x80ac
    84ec:	e3401000 	movt	r1, #0
    84f0:	eb0093d0 	bl	2d438 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>
    84f4:	e3a01001 	mov	r1, #1
    84f8:	e28d0038 	add	r0, sp, #56	@ 0x38
    84fc:	e2866d7b 	add	r6, r6, #7872	@ 0x1ec0
    8500:	eb00942c 	bl	2d5b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>
    8504:	e3a02003 	mov	r2, #3
    8508:	e1a00008 	mov	r0, r8
    850c:	e3093cec 	movw	r3, #40172	@ 0x9cec
    8510:	e3403003 	movt	r3, #3
    8514:	e30e1b64 	movw	r1, #60260	@ 0xeb64
    8518:	e3401003 	movt	r1, #3
    851c:	e2866014 	add	r6, r6, #20
    8520:	eb009a71 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8524:	e3093d08 	movw	r3, #40200	@ 0x9d08
    8528:	e3403003 	movt	r3, #3
    852c:	e58d8004 	str	r8, [sp, #4]
    8530:	e1a0a003 	mov	sl, r3
    8534:	ea000032 	b	8604 <CKernel::Run()+0x1e8>
    8538:	eb009a6b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    853c:	e3a000a0 	mov	r0, #160	@ 0xa0
    8540:	eb00b6f7 	bl	36124 <operator new(unsigned int)>
    8544:	e1a04000 	mov	r4, r0
    8548:	e3a02006 	mov	r2, #6
    854c:	e59d1000 	ldr	r1, [sp]
    8550:	eb0061a5 	bl	20bec <CSocket::CSocket(CNetSubSystem*, int)>
    8554:	e28d100c 	add	r1, sp, #12
    8558:	e28d0010 	add	r0, sp, #16
    855c:	e58d900c 	str	r9, [sp, #12]
    8560:	eb007fc6 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
    8564:	e5943000 	ldr	r3, [r4]
    8568:	e3012f90 	movw	r2, #8080	@ 0x1f90
    856c:	e28d1010 	add	r1, sp, #16
    8570:	e1a00004 	mov	r0, r4
    8574:	e593300c 	ldr	r3, [r3, #12]
    8578:	e12fff33 	blx	r3
    857c:	e28d0028 	add	r0, sp, #40	@ 0x28
    8580:	e3091d18 	movw	r1, #40216	@ 0x9d18
    8584:	e3401003 	movt	r1, #3
    8588:	eb00a933 	bl	32a5c <CString::CString(char const*)>
    858c:	e28d0028 	add	r0, sp, #40	@ 0x28
    8590:	eb00a9a1 	bl	32c1c <CString::GetLength() const>
    8594:	e5943000 	ldr	r3, [r4]
    8598:	e1a08000 	mov	r8, r0
    859c:	e28d0028 	add	r0, sp, #40	@ 0x28
    85a0:	e593501c 	ldr	r5, [r3, #28]
    85a4:	eb00a95e 	bl	32b24 <CString::operator char const*() const>
    85a8:	e1a02008 	mov	r2, r8
    85ac:	e1a01000 	mov	r1, r0
    85b0:	e3a03040 	mov	r3, #64	@ 0x40
    85b4:	e1a00004 	mov	r0, r4
    85b8:	e12fff35 	blx	r5
    85bc:	e5943000 	ldr	r3, [r4]
    85c0:	e1a00004 	mov	r0, r4
    85c4:	e5933004 	ldr	r3, [r3, #4]
    85c8:	e12fff33 	blx	r3
    85cc:	e3a01001 	mov	r1, #1
    85d0:	e1a00006 	mov	r0, r6
    85d4:	eb009338 	bl	2d2bc <CGPIOPin::Write(unsigned int)>
    85d8:	e3a000c8 	mov	r0, #200	@ 0xc8
    85dc:	eb00b254 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    85e0:	e3a01000 	mov	r1, #0
    85e4:	e1a00006 	mov	r0, r6
    85e8:	eb009333 	bl	2d2bc <CGPIOPin::Write(unsigned int)>
    85ec:	e28d0028 	add	r0, sp, #40	@ 0x28
    85f0:	e3a03000 	mov	r3, #0
    85f4:	e5c73000 	strb	r3, [r7]
    85f8:	eb00a8de 	bl	32978 <CString::~CString()>
    85fc:	e28d0010 	add	r0, sp, #16
    8600:	eb007fbe 	bl	28500 <CIPAddress::~CIPAddress()>
    8604:	e5d7c000 	ldrb	ip, [r7]
    8608:	e1a0300a 	mov	r3, sl
    860c:	e59d0004 	ldr	r0, [sp, #4]
    8610:	e3a02003 	mov	r2, #3
    8614:	e1a0100b 	mov	r1, fp
    8618:	e35c0000 	cmp	ip, #0
    861c:	1affffc5 	bne	8538 <CKernel::Run()+0x11c>
    8620:	eafffffe 	b	8620 <CKernel::Run()+0x204>

00008624 <_GLOBAL__sub_I__ZN7CKernel6ActLEDE>:
    8624:	e92d4010 	push	{r4, lr}
    8628:	e3a01000 	mov	r1, #0
    862c:	e59f4020 	ldr	r4, [pc, #32]	@ 8654 <_GLOBAL__sub_I__ZN7CKernel6ActLEDE+0x30>
    8630:	e1a00004 	mov	r0, r4
    8634:	eb008d6d 	bl	2bbf0 <CActLED::CActLED(bool)>
    8638:	e1a00004 	mov	r0, r4
    863c:	e3042180 	movw	r2, #16768	@ 0x4180
    8640:	e3402004 	movt	r2, #4
    8644:	e30b1cc8 	movw	r1, #48328	@ 0xbcc8
    8648:	e3401002 	movt	r1, #2
    864c:	e8bd4010 	pop	{r4, lr}
    8650:	ea00aebf 	b	34154 <__aeabi_atexit>
    8654:	00044054 	.word	0x00044054

00008658 <CDWHCIDevice::CancelDeviceTransactions(CUSBDevice*)>:
    8658:	e2800024 	add	r0, r0, #36	@ 0x24
    865c:	ea0010d5 	b	c9b8 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)>

00008660 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)>:
    8660:	e3520000 	cmp	r2, #0
    8664:	e92d4010 	push	{r4, lr}
    8668:	0a000005 	beq	8684 <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x24>
    866c:	e351000f 	cmp	r1, #15
    8670:	8a000009 	bhi	869c <CDWHCIDevice::CompletionRoutine(CUSBRequest*, void*, void*)+0x3c>
    8674:	e0822001 	add	r2, r2, r1
    8678:	e3a03000 	mov	r3, #0
    867c:	e5c23070 	strb	r3, [r2, #112]	@ 0x70
    8680:	e8bd8010 	pop	{r4, pc}
    8684:	e3091d40 	movw	r1, #40256	@ 0x9d40
    8688:	e3401003 	movt	r1, #3
    868c:	e3090d50 	movw	r0, #40272	@ 0x9d50
    8690:	e3400003 	movt	r0, #3
    8694:	e3a02fbb 	mov	r2, #748	@ 0x2ec
    8698:	eb008dcf 	bl	2bddc <assertion_failed>
    869c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    86a0:	e3401003 	movt	r1, #3
    86a4:	e3090d5c 	movw	r0, #40284	@ 0x9d5c
    86a8:	e3400003 	movt	r0, #3
    86ac:	e30022ef 	movw	r2, #751	@ 0x2ef
    86b0:	eb008dc9 	bl	2bddc <assertion_failed>

000086b4 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)>:
    86b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    86b8:	e1a05000 	mov	r5, r0
    86bc:	e1a04001 	mov	r4, r1
    86c0:	e1a01003 	mov	r1, r3
    86c4:	e1a07002 	mov	r7, r2
    86c8:	e3a06001 	mov	r6, #1
    86cc:	eb002ca7 	bl	13970 <CUSBHostController::CUSBHostController(bool)>
    86d0:	e59f30d8 	ldr	r3, [pc, #216]	@ 87b0 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xfc>
    86d4:	e1a02006 	mov	r2, r6
    86d8:	e5853000 	str	r3, [r5]
    86dc:	e3a01010 	mov	r1, #16
    86e0:	e5854010 	str	r4, [r5, #16]
    86e4:	e2850024 	add	r0, r5, #36	@ 0x24
    86e8:	e3a04000 	mov	r4, #0
    86ec:	e5857014 	str	r7, [r5, #20]
    86f0:	e5854018 	str	r4, [r5, #24]
    86f4:	e585401c 	str	r4, [r5, #28]
    86f8:	e5856020 	str	r6, [r5, #32]
    86fc:	eb001034 	bl	c7d4 <CDWHCITransactionQueue::CDWHCITransactionQueue(unsigned int, unsigned int)>
    8700:	e1a01005 	mov	r1, r5
    8704:	e2850088 	add	r0, r5, #136	@ 0x88
    8708:	e585606c 	str	r6, [r5, #108]	@ 0x6c
    870c:	e5854080 	str	r4, [r5, #128]	@ 0x80
    8710:	e5854084 	str	r4, [r5, #132]	@ 0x84
    8714:	eb000f61 	bl	c4a0 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>
    8718:	e5953010 	ldr	r3, [r5, #16]
    871c:	e5c54094 	strb	r4, [r5, #148]	@ 0x94
    8720:	e1530004 	cmp	r3, r4
    8724:	e5c54095 	strb	r4, [r5, #149]	@ 0x95
    8728:	0a000014 	beq	8780 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xcc>
    872c:	e5953014 	ldr	r3, [r5, #20]
    8730:	e3530000 	cmp	r3, #0
    8734:	0a000017 	beq	8798 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xe4>
    8738:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
    873c:	e285102c 	add	r1, r5, #44	@ 0x2c
    8740:	e285203c 	add	r2, r5, #60	@ 0x3c
    8744:	e285004c 	add	r0, r5, #76	@ 0x4c
    8748:	e1a03004 	mov	r3, r4
    874c:	f4410a8f 	vst1.32	{d16-d17}, [r1]
    8750:	e1a01004 	mov	r1, r4
    8754:	f4420a8f 	vst1.32	{d16-d17}, [r2]
    8758:	e285205c 	add	r2, r5, #92	@ 0x5c
    875c:	f4400a8f 	vst1.32	{d16-d17}, [r0]
    8760:	f4420a8f 	vst1.32	{d16-d17}, [r2]
    8764:	e0852003 	add	r2, r5, r3
    8768:	e2833001 	add	r3, r3, #1
    876c:	e3530010 	cmp	r3, #16
    8770:	e5c21070 	strb	r1, [r2, #112]	@ 0x70
    8774:	1afffffa 	bne	8764 <CDWHCIDevice::CDWHCIDevice(CInterruptSystem*, CTimer*, bool)+0xb0>
    8778:	e1a00005 	mov	r0, r5
    877c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    8780:	e3091d40 	movw	r1, #40256	@ 0x9d40
    8784:	e3401003 	movt	r1, #3
    8788:	e3090d7c 	movw	r0, #40316	@ 0x9d7c
    878c:	e3400003 	movt	r0, #3
    8790:	e3a0205a 	mov	r2, #90	@ 0x5a
    8794:	eb008d90 	bl	2bddc <assertion_failed>
    8798:	e3091d40 	movw	r1, #40256	@ 0x9d40
    879c:	e3401003 	movt	r1, #3
    87a0:	e3090d94 	movw	r0, #40340	@ 0x9d94
    87a4:	e3400003 	movt	r0, #3
    87a8:	e3a0205b 	mov	r2, #91	@ 0x5b
    87ac:	eb008d8a 	bl	2bddc <assertion_failed>
    87b0:	0003eb74 	.word	0x0003eb74

000087b4 <CDWHCIDevice::DeviceConnected()>:
    87b4:	e92d4010 	push	{r4, lr}
    87b8:	e3a01d11 	mov	r1, #1088	@ 0x440
    87bc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    87c0:	e24dd010 	sub	sp, sp, #16
    87c4:	e28d0004 	add	r0, sp, #4
    87c8:	eb00475f 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    87cc:	e28d0004 	add	r0, sp, #4
    87d0:	eb004767 	bl	1a574 <CDWHCIRegister::Read()>
    87d4:	e1a04000 	mov	r4, r0
    87d8:	e28d0004 	add	r0, sp, #4
    87dc:	eb004763 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    87e0:	e2040001 	and	r0, r4, #1
    87e4:	e28dd010 	add	sp, sp, #16
    87e8:	e8bd8010 	pop	{r4, pc}

000087ec <CDWHCIDevice::GetPortSpeed()>:
    87ec:	e92d4010 	push	{r4, lr}
    87f0:	e3a01d11 	mov	r1, #1088	@ 0x440
    87f4:	e3431f98 	movt	r1, #16280	@ 0x3f98
    87f8:	e24dd010 	sub	sp, sp, #16
    87fc:	e28d0004 	add	r0, sp, #4
    8800:	eb004751 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8804:	e28d0004 	add	r0, sp, #4
    8808:	eb004759 	bl	1a574 <CDWHCIRegister::Read()>
    880c:	e7e108d0 	ubfx	r0, r0, #17, #2
    8810:	e3500003 	cmp	r0, #3
    8814:	12600002 	rsbne	r0, r0, #2
    8818:	03a04004 	moveq	r4, #4
    881c:	16ef4070 	uxtbne	r4, r0
    8820:	e28d0004 	add	r0, sp, #4
    8824:	eb004751 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8828:	e1a00004 	mov	r0, r4
    882c:	e28dd010 	add	sp, sp, #16
    8830:	e8bd8010 	pop	{r4, pc}

00008834 <CDWHCIDevice::OvercurrentDetected()>:
    8834:	e92d4010 	push	{r4, lr}
    8838:	e3a01d11 	mov	r1, #1088	@ 0x440
    883c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8840:	e24dd010 	sub	sp, sp, #16
    8844:	e28d0004 	add	r0, sp, #4
    8848:	eb00473f 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    884c:	e28d0004 	add	r0, sp, #4
    8850:	eb004747 	bl	1a574 <CDWHCIRegister::Read()>
    8854:	e1a04000 	mov	r4, r0
    8858:	e28d0004 	add	r0, sp, #4
    885c:	eb004743 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8860:	e7e00254 	ubfx	r0, r4, #4, #1
    8864:	e28dd010 	add	sp, sp, #16
    8868:	e8bd8010 	pop	{r4, pc}

0000886c <CDWHCIDevice::DisableRootPort(bool)>:
    886c:	e92d4030 	push	{r4, r5, lr}
    8870:	e3a03000 	mov	r3, #0
    8874:	e1a05001 	mov	r5, r1
    8878:	e24dd014 	sub	sp, sp, #20
    887c:	e5c03094 	strb	r3, [r0, #148]	@ 0x94
    8880:	e1a04000 	mov	r4, r0
    8884:	e3a01d11 	mov	r1, #1088	@ 0x440
    8888:	e3431f98 	movt	r1, #16280	@ 0x3f98
    888c:	e28d0004 	add	r0, sp, #4
    8890:	eb00472d 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8894:	e28d0004 	add	r0, sp, #4
    8898:	eb004735 	bl	1a574 <CDWHCIRegister::Read()>
    889c:	e28d0004 	add	r0, sp, #4
    88a0:	e3e01004 	mvn	r1, #4
    88a4:	eb004766 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    88a8:	e3550000 	cmp	r5, #0
    88ac:	1a000007 	bne	88d0 <CDWHCIDevice::DisableRootPort(bool)+0x64>
    88b0:	e28d0004 	add	r0, sp, #4
    88b4:	eb004735 	bl	1a590 <CDWHCIRegister::Write()>
    88b8:	e2840024 	add	r0, r4, #36	@ 0x24
    88bc:	eb000fe4 	bl	c854 <CDWHCITransactionQueue::Flush()>
    88c0:	e28d0004 	add	r0, sp, #4
    88c4:	eb004729 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    88c8:	e28dd014 	add	sp, sp, #20
    88cc:	e8bd8030 	pop	{r4, r5, pc}
    88d0:	e28d0004 	add	r0, sp, #4
    88d4:	e3e01a01 	mvn	r1, #4096	@ 0x1000
    88d8:	eb004759 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    88dc:	eafffff3 	b	88b0 <CDWHCIDevice::DisableRootPort(bool)+0x44>

000088e0 <CDWHCIDevice::PowerOn()>:
    88e0:	e92d4030 	push	{r4, r5, lr}
    88e4:	e3a01000 	mov	r1, #0
    88e8:	e3a05000 	mov	r5, #0
    88ec:	e24dd02c 	sub	sp, sp, #44	@ 0x2c
    88f0:	e28d0008 	add	r0, sp, #8
    88f4:	eb008d59 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    88f8:	f2c00013 	vmov.i32	d16, #3	@ 0x00000003
    88fc:	e28d101c 	add	r1, sp, #28
    8900:	e58d5000 	str	r5, [sp]
    8904:	e3a03014 	mov	r3, #20
    8908:	e28d2010 	add	r2, sp, #16
    890c:	e28d0008 	add	r0, sp, #8
    8910:	f441078f 	vst1.32	{d16}, [r1]
    8914:	e3081001 	movw	r1, #32769	@ 0x8001
    8918:	e3401002 	movt	r1, #2
    891c:	eb008da1 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    8920:	e2504000 	subs	r4, r0, #0
    8924:	0a000003 	beq	8938 <CDWHCIDevice::PowerOn()+0x58>
    8928:	e59d0020 	ldr	r0, [sp, #32]
    892c:	e3100002 	tst	r0, #2
    8930:	02004001 	andeq	r4, r0, #1
    8934:	11a04005 	movne	r4, r5
    8938:	e28d0008 	add	r0, sp, #8
    893c:	eb008d4e 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
    8940:	e1a00004 	mov	r0, r4
    8944:	e28dd02c 	add	sp, sp, #44	@ 0x2c
    8948:	e8bd8030 	pop	{r4, r5, pc}

0000894c <CDWHCIDevice::Reset()>:
    894c:	e92d4030 	push	{r4, r5, lr}
    8950:	e3a04064 	mov	r4, #100	@ 0x64
    8954:	e1a05000 	mov	r5, r0
    8958:	e24dd014 	sub	sp, sp, #20
    895c:	e3a02000 	mov	r2, #0
    8960:	e3a01010 	mov	r1, #16
    8964:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8968:	e28d0004 	add	r0, sp, #4
    896c:	eb0046fa 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8970:	e28d0004 	add	r0, sp, #4
    8974:	eb0046fe 	bl	1a574 <CDWHCIRegister::Read()>
    8978:	e3500000 	cmp	r0, #0
    897c:	aa000016 	bge	89dc <CDWHCIDevice::Reset()+0x90>
    8980:	e3a0400a 	mov	r4, #10
    8984:	e3a01001 	mov	r1, #1
    8988:	e28d0004 	add	r0, sp, #4
    898c:	eb00473a 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8990:	e28d0004 	add	r0, sp, #4
    8994:	eb0046fd 	bl	1a590 <CDWHCIRegister::Write()>
    8998:	e28d0004 	add	r0, sp, #4
    899c:	eb0046f4 	bl	1a574 <CDWHCIRegister::Read()>
    89a0:	e3100001 	tst	r0, #1
    89a4:	0a00001a 	beq	8a14 <CDWHCIDevice::Reset()+0xc8>
    89a8:	e5953014 	ldr	r3, [r5, #20]
    89ac:	e3530000 	cmp	r3, #0
    89b0:	0a000011 	beq	89fc <CDWHCIDevice::Reset()+0xb0>
    89b4:	e3a00001 	mov	r0, #1
    89b8:	eb00b15d 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    89bc:	e2544001 	subs	r4, r4, #1
    89c0:	1afffff4 	bne	8998 <CDWHCIDevice::Reset()+0x4c>
    89c4:	e3a04000 	mov	r4, #0
    89c8:	e28d0004 	add	r0, sp, #4
    89cc:	eb0046e7 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    89d0:	e1a00004 	mov	r0, r4
    89d4:	e28dd014 	add	sp, sp, #20
    89d8:	e8bd8030 	pop	{r4, r5, pc}
    89dc:	e5953014 	ldr	r3, [r5, #20]
    89e0:	e3530000 	cmp	r3, #0
    89e4:	0a000004 	beq	89fc <CDWHCIDevice::Reset()+0xb0>
    89e8:	e3a00001 	mov	r0, #1
    89ec:	eb00b150 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    89f0:	e2544001 	subs	r4, r4, #1
    89f4:	1affffdd 	bne	8970 <CDWHCIDevice::Reset()+0x24>
    89f8:	eafffff1 	b	89c4 <CDWHCIDevice::Reset()+0x78>
    89fc:	e3091d40 	movw	r1, #40256	@ 0x9d40
    8a00:	e3401003 	movt	r1, #3
    8a04:	e3090d94 	movw	r0, #40340	@ 0x9d94
    8a08:	e3400003 	movt	r0, #3
    8a0c:	e3002697 	movw	r2, #1687	@ 0x697
    8a10:	eb008cf1 	bl	2bddc <assertion_failed>
    8a14:	e3a00064 	mov	r0, #100	@ 0x64
    8a18:	e3a04001 	mov	r4, #1
    8a1c:	eb00b144 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    8a20:	eaffffe8 	b	89c8 <CDWHCIDevice::Reset()+0x7c>

00008a24 <CDWHCIDevice::InitCore()>:
    8a24:	e92d4030 	push	{r4, r5, lr}
    8a28:	e3a0100c 	mov	r1, #12
    8a2c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8a30:	e24dd034 	sub	sp, sp, #52	@ 0x34
    8a34:	e1a04000 	mov	r4, r0
    8a38:	e1a0000d 	mov	r0, sp
    8a3c:	eb0046c2 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8a40:	e1a0000d 	mov	r0, sp
    8a44:	eb0046ca 	bl	1a574 <CDWHCIRegister::Read()>
    8a48:	eb009550 	bl	2df90 <CKernelOptions::Get()>
    8a4c:	eb009523 	bl	2dee0 <CKernelOptions::GetUSBFullSpeed() const>
    8a50:	e3500000 	cmp	r0, #0
    8a54:	1a00007b 	bne	8c48 <CDWHCIDevice::InitCore()+0x224>
    8a58:	e1a0000d 	mov	r0, sp
    8a5c:	e3e01601 	mvn	r1, #1048576	@ 0x100000
    8a60:	eb0046f7 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8a64:	e3e01501 	mvn	r1, #4194304	@ 0x400000
    8a68:	e1a0000d 	mov	r0, sp
    8a6c:	eb0046f4 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8a70:	e1a0000d 	mov	r0, sp
    8a74:	eb0046c5 	bl	1a590 <CDWHCIRegister::Write()>
    8a78:	e1a00004 	mov	r0, r4
    8a7c:	ebffffb2 	bl	894c <CDWHCIDevice::Reset()>
    8a80:	e2505000 	subs	r5, r0, #0
    8a84:	0a000068 	beq	8c2c <CDWHCIDevice::InitCore()+0x208>
    8a88:	e1a0000d 	mov	r0, sp
    8a8c:	eb0046b8 	bl	1a574 <CDWHCIRegister::Read()>
    8a90:	e1a0000d 	mov	r0, sp
    8a94:	e3e01010 	mvn	r1, #16
    8a98:	eb0046e9 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8a9c:	e3e01008 	mvn	r1, #8
    8aa0:	e1a0000d 	mov	r0, sp
    8aa4:	eb0046e6 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8aa8:	e1a0000d 	mov	r0, sp
    8aac:	eb0046b7 	bl	1a590 <CDWHCIRegister::Write()>
    8ab0:	e3a01048 	mov	r1, #72	@ 0x48
    8ab4:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8ab8:	e28d000c 	add	r0, sp, #12
    8abc:	eb0046a2 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8ac0:	e28d000c 	add	r0, sp, #12
    8ac4:	eb0046aa 	bl	1a574 <CDWHCIRegister::Read()>
    8ac8:	e28d000c 	add	r0, sp, #12
    8acc:	eb0046bd 	bl	1a5c8 <CDWHCIRegister::Get() const>
    8ad0:	e2000018 	and	r0, r0, #24
    8ad4:	e3500010 	cmp	r0, #16
    8ad8:	1a000064 	bne	8c70 <CDWHCIDevice::InitCore()+0x24c>
    8adc:	e1a0000d 	mov	r0, sp
    8ae0:	eb0046a3 	bl	1a574 <CDWHCIRegister::Read()>
    8ae4:	e28d000c 	add	r0, sp, #12
    8ae8:	eb0046b6 	bl	1a5c8 <CDWHCIRegister::Get() const>
    8aec:	e20000c0 	and	r0, r0, #192	@ 0xc0
    8af0:	e3500080 	cmp	r0, #128	@ 0x80
    8af4:	0a000040 	beq	8bfc <CDWHCIDevice::InitCore()+0x1d8>
    8af8:	e1a0000d 	mov	r0, sp
    8afc:	e3e01802 	mvn	r1, #131072	@ 0x20000
    8b00:	eb0046cf 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8b04:	e1a0000d 	mov	r0, sp
    8b08:	e3e01702 	mvn	r1, #524288	@ 0x80000
    8b0c:	eb0046cc 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8b10:	e1a0000d 	mov	r0, sp
    8b14:	eb00469d 	bl	1a590 <CDWHCIRegister::Write()>
    8b18:	e5943018 	ldr	r3, [r4, #24]
    8b1c:	e3530000 	cmp	r3, #0
    8b20:	1a000058 	bne	8c88 <CDWHCIDevice::InitCore()+0x264>
    8b24:	e28d000c 	add	r0, sp, #12
    8b28:	eb0046a6 	bl	1a5c8 <CDWHCIRegister::Get() const>
    8b2c:	e7e30750 	ubfx	r0, r0, #14, #4
    8b30:	e2403003 	sub	r3, r0, #3
    8b34:	e2800001 	add	r0, r0, #1
    8b38:	e353000c 	cmp	r3, #12
    8b3c:	e5840018 	str	r0, [r4, #24]
    8b40:	8a000044 	bhi	8c58 <CDWHCIDevice::InitCore()+0x234>
    8b44:	e3a01008 	mov	r1, #8
    8b48:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8b4c:	e28d0018 	add	r0, sp, #24
    8b50:	eb00467d 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8b54:	e28d0018 	add	r0, sp, #24
    8b58:	eb004685 	bl	1a574 <CDWHCIRegister::Read()>
    8b5c:	e3a01020 	mov	r1, #32
    8b60:	e28d0018 	add	r0, sp, #24
    8b64:	eb0046c4 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8b68:	e3a01010 	mov	r1, #16
    8b6c:	e28d0018 	add	r0, sp, #24
    8b70:	eb0046c1 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8b74:	e3e01006 	mvn	r1, #6
    8b78:	e28d0018 	add	r0, sp, #24
    8b7c:	eb0046b0 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8b80:	e28d0018 	add	r0, sp, #24
    8b84:	eb004681 	bl	1a590 <CDWHCIRegister::Write()>
    8b88:	e1a0000d 	mov	r0, sp
    8b8c:	eb004678 	bl	1a574 <CDWHCIRegister::Read()>
    8b90:	e1a0000d 	mov	r0, sp
    8b94:	e3e01c02 	mvn	r1, #512	@ 0x200
    8b98:	eb0046a9 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8b9c:	e3e01c01 	mvn	r1, #256	@ 0x100
    8ba0:	e1a0000d 	mov	r0, sp
    8ba4:	eb0046a6 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8ba8:	e1a0000d 	mov	r0, sp
    8bac:	eb004677 	bl	1a590 <CDWHCIRegister::Write()>
    8bb0:	e3a01014 	mov	r1, #20
    8bb4:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8bb8:	e28d0024 	add	r0, sp, #36	@ 0x24
    8bbc:	eb004662 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8bc0:	e28d0024 	add	r0, sp, #36	@ 0x24
    8bc4:	eb0046ed 	bl	1a780 <CDWHCIRegister::SetAll()>
    8bc8:	e28d0024 	add	r0, sp, #36	@ 0x24
    8bcc:	eb00466f 	bl	1a590 <CDWHCIRegister::Write()>
    8bd0:	e28d0024 	add	r0, sp, #36	@ 0x24
    8bd4:	eb004665 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8bd8:	e28d0018 	add	r0, sp, #24
    8bdc:	eb004663 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8be0:	e28d000c 	add	r0, sp, #12
    8be4:	eb004661 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8be8:	e1a0000d 	mov	r0, sp
    8bec:	eb00465f 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8bf0:	e1a00005 	mov	r0, r5
    8bf4:	e28dd034 	add	sp, sp, #52	@ 0x34
    8bf8:	e8bd8030 	pop	{r4, r5, pc}
    8bfc:	e28d000c 	add	r0, sp, #12
    8c00:	eb004670 	bl	1a5c8 <CDWHCIRegister::Get() const>
    8c04:	e2000c03 	and	r0, r0, #768	@ 0x300
    8c08:	e3500c01 	cmp	r0, #256	@ 0x100
    8c0c:	1affffb9 	bne	8af8 <CDWHCIDevice::InitCore()+0xd4>
    8c10:	e1a0000d 	mov	r0, sp
    8c14:	e3a01802 	mov	r1, #131072	@ 0x20000
    8c18:	eb004697 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8c1c:	e3a01702 	mov	r1, #524288	@ 0x80000
    8c20:	e1a0000d 	mov	r0, sp
    8c24:	eb004694 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8c28:	eaffffb8 	b	8b10 <CDWHCIDevice::InitCore()+0xec>
    8c2c:	eb0096e5 	bl	2e7c8 <CLogger::Get()>
    8c30:	e59f1068 	ldr	r1, [pc, #104]	@ 8ca0 <CDWHCIDevice::InitCore()+0x27c>
    8c34:	e3a02001 	mov	r2, #1
    8c38:	e3093da4 	movw	r3, #40356	@ 0x9da4
    8c3c:	e3403003 	movt	r3, #3
    8c40:	eb0098a9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8c44:	eaffffe7 	b	8be8 <CDWHCIDevice::InitCore()+0x1c4>
    8c48:	e3a01040 	mov	r1, #64	@ 0x40
    8c4c:	e1a0000d 	mov	r0, sp
    8c50:	eb004689 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8c54:	eaffff7f 	b	8a58 <CDWHCIDevice::InitCore()+0x34>
    8c58:	e3091d40 	movw	r1, #40256	@ 0x9d40
    8c5c:	e3401003 	movt	r1, #3
    8c60:	e3090e00 	movw	r0, #40448	@ 0x9e00
    8c64:	e3400003 	movt	r0, #3
    8c68:	e30021bb 	movw	r2, #443	@ 0x1bb
    8c6c:	eb008c5a 	bl	2bddc <assertion_failed>
    8c70:	e3091d40 	movw	r1, #40256	@ 0x9d40
    8c74:	e3401003 	movt	r1, #3
    8c78:	e3090db4 	movw	r0, #40372	@ 0x9db4
    8c7c:	e3400003 	movt	r0, #3
    8c80:	e30021a9 	movw	r2, #425	@ 0x1a9
    8c84:	eb008c54 	bl	2bddc <assertion_failed>
    8c88:	e3091d40 	movw	r1, #40256	@ 0x9d40
    8c8c:	e3401003 	movt	r1, #3
    8c90:	e3090dec 	movw	r0, #40428	@ 0x9dec
    8c94:	e3400003 	movt	r0, #3
    8c98:	e30021b9 	movw	r2, #441	@ 0x1b9
    8c9c:	eb008c4e 	bl	2bddc <assertion_failed>
    8ca0:	0003eb90 	.word	0x0003eb90

00008ca4 <CDWHCIDevice::EnableGlobalInterrupts()>:
    8ca4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    8ca8:	e3a01008 	mov	r1, #8
    8cac:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8cb0:	e24dd014 	sub	sp, sp, #20
    8cb4:	e28d0004 	add	r0, sp, #4
    8cb8:	eb004623 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8cbc:	e28d0004 	add	r0, sp, #4
    8cc0:	eb00462b 	bl	1a574 <CDWHCIRegister::Read()>
    8cc4:	e3a01001 	mov	r1, #1
    8cc8:	e28d0004 	add	r0, sp, #4
    8ccc:	eb00466a 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8cd0:	e28d0004 	add	r0, sp, #4
    8cd4:	eb00462d 	bl	1a590 <CDWHCIRegister::Write()>
    8cd8:	e28d0004 	add	r0, sp, #4
    8cdc:	eb004623 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8ce0:	e28dd014 	add	sp, sp, #20
    8ce4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

00008ce8 <CDWHCIDevice::EnableCommonInterrupts()>:
    8ce8:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    8cec:	e3a01014 	mov	r1, #20
    8cf0:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8cf4:	e24dd014 	sub	sp, sp, #20
    8cf8:	e28d0004 	add	r0, sp, #4
    8cfc:	eb004612 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8d00:	e28d0004 	add	r0, sp, #4
    8d04:	eb00469d 	bl	1a780 <CDWHCIRegister::SetAll()>
    8d08:	e28d0004 	add	r0, sp, #4
    8d0c:	eb00461f 	bl	1a590 <CDWHCIRegister::Write()>
    8d10:	e28d0004 	add	r0, sp, #4
    8d14:	eb004615 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8d18:	e28dd014 	add	sp, sp, #20
    8d1c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

00008d20 <CDWHCIDevice::EnableHostInterrupts()>:
    8d20:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    8d24:	e3a02000 	mov	r2, #0
    8d28:	e3a01018 	mov	r1, #24
    8d2c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8d30:	e24dd01c 	sub	sp, sp, #28
    8d34:	e1a0000d 	mov	r0, sp
    8d38:	eb004607 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8d3c:	e1a0000d 	mov	r0, sp
    8d40:	eb004612 	bl	1a590 <CDWHCIRegister::Write()>
    8d44:	e3a01014 	mov	r1, #20
    8d48:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8d4c:	e28d000c 	add	r0, sp, #12
    8d50:	eb0045fd 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8d54:	e28d000c 	add	r0, sp, #12
    8d58:	eb004688 	bl	1a780 <CDWHCIRegister::SetAll()>
    8d5c:	e28d000c 	add	r0, sp, #12
    8d60:	eb00460a 	bl	1a590 <CDWHCIRegister::Write()>
    8d64:	e28d000c 	add	r0, sp, #12
    8d68:	eb004600 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8d6c:	e1a0000d 	mov	r0, sp
    8d70:	eb0045ff 	bl	1a574 <CDWHCIRegister::Read()>
    8d74:	e1a0000d 	mov	r0, sp
    8d78:	e3a01008 	mov	r1, #8
    8d7c:	e3401200 	movt	r1, #512	@ 0x200
    8d80:	eb00463d 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8d84:	eb002ba5 	bl	13c20 <CUSBHostController::IsPlugAndPlay()>
    8d88:	e3500000 	cmp	r0, #0
    8d8c:	1a000005 	bne	8da8 <CDWHCIDevice::EnableHostInterrupts()+0x88>
    8d90:	e1a0000d 	mov	r0, sp
    8d94:	eb0045fd 	bl	1a590 <CDWHCIRegister::Write()>
    8d98:	e1a0000d 	mov	r0, sp
    8d9c:	eb0045f3 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8da0:	e28dd01c 	add	sp, sp, #28
    8da4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    8da8:	e3a01421 	mov	r1, #553648128	@ 0x21000000
    8dac:	e1a0000d 	mov	r0, sp
    8db0:	eb004631 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8db4:	eafffff5 	b	8d90 <CDWHCIDevice::EnableHostInterrupts()+0x70>

00008db8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>:
    8db8:	e92d4030 	push	{r4, r5, lr}
    8dbc:	e1a04000 	mov	r4, r0
    8dc0:	e1a05001 	mov	r5, r1
    8dc4:	e24dd014 	sub	sp, sp, #20
    8dc8:	e3001418 	movw	r1, #1048	@ 0x418
    8dcc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8dd0:	e28d0004 	add	r0, sp, #4
    8dd4:	eb0045dc 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8dd8:	e594006c 	ldr	r0, [r4, #108]	@ 0x6c
    8ddc:	e3500000 	cmp	r0, #0
    8de0:	1a00000e 	bne	8e20 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x68>
    8de4:	e28d0004 	add	r0, sp, #4
    8de8:	eb0045e1 	bl	1a574 <CDWHCIRegister::Read()>
    8dec:	e3a01001 	mov	r1, #1
    8df0:	e28d0004 	add	r0, sp, #4
    8df4:	e1a01511 	lsl	r1, r1, r5
    8df8:	eb00461f 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8dfc:	e28d0004 	add	r0, sp, #4
    8e00:	eb0045e2 	bl	1a590 <CDWHCIRegister::Write()>
    8e04:	e594306c 	ldr	r3, [r4, #108]	@ 0x6c
    8e08:	e3530000 	cmp	r3, #0
    8e0c:	1a000005 	bne	8e28 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x70>
    8e10:	e28d0004 	add	r0, sp, #4
    8e14:	eb0045d5 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8e18:	e28dd014 	add	sp, sp, #20
    8e1c:	e8bd8030 	pop	{r4, r5, pc}
    8e20:	eb00bad6 	bl	37980 <EnterCritical>
    8e24:	eaffffee 	b	8de4 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)+0x2c>
    8e28:	eb00baff 	bl	37a2c <LeaveCritical>
    8e2c:	e28d0004 	add	r0, sp, #4
    8e30:	eb0045ce 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8e34:	e28dd014 	add	sp, sp, #20
    8e38:	e8bd8030 	pop	{r4, r5, pc}

00008e3c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>:
    8e3c:	e92d4030 	push	{r4, r5, lr}
    8e40:	e1a04000 	mov	r4, r0
    8e44:	e1a05001 	mov	r5, r1
    8e48:	e24dd014 	sub	sp, sp, #20
    8e4c:	e3001418 	movw	r1, #1048	@ 0x418
    8e50:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8e54:	e28d0004 	add	r0, sp, #4
    8e58:	eb0045bb 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    8e5c:	e594006c 	ldr	r0, [r4, #108]	@ 0x6c
    8e60:	e3500000 	cmp	r0, #0
    8e64:	1a00000e 	bne	8ea4 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x68>
    8e68:	e28d0004 	add	r0, sp, #4
    8e6c:	eb0045c0 	bl	1a574 <CDWHCIRegister::Read()>
    8e70:	e3a01001 	mov	r1, #1
    8e74:	e28d0004 	add	r0, sp, #4
    8e78:	e1e01511 	mvn	r1, r1, lsl r5
    8e7c:	eb0045f0 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8e80:	e28d0004 	add	r0, sp, #4
    8e84:	eb0045c1 	bl	1a590 <CDWHCIRegister::Write()>
    8e88:	e594306c 	ldr	r3, [r4, #108]	@ 0x6c
    8e8c:	e3530000 	cmp	r3, #0
    8e90:	1a000005 	bne	8eac <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x70>
    8e94:	e28d0004 	add	r0, sp, #4
    8e98:	eb0045b4 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8e9c:	e28dd014 	add	sp, sp, #20
    8ea0:	e8bd8030 	pop	{r4, r5, pc}
    8ea4:	eb00bab5 	bl	37980 <EnterCritical>
    8ea8:	eaffffee 	b	8e68 <CDWHCIDevice::DisableChannelInterrupt(unsigned int)+0x2c>
    8eac:	eb00bade 	bl	37a2c <LeaveCritical>
    8eb0:	e28d0004 	add	r0, sp, #4
    8eb4:	eb0045ad 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8eb8:	e28dd014 	add	sp, sp, #20
    8ebc:	e8bd8030 	pop	{r4, r5, pc}

00008ec0 <CDWHCIDevice::FlushTxFIFO(unsigned int)>:
    8ec0:	e92d4030 	push	{r4, r5, lr}
    8ec4:	e3a02000 	mov	r2, #0
    8ec8:	e1a04001 	mov	r4, r1
    8ecc:	e24dd014 	sub	sp, sp, #20
    8ed0:	e3a01010 	mov	r1, #16
    8ed4:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8ed8:	e1a05000 	mov	r5, r0
    8edc:	e28d0004 	add	r0, sp, #4
    8ee0:	eb00459d 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8ee4:	e3a01020 	mov	r1, #32
    8ee8:	e28d0004 	add	r0, sp, #4
    8eec:	eb0045e2 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8ef0:	e28d0004 	add	r0, sp, #4
    8ef4:	e3e01d1f 	mvn	r1, #1984	@ 0x7c0
    8ef8:	eb0045d1 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    8efc:	e1a01304 	lsl	r1, r4, #6
    8f00:	e3a0400a 	mov	r4, #10
    8f04:	e28d0004 	add	r0, sp, #4
    8f08:	eb0045db 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8f0c:	e28d0004 	add	r0, sp, #4
    8f10:	eb00459e 	bl	1a590 <CDWHCIRegister::Write()>
    8f14:	e28d0004 	add	r0, sp, #4
    8f18:	eb004595 	bl	1a574 <CDWHCIRegister::Read()>
    8f1c:	e3100020 	tst	r0, #32
    8f20:	1a000005 	bne	8f3c <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x7c>
    8f24:	e3a00001 	mov	r0, #1
    8f28:	eb00b010 	bl	34f70 <CTimer::SimpleusDelay(unsigned int)>
    8f2c:	e28d0004 	add	r0, sp, #4
    8f30:	eb00458e 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8f34:	e28dd014 	add	sp, sp, #20
    8f38:	e8bd8030 	pop	{r4, r5, pc}
    8f3c:	e5953014 	ldr	r3, [r5, #20]
    8f40:	e3530000 	cmp	r3, #0
    8f44:	0a000007 	beq	8f68 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0xa8>
    8f48:	e3a00001 	mov	r0, #1
    8f4c:	eb00aff8 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    8f50:	e2544001 	subs	r4, r4, #1
    8f54:	1affffee 	bne	8f14 <CDWHCIDevice::FlushTxFIFO(unsigned int)+0x54>
    8f58:	e28d0004 	add	r0, sp, #4
    8f5c:	eb004583 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8f60:	e28dd014 	add	sp, sp, #20
    8f64:	e8bd8030 	pop	{r4, r5, pc}
    8f68:	e3091d40 	movw	r1, #40256	@ 0x9d40
    8f6c:	e3401003 	movt	r1, #3
    8f70:	e3090d94 	movw	r0, #40340	@ 0x9d94
    8f74:	e3400003 	movt	r0, #3
    8f78:	e3002697 	movw	r2, #1687	@ 0x697
    8f7c:	eb008b96 	bl	2bddc <assertion_failed>

00008f80 <CDWHCIDevice::FlushRxFIFO()>:
    8f80:	e92d4030 	push	{r4, r5, lr}
    8f84:	e3a02000 	mov	r2, #0
    8f88:	e1a05000 	mov	r5, r0
    8f8c:	e24dd014 	sub	sp, sp, #20
    8f90:	e3a01010 	mov	r1, #16
    8f94:	e3431f98 	movt	r1, #16280	@ 0x3f98
    8f98:	e28d0004 	add	r0, sp, #4
    8f9c:	e3a0400a 	mov	r4, #10
    8fa0:	eb00456d 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    8fa4:	e3a01010 	mov	r1, #16
    8fa8:	e28d0004 	add	r0, sp, #4
    8fac:	eb0045b2 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    8fb0:	e28d0004 	add	r0, sp, #4
    8fb4:	eb004575 	bl	1a590 <CDWHCIRegister::Write()>
    8fb8:	e28d0004 	add	r0, sp, #4
    8fbc:	eb00456c 	bl	1a574 <CDWHCIRegister::Read()>
    8fc0:	e3100010 	tst	r0, #16
    8fc4:	1a000005 	bne	8fe0 <CDWHCIDevice::FlushRxFIFO()+0x60>
    8fc8:	e3a00001 	mov	r0, #1
    8fcc:	eb00afe7 	bl	34f70 <CTimer::SimpleusDelay(unsigned int)>
    8fd0:	e28d0004 	add	r0, sp, #4
    8fd4:	eb004565 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    8fd8:	e28dd014 	add	sp, sp, #20
    8fdc:	e8bd8030 	pop	{r4, r5, pc}
    8fe0:	e5953014 	ldr	r3, [r5, #20]
    8fe4:	e3530000 	cmp	r3, #0
    8fe8:	0a000007 	beq	900c <CDWHCIDevice::FlushRxFIFO()+0x8c>
    8fec:	e3a00001 	mov	r0, #1
    8ff0:	eb00afcf 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    8ff4:	e2544001 	subs	r4, r4, #1
    8ff8:	1affffee 	bne	8fb8 <CDWHCIDevice::FlushRxFIFO()+0x38>
    8ffc:	e28d0004 	add	r0, sp, #4
    9000:	eb00455a 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9004:	e28dd014 	add	sp, sp, #20
    9008:	e8bd8030 	pop	{r4, r5, pc}
    900c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9010:	e3401003 	movt	r1, #3
    9014:	e3090d94 	movw	r0, #40340	@ 0x9d94
    9018:	e3400003 	movt	r0, #3
    901c:	e3002697 	movw	r2, #1687	@ 0x697
    9020:	eb008b6d 	bl	2bddc <assertion_failed>

00009024 <CDWHCIDevice::InitHost()>:
    9024:	e92d4010 	push	{r4, lr}
    9028:	e3a02000 	mov	r2, #0
    902c:	e1a04000 	mov	r4, r0
    9030:	e24dd060 	sub	sp, sp, #96	@ 0x60
    9034:	e3a01c0e 	mov	r1, #3584	@ 0xe00
    9038:	e3431f98 	movt	r1, #16280	@ 0x3f98
    903c:	e1a0000d 	mov	r0, sp
    9040:	eb004545 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9044:	e1a0000d 	mov	r0, sp
    9048:	eb004550 	bl	1a590 <CDWHCIRegister::Write()>
    904c:	e3a01b01 	mov	r1, #1024	@ 0x400
    9050:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9054:	e28d000c 	add	r0, sp, #12
    9058:	eb00453b 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    905c:	e28d000c 	add	r0, sp, #12
    9060:	eb004543 	bl	1a574 <CDWHCIRegister::Read()>
    9064:	e28d000c 	add	r0, sp, #12
    9068:	e3e01003 	mvn	r1, #3
    906c:	eb004574 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    9070:	e3a01048 	mov	r1, #72	@ 0x48
    9074:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9078:	e28d0018 	add	r0, sp, #24
    907c:	eb004532 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9080:	e3a0100c 	mov	r1, #12
    9084:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9088:	e28d0024 	add	r0, sp, #36	@ 0x24
    908c:	eb00452e 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9090:	e28d0018 	add	r0, sp, #24
    9094:	eb004536 	bl	1a574 <CDWHCIRegister::Read()>
    9098:	e20000c0 	and	r0, r0, #192	@ 0xc0
    909c:	e3500080 	cmp	r0, #128	@ 0x80
    90a0:	0a00004c 	beq	91d8 <CDWHCIDevice::InitHost()+0x1b4>
    90a4:	e3a01000 	mov	r1, #0
    90a8:	e28d000c 	add	r0, sp, #12
    90ac:	eb004572 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    90b0:	e28d000c 	add	r0, sp, #12
    90b4:	eb004535 	bl	1a590 <CDWHCIRegister::Write()>
    90b8:	e3a02b01 	mov	r2, #1024	@ 0x400
    90bc:	e3a01024 	mov	r1, #36	@ 0x24
    90c0:	e3431f98 	movt	r1, #16280	@ 0x3f98
    90c4:	e28d0030 	add	r0, sp, #48	@ 0x30
    90c8:	eb004523 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    90cc:	e28d0030 	add	r0, sp, #48	@ 0x30
    90d0:	eb00452e 	bl	1a590 <CDWHCIRegister::Write()>
    90d4:	e3a02000 	mov	r2, #0
    90d8:	e3a01028 	mov	r1, #40	@ 0x28
    90dc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    90e0:	e28d003c 	add	r0, sp, #60	@ 0x3c
    90e4:	eb00451c 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    90e8:	e3a01b01 	mov	r1, #1024	@ 0x400
    90ec:	e28d003c 	add	r0, sp, #60	@ 0x3c
    90f0:	eb004561 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    90f4:	e3a01301 	mov	r1, #67108864	@ 0x4000000
    90f8:	e28d003c 	add	r0, sp, #60	@ 0x3c
    90fc:	eb00455e 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9100:	e28d003c 	add	r0, sp, #60	@ 0x3c
    9104:	eb004521 	bl	1a590 <CDWHCIRegister::Write()>
    9108:	e3a02000 	mov	r2, #0
    910c:	e3a01c01 	mov	r1, #256	@ 0x100
    9110:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9114:	e28d0048 	add	r0, sp, #72	@ 0x48
    9118:	eb00450f 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    911c:	e3a01b02 	mov	r1, #2048	@ 0x800
    9120:	e28d0048 	add	r0, sp, #72	@ 0x48
    9124:	eb004554 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9128:	e3a01301 	mov	r1, #67108864	@ 0x4000000
    912c:	e28d0048 	add	r0, sp, #72	@ 0x48
    9130:	eb004551 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9134:	e28d0048 	add	r0, sp, #72	@ 0x48
    9138:	eb004514 	bl	1a590 <CDWHCIRegister::Write()>
    913c:	e3a01010 	mov	r1, #16
    9140:	e1a00004 	mov	r0, r4
    9144:	ebffff5d 	bl	8ec0 <CDWHCIDevice::FlushTxFIFO(unsigned int)>
    9148:	e1a00004 	mov	r0, r4
    914c:	ebffff8b 	bl	8f80 <CDWHCIDevice::FlushRxFIFO()>
    9150:	e3a01d11 	mov	r1, #1088	@ 0x440
    9154:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9158:	e28d0054 	add	r0, sp, #84	@ 0x54
    915c:	eb0044fa 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9160:	e28d0054 	add	r0, sp, #84	@ 0x54
    9164:	eb004502 	bl	1a574 <CDWHCIRegister::Read()>
    9168:	e28d0054 	add	r0, sp, #84	@ 0x54
    916c:	e3e0102e 	mvn	r1, #46	@ 0x2e
    9170:	eb004533 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    9174:	e28d0054 	add	r0, sp, #84	@ 0x54
    9178:	eb004512 	bl	1a5c8 <CDWHCIRegister::Get() const>
    917c:	e3100a01 	tst	r0, #4096	@ 0x1000
    9180:	0a000021 	beq	920c <CDWHCIDevice::InitHost()+0x1e8>
    9184:	e1a00004 	mov	r0, r4
    9188:	ebfffee4 	bl	8d20 <CDWHCIDevice::EnableHostInterrupts()>
    918c:	e28d0054 	add	r0, sp, #84	@ 0x54
    9190:	eb0044f6 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9194:	e28d0048 	add	r0, sp, #72	@ 0x48
    9198:	eb0044f4 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    919c:	e28d003c 	add	r0, sp, #60	@ 0x3c
    91a0:	eb0044f2 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    91a4:	e28d0030 	add	r0, sp, #48	@ 0x30
    91a8:	eb0044f0 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    91ac:	e28d0024 	add	r0, sp, #36	@ 0x24
    91b0:	eb0044ee 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    91b4:	e28d0018 	add	r0, sp, #24
    91b8:	eb0044ec 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    91bc:	e28d000c 	add	r0, sp, #12
    91c0:	eb0044ea 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    91c4:	e1a0000d 	mov	r0, sp
    91c8:	eb0044e8 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    91cc:	e3a00001 	mov	r0, #1
    91d0:	e28dd060 	add	sp, sp, #96	@ 0x60
    91d4:	e8bd8010 	pop	{r4, pc}
    91d8:	e28d0018 	add	r0, sp, #24
    91dc:	eb0044f9 	bl	1a5c8 <CDWHCIRegister::Get() const>
    91e0:	e2000c03 	and	r0, r0, #768	@ 0x300
    91e4:	e3500c01 	cmp	r0, #256	@ 0x100
    91e8:	1affffad 	bne	90a4 <CDWHCIDevice::InitHost()+0x80>
    91ec:	e28d0024 	add	r0, sp, #36	@ 0x24
    91f0:	eb0044df 	bl	1a574 <CDWHCIRegister::Read()>
    91f4:	e3100802 	tst	r0, #131072	@ 0x20000
    91f8:	0affffa9 	beq	90a4 <CDWHCIDevice::InitHost()+0x80>
    91fc:	e3a01001 	mov	r1, #1
    9200:	e28d000c 	add	r0, sp, #12
    9204:	eb00451c 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9208:	eaffffa8 	b	90b0 <CDWHCIDevice::InitHost()+0x8c>
    920c:	e28d0054 	add	r0, sp, #84	@ 0x54
    9210:	e3a01a01 	mov	r1, #4096	@ 0x1000
    9214:	eb004518 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9218:	e28d0054 	add	r0, sp, #84	@ 0x54
    921c:	eb0044db 	bl	1a590 <CDWHCIRegister::Write()>
    9220:	eaffffd7 	b	9184 <CDWHCIDevice::InitHost()+0x160>

00009224 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>:
    9224:	e92d4030 	push	{r4, r5, lr}
    9228:	e2515000 	subs	r5, r1, #0
    922c:	e24dd01c 	sub	sp, sp, #28
    9230:	0a00001a 	beq	92a0 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x7c>
    9234:	e1a04000 	mov	r4, r0
    9238:	e1a00005 	mov	r0, r5
    923c:	eb001221 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    9240:	e2503000 	subs	r3, r0, #0
    9244:	0a000008 	beq	926c <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x48>
    9248:	e5933000 	ldr	r3, [r3]
    924c:	e5933014 	ldr	r3, [r3, #20]
    9250:	e12fff33 	blx	r3
    9254:	e1a02000 	mov	r2, r0
    9258:	e1a01005 	mov	r1, r5
    925c:	e2840024 	add	r0, r4, #36	@ 0x24
    9260:	e28dd01c 	add	sp, sp, #28
    9264:	e8bd4030 	pop	{r4, r5, lr}
    9268:	ea000e3e 	b	cb68 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
    926c:	e28d000c 	add	r0, sp, #12
    9270:	e3001408 	movw	r1, #1032	@ 0x408
    9274:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9278:	eb0044b3 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    927c:	e28d000c 	add	r0, sp, #12
    9280:	eb0044bb 	bl	1a574 <CDWHCIRegister::Read()>
    9284:	e2802001 	add	r2, r0, #1
    9288:	e28d000c 	add	r0, sp, #12
    928c:	e7ed2052 	ubfx	r2, r2, #0, #14
    9290:	e58d2004 	str	r2, [sp, #4]
    9294:	eb0044b5 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9298:	e59d2004 	ldr	r2, [sp, #4]
    929c:	eaffffed 	b	9258 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)+0x34>
    92a0:	e3091d40 	movw	r1, #40256	@ 0x9d40
    92a4:	e3401003 	movt	r1, #3
    92a8:	e30a061c 	movw	r0, #42524	@ 0xa61c
    92ac:	e3400003 	movt	r0, #3
    92b0:	e3a02fca 	mov	r2, #808	@ 0x328
    92b4:	eb008ac8 	bl	2bddc <assertion_failed>

000092b8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>:
    92b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    92bc:	e2515000 	subs	r5, r1, #0
    92c0:	e24dd008 	sub	sp, sp, #8
    92c4:	0a000024 	beq	935c <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0xa4>
    92c8:	e1a06000 	mov	r6, r0
    92cc:	e3a00c01 	mov	r0, #256	@ 0x100
    92d0:	e1a07002 	mov	r7, r2
    92d4:	e1a08003 	mov	r8, r3
    92d8:	eb0011fc 	bl	dad0 <CDWHCITransferStageData::operator new(unsigned int)>
    92dc:	e59d1020 	ldr	r1, [sp, #32]
    92e0:	e1a04000 	mov	r4, r0
    92e4:	e1a03007 	mov	r3, r7
    92e8:	e1a02005 	mov	r2, r5
    92ec:	e58d1004 	str	r1, [sp, #4]
    92f0:	e58d8000 	str	r8, [sp]
    92f4:	e3a01010 	mov	r1, #16
    92f8:	eb000ed4 	bl	ce50 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>
    92fc:	e1a00004 	mov	r0, r4
    9300:	eb00112d 	bl	d7bc <CDWHCITransferStageData::IsSplit() const>
    9304:	e2501000 	subs	r1, r0, #0
    9308:	0a000010 	beq	9350 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x98>
    930c:	e3a01001 	mov	r1, #1
    9310:	e1a00004 	mov	r0, r4
    9314:	eb0010a1 	bl	d5a0 <CDWHCITransferStageData::SetState(unsigned int)>
    9318:	e3a01000 	mov	r1, #0
    931c:	e1a00004 	mov	r0, r4
    9320:	eb001092 	bl	d570 <CDWHCITransferStageData::SetSplitComplete(bool)>
    9324:	e1a00004 	mov	r0, r4
    9328:	eb0011e6 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    932c:	e5903000 	ldr	r3, [r0]
    9330:	e5933008 	ldr	r3, [r3, #8]
    9334:	e12fff33 	blx	r3
    9338:	e1a00006 	mov	r0, r6
    933c:	e1a01004 	mov	r1, r4
    9340:	ebffffb7 	bl	9224 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    9344:	e3a00001 	mov	r0, #1
    9348:	e28dd008 	add	sp, sp, #8
    934c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9350:	e1a00004 	mov	r0, r4
    9354:	eb001091 	bl	d5a0 <CDWHCITransferStageData::SetState(unsigned int)>
    9358:	eafffff6 	b	9338 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)+0x80>
    935c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9360:	e3401003 	movt	r1, #3
    9364:	e3090e38 	movw	r0, #40504	@ 0x9e38
    9368:	e3400003 	movt	r0, #3
    936c:	e30022f7 	movw	r2, #759	@ 0x2f7
    9370:	eb008a99 	bl	2bddc <assertion_failed>

00009374 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)>:
    9374:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9378:	e5d03095 	ldrb	r3, [r0, #149]	@ 0x95
    937c:	e24dd00c 	sub	sp, sp, #12
    9380:	e21350ff 	ands	r5, r3, #255	@ 0xff
    9384:	1a00001b 	bne	93f8 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x84>
    9388:	e1a04001 	mov	r4, r1
    938c:	e3510000 	cmp	r1, #0
    9390:	0a000021 	beq	941c <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xa8>
    9394:	e1a07000 	mov	r7, r0
    9398:	e1a00001 	mov	r0, r1
    939c:	e1a06002 	mov	r6, r2
    93a0:	eb003432 	bl	16470 <CUSBRequest::GetEndpoint() const>
    93a4:	eb001b1e 	bl	10024 <CUSBEndpoint::GetType() const>
    93a8:	e3500000 	cmp	r0, #0
    93ac:	0a000020 	beq	9434 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0xc0>
    93b0:	e1a00004 	mov	r0, r4
    93b4:	eb00347a 	bl	165a4 <CUSBRequest::GetBufLen() const>
    93b8:	e3500000 	cmp	r0, #0
    93bc:	0a000010 	beq	9404 <CDWHCIDevice::SubmitAsyncRequest(CUSBRequest*, unsigned int)+0x90>
    93c0:	e1a01005 	mov	r1, r5
    93c4:	e1a00004 	mov	r0, r4
    93c8:	eb003432 	bl	16498 <CUSBRequest::SetStatus(int)>
    93cc:	e1a00004 	mov	r0, r4
    93d0:	eb003426 	bl	16470 <CUSBRequest::GetEndpoint() const>
    93d4:	eb001b14 	bl	1002c <CUSBEndpoint::IsDirectionIn() const>
    93d8:	e1a03005 	mov	r3, r5
    93dc:	e1a02000 	mov	r2, r0
    93e0:	e1a01004 	mov	r1, r4
    93e4:	e1a00007 	mov	r0, r7
    93e8:	e58d6000 	str	r6, [sp]
    93ec:	ebffffb1 	bl	92b8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    93f0:	e28dd00c 	add	sp, sp, #12
    93f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    93f8:	e3a00000 	mov	r0, #0
    93fc:	e28dd00c 	add	sp, sp, #12
    9400:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9404:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9408:	e3401003 	movt	r1, #3
    940c:	e3090e7c 	movw	r0, #40572	@ 0x9e7c
    9410:	e3400003 	movt	r0, #3
    9414:	e3002139 	movw	r2, #313	@ 0x139
    9418:	eb008a6f 	bl	2bddc <assertion_failed>
    941c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9420:	e3401003 	movt	r1, #3
    9424:	e3090e38 	movw	r0, #40504	@ 0x9e38
    9428:	e3400003 	movt	r0, #3
    942c:	e3002137 	movw	r2, #311	@ 0x137
    9430:	eb008a69 	bl	2bddc <assertion_failed>
    9434:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9438:	e3401003 	movt	r1, #3
    943c:	e3090e44 	movw	r0, #40516	@ 0x9e44
    9440:	e3400003 	movt	r0, #3
    9444:	e3a02f4e 	mov	r2, #312	@ 0x138
    9448:	eb008a63 	bl	2bddc <assertion_failed>

0000944c <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)>:
    944c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    9450:	e2515000 	subs	r5, r1, #0
    9454:	e24dd01c 	sub	sp, sp, #28
    9458:	0a000044 	beq	9570 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x124>
    945c:	e1a06000 	mov	r6, r0
    9460:	e1a00005 	mov	r0, r5
    9464:	eb001183 	bl	da78 <CDWHCITransferStageData::GetURB() const>
    9468:	e3500000 	cmp	r0, #0
    946c:	0a000045 	beq	9588 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x13c>
    9470:	eb0033fe 	bl	16470 <CUSBRequest::GetEndpoint() const>
    9474:	eb001af4 	bl	1004c <CUSBEndpoint::GetInterval() const>
    9478:	e3a01d11 	mov	r1, #1088	@ 0x440
    947c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9480:	e6ff4070 	uxth	r4, r0
    9484:	e1a0000d 	mov	r0, sp
    9488:	eb00442f 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    948c:	e1a0000d 	mov	r0, sp
    9490:	eb004437 	bl	1a574 <CDWHCIRegister::Read()>
    9494:	e3100806 	tst	r0, #393216	@ 0x60000
    9498:	01a04184 	lsleq	r4, r4, #3
    949c:	e3013ffe 	movw	r3, #8190	@ 0x1ffe
    94a0:	06ff4074 	uxtheq	r4, r4
    94a4:	e1540003 	cmp	r4, r3
    94a8:	8a00003c 	bhi	95a0 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x154>
    94ac:	e1a00005 	mov	r0, r5
    94b0:	eb0010c1 	bl	d7bc <CDWHCITransferStageData::IsSplit() const>
    94b4:	e2507000 	subs	r7, r0, #0
    94b8:	0a000017 	beq	951c <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0xd0>
    94bc:	e1a00005 	mov	r0, r5
    94c0:	eb001180 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    94c4:	e2507000 	subs	r7, r0, #0
    94c8:	0a00003a 	beq	95b8 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x16c>
    94cc:	e5973000 	ldr	r3, [r7]
    94d0:	e1a01004 	mov	r1, r4
    94d4:	e5933018 	ldr	r3, [r3, #24]
    94d8:	e12fff33 	blx	r3
    94dc:	e5973000 	ldr	r3, [r7]
    94e0:	e1a00007 	mov	r0, r7
    94e4:	e5933014 	ldr	r3, [r3, #20]
    94e8:	e12fff33 	blx	r3
    94ec:	e3a01001 	mov	r1, #1
    94f0:	e1a04000 	mov	r4, r0
    94f4:	e1a00005 	mov	r0, r5
    94f8:	eb001028 	bl	d5a0 <CDWHCITransferStageData::SetState(unsigned int)>
    94fc:	e1a00005 	mov	r0, r5
    9500:	e3a01000 	mov	r1, #0
    9504:	eb001019 	bl	d570 <CDWHCITransferStageData::SetSplitComplete(bool)>
    9508:	e5973000 	ldr	r3, [r7]
    950c:	e1a00007 	mov	r0, r7
    9510:	e5933008 	ldr	r3, [r3, #8]
    9514:	e12fff33 	blx	r3
    9518:	ea00000c 	b	9550 <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)+0x104>
    951c:	e28d000c 	add	r0, sp, #12
    9520:	e3001408 	movw	r1, #1032	@ 0x408
    9524:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9528:	eb004407 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    952c:	e28d000c 	add	r0, sp, #12
    9530:	eb00440f 	bl	1a574 <CDWHCIRegister::Read()>
    9534:	e1a01007 	mov	r1, r7
    9538:	e0844000 	add	r4, r4, r0
    953c:	e1a00005 	mov	r0, r5
    9540:	eb001016 	bl	d5a0 <CDWHCITransferStageData::SetState(unsigned int)>
    9544:	e28d000c 	add	r0, sp, #12
    9548:	e7ed4054 	ubfx	r4, r4, #0, #14
    954c:	eb004407 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9550:	e1a02004 	mov	r2, r4
    9554:	e1a01005 	mov	r1, r5
    9558:	e2860024 	add	r0, r6, #36	@ 0x24
    955c:	eb000d81 	bl	cb68 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>
    9560:	e1a0000d 	mov	r0, sp
    9564:	eb004401 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9568:	e28dd01c 	add	sp, sp, #28
    956c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    9570:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9574:	e3401003 	movt	r1, #3
    9578:	e30a061c 	movw	r0, #42524	@ 0xa61c
    957c:	e3400003 	movt	r0, #3
    9580:	e300233b 	movw	r2, #827	@ 0x33b
    9584:	eb008a14 	bl	2bddc <assertion_failed>
    9588:	e3091d40 	movw	r1, #40256	@ 0x9d40
    958c:	e3401003 	movt	r1, #3
    9590:	e3090e38 	movw	r0, #40504	@ 0x9e38
    9594:	e3400003 	movt	r0, #3
    9598:	e300233d 	movw	r2, #829	@ 0x33d
    959c:	eb008a0e 	bl	2bddc <assertion_failed>
    95a0:	e3091d40 	movw	r1, #40256	@ 0x9d40
    95a4:	e3401003 	movt	r1, #3
    95a8:	e3090e94 	movw	r0, #40596	@ 0x9e94
    95ac:	e3400003 	movt	r0, #3
    95b0:	e3002345 	movw	r2, #837	@ 0x345
    95b4:	eb008a08 	bl	2bddc <assertion_failed>
    95b8:	e3091d40 	movw	r1, #40256	@ 0x9d40
    95bc:	e3401003 	movt	r1, #3
    95c0:	e3090ec0 	movw	r0, #40640	@ 0x9ec0
    95c4:	e3400003 	movt	r0, #3
    95c8:	e3a02fd3 	mov	r2, #844	@ 0x34c
    95cc:	eb008a02 	bl	2bddc <assertion_failed>

000095d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>:
    95d0:	e92d4070 	push	{r4, r5, r6, lr}
    95d4:	e2514000 	subs	r4, r1, #0
    95d8:	e24dd048 	sub	sp, sp, #72	@ 0x48
    95dc:	0a0000ef 	beq	99a0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3d0>
    95e0:	e1a06000 	mov	r6, r0
    95e4:	e1a00004 	mov	r0, r4
    95e8:	eb000ff4 	bl	d5c0 <CDWHCITransferStageData::GetChannelNumber() const>
    95ec:	e1a05000 	mov	r5, r0
    95f0:	e5963018 	ldr	r3, [r6, #24]
    95f4:	e1530000 	cmp	r3, r0
    95f8:	9a0000ee 	bls	99b8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3e8>
    95fc:	e3a01001 	mov	r1, #1
    9600:	e1a00004 	mov	r0, r4
    9604:	eb000fe9 	bl	d5b0 <CDWHCITransferStageData::SetSubState(unsigned int)>
    9608:	e1a05285 	lsl	r5, r5, #5
    960c:	e3001508 	movw	r1, #1288	@ 0x508
    9610:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9614:	e0851001 	add	r1, r5, r1
    9618:	e1a0000d 	mov	r0, sp
    961c:	eb0043ca 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9620:	e1a0000d 	mov	r0, sp
    9624:	eb004455 	bl	1a780 <CDWHCIRegister::SetAll()>
    9628:	e1a0000d 	mov	r0, sp
    962c:	eb0043d7 	bl	1a590 <CDWHCIRegister::Write()>
    9630:	e3a01e51 	mov	r1, #1296	@ 0x510
    9634:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9638:	e3a02000 	mov	r2, #0
    963c:	e0851001 	add	r1, r5, r1
    9640:	e28d000c 	add	r0, sp, #12
    9644:	eb0043c4 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    9648:	e1a00004 	mov	r0, r4
    964c:	eb001056 	bl	d7ac <CDWHCITransferStageData::GetBytesToTransfer() const>
    9650:	e7f21050 	ubfx	r1, r0, #0, #19
    9654:	e28d000c 	add	r0, sp, #12
    9658:	eb004407 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    965c:	e1a00004 	mov	r0, r4
    9660:	eb001053 	bl	d7b4 <CDWHCITransferStageData::GetPacketsToTransfer() const>
    9664:	e3a01000 	mov	r1, #0
    9668:	e3411ff8 	movt	r1, #8184	@ 0x1ff8
    966c:	e0011980 	and	r1, r1, r0, lsl #19
    9670:	e28d000c 	add	r0, sp, #12
    9674:	eb004400 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9678:	e1a00004 	mov	r0, r4
    967c:	eb001022 	bl	d70c <CDWHCITransferStageData::GetPID() const>
    9680:	e1a01e80 	lsl	r1, r0, #29
    9684:	e28d000c 	add	r0, sp, #12
    9688:	eb0043fb 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    968c:	e28d000c 	add	r0, sp, #12
    9690:	eb0043be 	bl	1a590 <CDWHCIRegister::Write()>
    9694:	e1a00004 	mov	r0, r4
    9698:	eb001039 	bl	d784 <CDWHCITransferStageData::GetDMAAddress() const>
    969c:	e3001514 	movw	r1, #1300	@ 0x514
    96a0:	e3431f98 	movt	r1, #16280	@ 0x3f98
    96a4:	e3802103 	orr	r2, r0, #-1073741824	@ 0xc0000000
    96a8:	e0851001 	add	r1, r5, r1
    96ac:	e28d0018 	add	r0, sp, #24
    96b0:	eb0043a9 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    96b4:	e28d0018 	add	r0, sp, #24
    96b8:	eb0043b4 	bl	1a590 <CDWHCIRegister::Write()>
    96bc:	e1a00004 	mov	r0, r4
    96c0:	eb00102f 	bl	d784 <CDWHCITransferStageData::GetDMAAddress() const>
    96c4:	e1a06000 	mov	r6, r0
    96c8:	e1a00004 	mov	r0, r4
    96cc:	eb001036 	bl	d7ac <CDWHCITransferStageData::GetBytesToTransfer() const>
    96d0:	e1a01000 	mov	r1, r0
    96d4:	e1a00006 	mov	r0, r6
    96d8:	eb00b65b 	bl	3704c <CleanAndInvalidateDataCacheRange>
    96dc:	e3001504 	movw	r1, #1284	@ 0x504
    96e0:	e3431f98 	movt	r1, #16280	@ 0x3f98
    96e4:	e3a02000 	mov	r2, #0
    96e8:	e0851001 	add	r1, r5, r1
    96ec:	e28d0024 	add	r0, sp, #36	@ 0x24
    96f0:	eb004399 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    96f4:	e1a00004 	mov	r0, r4
    96f8:	eb00102f 	bl	d7bc <CDWHCITransferStageData::IsSplit() const>
    96fc:	e3500000 	cmp	r0, #0
    9700:	1a00007c 	bne	98f8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x328>
    9704:	e28d0024 	add	r0, sp, #36	@ 0x24
    9708:	eb0043a0 	bl	1a590 <CDWHCIRegister::Write()>
    970c:	e3a01c05 	mov	r1, #1280	@ 0x500
    9710:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9714:	e28d0030 	add	r0, sp, #48	@ 0x30
    9718:	e0851001 	add	r1, r5, r1
    971c:	eb00438a 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9720:	e28d0030 	add	r0, sp, #48	@ 0x30
    9724:	eb004392 	bl	1a574 <CDWHCIRegister::Read()>
    9728:	e28d0030 	add	r0, sp, #48	@ 0x30
    972c:	e3a01b3e 	mov	r1, #63488	@ 0xf800
    9730:	e34f1fff 	movt	r1, #65535	@ 0xffff
    9734:	eb0043c2 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    9738:	e1a00004 	mov	r0, r4
    973c:	eb000fee 	bl	d6fc <CDWHCITransferStageData::GetMaxPacketSize() const>
    9740:	e7ea1050 	ubfx	r1, r0, #0, #11
    9744:	e28d0030 	add	r0, sp, #48	@ 0x30
    9748:	eb0043cb 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    974c:	e28d0030 	add	r0, sp, #48	@ 0x30
    9750:	e3e01603 	mvn	r1, #3145728	@ 0x300000
    9754:	eb0043ba 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    9758:	e3a01601 	mov	r1, #1048576	@ 0x100000
    975c:	e28d0030 	add	r0, sp, #48	@ 0x30
    9760:	eb0043c5 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9764:	e1a00004 	mov	r0, r4
    9768:	eb001001 	bl	d774 <CDWHCITransferStageData::IsDirectionIn() const>
    976c:	e3500000 	cmp	r0, #0
    9770:	1a000050 	bne	98b8 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x2e8>
    9774:	e28d0030 	add	r0, sp, #48	@ 0x30
    9778:	e3e01902 	mvn	r1, #32768	@ 0x8000
    977c:	eb0043b0 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    9780:	e1a00004 	mov	r0, r4
    9784:	eb000fde 	bl	d704 <CDWHCITransferStageData::GetSpeed() const>
    9788:	e3500000 	cmp	r0, #0
    978c:	1a000050 	bne	98d4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x304>
    9790:	e3a01802 	mov	r1, #131072	@ 0x20000
    9794:	e28d0030 	add	r0, sp, #48	@ 0x30
    9798:	eb0043b7 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    979c:	e3e0157f 	mvn	r1, #532676608	@ 0x1fc00000
    97a0:	e28d0030 	add	r0, sp, #48	@ 0x30
    97a4:	eb0043a6 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    97a8:	e1a00004 	mov	r0, r4
    97ac:	eb000fa5 	bl	d648 <CDWHCITransferStageData::GetDeviceAddress() const>
    97b0:	e1a01b00 	lsl	r1, r0, #22
    97b4:	e28d0030 	add	r0, sp, #48	@ 0x30
    97b8:	eb0043af 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    97bc:	e3e01703 	mvn	r1, #786432	@ 0xc0000
    97c0:	e28d0030 	add	r0, sp, #48	@ 0x30
    97c4:	eb00439e 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    97c8:	e1a00004 	mov	r0, r4
    97cc:	eb000fa8 	bl	d674 <CDWHCITransferStageData::GetEndpointType() const>
    97d0:	e1a01900 	lsl	r1, r0, #18
    97d4:	e28d0030 	add	r0, sp, #48	@ 0x30
    97d8:	eb0043a7 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    97dc:	e3e01b1e 	mvn	r1, #30720	@ 0x7800
    97e0:	e28d0030 	add	r0, sp, #48	@ 0x30
    97e4:	eb004396 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    97e8:	e1a00004 	mov	r0, r4
    97ec:	eb000fb7 	bl	d6d0 <CDWHCITransferStageData::GetEndpointNumber() const>
    97f0:	e1a01580 	lsl	r1, r0, #11
    97f4:	e28d0030 	add	r0, sp, #48	@ 0x30
    97f8:	eb00439f 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    97fc:	e1a00004 	mov	r0, r4
    9800:	eb0010b0 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    9804:	e2503000 	subs	r3, r0, #0
    9808:	0a000055 	beq	9964 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x394>
    980c:	e5933000 	ldr	r3, [r3]
    9810:	e593301c 	ldr	r3, [r3, #28]
    9814:	e12fff33 	blx	r3
    9818:	e3500000 	cmp	r0, #0
    981c:	0a000030 	beq	98e4 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x314>
    9820:	e28d603c 	add	r6, sp, #60	@ 0x3c
    9824:	e3a01202 	mov	r1, #536870912	@ 0x20000000
    9828:	e28d0030 	add	r0, sp, #48	@ 0x30
    982c:	eb004392 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9830:	e300150c 	movw	r1, #1292	@ 0x50c
    9834:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9838:	e0851001 	add	r1, r5, r1
    983c:	e1a00006 	mov	r0, r6
    9840:	eb004341 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9844:	e1a00004 	mov	r0, r4
    9848:	eb001035 	bl	d924 <CDWHCITransferStageData::GetStatusMask() const>
    984c:	e1a01000 	mov	r1, r0
    9850:	e1a00006 	mov	r0, r6
    9854:	eb004367 	bl	1a5f8 <CDWHCIRegister::Set(unsigned int)>
    9858:	e1a00006 	mov	r0, r6
    985c:	eb00434b 	bl	1a590 <CDWHCIRegister::Write()>
    9860:	e28d0030 	add	r0, sp, #48	@ 0x30
    9864:	e3a01102 	mov	r1, #-2147483648	@ 0x80000000
    9868:	eb004383 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    986c:	e3e01101 	mvn	r1, #1073741824	@ 0x40000000
    9870:	e28d0030 	add	r0, sp, #48	@ 0x30
    9874:	eb004372 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    9878:	e28d0030 	add	r0, sp, #48	@ 0x30
    987c:	eb004343 	bl	1a590 <CDWHCIRegister::Write()>
    9880:	e1a00006 	mov	r0, r6
    9884:	eb004339 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9888:	e28d0030 	add	r0, sp, #48	@ 0x30
    988c:	eb004337 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9890:	e28d0024 	add	r0, sp, #36	@ 0x24
    9894:	eb004335 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9898:	e28d0018 	add	r0, sp, #24
    989c:	eb004333 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    98a0:	e28d000c 	add	r0, sp, #12
    98a4:	eb004331 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    98a8:	e1a0000d 	mov	r0, sp
    98ac:	eb00432f 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    98b0:	e28dd048 	add	sp, sp, #72	@ 0x48
    98b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    98b8:	e3a01902 	mov	r1, #32768	@ 0x8000
    98bc:	e28d0030 	add	r0, sp, #48	@ 0x30
    98c0:	eb00436d 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    98c4:	e1a00004 	mov	r0, r4
    98c8:	eb000f8d 	bl	d704 <CDWHCITransferStageData::GetSpeed() const>
    98cc:	e3500000 	cmp	r0, #0
    98d0:	0affffae 	beq	9790 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1c0>
    98d4:	e28d0030 	add	r0, sp, #48	@ 0x30
    98d8:	e3e01802 	mvn	r1, #131072	@ 0x20000
    98dc:	eb004358 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    98e0:	eaffffad 	b	979c <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x1cc>
    98e4:	e28d0030 	add	r0, sp, #48	@ 0x30
    98e8:	e3e01202 	mvn	r1, #536870912	@ 0x20000000
    98ec:	e28d603c 	add	r6, sp, #60	@ 0x3c
    98f0:	eb004353 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    98f4:	eaffffcd 	b	9830 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x260>
    98f8:	e1a00004 	mov	r0, r4
    98fc:	eb000fd1 	bl	d848 <CDWHCITransferStageData::GetHubPortAddress() const>
    9900:	e1a01000 	mov	r1, r0
    9904:	e28d0024 	add	r0, sp, #36	@ 0x24
    9908:	eb00435b 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    990c:	e1a00004 	mov	r0, r4
    9910:	eb000fb7 	bl	d7f4 <CDWHCITransferStageData::GetHubAddress() const>
    9914:	e1a01380 	lsl	r1, r0, #7
    9918:	e28d0024 	add	r0, sp, #36	@ 0x24
    991c:	eb004356 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9920:	e1a00004 	mov	r0, r4
    9924:	eb000fdc 	bl	d89c <CDWHCITransferStageData::GetSplitPosition() const>
    9928:	e1a01700 	lsl	r1, r0, #14
    992c:	e28d0024 	add	r0, sp, #36	@ 0x24
    9930:	eb004351 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9934:	e1a00004 	mov	r0, r4
    9938:	eb000fa1 	bl	d7c4 <CDWHCITransferStageData::IsSplitComplete() const>
    993c:	e3500000 	cmp	r0, #0
    9940:	1a000003 	bne	9954 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x384>
    9944:	e3a01102 	mov	r1, #-2147483648	@ 0x80000000
    9948:	e28d0024 	add	r0, sp, #36	@ 0x24
    994c:	eb00434a 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9950:	eaffff6b 	b	9704 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x134>
    9954:	e3a01801 	mov	r1, #65536	@ 0x10000
    9958:	e28d0024 	add	r0, sp, #36	@ 0x24
    995c:	eb004346 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9960:	eafffff7 	b	9944 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x374>
    9964:	e28d603c 	add	r6, sp, #60	@ 0x3c
    9968:	e3001408 	movw	r1, #1032	@ 0x408
    996c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9970:	e1a00006 	mov	r0, r6
    9974:	eb0042f4 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9978:	e1a00006 	mov	r0, r6
    997c:	eb0042fc 	bl	1a574 <CDWHCIRegister::Read()>
    9980:	e3100001 	tst	r0, #1
    9984:	0a000011 	beq	99d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x400>
    9988:	e3a01202 	mov	r1, #536870912	@ 0x20000000
    998c:	e28d0030 	add	r0, sp, #48	@ 0x30
    9990:	eb004339 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9994:	e1a00006 	mov	r0, r6
    9998:	eb0042f4 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    999c:	eaffffa3 	b	9830 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x260>
    99a0:	e3091d40 	movw	r1, #40256	@ 0x9d40
    99a4:	e3401003 	movt	r1, #3
    99a8:	e30a061c 	movw	r0, #42524	@ 0xa61c
    99ac:	e3400003 	movt	r0, #3
    99b0:	e300237f 	movw	r2, #895	@ 0x37f
    99b4:	eb008908 	bl	2bddc <assertion_failed>
    99b8:	e3091d40 	movw	r1, #40256	@ 0x9d40
    99bc:	e3401003 	movt	r1, #3
    99c0:	e3090ed8 	movw	r0, #40664	@ 0x9ed8
    99c4:	e3400003 	movt	r0, #3
    99c8:	e3002381 	movw	r2, #897	@ 0x381
    99cc:	eb008902 	bl	2bddc <assertion_failed>
    99d0:	e28d0030 	add	r0, sp, #48	@ 0x30
    99d4:	e3e01202 	mvn	r1, #536870912	@ 0x20000000
    99d8:	eb004319 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    99dc:	eaffffec 	b	9994 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)+0x3c4>

000099e0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>:
    99e0:	e92d4070 	push	{r4, r5, r6, lr}
    99e4:	e2515000 	subs	r5, r1, #0
    99e8:	e24dd018 	sub	sp, sp, #24
    99ec:	0a000033 	beq	9ac0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xe0>
    99f0:	e1a06000 	mov	r6, r0
    99f4:	e1a00005 	mov	r0, r5
    99f8:	eb000ef0 	bl	d5c0 <CDWHCITransferStageData::GetChannelNumber() const>
    99fc:	e5963018 	ldr	r3, [r6, #24]
    9a00:	e1530000 	cmp	r3, r0
    9a04:	9a000033 	bls	9ad8 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0xf8>
    9a08:	e30c3028 	movw	r3, #49192	@ 0xc028
    9a0c:	e34031fc 	movt	r3, #508	@ 0x1fc
    9a10:	e0803003 	add	r3, r0, r3
    9a14:	e1a0000d 	mov	r0, sp
    9a18:	e1a04283 	lsl	r4, r3, #5
    9a1c:	e1a01004 	mov	r1, r4
    9a20:	eb0042c9 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9a24:	e1a0000d 	mov	r0, sp
    9a28:	eb0042d1 	bl	1a574 <CDWHCIRegister::Read()>
    9a2c:	e3a01102 	mov	r1, #-2147483648	@ 0x80000000
    9a30:	e1a0000d 	mov	r0, sp
    9a34:	eb0042f3 	bl	1a608 <CDWHCIRegister::IsSet(unsigned int) const>
    9a38:	e3500000 	cmp	r0, #0
    9a3c:	1a000006 	bne	9a5c <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)+0x7c>
    9a40:	e1a01005 	mov	r1, r5
    9a44:	e1a00006 	mov	r0, r6
    9a48:	ebfffee0 	bl	95d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9a4c:	e1a0000d 	mov	r0, sp
    9a50:	eb0042c6 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9a54:	e28dd018 	add	sp, sp, #24
    9a58:	e8bd8070 	pop	{r4, r5, r6, pc}
    9a5c:	e1a00005 	mov	r0, r5
    9a60:	e3a01000 	mov	r1, #0
    9a64:	eb000ed1 	bl	d5b0 <CDWHCITransferStageData::SetSubState(unsigned int)>
    9a68:	e1a0000d 	mov	r0, sp
    9a6c:	e3e01102 	mvn	r1, #-2147483648	@ 0x80000000
    9a70:	eb0042f3 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    9a74:	e3a01101 	mov	r1, #1073741824	@ 0x40000000
    9a78:	e1a0000d 	mov	r0, sp
    9a7c:	eb0042fe 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    9a80:	e1a0000d 	mov	r0, sp
    9a84:	eb0042c1 	bl	1a590 <CDWHCIRegister::Write()>
    9a88:	e284100c 	add	r1, r4, #12
    9a8c:	e28d000c 	add	r0, sp, #12
    9a90:	eb0042ad 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9a94:	e3a01002 	mov	r1, #2
    9a98:	e28d000c 	add	r0, sp, #12
    9a9c:	eb0042d5 	bl	1a5f8 <CDWHCIRegister::Set(unsigned int)>
    9aa0:	e28d000c 	add	r0, sp, #12
    9aa4:	eb0042b9 	bl	1a590 <CDWHCIRegister::Write()>
    9aa8:	e28d000c 	add	r0, sp, #12
    9aac:	eb0042af 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9ab0:	e1a0000d 	mov	r0, sp
    9ab4:	eb0042ad 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9ab8:	e28dd018 	add	sp, sp, #24
    9abc:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ac0:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9ac4:	e3401003 	movt	r1, #3
    9ac8:	e30a061c 	movw	r0, #42524	@ 0xa61c
    9acc:	e3400003 	movt	r0, #3
    9ad0:	e3a02fd9 	mov	r2, #868	@ 0x364
    9ad4:	eb0088c0 	bl	2bddc <assertion_failed>
    9ad8:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9adc:	e3401003 	movt	r1, #3
    9ae0:	e3090ed8 	movw	r0, #40664	@ 0x9ed8
    9ae4:	e3400003 	movt	r0, #3
    9ae8:	e3002366 	movw	r2, #870	@ 0x366
    9aec:	eb0088ba 	bl	2bddc <assertion_failed>

00009af0 <CDWHCIDevice::AllocateChannel()>:
    9af0:	e92d4070 	push	{r4, r5, r6, lr}
    9af4:	e1a05000 	mov	r5, r0
    9af8:	e5900020 	ldr	r0, [r0, #32]
    9afc:	e3500000 	cmp	r0, #0
    9b00:	1a000015 	bne	9b5c <CDWHCIDevice::AllocateChannel()+0x6c>
    9b04:	e5951018 	ldr	r1, [r5, #24]
    9b08:	e3510000 	cmp	r1, #0
    9b0c:	0a00000f 	beq	9b50 <CDWHCIDevice::AllocateChannel()+0x60>
    9b10:	e595401c 	ldr	r4, [r5, #28]
    9b14:	e2144001 	ands	r4, r4, #1
    9b18:	0a000021 	beq	9ba4 <CDWHCIDevice::AllocateChannel()+0xb4>
    9b1c:	e3a04000 	mov	r4, #0
    9b20:	e3a03001 	mov	r3, #1
    9b24:	ea000002 	b	9b34 <CDWHCIDevice::AllocateChannel()+0x44>
    9b28:	e595201c 	ldr	r2, [r5, #28]
    9b2c:	e1120003 	tst	r2, r3
    9b30:	0a000013 	beq	9b84 <CDWHCIDevice::AllocateChannel()+0x94>
    9b34:	e2844001 	add	r4, r4, #1
    9b38:	e1a03083 	lsl	r3, r3, #1
    9b3c:	e1540001 	cmp	r4, r1
    9b40:	3afffff8 	bcc	9b28 <CDWHCIDevice::AllocateChannel()+0x38>
    9b44:	e3500000 	cmp	r0, #0
    9b48:	0a000000 	beq	9b50 <CDWHCIDevice::AllocateChannel()+0x60>
    9b4c:	eb00b7b6 	bl	37a2c <LeaveCritical>
    9b50:	e3a04010 	mov	r4, #16
    9b54:	e1a00004 	mov	r0, r4
    9b58:	e8bd8070 	pop	{r4, r5, r6, pc}
    9b5c:	eb00b787 	bl	37980 <EnterCritical>
    9b60:	e5951018 	ldr	r1, [r5, #24]
    9b64:	e3510000 	cmp	r1, #0
    9b68:	05950020 	ldreq	r0, [r5, #32]
    9b6c:	0afffff4 	beq	9b44 <CDWHCIDevice::AllocateChannel()+0x54>
    9b70:	e595401c 	ldr	r4, [r5, #28]
    9b74:	e5950020 	ldr	r0, [r5, #32]
    9b78:	e2144001 	ands	r4, r4, #1
    9b7c:	1affffe6 	bne	9b1c <CDWHCIDevice::AllocateChannel()+0x2c>
    9b80:	e3a03001 	mov	r3, #1
    9b84:	e595201c 	ldr	r2, [r5, #28]
    9b88:	e3500000 	cmp	r0, #0
    9b8c:	e1822003 	orr	r2, r2, r3
    9b90:	e585201c 	str	r2, [r5, #28]
    9b94:	0affffee 	beq	9b54 <CDWHCIDevice::AllocateChannel()+0x64>
    9b98:	eb00b7a3 	bl	37a2c <LeaveCritical>
    9b9c:	e1a00004 	mov	r0, r4
    9ba0:	e8bd8070 	pop	{r4, r5, r6, pc}
    9ba4:	e595301c 	ldr	r3, [r5, #28]
    9ba8:	e3833001 	orr	r3, r3, #1
    9bac:	e585301c 	str	r3, [r5, #28]
    9bb0:	eaffffe7 	b	9b54 <CDWHCIDevice::AllocateChannel()+0x64>

00009bb4 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>:
    9bb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    9bb8:	e3001408 	movw	r1, #1032	@ 0x408
    9bbc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9bc0:	e24dd010 	sub	sp, sp, #16
    9bc4:	e1a06000 	mov	r6, r0
    9bc8:	e28d0004 	add	r0, sp, #4
    9bcc:	e2868024 	add	r8, r6, #36	@ 0x24
    9bd0:	eb00425d 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9bd4:	e28d0004 	add	r0, sp, #4
    9bd8:	eb004265 	bl	1a574 <CDWHCIRegister::Read()>
    9bdc:	e6ff7070 	uxth	r7, r0
    9be0:	e1a01007 	mov	r1, r7
    9be4:	e1a00008 	mov	r0, r8
    9be8:	eb000c46 	bl	cd08 <CDWHCITransactionQueue::Dequeue(unsigned short)>
    9bec:	e2504000 	subs	r4, r0, #0
    9bf0:	0a000020 	beq	9c78 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xc4>
    9bf4:	e1a00006 	mov	r0, r6
    9bf8:	ebffffbc 	bl	9af0 <CDWHCIDevice::AllocateChannel()>
    9bfc:	e5963018 	ldr	r3, [r6, #24]
    9c00:	e1a05000 	mov	r5, r0
    9c04:	e1500003 	cmp	r0, r3
    9c08:	2a00000e 	bcs	9c48 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0x94>
    9c0c:	e1a01000 	mov	r1, r0
    9c10:	e1a00004 	mov	r0, r4
    9c14:	eb000db5 	bl	d2f0 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>
    9c18:	e0863105 	add	r3, r6, r5, lsl #2
    9c1c:	e593202c 	ldr	r2, [r3, #44]	@ 0x2c
    9c20:	e3520000 	cmp	r2, #0
    9c24:	1a00000d 	bne	9c60 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0xac>
    9c28:	e1a01005 	mov	r1, r5
    9c2c:	e1a00006 	mov	r0, r6
    9c30:	e583402c 	str	r4, [r3, #44]	@ 0x2c
    9c34:	ebfffc5f 	bl	8db8 <CDWHCIDevice::EnableChannelInterrupt(unsigned int)>
    9c38:	e1a01004 	mov	r1, r4
    9c3c:	e1a00006 	mov	r0, r6
    9c40:	ebffff66 	bl	99e0 <CDWHCIDevice::StartTransaction(CDWHCITransferStageData*)>
    9c44:	eaffffe5 	b	9be0 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]+0x2c>
    9c48:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9c4c:	e3401003 	movt	r1, #3
    9c50:	e3090ed8 	movw	r0, #40664	@ 0x9ed8
    9c54:	e3400003 	movt	r0, #3
    9c58:	e3002574 	movw	r2, #1396	@ 0x574
    9c5c:	eb00885e 	bl	2bddc <assertion_failed>
    9c60:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9c64:	e3401003 	movt	r1, #3
    9c68:	e3090ef0 	movw	r0, #40688	@ 0x9ef0
    9c6c:	e3400003 	movt	r0, #3
    9c70:	e3002578 	movw	r2, #1400	@ 0x578
    9c74:	eb008858 	bl	2bddc <assertion_failed>
    9c78:	e28d0004 	add	r0, sp, #4
    9c7c:	eb00423b 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9c80:	e28dd010 	add	sp, sp, #16
    9c84:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00009c88 <CDWHCIDevice::SOFInterruptHandler()>:
    9c88:	e5d03095 	ldrb	r3, [r0, #149]	@ 0x95
    9c8c:	e3530000 	cmp	r3, #0
    9c90:	112fff1e 	bxne	lr
    9c94:	eaffffc6 	b	9bb4 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>

00009c98 <CDWHCIDevice::FreeChannel(unsigned int)>:
    9c98:	e5903018 	ldr	r3, [r0, #24]
    9c9c:	e92d4070 	push	{r4, r5, r6, lr}
    9ca0:	e1530001 	cmp	r3, r1
    9ca4:	9a000012 	bls	9cf4 <CDWHCIDevice::FreeChannel(unsigned int)+0x5c>
    9ca8:	e1a04000 	mov	r4, r0
    9cac:	e3a05001 	mov	r5, #1
    9cb0:	e5900020 	ldr	r0, [r0, #32]
    9cb4:	e1a05115 	lsl	r5, r5, r1
    9cb8:	e3500000 	cmp	r0, #0
    9cbc:	1a00000a 	bne	9cec <CDWHCIDevice::FreeChannel(unsigned int)+0x54>
    9cc0:	e594301c 	ldr	r3, [r4, #28]
    9cc4:	e1130005 	tst	r3, r5
    9cc8:	0a00000f 	beq	9d0c <CDWHCIDevice::FreeChannel(unsigned int)+0x74>
    9ccc:	e5942020 	ldr	r2, [r4, #32]
    9cd0:	e594301c 	ldr	r3, [r4, #28]
    9cd4:	e3520000 	cmp	r2, #0
    9cd8:	e1c33005 	bic	r3, r3, r5
    9cdc:	e584301c 	str	r3, [r4, #28]
    9ce0:	08bd8070 	popeq	{r4, r5, r6, pc}
    9ce4:	e8bd4070 	pop	{r4, r5, r6, lr}
    9ce8:	ea00b74f 	b	37a2c <LeaveCritical>
    9cec:	eb00b723 	bl	37980 <EnterCritical>
    9cf0:	eafffff2 	b	9cc0 <CDWHCIDevice::FreeChannel(unsigned int)+0x28>
    9cf4:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9cf8:	e3401003 	movt	r1, #3
    9cfc:	e3090ed8 	movw	r0, #40664	@ 0x9ed8
    9d00:	e3400003 	movt	r0, #3
    9d04:	e300265c 	movw	r2, #1628	@ 0x65c
    9d08:	eb008833 	bl	2bddc <assertion_failed>
    9d0c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9d10:	e3401003 	movt	r1, #3
    9d14:	e3090f0c 	movw	r0, #40716	@ 0x9f0c
    9d18:	e3400003 	movt	r0, #3
    9d1c:	e3002661 	movw	r2, #1633	@ 0x661
    9d20:	eb00882d 	bl	2bddc <assertion_failed>

00009d24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>:
    9d24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d28:	e0809101 	add	r9, r0, r1, lsl #2
    9d2c:	e24dd024 	sub	sp, sp, #36	@ 0x24
    9d30:	e599402c 	ldr	r4, [r9, #44]	@ 0x2c
    9d34:	e3540000 	cmp	r4, #0
    9d38:	0a0000a5 	beq	9fd4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2b0>
    9d3c:	e1a05000 	mov	r5, r0
    9d40:	e1a00004 	mov	r0, r4
    9d44:	e1a06001 	mov	r6, r1
    9d48:	eb000f4a 	bl	da78 <CDWHCITransferStageData::GetURB() const>
    9d4c:	e2508000 	subs	r8, r0, #0
    9d50:	0a0000a5 	beq	9fec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2c8>
    9d54:	e5d51094 	ldrb	r1, [r5, #148]	@ 0x94
    9d58:	e21170ff 	ands	r7, r1, #255	@ 0xff
    9d5c:	0a00005b 	beq	9ed0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1ac>
    9d60:	e1a00004 	mov	r0, r4
    9d64:	eb000e13 	bl	d5b8 <CDWHCITransferStageData::GetSubState() const>
    9d68:	e3500000 	cmp	r0, #0
    9d6c:	0a000052 	beq	9ebc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x198>
    9d70:	e3500001 	cmp	r0, #1
    9d74:	1a00016a 	bne	a324 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x600>
    9d78:	e1a00004 	mov	r0, r4
    9d7c:	eb000e80 	bl	d784 <CDWHCITransferStageData::GetDMAAddress() const>
    9d80:	e1a07000 	mov	r7, r0
    9d84:	e1a00004 	mov	r0, r4
    9d88:	eb000e87 	bl	d7ac <CDWHCITransferStageData::GetBytesToTransfer() const>
    9d8c:	e1a01000 	mov	r1, r0
    9d90:	e1a00007 	mov	r0, r7
    9d94:	e1a07286 	lsl	r7, r6, #5
    9d98:	eb00b4ab 	bl	3704c <CleanAndInvalidateDataCacheRange>
    9d9c:	e3a01e51 	mov	r1, #1296	@ 0x510
    9da0:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9da4:	e28d0008 	add	r0, sp, #8
    9da8:	e0871001 	add	r1, r7, r1
    9dac:	eb0041e6 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9db0:	e28d0008 	add	r0, sp, #8
    9db4:	eb0041ee 	bl	1a574 <CDWHCIRegister::Read()>
    9db8:	e3001508 	movw	r1, #1288	@ 0x508
    9dbc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    9dc0:	e28d0014 	add	r0, sp, #20
    9dc4:	e0871001 	add	r1, r7, r1
    9dc8:	eb0041df 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    9dcc:	e28d0014 	add	r0, sp, #20
    9dd0:	eb0041e7 	bl	1a574 <CDWHCIRegister::Read()>
    9dd4:	e3500002 	cmp	r0, #2
    9dd8:	0a0000c5 	beq	a0f4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3d0>
    9ddc:	e1a00004 	mov	r0, r4
    9de0:	eb000df8 	bl	d5c8 <CDWHCITransferStageData::IsPeriodic() const>
    9de4:	e3500000 	cmp	r0, #0
    9de8:	1a0000fb 	bne	a1dc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4b8>
    9dec:	e28d0014 	add	r0, sp, #20
    9df0:	eb0041df 	bl	1a574 <CDWHCIRegister::Read()>
    9df4:	e1a07000 	mov	r7, r0
    9df8:	e28d0008 	add	r0, sp, #8
    9dfc:	eb0041f1 	bl	1a5c8 <CDWHCIRegister::Get() const>
    9e00:	e1a0a000 	mov	sl, r0
    9e04:	e28d0008 	add	r0, sp, #8
    9e08:	eb0041ee 	bl	1a5c8 <CDWHCIRegister::Get() const>
    9e0c:	e1a01007 	mov	r1, r7
    9e10:	e7f23050 	ubfx	r3, r0, #0, #19
    9e14:	e7e929da 	ubfx	r2, sl, #19, #10
    9e18:	e1a00004 	mov	r0, r4
    9e1c:	eb000d35 	bl	d2f8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>
    9e20:	e28d0014 	add	r0, sp, #20
    9e24:	eb0041d1 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9e28:	e28d0008 	add	r0, sp, #8
    9e2c:	eb0041cf 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    9e30:	e1a00004 	mov	r0, r4
    9e34:	eb000ddb 	bl	d5a8 <CDWHCITransferStageData::GetState() const>
    9e38:	e1a07000 	mov	r7, r0
    9e3c:	e3500001 	cmp	r0, #1
    9e40:	0a000038 	beq	9f28 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x204>
    9e44:	e3500002 	cmp	r0, #2
    9e48:	0a00006d 	beq	a004 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x2e0>
    9e4c:	e3500000 	cmp	r0, #0
    9e50:	1a000139 	bne	a33c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x618>
    9e54:	e1a00004 	mov	r0, r4
    9e58:	eb000ec7 	bl	d97c <CDWHCITransferStageData::GetTransactionStatus() const>
    9e5c:	e1a0a000 	mov	sl, r0
    9e60:	e3100080 	tst	r0, #128	@ 0x80
    9e64:	1a0000d0 	bne	a1ac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x488>
    9e68:	e300378c 	movw	r3, #1932	@ 0x78c
    9e6c:	e11a0003 	tst	sl, r3
    9e70:	1a0000c7 	bne	a194 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x470>
    9e74:	e1a00004 	mov	r0, r4
    9e78:	eb000de3 	bl	d60c <CDWHCITransferStageData::IsIsochronous() const>
    9e7c:	e3500000 	cmp	r0, #0
    9e80:	1a0000f7 	bne	a264 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x540>
    9e84:	e31a0050 	tst	sl, #80	@ 0x50
    9e88:	0a000003 	beq	9e9c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x178>
    9e8c:	e1a00004 	mov	r0, r4
    9e90:	eb000dcc 	bl	d5c8 <CDWHCITransferStageData::IsPeriodic() const>
    9e94:	e3500000 	cmp	r0, #0
    9e98:	1a000116 	bne	a2f8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5d4>
    9e9c:	e1a00004 	mov	r0, r4
    9ea0:	eb000e35 	bl	d77c <CDWHCITransferStageData::IsStatusStage() const>
    9ea4:	e3500000 	cmp	r0, #0
    9ea8:	0a0000fd 	beq	a2a4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x580>
    9eac:	e3a01001 	mov	r1, #1
    9eb0:	e1a00008 	mov	r0, r8
    9eb4:	eb003177 	bl	16498 <CUSBRequest::SetStatus(int)>
    9eb8:	ea0000a6 	b	a158 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x434>
    9ebc:	e1a01004 	mov	r1, r4
    9ec0:	e1a00005 	mov	r0, r5
    9ec4:	e28dd024 	add	sp, sp, #36	@ 0x24
    9ec8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ecc:	eafffdbf 	b	95d0 <CDWHCIDevice::StartChannel(CDWHCITransferStageData*)>
    9ed0:	e1a01006 	mov	r1, r6
    9ed4:	e1a00005 	mov	r0, r5
    9ed8:	ebfffbd7 	bl	8e3c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    9edc:	e1a01007 	mov	r1, r7
    9ee0:	e1a00008 	mov	r0, r8
    9ee4:	eb00316b 	bl	16498 <CUSBRequest::SetStatus(int)>
    9ee8:	e3a01008 	mov	r1, #8
    9eec:	e1a00008 	mov	r0, r8
    9ef0:	eb00316c 	bl	164a8 <CUSBRequest::SetUSBError(TUSBError)>
    9ef4:	e1a00004 	mov	r0, r4
    9ef8:	eb000cf2 	bl	d2c8 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    9efc:	e1a00004 	mov	r0, r4
    9f00:	e3a01c01 	mov	r1, #256	@ 0x100
    9f04:	eb000f07 	bl	db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    9f08:	e1a01006 	mov	r1, r6
    9f0c:	e1a00005 	mov	r0, r5
    9f10:	e589702c 	str	r7, [r9, #44]	@ 0x2c
    9f14:	ebffff5f 	bl	9c98 <CDWHCIDevice::FreeChannel(unsigned int)>
    9f18:	e1a00008 	mov	r0, r8
    9f1c:	e28dd024 	add	sp, sp, #36	@ 0x24
    9f20:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f24:	ea0031e2 	b	166b4 <CUSBRequest::CallCompletionRoutine()>
    9f28:	e1a00004 	mov	r0, r4
    9f2c:	eb000e92 	bl	d97c <CDWHCITransferStageData::GetTransactionStatus() const>
    9f30:	e30037dc 	movw	r3, #2012	@ 0x7dc
    9f34:	e1a07000 	mov	r7, r0
    9f38:	e1100003 	tst	r0, r3
    9f3c:	1a000089 	bne	a168 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x444>
    9f40:	e1a00004 	mov	r0, r4
    9f44:	eb000edf 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    9f48:	e5903000 	ldr	r3, [r0]
    9f4c:	e1a01007 	mov	r1, r7
    9f50:	e5933010 	ldr	r3, [r3, #16]
    9f54:	e12fff33 	blx	r3
    9f58:	e1a00004 	mov	r0, r4
    9f5c:	eb000daa 	bl	d60c <CDWHCITransferStageData::IsIsochronous() const>
    9f60:	e3500000 	cmp	r0, #0
    9f64:	0a000003 	beq	9f78 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x254>
    9f68:	e1a00004 	mov	r0, r4
    9f6c:	eb000e00 	bl	d774 <CDWHCITransferStageData::IsDirectionIn() const>
    9f70:	e3500000 	cmp	r0, #0
    9f74:	0a000037 	beq	a058 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x334>
    9f78:	e3a01002 	mov	r1, #2
    9f7c:	e1a00004 	mov	r0, r4
    9f80:	eb000d86 	bl	d5a0 <CDWHCITransferStageData::SetState(unsigned int)>
    9f84:	e3a01001 	mov	r1, #1
    9f88:	e1a00004 	mov	r0, r4
    9f8c:	eb000d77 	bl	d570 <CDWHCITransferStageData::SetSplitComplete(bool)>
    9f90:	e1a00004 	mov	r0, r4
    9f94:	eb000ecb 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    9f98:	e5903000 	ldr	r3, [r0]
    9f9c:	e593300c 	ldr	r3, [r3, #12]
    9fa0:	e12fff33 	blx	r3
    9fa4:	e3500000 	cmp	r0, #0
    9fa8:	0a00002a 	beq	a058 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x334>
    9fac:	e1a01006 	mov	r1, r6
    9fb0:	e3a03000 	mov	r3, #0
    9fb4:	e589302c 	str	r3, [r9, #44]	@ 0x2c
    9fb8:	e1a00005 	mov	r0, r5
    9fbc:	ebffff35 	bl	9c98 <CDWHCIDevice::FreeChannel(unsigned int)>
    9fc0:	e1a01004 	mov	r1, r4
    9fc4:	e1a00005 	mov	r0, r5
    9fc8:	e28dd024 	add	sp, sp, #36	@ 0x24
    9fcc:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9fd0:	eafffc93 	b	9224 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    9fd4:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9fd8:	e3401003 	movt	r1, #3
    9fdc:	e30a061c 	movw	r0, #42524	@ 0xa61c
    9fe0:	e3400003 	movt	r0, #3
    9fe4:	e30023ff 	movw	r2, #1023	@ 0x3ff
    9fe8:	eb00877b 	bl	2bddc <assertion_failed>
    9fec:	e3091d40 	movw	r1, #40256	@ 0x9d40
    9ff0:	e3401003 	movt	r1, #3
    9ff4:	e3090e38 	movw	r0, #40504	@ 0x9e38
    9ff8:	e3400003 	movt	r0, #3
    9ffc:	e3002401 	movw	r2, #1025	@ 0x401
    a000:	eb008775 	bl	2bddc <assertion_failed>
    a004:	e1a00004 	mov	r0, r4
    a008:	eb000e5b 	bl	d97c <CDWHCITransferStageData::GetTransactionStatus() const>
    a00c:	e300378c 	movw	r3, #1932	@ 0x78c
    a010:	e1a0a000 	mov	sl, r0
    a014:	e010b003 	ands	fp, r0, r3
    a018:	1a000043 	bne	a12c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x408>
    a01c:	e1a00004 	mov	r0, r4
    a020:	eb000ea8 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a024:	e5903000 	ldr	r3, [r0]
    a028:	e1a0100a 	mov	r1, sl
    a02c:	e5933010 	ldr	r3, [r3, #16]
    a030:	e12fff33 	blx	r3
    a034:	e1a00004 	mov	r0, r4
    a038:	eb000ea2 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a03c:	e5903000 	ldr	r3, [r0]
    a040:	e593300c 	ldr	r3, [r3, #12]
    a044:	e12fff33 	blx	r3
    a048:	e3500000 	cmp	r0, #0
    a04c:	11a01006 	movne	r1, r6
    a050:	1589b02c 	strne	fp, [r9, #44]	@ 0x2c
    a054:	1affffd7 	bne	9fb8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x294>
    a058:	e1a00004 	mov	r0, r4
    a05c:	eb000e69 	bl	da08 <CDWHCITransferStageData::IsStageComplete() const>
    a060:	e3500000 	cmp	r0, #0
    a064:	1a000067 	bne	a208 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4e4>
    a068:	e1a00004 	mov	r0, r4
    a06c:	eb000d55 	bl	d5c8 <CDWHCITransferStageData::IsPeriodic() const>
    a070:	e3500000 	cmp	r0, #0
    a074:	0a00006e 	beq	a234 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x510>
    a078:	e1a00004 	mov	r0, r4
    a07c:	eb000d62 	bl	d60c <CDWHCITransferStageData::IsIsochronous() const>
    a080:	e3500000 	cmp	r0, #0
    a084:	0a000003 	beq	a098 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x374>
    a088:	e1a00004 	mov	r0, r4
    a08c:	eb000db8 	bl	d774 <CDWHCITransferStageData::IsDirectionIn() const>
    a090:	e3500000 	cmp	r0, #0
    a094:	0a000066 	beq	a234 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x510>
    a098:	e1a00004 	mov	r0, r4
    a09c:	eb000e62 	bl	da2c <CDWHCITransferStageData::IsTimeout() const>
    a0a0:	e1a01006 	mov	r1, r6
    a0a4:	e3500000 	cmp	r0, #0
    a0a8:	0a00008a 	beq	a2d8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5b4>
    a0ac:	e1a00005 	mov	r0, r5
    a0b0:	ebfffb61 	bl	8e3c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a0b4:	e3a01000 	mov	r1, #0
    a0b8:	e1a00008 	mov	r0, r8
    a0bc:	eb0030f5 	bl	16498 <CUSBRequest::SetStatus(int)>
    a0c0:	e3a01007 	mov	r1, #7
    a0c4:	e1a00008 	mov	r0, r8
    a0c8:	eb0030f6 	bl	164a8 <CUSBRequest::SetUSBError(TUSBError)>
    a0cc:	e1a00004 	mov	r0, r4
    a0d0:	eb000c7c 	bl	d2c8 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    a0d4:	e1a00004 	mov	r0, r4
    a0d8:	e3a01c01 	mov	r1, #256	@ 0x100
    a0dc:	eb000e91 	bl	db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    a0e0:	e3a03000 	mov	r3, #0
    a0e4:	e1a01006 	mov	r1, r6
    a0e8:	e1a00005 	mov	r0, r5
    a0ec:	e589302c 	str	r3, [r9, #44]	@ 0x2c
    a0f0:	eaffff87 	b	9f14 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x1f0>
    a0f4:	e3a03000 	mov	r3, #0
    a0f8:	e1a01006 	mov	r1, r6
    a0fc:	e589302c 	str	r3, [r9, #44]	@ 0x2c
    a100:	e1a00005 	mov	r0, r5
    a104:	ebfffee3 	bl	9c98 <CDWHCIDevice::FreeChannel(unsigned int)>
    a108:	e1a01004 	mov	r1, r4
    a10c:	e1a00005 	mov	r0, r5
    a110:	ebfffc43 	bl	9224 <CDWHCIDevice::QueueTransaction(CDWHCITransferStageData*)>
    a114:	e28d0014 	add	r0, sp, #20
    a118:	eb004114 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    a11c:	e28d0008 	add	r0, sp, #8
    a120:	eb004112 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    a124:	e28dd024 	add	sp, sp, #36	@ 0x24
    a128:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a12c:	eb00b60e 	bl	3796c <CurrentExecutionLevel>
    a130:	e3500001 	cmp	r0, #1
    a134:	9a000052 	bls	a284 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x560>
    a138:	e3a01000 	mov	r1, #0
    a13c:	e1a00008 	mov	r0, r8
    a140:	eb0030d4 	bl	16498 <CUSBRequest::SetStatus(int)>
    a144:	e1a00004 	mov	r0, r4
    a148:	eb000e15 	bl	d9a4 <CDWHCITransferStageData::GetUSBError() const>
    a14c:	e1a01000 	mov	r1, r0
    a150:	e1a00008 	mov	r0, r8
    a154:	eb0030d3 	bl	164a8 <CUSBRequest::SetUSBError(TUSBError)>
    a158:	e1a01006 	mov	r1, r6
    a15c:	e1a00005 	mov	r0, r5
    a160:	ebfffb35 	bl	8e3c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a164:	eaffffd8 	b	a0cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3a8>
    a168:	eb00b5ff 	bl	3796c <CurrentExecutionLevel>
    a16c:	e3500001 	cmp	r0, #1
    a170:	8afffff0 	bhi	a138 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x414>
    a174:	eb009193 	bl	2e7c8 <CLogger::Get()>
    a178:	e58d7000 	str	r7, [sp]
    a17c:	e59f11d0 	ldr	r1, [pc, #464]	@ a354 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x630>
    a180:	e3a02002 	mov	r2, #2
    a184:	e3093fa8 	movw	r3, #40872	@ 0x9fa8
    a188:	e3403003 	movt	r3, #3
    a18c:	eb009356 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a190:	eaffffe8 	b	a138 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x414>
    a194:	eb00b5f4 	bl	3796c <CurrentExecutionLevel>
    a198:	e3500001 	cmp	r0, #1
    a19c:	8affffe5 	bhi	a138 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x414>
    a1a0:	eb009188 	bl	2e7c8 <CLogger::Get()>
    a1a4:	e58da000 	str	sl, [sp]
    a1a8:	eafffff3 	b	a17c <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x458>
    a1ac:	e1a00008 	mov	r0, r8
    a1b0:	eb0030ae 	bl	16470 <CUSBRequest::GetEndpoint() const>
    a1b4:	eb00179a 	bl	10024 <CUSBEndpoint::GetType() const>
    a1b8:	e3500001 	cmp	r0, #1
    a1bc:	1affff29 	bne	9e68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    a1c0:	e1a00004 	mov	r0, r4
    a1c4:	eb000e26 	bl	da64 <CDWHCITransferStageData::IsRetryOK() const>
    a1c8:	e3500000 	cmp	r0, #0
    a1cc:	0affff25 	beq	9e68 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x144>
    a1d0:	e1a01006 	mov	r1, r6
    a1d4:	e589702c 	str	r7, [r9, #44]	@ 0x2c
    a1d8:	eaffff76 	b	9fb8 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x294>
    a1dc:	e28d0008 	add	r0, sp, #8
    a1e0:	eb0040f8 	bl	1a5c8 <CDWHCIRegister::Get() const>
    a1e4:	e2000206 	and	r0, r0, #1610612736	@ 0x60000000
    a1e8:	e3500206 	cmp	r0, #1610612736	@ 0x60000000
    a1ec:	1afffefe 	bne	9dec <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0xc8>
    a1f0:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a1f4:	e3401003 	movt	r1, #3
    a1f8:	e3090f30 	movw	r0, #40752	@ 0x9f30
    a1fc:	e3400003 	movt	r0, #3
    a200:	e3002434 	movw	r2, #1076	@ 0x434
    a204:	eb0086f4 	bl	2bddc <assertion_failed>
    a208:	e1a01006 	mov	r1, r6
    a20c:	e1a00005 	mov	r0, r5
    a210:	ebfffb09 	bl	8e3c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a214:	e1a00004 	mov	r0, r4
    a218:	eb000d57 	bl	d77c <CDWHCITransferStageData::IsStatusStage() const>
    a21c:	e3500000 	cmp	r0, #0
    a220:	0a000025 	beq	a2bc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x598>
    a224:	e3a01001 	mov	r1, #1
    a228:	e1a00008 	mov	r0, r8
    a22c:	eb003099 	bl	16498 <CUSBRequest::SetStatus(int)>
    a230:	eaffffa5 	b	a0cc <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x3a8>
    a234:	e1a00004 	mov	r0, r4
    a238:	e3a01001 	mov	r1, #1
    a23c:	eb000cd7 	bl	d5a0 <CDWHCITransferStageData::SetState(unsigned int)>
    a240:	e3a01000 	mov	r1, #0
    a244:	e1a00004 	mov	r0, r4
    a248:	eb000cc8 	bl	d570 <CDWHCITransferStageData::SetSplitComplete(bool)>
    a24c:	e1a00004 	mov	r0, r4
    a250:	eb000e1c 	bl	dac8 <CDWHCITransferStageData::GetFrameScheduler() const>
    a254:	e5903000 	ldr	r3, [r0]
    a258:	e5933008 	ldr	r3, [r3, #8]
    a25c:	e12fff33 	blx	r3
    a260:	eaffff51 	b	9fac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x288>
    a264:	e1a00004 	mov	r0, r4
    a268:	eb000de6 	bl	da08 <CDWHCITransferStageData::IsStageComplete() const>
    a26c:	e2507000 	subs	r7, r0, #0
    a270:	1affff03 	bne	9e84 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x160>
    a274:	e1a01006 	mov	r1, r6
    a278:	e1a00005 	mov	r0, r5
    a27c:	ebfffaee 	bl	8e3c <CDWHCIDevice::DisableChannelInterrupt(unsigned int)>
    a280:	eaffffd2 	b	a1d0 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x4ac>
    a284:	eb00914f 	bl	2e7c8 <CLogger::Get()>
    a288:	e59f10c4 	ldr	r1, [pc, #196]	@ a354 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x630>
    a28c:	e1a02007 	mov	r2, r7
    a290:	e58da000 	str	sl, [sp]
    a294:	e3093fa8 	movw	r3, #40872	@ 0x9fa8
    a298:	e3403003 	movt	r3, #3
    a29c:	eb009312 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    a2a0:	eaffffa4 	b	a138 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x414>
    a2a4:	e1a00004 	mov	r0, r4
    a2a8:	eb000dda 	bl	da18 <CDWHCITransferStageData::GetResultLen() const>
    a2ac:	e1a01000 	mov	r1, r0
    a2b0:	e1a00008 	mov	r0, r8
    a2b4:	eb003079 	bl	164a0 <CUSBRequest::SetResultLen(unsigned int)>
    a2b8:	eafffefb 	b	9eac <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x188>
    a2bc:	e1a00004 	mov	r0, r4
    a2c0:	eb000dd4 	bl	da18 <CDWHCITransferStageData::GetResultLen() const>
    a2c4:	e1a01000 	mov	r1, r0
    a2c8:	e1a00008 	mov	r0, r8
    a2cc:	eb003073 	bl	164a0 <CUSBRequest::SetResultLen(unsigned int)>
    a2d0:	eaffffd3 	b	a224 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x500>
    a2d4:	e1a01006 	mov	r1, r6
    a2d8:	e589002c 	str	r0, [r9, #44]	@ 0x2c
    a2dc:	e1a00005 	mov	r0, r5
    a2e0:	ebfffe6c 	bl	9c98 <CDWHCIDevice::FreeChannel(unsigned int)>
    a2e4:	e1a01004 	mov	r1, r4
    a2e8:	e1a00005 	mov	r0, r5
    a2ec:	e28dd024 	add	sp, sp, #36	@ 0x24
    a2f0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2f4:	eafffc54 	b	944c <CDWHCIDevice::QueueDelayedTransaction(CDWHCITransferStageData*)>
    a2f8:	e1a00004 	mov	r0, r4
    a2fc:	eb000dca 	bl	da2c <CDWHCITransferStageData::IsTimeout() const>
    a300:	e3500000 	cmp	r0, #0
    a304:	0afffff2 	beq	a2d4 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x5b0>
    a308:	e1a00008 	mov	r0, r8
    a30c:	e3a01000 	mov	r1, #0
    a310:	eb003060 	bl	16498 <CUSBRequest::SetStatus(int)>
    a314:	e3a01007 	mov	r1, #7
    a318:	e1a00008 	mov	r0, r8
    a31c:	eb003061 	bl	164a8 <CUSBRequest::SetUSBError(TUSBError)>
    a320:	eaffff8c 	b	a158 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]+0x434>
    a324:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a328:	e3401003 	movt	r1, #3
    a32c:	e30a093c 	movw	r0, #43324	@ 0xa93c
    a330:	e3400003 	movt	r0, #3
    a334:	e300243e 	movw	r2, #1086	@ 0x43e
    a338:	eb0086a7 	bl	2bddc <assertion_failed>
    a33c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a340:	e3401003 	movt	r1, #3
    a344:	e30a093c 	movw	r0, #43324	@ 0xa93c
    a348:	e3400003 	movt	r0, #3
    a34c:	e300254c 	movw	r2, #1356	@ 0x54c
    a350:	eb0086a1 	bl	2bddc <assertion_failed>
    a354:	0003eb90 	.word	0x0003eb90

0000a358 <CDWHCIDevice::ChannelInterruptHandler(unsigned int)>:
    a358:	e5d03095 	ldrb	r3, [r0, #149]	@ 0x95
    a35c:	e3530000 	cmp	r3, #0
    a360:	112fff1e 	bxne	lr
    a364:	eafffe6e 	b	9d24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>

0000a368 <CDWHCIDevice::InterruptHandler()>:
    a368:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a36c:	e3a01014 	mov	r1, #20
    a370:	e3431f98 	movt	r1, #16280	@ 0x3f98
    a374:	e24dd02c 	sub	sp, sp, #44	@ 0x2c
    a378:	e1a05000 	mov	r5, r0
    a37c:	e28d0004 	add	r0, sp, #4
    a380:	eb004071 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a384:	e28d0004 	add	r0, sp, #4
    a388:	eb004079 	bl	1a574 <CDWHCIRegister::Read()>
    a38c:	e28d0004 	add	r0, sp, #4
    a390:	eb00408c 	bl	1a5c8 <CDWHCIRegister::Get() const>
    a394:	e3100008 	tst	r0, #8
    a398:	0a000002 	beq	a3a8 <CDWHCIDevice::InterruptHandler()+0x40>
    a39c:	e5d53095 	ldrb	r3, [r5, #149]	@ 0x95
    a3a0:	e3530000 	cmp	r3, #0
    a3a4:	0a00000c 	beq	a3dc <CDWHCIDevice::InterruptHandler()+0x74>
    a3a8:	e28d0004 	add	r0, sp, #4
    a3ac:	eb004085 	bl	1a5c8 <CDWHCIRegister::Get() const>
    a3b0:	e3100402 	tst	r0, #33554432	@ 0x2000000
    a3b4:	1a00000e 	bne	a3f4 <CDWHCIDevice::InterruptHandler()+0x8c>
    a3b8:	eb002618 	bl	13c20 <CUSBHostController::IsPlugAndPlay()>
    a3bc:	e3500000 	cmp	r0, #0
    a3c0:	1a000034 	bne	a498 <CDWHCIDevice::InterruptHandler()+0x130>
    a3c4:	e28d0004 	add	r0, sp, #4
    a3c8:	eb004070 	bl	1a590 <CDWHCIRegister::Write()>
    a3cc:	e28d0004 	add	r0, sp, #4
    a3d0:	eb004066 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    a3d4:	e28dd02c 	add	sp, sp, #44	@ 0x2c
    a3d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a3dc:	e1a00005 	mov	r0, r5
    a3e0:	ebfffdf3 	bl	9bb4 <CDWHCIDevice::SOFInterruptHandler() [clone .part.0]>
    a3e4:	e28d0004 	add	r0, sp, #4
    a3e8:	eb004076 	bl	1a5c8 <CDWHCIRegister::Get() const>
    a3ec:	e3100402 	tst	r0, #33554432	@ 0x2000000
    a3f0:	0afffff0 	beq	a3b8 <CDWHCIDevice::InterruptHandler()+0x50>
    a3f4:	e28d0010 	add	r0, sp, #16
    a3f8:	e3001414 	movw	r1, #1044	@ 0x414
    a3fc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    a400:	eb004051 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a404:	e28d0010 	add	r0, sp, #16
    a408:	eb004059 	bl	1a574 <CDWHCIRegister::Read()>
    a40c:	e28d0010 	add	r0, sp, #16
    a410:	eb00405e 	bl	1a590 <CDWHCIRegister::Write()>
    a414:	e5953018 	ldr	r3, [r5, #24]
    a418:	e3530000 	cmp	r3, #0
    a41c:	0a000029 	beq	a4c8 <CDWHCIDevice::InterruptHandler()+0x160>
    a420:	e300750c 	movw	r7, #1292	@ 0x50c
    a424:	e3437f98 	movt	r7, #16280	@ 0x3f98
    a428:	e3a04000 	mov	r4, #0
    a42c:	e3a06001 	mov	r6, #1
    a430:	ea000005 	b	a44c <CDWHCIDevice::InterruptHandler()+0xe4>
    a434:	e5953018 	ldr	r3, [r5, #24]
    a438:	e2844001 	add	r4, r4, #1
    a43c:	e1a06086 	lsl	r6, r6, #1
    a440:	e2877020 	add	r7, r7, #32
    a444:	e1530004 	cmp	r3, r4
    a448:	9a00001e 	bls	a4c8 <CDWHCIDevice::InterruptHandler()+0x160>
    a44c:	e28d0010 	add	r0, sp, #16
    a450:	eb00405c 	bl	1a5c8 <CDWHCIRegister::Get() const>
    a454:	e1100006 	tst	r0, r6
    a458:	0afffff5 	beq	a434 <CDWHCIDevice::InterruptHandler()+0xcc>
    a45c:	e3a02000 	mov	r2, #0
    a460:	e1a01007 	mov	r1, r7
    a464:	e28d001c 	add	r0, sp, #28
    a468:	eb00403b 	bl	1a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>
    a46c:	e28d001c 	add	r0, sp, #28
    a470:	eb004046 	bl	1a590 <CDWHCIRegister::Write()>
    a474:	e5d53095 	ldrb	r3, [r5, #149]	@ 0x95
    a478:	e3530000 	cmp	r3, #0
    a47c:	1a000002 	bne	a48c <CDWHCIDevice::InterruptHandler()+0x124>
    a480:	e1a01004 	mov	r1, r4
    a484:	e1a00005 	mov	r0, r5
    a488:	ebfffe25 	bl	9d24 <CDWHCIDevice::ChannelInterruptHandler(unsigned int) [clone .part.0]>
    a48c:	e28d001c 	add	r0, sp, #28
    a490:	eb004036 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    a494:	eaffffe6 	b	a434 <CDWHCIDevice::InterruptHandler()+0xcc>
    a498:	e28d0004 	add	r0, sp, #4
    a49c:	eb004049 	bl	1a5c8 <CDWHCIRegister::Get() const>
    a4a0:	e3100401 	tst	r0, #16777216	@ 0x1000000
    a4a4:	1a00000a 	bne	a4d4 <CDWHCIDevice::InterruptHandler()+0x16c>
    a4a8:	e28d0004 	add	r0, sp, #4
    a4ac:	eb004045 	bl	1a5c8 <CDWHCIRegister::Get() const>
    a4b0:	e3100202 	tst	r0, #536870912	@ 0x20000000
    a4b4:	0affffc2 	beq	a3c4 <CDWHCIDevice::InterruptHandler()+0x5c>
    a4b8:	e2851088 	add	r1, r5, #136	@ 0x88
    a4bc:	e1a00005 	mov	r0, r5
    a4c0:	eb0025da 	bl	13c30 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
    a4c4:	eaffffbe 	b	a3c4 <CDWHCIDevice::InterruptHandler()+0x5c>
    a4c8:	e28d0010 	add	r0, sp, #16
    a4cc:	eb004027 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    a4d0:	eaffffb8 	b	a3b8 <CDWHCIDevice::InterruptHandler()+0x50>
    a4d4:	e3a01d11 	mov	r1, #1088	@ 0x440
    a4d8:	e3431f98 	movt	r1, #16280	@ 0x3f98
    a4dc:	e28d001c 	add	r0, sp, #28
    a4e0:	eb004019 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    a4e4:	e28d001c 	add	r0, sp, #28
    a4e8:	eb004021 	bl	1a574 <CDWHCIRegister::Read()>
    a4ec:	e28d001c 	add	r0, sp, #28
    a4f0:	eb004034 	bl	1a5c8 <CDWHCIRegister::Get() const>
    a4f4:	e3100002 	tst	r0, #2
    a4f8:	1a00000a 	bne	a528 <CDWHCIDevice::InterruptHandler()+0x1c0>
    a4fc:	e28d001c 	add	r0, sp, #28
    a500:	e3e01004 	mvn	r1, #4
    a504:	eb00404e 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    a508:	e3a0102a 	mov	r1, #42	@ 0x2a
    a50c:	e28d001c 	add	r0, sp, #28
    a510:	eb004059 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    a514:	e28d001c 	add	r0, sp, #28
    a518:	eb00401c 	bl	1a590 <CDWHCIRegister::Write()>
    a51c:	e28d001c 	add	r0, sp, #28
    a520:	eb004012 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    a524:	eaffffdf 	b	a4a8 <CDWHCIDevice::InterruptHandler()+0x140>
    a528:	e2851088 	add	r1, r5, #136	@ 0x88
    a52c:	e1a00005 	mov	r0, r5
    a530:	eb0025be 	bl	13c30 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>
    a534:	eafffff0 	b	a4fc <CDWHCIDevice::InterruptHandler()+0x194>

0000a538 <CDWHCIDevice::InterruptStub(void*)>:
    a538:	e3500000 	cmp	r0, #0
    a53c:	0a000000 	beq	a544 <CDWHCIDevice::InterruptStub(void*)+0xc>
    a540:	eaffff88 	b	a368 <CDWHCIDevice::InterruptHandler()>
    a544:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a548:	e3401003 	movt	r1, #3
    a54c:	e3090d50 	movw	r0, #40272	@ 0x9d50
    a550:	e3400003 	movt	r0, #3
    a554:	e92d4010 	push	{r4, lr}
    a558:	e30025df 	movw	r2, #1503	@ 0x5df
    a55c:	eb00861e 	bl	2bddc <assertion_failed>

0000a560 <CDWHCIDevice::AllocateWaitBlock()>:
    a560:	e92d4070 	push	{r4, r5, r6, lr}
    a564:	e1a05000 	mov	r5, r0
    a568:	e5900084 	ldr	r0, [r0, #132]	@ 0x84
    a56c:	e3500000 	cmp	r0, #0
    a570:	1a000010 	bne	a5b8 <CDWHCIDevice::AllocateWaitBlock()+0x58>
    a574:	e5954080 	ldr	r4, [r5, #128]	@ 0x80
    a578:	e2144001 	ands	r4, r4, #1
    a57c:	0a00001b 	beq	a5f0 <CDWHCIDevice::AllocateWaitBlock()+0x90>
    a580:	e3a04000 	mov	r4, #0
    a584:	e3a03001 	mov	r3, #1
    a588:	ea000002 	b	a598 <CDWHCIDevice::AllocateWaitBlock()+0x38>
    a58c:	e5952080 	ldr	r2, [r5, #128]	@ 0x80
    a590:	e1120003 	tst	r2, r3
    a594:	0a00000d 	beq	a5d0 <CDWHCIDevice::AllocateWaitBlock()+0x70>
    a598:	e2844001 	add	r4, r4, #1
    a59c:	e1a03083 	lsl	r3, r3, #1
    a5a0:	e3540010 	cmp	r4, #16
    a5a4:	1afffff8 	bne	a58c <CDWHCIDevice::AllocateWaitBlock()+0x2c>
    a5a8:	e3500000 	cmp	r0, #0
    a5ac:	1a00000c 	bne	a5e4 <CDWHCIDevice::AllocateWaitBlock()+0x84>
    a5b0:	e1a00004 	mov	r0, r4
    a5b4:	e8bd8070 	pop	{r4, r5, r6, pc}
    a5b8:	eb00b4f0 	bl	37980 <EnterCritical>
    a5bc:	e5954080 	ldr	r4, [r5, #128]	@ 0x80
    a5c0:	e5950084 	ldr	r0, [r5, #132]	@ 0x84
    a5c4:	e2144001 	ands	r4, r4, #1
    a5c8:	1affffec 	bne	a580 <CDWHCIDevice::AllocateWaitBlock()+0x20>
    a5cc:	e3a03001 	mov	r3, #1
    a5d0:	e5952080 	ldr	r2, [r5, #128]	@ 0x80
    a5d4:	e3500000 	cmp	r0, #0
    a5d8:	e1822003 	orr	r2, r2, r3
    a5dc:	e5852080 	str	r2, [r5, #128]	@ 0x80
    a5e0:	0afffff2 	beq	a5b0 <CDWHCIDevice::AllocateWaitBlock()+0x50>
    a5e4:	eb00b510 	bl	37a2c <LeaveCritical>
    a5e8:	e1a00004 	mov	r0, r4
    a5ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    a5f0:	e5953080 	ldr	r3, [r5, #128]	@ 0x80
    a5f4:	e3833001 	orr	r3, r3, #1
    a5f8:	e5853080 	str	r3, [r5, #128]	@ 0x80
    a5fc:	eaffffeb 	b	a5b0 <CDWHCIDevice::AllocateWaitBlock()+0x50>

0000a600 <CDWHCIDevice::FreeWaitBlock(unsigned int)>:
    a600:	e351000f 	cmp	r1, #15
    a604:	e92d4070 	push	{r4, r5, r6, lr}
    a608:	8a000012 	bhi	a658 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x58>
    a60c:	e1a04000 	mov	r4, r0
    a610:	e3a05001 	mov	r5, #1
    a614:	e5900084 	ldr	r0, [r0, #132]	@ 0x84
    a618:	e1a05115 	lsl	r5, r5, r1
    a61c:	e3500000 	cmp	r0, #0
    a620:	1a00000a 	bne	a650 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x50>
    a624:	e5943080 	ldr	r3, [r4, #128]	@ 0x80
    a628:	e1130005 	tst	r3, r5
    a62c:	0a00000f 	beq	a670 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x70>
    a630:	e5942084 	ldr	r2, [r4, #132]	@ 0x84
    a634:	e5943080 	ldr	r3, [r4, #128]	@ 0x80
    a638:	e3520000 	cmp	r2, #0
    a63c:	e1c33005 	bic	r3, r3, r5
    a640:	e5843080 	str	r3, [r4, #128]	@ 0x80
    a644:	08bd8070 	popeq	{r4, r5, r6, pc}
    a648:	e8bd4070 	pop	{r4, r5, r6, lr}
    a64c:	ea00b4f6 	b	37a2c <LeaveCritical>
    a650:	eb00b4ca 	bl	37980 <EnterCritical>
    a654:	eafffff2 	b	a624 <CDWHCIDevice::FreeWaitBlock(unsigned int)+0x24>
    a658:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a65c:	e3401003 	movt	r1, #3
    a660:	e3090d5c 	movw	r0, #40284	@ 0x9d5c
    a664:	e3400003 	movt	r0, #3
    a668:	e3002681 	movw	r2, #1665	@ 0x681
    a66c:	eb0085da 	bl	2bddc <assertion_failed>
    a670:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a674:	e3401003 	movt	r1, #3
    a678:	e3090fcc 	movw	r0, #40908	@ 0x9fcc
    a67c:	e3400003 	movt	r0, #3
    a680:	e3002686 	movw	r2, #1670	@ 0x686
    a684:	eb0085d4 	bl	2bddc <assertion_failed>

0000a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>:
    a688:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    a68c:	e1a05000 	mov	r5, r0
    a690:	e1a06001 	mov	r6, r1
    a694:	e24dd00c 	sub	sp, sp, #12
    a698:	e1a09002 	mov	r9, r2
    a69c:	e1a07003 	mov	r7, r3
    a6a0:	ebffffae 	bl	a560 <CDWHCIDevice::AllocateWaitBlock()>
    a6a4:	e350000f 	cmp	r0, #15
    a6a8:	8a000027 	bhi	a74c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xc4>
    a6ac:	e3560000 	cmp	r6, #0
    a6b0:	0a000028 	beq	a758 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xd0>
    a6b4:	e1a04000 	mov	r4, r0
    a6b8:	e1a03005 	mov	r3, r5
    a6bc:	e0858004 	add	r8, r5, r4
    a6c0:	e1a02000 	mov	r2, r0
    a6c4:	e3081660 	movw	r1, #34400	@ 0x8660
    a6c8:	e3401000 	movt	r1, #0
    a6cc:	e1a00006 	mov	r0, r6
    a6d0:	eb002fec 	bl	16688 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
    a6d4:	e5d83070 	ldrb	r3, [r8, #112]	@ 0x70
    a6d8:	e3530000 	cmp	r3, #0
    a6dc:	1a000023 	bne	a770 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xe8>
    a6e0:	e59d1028 	ldr	r1, [sp, #40]	@ 0x28
    a6e4:	e1a03007 	mov	r3, r7
    a6e8:	e58d1000 	str	r1, [sp]
    a6ec:	e1a02009 	mov	r2, r9
    a6f0:	e3a01001 	mov	r1, #1
    a6f4:	e1a00005 	mov	r0, r5
    a6f8:	e5c81070 	strb	r1, [r8, #112]	@ 0x70
    a6fc:	e1a01006 	mov	r1, r6
    a700:	ebfffaec 	bl	92b8 <CDWHCIDevice::TransferStageAsync(CUSBRequest*, bool, bool, unsigned int)>
    a704:	e2503000 	subs	r3, r0, #0
    a708:	0a00000b 	beq	a73c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0xb4>
    a70c:	e5d8c070 	ldrb	ip, [r8, #112]	@ 0x70
    a710:	e35c0000 	cmp	ip, #0
    a714:	1afffffc 	bne	a70c <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)+0x84>
    a718:	e1a01004 	mov	r1, r4
    a71c:	e1a00005 	mov	r0, r5
    a720:	ebffffb6 	bl	a600 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    a724:	e1a00006 	mov	r0, r6
    a728:	eb002f60 	bl	164b0 <CUSBRequest::GetStatus() const>
    a72c:	e2500000 	subs	r0, r0, #0
    a730:	13a00001 	movne	r0, #1
    a734:	e28dd00c 	add	sp, sp, #12
    a738:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a73c:	e1a01004 	mov	r1, r4
    a740:	e1a00005 	mov	r0, r5
    a744:	e5c83070 	strb	r3, [r8, #112]	@ 0x70
    a748:	ebffffac 	bl	a600 <CDWHCIDevice::FreeWaitBlock(unsigned int)>
    a74c:	e3a00000 	mov	r0, #0
    a750:	e28dd00c 	add	sp, sp, #12
    a754:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
    a758:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a75c:	e3401003 	movt	r1, #3
    a760:	e3090e38 	movw	r0, #40504	@ 0x9e38
    a764:	e3400003 	movt	r0, #3
    a768:	e30022cf 	movw	r2, #719	@ 0x2cf
    a76c:	eb00859a 	bl	2bddc <assertion_failed>
    a770:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a774:	e3401003 	movt	r1, #3
    a778:	e3090ff4 	movw	r0, #40948	@ 0x9ff4
    a77c:	e3400003 	movt	r0, #3
    a780:	e30022d2 	movw	r2, #722	@ 0x2d2
    a784:	eb008594 	bl	2bddc <assertion_failed>

0000a788 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)>:
    a788:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    a78c:	e1a04001 	mov	r4, r1
    a790:	e5d01095 	ldrb	r1, [r0, #149]	@ 0x95
    a794:	e24dd00c 	sub	sp, sp, #12
    a798:	e21110ff 	ands	r1, r1, #255	@ 0xff
    a79c:	1a00001f 	bne	a820 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a7a0:	e3540000 	cmp	r4, #0
    a7a4:	0a000065 	beq	a940 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1b8>
    a7a8:	e1a06000 	mov	r6, r0
    a7ac:	e1a00004 	mov	r0, r4
    a7b0:	e1a05002 	mov	r5, r2
    a7b4:	eb002f37 	bl	16498 <CUSBRequest::SetStatus(int)>
    a7b8:	e1a00004 	mov	r0, r4
    a7bc:	eb002f2b 	bl	16470 <CUSBRequest::GetEndpoint() const>
    a7c0:	eb001617 	bl	10024 <CUSBEndpoint::GetType() const>
    a7c4:	e3500000 	cmp	r0, #0
    a7c8:	1a000017 	bne	a82c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xa4>
    a7cc:	e3550000 	cmp	r5, #0
    a7d0:	1a000067 	bne	a974 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1ec>
    a7d4:	e1a00004 	mov	r0, r4
    a7d8:	eb002f4e 	bl	16518 <CUSBRequest::GetSetupData()>
    a7dc:	e3500000 	cmp	r0, #0
    a7e0:	0a000069 	beq	a98c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x204>
    a7e4:	e1d030d0 	ldrsb	r3, [r0]
    a7e8:	e1a00004 	mov	r0, r4
    a7ec:	e3530000 	cmp	r3, #0
    a7f0:	ba000021 	blt	a87c <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xf4>
    a7f4:	eb002f6a 	bl	165a4 <CUSBRequest::GetBufLen() const>
    a7f8:	e2507000 	subs	r7, r0, #0
    a7fc:	1a000038 	bne	a8e4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x15c>
    a800:	e1a03007 	mov	r3, r7
    a804:	e1a02007 	mov	r2, r7
    a808:	e1a01004 	mov	r1, r4
    a80c:	e1a00006 	mov	r0, r6
    a810:	e58d7000 	str	r7, [sp]
    a814:	ebffff9b 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a818:	e3500000 	cmp	r0, #0
    a81c:	1a00004d 	bne	a958 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x1d0>
    a820:	e3a00000 	mov	r0, #0
    a824:	e28dd00c 	add	sp, sp, #12
    a828:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a82c:	e1a00004 	mov	r0, r4
    a830:	eb002f0e 	bl	16470 <CUSBRequest::GetEndpoint() const>
    a834:	eb0015fa 	bl	10024 <CUSBEndpoint::GetType() const>
    a838:	e3500001 	cmp	r0, #1
    a83c:	1a000058 	bne	a9a4 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x21c>
    a840:	e1a00004 	mov	r0, r4
    a844:	eb002f56 	bl	165a4 <CUSBRequest::GetBufLen() const>
    a848:	e3500000 	cmp	r0, #0
    a84c:	0a00005f 	beq	a9d0 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x248>
    a850:	e1a00004 	mov	r0, r4
    a854:	eb002f05 	bl	16470 <CUSBRequest::GetEndpoint() const>
    a858:	eb0015f3 	bl	1002c <CUSBEndpoint::IsDirectionIn() const>
    a85c:	e3a03000 	mov	r3, #0
    a860:	e1a02000 	mov	r2, r0
    a864:	e1a01004 	mov	r1, r4
    a868:	e1a00006 	mov	r0, r6
    a86c:	e58d5000 	str	r5, [sp]
    a870:	ebffff84 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a874:	e28dd00c 	add	sp, sp, #12
    a878:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    a87c:	eb002f48 	bl	165a4 <CUSBRequest::GetBufLen() const>
    a880:	e3500000 	cmp	r0, #0
    a884:	0a000057 	beq	a9e8 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x260>
    a888:	e1a03005 	mov	r3, r5
    a88c:	e1a02005 	mov	r2, r5
    a890:	e1a01004 	mov	r1, r4
    a894:	e1a00006 	mov	r0, r6
    a898:	e58d5000 	str	r5, [sp]
    a89c:	ebffff79 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a8a0:	e3500000 	cmp	r0, #0
    a8a4:	0affffdd 	beq	a820 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a8a8:	e1a03005 	mov	r3, r5
    a8ac:	e3a02001 	mov	r2, #1
    a8b0:	e1a01004 	mov	r1, r4
    a8b4:	e1a00006 	mov	r0, r6
    a8b8:	e58d5000 	str	r5, [sp]
    a8bc:	ebffff71 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a8c0:	e3500000 	cmp	r0, #0
    a8c4:	0affffd5 	beq	a820 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a8c8:	e3a03001 	mov	r3, #1
    a8cc:	e1a02005 	mov	r2, r5
    a8d0:	e1a01004 	mov	r1, r4
    a8d4:	e1a00006 	mov	r0, r6
    a8d8:	e58d5000 	str	r5, [sp]
    a8dc:	ebffff69 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a8e0:	eaffffcf 	b	a824 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a8e4:	e1a03005 	mov	r3, r5
    a8e8:	e1a02005 	mov	r2, r5
    a8ec:	e1a01004 	mov	r1, r4
    a8f0:	e1a00006 	mov	r0, r6
    a8f4:	e58d5000 	str	r5, [sp]
    a8f8:	ebffff62 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a8fc:	e3500000 	cmp	r0, #0
    a900:	0affffc6 	beq	a820 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a904:	e1a03005 	mov	r3, r5
    a908:	e1a02005 	mov	r2, r5
    a90c:	e1a01004 	mov	r1, r4
    a910:	e1a00006 	mov	r0, r6
    a914:	e58d5000 	str	r5, [sp]
    a918:	ebffff5a 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a91c:	e3500000 	cmp	r0, #0
    a920:	0affffbe 	beq	a820 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x98>
    a924:	e3a03001 	mov	r3, #1
    a928:	e1a01004 	mov	r1, r4
    a92c:	e1a02003 	mov	r2, r3
    a930:	e1a00006 	mov	r0, r6
    a934:	e58d5000 	str	r5, [sp]
    a938:	ebffff52 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a93c:	eaffffb8 	b	a824 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a940:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a944:	e3401003 	movt	r1, #3
    a948:	e3090e38 	movw	r0, #40504	@ 0x9e38
    a94c:	e3400003 	movt	r0, #3
    a950:	e3a020f2 	mov	r2, #242	@ 0xf2
    a954:	eb008520 	bl	2bddc <assertion_failed>
    a958:	e3a03001 	mov	r3, #1
    a95c:	e1a01004 	mov	r1, r4
    a960:	e1a02003 	mov	r2, r3
    a964:	e1a00006 	mov	r0, r6
    a968:	e58d7000 	str	r7, [sp]
    a96c:	ebffff45 	bl	a688 <CDWHCIDevice::TransferStage(CUSBRequest*, bool, bool, unsigned int)>
    a970:	eaffffab 	b	a824 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0x9c>
    a974:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a978:	e3401003 	movt	r1, #3
    a97c:	e30a000c 	movw	r0, #40972	@ 0xa00c
    a980:	e3400003 	movt	r0, #3
    a984:	e3a020f8 	mov	r2, #248	@ 0xf8
    a988:	eb008513 	bl	2bddc <assertion_failed>
    a98c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a990:	e3401003 	movt	r1, #3
    a994:	e30a002c 	movw	r0, #41004	@ 0xa02c
    a998:	e3400003 	movt	r0, #3
    a99c:	e3a020fb 	mov	r2, #251	@ 0xfb
    a9a0:	eb00850d 	bl	2bddc <assertion_failed>
    a9a4:	e1a00004 	mov	r0, r4
    a9a8:	eb002eb0 	bl	16470 <CUSBRequest::GetEndpoint() const>
    a9ac:	eb00159c 	bl	10024 <CUSBEndpoint::GetType() const>
    a9b0:	e3500002 	cmp	r0, #2
    a9b4:	0affffa1 	beq	a840 <CDWHCIDevice::SubmitBlockingRequest(CUSBRequest*, unsigned int)+0xb8>
    a9b8:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a9bc:	e3401003 	movt	r1, #3
    a9c0:	e30a0038 	movw	r0, #41016	@ 0xa038
    a9c4:	e3400003 	movt	r0, #3
    a9c8:	e300211f 	movw	r2, #287	@ 0x11f
    a9cc:	eb008502 	bl	2bddc <assertion_failed>
    a9d0:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a9d4:	e3401003 	movt	r1, #3
    a9d8:	e3090e7c 	movw	r0, #40572	@ 0x9e7c
    a9dc:	e3400003 	movt	r0, #3
    a9e0:	e3002121 	movw	r2, #289	@ 0x121
    a9e4:	eb0084fc 	bl	2bddc <assertion_failed>
    a9e8:	e3091d40 	movw	r1, #40256	@ 0x9d40
    a9ec:	e3401003 	movt	r1, #3
    a9f0:	e3090e7c 	movw	r0, #40572	@ 0x9e7c
    a9f4:	e3400003 	movt	r0, #3
    a9f8:	e3a020ff 	mov	r2, #255	@ 0xff
    a9fc:	eb0084f6 	bl	2bddc <assertion_failed>

0000aa00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>:
    aa00:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    aa04:	e2515000 	subs	r5, r1, #0
    aa08:	e59d4020 	ldr	r4, [sp, #32]
    aa0c:	0a000020 	beq	aa94 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x94>
    aa10:	e1a06002 	mov	r6, r2
    aa14:	e3520000 	cmp	r2, #0
    aa18:	0a000023 	beq	aaac <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xac>
    aa1c:	e3540000 	cmp	r4, #0
    aa20:	0a000027 	beq	aac4 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0xc4>
    aa24:	e1a07000 	mov	r7, r0
    aa28:	e1a08003 	mov	r8, r3
    aa2c:	e2239001 	eor	r9, r3, #1
    aa30:	ea000003 	b	aa44 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x44>
    aa34:	e3a00001 	mov	r0, #1
    aa38:	eb00a93d 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    aa3c:	e2544001 	subs	r4, r4, #1
    aa40:	0a000011 	beq	aa8c <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x8c>
    aa44:	e1a00005 	mov	r0, r5
    aa48:	eb003ec9 	bl	1a574 <CDWHCIRegister::Read()>
    aa4c:	e1100006 	tst	r0, r6
    aa50:	11a0c009 	movne	ip, r9
    aa54:	01a0c008 	moveq	ip, r8
    aa58:	e35c0000 	cmp	ip, #0
    aa5c:	0a000008 	beq	aa84 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x84>
    aa60:	e5973014 	ldr	r3, [r7, #20]
    aa64:	e3530000 	cmp	r3, #0
    aa68:	1afffff1 	bne	aa34 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)+0x34>
    aa6c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    aa70:	e3401003 	movt	r1, #3
    aa74:	e3090d94 	movw	r0, #40340	@ 0x9d94
    aa78:	e3400003 	movt	r0, #3
    aa7c:	e3002697 	movw	r2, #1687	@ 0x697
    aa80:	eb0084d5 	bl	2bddc <assertion_failed>
    aa84:	e3a00001 	mov	r0, #1
    aa88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    aa8c:	e1a00004 	mov	r0, r4
    aa90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    aa94:	e3091d40 	movw	r1, #40256	@ 0x9d40
    aa98:	e3401003 	movt	r1, #3
    aa9c:	e30a00ac 	movw	r0, #41132	@ 0xa0ac
    aaa0:	e3400003 	movt	r0, #3
    aaa4:	e3002691 	movw	r2, #1681	@ 0x691
    aaa8:	eb0084cb 	bl	2bddc <assertion_failed>
    aaac:	e3091d40 	movw	r1, #40256	@ 0x9d40
    aab0:	e3401003 	movt	r1, #3
    aab4:	e30a00bc 	movw	r0, #41148	@ 0xa0bc
    aab8:	e3400003 	movt	r0, #3
    aabc:	e3002692 	movw	r2, #1682	@ 0x692
    aac0:	eb0084c5 	bl	2bddc <assertion_failed>
    aac4:	e3091d40 	movw	r1, #40256	@ 0x9d40
    aac8:	e3401003 	movt	r1, #3
    aacc:	e30a00c8 	movw	r0, #41160	@ 0xa0c8
    aad0:	e3400003 	movt	r0, #3
    aad4:	e3002693 	movw	r2, #1683	@ 0x693
    aad8:	eb0084bf 	bl	2bddc <assertion_failed>

0000aadc <CDWHCIDevice::EnableRootPort()>:
    aadc:	e92d4030 	push	{r4, r5, lr}
    aae0:	e1a04000 	mov	r4, r0
    aae4:	e24dd024 	sub	sp, sp, #36	@ 0x24
    aae8:	eb008d28 	bl	2df90 <CKernelOptions::Get()>
    aaec:	e3500000 	cmp	r0, #0
    aaf0:	0a000013 	beq	ab44 <CDWHCIDevice::EnableRootPort()+0x68>
    aaf4:	eb008cf7 	bl	2ded8 <CKernelOptions::GetUSBPowerDelay() const>
    aaf8:	e2505000 	subs	r5, r0, #0
    aafc:	0a000010 	beq	ab44 <CDWHCIDevice::EnableRootPort()+0x68>
    ab00:	e3a01d11 	mov	r1, #1088	@ 0x440
    ab04:	e3431f98 	movt	r1, #16280	@ 0x3f98
    ab08:	e28d0008 	add	r0, sp, #8
    ab0c:	eb003e8e 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ab10:	e3a03001 	mov	r3, #1
    ab14:	e1a00004 	mov	r0, r4
    ab18:	e1a02003 	mov	r2, r3
    ab1c:	e28d1008 	add	r1, sp, #8
    ab20:	e58d5000 	str	r5, [sp]
    ab24:	ebffffb5 	bl	aa00 <CDWHCIDevice::WaitForBit(CDWHCIRegister*, unsigned int, bool, unsigned int)>
    ab28:	e2504000 	subs	r4, r0, #0
    ab2c:	1a000006 	bne	ab4c <CDWHCIDevice::EnableRootPort()+0x70>
    ab30:	e28d0008 	add	r0, sp, #8
    ab34:	eb003e8d 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    ab38:	e1a00004 	mov	r0, r4
    ab3c:	e28dd024 	add	sp, sp, #36	@ 0x24
    ab40:	e8bd8030 	pop	{r4, r5, pc}
    ab44:	e30051fe 	movw	r5, #510	@ 0x1fe
    ab48:	eaffffec 	b	ab00 <CDWHCIDevice::EnableRootPort()+0x24>
    ab4c:	e3a00064 	mov	r0, #100	@ 0x64
    ab50:	eb00a8f7 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    ab54:	e28d0008 	add	r0, sp, #8
    ab58:	eb003e85 	bl	1a574 <CDWHCIRegister::Read()>
    ab5c:	e28d0008 	add	r0, sp, #8
    ab60:	e3e0102e 	mvn	r1, #46	@ 0x2e
    ab64:	eb003eb6 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    ab68:	e3a01c01 	mov	r1, #256	@ 0x100
    ab6c:	e28d0008 	add	r0, sp, #8
    ab70:	eb003ec1 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    ab74:	e28d0008 	add	r0, sp, #8
    ab78:	eb003e84 	bl	1a590 <CDWHCIRegister::Write()>
    ab7c:	e3a00032 	mov	r0, #50	@ 0x32
    ab80:	eb00a8eb 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    ab84:	e28d0008 	add	r0, sp, #8
    ab88:	eb003e79 	bl	1a574 <CDWHCIRegister::Read()>
    ab8c:	e28d0008 	add	r0, sp, #8
    ab90:	e3e0102e 	mvn	r1, #46	@ 0x2e
    ab94:	eb003eaa 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    ab98:	e3e01c01 	mvn	r1, #256	@ 0x100
    ab9c:	e28d0008 	add	r0, sp, #8
    aba0:	eb003ea7 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    aba4:	e28d0008 	add	r0, sp, #8
    aba8:	eb003e78 	bl	1a590 <CDWHCIRegister::Write()>
    abac:	e3a00014 	mov	r0, #20
    abb0:	eb00a8df 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    abb4:	eb008cf5 	bl	2df90 <CKernelOptions::Get()>
    abb8:	eb008cc8 	bl	2dee0 <CKernelOptions::GetUSBFullSpeed() const>
    abbc:	e3500000 	cmp	r0, #0
    abc0:	0affffda 	beq	ab30 <CDWHCIDevice::EnableRootPort()+0x54>
    abc4:	e28d0014 	add	r0, sp, #20
    abc8:	e3001404 	movw	r1, #1028	@ 0x404
    abcc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    abd0:	eb003e5d 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    abd4:	e28d0014 	add	r0, sp, #20
    abd8:	e30b1b80 	movw	r1, #48000	@ 0xbb80
    abdc:	eb003e85 	bl	1a5f8 <CDWHCIRegister::Set(unsigned int)>
    abe0:	e28d0014 	add	r0, sp, #20
    abe4:	eb003e69 	bl	1a590 <CDWHCIRegister::Write()>
    abe8:	e28d0014 	add	r0, sp, #20
    abec:	eb003e5f 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    abf0:	eaffffce 	b	ab30 <CDWHCIDevice::EnableRootPort()+0x54>

0000abf4 <CDWHCIDevice::LogTransactionFailed(unsigned int)>:
    abf4:	e92d4010 	push	{r4, lr}
    abf8:	e1a04001 	mov	r4, r1
    abfc:	e24dd008 	sub	sp, sp, #8
    ac00:	eb00b359 	bl	3796c <CurrentExecutionLevel>
    ac04:	e3500001 	cmp	r0, #1
    ac08:	9a000001 	bls	ac14 <CDWHCIDevice::LogTransactionFailed(unsigned int)+0x20>
    ac0c:	e28dd008 	add	sp, sp, #8
    ac10:	e8bd8010 	pop	{r4, pc}
    ac14:	eb008eeb 	bl	2e7c8 <CLogger::Get()>
    ac18:	e59f1018 	ldr	r1, [pc, #24]	@ ac38 <CDWHCIDevice::LogTransactionFailed(unsigned int)+0x44>
    ac1c:	e3a02002 	mov	r2, #2
    ac20:	e58d4000 	str	r4, [sp]
    ac24:	e3093fa8 	movw	r3, #40872	@ 0x9fa8
    ac28:	e3403003 	movt	r3, #3
    ac2c:	eb0090ae 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac30:	e28dd008 	add	sp, sp, #8
    ac34:	e8bd8010 	pop	{r4, pc}
    ac38:	0003eb90 	.word	0x0003eb90

0000ac3c <CDWHCIDevice::DumpRegister(char const*, unsigned int)>:
    ac3c:	e92d4030 	push	{r4, r5, lr}
    ac40:	e1a04001 	mov	r4, r1
    ac44:	e1a01002 	mov	r1, r2
    ac48:	e24dd01c 	sub	sp, sp, #28
    ac4c:	e28d000c 	add	r0, sp, #12
    ac50:	eb003e3d 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ac54:	f57ff05f 	dmb	sy
    ac58:	eb008eda 	bl	2e7c8 <CLogger::Get()>
    ac5c:	e1a05000 	mov	r5, r0
    ac60:	e28d000c 	add	r0, sp, #12
    ac64:	eb003e42 	bl	1a574 <CDWHCIRegister::Read()>
    ac68:	e59f1028 	ldr	r1, [pc, #40]	@ ac98 <CDWHCIDevice::DumpRegister(char const*, unsigned int)+0x5c>
    ac6c:	e1a03000 	mov	r3, r0
    ac70:	e3a02004 	mov	r2, #4
    ac74:	e1a00005 	mov	r0, r5
    ac78:	e88d0018 	stm	sp, {r3, r4}
    ac7c:	e30a30d8 	movw	r3, #41176	@ 0xa0d8
    ac80:	e3403003 	movt	r3, #3
    ac84:	eb009098 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ac88:	e28d000c 	add	r0, sp, #12
    ac8c:	eb003e37 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    ac90:	e28dd01c 	add	sp, sp, #28
    ac94:	e8bd8030 	pop	{r4, r5, pc}
    ac98:	0003eb90 	.word	0x0003eb90

0000ac9c <CDWHCIDevice::DumpStatus(unsigned int)>:
    ac9c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    aca0:	e1a07001 	mov	r7, r1
    aca4:	e3a01000 	mov	r1, #0
    aca8:	e3431f98 	movt	r1, #16280	@ 0x3f98
    acac:	e24dd01c 	sub	sp, sp, #28
    acb0:	e28d000c 	add	r0, sp, #12
    acb4:	eb003e24 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    acb8:	f57ff05f 	dmb	sy
    acbc:	e59f5680 	ldr	r5, [pc, #1664]	@ b344 <CDWHCIDevice::DumpStatus(unsigned int)+0x6a8>
    acc0:	eb008ec0 	bl	2e7c8 <CLogger::Get()>
    acc4:	e30a40d8 	movw	r4, #41176	@ 0xa0d8
    acc8:	e3404003 	movt	r4, #3
    accc:	e1a06000 	mov	r6, r0
    acd0:	e28d000c 	add	r0, sp, #12
    acd4:	eb003e26 	bl	1a574 <CDWHCIRegister::Read()>
    acd8:	e1a03004 	mov	r3, r4
    acdc:	e3a02004 	mov	r2, #4
    ace0:	e1a01005 	mov	r1, r5
    ace4:	e58d0000 	str	r0, [sp]
    ace8:	e30ac0e4 	movw	ip, #41188	@ 0xa0e4
    acec:	e340c003 	movt	ip, #3
    acf0:	e1a00006 	mov	r0, r6
    acf4:	e58dc004 	str	ip, [sp, #4]
    acf8:	eb00907b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    acfc:	e28d000c 	add	r0, sp, #12
    ad00:	eb003e1a 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    ad04:	e28d000c 	add	r0, sp, #12
    ad08:	e3a01008 	mov	r1, #8
    ad0c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    ad10:	eb003e0d 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ad14:	f57ff05f 	dmb	sy
    ad18:	eb008eaa 	bl	2e7c8 <CLogger::Get()>
    ad1c:	e1a06000 	mov	r6, r0
    ad20:	e28d000c 	add	r0, sp, #12
    ad24:	eb003e12 	bl	1a574 <CDWHCIRegister::Read()>
    ad28:	e1a03004 	mov	r3, r4
    ad2c:	e3a02004 	mov	r2, #4
    ad30:	e1a01005 	mov	r1, r5
    ad34:	e58d0000 	str	r0, [sp]
    ad38:	e30ac0f0 	movw	ip, #41200	@ 0xa0f0
    ad3c:	e340c003 	movt	ip, #3
    ad40:	e1a00006 	mov	r0, r6
    ad44:	e58dc004 	str	ip, [sp, #4]
    ad48:	eb009067 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ad4c:	e28d000c 	add	r0, sp, #12
    ad50:	eb003e06 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    ad54:	e28d000c 	add	r0, sp, #12
    ad58:	e3a0100c 	mov	r1, #12
    ad5c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    ad60:	eb003df9 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ad64:	f57ff05f 	dmb	sy
    ad68:	eb008e96 	bl	2e7c8 <CLogger::Get()>
    ad6c:	e1a06000 	mov	r6, r0
    ad70:	e28d000c 	add	r0, sp, #12
    ad74:	eb003dfe 	bl	1a574 <CDWHCIRegister::Read()>
    ad78:	e1a03004 	mov	r3, r4
    ad7c:	e3a02004 	mov	r2, #4
    ad80:	e1a01005 	mov	r1, r5
    ad84:	e58d0000 	str	r0, [sp]
    ad88:	e30ac0f8 	movw	ip, #41208	@ 0xa0f8
    ad8c:	e340c003 	movt	ip, #3
    ad90:	e1a00006 	mov	r0, r6
    ad94:	e58dc004 	str	ip, [sp, #4]
    ad98:	eb009053 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ad9c:	e28d000c 	add	r0, sp, #12
    ada0:	eb003df2 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    ada4:	e28d000c 	add	r0, sp, #12
    ada8:	e3a01010 	mov	r1, #16
    adac:	e3431f98 	movt	r1, #16280	@ 0x3f98
    adb0:	eb003de5 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    adb4:	f57ff05f 	dmb	sy
    adb8:	eb008e82 	bl	2e7c8 <CLogger::Get()>
    adbc:	e1a06000 	mov	r6, r0
    adc0:	e28d000c 	add	r0, sp, #12
    adc4:	eb003dea 	bl	1a574 <CDWHCIRegister::Read()>
    adc8:	e1a03004 	mov	r3, r4
    adcc:	e3a02004 	mov	r2, #4
    add0:	e1a01005 	mov	r1, r5
    add4:	e58d0000 	str	r0, [sp]
    add8:	e30ac100 	movw	ip, #41216	@ 0xa100
    addc:	e340c003 	movt	ip, #3
    ade0:	e1a00006 	mov	r0, r6
    ade4:	e58dc004 	str	ip, [sp, #4]
    ade8:	eb00903f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    adec:	e28d000c 	add	r0, sp, #12
    adf0:	eb003dde 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    adf4:	e28d000c 	add	r0, sp, #12
    adf8:	e3a01014 	mov	r1, #20
    adfc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    ae00:	eb003dd1 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ae04:	f57ff05f 	dmb	sy
    ae08:	eb008e6e 	bl	2e7c8 <CLogger::Get()>
    ae0c:	e1a06000 	mov	r6, r0
    ae10:	e28d000c 	add	r0, sp, #12
    ae14:	eb003dd6 	bl	1a574 <CDWHCIRegister::Read()>
    ae18:	e1a03004 	mov	r3, r4
    ae1c:	e3a02004 	mov	r2, #4
    ae20:	e1a01005 	mov	r1, r5
    ae24:	e58d0000 	str	r0, [sp]
    ae28:	e30ac108 	movw	ip, #41224	@ 0xa108
    ae2c:	e340c003 	movt	ip, #3
    ae30:	e1a00006 	mov	r0, r6
    ae34:	e58dc004 	str	ip, [sp, #4]
    ae38:	eb00902b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ae3c:	e28d000c 	add	r0, sp, #12
    ae40:	eb003dca 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    ae44:	e28d000c 	add	r0, sp, #12
    ae48:	e3a01018 	mov	r1, #24
    ae4c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    ae50:	eb003dbd 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    ae54:	f57ff05f 	dmb	sy
    ae58:	eb008e5a 	bl	2e7c8 <CLogger::Get()>
    ae5c:	e1a06000 	mov	r6, r0
    ae60:	e28d000c 	add	r0, sp, #12
    ae64:	eb003dc2 	bl	1a574 <CDWHCIRegister::Read()>
    ae68:	e1a03004 	mov	r3, r4
    ae6c:	e3a02004 	mov	r2, #4
    ae70:	e1a01005 	mov	r1, r5
    ae74:	e58d0000 	str	r0, [sp]
    ae78:	e30ac114 	movw	ip, #41236	@ 0xa114
    ae7c:	e340c003 	movt	ip, #3
    ae80:	e1a00006 	mov	r0, r6
    ae84:	e58dc004 	str	ip, [sp, #4]
    ae88:	eb009017 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ae8c:	e28d000c 	add	r0, sp, #12
    ae90:	eb003db6 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    ae94:	e28d000c 	add	r0, sp, #12
    ae98:	e3a01024 	mov	r1, #36	@ 0x24
    ae9c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    aea0:	eb003da9 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aea4:	f57ff05f 	dmb	sy
    aea8:	eb008e46 	bl	2e7c8 <CLogger::Get()>
    aeac:	e1a06000 	mov	r6, r0
    aeb0:	e28d000c 	add	r0, sp, #12
    aeb4:	eb003dae 	bl	1a574 <CDWHCIRegister::Read()>
    aeb8:	e1a03004 	mov	r3, r4
    aebc:	e3a02004 	mov	r2, #4
    aec0:	e1a01005 	mov	r1, r5
    aec4:	e58d0000 	str	r0, [sp]
    aec8:	e30ac120 	movw	ip, #41248	@ 0xa120
    aecc:	e340c003 	movt	ip, #3
    aed0:	e1a00006 	mov	r0, r6
    aed4:	e58dc004 	str	ip, [sp, #4]
    aed8:	eb009003 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    aedc:	e28d000c 	add	r0, sp, #12
    aee0:	eb003da2 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    aee4:	e28d000c 	add	r0, sp, #12
    aee8:	e3a01028 	mov	r1, #40	@ 0x28
    aeec:	e3431f98 	movt	r1, #16280	@ 0x3f98
    aef0:	eb003d95 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    aef4:	f57ff05f 	dmb	sy
    aef8:	eb008e32 	bl	2e7c8 <CLogger::Get()>
    aefc:	e1a06000 	mov	r6, r0
    af00:	e28d000c 	add	r0, sp, #12
    af04:	eb003d9a 	bl	1a574 <CDWHCIRegister::Read()>
    af08:	e1a03004 	mov	r3, r4
    af0c:	e3a02004 	mov	r2, #4
    af10:	e1a01005 	mov	r1, r5
    af14:	e58d0000 	str	r0, [sp]
    af18:	e30ac12c 	movw	ip, #41260	@ 0xa12c
    af1c:	e340c003 	movt	ip, #3
    af20:	e1a00006 	mov	r0, r6
    af24:	e58dc004 	str	ip, [sp, #4]
    af28:	eb008fef 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    af2c:	e28d000c 	add	r0, sp, #12
    af30:	eb003d8e 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    af34:	e28d000c 	add	r0, sp, #12
    af38:	e3a0102c 	mov	r1, #44	@ 0x2c
    af3c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    af40:	eb003d81 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    af44:	f57ff05f 	dmb	sy
    af48:	eb008e1e 	bl	2e7c8 <CLogger::Get()>
    af4c:	e1a06000 	mov	r6, r0
    af50:	e28d000c 	add	r0, sp, #12
    af54:	eb003d86 	bl	1a574 <CDWHCIRegister::Read()>
    af58:	e1a03004 	mov	r3, r4
    af5c:	e3a02004 	mov	r2, #4
    af60:	e1a01005 	mov	r1, r5
    af64:	e58d0000 	str	r0, [sp]
    af68:	e30ac140 	movw	ip, #41280	@ 0xa140
    af6c:	e340c003 	movt	ip, #3
    af70:	e1a00006 	mov	r0, r6
    af74:	e58dc004 	str	ip, [sp, #4]
    af78:	eb008fdb 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    af7c:	e28d000c 	add	r0, sp, #12
    af80:	eb003d7a 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    af84:	e28d000c 	add	r0, sp, #12
    af88:	e3a01c01 	mov	r1, #256	@ 0x100
    af8c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    af90:	eb003d6d 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    af94:	f57ff05f 	dmb	sy
    af98:	eb008e0a 	bl	2e7c8 <CLogger::Get()>
    af9c:	e1a06000 	mov	r6, r0
    afa0:	e28d000c 	add	r0, sp, #12
    afa4:	eb003d72 	bl	1a574 <CDWHCIRegister::Read()>
    afa8:	e1a03004 	mov	r3, r4
    afac:	e3a02004 	mov	r2, #4
    afb0:	e1a01005 	mov	r1, r5
    afb4:	e58d0000 	str	r0, [sp]
    afb8:	e30ac150 	movw	ip, #41296	@ 0xa150
    afbc:	e340c003 	movt	ip, #3
    afc0:	e1a00006 	mov	r0, r6
    afc4:	e58dc004 	str	ip, [sp, #4]
    afc8:	eb008fc7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    afcc:	e28d000c 	add	r0, sp, #12
    afd0:	eb003d66 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    afd4:	e28d000c 	add	r0, sp, #12
    afd8:	e3a01b01 	mov	r1, #1024	@ 0x400
    afdc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    afe0:	eb003d59 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    afe4:	f57ff05f 	dmb	sy
    afe8:	eb008df6 	bl	2e7c8 <CLogger::Get()>
    afec:	e1a06000 	mov	r6, r0
    aff0:	e28d000c 	add	r0, sp, #12
    aff4:	eb003d5e 	bl	1a574 <CDWHCIRegister::Read()>
    aff8:	e1a03004 	mov	r3, r4
    affc:	e3a02004 	mov	r2, #4
    b000:	e1a01005 	mov	r1, r5
    b004:	e58d0000 	str	r0, [sp]
    b008:	e30ac168 	movw	ip, #41320	@ 0xa168
    b00c:	e340c003 	movt	ip, #3
    b010:	e1a00006 	mov	r0, r6
    b014:	e58dc004 	str	ip, [sp, #4]
    b018:	eb008fb3 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b01c:	e28d000c 	add	r0, sp, #12
    b020:	eb003d52 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b024:	e28d000c 	add	r0, sp, #12
    b028:	e3a01e41 	mov	r1, #1040	@ 0x410
    b02c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    b030:	eb003d45 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b034:	f57ff05f 	dmb	sy
    b038:	eb008de2 	bl	2e7c8 <CLogger::Get()>
    b03c:	e1a06000 	mov	r6, r0
    b040:	e28d000c 	add	r0, sp, #12
    b044:	eb003d4a 	bl	1a574 <CDWHCIRegister::Read()>
    b048:	e1a03004 	mov	r3, r4
    b04c:	e3a02004 	mov	r2, #4
    b050:	e1a01005 	mov	r1, r5
    b054:	e58d0000 	str	r0, [sp]
    b058:	e30ac174 	movw	ip, #41332	@ 0xa174
    b05c:	e340c003 	movt	ip, #3
    b060:	e1a00006 	mov	r0, r6
    b064:	e58dc004 	str	ip, [sp, #4]
    b068:	eb008f9f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b06c:	e28d000c 	add	r0, sp, #12
    b070:	eb003d3e 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b074:	e28d000c 	add	r0, sp, #12
    b078:	e3001414 	movw	r1, #1044	@ 0x414
    b07c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    b080:	eb003d31 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b084:	f57ff05f 	dmb	sy
    b088:	eb008dce 	bl	2e7c8 <CLogger::Get()>
    b08c:	e1a06000 	mov	r6, r0
    b090:	e28d000c 	add	r0, sp, #12
    b094:	eb003d36 	bl	1a574 <CDWHCIRegister::Read()>
    b098:	e1a03004 	mov	r3, r4
    b09c:	e3a02004 	mov	r2, #4
    b0a0:	e1a01005 	mov	r1, r5
    b0a4:	e58d0000 	str	r0, [sp]
    b0a8:	e30ac18c 	movw	ip, #41356	@ 0xa18c
    b0ac:	e340c003 	movt	ip, #3
    b0b0:	e1a00006 	mov	r0, r6
    b0b4:	e58dc004 	str	ip, [sp, #4]
    b0b8:	eb008f8b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b0bc:	e28d000c 	add	r0, sp, #12
    b0c0:	eb003d2a 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b0c4:	e28d000c 	add	r0, sp, #12
    b0c8:	e3001418 	movw	r1, #1048	@ 0x418
    b0cc:	e3431f98 	movt	r1, #16280	@ 0x3f98
    b0d0:	eb003d1d 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b0d4:	f57ff05f 	dmb	sy
    b0d8:	eb008dba 	bl	2e7c8 <CLogger::Get()>
    b0dc:	e1a06000 	mov	r6, r0
    b0e0:	e28d000c 	add	r0, sp, #12
    b0e4:	eb003d22 	bl	1a574 <CDWHCIRegister::Read()>
    b0e8:	e1a03004 	mov	r3, r4
    b0ec:	e3a02004 	mov	r2, #4
    b0f0:	e1a01005 	mov	r1, r5
    b0f4:	e58d0000 	str	r0, [sp]
    b0f8:	e30ac1a0 	movw	ip, #41376	@ 0xa1a0
    b0fc:	e340c003 	movt	ip, #3
    b100:	e1a00006 	mov	r0, r6
    b104:	e58dc004 	str	ip, [sp, #4]
    b108:	eb008f77 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b10c:	e28d000c 	add	r0, sp, #12
    b110:	eb003d16 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b114:	e28d000c 	add	r0, sp, #12
    b118:	e3a01d11 	mov	r1, #1088	@ 0x440
    b11c:	e3431f98 	movt	r1, #16280	@ 0x3f98
    b120:	eb003d09 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b124:	f57ff05f 	dmb	sy
    b128:	eb008da6 	bl	2e7c8 <CLogger::Get()>
    b12c:	e1a06000 	mov	r6, r0
    b130:	e28d000c 	add	r0, sp, #12
    b134:	eb003d0e 	bl	1a574 <CDWHCIRegister::Read()>
    b138:	e58d0000 	str	r0, [sp]
    b13c:	e1a00006 	mov	r0, r6
    b140:	e30c6028 	movw	r6, #49192	@ 0xc028
    b144:	e34061fc 	movt	r6, #508	@ 0x1fc
    b148:	e1a03004 	mov	r3, r4
    b14c:	e0876006 	add	r6, r7, r6
    b150:	e3a02004 	mov	r2, #4
    b154:	e1a01005 	mov	r1, r5
    b158:	e30ac1b8 	movw	ip, #41400	@ 0xa1b8
    b15c:	e340c003 	movt	ip, #3
    b160:	e58dc004 	str	ip, [sp, #4]
    b164:	eb008f60 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b168:	e1a06286 	lsl	r6, r6, #5
    b16c:	e28d000c 	add	r0, sp, #12
    b170:	eb003cfe 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b174:	e1a01006 	mov	r1, r6
    b178:	e28d000c 	add	r0, sp, #12
    b17c:	eb003cf2 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b180:	f57ff05f 	dmb	sy
    b184:	eb008d8f 	bl	2e7c8 <CLogger::Get()>
    b188:	e1a07000 	mov	r7, r0
    b18c:	e28d000c 	add	r0, sp, #12
    b190:	eb003cf7 	bl	1a574 <CDWHCIRegister::Read()>
    b194:	e1a03004 	mov	r3, r4
    b198:	e3a02004 	mov	r2, #4
    b19c:	e1a01005 	mov	r1, r5
    b1a0:	e58d0000 	str	r0, [sp]
    b1a4:	e30ac1c4 	movw	ip, #41412	@ 0xa1c4
    b1a8:	e340c003 	movt	ip, #3
    b1ac:	e1a00007 	mov	r0, r7
    b1b0:	e58dc004 	str	ip, [sp, #4]
    b1b4:	eb008f4c 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b1b8:	e28d000c 	add	r0, sp, #12
    b1bc:	eb003ceb 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b1c0:	e2861004 	add	r1, r6, #4
    b1c4:	e28d000c 	add	r0, sp, #12
    b1c8:	eb003cdf 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b1cc:	f57ff05f 	dmb	sy
    b1d0:	eb008d7c 	bl	2e7c8 <CLogger::Get()>
    b1d4:	e1a07000 	mov	r7, r0
    b1d8:	e28d000c 	add	r0, sp, #12
    b1dc:	eb003ce4 	bl	1a574 <CDWHCIRegister::Read()>
    b1e0:	e1a03004 	mov	r3, r4
    b1e4:	e3a02004 	mov	r2, #4
    b1e8:	e1a01005 	mov	r1, r5
    b1ec:	e58d0000 	str	r0, [sp]
    b1f0:	e30ac1dc 	movw	ip, #41436	@ 0xa1dc
    b1f4:	e340c003 	movt	ip, #3
    b1f8:	e1a00007 	mov	r0, r7
    b1fc:	e58dc004 	str	ip, [sp, #4]
    b200:	eb008f39 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b204:	e28d000c 	add	r0, sp, #12
    b208:	eb003cd8 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b20c:	e2861008 	add	r1, r6, #8
    b210:	e28d000c 	add	r0, sp, #12
    b214:	eb003ccc 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b218:	f57ff05f 	dmb	sy
    b21c:	eb008d69 	bl	2e7c8 <CLogger::Get()>
    b220:	e1a07000 	mov	r7, r0
    b224:	e28d000c 	add	r0, sp, #12
    b228:	eb003cd1 	bl	1a574 <CDWHCIRegister::Read()>
    b22c:	e1a03004 	mov	r3, r4
    b230:	e3a02004 	mov	r2, #4
    b234:	e1a01005 	mov	r1, r5
    b238:	e58d0000 	str	r0, [sp]
    b23c:	e30ac1f4 	movw	ip, #41460	@ 0xa1f4
    b240:	e340c003 	movt	ip, #3
    b244:	e1a00007 	mov	r0, r7
    b248:	e58dc004 	str	ip, [sp, #4]
    b24c:	eb008f26 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b250:	e28d000c 	add	r0, sp, #12
    b254:	eb003cc5 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b258:	e286100c 	add	r1, r6, #12
    b25c:	e28d000c 	add	r0, sp, #12
    b260:	eb003cb9 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b264:	f57ff05f 	dmb	sy
    b268:	eb008d56 	bl	2e7c8 <CLogger::Get()>
    b26c:	e1a07000 	mov	r7, r0
    b270:	e28d000c 	add	r0, sp, #12
    b274:	eb003cbe 	bl	1a574 <CDWHCIRegister::Read()>
    b278:	e1a03004 	mov	r3, r4
    b27c:	e3a02004 	mov	r2, #4
    b280:	e1a01005 	mov	r1, r5
    b284:	e58d0000 	str	r0, [sp]
    b288:	e30ac208 	movw	ip, #41480	@ 0xa208
    b28c:	e340c003 	movt	ip, #3
    b290:	e1a00007 	mov	r0, r7
    b294:	e58dc004 	str	ip, [sp, #4]
    b298:	eb008f13 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b29c:	e28d000c 	add	r0, sp, #12
    b2a0:	eb003cb2 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b2a4:	e2861010 	add	r1, r6, #16
    b2a8:	e28d000c 	add	r0, sp, #12
    b2ac:	eb003ca6 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b2b0:	f57ff05f 	dmb	sy
    b2b4:	eb008d43 	bl	2e7c8 <CLogger::Get()>
    b2b8:	e1a07000 	mov	r7, r0
    b2bc:	e28d000c 	add	r0, sp, #12
    b2c0:	eb003cab 	bl	1a574 <CDWHCIRegister::Read()>
    b2c4:	e1a03004 	mov	r3, r4
    b2c8:	e3a02004 	mov	r2, #4
    b2cc:	e1a01005 	mov	r1, r5
    b2d0:	e58d0000 	str	r0, [sp]
    b2d4:	e30ac220 	movw	ip, #41504	@ 0xa220
    b2d8:	e340c003 	movt	ip, #3
    b2dc:	e1a00007 	mov	r0, r7
    b2e0:	e58dc004 	str	ip, [sp, #4]
    b2e4:	eb008f00 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b2e8:	e28d000c 	add	r0, sp, #12
    b2ec:	eb003c9f 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b2f0:	e2861014 	add	r1, r6, #20
    b2f4:	e28d000c 	add	r0, sp, #12
    b2f8:	eb003c93 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b2fc:	f57ff05f 	dmb	sy
    b300:	eb008d30 	bl	2e7c8 <CLogger::Get()>
    b304:	e1a06000 	mov	r6, r0
    b308:	e28d000c 	add	r0, sp, #12
    b30c:	eb003c98 	bl	1a574 <CDWHCIRegister::Read()>
    b310:	e1a03004 	mov	r3, r4
    b314:	e3a02004 	mov	r2, #4
    b318:	e1a01005 	mov	r1, r5
    b31c:	e58d0000 	str	r0, [sp]
    b320:	e30ac238 	movw	ip, #41528	@ 0xa238
    b324:	e340c003 	movt	ip, #3
    b328:	e1a00006 	mov	r0, r6
    b32c:	e58dc004 	str	ip, [sp, #4]
    b330:	eb008eed 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b334:	e28d000c 	add	r0, sp, #12
    b338:	eb003c8c 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b33c:	e28dd01c 	add	sp, sp, #28
    b340:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    b344:	0003eb90 	.word	0x0003eb90

0000b348 <CDWHCIDevice::~CDWHCIDevice()>:
    b348:	e92d4010 	push	{r4, lr}
    b34c:	e3a02001 	mov	r2, #1
    b350:	e5903014 	ldr	r3, [r0, #20]
    b354:	e59f10e4 	ldr	r1, [pc, #228]	@ b440 <CDWHCIDevice::~CDWHCIDevice()+0xf8>
    b358:	e24dd028 	sub	sp, sp, #40	@ 0x28
    b35c:	e3530000 	cmp	r3, #0
    b360:	e5801000 	str	r1, [r0]
    b364:	e5c02095 	strb	r2, [r0, #149]	@ 0x95
    b368:	0a000025 	beq	b404 <CDWHCIDevice::~CDWHCIDevice()+0xbc>
    b36c:	e1a04000 	mov	r4, r0
    b370:	e3a000c8 	mov	r0, #200	@ 0xc8
    b374:	eb00a6ee 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
    b378:	e5940010 	ldr	r0, [r4, #16]
    b37c:	e3500000 	cmp	r0, #0
    b380:	0a000025 	beq	b41c <CDWHCIDevice::~CDWHCIDevice()+0xd4>
    b384:	e3a01009 	mov	r1, #9
    b388:	eb00b239 	bl	37c74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
    b38c:	e1a00004 	mov	r0, r4
    b390:	ebfff56d 	bl	894c <CDWHCIDevice::Reset()>
    b394:	e3a01000 	mov	r1, #0
    b398:	e28d0008 	add	r0, sp, #8
    b39c:	eb0082af 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    b3a0:	eddf0b24 	vldr	d16, [pc, #144]	@ b438 <CDWHCIDevice::~CDWHCIDevice()+0xf0>
    b3a4:	e3a02000 	mov	r2, #0
    b3a8:	e58d2000 	str	r2, [sp]
    b3ac:	e28d201c 	add	r2, sp, #28
    b3b0:	e3a03014 	mov	r3, #20
    b3b4:	e28d0008 	add	r0, sp, #8
    b3b8:	e3081001 	movw	r1, #32769	@ 0x8001
    b3bc:	e3401002 	movt	r1, #2
    b3c0:	f442078f 	vst1.32	{d16}, [r2]
    b3c4:	e28d2010 	add	r2, sp, #16
    b3c8:	eb0082f6 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    b3cc:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
    b3d0:	e2843010 	add	r3, r4, #16
    b3d4:	e28d0008 	add	r0, sp, #8
    b3d8:	f443078f 	vst1.32	{d16}, [r3]
    b3dc:	eb0082a6 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
    b3e0:	e2840088 	add	r0, r4, #136	@ 0x88
    b3e4:	eb0003ce 	bl	c324 <CDWHCIRootPort::~CDWHCIRootPort()>
    b3e8:	e2840024 	add	r0, r4, #36	@ 0x24
    b3ec:	eb00056a 	bl	c99c <CDWHCITransactionQueue::~CDWHCITransactionQueue()>
    b3f0:	e1a00004 	mov	r0, r4
    b3f4:	eb00216e 	bl	139b4 <CUSBHostController::~CUSBHostController()>
    b3f8:	e1a00004 	mov	r0, r4
    b3fc:	e28dd028 	add	sp, sp, #40	@ 0x28
    b400:	e8bd8010 	pop	{r4, pc}
    b404:	e3091d40 	movw	r1, #40256	@ 0x9d40
    b408:	e3401003 	movt	r1, #3
    b40c:	e3090d94 	movw	r0, #40340	@ 0x9d94
    b410:	e3400003 	movt	r0, #3
    b414:	e3a0206c 	mov	r2, #108	@ 0x6c
    b418:	eb00826f 	bl	2bddc <assertion_failed>
    b41c:	e3091d40 	movw	r1, #40256	@ 0x9d40
    b420:	e3401003 	movt	r1, #3
    b424:	e3090d7c 	movw	r0, #40316	@ 0x9d7c
    b428:	e3400003 	movt	r0, #3
    b42c:	e3a0206f 	mov	r2, #111	@ 0x6f
    b430:	eb008269 	bl	2bddc <assertion_failed>
    b434:	e320f000 	nop	{0}
    b438:	00000003 	.word	0x00000003
    b43c:	00000002 	.word	0x00000002
    b440:	0003eb74 	.word	0x0003eb74

0000b444 <CDWHCIDevice::~CDWHCIDevice()>:
    b444:	e92d4010 	push	{r4, lr}
    b448:	e1a04000 	mov	r4, r0
    b44c:	ebffffbd 	bl	b348 <CDWHCIDevice::~CDWHCIDevice()>
    b450:	e1a00004 	mov	r0, r4
    b454:	e3a01098 	mov	r1, #152	@ 0x98
    b458:	eb00ab49 	bl	36184 <operator delete(void*, unsigned int)>
    b45c:	e1a00004 	mov	r0, r4
    b460:	e8bd8010 	pop	{r4, pc}

0000b464 <CDWHCIDevice::ReScanDevices()>:
    b464:	e5d03094 	ldrb	r3, [r0, #148]	@ 0x94
    b468:	e92d4070 	push	{r4, r5, r6, lr}
    b46c:	e1a04000 	mov	r4, r0
    b470:	e3530000 	cmp	r3, #0
    b474:	1a00000f 	bne	b4b8 <CDWHCIDevice::ReScanDevices()+0x54>
    b478:	ebfffd97 	bl	aadc <CDWHCIDevice::EnableRootPort()>
    b47c:	e3500000 	cmp	r0, #0
    b480:	0a00000f 	beq	b4c4 <CDWHCIDevice::ReScanDevices()+0x60>
    b484:	e3a05001 	mov	r5, #1
    b488:	e2840088 	add	r0, r4, #136	@ 0x88
    b48c:	e5c45094 	strb	r5, [r4, #148]	@ 0x94
    b490:	eb000410 	bl	c4d8 <CDWHCIRootPort::Initialize()>
    b494:	e3500000 	cmp	r0, #0
    b498:	18bd8070 	popne	{r4, r5, r6, pc}
    b49c:	eb008cc9 	bl	2e7c8 <CLogger::Get()>
    b4a0:	e1a02005 	mov	r2, r5
    b4a4:	e30a3250 	movw	r3, #41552	@ 0xa250
    b4a8:	e3403003 	movt	r3, #3
    b4ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    b4b0:	e59f1028 	ldr	r1, [pc, #40]	@ b4e0 <CDWHCIDevice::ReScanDevices()+0x7c>
    b4b4:	ea008e8c 	b	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b4b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    b4bc:	e2800088 	add	r0, r0, #136	@ 0x88
    b4c0:	ea0003bb 	b	c3b4 <CDWHCIRootPort::ReScanDevices()>
    b4c4:	eb008cbf 	bl	2e7c8 <CLogger::Get()>
    b4c8:	e30a326c 	movw	r3, #41580	@ 0xa26c
    b4cc:	e3403003 	movt	r3, #3
    b4d0:	e59f1008 	ldr	r1, [pc, #8]	@ b4e0 <CDWHCIDevice::ReScanDevices()+0x7c>
    b4d4:	e8bd4070 	pop	{r4, r5, r6, lr}
    b4d8:	e3a02002 	mov	r2, #2
    b4dc:	ea008e82 	b	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b4e0:	0003eb90 	.word	0x0003eb90

0000b4e4 <CDWHCIDevice::Initialize(bool)>:
    b4e4:	e92d4070 	push	{r4, r5, r6, lr}
    b4e8:	e1a04000 	mov	r4, r0
    b4ec:	e1a05001 	mov	r5, r1
    b4f0:	e24dd030 	sub	sp, sp, #48	@ 0x30
    b4f4:	e3a00020 	mov	r0, #32
    b4f8:	e3a01001 	mov	r1, #1
    b4fc:	eb002cc5 	bl	16818 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>
    b500:	e3a01001 	mov	r1, #1
    b504:	e3a00010 	mov	r0, #16
    b508:	eb0009b5 	bl	dbe4 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>
    b50c:	e3a01001 	mov	r1, #1
    b510:	e3a00010 	mov	r0, #16
    b514:	eb000184 	bl	bb2c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    b518:	e3a01001 	mov	r1, #1
    b51c:	e3a00010 	mov	r0, #16
    b520:	eb000364 	bl	c2b8 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>
    b524:	e3a01001 	mov	r1, #1
    b528:	e3a00010 	mov	r0, #16
    b52c:	eb000232 	bl	bdfc <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>
    b530:	e3a01001 	mov	r1, #1
    b534:	e3a00010 	mov	r0, #16
    b538:	eb000b08 	bl	e160 <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)>
    b53c:	e5943010 	ldr	r3, [r4, #16]
    b540:	e3530000 	cmp	r3, #0
    b544:	0a000064 	beq	b6dc <CDWHCIDevice::Initialize(bool)+0x1f8>
    b548:	e5943014 	ldr	r3, [r4, #20]
    b54c:	e3530000 	cmp	r3, #0
    b550:	0a000067 	beq	b6f4 <CDWHCIDevice::Initialize(bool)+0x210>
    b554:	e3a01040 	mov	r1, #64	@ 0x40
    b558:	e3431f98 	movt	r1, #16280	@ 0x3f98
    b55c:	e28d000c 	add	r0, sp, #12
    b560:	eb003bf9 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b564:	e28d000c 	add	r0, sp, #12
    b568:	eb003c01 	bl	1a574 <CDWHCIRegister::Read()>
    b56c:	e302380a 	movw	r3, #10250	@ 0x280a
    b570:	e3443f54 	movt	r3, #20308	@ 0x4f54
    b574:	e1500003 	cmp	r0, r3
    b578:	1a00003a 	bne	b668 <CDWHCIDevice::Initialize(bool)+0x184>
    b57c:	e1a00004 	mov	r0, r4
    b580:	ebfff4d6 	bl	88e0 <CDWHCIDevice::PowerOn()>
    b584:	e3500000 	cmp	r0, #0
    b588:	0a00004c 	beq	b6c0 <CDWHCIDevice::Initialize(bool)+0x1dc>
    b58c:	e3a01008 	mov	r1, #8
    b590:	e3431f98 	movt	r1, #16280	@ 0x3f98
    b594:	e28d0018 	add	r0, sp, #24
    b598:	eb003beb 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b59c:	e28d0018 	add	r0, sp, #24
    b5a0:	eb003bf3 	bl	1a574 <CDWHCIRegister::Read()>
    b5a4:	e28d0018 	add	r0, sp, #24
    b5a8:	e3e01001 	mvn	r1, #1
    b5ac:	eb003c24 	bl	1a644 <CDWHCIRegister::And(unsigned int)>
    b5b0:	e28d0018 	add	r0, sp, #24
    b5b4:	eb003bf5 	bl	1a590 <CDWHCIRegister::Write()>
    b5b8:	e5940010 	ldr	r0, [r4, #16]
    b5bc:	e3500000 	cmp	r0, #0
    b5c0:	0a000058 	beq	b728 <CDWHCIDevice::Initialize(bool)+0x244>
    b5c4:	e1a03004 	mov	r3, r4
    b5c8:	e3a01009 	mov	r1, #9
    b5cc:	e30a2538 	movw	r2, #42296	@ 0xa538
    b5d0:	e3402000 	movt	r2, #0
    b5d4:	eb00b173 	bl	37ba8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    b5d8:	e1a00004 	mov	r0, r4
    b5dc:	ebfff510 	bl	8a24 <CDWHCIDevice::InitCore()>
    b5e0:	e3500000 	cmp	r0, #0
    b5e4:	0a00002d 	beq	b6a0 <CDWHCIDevice::Initialize(bool)+0x1bc>
    b5e8:	e3a01008 	mov	r1, #8
    b5ec:	e3431f98 	movt	r1, #16280	@ 0x3f98
    b5f0:	e28d0024 	add	r0, sp, #36	@ 0x24
    b5f4:	eb003bd4 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b5f8:	e28d0024 	add	r0, sp, #36	@ 0x24
    b5fc:	eb003bdc 	bl	1a574 <CDWHCIRegister::Read()>
    b600:	e3a01001 	mov	r1, #1
    b604:	e28d0024 	add	r0, sp, #36	@ 0x24
    b608:	eb003c1b 	bl	1a67c <CDWHCIRegister::Or(unsigned int)>
    b60c:	e28d0024 	add	r0, sp, #36	@ 0x24
    b610:	eb003bde 	bl	1a590 <CDWHCIRegister::Write()>
    b614:	e28d0024 	add	r0, sp, #36	@ 0x24
    b618:	eb003bd4 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b61c:	e1a00004 	mov	r0, r4
    b620:	ebfff67f 	bl	9024 <CDWHCIDevice::InitHost()>
    b624:	e2506000 	subs	r6, r0, #0
    b628:	0a000037 	beq	b70c <CDWHCIDevice::Initialize(bool)+0x228>
    b62c:	eb00217b 	bl	13c20 <CUSBHostController::IsPlugAndPlay()>
    b630:	e2200001 	eor	r0, r0, #1
    b634:	e1853000 	orr	r3, r5, r0
    b638:	e6ef3073 	uxtb	r3, r3
    b63c:	e3530000 	cmp	r3, #0
    b640:	0a000001 	beq	b64c <CDWHCIDevice::Initialize(bool)+0x168>
    b644:	e1a00004 	mov	r0, r4
    b648:	ebffff85 	bl	b464 <CDWHCIDevice::ReScanDevices()>
    b64c:	e28d0018 	add	r0, sp, #24
    b650:	eb003bc6 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b654:	e28d000c 	add	r0, sp, #12
    b658:	eb003bc4 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b65c:	e1a00006 	mov	r0, r6
    b660:	e28dd030 	add	sp, sp, #48	@ 0x30
    b664:	e8bd8070 	pop	{r4, r5, r6, pc}
    b668:	eb008c56 	bl	2e7c8 <CLogger::Get()>
    b66c:	e1a04000 	mov	r4, r0
    b670:	e28d000c 	add	r0, sp, #12
    b674:	eb003bd3 	bl	1a5c8 <CDWHCIRegister::Get() const>
    b678:	e30a3290 	movw	r3, #41616	@ 0xa290
    b67c:	e3403003 	movt	r3, #3
    b680:	e1a01000 	mov	r1, r0
    b684:	e3a02001 	mov	r2, #1
    b688:	e58d1000 	str	r1, [sp]
    b68c:	e1a00004 	mov	r0, r4
    b690:	e59f10a8 	ldr	r1, [pc, #168]	@ b740 <CDWHCIDevice::Initialize(bool)+0x25c>
    b694:	eb008e14 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b698:	e3a06000 	mov	r6, #0
    b69c:	eaffffec 	b	b654 <CDWHCIDevice::Initialize(bool)+0x170>
    b6a0:	eb008c48 	bl	2e7c8 <CLogger::Get()>
    b6a4:	e30a32b8 	movw	r3, #41656	@ 0xa2b8
    b6a8:	e3403003 	movt	r3, #3
    b6ac:	e59f108c 	ldr	r1, [pc, #140]	@ b740 <CDWHCIDevice::Initialize(bool)+0x25c>
    b6b0:	e3a02001 	mov	r2, #1
    b6b4:	eb008e0c 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b6b8:	e3a06000 	mov	r6, #0
    b6bc:	eaffffe2 	b	b64c <CDWHCIDevice::Initialize(bool)+0x168>
    b6c0:	eb008c40 	bl	2e7c8 <CLogger::Get()>
    b6c4:	e59f1074 	ldr	r1, [pc, #116]	@ b740 <CDWHCIDevice::Initialize(bool)+0x25c>
    b6c8:	e3a02001 	mov	r2, #1
    b6cc:	e30a32a8 	movw	r3, #41640	@ 0xa2a8
    b6d0:	e3403003 	movt	r3, #3
    b6d4:	eb008e04 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b6d8:	eaffffee 	b	b698 <CDWHCIDevice::Initialize(bool)+0x1b4>
    b6dc:	e3091d40 	movw	r1, #40256	@ 0x9d40
    b6e0:	e3401003 	movt	r1, #3
    b6e4:	e3090d7c 	movw	r0, #40316	@ 0x9d7c
    b6e8:	e3400003 	movt	r0, #3
    b6ec:	e3a02096 	mov	r2, #150	@ 0x96
    b6f0:	eb0081b9 	bl	2bddc <assertion_failed>
    b6f4:	e3091d40 	movw	r1, #40256	@ 0x9d40
    b6f8:	e3401003 	movt	r1, #3
    b6fc:	e3090d94 	movw	r0, #40340	@ 0x9d94
    b700:	e3400003 	movt	r0, #3
    b704:	e3a02097 	mov	r2, #151	@ 0x97
    b708:	eb0081b3 	bl	2bddc <assertion_failed>
    b70c:	eb008c2d 	bl	2e7c8 <CLogger::Get()>
    b710:	e59f1028 	ldr	r1, [pc, #40]	@ b740 <CDWHCIDevice::Initialize(bool)+0x25c>
    b714:	e3a02001 	mov	r2, #1
    b718:	e30a32d0 	movw	r3, #41680	@ 0xa2d0
    b71c:	e3403003 	movt	r3, #3
    b720:	eb008df1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b724:	eaffffe3 	b	b6b8 <CDWHCIDevice::Initialize(bool)+0x1d4>
    b728:	e3091d40 	movw	r1, #40256	@ 0x9d40
    b72c:	e3401003 	movt	r1, #3
    b730:	e3090d7c 	movw	r0, #40316	@ 0x9d7c
    b734:	e3400003 	movt	r0, #3
    b738:	e3a020ac 	mov	r2, #172	@ 0xac
    b73c:	eb0081a6 	bl	2bddc <assertion_failed>
    b740:	0003eb90 	.word	0x0003eb90
    b744:	00000000 	.word	0x00000000

0000b748 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    b748:	e12fff1e 	bx	lr

0000b74c <CDWHCIFrameSchedulerNonPeriodic::StartSplit()>:
    b74c:	e5903008 	ldr	r3, [r0, #8]
    b750:	e3530005 	cmp	r3, #5
    b754:	13a03001 	movne	r3, #1
    b758:	11c031b0 	strhne	r3, [r0, #16]
    b75c:	e3a03000 	mov	r3, #0
    b760:	e5803008 	str	r3, [r0, #8]
    b764:	e12fff1e 	bx	lr

0000b768 <CDWHCIFrameSchedulerNonPeriodic::IsOddFrame() const>:
    b768:	e3a00000 	mov	r0, #0
    b76c:	e12fff1e 	bx	lr

0000b770 <CDWHCIFrameSchedulerNonPeriodic::PeriodicDelay(unsigned short)>:
    b770:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    b774:	e3401003 	movt	r1, #3
    b778:	e30a093c 	movw	r0, #43324	@ 0xa93c
    b77c:	e3400003 	movt	r0, #3
    b780:	e3a020b2 	mov	r2, #178	@ 0xb2
    b784:	e92d4010 	push	{r4, lr}
    b788:	eb008193 	bl	2bddc <assertion_failed>

0000b78c <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()>:
    b78c:	e5903008 	ldr	r3, [r0, #8]
    b790:	e3a02002 	mov	r2, #2
    b794:	e1c021b0 	strh	r2, [r0, #16]
    b798:	e3530003 	cmp	r3, #3
    b79c:	8a00000b 	bhi	b7d0 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x44>
    b7a0:	e3530001 	cmp	r3, #1
    b7a4:	8a000005 	bhi	b7c0 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x34>
    b7a8:	1a00000d 	bne	b7e4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x58>
    b7ac:	eddf0b13 	vldr	d16, [pc, #76]	@ b800 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x74>
    b7b0:	e2800008 	add	r0, r0, #8
    b7b4:	f440078f 	vst1.32	{d16}, [r0]
    b7b8:	e3a00001 	mov	r0, #1
    b7bc:	e12fff1e 	bx	lr
    b7c0:	e3a03001 	mov	r3, #1
    b7c4:	e1c031b0 	strh	r3, [r0, #16]
    b7c8:	e3a00001 	mov	r0, #1
    b7cc:	e12fff1e 	bx	lr
    b7d0:	e2433004 	sub	r3, r3, #4
    b7d4:	e3530001 	cmp	r3, #1
    b7d8:	8a000001 	bhi	b7e4 <CDWHCIFrameSchedulerNonPeriodic::CompleteSplit()+0x58>
    b7dc:	e3a00000 	mov	r0, #0
    b7e0:	e12fff1e 	bx	lr
    b7e4:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    b7e8:	e3401003 	movt	r1, #3
    b7ec:	e30a093c 	movw	r0, #43324	@ 0xa93c
    b7f0:	e3400003 	movt	r0, #3
    b7f4:	e3a02060 	mov	r2, #96	@ 0x60
    b7f8:	e92d4010 	push	{r4, lr}
    b7fc:	eb008176 	bl	2bddc <assertion_failed>
    b800:	00000002 	.word	0x00000002
    b804:	00000003 	.word	0x00000003

0000b808 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)>:
    b808:	e5903008 	ldr	r3, [r0, #8]
    b80c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    b810:	e3530000 	cmp	r3, #0
    b814:	e24dd014 	sub	sp, sp, #20
    b818:	0a00000c 	beq	b850 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x48>
    b81c:	e2433002 	sub	r3, r3, #2
    b820:	e3530001 	cmp	r3, #1
    b824:	8a00001c 	bhi	b89c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x94>
    b828:	e3110001 	tst	r1, #1
    b82c:	1a00000d 	bne	b868 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x60>
    b830:	e3110060 	tst	r1, #96	@ 0x60
    b834:	1a00000f 	bne	b878 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x70>
    b838:	e3110010 	tst	r1, #16
    b83c:	0a000022 	beq	b8cc <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xc4>
    b840:	e3a03005 	mov	r3, #5
    b844:	e1c031b0 	strh	r3, [r0, #16]
    b848:	e3a03005 	mov	r3, #5
    b84c:	ea000002 	b	b85c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x54>
    b850:	e3110020 	tst	r1, #32
    b854:	13a03001 	movne	r3, #1
    b858:	0a000015 	beq	b8b4 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0xac>
    b85c:	e5803008 	str	r3, [r0, #8]
    b860:	e28dd014 	add	sp, sp, #20
    b864:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    b868:	e3a03004 	mov	r3, #4
    b86c:	e5803008 	str	r3, [r0, #8]
    b870:	e28dd014 	add	sp, sp, #20
    b874:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    b878:	e590300c 	ldr	r3, [r0, #12]
    b87c:	e3530000 	cmp	r3, #0
    b880:	e2432001 	sub	r2, r3, #1
    b884:	03a03001 	moveq	r3, #1
    b888:	e580200c 	str	r2, [r0, #12]
    b88c:	01c031b0 	strheq	r3, [r0, #16]
    b890:	0affffec 	beq	b848 <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x40>
    b894:	e3a03003 	mov	r3, #3
    b898:	eaffffef 	b	b85c <CDWHCIFrameSchedulerNonPeriodic::TransactionComplete(unsigned int)+0x54>
    b89c:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    b8a0:	e3401003 	movt	r1, #3
    b8a4:	e30a093c 	movw	r0, #43324	@ 0xa93c
    b8a8:	e3400003 	movt	r0, #3
    b8ac:	e3a02095 	mov	r2, #149	@ 0x95
    b8b0:	eb008149 	bl	2bddc <assertion_failed>
    b8b4:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    b8b8:	e3401003 	movt	r1, #3
    b8bc:	e30a0300 	movw	r0, #41728	@ 0xa300
    b8c0:	e3400003 	movt	r0, #3
    b8c4:	e3a0206c 	mov	r2, #108	@ 0x6c
    b8c8:	eb008143 	bl	2bddc <assertion_failed>
    b8cc:	e58d100c 	str	r1, [sp, #12]
    b8d0:	eb008bbc 	bl	2e7c8 <CLogger::Get()>
    b8d4:	e59d100c 	ldr	r1, [sp, #12]
    b8d8:	e3a02001 	mov	r2, #1
    b8dc:	e58d1000 	str	r1, [sp]
    b8e0:	e30a3324 	movw	r3, #41764	@ 0xa324
    b8e4:	e3403003 	movt	r3, #3
    b8e8:	e30a1338 	movw	r1, #41784	@ 0xa338
    b8ec:	e3401003 	movt	r1, #3
    b8f0:	eb008d7d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    b8f4:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    b8f8:	e3401003 	movt	r1, #3
    b8fc:	e30a093c 	movw	r0, #43324	@ 0xa93c
    b900:	e3400003 	movt	r0, #3
    b904:	e3a02090 	mov	r2, #144	@ 0x90
    b908:	eb008133 	bl	2bddc <assertion_failed>

0000b90c <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()>:
    b90c:	e92d4030 	push	{r4, r5, lr}
    b910:	e3001408 	movw	r1, #1032	@ 0x408
    b914:	e3431f98 	movt	r1, #16280	@ 0x3f98
    b918:	e24dd014 	sub	sp, sp, #20
    b91c:	e1a05000 	mov	r5, r0
    b920:	e28d0004 	add	r0, sp, #4
    b924:	eb003b08 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    b928:	e28d0004 	add	r0, sp, #4
    b92c:	eb003b10 	bl	1a574 <CDWHCIRegister::Read()>
    b930:	e6ff4070 	uxth	r4, r0
    b934:	eb008995 	bl	2df90 <CKernelOptions::Get()>
    b938:	eb00896a 	bl	2dee8 <CKernelOptions::GetUSBBoost() const>
    b93c:	e3500000 	cmp	r0, #0
    b940:	1a000004 	bne	b958 <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x4c>
    b944:	e1d531b0 	ldrh	r3, [r5, #16]
    b948:	e3530007 	cmp	r3, #7
    b94c:	90834004 	addls	r4, r3, r4
    b950:	97ed4054 	ubfxls	r4, r4, #0, #14
    b954:	8a000004 	bhi	b96c <CDWHCIFrameSchedulerNonPeriodic::GetFrameNumber()+0x60>
    b958:	e28d0004 	add	r0, sp, #4
    b95c:	eb003b03 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    b960:	e1a00004 	mov	r0, r4
    b964:	e28dd014 	add	sp, sp, #20
    b968:	e8bd8030 	pop	{r4, r5, pc}
    b96c:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    b970:	e3401003 	movt	r1, #3
    b974:	e30a0340 	movw	r0, #41792	@ 0xa340
    b978:	e3400003 	movt	r0, #3
    b97c:	e3a020ac 	mov	r2, #172	@ 0xac
    b980:	eb008115 	bl	2bddc <assertion_failed>

0000b984 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()>:
    b984:	e3043060 	movw	r3, #16480	@ 0x4060
    b988:	e3403004 	movt	r3, #4
    b98c:	e92d4010 	push	{r4, lr}
    b990:	e1a04000 	mov	r4, r0
    b994:	e5930000 	ldr	r0, [r3]
    b998:	e3500000 	cmp	r0, #0
    b99c:	0a000003 	beq	b9b0 <CDWHCIFrameSchedulerNonPeriodic::~CDWHCIFrameSchedulerNonPeriodic()+0x2c>
    b9a0:	e1a01004 	mov	r1, r4
    b9a4:	eb008290 	bl	2c3ec <CClassAllocator::Free(void*)>
    b9a8:	e1a00004 	mov	r0, r4
    b9ac:	e8bd8010 	pop	{r4, pc}
    b9b0:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    b9b4:	e3401003 	movt	r1, #3
    b9b8:	e30a0354 	movw	r0, #41812	@ 0xa354
    b9bc:	e3400003 	movt	r0, #3
    b9c0:	e3a020bc 	mov	r2, #188	@ 0xbc
    b9c4:	eb008104 	bl	2bddc <assertion_failed>

0000b9c8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>:
    b9c8:	e92d4010 	push	{r4, lr}
    b9cc:	e1a04000 	mov	r4, r0
    b9d0:	e59f303c 	ldr	r3, [pc, #60]	@ ba14 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x4c>
    b9d4:	e5803000 	str	r3, [r0]
    b9d8:	eb00a596 	bl	35038 <CTimer::Get()>
    b9dc:	e3a02006 	mov	r2, #6
    b9e0:	e3a03008 	mov	r3, #8
    b9e4:	e3500000 	cmp	r0, #0
    b9e8:	e9840005 	stmib	r4, {r0, r2}
    b9ec:	e1c431b0 	strh	r3, [r4, #16]
    b9f0:	0a000001 	beq	b9fc <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()+0x34>
    b9f4:	e1a00004 	mov	r0, r4
    b9f8:	e8bd8010 	pop	{r4, pc}
    b9fc:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    ba00:	e3401003 	movt	r1, #3
    ba04:	e3090d94 	movw	r0, #40340	@ 0x9d94
    ba08:	e3400003 	movt	r0, #3
    ba0c:	e3a0202f 	mov	r2, #47	@ 0x2f
    ba10:	eb0080f1 	bl	2bddc <assertion_failed>
    ba14:	0003eba0 	.word	0x0003eba0

0000ba18 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>:
    ba18:	e3500014 	cmp	r0, #20
    ba1c:	e92d4010 	push	{r4, lr}
    ba20:	1a000006 	bne	ba40 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x28>
    ba24:	e3043060 	movw	r3, #16480	@ 0x4060
    ba28:	e3403004 	movt	r3, #4
    ba2c:	e5930000 	ldr	r0, [r3]
    ba30:	e3500000 	cmp	r0, #0
    ba34:	0a000007 	beq	ba58 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)+0x40>
    ba38:	e8bd4010 	pop	{r4, lr}
    ba3c:	ea00822f 	b	2c300 <CClassAllocator::Allocate()>
    ba40:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    ba44:	e3401003 	movt	r1, #3
    ba48:	e30a0368 	movw	r0, #41832	@ 0xa368
    ba4c:	e3400003 	movt	r0, #3
    ba50:	e3a020bc 	mov	r2, #188	@ 0xbc
    ba54:	eb0080e0 	bl	2bddc <assertion_failed>
    ba58:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    ba5c:	e3401003 	movt	r1, #3
    ba60:	e30a0354 	movw	r0, #41812	@ 0xa354
    ba64:	e3400003 	movt	r0, #3
    ba68:	e3a020bc 	mov	r2, #188	@ 0xbc
    ba6c:	eb0080da 	bl	2bddc <assertion_failed>

0000ba70 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)>:
    ba70:	e3510014 	cmp	r1, #20
    ba74:	e92d4010 	push	{r4, lr}
    ba78:	1a000008 	bne	baa0 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x30>
    ba7c:	e3042060 	movw	r2, #16480	@ 0x4060
    ba80:	e3402004 	movt	r2, #4
    ba84:	e1a03000 	mov	r3, r0
    ba88:	e5920000 	ldr	r0, [r2]
    ba8c:	e3500000 	cmp	r0, #0
    ba90:	0a000008 	beq	bab8 <CDWHCIFrameSchedulerNonPeriodic::operator delete(void*, unsigned int)+0x48>
    ba94:	e8bd4010 	pop	{r4, lr}
    ba98:	e1a01003 	mov	r1, r3
    ba9c:	ea008252 	b	2c3ec <CClassAllocator::Free(void*)>
    baa0:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    baa4:	e3401003 	movt	r1, #3
    baa8:	e30a0368 	movw	r0, #41832	@ 0xa368
    baac:	e3400003 	movt	r0, #3
    bab0:	e3a020bc 	mov	r2, #188	@ 0xbc
    bab4:	eb0080c8 	bl	2bddc <assertion_failed>
    bab8:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    babc:	e3401003 	movt	r1, #3
    bac0:	e30a0354 	movw	r0, #41812	@ 0xa354
    bac4:	e3400003 	movt	r0, #3
    bac8:	e3a020bc 	mov	r2, #188	@ 0xbc
    bacc:	eb0080c2 	bl	2bddc <assertion_failed>

0000bad0 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)>:
    bad0:	e92d4070 	push	{r4, r5, r6, lr}
    bad4:	e3044060 	movw	r4, #16480	@ 0x4060
    bad8:	e3404004 	movt	r4, #4
    badc:	e5943000 	ldr	r3, [r4]
    bae0:	e3530000 	cmp	r3, #0
    bae4:	1a00000a 	bne	bb14 <CDWHCIFrameSchedulerNonPeriodic::InitAllocator(unsigned int)+0x44>
    bae8:	e1a05000 	mov	r5, r0
    baec:	e3a00020 	mov	r0, #32
    baf0:	eb00a98b 	bl	36124 <operator new(unsigned int)>
    baf4:	e1a02005 	mov	r2, r5
    baf8:	e3a01014 	mov	r1, #20
    bafc:	e30a33b0 	movw	r3, #41904	@ 0xa3b0
    bb00:	e3403003 	movt	r3, #3
    bb04:	e1a05000 	mov	r5, r0
    bb08:	eb00819e 	bl	2c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    bb0c:	e5845000 	str	r5, [r4]
    bb10:	e8bd8070 	pop	{r4, r5, r6, pc}
    bb14:	e30a12e8 	movw	r1, #41704	@ 0xa2e8
    bb18:	e3401003 	movt	r1, #3
    bb1c:	e30a039c 	movw	r0, #41884	@ 0xa39c
    bb20:	e3400003 	movt	r0, #3
    bb24:	e3a020bc 	mov	r2, #188	@ 0xbc
    bb28:	eb0080ab 	bl	2bddc <assertion_failed>

0000bb2c <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    bb2c:	e92d4070 	push	{r4, r5, r6, lr}
    bb30:	e3044060 	movw	r4, #16480	@ 0x4060
    bb34:	e3404004 	movt	r4, #4
    bb38:	e1a05000 	mov	r5, r0
    bb3c:	e24dd008 	sub	sp, sp, #8
    bb40:	e1a06001 	mov	r6, r1
    bb44:	e5940000 	ldr	r0, [r4]
    bb48:	e3500000 	cmp	r0, #0
    bb4c:	0a000004 	beq	bb64 <CDWHCIFrameSchedulerNonPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    bb50:	e1a02001 	mov	r2, r1
    bb54:	e1a01005 	mov	r1, r5
    bb58:	e28dd008 	add	sp, sp, #8
    bb5c:	e8bd4070 	pop	{r4, r5, r6, lr}
    bb60:	ea0081a2 	b	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
    bb64:	e3a00020 	mov	r0, #32
    bb68:	eb00a96d 	bl	36124 <operator new(unsigned int)>
    bb6c:	e1a02005 	mov	r2, r5
    bb70:	e1a03006 	mov	r3, r6
    bb74:	e3a01014 	mov	r1, #20
    bb78:	e30ac3b0 	movw	ip, #41904	@ 0xa3b0
    bb7c:	e340c003 	movt	ip, #3
    bb80:	e58dc000 	str	ip, [sp]
    bb84:	e1a05000 	mov	r5, r0
    bb88:	eb00818a 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    bb8c:	e5845000 	str	r5, [r4]
    bb90:	e28dd008 	add	sp, sp, #8
    bb94:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bb98 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    bb98:	e12fff1e 	bx	lr

0000bb9c <CDWHCIFrameSchedulerNoSplit::StartSplit()>:
    bb9c:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bba0:	e3401003 	movt	r1, #3
    bba4:	e30a093c 	movw	r0, #43324	@ 0xa93c
    bba8:	e3400003 	movt	r0, #3
    bbac:	e3a02026 	mov	r2, #38	@ 0x26
    bbb0:	e92d4010 	push	{r4, lr}
    bbb4:	eb008088 	bl	2bddc <assertion_failed>

0000bbb8 <CDWHCIFrameSchedulerNoSplit::CompleteSplit()>:
    bbb8:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bbbc:	e3401003 	movt	r1, #3
    bbc0:	e30a093c 	movw	r0, #43324	@ 0xa93c
    bbc4:	e3400003 	movt	r0, #3
    bbc8:	e3a0202b 	mov	r2, #43	@ 0x2b
    bbcc:	e92d4010 	push	{r4, lr}
    bbd0:	eb008081 	bl	2bddc <assertion_failed>

0000bbd4 <CDWHCIFrameSchedulerNoSplit::TransactionComplete(unsigned int)>:
    bbd4:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bbd8:	e3401003 	movt	r1, #3
    bbdc:	e30a093c 	movw	r0, #43324	@ 0xa93c
    bbe0:	e3400003 	movt	r0, #3
    bbe4:	e3a02031 	mov	r2, #49	@ 0x31
    bbe8:	e92d4010 	push	{r4, lr}
    bbec:	eb00807a 	bl	2bddc <assertion_failed>

0000bbf0 <CDWHCIFrameSchedulerNoSplit::PeriodicDelay(unsigned short)>:
    bbf0:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bbf4:	e3401003 	movt	r1, #3
    bbf8:	e30a093c 	movw	r0, #43324	@ 0xa93c
    bbfc:	e3400003 	movt	r0, #3
    bc00:	e3a02050 	mov	r2, #80	@ 0x50
    bc04:	e92d4010 	push	{r4, lr}
    bc08:	eb008073 	bl	2bddc <assertion_failed>

0000bc0c <CDWHCIFrameSchedulerNoSplit::GetFrameNumber()>:
    bc0c:	e92d4030 	push	{r4, r5, lr}
    bc10:	e3001408 	movw	r1, #1032	@ 0x408
    bc14:	e3431f98 	movt	r1, #16280	@ 0x3f98
    bc18:	e24dd014 	sub	sp, sp, #20
    bc1c:	e1a05000 	mov	r5, r0
    bc20:	e28d0004 	add	r0, sp, #4
    bc24:	eb003a48 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc28:	e28d0004 	add	r0, sp, #4
    bc2c:	eb003a50 	bl	1a574 <CDWHCIRegister::Read()>
    bc30:	e2804001 	add	r4, r0, #1
    bc34:	e28d0004 	add	r0, sp, #4
    bc38:	e7ed4054 	ubfx	r4, r4, #0, #14
    bc3c:	e1c540b6 	strh	r4, [r5, #6]
    bc40:	eb003a4a 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    bc44:	e1a00004 	mov	r0, r4
    bc48:	e28dd014 	add	sp, sp, #20
    bc4c:	e8bd8030 	pop	{r4, r5, pc}

0000bc50 <CDWHCIFrameSchedulerNoSplit::IsOddFrame() const>:
    bc50:	e92d4010 	push	{r4, lr}
    bc54:	e3001408 	movw	r1, #1032	@ 0x408
    bc58:	e3431f98 	movt	r1, #16280	@ 0x3f98
    bc5c:	e24dd010 	sub	sp, sp, #16
    bc60:	e28d0004 	add	r0, sp, #4
    bc64:	eb003a38 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bc68:	e28d0004 	add	r0, sp, #4
    bc6c:	eb003a40 	bl	1a574 <CDWHCIRegister::Read()>
    bc70:	e1a04000 	mov	r4, r0
    bc74:	e28d0004 	add	r0, sp, #4
    bc78:	eb003a3c 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    bc7c:	e2040001 	and	r0, r4, #1
    bc80:	e28dd010 	add	sp, sp, #16
    bc84:	e8bd8010 	pop	{r4, pc}

0000bc88 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()>:
    bc88:	e3043064 	movw	r3, #16484	@ 0x4064
    bc8c:	e3403004 	movt	r3, #4
    bc90:	e92d4010 	push	{r4, lr}
    bc94:	e1a04000 	mov	r4, r0
    bc98:	e5930000 	ldr	r0, [r3]
    bc9c:	e3500000 	cmp	r0, #0
    bca0:	0a000003 	beq	bcb4 <CDWHCIFrameSchedulerNoSplit::~CDWHCIFrameSchedulerNoSplit()+0x2c>
    bca4:	e1a01004 	mov	r1, r4
    bca8:	eb0081cf 	bl	2c3ec <CClassAllocator::Free(void*)>
    bcac:	e1a00004 	mov	r0, r4
    bcb0:	e8bd8010 	pop	{r4, pc}
    bcb4:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bcb8:	e3401003 	movt	r1, #3
    bcbc:	e30a0354 	movw	r0, #41812	@ 0xa354
    bcc0:	e3400003 	movt	r0, #3
    bcc4:	e3a0205d 	mov	r2, #93	@ 0x5d
    bcc8:	eb008043 	bl	2bddc <assertion_failed>

0000bccc <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>:
    bccc:	e59fc010 	ldr	ip, [pc, #16]	@ bce4 <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)+0x18>
    bcd0:	e3a02901 	mov	r2, #16384	@ 0x4000
    bcd4:	e580c000 	str	ip, [r0]
    bcd8:	e5c01004 	strb	r1, [r0, #4]
    bcdc:	e1c020b6 	strh	r2, [r0, #6]
    bce0:	e12fff1e 	bx	lr
    bce4:	0003ebc8 	.word	0x0003ebc8

0000bce8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>:
    bce8:	e3500008 	cmp	r0, #8
    bcec:	e92d4010 	push	{r4, lr}
    bcf0:	1a000006 	bne	bd10 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x28>
    bcf4:	e3043064 	movw	r3, #16484	@ 0x4064
    bcf8:	e3403004 	movt	r3, #4
    bcfc:	e5930000 	ldr	r0, [r3]
    bd00:	e3500000 	cmp	r0, #0
    bd04:	0a000007 	beq	bd28 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)+0x40>
    bd08:	e8bd4010 	pop	{r4, lr}
    bd0c:	ea00817b 	b	2c300 <CClassAllocator::Allocate()>
    bd10:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bd14:	e3401003 	movt	r1, #3
    bd18:	e30a03ec 	movw	r0, #41964	@ 0xa3ec
    bd1c:	e3400003 	movt	r0, #3
    bd20:	e3a0205d 	mov	r2, #93	@ 0x5d
    bd24:	eb00802c 	bl	2bddc <assertion_failed>
    bd28:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bd2c:	e3401003 	movt	r1, #3
    bd30:	e30a0354 	movw	r0, #41812	@ 0xa354
    bd34:	e3400003 	movt	r0, #3
    bd38:	e3a0205d 	mov	r2, #93	@ 0x5d
    bd3c:	eb008026 	bl	2bddc <assertion_failed>

0000bd40 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)>:
    bd40:	e3510008 	cmp	r1, #8
    bd44:	e92d4010 	push	{r4, lr}
    bd48:	1a000008 	bne	bd70 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x30>
    bd4c:	e3042064 	movw	r2, #16484	@ 0x4064
    bd50:	e3402004 	movt	r2, #4
    bd54:	e1a03000 	mov	r3, r0
    bd58:	e5920000 	ldr	r0, [r2]
    bd5c:	e3500000 	cmp	r0, #0
    bd60:	0a000008 	beq	bd88 <CDWHCIFrameSchedulerNoSplit::operator delete(void*, unsigned int)+0x48>
    bd64:	e8bd4010 	pop	{r4, lr}
    bd68:	e1a01003 	mov	r1, r3
    bd6c:	ea00819e 	b	2c3ec <CClassAllocator::Free(void*)>
    bd70:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bd74:	e3401003 	movt	r1, #3
    bd78:	e30a03ec 	movw	r0, #41964	@ 0xa3ec
    bd7c:	e3400003 	movt	r0, #3
    bd80:	e3a0205d 	mov	r2, #93	@ 0x5d
    bd84:	eb008014 	bl	2bddc <assertion_failed>
    bd88:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bd8c:	e3401003 	movt	r1, #3
    bd90:	e30a0354 	movw	r0, #41812	@ 0xa354
    bd94:	e3400003 	movt	r0, #3
    bd98:	e3a0205d 	mov	r2, #93	@ 0x5d
    bd9c:	eb00800e 	bl	2bddc <assertion_failed>

0000bda0 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)>:
    bda0:	e92d4070 	push	{r4, r5, r6, lr}
    bda4:	e3044064 	movw	r4, #16484	@ 0x4064
    bda8:	e3404004 	movt	r4, #4
    bdac:	e5943000 	ldr	r3, [r4]
    bdb0:	e3530000 	cmp	r3, #0
    bdb4:	1a00000a 	bne	bde4 <CDWHCIFrameSchedulerNoSplit::InitAllocator(unsigned int)+0x44>
    bdb8:	e1a05000 	mov	r5, r0
    bdbc:	e3a00020 	mov	r0, #32
    bdc0:	eb00a8d7 	bl	36124 <operator new(unsigned int)>
    bdc4:	e1a02005 	mov	r2, r5
    bdc8:	e3a01008 	mov	r1, #8
    bdcc:	e30a341c 	movw	r3, #42012	@ 0xa41c
    bdd0:	e3403003 	movt	r3, #3
    bdd4:	e1a05000 	mov	r5, r0
    bdd8:	eb0080ea 	bl	2c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    bddc:	e5845000 	str	r5, [r4]
    bde0:	e8bd8070 	pop	{r4, r5, r6, pc}
    bde4:	e30a13d0 	movw	r1, #41936	@ 0xa3d0
    bde8:	e3401003 	movt	r1, #3
    bdec:	e30a039c 	movw	r0, #41884	@ 0xa39c
    bdf0:	e3400003 	movt	r0, #3
    bdf4:	e3a0205d 	mov	r2, #93	@ 0x5d
    bdf8:	eb007ff7 	bl	2bddc <assertion_failed>

0000bdfc <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)>:
    bdfc:	e92d4070 	push	{r4, r5, r6, lr}
    be00:	e3044064 	movw	r4, #16484	@ 0x4064
    be04:	e3404004 	movt	r4, #4
    be08:	e1a05000 	mov	r5, r0
    be0c:	e24dd008 	sub	sp, sp, #8
    be10:	e1a06001 	mov	r6, r1
    be14:	e5940000 	ldr	r0, [r4]
    be18:	e3500000 	cmp	r0, #0
    be1c:	0a000004 	beq	be34 <CDWHCIFrameSchedulerNoSplit::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    be20:	e1a02001 	mov	r2, r1
    be24:	e1a01005 	mov	r1, r5
    be28:	e28dd008 	add	sp, sp, #8
    be2c:	e8bd4070 	pop	{r4, r5, r6, lr}
    be30:	ea0080ee 	b	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
    be34:	e3a00020 	mov	r0, #32
    be38:	eb00a8b9 	bl	36124 <operator new(unsigned int)>
    be3c:	e1a02005 	mov	r2, r5
    be40:	e1a03006 	mov	r3, r6
    be44:	e3a01008 	mov	r1, #8
    be48:	e30ac41c 	movw	ip, #42012	@ 0xa41c
    be4c:	e340c003 	movt	ip, #3
    be50:	e58dc000 	str	ip, [sp]
    be54:	e1a05000 	mov	r5, r0
    be58:	eb0080d6 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    be5c:	e5845000 	str	r5, [r4]
    be60:	e28dd008 	add	sp, sp, #8
    be64:	e8bd8070 	pop	{r4, r5, r6, pc}

0000be68 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    be68:	e12fff1e 	bx	lr

0000be6c <CDWHCIFrameSchedulerPeriodic::StartSplit()>:
    be6c:	e5903008 	ldr	r3, [r0, #8]
    be70:	e2433005 	sub	r3, r3, #5
    be74:	e3530001 	cmp	r3, #1
    be78:	83a03001 	movhi	r3, #1
    be7c:	81c031b0 	strhhi	r3, [r0, #16]
    be80:	e3a03000 	mov	r3, #0
    be84:	e5803008 	str	r3, [r0, #8]
    be88:	e12fff1e 	bx	lr

0000be8c <CDWHCIFrameSchedulerPeriodic::PeriodicDelay(unsigned short)>:
    be8c:	e3a02006 	mov	r2, #6
    be90:	e3a03901 	mov	r3, #16384	@ 0x4000
    be94:	e5802008 	str	r2, [r0, #8]
    be98:	e1c011b0 	strh	r1, [r0, #16]
    be9c:	e1c031b2 	strh	r3, [r0, #18]
    bea0:	e12fff1e 	bx	lr

0000bea4 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()>:
    bea4:	e5903008 	ldr	r3, [r0, #8]
    bea8:	e3530003 	cmp	r3, #3
    beac:	0a000014 	beq	bf04 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x60>
    beb0:	e92d4010 	push	{r4, lr}
    beb4:	8a00000d 	bhi	bef0 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x4c>
    beb8:	e3530001 	cmp	r3, #1
    bebc:	1a00001a 	bne	bf2c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x88>
    bec0:	e1d021b2 	ldrh	r2, [r0, #18]
    bec4:	e3a01002 	mov	r1, #2
    bec8:	e5801008 	str	r1, [r0, #8]
    becc:	e3520901 	cmp	r2, #16384	@ 0x4000
    bed0:	0a00000f 	beq	bf14 <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x70>
    bed4:	e2022007 	and	r2, r2, #7
    bed8:	e1c011b0 	strh	r1, [r0, #16]
    bedc:	e3520005 	cmp	r2, #5
    bee0:	13a03002 	movne	r3, #2
    bee4:	e580300c 	str	r3, [r0, #12]
    bee8:	e3a00001 	mov	r0, #1
    beec:	e8bd8010 	pop	{r4, pc}
    bef0:	e2433004 	sub	r3, r3, #4
    bef4:	e3530001 	cmp	r3, #1
    bef8:	8a00000b 	bhi	bf2c <CDWHCIFrameSchedulerPeriodic::CompleteSplit()+0x88>
    befc:	e3a00000 	mov	r0, #0
    bf00:	e8bd8010 	pop	{r4, pc}
    bf04:	e3a03001 	mov	r3, #1
    bf08:	e1c031b0 	strh	r3, [r0, #16]
    bf0c:	e3a00001 	mov	r0, #1
    bf10:	e12fff1e 	bx	lr
    bf14:	e30a1438 	movw	r1, #42040	@ 0xa438
    bf18:	e3401003 	movt	r1, #3
    bf1c:	e30a0450 	movw	r0, #42064	@ 0xa450
    bf20:	e3400003 	movt	r0, #3
    bf24:	e3a02054 	mov	r2, #84	@ 0x54
    bf28:	eb007fab 	bl	2bddc <assertion_failed>
    bf2c:	e30a1438 	movw	r1, #42040	@ 0xa438
    bf30:	e3401003 	movt	r1, #3
    bf34:	e30a093c 	movw	r0, #43324	@ 0xa93c
    bf38:	e3400003 	movt	r0, #3
    bf3c:	e3a02072 	mov	r2, #114	@ 0x72
    bf40:	eb007fa5 	bl	2bddc <assertion_failed>

0000bf44 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()>:
    bf44:	e92d4030 	push	{r4, r5, lr}
    bf48:	e1a04000 	mov	r4, r0
    bf4c:	e3001408 	movw	r1, #1032	@ 0x408
    bf50:	e3431f98 	movt	r1, #16280	@ 0x3f98
    bf54:	e24dd014 	sub	sp, sp, #20
    bf58:	e28d0004 	add	r0, sp, #4
    bf5c:	eb00397a 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bf60:	e28d0004 	add	r0, sp, #4
    bf64:	eb003982 	bl	1a574 <CDWHCIRegister::Read()>
    bf68:	e1d431b0 	ldrh	r3, [r4, #16]
    bf6c:	e3530901 	cmp	r3, #16384	@ 0x4000
    bf70:	0a000010 	beq	bfb8 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x74>
    bf74:	e6ff0070 	uxth	r0, r0
    bf78:	e5942008 	ldr	r2, [r4, #8]
    bf7c:	e0833000 	add	r3, r3, r0
    bf80:	e3520000 	cmp	r2, #0
    bf84:	e7ed5053 	ubfx	r5, r3, #0, #14
    bf88:	e6ff3073 	uxth	r3, r3
    bf8c:	e1c451b2 	strh	r5, [r4, #18]
    bf90:	1a000003 	bne	bfa4 <CDWHCIFrameSchedulerPeriodic::GetFrameNumber()+0x60>
    bf94:	e2033007 	and	r3, r3, #7
    bf98:	e3530006 	cmp	r3, #6
    bf9c:	02855001 	addeq	r5, r5, #1
    bfa0:	01c451b2 	strheq	r5, [r4, #18]
    bfa4:	e28d0004 	add	r0, sp, #4
    bfa8:	eb003970 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    bfac:	e1a00005 	mov	r0, r5
    bfb0:	e28dd014 	add	sp, sp, #20
    bfb4:	e8bd8030 	pop	{r4, r5, pc}
    bfb8:	e30a1438 	movw	r1, #42040	@ 0xa438
    bfbc:	e3401003 	movt	r1, #3
    bfc0:	e30a0470 	movw	r0, #42096	@ 0xa470
    bfc4:	e3400003 	movt	r0, #3
    bfc8:	e3a020cb 	mov	r2, #203	@ 0xcb
    bfcc:	eb007f82 	bl	2bddc <assertion_failed>

0000bfd0 <CDWHCIFrameSchedulerPeriodic::IsOddFrame() const>:
    bfd0:	e92d4010 	push	{r4, lr}
    bfd4:	e3001408 	movw	r1, #1032	@ 0x408
    bfd8:	e3431f98 	movt	r1, #16280	@ 0x3f98
    bfdc:	e24dd010 	sub	sp, sp, #16
    bfe0:	e28d0004 	add	r0, sp, #4
    bfe4:	eb003958 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    bfe8:	e28d0004 	add	r0, sp, #4
    bfec:	eb003960 	bl	1a574 <CDWHCIRegister::Read()>
    bff0:	e1a04000 	mov	r4, r0
    bff4:	e28d0004 	add	r0, sp, #4
    bff8:	eb00395c 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    bffc:	e2040001 	and	r0, r4, #1
    c000:	e28dd010 	add	sp, sp, #16
    c004:	e8bd8010 	pop	{r4, pc}

0000c008 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)>:
    c008:	e5903008 	ldr	r3, [r0, #8]
    c00c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    c010:	e3530000 	cmp	r3, #0
    c014:	e24dd014 	sub	sp, sp, #20
    c018:	0a00000f 	beq	c05c <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x54>
    c01c:	e2433002 	sub	r3, r3, #2
    c020:	e3530001 	cmp	r3, #1
    c024:	8a000022 	bhi	c0b4 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xac>
    c028:	e3110001 	tst	r1, #1
    c02c:	13a03004 	movne	r3, #4
    c030:	15803008 	strne	r3, [r0, #8]
    c034:	1a000006 	bne	c054 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x4c>
    c038:	e3110060 	tst	r1, #96	@ 0x60
    c03c:	1a000010 	bne	c084 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x7c>
    c040:	e3110010 	tst	r1, #16
    c044:	0a000020 	beq	c0cc <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0xc4>
    c048:	e3a03005 	mov	r3, #5
    c04c:	e1c031b0 	strh	r3, [r0, #16]
    c050:	e5803008 	str	r3, [r0, #8]
    c054:	e28dd014 	add	sp, sp, #20
    c058:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    c05c:	e3110020 	tst	r1, #32
    c060:	13a03001 	movne	r3, #1
    c064:	15803008 	strne	r3, [r0, #8]
    c068:	1afffff9 	bne	c054 <CDWHCIFrameSchedulerPeriodic::TransactionComplete(unsigned int)+0x4c>
    c06c:	e30a1438 	movw	r1, #42040	@ 0xa438
    c070:	e3401003 	movt	r1, #3
    c074:	e30a0300 	movw	r0, #41728	@ 0xa300
    c078:	e3400003 	movt	r0, #3
    c07c:	e3a0207e 	mov	r2, #126	@ 0x7e
    c080:	eb007f55 	bl	2bddc <assertion_failed>
    c084:	e590300c 	ldr	r3, [r0, #12]
    c088:	e3530000 	cmp	r3, #0
    c08c:	e2432001 	sub	r2, r3, #1
    c090:	03a03003 	moveq	r3, #3
    c094:	13a03003 	movne	r3, #3
    c098:	e580200c 	str	r2, [r0, #12]
    c09c:	03a02005 	moveq	r2, #5
    c0a0:	01c031b0 	strheq	r3, [r0, #16]
    c0a4:	05802008 	streq	r2, [r0, #8]
    c0a8:	15803008 	strne	r3, [r0, #8]
    c0ac:	e28dd014 	add	sp, sp, #20
    c0b0:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
    c0b4:	e30a1438 	movw	r1, #42040	@ 0xa438
    c0b8:	e3401003 	movt	r1, #3
    c0bc:	e30a093c 	movw	r0, #43324	@ 0xa93c
    c0c0:	e3400003 	movt	r0, #3
    c0c4:	e3a020aa 	mov	r2, #170	@ 0xaa
    c0c8:	eb007f43 	bl	2bddc <assertion_failed>
    c0cc:	e58d100c 	str	r1, [sp, #12]
    c0d0:	eb0089bc 	bl	2e7c8 <CLogger::Get()>
    c0d4:	e59d100c 	ldr	r1, [sp, #12]
    c0d8:	e3a02001 	mov	r2, #1
    c0dc:	e58d1000 	str	r1, [sp]
    c0e0:	e30a3324 	movw	r3, #41764	@ 0xa324
    c0e4:	e3403003 	movt	r3, #3
    c0e8:	e30a1338 	movw	r1, #41784	@ 0xa338
    c0ec:	e3401003 	movt	r1, #3
    c0f0:	eb008b7d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c0f4:	e30a1438 	movw	r1, #42040	@ 0xa438
    c0f8:	e3401003 	movt	r1, #3
    c0fc:	e30a093c 	movw	r0, #43324	@ 0xa93c
    c100:	e3400003 	movt	r0, #3
    c104:	e3a020a5 	mov	r2, #165	@ 0xa5
    c108:	eb007f33 	bl	2bddc <assertion_failed>

0000c10c <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()>:
    c10c:	e3043068 	movw	r3, #16488	@ 0x4068
    c110:	e3403004 	movt	r3, #4
    c114:	e92d4010 	push	{r4, lr}
    c118:	e1a04000 	mov	r4, r0
    c11c:	e5930000 	ldr	r0, [r3]
    c120:	e3500000 	cmp	r0, #0
    c124:	0a000003 	beq	c138 <CDWHCIFrameSchedulerPeriodic::~CDWHCIFrameSchedulerPeriodic()+0x2c>
    c128:	e1a01004 	mov	r1, r4
    c12c:	eb0080ae 	bl	2c3ec <CClassAllocator::Free(void*)>
    c130:	e1a00004 	mov	r0, r4
    c134:	e8bd8010 	pop	{r4, pc}
    c138:	e30a1438 	movw	r1, #42040	@ 0xa438
    c13c:	e3401003 	movt	r1, #3
    c140:	e30a0354 	movw	r0, #41812	@ 0xa354
    c144:	e3400003 	movt	r0, #3
    c148:	e3a020e7 	mov	r2, #231	@ 0xe7
    c14c:	eb007f22 	bl	2bddc <assertion_failed>

0000c150 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>:
    c150:	e92d4010 	push	{r4, lr}
    c154:	e1a04000 	mov	r4, r0
    c158:	e59f3040 	ldr	r3, [pc, #64]	@ c1a0 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x50>
    c15c:	e5803000 	str	r3, [r0]
    c160:	eb00a3b4 	bl	35038 <CTimer::Get()>
    c164:	e3a02007 	mov	r2, #7
    c168:	e3a03901 	mov	r3, #16384	@ 0x4000
    c16c:	e3443000 	movt	r3, #16384	@ 0x4000
    c170:	e3500000 	cmp	r0, #0
    c174:	e9840005 	stmib	r4, {r0, r2}
    c178:	e5843010 	str	r3, [r4, #16]
    c17c:	0a000001 	beq	c188 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()+0x38>
    c180:	e1a00004 	mov	r0, r4
    c184:	e8bd8010 	pop	{r4, pc}
    c188:	e30a1438 	movw	r1, #42040	@ 0xa438
    c18c:	e3401003 	movt	r1, #3
    c190:	e3090d94 	movw	r0, #40340	@ 0x9d94
    c194:	e3400003 	movt	r0, #3
    c198:	e3a02034 	mov	r2, #52	@ 0x34
    c19c:	eb007f0e 	bl	2bddc <assertion_failed>
    c1a0:	0003ebf0 	.word	0x0003ebf0

0000c1a4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>:
    c1a4:	e3500014 	cmp	r0, #20
    c1a8:	e92d4010 	push	{r4, lr}
    c1ac:	1a000006 	bne	c1cc <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x28>
    c1b0:	e3043068 	movw	r3, #16488	@ 0x4068
    c1b4:	e3403004 	movt	r3, #4
    c1b8:	e5930000 	ldr	r0, [r3]
    c1bc:	e3500000 	cmp	r0, #0
    c1c0:	0a000007 	beq	c1e4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)+0x40>
    c1c4:	e8bd4010 	pop	{r4, lr}
    c1c8:	ea00804c 	b	2c300 <CClassAllocator::Allocate()>
    c1cc:	e30a1438 	movw	r1, #42040	@ 0xa438
    c1d0:	e3401003 	movt	r1, #3
    c1d4:	e30a0490 	movw	r0, #42128	@ 0xa490
    c1d8:	e3400003 	movt	r0, #3
    c1dc:	e3a020e7 	mov	r2, #231	@ 0xe7
    c1e0:	eb007efd 	bl	2bddc <assertion_failed>
    c1e4:	e30a1438 	movw	r1, #42040	@ 0xa438
    c1e8:	e3401003 	movt	r1, #3
    c1ec:	e30a0354 	movw	r0, #41812	@ 0xa354
    c1f0:	e3400003 	movt	r0, #3
    c1f4:	e3a020e7 	mov	r2, #231	@ 0xe7
    c1f8:	eb007ef7 	bl	2bddc <assertion_failed>

0000c1fc <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)>:
    c1fc:	e3510014 	cmp	r1, #20
    c200:	e92d4010 	push	{r4, lr}
    c204:	1a000008 	bne	c22c <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x30>
    c208:	e3042068 	movw	r2, #16488	@ 0x4068
    c20c:	e3402004 	movt	r2, #4
    c210:	e1a03000 	mov	r3, r0
    c214:	e5920000 	ldr	r0, [r2]
    c218:	e3500000 	cmp	r0, #0
    c21c:	0a000008 	beq	c244 <CDWHCIFrameSchedulerPeriodic::operator delete(void*, unsigned int)+0x48>
    c220:	e8bd4010 	pop	{r4, lr}
    c224:	e1a01003 	mov	r1, r3
    c228:	ea00806f 	b	2c3ec <CClassAllocator::Free(void*)>
    c22c:	e30a1438 	movw	r1, #42040	@ 0xa438
    c230:	e3401003 	movt	r1, #3
    c234:	e30a0490 	movw	r0, #42128	@ 0xa490
    c238:	e3400003 	movt	r0, #3
    c23c:	e3a020e7 	mov	r2, #231	@ 0xe7
    c240:	eb007ee5 	bl	2bddc <assertion_failed>
    c244:	e30a1438 	movw	r1, #42040	@ 0xa438
    c248:	e3401003 	movt	r1, #3
    c24c:	e30a0354 	movw	r0, #41812	@ 0xa354
    c250:	e3400003 	movt	r0, #3
    c254:	e3a020e7 	mov	r2, #231	@ 0xe7
    c258:	eb007edf 	bl	2bddc <assertion_failed>

0000c25c <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)>:
    c25c:	e92d4070 	push	{r4, r5, r6, lr}
    c260:	e3044068 	movw	r4, #16488	@ 0x4068
    c264:	e3404004 	movt	r4, #4
    c268:	e5943000 	ldr	r3, [r4]
    c26c:	e3530000 	cmp	r3, #0
    c270:	1a00000a 	bne	c2a0 <CDWHCIFrameSchedulerPeriodic::InitAllocator(unsigned int)+0x44>
    c274:	e1a05000 	mov	r5, r0
    c278:	e3a00020 	mov	r0, #32
    c27c:	eb00a7a8 	bl	36124 <operator new(unsigned int)>
    c280:	e1a02005 	mov	r2, r5
    c284:	e3a01014 	mov	r1, #20
    c288:	e30a34c0 	movw	r3, #42176	@ 0xa4c0
    c28c:	e3403003 	movt	r3, #3
    c290:	e1a05000 	mov	r5, r0
    c294:	eb007fbb 	bl	2c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c298:	e5845000 	str	r5, [r4]
    c29c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c2a0:	e30a1438 	movw	r1, #42040	@ 0xa438
    c2a4:	e3401003 	movt	r1, #3
    c2a8:	e30a039c 	movw	r0, #41884	@ 0xa39c
    c2ac:	e3400003 	movt	r0, #3
    c2b0:	e3a020e7 	mov	r2, #231	@ 0xe7
    c2b4:	eb007ec8 	bl	2bddc <assertion_failed>

0000c2b8 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)>:
    c2b8:	e92d4070 	push	{r4, r5, r6, lr}
    c2bc:	e3044068 	movw	r4, #16488	@ 0x4068
    c2c0:	e3404004 	movt	r4, #4
    c2c4:	e1a05000 	mov	r5, r0
    c2c8:	e24dd008 	sub	sp, sp, #8
    c2cc:	e1a06001 	mov	r6, r1
    c2d0:	e5940000 	ldr	r0, [r4]
    c2d4:	e3500000 	cmp	r0, #0
    c2d8:	0a000004 	beq	c2f0 <CDWHCIFrameSchedulerPeriodic::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    c2dc:	e1a02001 	mov	r2, r1
    c2e0:	e1a01005 	mov	r1, r5
    c2e4:	e28dd008 	add	sp, sp, #8
    c2e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    c2ec:	ea007fbf 	b	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
    c2f0:	e3a00020 	mov	r0, #32
    c2f4:	eb00a78a 	bl	36124 <operator new(unsigned int)>
    c2f8:	e1a02005 	mov	r2, r5
    c2fc:	e1a03006 	mov	r3, r6
    c300:	e3a01014 	mov	r1, #20
    c304:	e30ac4c0 	movw	ip, #42176	@ 0xa4c0
    c308:	e340c003 	movt	ip, #3
    c30c:	e58dc000 	str	ip, [sp]
    c310:	e1a05000 	mov	r5, r0
    c314:	eb007fa7 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c318:	e5845000 	str	r5, [r4]
    c31c:	e28dd008 	add	sp, sp, #8
    c320:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c324 <CDWHCIRootPort::~CDWHCIRootPort()>:
    c324:	e92d4010 	push	{r4, lr}
    c328:	e1a04000 	mov	r4, r0
    c32c:	e5900008 	ldr	r0, [r0, #8]
    c330:	e59f301c 	ldr	r3, [pc, #28]	@ c354 <CDWHCIRootPort::~CDWHCIRootPort()+0x30>
    c334:	e3500000 	cmp	r0, #0
    c338:	e5843000 	str	r3, [r4]
    c33c:	0a000002 	beq	c34c <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    c340:	e5903000 	ldr	r3, [r0]
    c344:	e5933004 	ldr	r3, [r3, #4]
    c348:	e12fff33 	blx	r3
    c34c:	e1a00004 	mov	r0, r4
    c350:	e8bd8010 	pop	{r4, pc}
    c354:	0003ec18 	.word	0x0003ec18

0000c358 <CDWHCIRootPort::RemoveDevice()>:
    c358:	e92d4010 	push	{r4, lr}
    c35c:	e1a04000 	mov	r4, r0
    c360:	e5900004 	ldr	r0, [r0, #4]
    c364:	e3500000 	cmp	r0, #0
    c368:	0a00000b 	beq	c39c <CDWHCIRootPort::RemoveDevice()+0x44>
    c36c:	e3a01000 	mov	r1, #0
    c370:	ebfff13d 	bl	886c <CDWHCIDevice::DisableRootPort(bool)>
    c374:	e5940008 	ldr	r0, [r4, #8]
    c378:	e3500000 	cmp	r0, #0
    c37c:	0a000002 	beq	c38c <CDWHCIRootPort::RemoveDevice()+0x34>
    c380:	e5903000 	ldr	r3, [r0]
    c384:	e5933004 	ldr	r3, [r3, #4]
    c388:	e12fff33 	blx	r3
    c38c:	e3a03000 	mov	r3, #0
    c390:	e3a00001 	mov	r0, #1
    c394:	e5843008 	str	r3, [r4, #8]
    c398:	e8bd8010 	pop	{r4, pc}
    c39c:	e30a14e0 	movw	r1, #42208	@ 0xa4e0
    c3a0:	e3401003 	movt	r1, #3
    c3a4:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    c3a8:	e3400003 	movt	r0, #3
    c3ac:	e3a0206d 	mov	r2, #109	@ 0x6d
    c3b0:	eb007e89 	bl	2bddc <assertion_failed>

0000c3b4 <CDWHCIRootPort::ReScanDevices()>:
    c3b4:	e92d4010 	push	{r4, lr}
    c3b8:	e5904008 	ldr	r4, [r0, #8]
    c3bc:	e3540000 	cmp	r4, #0
    c3c0:	0a000002 	beq	c3d0 <CDWHCIRootPort::ReScanDevices()+0x1c>
    c3c4:	e1a00004 	mov	r0, r4
    c3c8:	e8bd4010 	pop	{r4, lr}
    c3cc:	ea000833 	b	e4a0 <CUSBDevice::ReScanDevices()>
    c3d0:	eb0088fc 	bl	2e7c8 <CLogger::Get()>
    c3d4:	e59f1014 	ldr	r1, [pc, #20]	@ c3f0 <CDWHCIRootPort::ReScanDevices()+0x3c>
    c3d8:	e3a02002 	mov	r2, #2
    c3dc:	e30a3504 	movw	r3, #42244	@ 0xa504
    c3e0:	e3403003 	movt	r3, #3
    c3e4:	eb008ac0 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c3e8:	e1a00004 	mov	r0, r4
    c3ec:	e8bd8010 	pop	{r4, pc}
    c3f0:	0003ec2c 	.word	0x0003ec2c

0000c3f4 <CDWHCIRootPort::HandlePortStatusChange()>:
    c3f4:	e92d4010 	push	{r4, lr}
    c3f8:	e1a04000 	mov	r4, r0
    c3fc:	e5900004 	ldr	r0, [r0, #4]
    c400:	e3500000 	cmp	r0, #0
    c404:	0a00000f 	beq	c448 <CDWHCIRootPort::HandlePortStatusChange()+0x54>
    c408:	ebfff0e9 	bl	87b4 <CDWHCIDevice::DeviceConnected()>
    c40c:	e5943008 	ldr	r3, [r4, #8]
    c410:	e3500000 	cmp	r0, #0
    c414:	1a000006 	bne	c434 <CDWHCIRootPort::HandlePortStatusChange()+0x40>
    c418:	e3530000 	cmp	r3, #0
    c41c:	08bd8010 	popeq	{r4, pc}
    c420:	e5943000 	ldr	r3, [r4]
    c424:	e1a00004 	mov	r0, r4
    c428:	e8bd4010 	pop	{r4, lr}
    c42c:	e593300c 	ldr	r3, [r3, #12]
    c430:	e12fff13 	bx	r3
    c434:	e3530000 	cmp	r3, #0
    c438:	18bd8010 	popne	{r4, pc}
    c43c:	e5940004 	ldr	r0, [r4, #4]
    c440:	e8bd4010 	pop	{r4, lr}
    c444:	eafffc06 	b	b464 <CDWHCIDevice::ReScanDevices()>
    c448:	e30a14e0 	movw	r1, #42208	@ 0xa4e0
    c44c:	e3401003 	movt	r1, #3
    c450:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    c454:	e3400003 	movt	r0, #3
    c458:	e3a02078 	mov	r2, #120	@ 0x78
    c45c:	eb007e5e 	bl	2bddc <assertion_failed>

0000c460 <CDWHCIRootPort::~CDWHCIRootPort()>:
    c460:	e92d4010 	push	{r4, lr}
    c464:	e1a04000 	mov	r4, r0
    c468:	e5900008 	ldr	r0, [r0, #8]
    c46c:	e59f3028 	ldr	r3, [pc, #40]	@ c49c <CDWHCIRootPort::~CDWHCIRootPort()+0x3c>
    c470:	e3500000 	cmp	r0, #0
    c474:	e5843000 	str	r3, [r4]
    c478:	0a000002 	beq	c488 <CDWHCIRootPort::~CDWHCIRootPort()+0x28>
    c47c:	e5903000 	ldr	r3, [r0]
    c480:	e5933004 	ldr	r3, [r3, #4]
    c484:	e12fff33 	blx	r3
    c488:	e1a00004 	mov	r0, r4
    c48c:	e3a0100c 	mov	r1, #12
    c490:	eb00a73b 	bl	36184 <operator delete(void*, unsigned int)>
    c494:	e1a00004 	mov	r0, r4
    c498:	e8bd8010 	pop	{r4, pc}
    c49c:	0003ec18 	.word	0x0003ec18

0000c4a0 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)>:
    c4a0:	e3a02000 	mov	r2, #0
    c4a4:	e59fc028 	ldr	ip, [pc, #40]	@ c4d4 <CDWHCIRootPort::CDWHCIRootPort(CDWHCIDevice*)+0x34>
    c4a8:	e1510002 	cmp	r1, r2
    c4ac:	e580c000 	str	ip, [r0]
    c4b0:	e9800006 	stmib	r0, {r1, r2}
    c4b4:	112fff1e 	bxne	lr
    c4b8:	e30a14e0 	movw	r1, #42208	@ 0xa4e0
    c4bc:	e3401003 	movt	r1, #3
    c4c0:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    c4c4:	e3400003 	movt	r0, #3
    c4c8:	e3a0201f 	mov	r2, #31
    c4cc:	e92d4010 	push	{r4, lr}
    c4d0:	eb007e41 	bl	2bddc <assertion_failed>
    c4d4:	0003ec18 	.word	0x0003ec18

0000c4d8 <CDWHCIRootPort::Initialize()>:
    c4d8:	e92d4070 	push	{r4, r5, r6, lr}
    c4dc:	e1a04000 	mov	r4, r0
    c4e0:	e5900004 	ldr	r0, [r0, #4]
    c4e4:	e3500000 	cmp	r0, #0
    c4e8:	0a00003f 	beq	c5ec <CDWHCIRootPort::Initialize()+0x114>
    c4ec:	ebfff0be 	bl	87ec <CDWHCIDevice::GetPortSpeed()>
    c4f0:	e1a05000 	mov	r5, r0
    c4f4:	e3500004 	cmp	r0, #4
    c4f8:	0a000034 	beq	c5d0 <CDWHCIRootPort::Initialize()+0xf8>
    c4fc:	e5943008 	ldr	r3, [r4, #8]
    c500:	e3530000 	cmp	r3, #0
    c504:	1a00003e 	bne	c604 <CDWHCIRootPort::Initialize()+0x12c>
    c508:	e3a00058 	mov	r0, #88	@ 0x58
    c50c:	eb00a704 	bl	36124 <operator new(unsigned int)>
    c510:	e1a02005 	mov	r2, r5
    c514:	e5941004 	ldr	r1, [r4, #4]
    c518:	e1a05000 	mov	r5, r0
    c51c:	e1a03004 	mov	r3, r4
    c520:	eb000757 	bl	e284 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>
    c524:	e1a00005 	mov	r0, r5
    c528:	e5845008 	str	r5, [r4, #8]
    c52c:	eb000988 	bl	eb54 <CUSBDevice::Initialize()>
    c530:	e3500000 	cmp	r0, #0
    c534:	e5940008 	ldr	r0, [r4, #8]
    c538:	0a000010 	beq	c580 <CDWHCIRootPort::Initialize()+0xa8>
    c53c:	e5903000 	ldr	r3, [r0]
    c540:	e593300c 	ldr	r3, [r3, #12]
    c544:	e12fff33 	blx	r3
    c548:	e2505000 	subs	r5, r0, #0
    c54c:	0a000015 	beq	c5a8 <CDWHCIRootPort::Initialize()+0xd0>
    c550:	eb00889c 	bl	2e7c8 <CLogger::Get()>
    c554:	e59f10f4 	ldr	r1, [pc, #244]	@ c650 <CDWHCIRootPort::Initialize()+0x178>
    c558:	e3a02004 	mov	r2, #4
    c55c:	e30a3578 	movw	r3, #42360	@ 0xa578
    c560:	e3403003 	movt	r3, #3
    c564:	eb008a60 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c568:	e5940004 	ldr	r0, [r4, #4]
    c56c:	ebfff0b0 	bl	8834 <CDWHCIDevice::OvercurrentDetected()>
    c570:	e3500000 	cmp	r0, #0
    c574:	1a000028 	bne	c61c <CDWHCIRootPort::Initialize()+0x144>
    c578:	e1a00005 	mov	r0, r5
    c57c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c580:	e3500000 	cmp	r0, #0
    c584:	0a000002 	beq	c594 <CDWHCIRootPort::Initialize()+0xbc>
    c588:	e5903000 	ldr	r3, [r0]
    c58c:	e5933004 	ldr	r3, [r3, #4]
    c590:	e12fff33 	blx	r3
    c594:	e3a03000 	mov	r3, #0
    c598:	e5843008 	str	r3, [r4, #8]
    c59c:	e3a05000 	mov	r5, #0
    c5a0:	e1a00005 	mov	r0, r5
    c5a4:	e8bd8070 	pop	{r4, r5, r6, pc}
    c5a8:	eb008886 	bl	2e7c8 <CLogger::Get()>
    c5ac:	e59f109c 	ldr	r1, [pc, #156]	@ c650 <CDWHCIRootPort::Initialize()+0x178>
    c5b0:	e3a02002 	mov	r2, #2
    c5b4:	e30a3560 	movw	r3, #42336	@ 0xa560
    c5b8:	e3403003 	movt	r3, #3
    c5bc:	eb008a4a 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c5c0:	e5940008 	ldr	r0, [r4, #8]
    c5c4:	e3500000 	cmp	r0, #0
    c5c8:	1affffee 	bne	c588 <CDWHCIRootPort::Initialize()+0xb0>
    c5cc:	eafffff0 	b	c594 <CDWHCIRootPort::Initialize()+0xbc>
    c5d0:	eb00887c 	bl	2e7c8 <CLogger::Get()>
    c5d4:	e59f1074 	ldr	r1, [pc, #116]	@ c650 <CDWHCIRootPort::Initialize()+0x178>
    c5d8:	e3a02001 	mov	r2, #1
    c5dc:	e30a3534 	movw	r3, #42292	@ 0xa534
    c5e0:	e3403003 	movt	r3, #3
    c5e4:	eb008a40 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c5e8:	eaffffeb 	b	c59c <CDWHCIRootPort::Initialize()+0xc4>
    c5ec:	e30a14e0 	movw	r1, #42208	@ 0xa4e0
    c5f0:	e3401003 	movt	r1, #3
    c5f4:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    c5f8:	e3400003 	movt	r0, #3
    c5fc:	e3a0202c 	mov	r2, #44	@ 0x2c
    c600:	eb007df5 	bl	2bddc <assertion_failed>
    c604:	e30a14e0 	movw	r1, #42208	@ 0xa4e0
    c608:	e3401003 	movt	r1, #3
    c60c:	e30a0550 	movw	r0, #42320	@ 0xa550
    c610:	e3400003 	movt	r0, #3
    c614:	e3a02036 	mov	r2, #54	@ 0x36
    c618:	eb007def 	bl	2bddc <assertion_failed>
    c61c:	eb008869 	bl	2e7c8 <CLogger::Get()>
    c620:	e59f1028 	ldr	r1, [pc, #40]	@ c650 <CDWHCIRootPort::Initialize()+0x178>
    c624:	e3a02001 	mov	r2, #1
    c628:	e30a358c 	movw	r3, #42380	@ 0xa58c
    c62c:	e3403003 	movt	r3, #3
    c630:	eb008a2d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    c634:	e5940004 	ldr	r0, [r4, #4]
    c638:	e3a01001 	mov	r1, #1
    c63c:	ebfff08a 	bl	886c <CDWHCIDevice::DisableRootPort(bool)>
    c640:	e5940008 	ldr	r0, [r4, #8]
    c644:	e3500000 	cmp	r0, #0
    c648:	1affffce 	bne	c588 <CDWHCIRootPort::Initialize()+0xb0>
    c64c:	eaffffd0 	b	c594 <CDWHCIRootPort::Initialize()+0xbc>
    c650:	0003ec2c 	.word	0x0003ec2c

0000c654 <TQueueEntry::operator new(unsigned int)>:
    c654:	e350000c 	cmp	r0, #12
    c658:	e92d4010 	push	{r4, lr}
    c65c:	1a000006 	bne	c67c <TQueueEntry::operator new(unsigned int)+0x28>
    c660:	e304306c 	movw	r3, #16492	@ 0x406c
    c664:	e3403004 	movt	r3, #4
    c668:	e5930000 	ldr	r0, [r3]
    c66c:	e3500000 	cmp	r0, #0
    c670:	0a000007 	beq	c694 <TQueueEntry::operator new(unsigned int)+0x40>
    c674:	e8bd4010 	pop	{r4, lr}
    c678:	ea007f20 	b	2c300 <CClassAllocator::Allocate()>
    c67c:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c680:	e3401003 	movt	r1, #3
    c684:	e30a05b8 	movw	r0, #42424	@ 0xa5b8
    c688:	e3400003 	movt	r0, #3
    c68c:	e3a02028 	mov	r2, #40	@ 0x28
    c690:	eb007dd1 	bl	2bddc <assertion_failed>
    c694:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c698:	e3401003 	movt	r1, #3
    c69c:	e30a0354 	movw	r0, #41812	@ 0xa354
    c6a0:	e3400003 	movt	r0, #3
    c6a4:	e3a02028 	mov	r2, #40	@ 0x28
    c6a8:	eb007dcb 	bl	2bddc <assertion_failed>

0000c6ac <TQueueEntry::operator delete(void*, unsigned int)>:
    c6ac:	e351000c 	cmp	r1, #12
    c6b0:	e92d4010 	push	{r4, lr}
    c6b4:	1a000008 	bne	c6dc <TQueueEntry::operator delete(void*, unsigned int)+0x30>
    c6b8:	e304206c 	movw	r2, #16492	@ 0x406c
    c6bc:	e3402004 	movt	r2, #4
    c6c0:	e1a03000 	mov	r3, r0
    c6c4:	e5920000 	ldr	r0, [r2]
    c6c8:	e3500000 	cmp	r0, #0
    c6cc:	0a000008 	beq	c6f4 <TQueueEntry::operator delete(void*, unsigned int)+0x48>
    c6d0:	e8bd4010 	pop	{r4, lr}
    c6d4:	e1a01003 	mov	r1, r3
    c6d8:	ea007f43 	b	2c3ec <CClassAllocator::Free(void*)>
    c6dc:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c6e0:	e3401003 	movt	r1, #3
    c6e4:	e30a05b8 	movw	r0, #42424	@ 0xa5b8
    c6e8:	e3400003 	movt	r0, #3
    c6ec:	e3a02028 	mov	r2, #40	@ 0x28
    c6f0:	eb007db9 	bl	2bddc <assertion_failed>
    c6f4:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c6f8:	e3401003 	movt	r1, #3
    c6fc:	e30a0354 	movw	r0, #41812	@ 0xa354
    c700:	e3400003 	movt	r0, #3
    c704:	e3a02028 	mov	r2, #40	@ 0x28
    c708:	eb007db3 	bl	2bddc <assertion_failed>

0000c70c <TQueueEntry::InitAllocator(unsigned int)>:
    c70c:	e92d4070 	push	{r4, r5, r6, lr}
    c710:	e304406c 	movw	r4, #16492	@ 0x406c
    c714:	e3404004 	movt	r4, #4
    c718:	e5943000 	ldr	r3, [r4]
    c71c:	e3530000 	cmp	r3, #0
    c720:	1a00000a 	bne	c750 <TQueueEntry::InitAllocator(unsigned int)+0x44>
    c724:	e1a05000 	mov	r5, r0
    c728:	e3a00020 	mov	r0, #32
    c72c:	eb00a67c 	bl	36124 <operator new(unsigned int)>
    c730:	e1a02005 	mov	r2, r5
    c734:	e3a0100c 	mov	r1, #12
    c738:	e30a35d8 	movw	r3, #42456	@ 0xa5d8
    c73c:	e3403003 	movt	r3, #3
    c740:	e1a05000 	mov	r5, r0
    c744:	eb007e8f 	bl	2c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    c748:	e5845000 	str	r5, [r4]
    c74c:	e8bd8070 	pop	{r4, r5, r6, pc}
    c750:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c754:	e3401003 	movt	r1, #3
    c758:	e30a039c 	movw	r0, #41884	@ 0xa39c
    c75c:	e3400003 	movt	r0, #3
    c760:	e3a02028 	mov	r2, #40	@ 0x28
    c764:	eb007d9c 	bl	2bddc <assertion_failed>

0000c768 <TQueueEntry::InitProtectedAllocator(unsigned int, unsigned int)>:
    c768:	e92d4070 	push	{r4, r5, r6, lr}
    c76c:	e304406c 	movw	r4, #16492	@ 0x406c
    c770:	e3404004 	movt	r4, #4
    c774:	e1a05000 	mov	r5, r0
    c778:	e24dd008 	sub	sp, sp, #8
    c77c:	e1a06001 	mov	r6, r1
    c780:	e5940000 	ldr	r0, [r4]
    c784:	e3500000 	cmp	r0, #0
    c788:	0a000004 	beq	c7a0 <TQueueEntry::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    c78c:	e1a02001 	mov	r2, r1
    c790:	e1a01005 	mov	r1, r5
    c794:	e28dd008 	add	sp, sp, #8
    c798:	e8bd4070 	pop	{r4, r5, r6, lr}
    c79c:	ea007e93 	b	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
    c7a0:	e3a00020 	mov	r0, #32
    c7a4:	eb00a65e 	bl	36124 <operator new(unsigned int)>
    c7a8:	e1a02005 	mov	r2, r5
    c7ac:	e1a03006 	mov	r3, r6
    c7b0:	e3a0100c 	mov	r1, #12
    c7b4:	e30ac5d8 	movw	ip, #42456	@ 0xa5d8
    c7b8:	e340c003 	movt	ip, #3
    c7bc:	e58dc000 	str	ip, [sp]
    c7c0:	e1a05000 	mov	r5, r0
    c7c4:	eb007e7b 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c7c8:	e5845000 	str	r5, [r4]
    c7cc:	e28dd008 	add	sp, sp, #8
    c7d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0000c7d4 <CDWHCITransactionQueue::CDWHCITransactionQueue(unsigned int, unsigned int)>:
    c7d4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    c7d8:	e304606c 	movw	r6, #16492	@ 0x406c
    c7dc:	e3406004 	movt	r6, #4
    c7e0:	e1a04000 	mov	r4, r0
    c7e4:	e24dd00c 	sub	sp, sp, #12
    c7e8:	e1a05002 	mov	r5, r2
    c7ec:	e1a07001 	mov	r7, r1
    c7f0:	eb00a84c 	bl	36928 <CPtrListFIQ::CPtrListFIQ(unsigned int)>
    c7f4:	e5960000 	ldr	r0, [r6]
    c7f8:	e5845004 	str	r5, [r4, #4]
    c7fc:	e3500000 	cmp	r0, #0
    c800:	0a000005 	beq	c81c <CDWHCITransactionQueue::CDWHCITransactionQueue(unsigned int, unsigned int)+0x48>
    c804:	e1a02005 	mov	r2, r5
    c808:	e1a01007 	mov	r1, r7
    c80c:	eb007e77 	bl	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
    c810:	e1a00004 	mov	r0, r4
    c814:	e28dd00c 	add	sp, sp, #12
    c818:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    c81c:	e3a00020 	mov	r0, #32
    c820:	eb00a63f 	bl	36124 <operator new(unsigned int)>
    c824:	e1a03005 	mov	r3, r5
    c828:	e1a02007 	mov	r2, r7
    c82c:	e3a0100c 	mov	r1, #12
    c830:	e30ac5d8 	movw	ip, #42456	@ 0xa5d8
    c834:	e340c003 	movt	ip, #3
    c838:	e58dc000 	str	ip, [sp]
    c83c:	e1a05000 	mov	r5, r0
    c840:	eb007e5c 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    c844:	e1a00004 	mov	r0, r4
    c848:	e5865000 	str	r5, [r6]
    c84c:	e28dd00c 	add	sp, sp, #12
    c850:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0000c854 <CDWHCITransactionQueue::Flush()>:
    c854:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    c858:	e1a06000 	mov	r6, r0
    c85c:	e5900004 	ldr	r0, [r0, #4]
    c860:	e3500000 	cmp	r0, #0
    c864:	1a000032 	bne	c934 <CDWHCITransactionQueue::Flush()+0xe0>
    c868:	e1a00006 	mov	r0, r6
    c86c:	eb00a855 	bl	369c8 <CPtrListFIQ::GetFirst()>
    c870:	e2505000 	subs	r5, r0, #0
    c874:	0a000029 	beq	c920 <CDWHCITransactionQueue::Flush()+0xcc>
    c878:	e3058055 	movw	r8, #20565	@ 0x5055
    c87c:	e3458841 	movt	r8, #22593	@ 0x5841
    c880:	e304706c 	movw	r7, #16492	@ 0x406c
    c884:	e3407004 	movt	r7, #4
    c888:	e1a01005 	mov	r1, r5
    c88c:	e1a00006 	mov	r0, r6
    c890:	eb00a864 	bl	36a28 <CPtrListFIQ::GetPtr(TPtrListElement*)>
    c894:	e2504000 	subs	r4, r0, #0
    c898:	0a000027 	beq	c93c <CDWHCITransactionQueue::Flush()+0xe8>
    c89c:	e5943000 	ldr	r3, [r4]
    c8a0:	e1530008 	cmp	r3, r8
    c8a4:	1a00002a 	bne	c954 <CDWHCITransactionQueue::Flush()+0x100>
    c8a8:	e1a00006 	mov	r0, r6
    c8ac:	e1a01005 	mov	r1, r5
    c8b0:	eb00a90d 	bl	36cec <CPtrListFIQ::Remove(TPtrListElement*)>
    c8b4:	e5940004 	ldr	r0, [r4, #4]
    c8b8:	e3500000 	cmp	r0, #0
    c8bc:	0a00002a 	beq	c96c <CDWHCITransactionQueue::Flush()+0x118>
    c8c0:	eb00046c 	bl	da78 <CDWHCITransferStageData::GetURB() const>
    c8c4:	e2505000 	subs	r5, r0, #0
    c8c8:	0a000003 	beq	c8dc <CDWHCITransactionQueue::Flush()+0x88>
    c8cc:	eb0026e6 	bl	1646c <CUSBRequest::~CUSBRequest()>
    c8d0:	e1a00005 	mov	r0, r5
    c8d4:	e3a01070 	mov	r1, #112	@ 0x70
    c8d8:	eb00279f 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
    c8dc:	e5945004 	ldr	r5, [r4, #4]
    c8e0:	e3550000 	cmp	r5, #0
    c8e4:	0a000004 	beq	c8fc <CDWHCITransactionQueue::Flush()+0xa8>
    c8e8:	e1a00005 	mov	r0, r5
    c8ec:	eb000275 	bl	d2c8 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    c8f0:	e1a00005 	mov	r0, r5
    c8f4:	e3a01c01 	mov	r1, #256	@ 0x100
    c8f8:	eb00048a 	bl	db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    c8fc:	e5970000 	ldr	r0, [r7]
    c900:	e3500000 	cmp	r0, #0
    c904:	0a00001e 	beq	c984 <CDWHCITransactionQueue::Flush()+0x130>
    c908:	e1a01004 	mov	r1, r4
    c90c:	eb007eb6 	bl	2c3ec <CClassAllocator::Free(void*)>
    c910:	e1a00006 	mov	r0, r6
    c914:	eb00a82b 	bl	369c8 <CPtrListFIQ::GetFirst()>
    c918:	e2505000 	subs	r5, r0, #0
    c91c:	1affffd9 	bne	c888 <CDWHCITransactionQueue::Flush()+0x34>
    c920:	e5963004 	ldr	r3, [r6, #4]
    c924:	e3530000 	cmp	r3, #0
    c928:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    c92c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    c930:	ea00ac3d 	b	37a2c <LeaveCritical>
    c934:	eb00ac11 	bl	37980 <EnterCritical>
    c938:	eaffffca 	b	c868 <CDWHCITransactionQueue::Flush()+0x14>
    c93c:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c940:	e3401003 	movt	r1, #3
    c944:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
    c948:	e3400003 	movt	r0, #3
    c94c:	e3a0204f 	mov	r2, #79	@ 0x4f
    c950:	eb007d21 	bl	2bddc <assertion_failed>
    c954:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c958:	e3401003 	movt	r1, #3
    c95c:	e30a05f0 	movw	r0, #42480	@ 0xa5f0
    c960:	e3400003 	movt	r0, #3
    c964:	e3a02050 	mov	r2, #80	@ 0x50
    c968:	eb007d1b 	bl	2bddc <assertion_failed>
    c96c:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c970:	e3401003 	movt	r1, #3
    c974:	e30a0614 	movw	r0, #42516	@ 0xa614
    c978:	e3400003 	movt	r0, #3
    c97c:	e3a02054 	mov	r2, #84	@ 0x54
    c980:	eb007d15 	bl	2bddc <assertion_failed>
    c984:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    c988:	e3401003 	movt	r1, #3
    c98c:	e30a0354 	movw	r0, #41812	@ 0xa354
    c990:	e3400003 	movt	r0, #3
    c994:	e3a02028 	mov	r2, #40	@ 0x28
    c998:	eb007d0f 	bl	2bddc <assertion_failed>

0000c99c <CDWHCITransactionQueue::~CDWHCITransactionQueue()>:
    c99c:	e92d4010 	push	{r4, lr}
    c9a0:	e1a04000 	mov	r4, r0
    c9a4:	ebffffaa 	bl	c854 <CDWHCITransactionQueue::Flush()>
    c9a8:	e1a00004 	mov	r0, r4
    c9ac:	eb00a7fb 	bl	369a0 <CPtrListFIQ::~CPtrListFIQ()>
    c9b0:	e1a00004 	mov	r0, r4
    c9b4:	e8bd8010 	pop	{r4, pc}

0000c9b8 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)>:
    c9b8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    c9bc:	e2518000 	subs	r8, r1, #0
    c9c0:	0a000051 	beq	cb0c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x154>
    c9c4:	e1a07000 	mov	r7, r0
    c9c8:	e5900004 	ldr	r0, [r0, #4]
    c9cc:	e3500000 	cmp	r0, #0
    c9d0:	1a000039 	bne	cabc <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x104>
    c9d4:	e1a00007 	mov	r0, r7
    c9d8:	eb00a7fa 	bl	369c8 <CPtrListFIQ::GetFirst()>
    c9dc:	e2506000 	subs	r6, r0, #0
    c9e0:	0a00004f 	beq	cb24 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x16c>
    c9e4:	e3059055 	movw	r9, #20565	@ 0x5055
    c9e8:	e3459841 	movt	r9, #22593	@ 0x5841
    c9ec:	e1a01006 	mov	r1, r6
    c9f0:	e1a00007 	mov	r0, r7
    c9f4:	eb00a80b 	bl	36a28 <CPtrListFIQ::GetPtr(TPtrListElement*)>
    c9f8:	e2504000 	subs	r4, r0, #0
    c9fc:	0a000030 	beq	cac4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x10c>
    ca00:	e5943000 	ldr	r3, [r4]
    ca04:	e1530009 	cmp	r3, r9
    ca08:	1a000033 	bne	cadc <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x124>
    ca0c:	e1a01006 	mov	r1, r6
    ca10:	e1a00007 	mov	r0, r7
    ca14:	eb00a7ed 	bl	369d0 <CPtrListFIQ::GetNext(TPtrListElement*)>
    ca18:	e5943004 	ldr	r3, [r4, #4]
    ca1c:	e1a05000 	mov	r5, r0
    ca20:	e3530000 	cmp	r3, #0
    ca24:	0a000032 	beq	caf4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x13c>
    ca28:	e1a00003 	mov	r0, r3
    ca2c:	eb00041b 	bl	daa0 <CDWHCITransferStageData::GetDevice() const>
    ca30:	e1580000 	cmp	r8, r0
    ca34:	0a000003 	beq	ca48 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x90>
    ca38:	e3550000 	cmp	r5, #0
    ca3c:	0a000038 	beq	cb24 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x16c>
    ca40:	e1a06005 	mov	r6, r5
    ca44:	eaffffe8 	b	c9ec <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x34>
    ca48:	e1a00007 	mov	r0, r7
    ca4c:	e1a01006 	mov	r1, r6
    ca50:	eb00a8a5 	bl	36cec <CPtrListFIQ::Remove(TPtrListElement*)>
    ca54:	e5940004 	ldr	r0, [r4, #4]
    ca58:	e3500000 	cmp	r0, #0
    ca5c:	0a000035 	beq	cb38 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x180>
    ca60:	eb000404 	bl	da78 <CDWHCITransferStageData::GetURB() const>
    ca64:	e2506000 	subs	r6, r0, #0
    ca68:	0a000003 	beq	ca7c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xc4>
    ca6c:	eb00267e 	bl	1646c <CUSBRequest::~CUSBRequest()>
    ca70:	e1a00006 	mov	r0, r6
    ca74:	e3a01070 	mov	r1, #112	@ 0x70
    ca78:	eb002737 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
    ca7c:	e5946004 	ldr	r6, [r4, #4]
    ca80:	e3560000 	cmp	r6, #0
    ca84:	0a000004 	beq	ca9c <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0xe4>
    ca88:	e1a00006 	mov	r0, r6
    ca8c:	eb00020d 	bl	d2c8 <CDWHCITransferStageData::~CDWHCITransferStageData()>
    ca90:	e1a00006 	mov	r0, r6
    ca94:	e3a01c01 	mov	r1, #256	@ 0x100
    ca98:	eb000422 	bl	db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>
    ca9c:	e304306c 	movw	r3, #16492	@ 0x406c
    caa0:	e3403004 	movt	r3, #4
    caa4:	e5930000 	ldr	r0, [r3]
    caa8:	e3500000 	cmp	r0, #0
    caac:	0a000027 	beq	cb50 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x198>
    cab0:	e1a01004 	mov	r1, r4
    cab4:	eb007e4c 	bl	2c3ec <CClassAllocator::Free(void*)>
    cab8:	eaffffde 	b	ca38 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x80>
    cabc:	eb00abaf 	bl	37980 <EnterCritical>
    cac0:	eaffffc3 	b	c9d4 <CDWHCITransactionQueue::FlushDevice(CUSBDevice*)+0x1c>
    cac4:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    cac8:	e3401003 	movt	r1, #3
    cacc:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
    cad0:	e3400003 	movt	r0, #3
    cad4:	e3a0206f 	mov	r2, #111	@ 0x6f
    cad8:	eb007cbf 	bl	2bddc <assertion_failed>
    cadc:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    cae0:	e3401003 	movt	r1, #3
    cae4:	e30a05f0 	movw	r0, #42480	@ 0xa5f0
    cae8:	e3400003 	movt	r0, #3
    caec:	e3a02070 	mov	r2, #112	@ 0x70
    caf0:	eb007cb9 	bl	2bddc <assertion_failed>
    caf4:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    caf8:	e3401003 	movt	r1, #3
    cafc:	e30a0614 	movw	r0, #42516	@ 0xa614
    cb00:	e3400003 	movt	r0, #3
    cb04:	e3a02074 	mov	r2, #116	@ 0x74
    cb08:	eb007cb3 	bl	2bddc <assertion_failed>
    cb0c:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    cb10:	e3401003 	movt	r1, #3
    cb14:	e30a062c 	movw	r0, #42540	@ 0xa62c
    cb18:	e3400003 	movt	r0, #3
    cb1c:	e3a02067 	mov	r2, #103	@ 0x67
    cb20:	eb007cad 	bl	2bddc <assertion_failed>
    cb24:	e5973004 	ldr	r3, [r7, #4]
    cb28:	e3530000 	cmp	r3, #0
    cb2c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    cb30:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    cb34:	ea00abbc 	b	37a2c <LeaveCritical>
    cb38:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    cb3c:	e3401003 	movt	r1, #3
    cb40:	e30a0614 	movw	r0, #42516	@ 0xa614
    cb44:	e3400003 	movt	r0, #3
    cb48:	e3a02079 	mov	r2, #121	@ 0x79
    cb4c:	eb007ca2 	bl	2bddc <assertion_failed>
    cb50:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    cb54:	e3401003 	movt	r1, #3
    cb58:	e30a0354 	movw	r0, #41812	@ 0xa354
    cb5c:	e3400003 	movt	r0, #3
    cb60:	e3a02028 	mov	r2, #40	@ 0x28
    cb64:	eb007c9c 	bl	2bddc <assertion_failed>

0000cb68 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)>:
    cb68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    cb6c:	e2517000 	subs	r7, r1, #0
    cb70:	0a000040 	beq	cc78 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x110>
    cb74:	e1a05002 	mov	r5, r2
    cb78:	e3520901 	cmp	r2, #16384	@ 0x4000
    cb7c:	2a000049 	bcs	cca8 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x140>
    cb80:	e304306c 	movw	r3, #16492	@ 0x406c
    cb84:	e3403004 	movt	r3, #4
    cb88:	e1a04000 	mov	r4, r0
    cb8c:	e5930000 	ldr	r0, [r3]
    cb90:	e3500000 	cmp	r0, #0
    cb94:	0a00004f 	beq	ccd8 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x170>
    cb98:	eb007dd8 	bl	2c300 <CClassAllocator::Allocate()>
    cb9c:	e2506000 	subs	r6, r0, #0
    cba0:	0a000052 	beq	ccf0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x188>
    cba4:	e5940004 	ldr	r0, [r4, #4]
    cba8:	e3053055 	movw	r3, #20565	@ 0x5055
    cbac:	e3453841 	movt	r3, #22593	@ 0x5841
    cbb0:	e5867004 	str	r7, [r6, #4]
    cbb4:	e3500000 	cmp	r0, #0
    cbb8:	e5863000 	str	r3, [r6]
    cbbc:	e1c650b8 	strh	r5, [r6, #8]
    cbc0:	1a000025 	bne	cc5c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xf4>
    cbc4:	e1a00004 	mov	r0, r4
    cbc8:	eb00a77e 	bl	369c8 <CPtrListFIQ::GetFirst()>
    cbcc:	e2508000 	subs	r8, r0, #0
    cbd0:	0a000023 	beq	cc64 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xfc>
    cbd4:	e3059055 	movw	r9, #20565	@ 0x5055
    cbd8:	e3459841 	movt	r9, #22593	@ 0x5841
    cbdc:	e3017ffe 	movw	r7, #8190	@ 0x1ffe
    cbe0:	e1a01008 	mov	r1, r8
    cbe4:	e1a00004 	mov	r0, r4
    cbe8:	eb00a78e 	bl	36a28 <CPtrListFIQ::GetPtr(TPtrListElement*)>
    cbec:	e3500000 	cmp	r0, #0
    cbf0:	0a000026 	beq	cc90 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x128>
    cbf4:	e5903000 	ldr	r3, [r0]
    cbf8:	e1530009 	cmp	r3, r9
    cbfc:	1a00002f 	bne	ccc0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x158>
    cc00:	e1d030b8 	ldrh	r3, [r0, #8]
    cc04:	e1530005 	cmp	r3, r5
    cc08:	0a00000c 	beq	cc40 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xd8>
    cc0c:	e0433005 	sub	r3, r3, r5
    cc10:	e7ed3053 	ubfx	r3, r3, #0, #14
    cc14:	e1530007 	cmp	r3, r7
    cc18:	8a000008 	bhi	cc40 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xd8>
    cc1c:	e1a02006 	mov	r2, r6
    cc20:	e1a01008 	mov	r1, r8
    cc24:	e1a00004 	mov	r0, r4
    cc28:	eb00a794 	bl	36a80 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)>
    cc2c:	e5943004 	ldr	r3, [r4, #4]
    cc30:	e3530000 	cmp	r3, #0
    cc34:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
    cc38:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    cc3c:	ea00ab7a 	b	37a2c <LeaveCritical>
    cc40:	e1a01008 	mov	r1, r8
    cc44:	e1a00004 	mov	r0, r4
    cc48:	eb00a760 	bl	369d0 <CPtrListFIQ::GetNext(TPtrListElement*)>
    cc4c:	e3500000 	cmp	r0, #0
    cc50:	0a000003 	beq	cc64 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xfc>
    cc54:	e1a08000 	mov	r8, r0
    cc58:	eaffffe0 	b	cbe0 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x78>
    cc5c:	eb00ab47 	bl	37980 <EnterCritical>
    cc60:	eaffffd7 	b	cbc4 <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0x5c>
    cc64:	e1a02006 	mov	r2, r6
    cc68:	e1a01008 	mov	r1, r8
    cc6c:	e1a00004 	mov	r0, r4
    cc70:	eb00a7d0 	bl	36bb8 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)>
    cc74:	eaffffec 	b	cc2c <CDWHCITransactionQueue::Enqueue(CDWHCITransferStageData*, unsigned short)+0xc4>
    cc78:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    cc7c:	e3401003 	movt	r1, #3
    cc80:	e30a061c 	movw	r0, #42524	@ 0xa61c
    cc84:	e3400003 	movt	r0, #3
    cc88:	e3a0208d 	mov	r2, #141	@ 0x8d
    cc8c:	eb007c52 	bl	2bddc <assertion_failed>
    cc90:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    cc94:	e3401003 	movt	r1, #3
    cc98:	e30a0664 	movw	r0, #42596	@ 0xa664
    cc9c:	e3400003 	movt	r0, #3
    cca0:	e3a0209f 	mov	r2, #159	@ 0x9f
    cca4:	eb007c4c 	bl	2bddc <assertion_failed>
    cca8:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    ccac:	e3401003 	movt	r1, #3
    ccb0:	e30a063c 	movw	r0, #42556	@ 0xa63c
    ccb4:	e3400003 	movt	r0, #3
    ccb8:	e3a0208e 	mov	r2, #142	@ 0x8e
    ccbc:	eb007c46 	bl	2bddc <assertion_failed>
    ccc0:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    ccc4:	e3401003 	movt	r1, #3
    ccc8:	e30a0674 	movw	r0, #42612	@ 0xa674
    cccc:	e3400003 	movt	r0, #3
    ccd0:	e3a020a0 	mov	r2, #160	@ 0xa0
    ccd4:	eb007c40 	bl	2bddc <assertion_failed>
    ccd8:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    ccdc:	e3401003 	movt	r1, #3
    cce0:	e30a0354 	movw	r0, #41812	@ 0xa354
    cce4:	e3400003 	movt	r0, #3
    cce8:	e3a02028 	mov	r2, #40	@ 0x28
    ccec:	eb007c3a 	bl	2bddc <assertion_failed>
    ccf0:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    ccf4:	e3401003 	movt	r1, #3
    ccf8:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
    ccfc:	e3400003 	movt	r0, #3
    cd00:	e3a02091 	mov	r2, #145	@ 0x91
    cd04:	eb007c34 	bl	2bddc <assertion_failed>

0000cd08 <CDWHCITransactionQueue::Dequeue(unsigned short)>:
    cd08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    cd0c:	e1a04000 	mov	r4, r0
    cd10:	e5900004 	ldr	r0, [r0, #4]
    cd14:	e1a07001 	mov	r7, r1
    cd18:	e3500000 	cmp	r0, #0
    cd1c:	1a00002d 	bne	cdd8 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xd0>
    cd20:	e1a00004 	mov	r0, r4
    cd24:	eb00a727 	bl	369c8 <CPtrListFIQ::GetFirst()>
    cd28:	e2506000 	subs	r6, r0, #0
    cd2c:	0a000011 	beq	cd78 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x70>
    cd30:	e1a01006 	mov	r1, r6
    cd34:	e1a00004 	mov	r0, r4
    cd38:	eb00a73a 	bl	36a28 <CPtrListFIQ::GetPtr(TPtrListElement*)>
    cd3c:	e2505000 	subs	r5, r0, #0
    cd40:	0a00002a 	beq	cdf0 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xe8>
    cd44:	e5952000 	ldr	r2, [r5]
    cd48:	e3053055 	movw	r3, #20565	@ 0x5055
    cd4c:	e3453841 	movt	r3, #22593	@ 0x5841
    cd50:	e1520003 	cmp	r2, r3
    cd54:	1a00002b 	bne	ce08 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x100>
    cd58:	e1d530b8 	ldrh	r3, [r5, #8]
    cd5c:	e1530007 	cmp	r3, r7
    cd60:	0a00000a 	beq	cd90 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x88>
    cd64:	e0433007 	sub	r3, r3, r7
    cd68:	e3012ffe 	movw	r2, #8190	@ 0x1ffe
    cd6c:	e7ed3053 	ubfx	r3, r3, #0, #14
    cd70:	e1530002 	cmp	r3, r2
    cd74:	8a000005 	bhi	cd90 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x88>
    cd78:	e5943004 	ldr	r3, [r4, #4]
    cd7c:	e3530000 	cmp	r3, #0
    cd80:	1a000016 	bne	cde0 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xd8>
    cd84:	e3a04000 	mov	r4, #0
    cd88:	e1a00004 	mov	r0, r4
    cd8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cd90:	e1a01006 	mov	r1, r6
    cd94:	e1a00004 	mov	r0, r4
    cd98:	eb00a7d3 	bl	36cec <CPtrListFIQ::Remove(TPtrListElement*)>
    cd9c:	e5943004 	ldr	r3, [r4, #4]
    cda0:	e3530000 	cmp	r3, #0
    cda4:	1a00000f 	bne	cde8 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xe0>
    cda8:	e5954004 	ldr	r4, [r5, #4]
    cdac:	e3540000 	cmp	r4, #0
    cdb0:	0a00001a 	beq	ce20 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x118>
    cdb4:	e304306c 	movw	r3, #16492	@ 0x406c
    cdb8:	e3403004 	movt	r3, #4
    cdbc:	e5930000 	ldr	r0, [r3]
    cdc0:	e3500000 	cmp	r0, #0
    cdc4:	0a00001b 	beq	ce38 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x130>
    cdc8:	e1a01005 	mov	r1, r5
    cdcc:	eb007d86 	bl	2c3ec <CClassAllocator::Free(void*)>
    cdd0:	e1a00004 	mov	r0, r4
    cdd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    cdd8:	eb00aae8 	bl	37980 <EnterCritical>
    cddc:	eaffffcf 	b	cd20 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x18>
    cde0:	eb00ab11 	bl	37a2c <LeaveCritical>
    cde4:	eaffffe6 	b	cd84 <CDWHCITransactionQueue::Dequeue(unsigned short)+0x7c>
    cde8:	eb00ab0f 	bl	37a2c <LeaveCritical>
    cdec:	eaffffed 	b	cda8 <CDWHCITransactionQueue::Dequeue(unsigned short)+0xa0>
    cdf0:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    cdf4:	e3401003 	movt	r1, #3
    cdf8:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
    cdfc:	e3400003 	movt	r0, #3
    ce00:	e3a020c4 	mov	r2, #196	@ 0xc4
    ce04:	eb007bf4 	bl	2bddc <assertion_failed>
    ce08:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    ce0c:	e3401003 	movt	r1, #3
    ce10:	e30a05f0 	movw	r0, #42480	@ 0xa5f0
    ce14:	e3400003 	movt	r0, #3
    ce18:	e3a020c5 	mov	r2, #197	@ 0xc5
    ce1c:	eb007bee 	bl	2bddc <assertion_failed>
    ce20:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    ce24:	e3401003 	movt	r1, #3
    ce28:	e30a061c 	movw	r0, #42524	@ 0xa61c
    ce2c:	e3400003 	movt	r0, #3
    ce30:	e3a020d3 	mov	r2, #211	@ 0xd3
    ce34:	eb007be8 	bl	2bddc <assertion_failed>
    ce38:	e30a15a4 	movw	r1, #42404	@ 0xa5a4
    ce3c:	e3401003 	movt	r1, #3
    ce40:	e30a0354 	movw	r0, #41812	@ 0xa354
    ce44:	e3400003 	movt	r0, #3
    ce48:	e3a02028 	mov	r2, #40	@ 0x28
    ce4c:	eb007be2 	bl	2bddc <assertion_failed>

0000ce50 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)>:
    ce50:	e92d4070 	push	{r4, r5, r6, lr}
    ce54:	e1a04000 	mov	r4, r0
    ce58:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
    ce5c:	f2c02050 	vmov.i32	q9, #0	@ 0x00000000
    ce60:	e2800034 	add	r0, r0, #52	@ 0x34
    ce64:	e5c43008 	strb	r3, [r4, #8]
    ce68:	e3a03000 	mov	r3, #0
    ce6c:	e5842004 	str	r2, [r4, #4]
    ce70:	e1a05002 	mov	r5, r2
    ce74:	e1520003 	cmp	r2, r3
    ce78:	e2842044 	add	r2, r4, #68	@ 0x44
    ce7c:	e5dd6010 	ldrb	r6, [sp, #16]
    ce80:	e5c46009 	strb	r6, [r4, #9]
    ce84:	e5841000 	str	r1, [r4]
    ce88:	e584300c 	str	r3, [r4, #12]
    ce8c:	e5c43011 	strb	r3, [r4, #17]
    ce90:	f4402a8f 	vst1.32	{d18-d19}, [r0]
    ce94:	f442078f 	vst1.32	{d16}, [r2]
    ce98:	e58430c4 	str	r3, [r4, #196]	@ 0xc4
    ce9c:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
    cea0:	0a0000a1 	beq	d12c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2dc>
    cea4:	e1a00005 	mov	r0, r5
    cea8:	eb002570 	bl	16470 <CUSBRequest::GetEndpoint() const>
    ceac:	e3500000 	cmp	r0, #0
    ceb0:	e5840018 	str	r0, [r4, #24]
    ceb4:	0a0000a2 	beq	d144 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2f4>
    ceb8:	eb000c4d 	bl	fff4 <CUSBEndpoint::GetDevice() const>
    cebc:	e3500000 	cmp	r0, #0
    cec0:	e5840014 	str	r0, [r4, #20]
    cec4:	0a0000a4 	beq	d15c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x30c>
    cec8:	eb000621 	bl	e754 <CUSBDevice::GetSpeed() const>
    cecc:	e1a03000 	mov	r3, r0
    ced0:	e5940018 	ldr	r0, [r4, #24]
    ced4:	e5c4301c 	strb	r3, [r4, #28]
    ced8:	eb000c59 	bl	10044 <CUSBEndpoint::GetMaxPacketSize() const>
    cedc:	e5840020 	str	r0, [r4, #32]
    cee0:	e5940014 	ldr	r0, [r4, #20]
    cee4:	eb00061c 	bl	e75c <CUSBDevice::IsSplit() const>
    cee8:	e3560000 	cmp	r6, #0
    ceec:	e5c40010 	strb	r0, [r4, #16]
    cef0:	0a000022 	beq	cf80 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x130>
    cef4:	eddf0bef 	vldr	d16, [pc, #956]	@ d2b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x468>
    cef8:	eddf1bf0 	vldr	d17, [pc, #960]	@ d2c0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x470>
    cefc:	e2842024 	add	r2, r4, #36	@ 0x24
    cf00:	e2843080 	add	r3, r4, #128	@ 0x80
    cf04:	e58430c0 	str	r3, [r4, #192]	@ 0xc0
    cf08:	f4420a8f 	vst1.32	{d16-d17}, [r2]
    cf0c:	e3130003 	tst	r3, #3
    cf10:	1a000097 	bne	d174 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x324>
    cf14:	e5d43010 	ldrb	r3, [r4, #16]
    cf18:	e3530000 	cmp	r3, #0
    cf1c:	0a000042 	beq	d02c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1dc>
    cf20:	e5940018 	ldr	r0, [r4, #24]
    cf24:	e3500000 	cmp	r0, #0
    cf28:	0a00009c 	beq	d1a0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x350>
    cf2c:	eb000c3c 	bl	10024 <CUSBEndpoint::GetType() const>
    cf30:	e3500003 	cmp	r0, #3
    cf34:	0a000053 	beq	d088 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x238>
    cf38:	e5940018 	ldr	r0, [r4, #24]
    cf3c:	e3500000 	cmp	r0, #0
    cf40:	0a0000be 	beq	d240 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3f0>
    cf44:	eb000c36 	bl	10024 <CUSBEndpoint::GetType() const>
    cf48:	e2400002 	sub	r0, r0, #2
    cf4c:	e6ef0070 	uxtb	r0, r0
    cf50:	e3500001 	cmp	r0, #1
    cf54:	e3a00014 	mov	r0, #20
    cf58:	8a00008b 	bhi	d18c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x33c>
    cf5c:	ebfffc90 	bl	c1a4 <CDWHCIFrameSchedulerPeriodic::operator new(unsigned int)>
    cf60:	e1a05000 	mov	r5, r0
    cf64:	ebfffc79 	bl	c150 <CDWHCIFrameSchedulerPeriodic::CDWHCIFrameSchedulerPeriodic()>
    cf68:	e58450c8 	str	r5, [r4, #200]	@ 0xc8
    cf6c:	e59d3014 	ldr	r3, [sp, #20]
    cf70:	e3530000 	cmp	r3, #0
    cf74:	1a00004c 	bne	d0ac <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x25c>
    cf78:	e1a00004 	mov	r0, r4
    cf7c:	e8bd8070 	pop	{r4, r5, r6, pc}
    cf80:	e5940018 	ldr	r0, [r4, #24]
    cf84:	e1a01006 	mov	r1, r6
    cf88:	eb000c3c 	bl	10080 <CUSBEndpoint::GetNextPID(bool)>
    cf8c:	e3500000 	cmp	r0, #0
    cf90:	e1a00005 	mov	r0, r5
    cf94:	0a000057 	beq	d0f8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2a8>
    cf98:	eb002573 	bl	1656c <CUSBRequest::GetBuffer()>
    cf9c:	e1a03000 	mov	r3, r0
    cfa0:	e1a00005 	mov	r0, r5
    cfa4:	e58430c0 	str	r3, [r4, #192]	@ 0xc0
    cfa8:	eb00257d 	bl	165a4 <CUSBRequest::GetBufLen() const>
    cfac:	e1a02000 	mov	r2, r0
    cfb0:	e594c020 	ldr	ip, [r4, #32]
    cfb4:	e5d45010 	ldrb	r5, [r4, #16]
    cfb8:	e24c3001 	sub	r3, ip, #1
    cfbc:	e5940018 	ldr	r0, [r4, #24]
    cfc0:	e0833002 	add	r3, r3, r2
    cfc4:	e3550000 	cmp	r5, #0
    cfc8:	e5842024 	str	r2, [r4, #36]	@ 0x24
    cfcc:	e733fc13 	udiv	r3, r3, ip
    cfd0:	e5843028 	str	r3, [r4, #40]	@ 0x28
    cfd4:	0a00004b 	beq	d108 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2b8>
    cfd8:	e3500000 	cmp	r0, #0
    cfdc:	0a00006f 	beq	d1a0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x350>
    cfe0:	eb000c0f 	bl	10024 <CUSBEndpoint::GetType() const>
    cfe4:	e3500003 	cmp	r0, #3
    cfe8:	0a000072 	beq	d1b8 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x368>
    cfec:	e5943020 	ldr	r3, [r4, #32]
    cff0:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
    cff4:	e1530002 	cmp	r3, r2
    cff8:	21a03002 	movcs	r3, r2
    cffc:	e584302c 	str	r3, [r4, #44]	@ 0x2c
    d000:	e3a02001 	mov	r2, #1
    d004:	e59430c0 	ldr	r3, [r4, #192]	@ 0xc0
    d008:	e5842030 	str	r2, [r4, #48]	@ 0x30
    d00c:	e3530000 	cmp	r3, #0
    d010:	1affffbd 	bne	cf0c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0xbc>
    d014:	e30a1698 	movw	r1, #42648	@ 0xa698
    d018:	e3401003 	movt	r1, #3
    d01c:	e30a0728 	movw	r0, #42792	@ 0xa728
    d020:	e3400003 	movt	r0, #3
    d024:	e3a02088 	mov	r2, #136	@ 0x88
    d028:	eb007b6b 	bl	2bddc <assertion_failed>
    d02c:	e5940014 	ldr	r0, [r4, #20]
    d030:	eb0005cb 	bl	e764 <CUSBDevice::GetHubAddress() const>
    d034:	e3500000 	cmp	r0, #0
    d038:	1affffcb 	bne	cf6c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d03c:	e5d4301c 	ldrb	r3, [r4, #28]
    d040:	e3530002 	cmp	r3, #2
    d044:	0affffc8 	beq	cf6c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d048:	e3a00008 	mov	r0, #8
    d04c:	ebfffb25 	bl	bce8 <CDWHCIFrameSchedulerNoSplit::operator new(unsigned int)>
    d050:	e1a05000 	mov	r5, r0
    d054:	e5940018 	ldr	r0, [r4, #24]
    d058:	e3500000 	cmp	r0, #0
    d05c:	0a000077 	beq	d240 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3f0>
    d060:	eb000bef 	bl	10024 <CUSBEndpoint::GetType() const>
    d064:	e2401002 	sub	r1, r0, #2
    d068:	e1a00005 	mov	r0, r5
    d06c:	e6ef1071 	uxtb	r1, r1
    d070:	e3510001 	cmp	r1, #1
    d074:	83a01000 	movhi	r1, #0
    d078:	93a01001 	movls	r1, #1
    d07c:	ebfffb12 	bl	bccc <CDWHCIFrameSchedulerNoSplit::CDWHCIFrameSchedulerNoSplit(bool)>
    d080:	e58450c8 	str	r5, [r4, #200]	@ 0xc8
    d084:	eaffffb8 	b	cf6c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d088:	e3a00018 	mov	r0, #24
    d08c:	eb0003ee 	bl	e04c <CDWHCIFrameSchedulerIsochronous::operator new(unsigned int)>
    d090:	e5d41008 	ldrb	r1, [r4, #8]
    d094:	e1a05000 	mov	r5, r0
    d098:	eb0003e0 	bl	e020 <CDWHCIFrameSchedulerIsochronous::CDWHCIFrameSchedulerIsochronous(bool)>
    d09c:	e59d3014 	ldr	r3, [sp, #20]
    d0a0:	e58450c8 	str	r5, [r4, #200]	@ 0xc8
    d0a4:	e3530000 	cmp	r3, #0
    d0a8:	0affffb2 	beq	cf78 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x128>
    d0ac:	e5940018 	ldr	r0, [r4, #24]
    d0b0:	eb000bdb 	bl	10024 <CUSBEndpoint::GetType() const>
    d0b4:	e3500002 	cmp	r0, #2
    d0b8:	1a000066 	bne	d258 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x408>
    d0bc:	e59d1014 	ldr	r1, [sp, #20]
    d0c0:	e3a03064 	mov	r3, #100	@ 0x64
    d0c4:	e3042dd3 	movw	r2, #19923	@ 0x4dd3
    d0c8:	e3412062 	movt	r2, #4194	@ 0x1062
    d0cc:	e0030193 	mul	r3, r3, r1
    d0d0:	e3530ffa 	cmp	r3, #1000	@ 0x3e8
    d0d4:	e0832392 	umull	r2, r3, r2, r3
    d0d8:	e1a03323 	lsr	r3, r3, #6
    d0dc:	e584300c 	str	r3, [r4, #12]
    d0e0:	3a000062 	bcc	d270 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x420>
    d0e4:	eb009fd3 	bl	35038 <CTimer::Get()>
    d0e8:	eb009d00 	bl	344f0 <CTimer::GetTicks() const>
    d0ec:	e58400c4 	str	r0, [r4, #196]	@ 0xc4
    d0f0:	e1a00004 	mov	r0, r4
    d0f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    d0f8:	eb002506 	bl	16518 <CUSBRequest::GetSetupData()>
    d0fc:	e3a02008 	mov	r2, #8
    d100:	e58400c0 	str	r0, [r4, #192]	@ 0xc0
    d104:	eaffffa9 	b	cfb0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x160>
    d108:	e3500000 	cmp	r0, #0
    d10c:	0a000023 	beq	d1a0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x350>
    d110:	eb000bc3 	bl	10024 <CUSBEndpoint::GetType() const>
    d114:	e3500003 	cmp	r0, #3
    d118:	0a00003e 	beq	d218 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x3c8>
    d11c:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
    d120:	e5942028 	ldr	r2, [r4, #40]	@ 0x28
    d124:	e584002c 	str	r0, [r4, #44]	@ 0x2c
    d128:	eaffffb5 	b	d004 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b4>
    d12c:	e30a1698 	movw	r1, #42648	@ 0xa698
    d130:	e3401003 	movt	r1, #3
    d134:	e30a06b0 	movw	r0, #42672	@ 0xa6b0
    d138:	e3400003 	movt	r0, #3
    d13c:	e3a02037 	mov	r2, #55	@ 0x37
    d140:	eb007b25 	bl	2bddc <assertion_failed>
    d144:	e30a1698 	movw	r1, #42648	@ 0xa698
    d148:	e3401003 	movt	r1, #3
    d14c:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d150:	e3400003 	movt	r0, #3
    d154:	e3a0203a 	mov	r2, #58	@ 0x3a
    d158:	eb007b1f 	bl	2bddc <assertion_failed>
    d15c:	e30a1698 	movw	r1, #42648	@ 0xa698
    d160:	e3401003 	movt	r1, #3
    d164:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
    d168:	e3400003 	movt	r0, #3
    d16c:	e3a0203c 	mov	r2, #60	@ 0x3c
    d170:	eb007b19 	bl	2bddc <assertion_failed>
    d174:	e30a1698 	movw	r1, #42648	@ 0xa698
    d178:	e3401003 	movt	r1, #3
    d17c:	e30a0740 	movw	r0, #42816	@ 0xa740
    d180:	e3400003 	movt	r0, #3
    d184:	e3a02089 	mov	r2, #137	@ 0x89
    d188:	eb007b13 	bl	2bddc <assertion_failed>
    d18c:	ebfffa21 	bl	ba18 <CDWHCIFrameSchedulerNonPeriodic::operator new(unsigned int)>
    d190:	e1a05000 	mov	r5, r0
    d194:	ebfffa0b 	bl	b9c8 <CDWHCIFrameSchedulerNonPeriodic::CDWHCIFrameSchedulerNonPeriodic()>
    d198:	e58450c8 	str	r5, [r4, #200]	@ 0xc8
    d19c:	eaffff72 	b	cf6c <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x11c>
    d1a0:	e30a1698 	movw	r1, #42648	@ 0xa698
    d1a4:	e3401003 	movt	r1, #3
    d1a8:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d1ac:	e3400003 	movt	r0, #3
    d1b0:	e3002155 	movw	r2, #341	@ 0x155
    d1b4:	eb007b08 	bl	2bddc <assertion_failed>
    d1b8:	e5940004 	ldr	r0, [r4, #4]
    d1bc:	eb00251a 	bl	1662c <CUSBRequest::GetNumIsoPackets() const>
    d1c0:	e3500001 	cmp	r0, #1
    d1c4:	1a00002f 	bne	d288 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x438>
    d1c8:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
    d1cc:	e5943020 	ldr	r3, [r4, #32]
    d1d0:	e1520003 	cmp	r2, r3
    d1d4:	8a000031 	bhi	d2a0 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x450>
    d1d8:	e5d43008 	ldrb	r3, [r4, #8]
    d1dc:	e2233001 	eor	r3, r3, #1
    d1e0:	e35200bc 	cmp	r2, #188	@ 0xbc
    d1e4:	93a03000 	movls	r3, #0
    d1e8:	82033001 	andhi	r3, r3, #1
    d1ec:	e3530000 	cmp	r3, #0
    d1f0:	0584202c 	streq	r2, [r4, #44]	@ 0x2c
    d1f4:	128230bb 	addne	r3, r2, #187	@ 0xbb
    d1f8:	13a010bc 	movne	r1, #188	@ 0xbc
    d1fc:	1304215d 	movwne	r2, #16733	@ 0x415d
    d200:	134a2e4c 	movtne	r2, #44620	@ 0xae4c
    d204:	1584102c 	strne	r1, [r4, #44]	@ 0x2c
    d208:	10832392 	umullne	r2, r3, r2, r3
    d20c:	11a033a3 	lsrne	r3, r3, #7
    d210:	15843028 	strne	r3, [r4, #40]	@ 0x28
    d214:	eaffff79 	b	d000 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x1b0>
    d218:	e5940004 	ldr	r0, [r4, #4]
    d21c:	e1a01005 	mov	r1, r5
    d220:	eb00250b 	bl	16654 <CUSBRequest::GetIsoPacketSize(unsigned int) const>
    d224:	e5943020 	ldr	r3, [r4, #32]
    d228:	e5840024 	str	r0, [r4, #36]	@ 0x24
    d22c:	e2432001 	sub	r2, r3, #1
    d230:	e0822000 	add	r2, r2, r0
    d234:	e732f312 	udiv	r2, r2, r3
    d238:	e5842028 	str	r2, [r4, #40]	@ 0x28
    d23c:	eaffffb8 	b	d124 <CDWHCITransferStageData::CDWHCITransferStageData(unsigned int, CUSBRequest*, bool, bool, unsigned int)+0x2d4>
    d240:	e30a1698 	movw	r1, #42648	@ 0xa698
    d244:	e3401003 	movt	r1, #3
    d248:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d24c:	e3400003 	movt	r0, #3
    d250:	e3a02f53 	mov	r2, #332	@ 0x14c
    d254:	eb007ae0 	bl	2bddc <assertion_failed>
    d258:	e30a1698 	movw	r1, #42648	@ 0xa698
    d25c:	e3401003 	movt	r1, #3
    d260:	e30a0768 	movw	r0, #42856	@ 0xa768
    d264:	e3400003 	movt	r0, #3
    d268:	e3a020a8 	mov	r2, #168	@ 0xa8
    d26c:	eb007ada 	bl	2bddc <assertion_failed>
    d270:	e30a1698 	movw	r1, #42648	@ 0xa698
    d274:	e3401003 	movt	r1, #3
    d278:	e30a079c 	movw	r0, #42908	@ 0xa79c
    d27c:	e3400003 	movt	r0, #3
    d280:	e3a020ab 	mov	r2, #171	@ 0xab
    d284:	eb007ad4 	bl	2bddc <assertion_failed>
    d288:	e30a1698 	movw	r1, #42648	@ 0xa698
    d28c:	e3401003 	movt	r1, #3
    d290:	e30a06e0 	movw	r0, #42720	@ 0xa6e0
    d294:	e3400003 	movt	r0, #3
    d298:	e3a02056 	mov	r2, #86	@ 0x56
    d29c:	eb007ace 	bl	2bddc <assertion_failed>
    d2a0:	e30a1698 	movw	r1, #42648	@ 0xa698
    d2a4:	e3401003 	movt	r1, #3
    d2a8:	e30a0704 	movw	r0, #42756	@ 0xa704
    d2ac:	e3400003 	movt	r0, #3
    d2b0:	e3a02057 	mov	r2, #87	@ 0x57
    d2b4:	eb007ac8 	bl	2bddc <assertion_failed>
    d2b8:	00000000 	.word	0x00000000
    d2bc:	00000001 	.word	0x00000001
    d2c0:	00000000 	.word	0x00000000
    d2c4:	00000001 	.word	0x00000001

0000d2c8 <CDWHCITransferStageData::~CDWHCITransferStageData()>:
    d2c8:	e92d4010 	push	{r4, lr}
    d2cc:	e1a04000 	mov	r4, r0
    d2d0:	e59000c8 	ldr	r0, [r0, #200]	@ 0xc8
    d2d4:	e3500000 	cmp	r0, #0
    d2d8:	0a000002 	beq	d2e8 <CDWHCITransferStageData::~CDWHCITransferStageData()+0x20>
    d2dc:	e5903000 	ldr	r3, [r0]
    d2e0:	e5933004 	ldr	r3, [r3, #4]
    d2e4:	e12fff33 	blx	r3
    d2e8:	e1a00004 	mov	r0, r4
    d2ec:	e8bd8010 	pop	{r4, pc}

0000d2f0 <CDWHCITransferStageData::SetChannelNumber(unsigned int)>:
    d2f0:	e5801000 	str	r1, [r0]
    d2f4:	e12fff1e 	bx	lr

0000d2f8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)>:
    d2f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    d2fc:	e1a05001 	mov	r5, r1
    d300:	e1a04000 	mov	r4, r0
    d304:	e30017dc 	movw	r1, #2012	@ 0x7dc
    d308:	e24dd010 	sub	sp, sp, #16
    d30c:	e1a07002 	mov	r7, r2
    d310:	e1a06003 	mov	r6, r3
    d314:	e1150001 	tst	r5, r1
    d318:	e5805044 	str	r5, [r0, #68]	@ 0x44
    d31c:	0a00000e 	beq	d35c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x64>
    d320:	e3150010 	tst	r5, #16
    d324:	1a000054 	bne	d47c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x184>
    d328:	e3150080 	tst	r5, #128	@ 0x80
    d32c:	0a000003 	beq	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d330:	e5940018 	ldr	r0, [r4, #24]
    d334:	eb000b3a 	bl	10024 <CUSBEndpoint::GetType() const>
    d338:	e3500001 	cmp	r0, #1
    d33c:	0a000001 	beq	d348 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x50>
    d340:	e28dd010 	add	sp, sp, #16
    d344:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d348:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
    d34c:	e2833001 	add	r3, r3, #1
    d350:	e5843048 	str	r3, [r4, #72]	@ 0x48
    d354:	e3530008 	cmp	r3, #8
    d358:	8afffff8 	bhi	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d35c:	e5945030 	ldr	r5, [r4, #48]	@ 0x30
    d360:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
    d364:	e5d42010 	ldrb	r2, [r4, #16]
    d368:	e0458007 	sub	r8, r5, r7
    d36c:	e0536006 	subs	r6, r3, r6
    d370:	1a00000e 	bne	d3b0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    d374:	e3530000 	cmp	r3, #0
    d378:	0a00000c 	beq	d3b0 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xb8>
    d37c:	e3520000 	cmp	r2, #0
    d380:	0a000002 	beq	d390 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x98>
    d384:	e5d43011 	ldrb	r3, [r4, #17]
    d388:	e3530000 	cmp	r3, #0
    d38c:	1a000052 	bne	d4dc <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1e4>
    d390:	e5940018 	ldr	r0, [r4, #24]
    d394:	e3500000 	cmp	r0, #0
    d398:	0a00006e 	beq	d558 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x260>
    d39c:	eb000b20 	bl	10024 <CUSBEndpoint::GetType() const>
    d3a0:	e3500003 	cmp	r0, #3
    d3a4:	e5d42010 	ldrb	r2, [r4, #16]
    d3a8:	0594602c 	ldreq	r6, [r4, #44]	@ 0x2c
    d3ac:	00060896 	muleq	r6, r6, r8
    d3b0:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
    d3b4:	e3520000 	cmp	r2, #0
    d3b8:	e0833006 	add	r3, r3, r6
    d3bc:	e5843034 	str	r3, [r4, #52]	@ 0x34
    d3c0:	e59430c0 	ldr	r3, [r4, #192]	@ 0xc0
    d3c4:	e0836006 	add	r6, r3, r6
    d3c8:	e58460c0 	str	r6, [r4, #192]	@ 0xc0
    d3cc:	0a00001a 	beq	d43c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    d3d0:	e5d43011 	ldrb	r3, [r4, #17]
    d3d4:	e3530000 	cmp	r3, #0
    d3d8:	1a000017 	bne	d43c <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x144>
    d3dc:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
    d3e0:	e1530008 	cmp	r3, r8
    d3e4:	3a00001b 	bcc	d458 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x160>
    d3e8:	e5d42010 	ldrb	r2, [r4, #16]
    d3ec:	e0833007 	add	r3, r3, r7
    d3f0:	e0433005 	sub	r3, r3, r5
    d3f4:	e5843028 	str	r3, [r4, #40]	@ 0x28
    d3f8:	e3520000 	cmp	r2, #0
    d3fc:	0a00002d 	beq	d4b8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x1c0>
    d400:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
    d404:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
    d408:	e594002c 	ldr	r0, [r4, #44]	@ 0x2c
    d40c:	e0421003 	sub	r1, r2, r3
    d410:	e1510000 	cmp	r1, r0
    d414:	2affffc9 	bcs	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d418:	e1520003 	cmp	r2, r3
    d41c:	2584102c 	strcs	r1, [r4, #44]	@ 0x2c
    d420:	2affffc6 	bcs	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d424:	e30a1698 	movw	r1, #42648	@ 0xa698
    d428:	e3401003 	movt	r1, #3
    d42c:	e30a07b8 	movw	r0, #42936	@ 0xa7b8
    d430:	e3400003 	movt	r0, #3
    d434:	e3002125 	movw	r2, #293	@ 0x125
    d438:	eb007a67 	bl	2bddc <assertion_failed>
    d43c:	e5d42009 	ldrb	r2, [r4, #9]
    d440:	e1a01008 	mov	r1, r8
    d444:	e5940018 	ldr	r0, [r4, #24]
    d448:	eb000b1c 	bl	100c0 <CUSBEndpoint::SkipPID(unsigned int, bool)>
    d44c:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
    d450:	e1530008 	cmp	r3, r8
    d454:	2affffe3 	bcs	d3e8 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xf0>
    d458:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
    d45c:	e3a01009 	mov	r1, #9
    d460:	e3a02000 	mov	r2, #0
    d464:	e5841048 	str	r1, [r4, #72]	@ 0x48
    d468:	e3833c02 	orr	r3, r3, #512	@ 0x200
    d46c:	e5842028 	str	r2, [r4, #40]	@ 0x28
    d470:	e5843044 	str	r3, [r4, #68]	@ 0x44
    d474:	e28dd010 	add	sp, sp, #16
    d478:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    d47c:	e5900004 	ldr	r0, [r0, #4]
    d480:	eb00249d 	bl	166fc <CUSBRequest::IsCompleteOnNAK() const>
    d484:	e3500000 	cmp	r0, #0
    d488:	0affffa6 	beq	d328 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x30>
    d48c:	e5d43008 	ldrb	r3, [r4, #8]
    d490:	e3530000 	cmp	r3, #0
    d494:	13a03000 	movne	r3, #0
    d498:	15843028 	strne	r3, [r4, #40]	@ 0x28
    d49c:	1affffa7 	bne	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d4a0:	e30a1698 	movw	r1, #42648	@ 0xa698
    d4a4:	e3401003 	movt	r1, #3
    d4a8:	e30a07b0 	movw	r0, #42928	@ 0xa7b0
    d4ac:	e3400003 	movt	r0, #3
    d4b0:	e3a020d6 	mov	r2, #214	@ 0xd6
    d4b4:	eb007a48 	bl	2bddc <assertion_failed>
    d4b8:	e5940018 	ldr	r0, [r4, #24]
    d4bc:	e3500000 	cmp	r0, #0
    d4c0:	0a000024 	beq	d558 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x260>
    d4c4:	eb000ad6 	bl	10024 <CUSBEndpoint::GetType() const>
    d4c8:	e3500003 	cmp	r0, #3
    d4cc:	0a00000b 	beq	d500 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x208>
    d4d0:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
    d4d4:	e5843030 	str	r3, [r4, #48]	@ 0x30
    d4d8:	eaffffc8 	b	d400 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x108>
    d4dc:	e5942020 	ldr	r2, [r4, #32]
    d4e0:	e5941034 	ldr	r1, [r4, #52]	@ 0x34
    d4e4:	e0020892 	mul	r2, r2, r8
    d4e8:	e0811002 	add	r1, r1, r2
    d4ec:	e5841034 	str	r1, [r4, #52]	@ 0x34
    d4f0:	e59410c0 	ldr	r1, [r4, #192]	@ 0xc0
    d4f4:	e0812002 	add	r2, r1, r2
    d4f8:	e58420c0 	str	r2, [r4, #192]	@ 0xc0
    d4fc:	eaffffb4 	b	d3d4 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0xdc>
    d500:	e5945038 	ldr	r5, [r4, #56]	@ 0x38
    d504:	e5940004 	ldr	r0, [r4, #4]
    d508:	e2855001 	add	r5, r5, #1
    d50c:	e5845038 	str	r5, [r4, #56]	@ 0x38
    d510:	eb002445 	bl	1662c <CUSBRequest::GetNumIsoPackets() const>
    d514:	e1550000 	cmp	r5, r0
    d518:	2affff88 	bcs	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d51c:	e5941038 	ldr	r1, [r4, #56]	@ 0x38
    d520:	e2844024 	add	r4, r4, #36	@ 0x24
    d524:	e5140020 	ldr	r0, [r4, #-32]	@ 0xffffffe0
    d528:	eb002449 	bl	16654 <CUSBRequest::GetIsoPacketSize(unsigned int) const>
    d52c:	e5142004 	ldr	r2, [r4, #-4]
    d530:	e58d0000 	str	r0, [sp]
    d534:	e2423001 	sub	r3, r2, #1
    d538:	e58d0008 	str	r0, [sp, #8]
    d53c:	e0833000 	add	r3, r3, r0
    d540:	e733f213 	udiv	r3, r3, r2
    d544:	e58d3004 	str	r3, [sp, #4]
    d548:	e58d300c 	str	r3, [sp, #12]
    d54c:	f46d0adf 	vld1.64	{d16-d17}, [sp :64]
    d550:	f4440a8f 	vst1.32	{d16-d17}, [r4]
    d554:	eaffff79 	b	d340 <CDWHCITransferStageData::TransactionComplete(unsigned int, unsigned int, unsigned int)+0x48>
    d558:	e30a1698 	movw	r1, #42648	@ 0xa698
    d55c:	e3401003 	movt	r1, #3
    d560:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d564:	e3400003 	movt	r0, #3
    d568:	e3002155 	movw	r2, #341	@ 0x155
    d56c:	eb007a1a 	bl	2bddc <assertion_failed>

0000d570 <CDWHCITransferStageData::SetSplitComplete(bool)>:
    d570:	e5d03010 	ldrb	r3, [r0, #16]
    d574:	e3530000 	cmp	r3, #0
    d578:	0a000001 	beq	d584 <CDWHCITransferStageData::SetSplitComplete(bool)+0x14>
    d57c:	e5c01011 	strb	r1, [r0, #17]
    d580:	e12fff1e 	bx	lr
    d584:	e30a1698 	movw	r1, #42648	@ 0xa698
    d588:	e3401003 	movt	r1, #3
    d58c:	e30a07e4 	movw	r0, #42980	@ 0xa7e4
    d590:	e3400003 	movt	r0, #3
    d594:	e3a02f4b 	mov	r2, #300	@ 0x12c
    d598:	e92d4010 	push	{r4, lr}
    d59c:	eb007a0e 	bl	2bddc <assertion_failed>

0000d5a0 <CDWHCITransferStageData::SetState(unsigned int)>:
    d5a0:	e580103c 	str	r1, [r0, #60]	@ 0x3c
    d5a4:	e12fff1e 	bx	lr

0000d5a8 <CDWHCITransferStageData::GetState() const>:
    d5a8:	e590003c 	ldr	r0, [r0, #60]	@ 0x3c
    d5ac:	e12fff1e 	bx	lr

0000d5b0 <CDWHCITransferStageData::SetSubState(unsigned int)>:
    d5b0:	e5801040 	str	r1, [r0, #64]	@ 0x40
    d5b4:	e12fff1e 	bx	lr

0000d5b8 <CDWHCITransferStageData::GetSubState() const>:
    d5b8:	e5900040 	ldr	r0, [r0, #64]	@ 0x40
    d5bc:	e12fff1e 	bx	lr

0000d5c0 <CDWHCITransferStageData::GetChannelNumber() const>:
    d5c0:	e5900000 	ldr	r0, [r0]
    d5c4:	e12fff1e 	bx	lr

0000d5c8 <CDWHCITransferStageData::IsPeriodic() const>:
    d5c8:	e5900018 	ldr	r0, [r0, #24]
    d5cc:	e92d4010 	push	{r4, lr}
    d5d0:	e3500000 	cmp	r0, #0
    d5d4:	0a000006 	beq	d5f4 <CDWHCITransferStageData::IsPeriodic() const+0x2c>
    d5d8:	eb000a91 	bl	10024 <CUSBEndpoint::GetType() const>
    d5dc:	e2400002 	sub	r0, r0, #2
    d5e0:	e6ef0070 	uxtb	r0, r0
    d5e4:	e3500001 	cmp	r0, #1
    d5e8:	83a00000 	movhi	r0, #0
    d5ec:	93a00001 	movls	r0, #1
    d5f0:	e8bd8010 	pop	{r4, pc}
    d5f4:	e30a1698 	movw	r1, #42648	@ 0xa698
    d5f8:	e3401003 	movt	r1, #3
    d5fc:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d600:	e3400003 	movt	r0, #3
    d604:	e3a02f53 	mov	r2, #332	@ 0x14c
    d608:	eb0079f3 	bl	2bddc <assertion_failed>

0000d60c <CDWHCITransferStageData::IsIsochronous() const>:
    d60c:	e5900018 	ldr	r0, [r0, #24]
    d610:	e92d4010 	push	{r4, lr}
    d614:	e3500000 	cmp	r0, #0
    d618:	0a000004 	beq	d630 <CDWHCITransferStageData::IsIsochronous() const+0x24>
    d61c:	eb000a80 	bl	10024 <CUSBEndpoint::GetType() const>
    d620:	e2400003 	sub	r0, r0, #3
    d624:	e16f0f10 	clz	r0, r0
    d628:	e1a002a0 	lsr	r0, r0, #5
    d62c:	e8bd8010 	pop	{r4, pc}
    d630:	e30a1698 	movw	r1, #42648	@ 0xa698
    d634:	e3401003 	movt	r1, #3
    d638:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d63c:	e3400003 	movt	r0, #3
    d640:	e3002155 	movw	r2, #341	@ 0x155
    d644:	eb0079e4 	bl	2bddc <assertion_failed>

0000d648 <CDWHCITransferStageData::GetDeviceAddress() const>:
    d648:	e5900014 	ldr	r0, [r0, #20]
    d64c:	e3500000 	cmp	r0, #0
    d650:	0a000000 	beq	d658 <CDWHCITransferStageData::GetDeviceAddress() const+0x10>
    d654:	ea00043c 	b	e74c <CUSBDevice::GetAddress() const>
    d658:	e30a1698 	movw	r1, #42648	@ 0xa698
    d65c:	e3401003 	movt	r1, #3
    d660:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
    d664:	e3400003 	movt	r0, #3
    d668:	e92d4010 	push	{r4, lr}
    d66c:	e300215d 	movw	r2, #349	@ 0x15d
    d670:	eb0079d9 	bl	2bddc <assertion_failed>

0000d674 <CDWHCITransferStageData::GetEndpointType() const>:
    d674:	e5900018 	ldr	r0, [r0, #24]
    d678:	e92d4010 	push	{r4, lr}
    d67c:	e3500000 	cmp	r0, #0
    d680:	0a000006 	beq	d6a0 <CDWHCITransferStageData::GetEndpointType() const+0x2c>
    d684:	eb000a66 	bl	10024 <CUSBEndpoint::GetType() const>
    d688:	e3500003 	cmp	r0, #3
    d68c:	8a000009 	bhi	d6b8 <CDWHCITransferStageData::GetEndpointType() const+0x44>
    d690:	e30e3c34 	movw	r3, #60468	@ 0xec34
    d694:	e3403003 	movt	r3, #3
    d698:	e7d30100 	ldrb	r0, [r3, r0, lsl #2]
    d69c:	e8bd8010 	pop	{r4, pc}
    d6a0:	e30a1698 	movw	r1, #42648	@ 0xa698
    d6a4:	e3401003 	movt	r1, #3
    d6a8:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d6ac:	e3400003 	movt	r0, #3
    d6b0:	e3002163 	movw	r2, #355	@ 0x163
    d6b4:	eb0079c8 	bl	2bddc <assertion_failed>
    d6b8:	e30a1698 	movw	r1, #42648	@ 0xa698
    d6bc:	e3401003 	movt	r1, #3
    d6c0:	e30a093c 	movw	r0, #43324	@ 0xa93c
    d6c4:	e3400003 	movt	r0, #3
    d6c8:	e300217a 	movw	r2, #378	@ 0x17a
    d6cc:	eb0079c2 	bl	2bddc <assertion_failed>

0000d6d0 <CDWHCITransferStageData::GetEndpointNumber() const>:
    d6d0:	e5900018 	ldr	r0, [r0, #24]
    d6d4:	e3500000 	cmp	r0, #0
    d6d8:	0a000000 	beq	d6e0 <CDWHCITransferStageData::GetEndpointNumber() const+0x10>
    d6dc:	ea000a4e 	b	1001c <CUSBEndpoint::GetNumber() const>
    d6e0:	e30a1698 	movw	r1, #42648	@ 0xa698
    d6e4:	e3401003 	movt	r1, #3
    d6e8:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d6ec:	e3400003 	movt	r0, #3
    d6f0:	e92d4010 	push	{r4, lr}
    d6f4:	e3002183 	movw	r2, #387	@ 0x183
    d6f8:	eb0079b7 	bl	2bddc <assertion_failed>

0000d6fc <CDWHCITransferStageData::GetMaxPacketSize() const>:
    d6fc:	e5900020 	ldr	r0, [r0, #32]
    d700:	e12fff1e 	bx	lr

0000d704 <CDWHCITransferStageData::GetSpeed() const>:
    d704:	e5d0001c 	ldrb	r0, [r0, #28]
    d708:	e12fff1e 	bx	lr

0000d70c <CDWHCITransferStageData::GetPID() const>:
    d70c:	e1a03000 	mov	r3, r0
    d710:	e5900018 	ldr	r0, [r0, #24]
    d714:	e92d4010 	push	{r4, lr}
    d718:	e3500000 	cmp	r0, #0
    d71c:	0a000008 	beq	d744 <CDWHCITransferStageData::GetPID() const+0x38>
    d720:	e5d31009 	ldrb	r1, [r3, #9]
    d724:	eb000a55 	bl	10080 <CUSBEndpoint::GetNextPID(bool)>
    d728:	e3500002 	cmp	r0, #2
    d72c:	8a00000a 	bhi	d75c <CDWHCITransferStageData::GetPID() const+0x50>
    d730:	e30e3c34 	movw	r3, #60468	@ 0xec34
    d734:	e3403003 	movt	r3, #3
    d738:	e0833000 	add	r3, r3, r0
    d73c:	e5d30010 	ldrb	r0, [r3, #16]
    d740:	e8bd8010 	pop	{r4, pc}
    d744:	e30a1698 	movw	r1, #42648	@ 0xa698
    d748:	e3401003 	movt	r1, #3
    d74c:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d750:	e3400003 	movt	r0, #3
    d754:	e3002193 	movw	r2, #403	@ 0x193
    d758:	eb00799f 	bl	2bddc <assertion_failed>
    d75c:	e30a1698 	movw	r1, #42648	@ 0xa698
    d760:	e3401003 	movt	r1, #3
    d764:	e30a093c 	movw	r0, #43324	@ 0xa93c
    d768:	e3400003 	movt	r0, #3
    d76c:	e30021a6 	movw	r2, #422	@ 0x1a6
    d770:	eb007999 	bl	2bddc <assertion_failed>

0000d774 <CDWHCITransferStageData::IsDirectionIn() const>:
    d774:	e5d00008 	ldrb	r0, [r0, #8]
    d778:	e12fff1e 	bx	lr

0000d77c <CDWHCITransferStageData::IsStatusStage() const>:
    d77c:	e5d00009 	ldrb	r0, [r0, #9]
    d780:	e12fff1e 	bx	lr

0000d784 <CDWHCITransferStageData::GetDMAAddress() const>:
    d784:	e59000c0 	ldr	r0, [r0, #192]	@ 0xc0
    d788:	e3500000 	cmp	r0, #0
    d78c:	112fff1e 	bxne	lr
    d790:	e30a1698 	movw	r1, #42648	@ 0xa698
    d794:	e3401003 	movt	r1, #3
    d798:	e30a0728 	movw	r0, #42792	@ 0xa728
    d79c:	e3400003 	movt	r0, #3
    d7a0:	e92d4010 	push	{r4, lr}
    d7a4:	e30021b9 	movw	r2, #441	@ 0x1b9
    d7a8:	eb00798b 	bl	2bddc <assertion_failed>

0000d7ac <CDWHCITransferStageData::GetBytesToTransfer() const>:
    d7ac:	e590002c 	ldr	r0, [r0, #44]	@ 0x2c
    d7b0:	e12fff1e 	bx	lr

0000d7b4 <CDWHCITransferStageData::GetPacketsToTransfer() const>:
    d7b4:	e5900030 	ldr	r0, [r0, #48]	@ 0x30
    d7b8:	e12fff1e 	bx	lr

0000d7bc <CDWHCITransferStageData::IsSplit() const>:
    d7bc:	e5d00010 	ldrb	r0, [r0, #16]
    d7c0:	e12fff1e 	bx	lr

0000d7c4 <CDWHCITransferStageData::IsSplitComplete() const>:
    d7c4:	e5d03010 	ldrb	r3, [r0, #16]
    d7c8:	e3530000 	cmp	r3, #0
    d7cc:	0a000001 	beq	d7d8 <CDWHCITransferStageData::IsSplitComplete() const+0x14>
    d7d0:	e5d00011 	ldrb	r0, [r0, #17]
    d7d4:	e12fff1e 	bx	lr
    d7d8:	e30a1698 	movw	r1, #42648	@ 0xa698
    d7dc:	e3401003 	movt	r1, #3
    d7e0:	e30a07e4 	movw	r0, #42980	@ 0xa7e4
    d7e4:	e3400003 	movt	r0, #3
    d7e8:	e92d4010 	push	{r4, lr}
    d7ec:	e30021cf 	movw	r2, #463	@ 0x1cf
    d7f0:	eb007979 	bl	2bddc <assertion_failed>

0000d7f4 <CDWHCITransferStageData::GetHubAddress() const>:
    d7f4:	e5d03010 	ldrb	r3, [r0, #16]
    d7f8:	e92d4010 	push	{r4, lr}
    d7fc:	e3530000 	cmp	r3, #0
    d800:	0a000004 	beq	d818 <CDWHCITransferStageData::GetHubAddress() const+0x24>
    d804:	e5900014 	ldr	r0, [r0, #20]
    d808:	e3500000 	cmp	r0, #0
    d80c:	0a000007 	beq	d830 <CDWHCITransferStageData::GetHubAddress() const+0x3c>
    d810:	e8bd4010 	pop	{r4, lr}
    d814:	ea0003d2 	b	e764 <CUSBDevice::GetHubAddress() const>
    d818:	e30a1698 	movw	r1, #42648	@ 0xa698
    d81c:	e3401003 	movt	r1, #3
    d820:	e30a07e4 	movw	r0, #42980	@ 0xa7e4
    d824:	e3400003 	movt	r0, #3
    d828:	e30021d6 	movw	r2, #470	@ 0x1d6
    d82c:	eb00796a 	bl	2bddc <assertion_failed>
    d830:	e30a1698 	movw	r1, #42648	@ 0xa698
    d834:	e3401003 	movt	r1, #3
    d838:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
    d83c:	e3400003 	movt	r0, #3
    d840:	e3a02f76 	mov	r2, #472	@ 0x1d8
    d844:	eb007964 	bl	2bddc <assertion_failed>

0000d848 <CDWHCITransferStageData::GetHubPortAddress() const>:
    d848:	e5d03010 	ldrb	r3, [r0, #16]
    d84c:	e92d4010 	push	{r4, lr}
    d850:	e3530000 	cmp	r3, #0
    d854:	0a000004 	beq	d86c <CDWHCITransferStageData::GetHubPortAddress() const+0x24>
    d858:	e5900014 	ldr	r0, [r0, #20]
    d85c:	e3500000 	cmp	r0, #0
    d860:	0a000007 	beq	d884 <CDWHCITransferStageData::GetHubPortAddress() const+0x3c>
    d864:	e8bd4010 	pop	{r4, lr}
    d868:	ea0003bf 	b	e76c <CUSBDevice::GetHubPortNumber() const>
    d86c:	e30a1698 	movw	r1, #42648	@ 0xa698
    d870:	e3401003 	movt	r1, #3
    d874:	e30a07e4 	movw	r0, #42980	@ 0xa7e4
    d878:	e3400003 	movt	r0, #3
    d87c:	e30021de 	movw	r2, #478	@ 0x1de
    d880:	eb007955 	bl	2bddc <assertion_failed>
    d884:	e30a1698 	movw	r1, #42648	@ 0xa698
    d888:	e3401003 	movt	r1, #3
    d88c:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
    d890:	e3400003 	movt	r0, #3
    d894:	e3a02e1e 	mov	r2, #480	@ 0x1e0
    d898:	eb00794f 	bl	2bddc <assertion_failed>

0000d89c <CDWHCITransferStageData::GetSplitPosition() const>:
    d89c:	e5d03010 	ldrb	r3, [r0, #16]
    d8a0:	e3530000 	cmp	r3, #0
    d8a4:	1a000001 	bne	d8b0 <CDWHCITransferStageData::GetSplitPosition() const+0x14>
    d8a8:	e3a00003 	mov	r0, #3
    d8ac:	e12fff1e 	bx	lr
    d8b0:	e92d4010 	push	{r4, lr}
    d8b4:	e1a04000 	mov	r4, r0
    d8b8:	e5900018 	ldr	r0, [r0, #24]
    d8bc:	e3500000 	cmp	r0, #0
    d8c0:	0a00000f 	beq	d904 <CDWHCITransferStageData::GetSplitPosition() const+0x68>
    d8c4:	eb0009d6 	bl	10024 <CUSBEndpoint::GetType() const>
    d8c8:	e3500003 	cmp	r0, #3
    d8cc:	1a00000a 	bne	d8fc <CDWHCITransferStageData::GetSplitPosition() const+0x60>
    d8d0:	e5943024 	ldr	r3, [r4, #36]	@ 0x24
    d8d4:	e35300bc 	cmp	r3, #188	@ 0xbc
    d8d8:	9a000007 	bls	d8fc <CDWHCITransferStageData::GetSplitPosition() const+0x60>
    d8dc:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
    d8e0:	e3530000 	cmp	r3, #0
    d8e4:	0a00000c 	beq	d91c <CDWHCITransferStageData::GetSplitPosition() const+0x80>
    d8e8:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
    d8ec:	e3500001 	cmp	r0, #1
    d8f0:	83a00000 	movhi	r0, #0
    d8f4:	93a00001 	movls	r0, #1
    d8f8:	e8bd8010 	pop	{r4, pc}
    d8fc:	e3a00003 	mov	r0, #3
    d900:	e8bd8010 	pop	{r4, pc}
    d904:	e30a1698 	movw	r1, #42648	@ 0xa698
    d908:	e3401003 	movt	r1, #3
    d90c:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d910:	e3400003 	movt	r0, #3
    d914:	e3002155 	movw	r2, #341	@ 0x155
    d918:	eb00792f 	bl	2bddc <assertion_failed>
    d91c:	e3a00002 	mov	r0, #2
    d920:	e8bd8010 	pop	{r4, pc}

0000d924 <CDWHCITransferStageData::GetStatusMask() const>:
    d924:	e5d03010 	ldrb	r3, [r0, #16]
    d928:	e3530000 	cmp	r3, #0
    d92c:	0a000001 	beq	d938 <CDWHCITransferStageData::GetStatusMask() const+0x14>
    d930:	e30007ff 	movw	r0, #2047	@ 0x7ff
    d934:	e12fff1e 	bx	lr
    d938:	e5900018 	ldr	r0, [r0, #24]
    d93c:	e92d4010 	push	{r4, lr}
    d940:	e3500000 	cmp	r0, #0
    d944:	0a000006 	beq	d964 <CDWHCITransferStageData::GetStatusMask() const+0x40>
    d948:	eb0009b5 	bl	10024 <CUSBEndpoint::GetType() const>
    d94c:	e2400002 	sub	r0, r0, #2
    d950:	e6ef0070 	uxtb	r0, r0
    d954:	e3500001 	cmp	r0, #1
    d958:	930007ff 	movwls	r0, #2047	@ 0x7ff
    d95c:	8300078f 	movwhi	r0, #1935	@ 0x78f
    d960:	e8bd8010 	pop	{r4, pc}
    d964:	e30a1698 	movw	r1, #42648	@ 0xa698
    d968:	e3401003 	movt	r1, #3
    d96c:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
    d970:	e3400003 	movt	r0, #3
    d974:	e3a02f53 	mov	r2, #332	@ 0x14c
    d978:	eb007917 	bl	2bddc <assertion_failed>

0000d97c <CDWHCITransferStageData::GetTransactionStatus() const>:
    d97c:	e5900044 	ldr	r0, [r0, #68]	@ 0x44
    d980:	e3500000 	cmp	r0, #0
    d984:	112fff1e 	bxne	lr
    d988:	e30a1698 	movw	r1, #42648	@ 0xa698
    d98c:	e3401003 	movt	r1, #3
    d990:	e30a07f8 	movw	r0, #43000	@ 0xa7f8
    d994:	e3400003 	movt	r0, #3
    d998:	e92d4010 	push	{r4, lr}
    d99c:	e300220f 	movw	r2, #527	@ 0x20f
    d9a0:	eb00790d 	bl	2bddc <assertion_failed>

0000d9a4 <CDWHCITransferStageData::GetUSBError() const>:
    d9a4:	e5903044 	ldr	r3, [r0, #68]	@ 0x44
    d9a8:	e3130008 	tst	r3, #8
    d9ac:	1a00000d 	bne	d9e8 <CDWHCITransferStageData::GetUSBError() const+0x44>
    d9b0:	e3130080 	tst	r3, #128	@ 0x80
    d9b4:	1a000009 	bne	d9e0 <CDWHCITransferStageData::GetUSBError() const+0x3c>
    d9b8:	e3130c01 	tst	r3, #256	@ 0x100
    d9bc:	1a00000b 	bne	d9f0 <CDWHCITransferStageData::GetUSBError() const+0x4c>
    d9c0:	e3130c02 	tst	r3, #512	@ 0x200
    d9c4:	1a00000b 	bne	d9f8 <CDWHCITransferStageData::GetUSBError() const+0x54>
    d9c8:	e3130b01 	tst	r3, #1024	@ 0x400
    d9cc:	1a00000b 	bne	da00 <CDWHCITransferStageData::GetUSBError() const+0x5c>
    d9d0:	e3130004 	tst	r3, #4
    d9d4:	13a00005 	movne	r0, #5
    d9d8:	03a00009 	moveq	r0, #9
    d9dc:	e12fff1e 	bx	lr
    d9e0:	e3a00001 	mov	r0, #1
    d9e4:	e12fff1e 	bx	lr
    d9e8:	e3a00000 	mov	r0, #0
    d9ec:	e12fff1e 	bx	lr
    d9f0:	e3a00002 	mov	r0, #2
    d9f4:	e12fff1e 	bx	lr
    d9f8:	e3a00003 	mov	r0, #3
    d9fc:	e12fff1e 	bx	lr
    da00:	e3a00004 	mov	r0, #4
    da04:	e12fff1e 	bx	lr

0000da08 <CDWHCITransferStageData::IsStageComplete() const>:
    da08:	e5900028 	ldr	r0, [r0, #40]	@ 0x28
    da0c:	e16f0f10 	clz	r0, r0
    da10:	e1a002a0 	lsr	r0, r0, #5
    da14:	e12fff1e 	bx	lr

0000da18 <CDWHCITransferStageData::GetResultLen() const>:
    da18:	e5902034 	ldr	r2, [r0, #52]	@ 0x34
    da1c:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
    da20:	e1520000 	cmp	r2, r0
    da24:	31a00002 	movcc	r0, r2
    da28:	e12fff1e 	bx	lr

0000da2c <CDWHCITransferStageData::IsTimeout() const>:
    da2c:	e92d4010 	push	{r4, lr}
    da30:	e1a04000 	mov	r4, r0
    da34:	e590000c 	ldr	r0, [r0, #12]
    da38:	e3500000 	cmp	r0, #0
    da3c:	08bd8010 	popeq	{r4, pc}
    da40:	eb009d7c 	bl	35038 <CTimer::Get()>
    da44:	eb009aa9 	bl	344f0 <CTimer::GetTicks() const>
    da48:	e59420c4 	ldr	r2, [r4, #196]	@ 0xc4
    da4c:	e594300c 	ldr	r3, [r4, #12]
    da50:	e0400002 	sub	r0, r0, r2
    da54:	e1500003 	cmp	r0, r3
    da58:	33a00000 	movcc	r0, #0
    da5c:	23a00001 	movcs	r0, #1
    da60:	e8bd8010 	pop	{r4, pc}

0000da64 <CDWHCITransferStageData::IsRetryOK() const>:
    da64:	e5900048 	ldr	r0, [r0, #72]	@ 0x48
    da68:	e3500008 	cmp	r0, #8
    da6c:	83a00000 	movhi	r0, #0
    da70:	93a00001 	movls	r0, #1
    da74:	e12fff1e 	bx	lr

0000da78 <CDWHCITransferStageData::GetURB() const>:
    da78:	e5900004 	ldr	r0, [r0, #4]
    da7c:	e3500000 	cmp	r0, #0
    da80:	112fff1e 	bxne	lr
    da84:	e30a1698 	movw	r1, #42648	@ 0xa698
    da88:	e3401003 	movt	r1, #3
    da8c:	e30a06b0 	movw	r0, #42672	@ 0xa6b0
    da90:	e3400003 	movt	r0, #3
    da94:	e92d4010 	push	{r4, lr}
    da98:	e3002256 	movw	r2, #598	@ 0x256
    da9c:	eb0078ce 	bl	2bddc <assertion_failed>

0000daa0 <CDWHCITransferStageData::GetDevice() const>:
    daa0:	e5900014 	ldr	r0, [r0, #20]
    daa4:	e3500000 	cmp	r0, #0
    daa8:	112fff1e 	bxne	lr
    daac:	e30a1698 	movw	r1, #42648	@ 0xa698
    dab0:	e3401003 	movt	r1, #3
    dab4:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
    dab8:	e3400003 	movt	r0, #3
    dabc:	e3a02f97 	mov	r2, #604	@ 0x25c
    dac0:	e92d4010 	push	{r4, lr}
    dac4:	eb0078c4 	bl	2bddc <assertion_failed>

0000dac8 <CDWHCITransferStageData::GetFrameScheduler() const>:
    dac8:	e59000c8 	ldr	r0, [r0, #200]	@ 0xc8
    dacc:	e12fff1e 	bx	lr

0000dad0 <CDWHCITransferStageData::operator new(unsigned int)>:
    dad0:	e3500c01 	cmp	r0, #256	@ 0x100
    dad4:	e92d4010 	push	{r4, lr}
    dad8:	1a000006 	bne	daf8 <CDWHCITransferStageData::operator new(unsigned int)+0x28>
    dadc:	e3043070 	movw	r3, #16496	@ 0x4070
    dae0:	e3403004 	movt	r3, #4
    dae4:	e5930000 	ldr	r0, [r3]
    dae8:	e3500000 	cmp	r0, #0
    daec:	0a000007 	beq	db10 <CDWHCITransferStageData::operator new(unsigned int)+0x40>
    daf0:	e8bd4010 	pop	{r4, lr}
    daf4:	ea007a01 	b	2c300 <CClassAllocator::Allocate()>
    daf8:	e30a1698 	movw	r1, #42648	@ 0xa698
    dafc:	e3401003 	movt	r1, #3
    db00:	e30a0814 	movw	r0, #43028	@ 0xa814
    db04:	e3400003 	movt	r0, #3
    db08:	e3002265 	movw	r2, #613	@ 0x265
    db0c:	eb0078b2 	bl	2bddc <assertion_failed>
    db10:	e30a1698 	movw	r1, #42648	@ 0xa698
    db14:	e3401003 	movt	r1, #3
    db18:	e30a0354 	movw	r0, #41812	@ 0xa354
    db1c:	e3400003 	movt	r0, #3
    db20:	e3002265 	movw	r2, #613	@ 0x265
    db24:	eb0078ac 	bl	2bddc <assertion_failed>

0000db28 <CDWHCITransferStageData::operator delete(void*, unsigned int)>:
    db28:	e3510c01 	cmp	r1, #256	@ 0x100
    db2c:	e92d4010 	push	{r4, lr}
    db30:	1a000008 	bne	db58 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x30>
    db34:	e3042070 	movw	r2, #16496	@ 0x4070
    db38:	e3402004 	movt	r2, #4
    db3c:	e1a03000 	mov	r3, r0
    db40:	e5920000 	ldr	r0, [r2]
    db44:	e3500000 	cmp	r0, #0
    db48:	0a000008 	beq	db70 <CDWHCITransferStageData::operator delete(void*, unsigned int)+0x48>
    db4c:	e8bd4010 	pop	{r4, lr}
    db50:	e1a01003 	mov	r1, r3
    db54:	ea007a24 	b	2c3ec <CClassAllocator::Free(void*)>
    db58:	e30a1698 	movw	r1, #42648	@ 0xa698
    db5c:	e3401003 	movt	r1, #3
    db60:	e30a0814 	movw	r0, #43028	@ 0xa814
    db64:	e3400003 	movt	r0, #3
    db68:	e3002265 	movw	r2, #613	@ 0x265
    db6c:	eb00789a 	bl	2bddc <assertion_failed>
    db70:	e30a1698 	movw	r1, #42648	@ 0xa698
    db74:	e3401003 	movt	r1, #3
    db78:	e30a0354 	movw	r0, #41812	@ 0xa354
    db7c:	e3400003 	movt	r0, #3
    db80:	e3002265 	movw	r2, #613	@ 0x265
    db84:	eb007894 	bl	2bddc <assertion_failed>

0000db88 <CDWHCITransferStageData::InitAllocator(unsigned int)>:
    db88:	e92d4070 	push	{r4, r5, r6, lr}
    db8c:	e3044070 	movw	r4, #16496	@ 0x4070
    db90:	e3404004 	movt	r4, #4
    db94:	e5943000 	ldr	r3, [r4]
    db98:	e3530000 	cmp	r3, #0
    db9c:	1a00000a 	bne	dbcc <CDWHCITransferStageData::InitAllocator(unsigned int)+0x44>
    dba0:	e1a05000 	mov	r5, r0
    dba4:	e3a00020 	mov	r0, #32
    dba8:	eb00a15d 	bl	36124 <operator new(unsigned int)>
    dbac:	e1a02005 	mov	r2, r5
    dbb0:	e3a01c01 	mov	r1, #256	@ 0x100
    dbb4:	e30a3840 	movw	r3, #43072	@ 0xa840
    dbb8:	e3403003 	movt	r3, #3
    dbbc:	e1a05000 	mov	r5, r0
    dbc0:	eb007970 	bl	2c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    dbc4:	e5845000 	str	r5, [r4]
    dbc8:	e8bd8070 	pop	{r4, r5, r6, pc}
    dbcc:	e30a1698 	movw	r1, #42648	@ 0xa698
    dbd0:	e3401003 	movt	r1, #3
    dbd4:	e30a039c 	movw	r0, #41884	@ 0xa39c
    dbd8:	e3400003 	movt	r0, #3
    dbdc:	e3002265 	movw	r2, #613	@ 0x265
    dbe0:	eb00787d 	bl	2bddc <assertion_failed>

0000dbe4 <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)>:
    dbe4:	e92d4070 	push	{r4, r5, r6, lr}
    dbe8:	e3044070 	movw	r4, #16496	@ 0x4070
    dbec:	e3404004 	movt	r4, #4
    dbf0:	e1a05000 	mov	r5, r0
    dbf4:	e24dd008 	sub	sp, sp, #8
    dbf8:	e1a06001 	mov	r6, r1
    dbfc:	e5940000 	ldr	r0, [r4]
    dc00:	e3500000 	cmp	r0, #0
    dc04:	0a000004 	beq	dc1c <CDWHCITransferStageData::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    dc08:	e1a02001 	mov	r2, r1
    dc0c:	e1a01005 	mov	r1, r5
    dc10:	e28dd008 	add	sp, sp, #8
    dc14:	e8bd4070 	pop	{r4, r5, r6, lr}
    dc18:	ea007974 	b	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
    dc1c:	e3a00020 	mov	r0, #32
    dc20:	eb00a13f 	bl	36124 <operator new(unsigned int)>
    dc24:	e1a02005 	mov	r2, r5
    dc28:	e1a03006 	mov	r3, r6
    dc2c:	e3a01c01 	mov	r1, #256	@ 0x100
    dc30:	e30ac840 	movw	ip, #43072	@ 0xa840
    dc34:	e340c003 	movt	ip, #3
    dc38:	e58dc000 	str	ip, [sp]
    dc3c:	e1a05000 	mov	r5, r0
    dc40:	eb00795c 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    dc44:	e5845000 	str	r5, [r4]
    dc48:	e28dd008 	add	sp, sp, #8
    dc4c:	e8bd8070 	pop	{r4, r5, r6, pc}

0000dc50 <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()>:
    dc50:	e12fff1e 	bx	lr

0000dc54 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()>:
    dc54:	e5903008 	ldr	r3, [r0, #8]
    dc58:	e92d4010 	push	{r4, lr}
    dc5c:	e3530005 	cmp	r3, #5
    dc60:	0a000013 	beq	dcb4 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x60>
    dc64:	8a00000d 	bhi	dca0 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x4c>
    dc68:	e3530002 	cmp	r3, #2
    dc6c:	1a000025 	bne	dd08 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0xb4>
    dc70:	e1d011b0 	ldrh	r1, [r0, #16]
    dc74:	e3a0c004 	mov	ip, #4
    dc78:	e3a02000 	mov	r2, #0
    dc7c:	e1c030bc 	strh	r3, [r0, #12]
    dc80:	e3510901 	cmp	r1, #16384	@ 0x4000
    dc84:	e580c008 	str	ip, [r0, #8]
    dc88:	13a03001 	movne	r3, #1
    dc8c:	e5c0200e 	strb	r2, [r0, #14]
    dc90:	15803014 	strne	r3, [r0, #20]
    dc94:	0a000015 	beq	dcf0 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x9c>
    dc98:	e3a00001 	mov	r0, #1
    dc9c:	e8bd8010 	pop	{r4, pc}
    dca0:	e2433006 	sub	r3, r3, #6
    dca4:	e3530001 	cmp	r3, #1
    dca8:	8a000016 	bhi	dd08 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0xb4>
    dcac:	e3a00000 	mov	r0, #0
    dcb0:	e8bd8010 	pop	{r4, pc}
    dcb4:	e1d0c1b0 	ldrh	ip, [r0, #16]
    dcb8:	e3a01004 	mov	r1, #4
    dcbc:	e3a02002 	mov	r2, #2
    dcc0:	e3a03000 	mov	r3, #0
    dcc4:	e35c0901 	cmp	ip, #16384	@ 0x4000
    dcc8:	e5801008 	str	r1, [r0, #8]
    dccc:	e1c020bc 	strh	r2, [r0, #12]
    dcd0:	e5c0300e 	strb	r3, [r0, #14]
    dcd4:	1affffef 	bne	dc98 <CDWHCIFrameSchedulerIsochronous::CompleteSplit()+0x44>
    dcd8:	e30a1858 	movw	r1, #43096	@ 0xa858
    dcdc:	e3401003 	movt	r1, #3
    dce0:	e30a0450 	movw	r0, #42064	@ 0xa450
    dce4:	e3400003 	movt	r0, #3
    dce8:	e3a0206e 	mov	r2, #110	@ 0x6e
    dcec:	eb00783a 	bl	2bddc <assertion_failed>
    dcf0:	e30a1858 	movw	r1, #43096	@ 0xa858
    dcf4:	e3401003 	movt	r1, #3
    dcf8:	e30a0450 	movw	r0, #42064	@ 0xa450
    dcfc:	e3400003 	movt	r0, #3
    dd00:	e3a02061 	mov	r2, #97	@ 0x61
    dd04:	eb007834 	bl	2bddc <assertion_failed>
    dd08:	e30a1858 	movw	r1, #43096	@ 0xa858
    dd0c:	e3401003 	movt	r1, #3
    dd10:	e30a093c 	movw	r0, #43324	@ 0xa93c
    dd14:	e3400003 	movt	r0, #3
    dd18:	e3a02073 	mov	r2, #115	@ 0x73
    dd1c:	eb00782e 	bl	2bddc <assertion_failed>

0000dd20 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)>:
    dd20:	e5903008 	ldr	r3, [r0, #8]
    dd24:	e92d4010 	push	{r4, lr}
    dd28:	e3530004 	cmp	r3, #4
    dd2c:	0a00000d 	beq	dd68 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x48>
    dd30:	8a000001 	bhi	dd3c <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x1c>
    dd34:	e3d33002 	bics	r3, r3, #2
    dd38:	1a000005 	bne	dd54 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x34>
    dd3c:	e30a1858 	movw	r1, #43096	@ 0xa858
    dd40:	e3401003 	movt	r1, #3
    dd44:	e30a093c 	movw	r0, #43324	@ 0xa93c
    dd48:	e3400003 	movt	r0, #3
    dd4c:	e3a0209c 	mov	r2, #156	@ 0x9c
    dd50:	eb007821 	bl	2bddc <assertion_failed>
    dd54:	e3110020 	tst	r1, #32
    dd58:	13a03002 	movne	r3, #2
    dd5c:	0a000018 	beq	ddc4 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0xa4>
    dd60:	e5803008 	str	r3, [r0, #8]
    dd64:	e8bd8010 	pop	{r4, pc}
    dd68:	e3110010 	tst	r1, #16
    dd6c:	1a00000e 	bne	ddac <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x8c>
    dd70:	e3110001 	tst	r1, #1
    dd74:	1a000009 	bne	dda0 <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0x80>
    dd78:	e3110040 	tst	r1, #64	@ 0x40
    dd7c:	0a000016 	beq	dddc <CDWHCIFrameSchedulerIsochronous::TransactionComplete(unsigned int)+0xbc>
    dd80:	e5903014 	ldr	r3, [r0, #20]
    dd84:	e2433001 	sub	r3, r3, #1
    dd88:	e5803014 	str	r3, [r0, #20]
    dd8c:	e3530000 	cmp	r3, #0
    dd90:	13a03005 	movne	r3, #5
    dd94:	03a03007 	moveq	r3, #7
    dd98:	e5803008 	str	r3, [r0, #8]
    dd9c:	e8bd8010 	pop	{r4, pc}
    dda0:	e3a03006 	mov	r3, #6
    dda4:	e5803008 	str	r3, [r0, #8]
    dda8:	e8bd8010 	pop	{r4, pc}
    ddac:	e30a1858 	movw	r1, #43096	@ 0xa858
    ddb0:	e3401003 	movt	r1, #3
    ddb4:	e30a0870 	movw	r0, #43120	@ 0xa870
    ddb8:	e3400003 	movt	r0, #3
    ddbc:	e3a02085 	mov	r2, #133	@ 0x85
    ddc0:	eb007805 	bl	2bddc <assertion_failed>
    ddc4:	e30a1858 	movw	r1, #43096	@ 0xa858
    ddc8:	e3401003 	movt	r1, #3
    ddcc:	e30a0300 	movw	r0, #41728	@ 0xa300
    ddd0:	e3400003 	movt	r0, #3
    ddd4:	e3a02080 	mov	r2, #128	@ 0x80
    ddd8:	eb0077ff 	bl	2bddc <assertion_failed>
    dddc:	e30a1858 	movw	r1, #43096	@ 0xa858
    dde0:	e3401003 	movt	r1, #3
    dde4:	e30a093c 	movw	r0, #43324	@ 0xa93c
    dde8:	e3400003 	movt	r0, #3
    ddec:	e3a02097 	mov	r2, #151	@ 0x97
    ddf0:	eb0077f9 	bl	2bddc <assertion_failed>

0000ddf4 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()>:
    ddf4:	e92d4030 	push	{r4, r5, lr}
    ddf8:	e1a04000 	mov	r4, r0
    ddfc:	e3001408 	movw	r1, #1032	@ 0x408
    de00:	e3431f98 	movt	r1, #16280	@ 0x3f98
    de04:	e24dd014 	sub	sp, sp, #20
    de08:	e28d0004 	add	r0, sp, #4
    de0c:	eb0031ce 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    de10:	e28d0004 	add	r0, sp, #4
    de14:	eb0031d6 	bl	1a574 <CDWHCIRegister::Read()>
    de18:	e1d430bc 	ldrh	r3, [r4, #12]
    de1c:	e3530901 	cmp	r3, #16384	@ 0x4000
    de20:	0a000013 	beq	de74 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()+0x80>
    de24:	e6ff0070 	uxth	r0, r0
    de28:	e5d4200e 	ldrb	r2, [r4, #14]
    de2c:	e0833000 	add	r3, r3, r0
    de30:	e3520000 	cmp	r2, #0
    de34:	e7ed5053 	ubfx	r5, r3, #0, #14
    de38:	e6ff3073 	uxth	r3, r3
    de3c:	e1c451b0 	strh	r5, [r4, #16]
    de40:	0a000006 	beq	de60 <CDWHCIFrameSchedulerIsochronous::GetFrameNumber()+0x6c>
    de44:	e5d42004 	ldrb	r2, [r4, #4]
    de48:	e3035ff8 	movw	r5, #16376	@ 0x3ff8
    de4c:	e0055003 	and	r5, r5, r3
    de50:	e1c451b0 	strh	r5, [r4, #16]
    de54:	e3520000 	cmp	r2, #0
    de58:	12855004 	addne	r5, r5, #4
    de5c:	11c451b0 	strhne	r5, [r4, #16]
    de60:	e28d0004 	add	r0, sp, #4
    de64:	eb0031c1 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    de68:	e1a00005 	mov	r0, r5
    de6c:	e28dd014 	add	sp, sp, #20
    de70:	e8bd8030 	pop	{r4, r5, pc}
    de74:	e30a1858 	movw	r1, #43096	@ 0xa858
    de78:	e3401003 	movt	r1, #3
    de7c:	e30a0470 	movw	r0, #42096	@ 0xa470
    de80:	e3400003 	movt	r0, #3
    de84:	e3a020af 	mov	r2, #175	@ 0xaf
    de88:	eb0077d3 	bl	2bddc <assertion_failed>

0000de8c <CDWHCIFrameSchedulerIsochronous::IsOddFrame() const>:
    de8c:	e92d4010 	push	{r4, lr}
    de90:	e3001408 	movw	r1, #1032	@ 0x408
    de94:	e3431f98 	movt	r1, #16280	@ 0x3f98
    de98:	e24dd010 	sub	sp, sp, #16
    de9c:	e28d0004 	add	r0, sp, #4
    dea0:	eb0031a9 	bl	1a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>
    dea4:	e28d0004 	add	r0, sp, #4
    dea8:	eb0031b1 	bl	1a574 <CDWHCIRegister::Read()>
    deac:	e1a04000 	mov	r4, r0
    deb0:	e28d0004 	add	r0, sp, #4
    deb4:	eb0031ad 	bl	1a570 <CDWHCIRegister::~CDWHCIRegister()>
    deb8:	e2040001 	and	r0, r4, #1
    debc:	e28dd010 	add	sp, sp, #16
    dec0:	e8bd8010 	pop	{r4, pc}

0000dec4 <CDWHCIFrameSchedulerIsochronous::StartSplit()>:
    dec4:	e5903008 	ldr	r3, [r0, #8]
    dec8:	e3530002 	cmp	r3, #2
    decc:	0a00001d 	beq	df48 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0x84>
    ded0:	e3530007 	cmp	r3, #7
    ded4:	0a000009 	beq	df00 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0x3c>
    ded8:	e3530000 	cmp	r3, #0
    dedc:	112fff1e 	bxne	lr
    dee0:	e3a03001 	mov	r3, #1
    dee4:	e3a01008 	mov	r1, #8
    dee8:	e3a02901 	mov	r2, #16384	@ 0x4000
    deec:	e5803008 	str	r3, [r0, #8]
    def0:	e1c010bc 	strh	r1, [r0, #12]
    def4:	e5c0300e 	strb	r3, [r0, #14]
    def8:	e1c021b0 	strh	r2, [r0, #16]
    defc:	e12fff1e 	bx	lr
    df00:	e1d030bc 	ldrh	r3, [r0, #12]
    df04:	e3a02001 	mov	r2, #1
    df08:	e92d4010 	push	{r4, lr}
    df0c:	e3530901 	cmp	r3, #16384	@ 0x4000
    df10:	e5802008 	str	r2, [r0, #8]
    df14:	0a000014 	beq	df6c <CDWHCIFrameSchedulerIsochronous::StartSplit()+0xa8>
    df18:	e5d0300e 	ldrb	r3, [r0, #14]
    df1c:	e3530000 	cmp	r3, #0
    df20:	0a000017 	beq	df84 <CDWHCIFrameSchedulerIsochronous::StartSplit()+0xc0>
    df24:	e1d031b0 	ldrh	r3, [r0, #16]
    df28:	e3530901 	cmp	r3, #16384	@ 0x4000
    df2c:	18bd8010 	popne	{r4, pc}
    df30:	e30a1858 	movw	r1, #43096	@ 0xa858
    df34:	e3401003 	movt	r1, #3
    df38:	e30a0450 	movw	r0, #42064	@ 0xa450
    df3c:	e3400003 	movt	r0, #3
    df40:	e3a0204f 	mov	r2, #79	@ 0x4f
    df44:	eb0077a4 	bl	2bddc <assertion_failed>
    df48:	e3a0c003 	mov	ip, #3
    df4c:	e3a01001 	mov	r1, #1
    df50:	e3a02000 	mov	r2, #0
    df54:	e3a03901 	mov	r3, #16384	@ 0x4000
    df58:	e580c008 	str	ip, [r0, #8]
    df5c:	e1c010bc 	strh	r1, [r0, #12]
    df60:	e5c0200e 	strb	r2, [r0, #14]
    df64:	e1c031b0 	strh	r3, [r0, #16]
    df68:	e12fff1e 	bx	lr
    df6c:	e30a1858 	movw	r1, #43096	@ 0xa858
    df70:	e3401003 	movt	r1, #3
    df74:	e30a0470 	movw	r0, #42096	@ 0xa470
    df78:	e3400003 	movt	r0, #3
    df7c:	e3a0204d 	mov	r2, #77	@ 0x4d
    df80:	eb007795 	bl	2bddc <assertion_failed>
    df84:	e30a1858 	movw	r1, #43096	@ 0xa858
    df88:	e3401003 	movt	r1, #3
    df8c:	e30a0898 	movw	r0, #43160	@ 0xa898
    df90:	e3400003 	movt	r0, #3
    df94:	e3a0204e 	mov	r2, #78	@ 0x4e
    df98:	eb00778f 	bl	2bddc <assertion_failed>

0000df9c <CDWHCIFrameSchedulerIsochronous::PeriodicDelay(unsigned short)>:
    df9c:	e5903008 	ldr	r3, [r0, #8]
    dfa0:	e3530007 	cmp	r3, #7
    dfa4:	1a000005 	bne	dfc0 <CDWHCIFrameSchedulerIsochronous::PeriodicDelay(unsigned short)+0x24>
    dfa8:	e3a02001 	mov	r2, #1
    dfac:	e3a03901 	mov	r3, #16384	@ 0x4000
    dfb0:	e1c010bc 	strh	r1, [r0, #12]
    dfb4:	e5c0200e 	strb	r2, [r0, #14]
    dfb8:	e1c031b0 	strh	r3, [r0, #16]
    dfbc:	e12fff1e 	bx	lr
    dfc0:	e30a1858 	movw	r1, #43096	@ 0xa858
    dfc4:	e3401003 	movt	r1, #3
    dfc8:	e30a08a8 	movw	r0, #43176	@ 0xa8a8
    dfcc:	e3400003 	movt	r0, #3
    dfd0:	e3a020c1 	mov	r2, #193	@ 0xc1
    dfd4:	e92d4010 	push	{r4, lr}
    dfd8:	eb00777f 	bl	2bddc <assertion_failed>

0000dfdc <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()>:
    dfdc:	e3043074 	movw	r3, #16500	@ 0x4074
    dfe0:	e3403004 	movt	r3, #4
    dfe4:	e92d4010 	push	{r4, lr}
    dfe8:	e1a04000 	mov	r4, r0
    dfec:	e5930000 	ldr	r0, [r3]
    dff0:	e3500000 	cmp	r0, #0
    dff4:	0a000003 	beq	e008 <CDWHCIFrameSchedulerIsochronous::~CDWHCIFrameSchedulerIsochronous()+0x2c>
    dff8:	e1a01004 	mov	r1, r4
    dffc:	eb0078fa 	bl	2c3ec <CClassAllocator::Free(void*)>
    e000:	e1a00004 	mov	r0, r4
    e004:	e8bd8010 	pop	{r4, pc}
    e008:	e30a1858 	movw	r1, #43096	@ 0xa858
    e00c:	e3401003 	movt	r1, #3
    e010:	e30a0354 	movw	r0, #41812	@ 0xa354
    e014:	e3400003 	movt	r0, #3
    e018:	e3a020d0 	mov	r2, #208	@ 0xd0
    e01c:	eb00776e 	bl	2bddc <assertion_failed>

0000e020 <CDWHCIFrameSchedulerIsochronous::CDWHCIFrameSchedulerIsochronous(bool)>:
    e020:	e59f2020 	ldr	r2, [pc, #32]	@ e048 <CDWHCIFrameSchedulerIsochronous::CDWHCIFrameSchedulerIsochronous(bool)+0x28>
    e024:	e3a0c000 	mov	ip, #0
    e028:	e5802000 	str	r2, [r0]
    e02c:	e3a02901 	mov	r2, #16384	@ 0x4000
    e030:	e5c01004 	strb	r1, [r0, #4]
    e034:	e580c008 	str	ip, [r0, #8]
    e038:	e1c020bc 	strh	r2, [r0, #12]
    e03c:	e5c0c00e 	strb	ip, [r0, #14]
    e040:	e1c021b0 	strh	r2, [r0, #16]
    e044:	e12fff1e 	bx	lr
    e048:	0003ec50 	.word	0x0003ec50

0000e04c <CDWHCIFrameSchedulerIsochronous::operator new(unsigned int)>:
    e04c:	e3500018 	cmp	r0, #24
    e050:	e92d4010 	push	{r4, lr}
    e054:	1a000006 	bne	e074 <CDWHCIFrameSchedulerIsochronous::operator new(unsigned int)+0x28>
    e058:	e3043074 	movw	r3, #16500	@ 0x4074
    e05c:	e3403004 	movt	r3, #4
    e060:	e5930000 	ldr	r0, [r3]
    e064:	e3500000 	cmp	r0, #0
    e068:	0a000007 	beq	e08c <CDWHCIFrameSchedulerIsochronous::operator new(unsigned int)+0x40>
    e06c:	e8bd4010 	pop	{r4, lr}
    e070:	ea0078a2 	b	2c300 <CClassAllocator::Allocate()>
    e074:	e30a1858 	movw	r1, #43096	@ 0xa858
    e078:	e3401003 	movt	r1, #3
    e07c:	e30a08c8 	movw	r0, #43208	@ 0xa8c8
    e080:	e3400003 	movt	r0, #3
    e084:	e3a020d0 	mov	r2, #208	@ 0xd0
    e088:	eb007753 	bl	2bddc <assertion_failed>
    e08c:	e30a1858 	movw	r1, #43096	@ 0xa858
    e090:	e3401003 	movt	r1, #3
    e094:	e30a0354 	movw	r0, #41812	@ 0xa354
    e098:	e3400003 	movt	r0, #3
    e09c:	e3a020d0 	mov	r2, #208	@ 0xd0
    e0a0:	eb00774d 	bl	2bddc <assertion_failed>

0000e0a4 <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned int)>:
    e0a4:	e3510018 	cmp	r1, #24
    e0a8:	e92d4010 	push	{r4, lr}
    e0ac:	1a000008 	bne	e0d4 <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned int)+0x30>
    e0b0:	e3042074 	movw	r2, #16500	@ 0x4074
    e0b4:	e3402004 	movt	r2, #4
    e0b8:	e1a03000 	mov	r3, r0
    e0bc:	e5920000 	ldr	r0, [r2]
    e0c0:	e3500000 	cmp	r0, #0
    e0c4:	0a000008 	beq	e0ec <CDWHCIFrameSchedulerIsochronous::operator delete(void*, unsigned int)+0x48>
    e0c8:	e8bd4010 	pop	{r4, lr}
    e0cc:	e1a01003 	mov	r1, r3
    e0d0:	ea0078c5 	b	2c3ec <CClassAllocator::Free(void*)>
    e0d4:	e30a1858 	movw	r1, #43096	@ 0xa858
    e0d8:	e3401003 	movt	r1, #3
    e0dc:	e30a08c8 	movw	r0, #43208	@ 0xa8c8
    e0e0:	e3400003 	movt	r0, #3
    e0e4:	e3a020d0 	mov	r2, #208	@ 0xd0
    e0e8:	eb00773b 	bl	2bddc <assertion_failed>
    e0ec:	e30a1858 	movw	r1, #43096	@ 0xa858
    e0f0:	e3401003 	movt	r1, #3
    e0f4:	e30a0354 	movw	r0, #41812	@ 0xa354
    e0f8:	e3400003 	movt	r0, #3
    e0fc:	e3a020d0 	mov	r2, #208	@ 0xd0
    e100:	eb007735 	bl	2bddc <assertion_failed>

0000e104 <CDWHCIFrameSchedulerIsochronous::InitAllocator(unsigned int)>:
    e104:	e92d4070 	push	{r4, r5, r6, lr}
    e108:	e3044074 	movw	r4, #16500	@ 0x4074
    e10c:	e3404004 	movt	r4, #4
    e110:	e5943000 	ldr	r3, [r4]
    e114:	e3530000 	cmp	r3, #0
    e118:	1a00000a 	bne	e148 <CDWHCIFrameSchedulerIsochronous::InitAllocator(unsigned int)+0x44>
    e11c:	e1a05000 	mov	r5, r0
    e120:	e3a00020 	mov	r0, #32
    e124:	eb009ffe 	bl	36124 <operator new(unsigned int)>
    e128:	e1a02005 	mov	r2, r5
    e12c:	e3a01018 	mov	r1, #24
    e130:	e30a38fc 	movw	r3, #43260	@ 0xa8fc
    e134:	e3403003 	movt	r3, #3
    e138:	e1a05000 	mov	r5, r0
    e13c:	eb007811 	bl	2c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
    e140:	e5845000 	str	r5, [r4]
    e144:	e8bd8070 	pop	{r4, r5, r6, pc}
    e148:	e30a1858 	movw	r1, #43096	@ 0xa858
    e14c:	e3401003 	movt	r1, #3
    e150:	e30a039c 	movw	r0, #41884	@ 0xa39c
    e154:	e3400003 	movt	r0, #3
    e158:	e3a020d0 	mov	r2, #208	@ 0xd0
    e15c:	eb00771e 	bl	2bddc <assertion_failed>

0000e160 <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)>:
    e160:	e92d4070 	push	{r4, r5, r6, lr}
    e164:	e3044074 	movw	r4, #16500	@ 0x4074
    e168:	e3404004 	movt	r4, #4
    e16c:	e1a05000 	mov	r5, r0
    e170:	e24dd008 	sub	sp, sp, #8
    e174:	e1a06001 	mov	r6, r1
    e178:	e5940000 	ldr	r0, [r4]
    e17c:	e3500000 	cmp	r0, #0
    e180:	0a000004 	beq	e198 <CDWHCIFrameSchedulerIsochronous::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
    e184:	e1a02001 	mov	r2, r1
    e188:	e1a01005 	mov	r1, r5
    e18c:	e28dd008 	add	sp, sp, #8
    e190:	e8bd4070 	pop	{r4, r5, r6, lr}
    e194:	ea007815 	b	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
    e198:	e3a00020 	mov	r0, #32
    e19c:	eb009fe0 	bl	36124 <operator new(unsigned int)>
    e1a0:	e1a02005 	mov	r2, r5
    e1a4:	e1a03006 	mov	r3, r6
    e1a8:	e3a01018 	mov	r1, #24
    e1ac:	e30ac8fc 	movw	ip, #43260	@ 0xa8fc
    e1b0:	e340c003 	movt	ip, #3
    e1b4:	e58dc000 	str	ip, [sp]
    e1b8:	e1a05000 	mov	r5, r0
    e1bc:	eb0077fd 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
    e1c0:	e5845000 	str	r5, [r4]
    e1c4:	e28dd008 	add	sp, sp, #8
    e1c8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e1cc <CUSBDevice::Configure()>:
    e1cc:	e5903004 	ldr	r3, [r0, #4]
    e1d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e1d4:	e3530000 	cmp	r3, #0
    e1d8:	0a00001d 	beq	e254 <CUSBDevice::Configure()+0x88>
    e1dc:	e5903018 	ldr	r3, [r0, #24]
    e1e0:	e3530000 	cmp	r3, #0
    e1e4:	0a000020 	beq	e26c <CUSBDevice::Configure()+0xa0>
    e1e8:	e5906028 	ldr	r6, [r0, #40]	@ 0x28
    e1ec:	e3560000 	cmp	r6, #0
    e1f0:	0a000015 	beq	e24c <CUSBDevice::Configure()+0x80>
    e1f4:	e3a06000 	mov	r6, #0
    e1f8:	e280402c 	add	r4, r0, #44	@ 0x2c
    e1fc:	e2805054 	add	r5, r0, #84	@ 0x54
    e200:	e1a07006 	mov	r7, r6
    e204:	e5b40004 	ldr	r0, [r4, #4]!
    e208:	e3500000 	cmp	r0, #0
    e20c:	0a00000c 	beq	e244 <CUSBDevice::Configure()+0x78>
    e210:	e5903000 	ldr	r3, [r0]
    e214:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
    e218:	e12fff33 	blx	r3
    e21c:	e3500000 	cmp	r0, #0
    e220:	11a06000 	movne	r6, r0
    e224:	1a000006 	bne	e244 <CUSBDevice::Configure()+0x78>
    e228:	e5940000 	ldr	r0, [r4]
    e22c:	e3500000 	cmp	r0, #0
    e230:	0a000002 	beq	e240 <CUSBDevice::Configure()+0x74>
    e234:	e5903000 	ldr	r3, [r0]
    e238:	e5933004 	ldr	r3, [r3, #4]
    e23c:	e12fff33 	blx	r3
    e240:	e5847000 	str	r7, [r4]
    e244:	e1540005 	cmp	r4, r5
    e248:	1affffed 	bne	e204 <CUSBDevice::Configure()+0x38>
    e24c:	e1a00006 	mov	r0, r6
    e250:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e254:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e258:	e3401003 	movt	r1, #3
    e25c:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    e260:	e3400003 	movt	r0, #3
    e264:	e30021dd 	movw	r2, #477	@ 0x1dd
    e268:	eb0076db 	bl	2bddc <assertion_failed>
    e26c:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e270:	e3401003 	movt	r1, #3
    e274:	e30a092c 	movw	r0, #43308	@ 0xa92c
    e278:	e3400003 	movt	r0, #3
    e27c:	e30021de 	movw	r2, #478	@ 0x1de
    e280:	eb0076d5 	bl	2bddc <assertion_failed>

0000e284 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)>:
    e284:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
    e288:	e92d4070 	push	{r4, r5, r6, lr}
    e28c:	e1a04000 	mov	r4, r0
    e290:	e2800020 	add	r0, r0, #32
    e294:	e59fc09c 	ldr	ip, [pc, #156]	@ e338 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0xb4>
    e298:	e3a05000 	mov	r5, #0
    e29c:	e3510000 	cmp	r1, #0
    e2a0:	e5c42015 	strb	r2, [r4, #21]
    e2a4:	e3a02c01 	mov	r2, #256	@ 0x100
    e2a8:	e584c000 	str	ip, [r4]
    e2ac:	e984000a 	stmib	r4, {r1, r3}
    e2b0:	e1c421bd 	strh	r2, [r4, #29]
    e2b4:	e584500c 	str	r5, [r4, #12]
    e2b8:	e5c45014 	strb	r5, [r4, #20]
    e2bc:	e5845018 	str	r5, [r4, #24]
    e2c0:	e5c4501c 	strb	r5, [r4, #28]
    e2c4:	f4400a8f 	vst1.32	{d16-d17}, [r0]
    e2c8:	0a00000e 	beq	e308 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x84>
    e2cc:	e3530000 	cmp	r3, #0
    e2d0:	0a000012 	beq	e320 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x9c>
    e2d4:	e3a00014 	mov	r0, #20
    e2d8:	eb009f91 	bl	36124 <operator new(unsigned int)>
    e2dc:	e1a01004 	mov	r1, r4
    e2e0:	e1a06000 	mov	r6, r0
    e2e4:	eb0006b3 	bl	fdb8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    e2e8:	e284302c 	add	r3, r4, #44	@ 0x2c
    e2ec:	e2842054 	add	r2, r4, #84	@ 0x54
    e2f0:	e5846018 	str	r6, [r4, #24]
    e2f4:	e5a35004 	str	r5, [r3, #4]!
    e2f8:	e1530002 	cmp	r3, r2
    e2fc:	1afffffc 	bne	e2f4 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBHCIRootPort*)+0x70>
    e300:	e1a00004 	mov	r0, r4
    e304:	e8bd8070 	pop	{r4, r5, r6, pc}
    e308:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e30c:	e3401003 	movt	r1, #3
    e310:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    e314:	e3400003 	movt	r0, #3
    e318:	e3a02038 	mov	r2, #56	@ 0x38
    e31c:	eb0076ae 	bl	2bddc <assertion_failed>
    e320:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e324:	e3401003 	movt	r1, #3
    e328:	e30a0940 	movw	r0, #43328	@ 0xa940
    e32c:	e3400003 	movt	r0, #3
    e330:	e3a02039 	mov	r2, #57	@ 0x39
    e334:	eb0076a8 	bl	2bddc <assertion_failed>
    e338:	0003ec78 	.word	0x0003ec78

0000e33c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>:
    e33c:	e92d4070 	push	{r4, r5, r6, lr}
    e340:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
    e344:	e1a04000 	mov	r4, r0
    e348:	e280c024 	add	ip, r0, #36	@ 0x24
    e34c:	e59d0010 	ldr	r0, [sp, #16]
    e350:	e3510000 	cmp	r1, #0
    e354:	e5c42015 	strb	r2, [r4, #21]
    e358:	e59f213c 	ldr	r2, [pc, #316]	@ e49c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x160>
    e35c:	e5840010 	str	r0, [r4, #16]
    e360:	e1a00003 	mov	r0, r3
    e364:	e584300c 	str	r3, [r4, #12]
    e368:	e3a03000 	mov	r3, #0
    e36c:	e5841004 	str	r1, [r4, #4]
    e370:	e5842000 	str	r2, [r4]
    e374:	e5843008 	str	r3, [r4, #8]
    e378:	e5c43014 	strb	r3, [r4, #20]
    e37c:	e5843018 	str	r3, [r4, #24]
    e380:	f44c078f 	vst1.32	{d16}, [ip]
    e384:	e584302c 	str	r3, [r4, #44]	@ 0x2c
    e388:	0a00002b 	beq	e43c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x100>
    e38c:	e3500000 	cmp	r0, #0
    e390:	0a00002f 	beq	e454 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x118>
    e394:	eb00088d 	bl	105d0 <CUSBFunction::GetDevice() const>
    e398:	e3500000 	cmp	r0, #0
    e39c:	0a000032 	beq	e46c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x130>
    e3a0:	e5d0301c 	ldrb	r3, [r0, #28]
    e3a4:	e5c4301c 	strb	r3, [r4, #28]
    e3a8:	e3530000 	cmp	r3, #0
    e3ac:	e1d031bd 	ldrh	r3, [r0, #29]
    e3b0:	e1c431bd 	strh	r3, [r4, #29]
    e3b4:	e5903020 	ldr	r3, [r0, #32]
    e3b8:	e5843020 	str	r3, [r4, #32]
    e3bc:	0a00000f 	beq	e400 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xc4>
    e3c0:	e5945018 	ldr	r5, [r4, #24]
    e3c4:	e3550000 	cmp	r5, #0
    e3c8:	1a00002d 	bne	e484 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x148>
    e3cc:	e3a00014 	mov	r0, #20
    e3d0:	eb009f53 	bl	36124 <operator new(unsigned int)>
    e3d4:	e1a01004 	mov	r1, r4
    e3d8:	e1a06000 	mov	r6, r0
    e3dc:	eb000675 	bl	fdb8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>
    e3e0:	e284302c 	add	r3, r4, #44	@ 0x2c
    e3e4:	e2842054 	add	r2, r4, #84	@ 0x54
    e3e8:	e5846018 	str	r6, [r4, #24]
    e3ec:	e5a35004 	str	r5, [r3, #4]!
    e3f0:	e1520003 	cmp	r2, r3
    e3f4:	1afffffc 	bne	e3ec <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0xb0>
    e3f8:	e1a00004 	mov	r0, r4
    e3fc:	e8bd8070 	pop	{r4, r5, r6, pc}
    e400:	e5d03015 	ldrb	r3, [r0, #21]
    e404:	e3530002 	cmp	r3, #2
    e408:	1affffec 	bne	e3c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x84>
    e40c:	e5d43015 	ldrb	r3, [r4, #21]
    e410:	e3530001 	cmp	r3, #1
    e414:	8affffe9 	bhi	e3c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x84>
    e418:	e3a03001 	mov	r3, #1
    e41c:	e5c4301c 	strb	r3, [r4, #28]
    e420:	e5943010 	ldr	r3, [r4, #16]
    e424:	e5d02014 	ldrb	r2, [r0, #20]
    e428:	e2833001 	add	r3, r3, #1
    e42c:	e5840020 	str	r0, [r4, #32]
    e430:	e5c4201d 	strb	r2, [r4, #29]
    e434:	e5c4301e 	strb	r3, [r4, #30]
    e438:	eaffffe0 	b	e3c0 <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)+0x84>
    e43c:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e440:	e3401003 	movt	r1, #3
    e444:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    e448:	e3400003 	movt	r0, #3
    e44c:	e3a02057 	mov	r2, #87	@ 0x57
    e450:	eb007661 	bl	2bddc <assertion_failed>
    e454:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e458:	e3401003 	movt	r1, #3
    e45c:	e30a0954 	movw	r0, #43348	@ 0xa954
    e460:	e3400003 	movt	r0, #3
    e464:	e3a02058 	mov	r2, #88	@ 0x58
    e468:	eb00765b 	bl	2bddc <assertion_failed>
    e46c:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e470:	e3401003 	movt	r1, #3
    e474:	e30a0960 	movw	r0, #43360	@ 0xa960
    e478:	e3400003 	movt	r0, #3
    e47c:	e3a0205b 	mov	r2, #91	@ 0x5b
    e480:	eb007655 	bl	2bddc <assertion_failed>
    e484:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e488:	e3401003 	movt	r1, #3
    e48c:	e30a0970 	movw	r0, #43376	@ 0xa970
    e490:	e3400003 	movt	r0, #3
    e494:	e3a02073 	mov	r2, #115	@ 0x73
    e498:	eb00764f 	bl	2bddc <assertion_failed>
    e49c:	0003ec78 	.word	0x0003ec78

0000e4a0 <CUSBDevice::ReScanDevices()>:
    e4a0:	e92d4070 	push	{r4, r5, r6, lr}
    e4a4:	e3a05000 	mov	r5, #0
    e4a8:	e280402c 	add	r4, r0, #44	@ 0x2c
    e4ac:	e2806054 	add	r6, r0, #84	@ 0x54
    e4b0:	e5b43004 	ldr	r3, [r4, #4]!
    e4b4:	e2530000 	subs	r0, r3, #0
    e4b8:	0a000004 	beq	e4d0 <CUSBDevice::ReScanDevices()+0x30>
    e4bc:	e5933000 	ldr	r3, [r3]
    e4c0:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
    e4c4:	e12fff33 	blx	r3
    e4c8:	e3500000 	cmp	r0, #0
    e4cc:	11a05000 	movne	r5, r0
    e4d0:	e1540006 	cmp	r4, r6
    e4d4:	1afffff5 	bne	e4b0 <CUSBDevice::ReScanDevices()+0x10>
    e4d8:	e1a00005 	mov	r0, r5
    e4dc:	e8bd8070 	pop	{r4, r5, r6, pc}

0000e4e0 <CUSBDevice::RemoveDevice()>:
    e4e0:	e1a03000 	mov	r3, r0
    e4e4:	e5900008 	ldr	r0, [r0, #8]
    e4e8:	e3500000 	cmp	r0, #0
    e4ec:	0a000002 	beq	e4fc <CUSBDevice::RemoveDevice()+0x1c>
    e4f0:	e5903000 	ldr	r3, [r0]
    e4f4:	e593300c 	ldr	r3, [r3, #12]
    e4f8:	e12fff13 	bx	r3
    e4fc:	e593000c 	ldr	r0, [r3, #12]
    e500:	e3500000 	cmp	r0, #0
    e504:	0a000001 	beq	e510 <CUSBDevice::RemoveDevice()+0x30>
    e508:	e5931010 	ldr	r1, [r3, #16]
    e50c:	ea00217e 	b	16b0c <CUSBStandardHub::RemoveDeviceAt(unsigned int)>
    e510:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e514:	e3401003 	movt	r1, #3
    e518:	e30a0954 	movw	r0, #43348	@ 0xa954
    e51c:	e3400003 	movt	r0, #3
    e520:	e92d4010 	push	{r4, lr}
    e524:	e3002215 	movw	r2, #533	@ 0x215
    e528:	eb00762b 	bl	2bddc <assertion_failed>

0000e52c <CUSBDevice::GetName(TDeviceNameSelector) const>:
    e52c:	e92d4070 	push	{r4, r5, r6, lr}
    e530:	e1a06000 	mov	r6, r0
    e534:	e3a00010 	mov	r0, #16
    e538:	e24dd008 	sub	sp, sp, #8
    e53c:	e1a05001 	mov	r5, r1
    e540:	eb009ef7 	bl	36124 <operator new(unsigned int)>
    e544:	e1a04000 	mov	r4, r0
    e548:	eb00913d 	bl	32a44 <CString::CString()>
    e54c:	e3550000 	cmp	r5, #0
    e550:	0a000013 	beq	e5a4 <CUSBDevice::GetName(TDeviceNameSelector) const+0x78>
    e554:	e3550001 	cmp	r5, #1
    e558:	1a000024 	bne	e5f0 <CUSBDevice::GetName(TDeviceNameSelector) const+0xc4>
    e55c:	e5961024 	ldr	r1, [r6, #36]	@ 0x24
    e560:	e3510000 	cmp	r1, #0
    e564:	0a00002d 	beq	e620 <CUSBDevice::GetName(TDeviceNameSelector) const+0xf4>
    e568:	e5d12004 	ldrb	r2, [r1, #4]
    e56c:	e2423001 	sub	r3, r2, #1
    e570:	e6ef3073 	uxtb	r3, r3
    e574:	e35300fd 	cmp	r3, #253	@ 0xfd
    e578:	8a000015 	bhi	e5d4 <CUSBDevice::GetName(TDeviceNameSelector) const+0xa8>
    e57c:	e5d13005 	ldrb	r3, [r1, #5]
    e580:	e1a00004 	mov	r0, r4
    e584:	e5d11006 	ldrb	r1, [r1, #6]
    e588:	e58d1000 	str	r1, [sp]
    e58c:	e30a19ac 	movw	r1, #43436	@ 0xa9ac
    e590:	e3401003 	movt	r1, #3
    e594:	eb0096e3 	bl	34128 <CString::Format(char const*, ...)>
    e598:	e1a00004 	mov	r0, r4
    e59c:	e28dd008 	add	sp, sp, #8
    e5a0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5a4:	e5962024 	ldr	r2, [r6, #36]	@ 0x24
    e5a8:	e3520000 	cmp	r2, #0
    e5ac:	0a000015 	beq	e608 <CUSBDevice::GetName(TDeviceNameSelector) const+0xdc>
    e5b0:	e1d230ba 	ldrh	r3, [r2, #10]
    e5b4:	e1a00004 	mov	r0, r4
    e5b8:	e1d220b8 	ldrh	r2, [r2, #8]
    e5bc:	e30a1998 	movw	r1, #43416	@ 0xa998
    e5c0:	e3401003 	movt	r1, #3
    e5c4:	eb0096d7 	bl	34128 <CString::Format(char const*, ...)>
    e5c8:	e1a00004 	mov	r0, r4
    e5cc:	e28dd008 	add	sp, sp, #8
    e5d0:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5d4:	e1a00004 	mov	r0, r4
    e5d8:	e30a19a4 	movw	r1, #43428	@ 0xa9a4
    e5dc:	e3401003 	movt	r1, #3
    e5e0:	eb009155 	bl	32b3c <CString::operator=(char const*)>
    e5e4:	e1a00004 	mov	r0, r4
    e5e8:	e28dd008 	add	sp, sp, #8
    e5ec:	e8bd8070 	pop	{r4, r5, r6, pc}
    e5f0:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e5f4:	e3401003 	movt	r1, #3
    e5f8:	e30a093c 	movw	r0, #43324	@ 0xa93c
    e5fc:	e3400003 	movt	r0, #3
    e600:	e3002235 	movw	r2, #565	@ 0x235
    e604:	eb0075f4 	bl	2bddc <assertion_failed>
    e608:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e60c:	e3401003 	movt	r1, #3
    e610:	e30a0984 	movw	r0, #43396	@ 0xa984
    e614:	e3400003 	movt	r0, #3
    e618:	e3002221 	movw	r2, #545	@ 0x221
    e61c:	eb0075ee 	bl	2bddc <assertion_failed>
    e620:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e624:	e3401003 	movt	r1, #3
    e628:	e30a0984 	movw	r0, #43396	@ 0xa984
    e62c:	e3400003 	movt	r0, #3
    e630:	e3a02f8a 	mov	r2, #552	@ 0x228
    e634:	eb0075e8 	bl	2bddc <assertion_failed>

0000e638 <CUSBDevice::GetNames() const>:
    e638:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e63c:	e30a89a4 	movw	r8, #43428	@ 0xa9a4
    e640:	e3408003 	movt	r8, #3
    e644:	e3a06000 	mov	r6, #0
    e648:	e1a07000 	mov	r7, r0
    e64c:	e3a00010 	mov	r0, #16
    e650:	eb009eb3 	bl	36124 <operator new(unsigned int)>
    e654:	e1a05000 	mov	r5, r0
    e658:	eb0090f9 	bl	32a44 <CString::CString()>
    e65c:	e1a01006 	mov	r1, r6
    e660:	e1a00007 	mov	r0, r7
    e664:	ebffffb0 	bl	e52c <CUSBDevice::GetName(TDeviceNameSelector) const>
    e668:	e2504000 	subs	r4, r0, #0
    e66c:	0a000020 	beq	e6f4 <CUSBDevice::GetNames() const+0xbc>
    e670:	e1a01008 	mov	r1, r8
    e674:	eb00918d 	bl	32cb0 <CString::Compare(char const*) const>
    e678:	e3500000 	cmp	r0, #0
    e67c:	1a00000c 	bne	e6b4 <CUSBDevice::GetNames() const+0x7c>
    e680:	e5943000 	ldr	r3, [r4]
    e684:	e1a00004 	mov	r0, r4
    e688:	e5933004 	ldr	r3, [r3, #4]
    e68c:	e12fff33 	blx	r3
    e690:	e3560000 	cmp	r6, #0
    e694:	03a06001 	moveq	r6, #1
    e698:	0affffef 	beq	e65c <CUSBDevice::GetNames() const+0x24>
    e69c:	e1a00005 	mov	r0, r5
    e6a0:	eb00915d 	bl	32c1c <CString::GetLength() const>
    e6a4:	e3500000 	cmp	r0, #0
    e6a8:	0a00000b 	beq	e6dc <CUSBDevice::GetNames() const+0xa4>
    e6ac:	e1a00005 	mov	r0, r5
    e6b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e6b4:	e1a00005 	mov	r0, r5
    e6b8:	eb009157 	bl	32c1c <CString::GetLength() const>
    e6bc:	e3500000 	cmp	r0, #0
    e6c0:	1a000011 	bne	e70c <CUSBDevice::GetNames() const+0xd4>
    e6c4:	e1a00004 	mov	r0, r4
    e6c8:	eb009115 	bl	32b24 <CString::operator char const*() const>
    e6cc:	e1a01000 	mov	r1, r0
    e6d0:	e1a00005 	mov	r0, r5
    e6d4:	eb009154 	bl	32c2c <CString::Append(char const*)>
    e6d8:	eaffffe8 	b	e680 <CUSBDevice::GetNames() const+0x48>
    e6dc:	e1a00005 	mov	r0, r5
    e6e0:	e30a19a4 	movw	r1, #43428	@ 0xa9a4
    e6e4:	e3401003 	movt	r1, #3
    e6e8:	eb009113 	bl	32b3c <CString::operator=(char const*)>
    e6ec:	e1a00005 	mov	r0, r5
    e6f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    e6f4:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e6f8:	e3401003 	movt	r1, #3
    e6fc:	e30a09b8 	movw	r0, #43448	@ 0xa9b8
    e700:	e3400003 	movt	r0, #3
    e704:	e3002246 	movw	r2, #582	@ 0x246
    e708:	eb0075b3 	bl	2bddc <assertion_failed>
    e70c:	e1a00005 	mov	r0, r5
    e710:	e30a19c4 	movw	r1, #43460	@ 0xa9c4
    e714:	e3401003 	movt	r1, #3
    e718:	eb009143 	bl	32c2c <CString::Append(char const*)>
    e71c:	eaffffe8 	b	e6c4 <CUSBDevice::GetNames() const+0x8c>

0000e720 <CUSBDevice::SetAddress(unsigned char)>:
    e720:	e351003f 	cmp	r1, #63	@ 0x3f
    e724:	8a000001 	bhi	e730 <CUSBDevice::SetAddress(unsigned char)+0x10>
    e728:	e5c01014 	strb	r1, [r0, #20]
    e72c:	e12fff1e 	bx	lr
    e730:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e734:	e3401003 	movt	r1, #3
    e738:	e30a09c8 	movw	r0, #43464	@ 0xa9c8
    e73c:	e3400003 	movt	r0, #3
    e740:	e3a02e26 	mov	r2, #608	@ 0x260
    e744:	e92d4010 	push	{r4, lr}
    e748:	eb0075a3 	bl	2bddc <assertion_failed>

0000e74c <CUSBDevice::GetAddress() const>:
    e74c:	e5d00014 	ldrb	r0, [r0, #20]
    e750:	e12fff1e 	bx	lr

0000e754 <CUSBDevice::GetSpeed() const>:
    e754:	e5d00015 	ldrb	r0, [r0, #21]
    e758:	e12fff1e 	bx	lr

0000e75c <CUSBDevice::IsSplit() const>:
    e75c:	e5d0001c 	ldrb	r0, [r0, #28]
    e760:	e12fff1e 	bx	lr

0000e764 <CUSBDevice::GetHubAddress() const>:
    e764:	e5d0001d 	ldrb	r0, [r0, #29]
    e768:	e12fff1e 	bx	lr

0000e76c <CUSBDevice::GetHubPortNumber() const>:
    e76c:	e5d0001e 	ldrb	r0, [r0, #30]
    e770:	e12fff1e 	bx	lr

0000e774 <CUSBDevice::GetTTHubDevice() const>:
    e774:	e5900020 	ldr	r0, [r0, #32]
    e778:	e12fff1e 	bx	lr

0000e77c <CUSBDevice::GetEndpoint0() const>:
    e77c:	e5900018 	ldr	r0, [r0, #24]
    e780:	e3500000 	cmp	r0, #0
    e784:	112fff1e 	bxne	lr
    e788:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e78c:	e3401003 	movt	r1, #3
    e790:	e30a092c 	movw	r0, #43308	@ 0xa92c
    e794:	e3400003 	movt	r0, #3
    e798:	e92d4010 	push	{r4, lr}
    e79c:	e3002289 	movw	r2, #649	@ 0x289
    e7a0:	eb00758d 	bl	2bddc <assertion_failed>

0000e7a4 <CUSBDevice::GetHost() const>:
    e7a4:	e5900004 	ldr	r0, [r0, #4]
    e7a8:	e3500000 	cmp	r0, #0
    e7ac:	112fff1e 	bxne	lr
    e7b0:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e7b4:	e3401003 	movt	r1, #3
    e7b8:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    e7bc:	e3400003 	movt	r0, #3
    e7c0:	e92d4010 	push	{r4, lr}
    e7c4:	e300228f 	movw	r2, #655	@ 0x28f
    e7c8:	eb007583 	bl	2bddc <assertion_failed>

0000e7cc <CUSBDevice::GetDeviceDescriptor() const>:
    e7cc:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
    e7d0:	e3500000 	cmp	r0, #0
    e7d4:	112fff1e 	bxne	lr
    e7d8:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e7dc:	e3401003 	movt	r1, #3
    e7e0:	e30a0984 	movw	r0, #43396	@ 0xa984
    e7e4:	e3400003 	movt	r0, #3
    e7e8:	e92d4010 	push	{r4, lr}
    e7ec:	e3002295 	movw	r2, #661	@ 0x295
    e7f0:	eb007579 	bl	2bddc <assertion_failed>

0000e7f4 <CUSBDevice::GetConfigurationDescriptor() const>:
    e7f4:	e5900028 	ldr	r0, [r0, #40]	@ 0x28
    e7f8:	e3500000 	cmp	r0, #0
    e7fc:	112fff1e 	bxne	lr
    e800:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e804:	e3401003 	movt	r1, #3
    e808:	e30a09e8 	movw	r0, #43496	@ 0xa9e8
    e80c:	e3400003 	movt	r0, #3
    e810:	e92d4010 	push	{r4, lr}
    e814:	e300229b 	movw	r2, #667	@ 0x29b
    e818:	eb00756f 	bl	2bddc <assertion_failed>

0000e81c <CUSBDevice::GetDescriptor(unsigned char)>:
    e81c:	e590002c 	ldr	r0, [r0, #44]	@ 0x2c
    e820:	e3500000 	cmp	r0, #0
    e824:	0a000000 	beq	e82c <CUSBDevice::GetDescriptor(unsigned char)+0x10>
    e828:	ea003b71 	b	1d5f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    e82c:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e830:	e3401003 	movt	r1, #3
    e834:	e30a09fc 	movw	r0, #43516	@ 0xa9fc
    e838:	e3400003 	movt	r0, #3
    e83c:	e92d4010 	push	{r4, lr}
    e840:	e30022a1 	movw	r2, #673	@ 0x2a1
    e844:	eb007564 	bl	2bddc <assertion_failed>

0000e848 <CUSBDevice::ConfigurationError(char const*) const>:
    e848:	e590002c 	ldr	r0, [r0, #44]	@ 0x2c
    e84c:	e3500000 	cmp	r0, #0
    e850:	0a000000 	beq	e858 <CUSBDevice::ConfigurationError(char const*) const+0x10>
    e854:	ea003ba4 	b	1d6ec <CUSBConfigurationParser::Error(char const*) const>
    e858:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e85c:	e3401003 	movt	r1, #3
    e860:	e30a09fc 	movw	r0, #43516	@ 0xa9fc
    e864:	e3400003 	movt	r0, #3
    e868:	e92d4010 	push	{r4, lr}
    e86c:	e30022a7 	movw	r2, #679	@ 0x2a7
    e870:	eb007559 	bl	2bddc <assertion_failed>

0000e874 <CUSBDevice::GetFunction(unsigned int)>:
    e874:	e3510009 	cmp	r1, #9
    e878:	9281100c 	addls	r1, r1, #12
    e87c:	97900101 	ldrls	r0, [r0, r1, lsl #2]
    e880:	83a00000 	movhi	r0, #0
    e884:	e12fff1e 	bx	lr

0000e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>:
    e888:	e92d000c 	push	{r2, r3}
    e88c:	e92d4070 	push	{r4, r5, r6, lr}
    e890:	e24dd020 	sub	sp, sp, #32
    e894:	e59d6030 	ldr	r6, [sp, #48]	@ 0x30
    e898:	e3560000 	cmp	r6, #0
    e89c:	0a00001e 	beq	e91c <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0x94>
    e8a0:	e1a04000 	mov	r4, r0
    e8a4:	e28d0010 	add	r0, sp, #16
    e8a8:	e1a05001 	mov	r5, r1
    e8ac:	eb009064 	bl	32a44 <CString::CString()>
    e8b0:	e28d0010 	add	r0, sp, #16
    e8b4:	e30a1a24 	movw	r1, #43556	@ 0xaa24
    e8b8:	e3401003 	movt	r1, #3
    e8bc:	e5d4201e 	ldrb	r2, [r4, #30]
    e8c0:	e5d4301d 	ldrb	r3, [r4, #29]
    e8c4:	e58d2000 	str	r2, [sp]
    e8c8:	e59f2064 	ldr	r2, [pc, #100]	@ e934 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)+0xac>
    e8cc:	eb009615 	bl	34128 <CString::Format(char const*, ...)>
    e8d0:	e28d3034 	add	r3, sp, #52	@ 0x34
    e8d4:	e58d300c 	str	r3, [sp, #12]
    e8d8:	eb007fba 	bl	2e7c8 <CLogger::Get()>
    e8dc:	e1a04000 	mov	r4, r0
    e8e0:	e28d0010 	add	r0, sp, #16
    e8e4:	eb00908e 	bl	32b24 <CString::operator char const*() const>
    e8e8:	e59dc00c 	ldr	ip, [sp, #12]
    e8ec:	e1a01000 	mov	r1, r0
    e8f0:	e1a03006 	mov	r3, r6
    e8f4:	e1a02005 	mov	r2, r5
    e8f8:	e1a00004 	mov	r0, r4
    e8fc:	e58dc000 	str	ip, [sp]
    e900:	eb008115 	bl	2ed5c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    e904:	e28d0010 	add	r0, sp, #16
    e908:	eb00901a 	bl	32978 <CString::~CString()>
    e90c:	e28dd020 	add	sp, sp, #32
    e910:	e8bd4070 	pop	{r4, r5, r6, lr}
    e914:	e28dd008 	add	sp, sp, #8
    e918:	e12fff1e 	bx	lr
    e91c:	e30a191c 	movw	r1, #43292	@ 0xa91c
    e920:	e3401003 	movt	r1, #3
    e924:	e30a0a14 	movw	r0, #43540	@ 0xaa14
    e928:	e3400003 	movt	r0, #3
    e92c:	e30022b7 	movw	r2, #695	@ 0x2b7
    e930:	eb007529 	bl	2bddc <assertion_failed>
    e934:	0003ec88 	.word	0x0003ec88

0000e938 <CUSBDevice::~CUSBDevice() [clone .part.0]>:
    e938:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    e93c:	e3a07000 	mov	r7, #0
    e940:	e1a05000 	mov	r5, r0
    e944:	e280402c 	add	r4, r0, #44	@ 0x2c
    e948:	e2806054 	add	r6, r0, #84	@ 0x54
    e94c:	e5b40004 	ldr	r0, [r4, #4]!
    e950:	e3500000 	cmp	r0, #0
    e954:	0a000002 	beq	e964 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x2c>
    e958:	e5903000 	ldr	r3, [r0]
    e95c:	e5933004 	ldr	r3, [r3, #4]
    e960:	e12fff33 	blx	r3
    e964:	e1540006 	cmp	r4, r6
    e968:	e5847000 	str	r7, [r4]
    e96c:	1afffff6 	bne	e94c <CUSBDevice::~CUSBDevice() [clone .part.0]+0x14>
    e970:	e5953024 	ldr	r3, [r5, #36]	@ 0x24
    e974:	e3530000 	cmp	r3, #0
    e978:	0a00000e 	beq	e9b8 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x80>
    e97c:	e1a00005 	mov	r0, r5
    e980:	ebffff2c 	bl	e638 <CUSBDevice::GetNames() const>
    e984:	e2504000 	subs	r4, r0, #0
    e988:	0a000032 	beq	ea58 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x120>
    e98c:	eb009064 	bl	32b24 <CString::operator char const*() const>
    e990:	e3a01003 	mov	r1, #3
    e994:	e1a03000 	mov	r3, r0
    e998:	e30a2a38 	movw	r2, #43576	@ 0xaa38
    e99c:	e3402003 	movt	r2, #3
    e9a0:	e1a00005 	mov	r0, r5
    e9a4:	ebffffb7 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    e9a8:	e5943000 	ldr	r3, [r4]
    e9ac:	e1a00004 	mov	r0, r4
    e9b0:	e5933004 	ldr	r3, [r3, #4]
    e9b4:	e12fff33 	blx	r3
    e9b8:	e5d51014 	ldrb	r1, [r5, #20]
    e9bc:	e3510000 	cmp	r1, #0
    e9c0:	1a000020 	bne	ea48 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x110>
    e9c4:	e595402c 	ldr	r4, [r5, #44]	@ 0x2c
    e9c8:	e3540000 	cmp	r4, #0
    e9cc:	0a000004 	beq	e9e4 <CUSBDevice::~CUSBDevice() [clone .part.0]+0xac>
    e9d0:	e1a00004 	mov	r0, r4
    e9d4:	eb003b03 	bl	1d5e8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
    e9d8:	e3a0101c 	mov	r1, #28
    e9dc:	e1a00004 	mov	r0, r4
    e9e0:	eb009de7 	bl	36184 <operator delete(void*, unsigned int)>
    e9e4:	e5950028 	ldr	r0, [r5, #40]	@ 0x28
    e9e8:	e3a03000 	mov	r3, #0
    e9ec:	e585302c 	str	r3, [r5, #44]	@ 0x2c
    e9f0:	e1500003 	cmp	r0, r3
    e9f4:	0a000001 	beq	ea00 <CUSBDevice::~CUSBDevice() [clone .part.0]+0xc8>
    e9f8:	e3a01009 	mov	r1, #9
    e9fc:	eb009de0 	bl	36184 <operator delete(void*, unsigned int)>
    ea00:	e5950024 	ldr	r0, [r5, #36]	@ 0x24
    ea04:	e3a03000 	mov	r3, #0
    ea08:	e5853028 	str	r3, [r5, #40]	@ 0x28
    ea0c:	e1500003 	cmp	r0, r3
    ea10:	0a000001 	beq	ea1c <CUSBDevice::~CUSBDevice() [clone .part.0]+0xe4>
    ea14:	e3a01012 	mov	r1, #18
    ea18:	eb009dd9 	bl	36184 <operator delete(void*, unsigned int)>
    ea1c:	e5954018 	ldr	r4, [r5, #24]
    ea20:	e3a03000 	mov	r3, #0
    ea24:	e5853024 	str	r3, [r5, #36]	@ 0x24
    ea28:	e1540003 	cmp	r4, r3
    ea2c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    ea30:	e1a00004 	mov	r0, r4
    ea34:	eb00056d 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
    ea38:	e1a00004 	mov	r0, r4
    ea3c:	e3a01014 	mov	r1, #20
    ea40:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    ea44:	ea009dce 	b	36184 <operator delete(void*, unsigned int)>
    ea48:	e3040078 	movw	r0, #16504	@ 0x4078
    ea4c:	e3400004 	movt	r0, #4
    ea50:	eb009f33 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
    ea54:	eaffffda 	b	e9c4 <CUSBDevice::~CUSBDevice() [clone .part.0]+0x8c>
    ea58:	e30a191c 	movw	r1, #43292	@ 0xa91c
    ea5c:	e3401003 	movt	r1, #3
    ea60:	e30a0a2c 	movw	r0, #43564	@ 0xaa2c
    ea64:	e3400003 	movt	r0, #3
    ea68:	e3a0208b 	mov	r2, #139	@ 0x8b
    ea6c:	eb0074da 	bl	2bddc <assertion_failed>

0000ea70 <CUSBDevice::~CUSBDevice()>:
    ea70:	e92d4010 	push	{r4, lr}
    ea74:	e1a04000 	mov	r4, r0
    ea78:	e5900004 	ldr	r0, [r0, #4]
    ea7c:	e59f3054 	ldr	r3, [pc, #84]	@ ead8 <CUSBDevice::~CUSBDevice()+0x68>
    ea80:	e3500000 	cmp	r0, #0
    ea84:	e5843000 	str	r3, [r4]
    ea88:	0a00000c 	beq	eac0 <CUSBDevice::~CUSBDevice()+0x50>
    ea8c:	e5902000 	ldr	r2, [r0]
    ea90:	e30f3460 	movw	r3, #62560	@ 0xf460
    ea94:	e3403000 	movt	r3, #0
    ea98:	e5922018 	ldr	r2, [r2, #24]
    ea9c:	e1520003 	cmp	r2, r3
    eaa0:	1a000003 	bne	eab4 <CUSBDevice::~CUSBDevice()+0x44>
    eaa4:	e1a00004 	mov	r0, r4
    eaa8:	ebffffa2 	bl	e938 <CUSBDevice::~CUSBDevice() [clone .part.0]>
    eaac:	e1a00004 	mov	r0, r4
    eab0:	e8bd8010 	pop	{r4, pc}
    eab4:	e1a01004 	mov	r1, r4
    eab8:	e12fff32 	blx	r2
    eabc:	eafffff8 	b	eaa4 <CUSBDevice::~CUSBDevice()+0x34>
    eac0:	e30a191c 	movw	r1, #43292	@ 0xa91c
    eac4:	e3401003 	movt	r1, #3
    eac8:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    eacc:	e3400003 	movt	r0, #3
    ead0:	e3a0207f 	mov	r2, #127	@ 0x7f
    ead4:	eb0074c0 	bl	2bddc <assertion_failed>
    ead8:	0003ec78 	.word	0x0003ec78

0000eadc <CUSBDevice::~CUSBDevice()>:
    eadc:	e92d4010 	push	{r4, lr}
    eae0:	e1a04000 	mov	r4, r0
    eae4:	e5900004 	ldr	r0, [r0, #4]
    eae8:	e59f3060 	ldr	r3, [pc, #96]	@ eb50 <CUSBDevice::~CUSBDevice()+0x74>
    eaec:	e3500000 	cmp	r0, #0
    eaf0:	e5843000 	str	r3, [r4]
    eaf4:	0a00000f 	beq	eb38 <CUSBDevice::~CUSBDevice()+0x5c>
    eaf8:	e5902000 	ldr	r2, [r0]
    eafc:	e30f3460 	movw	r3, #62560	@ 0xf460
    eb00:	e3403000 	movt	r3, #0
    eb04:	e5922018 	ldr	r2, [r2, #24]
    eb08:	e1520003 	cmp	r2, r3
    eb0c:	1a000006 	bne	eb2c <CUSBDevice::~CUSBDevice()+0x50>
    eb10:	e1a00004 	mov	r0, r4
    eb14:	ebffff87 	bl	e938 <CUSBDevice::~CUSBDevice() [clone .part.0]>
    eb18:	e1a00004 	mov	r0, r4
    eb1c:	e3a01058 	mov	r1, #88	@ 0x58
    eb20:	eb009d97 	bl	36184 <operator delete(void*, unsigned int)>
    eb24:	e1a00004 	mov	r0, r4
    eb28:	e8bd8010 	pop	{r4, pc}
    eb2c:	e1a01004 	mov	r1, r4
    eb30:	e12fff32 	blx	r2
    eb34:	eafffff5 	b	eb10 <CUSBDevice::~CUSBDevice()+0x34>
    eb38:	e30a191c 	movw	r1, #43292	@ 0xa91c
    eb3c:	e3401003 	movt	r1, #3
    eb40:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    eb44:	e3400003 	movt	r0, #3
    eb48:	e3a0207f 	mov	r2, #127	@ 0x7f
    eb4c:	eb0074a2 	bl	2bddc <assertion_failed>
    eb50:	0003ec78 	.word	0x0003ec78

0000eb54 <CUSBDevice::Initialize()>:
    eb54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb58:	e5905024 	ldr	r5, [r0, #36]	@ 0x24
    eb5c:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
    eb60:	e3550000 	cmp	r5, #0
    eb64:	1a00010b 	bne	ef98 <CUSBDevice::Initialize()+0x444>
    eb68:	e1a04000 	mov	r4, r0
    eb6c:	e3a00012 	mov	r0, #18
    eb70:	eb009d6b 	bl	36124 <operator new(unsigned int)>
    eb74:	e1a02000 	mov	r2, r0
    eb78:	e5940004 	ldr	r0, [r4, #4]
    eb7c:	e5842024 	str	r2, [r4, #36]	@ 0x24
    eb80:	e3500000 	cmp	r0, #0
    eb84:	0a000109 	beq	efb0 <CUSBDevice::Initialize()+0x45c>
    eb88:	e5941018 	ldr	r1, [r4, #24]
    eb8c:	e3510000 	cmp	r1, #0
    eb90:	0a00010c 	beq	efc8 <CUSBDevice::Initialize()+0x474>
    eb94:	e58d2000 	str	r2, [sp]
    eb98:	e1a03005 	mov	r3, r5
    eb9c:	e3a02008 	mov	r2, #8
    eba0:	e3a06080 	mov	r6, #128	@ 0x80
    eba4:	e58d2004 	str	r2, [sp, #4]
    eba8:	e3a02001 	mov	r2, #1
    ebac:	e58d500c 	str	r5, [sp, #12]
    ebb0:	e58d6008 	str	r6, [sp, #8]
    ebb4:	eb0013cf 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    ebb8:	e3500008 	cmp	r0, #8
    ebbc:	1a000016 	bne	ec1c <CUSBDevice::Initialize()+0xc8>
    ebc0:	e5943024 	ldr	r3, [r4, #36]	@ 0x24
    ebc4:	e5d37000 	ldrb	r7, [r3]
    ebc8:	e3570012 	cmp	r7, #18
    ebcc:	1a000002 	bne	ebdc <CUSBDevice::Initialize()+0x88>
    ebd0:	e5d38001 	ldrb	r8, [r3, #1]
    ebd4:	e3580001 	cmp	r8, #1
    ebd8:	0a000018 	beq	ec40 <CUSBDevice::Initialize()+0xec>
    ebdc:	e1a00004 	mov	r0, r4
    ebe0:	e3a01001 	mov	r1, #1
    ebe4:	e30a2a88 	movw	r2, #43656	@ 0xaa88
    ebe8:	e3402003 	movt	r2, #3
    ebec:	ebffff25 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ebf0:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
    ebf4:	e3500000 	cmp	r0, #0
    ebf8:	0a000001 	beq	ec04 <CUSBDevice::Initialize()+0xb0>
    ebfc:	e3a01012 	mov	r1, #18
    ec00:	eb009d5f 	bl	36184 <operator delete(void*, unsigned int)>
    ec04:	e3a03000 	mov	r3, #0
    ec08:	e5843024 	str	r3, [r4, #36]	@ 0x24
    ec0c:	e3a05000 	mov	r5, #0
    ec10:	e1a00005 	mov	r0, r5
    ec14:	e28dd03c 	add	sp, sp, #60	@ 0x3c
    ec18:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec1c:	e1a00004 	mov	r0, r4
    ec20:	e3a01001 	mov	r1, #1
    ec24:	e30a2a60 	movw	r2, #43616	@ 0xaa60
    ec28:	e3402003 	movt	r2, #3
    ec2c:	ebffff15 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ec30:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
    ec34:	e3500000 	cmp	r0, #0
    ec38:	1affffef 	bne	ebfc <CUSBDevice::Initialize()+0xa8>
    ec3c:	eafffff0 	b	ec04 <CUSBDevice::Initialize()+0xb0>
    ec40:	e5d31007 	ldrb	r1, [r3, #7]
    ec44:	e5940018 	ldr	r0, [r4, #24]
    ec48:	eb0004f9 	bl	10034 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>
    ec4c:	e3500000 	cmp	r0, #0
    ec50:	0a0000eb 	beq	f004 <CUSBDevice::Initialize()+0x4b0>
    ec54:	e58d500c 	str	r5, [sp, #12]
    ec58:	e1a02008 	mov	r2, r8
    ec5c:	e58d6008 	str	r6, [sp, #8]
    ec60:	e5943024 	ldr	r3, [r4, #36]	@ 0x24
    ec64:	e88d0088 	stm	sp, {r3, r7}
    ec68:	e1a03005 	mov	r3, r5
    ec6c:	e5941018 	ldr	r1, [r4, #24]
    ec70:	e5940004 	ldr	r0, [r4, #4]
    ec74:	eb00139f 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    ec78:	e3500012 	cmp	r0, #18
    ec7c:	1a0000d7 	bne	efe0 <CUSBDevice::Initialize()+0x48c>
    ec80:	e1a01005 	mov	r1, r5
    ec84:	e30a2aec 	movw	r2, #43756	@ 0xaaec
    ec88:	e3402003 	movt	r2, #3
    ec8c:	e3040078 	movw	r0, #16504	@ 0x4078
    ec90:	e3400004 	movt	r0, #4
    ec94:	eb009e70 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
    ec98:	e1a05000 	mov	r5, r0
    ec9c:	e3500040 	cmp	r0, #64	@ 0x40
    eca0:	0a0000ed 	beq	f05c <CUSBDevice::Initialize()+0x508>
    eca4:	e6ef6070 	uxtb	r6, r0
    eca8:	e5941018 	ldr	r1, [r4, #24]
    ecac:	e5940004 	ldr	r0, [r4, #4]
    ecb0:	e1a02006 	mov	r2, r6
    ecb4:	eb00139c 	bl	13b2c <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>
    ecb8:	e3500000 	cmp	r0, #0
    ecbc:	0a0000f7 	beq	f0a0 <CUSBDevice::Initialize()+0x54c>
    ecc0:	e356003f 	cmp	r6, #63	@ 0x3f
    ecc4:	8a000100 	bhi	f0cc <CUSBDevice::Initialize()+0x578>
    ecc8:	e5945028 	ldr	r5, [r4, #40]	@ 0x28
    eccc:	e5c46014 	strb	r6, [r4, #20]
    ecd0:	e3550000 	cmp	r5, #0
    ecd4:	1a000102 	bne	f0e4 <CUSBDevice::Initialize()+0x590>
    ecd8:	e3a00009 	mov	r0, #9
    ecdc:	e3a06009 	mov	r6, #9
    ece0:	eb009d0f 	bl	36124 <operator new(unsigned int)>
    ece4:	e5943024 	ldr	r3, [r4, #36]	@ 0x24
    ece8:	e5840028 	str	r0, [r4, #40]	@ 0x28
    ecec:	e3002525 	movw	r2, #1317	@ 0x525
    ecf0:	e3a07080 	mov	r7, #128	@ 0x80
    ecf4:	e3a08000 	mov	r8, #0
    ecf8:	e1d310b8 	ldrh	r1, [r3, #8]
    ecfc:	e1510002 	cmp	r1, r2
    ed00:	e3a02002 	mov	r2, #2
    ed04:	01d350ba 	ldrheq	r5, [r3, #10]
    ed08:	030a34a2 	movweq	r3, #42146	@ 0xa4a2
    ed0c:	e58d0000 	str	r0, [sp]
    ed10:	00455003 	subeq	r5, r5, r3
    ed14:	e98d01c0 	stmib	sp, {r6, r7, r8}
    ed18:	016f5f15 	clzeq	r5, r5
    ed1c:	e5941018 	ldr	r1, [r4, #24]
    ed20:	01a052a5 	lsreq	r5, r5, #5
    ed24:	e5940004 	ldr	r0, [r4, #4]
    ed28:	e1a03005 	mov	r3, r5
    ed2c:	eb001371 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    ed30:	e1500006 	cmp	r0, r6
    ed34:	1a0000ce 	bne	f074 <CUSBDevice::Initialize()+0x520>
    ed38:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
    ed3c:	e5d06000 	ldrb	r6, [r0]
    ed40:	e3560009 	cmp	r6, #9
    ed44:	1a0000b7 	bne	f028 <CUSBDevice::Initialize()+0x4d4>
    ed48:	e5d09001 	ldrb	r9, [r0, #1]
    ed4c:	e3590002 	cmp	r9, #2
    ed50:	1a0000b4 	bne	f028 <CUSBDevice::Initialize()+0x4d4>
    ed54:	e1d0a0b2 	ldrh	sl, [r0, #2]
    ed58:	e35a0b01 	cmp	sl, #1024	@ 0x400
    ed5c:	8a0000b1 	bhi	f028 <CUSBDevice::Initialize()+0x4d4>
    ed60:	e1a01006 	mov	r1, r6
    ed64:	eb009d06 	bl	36184 <operator delete(void*, unsigned int)>
    ed68:	e1a0000a 	mov	r0, sl
    ed6c:	eb009cf2 	bl	3613c <operator new[](unsigned int)>
    ed70:	e58d800c 	str	r8, [sp, #12]
    ed74:	e58d7008 	str	r7, [sp, #8]
    ed78:	e1a03005 	mov	r3, r5
    ed7c:	e5840028 	str	r0, [r4, #40]	@ 0x28
    ed80:	e1a02009 	mov	r2, r9
    ed84:	e88d0401 	stm	sp, {r0, sl}
    ed88:	e5941018 	ldr	r1, [r4, #24]
    ed8c:	e5940004 	ldr	r0, [r4, #4]
    ed90:	eb001358 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    ed94:	e1a05000 	mov	r5, r0
    ed98:	e150000a 	cmp	r0, sl
    ed9c:	1a000101 	bne	f1a8 <CUSBDevice::Initialize()+0x654>
    eda0:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
    eda4:	e3530000 	cmp	r3, #0
    eda8:	1a00018e 	bne	f3e8 <CUSBDevice::Initialize()+0x894>
    edac:	e3a0001c 	mov	r0, #28
    edb0:	eb009cdb 	bl	36124 <operator new(unsigned int)>
    edb4:	e1a02005 	mov	r2, r5
    edb8:	e5941028 	ldr	r1, [r4, #40]	@ 0x28
    edbc:	e1a05000 	mov	r5, r0
    edc0:	eb00399c 	bl	1d438 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>
    edc4:	e1a00005 	mov	r0, r5
    edc8:	e584502c 	str	r5, [r4, #44]	@ 0x2c
    edcc:	eb003a06 	bl	1d5ec <CUSBConfigurationParser::IsValid() const>
    edd0:	e3500000 	cmp	r0, #0
    edd4:	0a000160 	beq	f35c <CUSBDevice::Initialize()+0x808>
    edd8:	e5d43015 	ldrb	r3, [r4, #21]
    eddc:	e3530003 	cmp	r3, #3
    ede0:	8a000174 	bhi	f3b8 <CUSBDevice::Initialize()+0x864>
    ede4:	e1a00004 	mov	r0, r4
    ede8:	ebfffe12 	bl	e638 <CUSBDevice::GetNames() const>
    edec:	e2505000 	subs	r5, r0, #0
    edf0:	0a000176 	beq	f3d0 <CUSBDevice::Initialize()+0x87c>
    edf4:	eb008f4a 	bl	32b24 <CString::operator char const*() const>
    edf8:	e5d41015 	ldrb	r1, [r4, #21]
    edfc:	e30e2c70 	movw	r2, #60528	@ 0xec70
    ee00:	e3402003 	movt	r2, #3
    ee04:	e1a03000 	mov	r3, r0
    ee08:	e0820101 	add	r0, r2, r1, lsl #2
    ee0c:	e3a01003 	mov	r1, #3
    ee10:	e30a2bec 	movw	r2, #44012	@ 0xabec
    ee14:	e3402003 	movt	r2, #3
    ee18:	e5900020 	ldr	r0, [r0, #32]
    ee1c:	e58d0000 	str	r0, [sp]
    ee20:	e1a00004 	mov	r0, r4
    ee24:	ebfffe97 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    ee28:	e5953000 	ldr	r3, [r5]
    ee2c:	e1a00005 	mov	r0, r5
    ee30:	e5933004 	ldr	r3, [r3, #4]
    ee34:	e12fff33 	blx	r3
    ee38:	e28d0028 	add	r0, sp, #40	@ 0x28
    ee3c:	eb008f00 	bl	32a44 <CString::CString()>
    ee40:	e1a01004 	mov	r1, r4
    ee44:	e28d001c 	add	r0, sp, #28
    ee48:	eb0022ea 	bl	179f8 <CUSBString::CUSBString(CUSBDevice*)>
    ee4c:	e5943024 	ldr	r3, [r4, #36]	@ 0x24
    ee50:	e5d3500e 	ldrb	r5, [r3, #14]
    ee54:	e2452001 	sub	r2, r5, #1
    ee58:	e6ef2072 	uxtb	r2, r2
    ee5c:	e35200fd 	cmp	r2, #253	@ 0xfd
    ee60:	9a00011a 	bls	f2d0 <CUSBDevice::Initialize()+0x77c>
    ee64:	e5d3500f 	ldrb	r5, [r3, #15]
    ee68:	e2453001 	sub	r3, r5, #1
    ee6c:	e6ef3073 	uxtb	r3, r3
    ee70:	e35300fd 	cmp	r3, #253	@ 0xfd
    ee74:	9a000103 	bls	f288 <CUSBDevice::Initialize()+0x734>
    ee78:	e28d0028 	add	r0, sp, #40	@ 0x28
    ee7c:	eb008f66 	bl	32c1c <CString::GetLength() const>
    ee80:	e3500000 	cmp	r0, #0
    ee84:	1a0000f6 	bne	f264 <CUSBDevice::Initialize()+0x710>
    ee88:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
    ee8c:	e5941018 	ldr	r1, [r4, #24]
    ee90:	e5940004 	ldr	r0, [r4, #4]
    ee94:	e5d32005 	ldrb	r2, [r3, #5]
    ee98:	eb001335 	bl	13b74 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    ee9c:	e2505000 	subs	r5, r0, #0
    eea0:	0a000120 	beq	f328 <CUSBDevice::Initialize()+0x7d4>
    eea4:	e3a06000 	mov	r6, #0
    eea8:	e30ab9a4 	movw	fp, #43428	@ 0xa9a4
    eeac:	e340b003 	movt	fp, #3
    eeb0:	e30aac30 	movw	sl, #44080	@ 0xac30
    eeb4:	e340a003 	movt	sl, #3
    eeb8:	e1a07006 	mov	r7, r6
    eebc:	e594002c 	ldr	r0, [r4, #44]	@ 0x2c
    eec0:	e3a01004 	mov	r1, #4
    eec4:	eb0039ca 	bl	1d5f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
    eec8:	e3500000 	cmp	r0, #0
    eecc:	0a000126 	beq	f36c <CUSBDevice::Initialize()+0x818>
    eed0:	e5d03002 	ldrb	r3, [r0, #2]
    eed4:	e1530006 	cmp	r3, r6
    eed8:	21a09003 	movcs	r9, r3
    eedc:	31a09006 	movcc	r9, r6
    eee0:	3a000085 	bcc	f0fc <CUSBDevice::Initialize()+0x5a8>
    eee4:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
    eee8:	e3530000 	cmp	r3, #0
    eeec:	0a000101 	beq	f2f8 <CUSBDevice::Initialize()+0x7a4>
    eef0:	e0846107 	add	r6, r4, r7, lsl #2
    eef4:	e5963030 	ldr	r3, [r6, #48]	@ 0x30
    eef8:	e3530000 	cmp	r3, #0
    eefc:	1a000103 	bne	f310 <CUSBDevice::Initialize()+0x7bc>
    ef00:	e3a00014 	mov	r0, #20
    ef04:	eb009c86 	bl	36124 <operator new(unsigned int)>
    ef08:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
    ef0c:	e1a01004 	mov	r1, r4
    ef10:	e1a08000 	mov	r8, r0
    ef14:	eb00051a 	bl	10384 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>
    ef18:	e3570000 	cmp	r7, #0
    ef1c:	e5868030 	str	r8, [r6, #48]	@ 0x30
    ef20:	1a000085 	bne	f13c <CUSBDevice::Initialize()+0x5e8>
    ef24:	e1a01007 	mov	r1, r7
    ef28:	e1a00004 	mov	r0, r4
    ef2c:	ebfffd7e 	bl	e52c <CUSBDevice::GetName(TDeviceNameSelector) const>
    ef30:	e1a01000 	mov	r1, r0
    ef34:	e1a00008 	mov	r0, r8
    ef38:	eb0001f1 	bl	f704 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    ef3c:	e2508000 	subs	r8, r0, #0
    ef40:	0a000074 	beq	f118 <CUSBDevice::Initialize()+0x5c4>
    ef44:	e5940030 	ldr	r0, [r4, #48]	@ 0x30
    ef48:	e3500000 	cmp	r0, #0
    ef4c:	0a0000ae 	beq	f20c <CUSBDevice::Initialize()+0x6b8>
    ef50:	e5903000 	ldr	r3, [r0]
    ef54:	e5933004 	ldr	r3, [r3, #4]
    ef58:	e12fff33 	blx	r3
    ef5c:	e3580000 	cmp	r8, #0
    ef60:	e5868030 	str	r8, [r6, #48]	@ 0x30
    ef64:	0a000089 	beq	f190 <CUSBDevice::Initialize()+0x63c>
    ef68:	e5983000 	ldr	r3, [r8]
    ef6c:	e1a00008 	mov	r0, r8
    ef70:	e5933020 	ldr	r3, [r3, #32]
    ef74:	e12fff33 	blx	r3
    ef78:	e3500000 	cmp	r0, #0
    ef7c:	0a0000aa 	beq	f22c <CUSBDevice::Initialize()+0x6d8>
    ef80:	e2877001 	add	r7, r7, #1
    ef84:	e357000a 	cmp	r7, #10
    ef88:	0a00012d 	beq	f444 <CUSBDevice::Initialize()+0x8f0>
    ef8c:	e2896001 	add	r6, r9, #1
    ef90:	e6ef6076 	uxtb	r6, r6
    ef94:	eaffffc8 	b	eebc <CUSBDevice::Initialize()+0x368>
    ef98:	e30a191c 	movw	r1, #43292	@ 0xa91c
    ef9c:	e3401003 	movt	r1, #3
    efa0:	e30a0a4c 	movw	r0, #43596	@ 0xaa4c
    efa4:	e3400003 	movt	r0, #3
    efa8:	e3a020b4 	mov	r2, #180	@ 0xb4
    efac:	eb00738a 	bl	2bddc <assertion_failed>
    efb0:	e30a191c 	movw	r1, #43292	@ 0xa91c
    efb4:	e3401003 	movt	r1, #3
    efb8:	e30a04f4 	movw	r0, #42228	@ 0xa4f4
    efbc:	e3400003 	movt	r0, #3
    efc0:	e3a020b8 	mov	r2, #184	@ 0xb8
    efc4:	eb007384 	bl	2bddc <assertion_failed>
    efc8:	e30a191c 	movw	r1, #43292	@ 0xa91c
    efcc:	e3401003 	movt	r1, #3
    efd0:	e30a092c 	movw	r0, #43308	@ 0xa92c
    efd4:	e3400003 	movt	r0, #3
    efd8:	e3a020b9 	mov	r2, #185	@ 0xb9
    efdc:	eb00737e 	bl	2bddc <assertion_failed>
    efe0:	e1a00004 	mov	r0, r4
    efe4:	e1a01008 	mov	r1, r8
    efe8:	e30a2acc 	movw	r2, #43724	@ 0xaacc
    efec:	e3402003 	movt	r2, #3
    eff0:	ebfffe24 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    eff4:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
    eff8:	e3500000 	cmp	r0, #0
    effc:	1afffefe 	bne	ebfc <CUSBDevice::Initialize()+0xa8>
    f000:	eafffeff 	b	ec04 <CUSBDevice::Initialize()+0xb0>
    f004:	e1a00004 	mov	r0, r4
    f008:	e1a01008 	mov	r1, r8
    f00c:	e30a2aa4 	movw	r2, #43684	@ 0xaaa4
    f010:	e3402003 	movt	r2, #3
    f014:	ebfffe1b 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f018:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
    f01c:	e3500000 	cmp	r0, #0
    f020:	1afffef5 	bne	ebfc <CUSBDevice::Initialize()+0xa8>
    f024:	eafffef6 	b	ec04 <CUSBDevice::Initialize()+0xb0>
    f028:	e1a00004 	mov	r0, r4
    f02c:	e3a01001 	mov	r1, #1
    f030:	e30a2b60 	movw	r2, #43872	@ 0xab60
    f034:	e3402003 	movt	r2, #3
    f038:	ebfffe12 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f03c:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
    f040:	e3500000 	cmp	r0, #0
    f044:	0a000001 	beq	f050 <CUSBDevice::Initialize()+0x4fc>
    f048:	e3a01009 	mov	r1, #9
    f04c:	eb009c4c 	bl	36184 <operator delete(void*, unsigned int)>
    f050:	e3a03000 	mov	r3, #0
    f054:	e5843028 	str	r3, [r4, #40]	@ 0x28
    f058:	eafffeeb 	b	ec0c <CUSBDevice::Initialize()+0xb8>
    f05c:	e1a01008 	mov	r1, r8
    f060:	e1a00004 	mov	r0, r4
    f064:	e30a2af4 	movw	r2, #43764	@ 0xaaf4
    f068:	e3402003 	movt	r2, #3
    f06c:	ebfffe05 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f070:	eafffee5 	b	ec0c <CUSBDevice::Initialize()+0xb8>
    f074:	e1a00004 	mov	r0, r4
    f078:	e3a01001 	mov	r1, #1
    f07c:	e30a2b34 	movw	r2, #43828	@ 0xab34
    f080:	e3402003 	movt	r2, #3
    f084:	ebfffdff 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f088:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
    f08c:	e1500008 	cmp	r0, r8
    f090:	0affffee 	beq	f050 <CUSBDevice::Initialize()+0x4fc>
    f094:	e1a01006 	mov	r1, r6
    f098:	eb009c39 	bl	36184 <operator delete(void*, unsigned int)>
    f09c:	eaffffeb 	b	f050 <CUSBDevice::Initialize()+0x4fc>
    f0a0:	e1a00004 	mov	r0, r4
    f0a4:	e1a03005 	mov	r3, r5
    f0a8:	e3a01001 	mov	r1, #1
    f0ac:	e30a2b08 	movw	r2, #43784	@ 0xab08
    f0b0:	e3402003 	movt	r2, #3
    f0b4:	ebfffdf3 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f0b8:	e1a01005 	mov	r1, r5
    f0bc:	e3040078 	movw	r0, #16504	@ 0x4078
    f0c0:	e3400004 	movt	r0, #4
    f0c4:	eb009d96 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
    f0c8:	eafffecf 	b	ec0c <CUSBDevice::Initialize()+0xb8>
    f0cc:	e30a191c 	movw	r1, #43292	@ 0xa91c
    f0d0:	e3401003 	movt	r1, #3
    f0d4:	e30a09c8 	movw	r0, #43464	@ 0xa9c8
    f0d8:	e3400003 	movt	r0, #3
    f0dc:	e3a02e26 	mov	r2, #608	@ 0x260
    f0e0:	eb00733d 	bl	2bddc <assertion_failed>
    f0e4:	e30a191c 	movw	r1, #43292	@ 0xa91c
    f0e8:	e3401003 	movt	r1, #3
    f0ec:	e30a0b20 	movw	r0, #43808	@ 0xab20
    f0f0:	e3400003 	movt	r0, #3
    f0f4:	e3a02f41 	mov	r2, #260	@ 0x104
    f0f8:	eb007337 	bl	2bddc <assertion_failed>
    f0fc:	e5d03003 	ldrb	r3, [r0, #3]
    f100:	e1a0200a 	mov	r2, sl
    f104:	e3a01004 	mov	r1, #4
    f108:	e1a00004 	mov	r0, r4
    f10c:	ebfffddd 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f110:	e1a06009 	mov	r6, r9
    f114:	eaffff68 	b	eebc <CUSBDevice::Initialize()+0x368>
    f118:	e5948030 	ldr	r8, [r4, #48]	@ 0x30
    f11c:	e3a01001 	mov	r1, #1
    f120:	e1a00004 	mov	r0, r4
    f124:	ebfffd00 	bl	e52c <CUSBDevice::GetName(TDeviceNameSelector) const>
    f128:	e1a01000 	mov	r1, r0
    f12c:	e1a00008 	mov	r0, r8
    f130:	eb000173 	bl	f704 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    f134:	e2508000 	subs	r8, r0, #0
    f138:	1affff81 	bne	ef44 <CUSBDevice::Initialize()+0x3f0>
    f13c:	e5960030 	ldr	r0, [r6, #48]	@ 0x30
    f140:	eb0004f8 	bl	10528 <CUSBFunction::GetInterfaceName() const>
    f144:	e2508000 	subs	r8, r0, #0
    f148:	0a0000b2 	beq	f418 <CUSBDevice::Initialize()+0x8c4>
    f14c:	e1a0100b 	mov	r1, fp
    f150:	eb008ed6 	bl	32cb0 <CString::Compare(char const*) const>
    f154:	e2503000 	subs	r3, r0, #0
    f158:	e58d3014 	str	r3, [sp, #20]
    f15c:	1a00001a 	bne	f1cc <CUSBDevice::Initialize()+0x678>
    f160:	e5983000 	ldr	r3, [r8]
    f164:	e1a00008 	mov	r0, r8
    f168:	e5933004 	ldr	r3, [r3, #4]
    f16c:	e12fff33 	blx	r3
    f170:	e5960030 	ldr	r0, [r6, #48]	@ 0x30
    f174:	e3500000 	cmp	r0, #0
    f178:	0a000004 	beq	f190 <CUSBDevice::Initialize()+0x63c>
    f17c:	e5903000 	ldr	r3, [r0]
    f180:	e5933004 	ldr	r3, [r3, #4]
    f184:	e12fff33 	blx	r3
    f188:	e59d3014 	ldr	r3, [sp, #20]
    f18c:	e5863030 	str	r3, [r6, #48]	@ 0x30
    f190:	e3a01002 	mov	r1, #2
    f194:	e1a00004 	mov	r0, r4
    f198:	e30a2c80 	movw	r2, #44160	@ 0xac80
    f19c:	e3402003 	movt	r2, #3
    f1a0:	ebfffdb8 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f1a4:	eaffffd9 	b	f110 <CUSBDevice::Initialize()+0x5bc>
    f1a8:	e1a00004 	mov	r0, r4
    f1ac:	e3a01001 	mov	r1, #1
    f1b0:	e30a2b84 	movw	r2, #43908	@ 0xab84
    f1b4:	e3402003 	movt	r2, #3
    f1b8:	ebfffdb2 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f1bc:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
    f1c0:	e3500000 	cmp	r0, #0
    f1c4:	1affff9f 	bne	f048 <CUSBDevice::Initialize()+0x4f4>
    f1c8:	eaffffa0 	b	f050 <CUSBDevice::Initialize()+0x4fc>
    f1cc:	e1a00008 	mov	r0, r8
    f1d0:	eb008e53 	bl	32b24 <CString::operator char const*() const>
    f1d4:	e3a01003 	mov	r1, #3
    f1d8:	e1a03000 	mov	r3, r0
    f1dc:	e30a2c6c 	movw	r2, #44140	@ 0xac6c
    f1e0:	e3402003 	movt	r2, #3
    f1e4:	e1a00004 	mov	r0, r4
    f1e8:	ebfffda6 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f1ec:	e1a01008 	mov	r1, r8
    f1f0:	e5960030 	ldr	r0, [r6, #48]	@ 0x30
    f1f4:	eb000142 	bl	f704 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>
    f1f8:	e1a08000 	mov	r8, r0
    f1fc:	e5960030 	ldr	r0, [r6, #48]	@ 0x30
    f200:	e3500000 	cmp	r0, #0
    f204:	1affff51 	bne	ef50 <CUSBDevice::Initialize()+0x3fc>
    f208:	eaffff53 	b	ef5c <CUSBDevice::Initialize()+0x408>
    f20c:	e5983000 	ldr	r3, [r8]
    f210:	e1a00008 	mov	r0, r8
    f214:	e5868030 	str	r8, [r6, #48]	@ 0x30
    f218:	e5933020 	ldr	r3, [r3, #32]
    f21c:	e12fff33 	blx	r3
    f220:	e3500000 	cmp	r0, #0
    f224:	13a07001 	movne	r7, #1
    f228:	1affff57 	bne	ef8c <CUSBDevice::Initialize()+0x438>
    f22c:	e1a00004 	mov	r0, r4
    f230:	e3a01004 	mov	r1, #4
    f234:	e30a2c9c 	movw	r2, #44188	@ 0xac9c
    f238:	e3402003 	movt	r2, #3
    f23c:	ebfffd91 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f240:	e5960030 	ldr	r0, [r6, #48]	@ 0x30
    f244:	e3500000 	cmp	r0, #0
    f248:	0a000002 	beq	f258 <CUSBDevice::Initialize()+0x704>
    f24c:	e5903000 	ldr	r3, [r0]
    f250:	e5933004 	ldr	r3, [r3, #4]
    f254:	e12fff33 	blx	r3
    f258:	e3a03000 	mov	r3, #0
    f25c:	e5863030 	str	r3, [r6, #48]	@ 0x30
    f260:	eaffffaa 	b	f110 <CUSBDevice::Initialize()+0x5bc>
    f264:	e28d0028 	add	r0, sp, #40	@ 0x28
    f268:	eb008e2d 	bl	32b24 <CString::operator char const*() const>
    f26c:	e3a01003 	mov	r1, #3
    f270:	e1a03000 	mov	r3, r0
    f274:	e30a2c04 	movw	r2, #44036	@ 0xac04
    f278:	e3402003 	movt	r2, #3
    f27c:	e1a00004 	mov	r0, r4
    f280:	ebfffd80 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f284:	eafffeff 	b	ee88 <CUSBDevice::Initialize()+0x334>
    f288:	e28d001c 	add	r0, sp, #28
    f28c:	eb0022c4 	bl	17da4 <CUSBString::GetLanguageID()>
    f290:	e1a01005 	mov	r1, r5
    f294:	e1a02000 	mov	r2, r0
    f298:	e28d001c 	add	r0, sp, #28
    f29c:	eb00222a 	bl	17b4c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
    f2a0:	e3500000 	cmp	r0, #0
    f2a4:	0afffef3 	beq	ee78 <CUSBDevice::Initialize()+0x324>
    f2a8:	e28d0028 	add	r0, sp, #40	@ 0x28
    f2ac:	eb008e5a 	bl	32c1c <CString::GetLength() const>
    f2b0:	e3500000 	cmp	r0, #0
    f2b4:	1a00005d 	bne	f430 <CUSBDevice::Initialize()+0x8dc>
    f2b8:	e28d001c 	add	r0, sp, #28
    f2bc:	eb0022b6 	bl	17d9c <CUSBString::Get() const>
    f2c0:	e1a01000 	mov	r1, r0
    f2c4:	e28d0028 	add	r0, sp, #40	@ 0x28
    f2c8:	eb008e57 	bl	32c2c <CString::Append(char const*)>
    f2cc:	eafffee9 	b	ee78 <CUSBDevice::Initialize()+0x324>
    f2d0:	e28d001c 	add	r0, sp, #28
    f2d4:	eb0022b2 	bl	17da4 <CUSBString::GetLanguageID()>
    f2d8:	e1a01005 	mov	r1, r5
    f2dc:	e1a02000 	mov	r2, r0
    f2e0:	e28d001c 	add	r0, sp, #28
    f2e4:	eb002218 	bl	17b4c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
    f2e8:	e3500000 	cmp	r0, #0
    f2ec:	1a000043 	bne	f400 <CUSBDevice::Initialize()+0x8ac>
    f2f0:	e5943024 	ldr	r3, [r4, #36]	@ 0x24
    f2f4:	eafffeda 	b	ee64 <CUSBDevice::Initialize()+0x310>
    f2f8:	e30a191c 	movw	r1, #43292	@ 0xa91c
    f2fc:	e3401003 	movt	r1, #3
    f300:	e30a09fc 	movw	r0, #43516	@ 0xa9fc
    f304:	e3400003 	movt	r0, #3
    f308:	e3a02f63 	mov	r2, #396	@ 0x18c
    f30c:	eb0072b2 	bl	2bddc <assertion_failed>
    f310:	e30a191c 	movw	r1, #43292	@ 0xa91c
    f314:	e3401003 	movt	r1, #3
    f318:	e30a0c50 	movw	r0, #44112	@ 0xac50
    f31c:	e3400003 	movt	r0, #3
    f320:	e300218d 	movw	r2, #397	@ 0x18d
    f324:	eb0072ac 	bl	2bddc <assertion_failed>
    f328:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
    f32c:	e30a2c10 	movw	r2, #44048	@ 0xac10
    f330:	e3402003 	movt	r2, #3
    f334:	e1a00004 	mov	r0, r4
    f338:	e3a01001 	mov	r1, #1
    f33c:	e5d33005 	ldrb	r3, [r3, #5]
    f340:	ebfffd50 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f344:	e3a05000 	mov	r5, #0
    f348:	e28d001c 	add	r0, sp, #28
    f34c:	eb0021ee 	bl	17b0c <CUSBString::~CUSBString()>
    f350:	e28d0028 	add	r0, sp, #40	@ 0x28
    f354:	eb008d87 	bl	32978 <CString::~CString()>
    f358:	eafffe2c 	b	ec10 <CUSBDevice::Initialize()+0xbc>
    f35c:	e59f10f8 	ldr	r1, [pc, #248]	@ f45c <CUSBDevice::Initialize()+0x908>
    f360:	e1a00004 	mov	r0, r4
    f364:	ebfffd37 	bl	e848 <CUSBDevice::ConfigurationError(char const*) const>
    f368:	eafffe27 	b	ec0c <CUSBDevice::Initialize()+0xb8>
    f36c:	e3570000 	cmp	r7, #0
    f370:	1afffff4 	bne	f348 <CUSBDevice::Initialize()+0x7f4>
    f374:	e3a01002 	mov	r1, #2
    f378:	e1a00004 	mov	r0, r4
    f37c:	e30a2cd8 	movw	r2, #44248	@ 0xacd8
    f380:	e3402003 	movt	r2, #3
    f384:	ebfffd3f 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f388:	e5941018 	ldr	r1, [r4, #24]
    f38c:	e5940004 	ldr	r0, [r4, #4]
    f390:	e1a02007 	mov	r2, r7
    f394:	eb0011f6 	bl	13b74 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>
    f398:	e3500000 	cmp	r0, #0
    f39c:	1affffe8 	bne	f344 <CUSBDevice::Initialize()+0x7f0>
    f3a0:	e3a01002 	mov	r1, #2
    f3a4:	e1a00004 	mov	r0, r4
    f3a8:	e30a2cfc 	movw	r2, #44284	@ 0xacfc
    f3ac:	e3402003 	movt	r2, #3
    f3b0:	ebfffd34 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f3b4:	eaffffe2 	b	f344 <CUSBDevice::Initialize()+0x7f0>
    f3b8:	e30a191c 	movw	r1, #43292	@ 0xa91c
    f3bc:	e3401003 	movt	r1, #3
    f3c0:	e30a0bc0 	movw	r0, #43968	@ 0xabc0
    f3c4:	e3400003 	movt	r0, #3
    f3c8:	e300214f 	movw	r2, #335	@ 0x14f
    f3cc:	eb007282 	bl	2bddc <assertion_failed>
    f3d0:	e30a191c 	movw	r1, #43292	@ 0xa91c
    f3d4:	e3401003 	movt	r1, #3
    f3d8:	e30a0a2c 	movw	r0, #43564	@ 0xaa2c
    f3dc:	e3400003 	movt	r0, #3
    f3e0:	e3002152 	movw	r2, #338	@ 0x152
    f3e4:	eb00727c 	bl	2bddc <assertion_failed>
    f3e8:	e30a191c 	movw	r1, #43292	@ 0xa91c
    f3ec:	e3401003 	movt	r1, #3
    f3f0:	e30a0ba8 	movw	r0, #43944	@ 0xaba8
    f3f4:	e3400003 	movt	r0, #3
    f3f8:	e3002142 	movw	r2, #322	@ 0x142
    f3fc:	eb007276 	bl	2bddc <assertion_failed>
    f400:	e28d001c 	add	r0, sp, #28
    f404:	eb002264 	bl	17d9c <CUSBString::Get() const>
    f408:	e1a01000 	mov	r1, r0
    f40c:	e28d0028 	add	r0, sp, #40	@ 0x28
    f410:	eb008dc9 	bl	32b3c <CString::operator=(char const*)>
    f414:	eaffffb5 	b	f2f0 <CUSBDevice::Initialize()+0x79c>
    f418:	e30a191c 	movw	r1, #43292	@ 0xa91c
    f41c:	e3401003 	movt	r1, #3
    f420:	e30a09b8 	movw	r0, #43448	@ 0xa9b8
    f424:	e3400003 	movt	r0, #3
    f428:	e300219f 	movw	r2, #415	@ 0x19f
    f42c:	eb00726a 	bl	2bddc <assertion_failed>
    f430:	e28d0028 	add	r0, sp, #40	@ 0x28
    f434:	e30d1134 	movw	r1, #53556	@ 0xd134
    f438:	e3401003 	movt	r1, #3
    f43c:	eb008dfa 	bl	32c2c <CString::Append(char const*)>
    f440:	eaffff9c 	b	f2b8 <CUSBDevice::Initialize()+0x764>
    f444:	e1a00004 	mov	r0, r4
    f448:	e3a01002 	mov	r1, #2
    f44c:	e30a2cb8 	movw	r2, #44216	@ 0xacb8
    f450:	e3402003 	movt	r2, #3
    f454:	ebfffd0b 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f458:	eaffffba 	b	f348 <CUSBDevice::Initialize()+0x7f4>
    f45c:	0003ec88 	.word	0x0003ec88

0000f460 <CUSBHostController::CancelDeviceTransactions(CUSBDevice*)>:
    f460:	e12fff1e 	bx	lr

0000f464 <_GLOBAL__sub_I__ZN10CUSBDevice19s_DeviceAddressPoolE>:
    f464:	e92d4010 	push	{r4, lr}
    f468:	e3044078 	movw	r4, #16504	@ 0x4078
    f46c:	e3404004 	movt	r4, #4
    f470:	e3a0203f 	mov	r2, #63	@ 0x3f
    f474:	e3a01001 	mov	r1, #1
    f478:	e1a00004 	mov	r0, r4
    f47c:	eb009c61 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
    f480:	e1a00004 	mov	r0, r4
    f484:	e3042180 	movw	r2, #16768	@ 0x4180
    f488:	e3402004 	movt	r2, #4
    f48c:	e3061658 	movw	r1, #26200	@ 0x6658
    f490:	e3401003 	movt	r1, #3
    f494:	e8bd4010 	pop	{r4, lr}
    f498:	ea00932d 	b	34154 <__aeabi_atexit>

0000f49c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)>:
    f49c:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    f4a0:	e1a06000 	mov	r6, r0
    f4a4:	e1a01006 	mov	r1, r6
    f4a8:	e28db01c 	add	fp, sp, #28
    f4ac:	e24dd028 	sub	sp, sp, #40	@ 0x28
    f4b0:	e24b0030 	sub	r0, fp, #48	@ 0x30
    f4b4:	eb0003e1 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
    f4b8:	e3a01021 	mov	r1, #33	@ 0x21
    f4bc:	e24b0030 	sub	r0, fp, #48	@ 0x30
    f4c0:	eb000462 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
    f4c4:	e2507000 	subs	r7, r0, #0
    f4c8:	0a000053 	beq	f61c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x180>
    f4cc:	e1d740b7 	ldrh	r4, [r7, #7]
    f4d0:	e3540000 	cmp	r4, #0
    f4d4:	0a000050 	beq	f61c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x180>
    f4d8:	e2443001 	sub	r3, r4, #1
    f4dc:	e24b0030 	sub	r0, fp, #48	@ 0x30
    f4e0:	e383303f 	orr	r3, r3, #63	@ 0x3f
    f4e4:	e2833040 	add	r3, r3, #64	@ 0x40
    f4e8:	e3c33007 	bic	r3, r3, #7
    f4ec:	e04dd003 	sub	sp, sp, r3
    f4f0:	eb00044b 	bl	10624 <CUSBFunction::GetHost() const>
    f4f4:	e1a08000 	mov	r8, r0
    f4f8:	e24b0030 	sub	r0, fp, #48	@ 0x30
    f4fc:	e28d504f 	add	r5, sp, #79	@ 0x4f
    f500:	eb00043c 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
    f504:	e5d79006 	ldrb	r9, [r7, #6]
    f508:	e1a07000 	mov	r7, r0
    f50c:	e24b0030 	sub	r0, fp, #48	@ 0x30
    f510:	eb0004a2 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
    f514:	e3c5503f 	bic	r5, r5, #63	@ 0x3f
    f518:	e3a03081 	mov	r3, #129	@ 0x81
    f51c:	e58d000c 	str	r0, [sp, #12]
    f520:	e58d3008 	str	r3, [sp, #8]
    f524:	e1a02009 	mov	r2, r9
    f528:	e1a01007 	mov	r1, r7
    f52c:	e1a00008 	mov	r0, r8
    f530:	e3a03000 	mov	r3, #0
    f534:	e58d4004 	str	r4, [sp, #4]
    f538:	e58d5000 	str	r5, [sp]
    f53c:	eb00116d 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
    f540:	e1500004 	cmp	r0, r4
    f544:	0a000008 	beq	f56c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xd0>
    f548:	ea000040 	b	f650 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x1b4>
    f54c:	e2441001 	sub	r1, r4, #1
    f550:	e3520001 	cmp	r2, #1
    f554:	e2444002 	sub	r4, r4, #2
    f558:	0a000028 	beq	f600 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x164>
    f55c:	e2855001 	add	r5, r5, #1
    f560:	e6ff4071 	uxth	r4, r1
    f564:	e3540000 	cmp	r4, #0
    f568:	0a000031 	beq	f634 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x198>
    f56c:	e5d53000 	ldrb	r3, [r5]
    f570:	e2032003 	and	r2, r3, #3
    f574:	e20330fc 	and	r3, r3, #252	@ 0xfc
    f578:	e2433004 	sub	r3, r3, #4
    f57c:	e3520002 	cmp	r2, #2
    f580:	e16f3f13 	clz	r3, r3
    f584:	e1a032a3 	lsr	r3, r3, #5
    f588:	0a000014 	beq	f5e0 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x144>
    f58c:	e3520003 	cmp	r2, #3
    f590:	1affffed 	bne	f54c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xb0>
    f594:	e5952001 	ldr	r2, [r5, #1]
    f598:	e2444005 	sub	r4, r4, #5
    f59c:	e2855005 	add	r5, r5, #5
    f5a0:	e6ff4074 	uxth	r4, r4
    f5a4:	e352000d 	cmp	r2, #13
    f5a8:	13a03000 	movne	r3, #0
    f5ac:	02033001 	andeq	r3, r3, #1
    f5b0:	e3530000 	cmp	r3, #0
    f5b4:	0affffea 	beq	f564 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0xc8>
    f5b8:	e3a00f82 	mov	r0, #520	@ 0x208
    f5bc:	eb009ad8 	bl	36124 <operator new(unsigned int)>
    f5c0:	e1a01006 	mov	r1, r6
    f5c4:	e1a04000 	mov	r4, r0
    f5c8:	eb0029aa 	bl	19c78 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)>
    f5cc:	e24b0030 	sub	r0, fp, #48	@ 0x30
    f5d0:	eb0002f1 	bl	1019c <CUSBFunction::~CUSBFunction()>
    f5d4:	e1a00004 	mov	r0, r4
    f5d8:	e24bd01c 	sub	sp, fp, #28
    f5dc:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    f5e0:	e1d520b1 	ldrh	r2, [r5, #1]
    f5e4:	e2444003 	sub	r4, r4, #3
    f5e8:	e2855003 	add	r5, r5, #3
    f5ec:	e6ff4074 	uxth	r4, r4
    f5f0:	e352000d 	cmp	r2, #13
    f5f4:	13a03000 	movne	r3, #0
    f5f8:	02033001 	andeq	r3, r3, #1
    f5fc:	eaffffeb 	b	f5b0 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x114>
    f600:	e5d52001 	ldrb	r2, [r5, #1]
    f604:	e6ff4074 	uxth	r4, r4
    f608:	e2855002 	add	r5, r5, #2
    f60c:	e352000d 	cmp	r2, #13
    f610:	13a03000 	movne	r3, #0
    f614:	02033001 	andeq	r3, r3, #1
    f618:	eaffffe4 	b	f5b0 <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x114>
    f61c:	e30a1d28 	movw	r1, #44328	@ 0xad28
    f620:	e3401003 	movt	r1, #3
    f624:	e24b0030 	sub	r0, fp, #48	@ 0x30
    f628:	eb000413 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
    f62c:	e3a04000 	mov	r4, #0
    f630:	eaffffe5 	b	f5cc <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x130>
    f634:	e3a00f4f 	mov	r0, #316	@ 0x13c
    f638:	eb009ab9 	bl	36124 <operator new(unsigned int)>
    f63c:	e3a02001 	mov	r2, #1
    f640:	e1a01006 	mov	r1, r6
    f644:	e1a04000 	mov	r4, r0
    f648:	eb000878 	bl	11830 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
    f64c:	eaffffde 	b	f5cc <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x130>
    f650:	e24b0030 	sub	r0, fp, #48	@ 0x30
    f654:	eb0003dd 	bl	105d0 <CUSBFunction::GetDevice() const>
    f658:	e3a01001 	mov	r1, #1
    f65c:	e30a2d30 	movw	r2, #44336	@ 0xad30
    f660:	e3402003 	movt	r2, #3
    f664:	ebfffc87 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f668:	eaffffef 	b	f62c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)+0x190>

0000f66c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>:
    f66c:	e92d4070 	push	{r4, r5, r6, lr}
    f670:	e30a6998 	movw	r6, #43416	@ 0xa998
    f674:	e3406003 	movt	r6, #3
    f678:	e24dd010 	sub	sp, sp, #16
    f67c:	e1a05000 	mov	r5, r0
    f680:	e2814004 	add	r4, r1, #4
    f684:	ea000000 	b	f68c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x20>
    f688:	eb008cba 	bl	32978 <CString::~CString()>
    f68c:	e15430b4 	ldrh	r3, [r4, #-4]
    f690:	e1a0000d 	mov	r0, sp
    f694:	e3530000 	cmp	r3, #0
    f698:	1a000002 	bne	f6a8 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x3c>
    f69c:	e15430b2 	ldrh	r3, [r4, #-2]
    f6a0:	e3530000 	cmp	r3, #0
    f6a4:	0a000013 	beq	f6f8 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x8c>
    f6a8:	eb008ce5 	bl	32a44 <CString::CString()>
    f6ac:	e15430b2 	ldrh	r3, [r4, #-2]
    f6b0:	e15420b4 	ldrh	r2, [r4, #-4]
    f6b4:	e1a01006 	mov	r1, r6
    f6b8:	e1a0000d 	mov	r0, sp
    f6bc:	e2844004 	add	r4, r4, #4
    f6c0:	eb009298 	bl	34128 <CString::Format(char const*, ...)>
    f6c4:	e1a0000d 	mov	r0, sp
    f6c8:	eb008d15 	bl	32b24 <CString::operator char const*() const>
    f6cc:	e1a01000 	mov	r1, r0
    f6d0:	e1a00005 	mov	r0, r5
    f6d4:	eb008d75 	bl	32cb0 <CString::Compare(char const*) const>
    f6d8:	e1a03000 	mov	r3, r0
    f6dc:	e3530000 	cmp	r3, #0
    f6e0:	e1a0000d 	mov	r0, sp
    f6e4:	1affffe7 	bne	f688 <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)+0x1c>
    f6e8:	eb008ca2 	bl	32978 <CString::~CString()>
    f6ec:	e3a00001 	mov	r0, #1
    f6f0:	e28dd010 	add	sp, sp, #16
    f6f4:	e8bd8070 	pop	{r4, r5, r6, pc}
    f6f8:	e1a00003 	mov	r0, r3
    f6fc:	e28dd010 	add	sp, sp, #16
    f700:	e8bd8070 	pop	{r4, r5, r6, pc}

0000f704 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)>:
    f704:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    f708:	e2507000 	subs	r7, r0, #0
    f70c:	e24dd00c 	sub	sp, sp, #12
    f710:	0a000057 	beq	f874 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x170>
    f714:	e1a04001 	mov	r4, r1
    f718:	e3510000 	cmp	r1, #0
    f71c:	0a00005a 	beq	f88c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x188>
    f720:	eb007a1a 	bl	2df90 <CKernelOptions::Get()>
    f724:	eb0079f1 	bl	2def0 <CKernelOptions::GetUSBIgnore() const>
    f728:	e2505000 	subs	r5, r0, #0
    f72c:	0a00005c 	beq	f8a4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1a0>
    f730:	e1a01005 	mov	r1, r5
    f734:	e1a00004 	mov	r0, r4
    f738:	eb008d5c 	bl	32cb0 <CString::Compare(char const*) const>
    f73c:	e2506000 	subs	r6, r0, #0
    f740:	0a00003f 	beq	f844 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x140>
    f744:	e1a00004 	mov	r0, r4
    f748:	e30a1db8 	movw	r1, #44472	@ 0xadb8
    f74c:	e3401003 	movt	r1, #3
    f750:	eb008d56 	bl	32cb0 <CString::Compare(char const*) const>
    f754:	e3500000 	cmp	r0, #0
    f758:	1a000016 	bne	f7b8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0xb4>
    f75c:	e3a00074 	mov	r0, #116	@ 0x74
    f760:	eb009a6f 	bl	36124 <operator new(unsigned int)>
    f764:	e1a01007 	mov	r1, r7
    f768:	e1a05000 	mov	r5, r0
    f76c:	eb001c93 	bl	169c0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>
    f770:	e1a00005 	mov	r0, r5
    f774:	eb000395 	bl	105d0 <CUSBFunction::GetDevice() const>
    f778:	e1a06000 	mov	r6, r0
    f77c:	e1a00004 	mov	r0, r4
    f780:	eb008ce7 	bl	32b24 <CString::operator char const*() const>
    f784:	e30a2f30 	movw	r2, #44848	@ 0xaf30
    f788:	e3402003 	movt	r2, #3
    f78c:	e1a03000 	mov	r3, r0
    f790:	e3a01003 	mov	r1, #3
    f794:	e1a00006 	mov	r0, r6
    f798:	ebfffc3a 	bl	e888 <CUSBDevice::LogWrite(TLogSeverity, char const*, ...)>
    f79c:	e5943000 	ldr	r3, [r4]
    f7a0:	e1a00004 	mov	r0, r4
    f7a4:	e5933004 	ldr	r3, [r3, #4]
    f7a8:	e12fff33 	blx	r3
    f7ac:	e1a00005 	mov	r0, r5
    f7b0:	e28dd00c 	add	sp, sp, #12
    f7b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f7b8:	e1a00004 	mov	r0, r4
    f7bc:	e30a1dc4 	movw	r1, #44484	@ 0xadc4
    f7c0:	e3401003 	movt	r1, #3
    f7c4:	eb008d39 	bl	32cb0 <CString::Compare(char const*) const>
    f7c8:	e3500000 	cmp	r0, #0
    f7cc:	0affffe2 	beq	f75c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x58>
    f7d0:	e1a00004 	mov	r0, r4
    f7d4:	e30a1dd0 	movw	r1, #44496	@ 0xadd0
    f7d8:	e3401003 	movt	r1, #3
    f7dc:	eb008d33 	bl	32cb0 <CString::Compare(char const*) const>
    f7e0:	e3500000 	cmp	r0, #0
    f7e4:	0a000034 	beq	f8bc <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1b8>
    f7e8:	e1a00004 	mov	r0, r4
    f7ec:	e30a1ddc 	movw	r1, #44508	@ 0xaddc
    f7f0:	e3401003 	movt	r1, #3
    f7f4:	eb008d2d 	bl	32cb0 <CString::Compare(char const*) const>
    f7f8:	e2505000 	subs	r5, r0, #0
    f7fc:	1a000034 	bne	f8d4 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x1d0>
    f800:	e1a00007 	mov	r0, r7
    f804:	eb000371 	bl	105d0 <CUSBFunction::GetDevice() const>
    f808:	e1a01005 	mov	r1, r5
    f80c:	ebfffb46 	bl	e52c <CUSBDevice::GetName(TDeviceNameSelector) const>
    f810:	e2506000 	subs	r6, r0, #0
    f814:	0a000065 	beq	f9b0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2ac>
    f818:	e30a1df8 	movw	r1, #44536	@ 0xadf8
    f81c:	e3401003 	movt	r1, #3
    f820:	eb008d22 	bl	32cb0 <CString::Compare(char const*) const>
    f824:	e3500000 	cmp	r0, #0
    f828:	1a000056 	bne	f988 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x284>
    f82c:	e5963000 	ldr	r3, [r6]
    f830:	e1a00006 	mov	r0, r6
    f834:	e5933004 	ldr	r3, [r3, #4]
    f838:	e12fff33 	blx	r3
    f83c:	e3a05000 	mov	r5, #0
    f840:	eaffffd5 	b	f79c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x98>
    f844:	eb007bdf 	bl	2e7c8 <CLogger::Get()>
    f848:	e58d5000 	str	r5, [sp]
    f84c:	e3a02002 	mov	r2, #2
    f850:	e1a05006 	mov	r5, r6
    f854:	e30a3d8c 	movw	r3, #44428	@ 0xad8c
    f858:	e3403003 	movt	r3, #3
    f85c:	e30a1dac 	movw	r1, #44460	@ 0xadac
    f860:	e3401003 	movt	r1, #3
    f864:	eb007da0 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f868:	e1a00005 	mov	r0, r5
    f86c:	e28dd00c 	add	sp, sp, #12
    f870:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    f874:	e30a1d54 	movw	r1, #44372	@ 0xad54
    f878:	e3401003 	movt	r1, #3
    f87c:	e30a0d6c 	movw	r0, #44396	@ 0xad6c
    f880:	e3400003 	movt	r0, #3
    f884:	e3a02038 	mov	r2, #56	@ 0x38
    f888:	eb007153 	bl	2bddc <assertion_failed>
    f88c:	e30a1d54 	movw	r1, #44372	@ 0xad54
    f890:	e3401003 	movt	r1, #3
    f894:	e30a09b8 	movw	r0, #43448	@ 0xa9b8
    f898:	e3400003 	movt	r0, #3
    f89c:	e3a02039 	mov	r2, #57	@ 0x39
    f8a0:	eb00714d 	bl	2bddc <assertion_failed>
    f8a4:	e30a1d54 	movw	r1, #44372	@ 0xad54
    f8a8:	e3401003 	movt	r1, #3
    f8ac:	e30a0d7c 	movw	r0, #44412	@ 0xad7c
    f8b0:	e3400003 	movt	r0, #3
    f8b4:	e3a0203c 	mov	r2, #60	@ 0x3c
    f8b8:	eb007147 	bl	2bddc <assertion_failed>
    f8bc:	e3a00038 	mov	r0, #56	@ 0x38
    f8c0:	eb009a17 	bl	36124 <operator new(unsigned int)>
    f8c4:	e1a01007 	mov	r1, r7
    f8c8:	e1a05000 	mov	r5, r0
    f8cc:	eb0012e9 	bl	14478 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>
    f8d0:	eaffffa6 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f8d4:	e1a00004 	mov	r0, r4
    f8d8:	e30a1e04 	movw	r1, #44548	@ 0xae04
    f8dc:	e3401003 	movt	r1, #3
    f8e0:	eb008cf2 	bl	32cb0 <CString::Compare(char const*) const>
    f8e4:	e3500000 	cmp	r0, #0
    f8e8:	1a000005 	bne	f904 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x200>
    f8ec:	e3a00058 	mov	r0, #88	@ 0x58
    f8f0:	eb009a0b 	bl	36124 <operator new(unsigned int)>
    f8f4:	e1a01007 	mov	r1, r7
    f8f8:	e1a05000 	mov	r5, r0
    f8fc:	eb001813 	bl	15950 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>
    f900:	eaffff9a 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f904:	e1a00004 	mov	r0, r4
    f908:	e30a1e10 	movw	r1, #44560	@ 0xae10
    f90c:	e3401003 	movt	r1, #3
    f910:	eb008ce6 	bl	32cb0 <CString::Compare(char const*) const>
    f914:	e3500000 	cmp	r0, #0
    f918:	0a000005 	beq	f934 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x230>
    f91c:	e1a00004 	mov	r0, r4
    f920:	e30a1e1c 	movw	r1, #44572	@ 0xae1c
    f924:	e3401003 	movt	r1, #3
    f928:	eb008ce0 	bl	32cb0 <CString::Compare(char const*) const>
    f92c:	e3500000 	cmp	r0, #0
    f930:	1a000024 	bne	f9c8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2c4>
    f934:	e1a00007 	mov	r0, r7
    f938:	eb000324 	bl	105d0 <CUSBFunction::GetDevice() const>
    f93c:	e3a01000 	mov	r1, #0
    f940:	ebfffaf9 	bl	e52c <CUSBDevice::GetName(TDeviceNameSelector) const>
    f944:	e2506000 	subs	r6, r0, #0
    f948:	0a00002a 	beq	f9f8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x2f4>
    f94c:	e30a1e34 	movw	r1, #44596	@ 0xae34
    f950:	e3401003 	movt	r1, #3
    f954:	eb008cd5 	bl	32cb0 <CString::Compare(char const*) const>
    f958:	e3500000 	cmp	r0, #0
    f95c:	0affffb2 	beq	f82c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x128>
    f960:	e1a00007 	mov	r0, r7
    f964:	ebfffecc 	bl	f49c <CUSBDeviceFactory::GetGenericHIDDevice(CUSBFunction*)>
    f968:	e5963000 	ldr	r3, [r6]
    f96c:	e1a05000 	mov	r5, r0
    f970:	e1a00006 	mov	r0, r6
    f974:	e5933004 	ldr	r3, [r3, #4]
    f978:	e12fff33 	blx	r3
    f97c:	e3550000 	cmp	r5, #0
    f980:	1affff7a 	bne	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f984:	eaffffac 	b	f83c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    f988:	e3000554 	movw	r0, #1364	@ 0x554
    f98c:	eb0099e4 	bl	36124 <operator new(unsigned int)>
    f990:	e1a01007 	mov	r1, r7
    f994:	e1a05000 	mov	r5, r0
    f998:	eb0011a2 	bl	14028 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>
    f99c:	e5963000 	ldr	r3, [r6]
    f9a0:	e1a00006 	mov	r0, r6
    f9a4:	e5933004 	ldr	r3, [r3, #4]
    f9a8:	e12fff33 	blx	r3
    f9ac:	eaffff6f 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f9b0:	e30a1d54 	movw	r1, #44372	@ 0xad54
    f9b4:	e3401003 	movt	r1, #3
    f9b8:	e30a0de8 	movw	r0, #44520	@ 0xade8
    f9bc:	e3400003 	movt	r0, #3
    f9c0:	e3a02053 	mov	r2, #83	@ 0x53
    f9c4:	eb007104 	bl	2bddc <assertion_failed>
    f9c8:	e1a00004 	mov	r0, r4
    f9cc:	e30a1e28 	movw	r1, #44584	@ 0xae28
    f9d0:	e3401003 	movt	r1, #3
    f9d4:	eb008cb5 	bl	32cb0 <CString::Compare(char const*) const>
    f9d8:	e3500000 	cmp	r0, #0
    f9dc:	1a00000b 	bne	fa10 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x30c>
    f9e0:	e3a00d06 	mov	r0, #384	@ 0x180
    f9e4:	eb0099ce 	bl	36124 <operator new(unsigned int)>
    f9e8:	e1a01007 	mov	r1, r7
    f9ec:	e1a05000 	mov	r5, r0
    f9f0:	eb000410 	bl	10a38 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>
    f9f4:	eaffff5d 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    f9f8:	e30a1d54 	movw	r1, #44372	@ 0xad54
    f9fc:	e3401003 	movt	r1, #3
    fa00:	e30a0de8 	movw	r0, #44520	@ 0xade8
    fa04:	e3400003 	movt	r0, #3
    fa08:	e3a02064 	mov	r2, #100	@ 0x64
    fa0c:	eb0070f2 	bl	2bddc <assertion_failed>
    fa10:	e1a00004 	mov	r0, r4
    fa14:	e30a1e40 	movw	r1, #44608	@ 0xae40
    fa18:	e3401003 	movt	r1, #3
    fa1c:	eb008ca3 	bl	32cb0 <CString::Compare(char const*) const>
    fa20:	e3500000 	cmp	r0, #0
    fa24:	0a000005 	beq	fa40 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x33c>
    fa28:	e1a00004 	mov	r0, r4
    fa2c:	e30a1e4c 	movw	r1, #44620	@ 0xae4c
    fa30:	e3401003 	movt	r1, #3
    fa34:	eb008c9d 	bl	32cb0 <CString::Compare(char const*) const>
    fa38:	e3500000 	cmp	r0, #0
    fa3c:	1a000005 	bne	fa58 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x354>
    fa40:	e3a00f53 	mov	r0, #332	@ 0x14c
    fa44:	eb0099b6 	bl	36124 <operator new(unsigned int)>
    fa48:	e1a01007 	mov	r1, r7
    fa4c:	e1a05000 	mov	r5, r0
    fa50:	eb000636 	bl	11330 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>
    fa54:	eaffff45 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fa58:	e1a00004 	mov	r0, r4
    fa5c:	e30a1e58 	movw	r1, #44632	@ 0xae58
    fa60:	e3401003 	movt	r1, #3
    fa64:	eb008c91 	bl	32cb0 <CString::Compare(char const*) const>
    fa68:	e3500000 	cmp	r0, #0
    fa6c:	0a000005 	beq	fa88 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x384>
    fa70:	e1a00004 	mov	r0, r4
    fa74:	e30a1e64 	movw	r1, #44644	@ 0xae64
    fa78:	e3401003 	movt	r1, #3
    fa7c:	eb008c8b 	bl	32cb0 <CString::Compare(char const*) const>
    fa80:	e3500000 	cmp	r0, #0
    fa84:	1a000005 	bne	faa0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x39c>
    fa88:	e3a00e13 	mov	r0, #304	@ 0x130
    fa8c:	eb0099a4 	bl	36124 <operator new(unsigned int)>
    fa90:	e1a01007 	mov	r1, r7
    fa94:	e1a05000 	mov	r5, r0
    fa98:	eb000bd4 	bl	129f0 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>
    fa9c:	eaffff33 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    faa0:	e1a00004 	mov	r0, r4
    faa4:	e30a1e70 	movw	r1, #44656	@ 0xae70
    faa8:	e3401003 	movt	r1, #3
    faac:	eb008c7f 	bl	32cb0 <CString::Compare(char const*) const>
    fab0:	e3500000 	cmp	r0, #0
    fab4:	0a000005 	beq	fad0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3cc>
    fab8:	e1a00004 	mov	r0, r4
    fabc:	e30a1e7c 	movw	r1, #44668	@ 0xae7c
    fac0:	e3401003 	movt	r1, #3
    fac4:	eb008c79 	bl	32cb0 <CString::Compare(char const*) const>
    fac8:	e3500000 	cmp	r0, #0
    facc:	1a000005 	bne	fae8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3e4>
    fad0:	e3a00f4d 	mov	r0, #308	@ 0x134
    fad4:	eb009992 	bl	36124 <operator new(unsigned int)>
    fad8:	e1a01007 	mov	r1, r7
    fadc:	e1a05000 	mov	r5, r0
    fae0:	eb000cfe 	bl	12ee0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>
    fae4:	eaffff21 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fae8:	e1a00004 	mov	r0, r4
    faec:	e30a1e88 	movw	r1, #44680	@ 0xae88
    faf0:	e3401003 	movt	r1, #3
    faf4:	eb008c6d 	bl	32cb0 <CString::Compare(char const*) const>
    faf8:	e3500000 	cmp	r0, #0
    fafc:	0afffff3 	beq	fad0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3cc>
    fb00:	e1a00004 	mov	r0, r4
    fb04:	e30a1e94 	movw	r1, #44692	@ 0xae94
    fb08:	e3401003 	movt	r1, #3
    fb0c:	eb008c67 	bl	32cb0 <CString::Compare(char const*) const>
    fb10:	e3500000 	cmp	r0, #0
    fb14:	0affffed 	beq	fad0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x3cc>
    fb18:	e1a00004 	mov	r0, r4
    fb1c:	e30a1ea0 	movw	r1, #44704	@ 0xaea0
    fb20:	e3401003 	movt	r1, #3
    fb24:	eb008c61 	bl	32cb0 <CString::Compare(char const*) const>
    fb28:	e3500000 	cmp	r0, #0
    fb2c:	1a000005 	bne	fb48 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x444>
    fb30:	e3a00f4d 	mov	r0, #308	@ 0x134
    fb34:	eb00997a 	bl	36124 <operator new(unsigned int)>
    fb38:	e1a01007 	mov	r1, r7
    fb3c:	e1a05000 	mov	r5, r0
    fb40:	eb000a2d 	bl	123fc <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>
    fb44:	eaffff09 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fb48:	e1a00004 	mov	r0, r4
    fb4c:	e30a1eac 	movw	r1, #44716	@ 0xaeac
    fb50:	e3401003 	movt	r1, #3
    fb54:	eb008c55 	bl	32cb0 <CString::Compare(char const*) const>
    fb58:	e3500000 	cmp	r0, #0
    fb5c:	0a000005 	beq	fb78 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x474>
    fb60:	e1a00004 	mov	r0, r4
    fb64:	e30a1eb8 	movw	r1, #44728	@ 0xaeb8
    fb68:	e3401003 	movt	r1, #3
    fb6c:	eb008c4f 	bl	32cb0 <CString::Compare(char const*) const>
    fb70:	e3500000 	cmp	r0, #0
    fb74:	1a000005 	bne	fb90 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x48c>
    fb78:	e3a00024 	mov	r0, #36	@ 0x24
    fb7c:	eb009968 	bl	36124 <operator new(unsigned int)>
    fb80:	e1a01007 	mov	r1, r7
    fb84:	e1a05000 	mov	r5, r0
    fb88:	eb001981 	bl	16194 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>
    fb8c:	eafffef7 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fb90:	e1a00004 	mov	r0, r4
    fb94:	e30a1ec4 	movw	r1, #44740	@ 0xaec4
    fb98:	e3401003 	movt	r1, #3
    fb9c:	eb008c43 	bl	32cb0 <CString::Compare(char const*) const>
    fba0:	e3500000 	cmp	r0, #0
    fba4:	1a000005 	bne	fbc0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4bc>
    fba8:	e3a00028 	mov	r0, #40	@ 0x28
    fbac:	eb00995c 	bl	36124 <operator new(unsigned int)>
    fbb0:	e1a01007 	mov	r1, r7
    fbb4:	e1a05000 	mov	r5, r0
    fbb8:	eb002f93 	bl	1ba0c <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>
    fbbc:	eafffeeb 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fbc0:	e1a00004 	mov	r0, r4
    fbc4:	e30a1ed0 	movw	r1, #44752	@ 0xaed0
    fbc8:	e3401003 	movt	r1, #3
    fbcc:	eb008c37 	bl	32cb0 <CString::Compare(char const*) const>
    fbd0:	e3500000 	cmp	r0, #0
    fbd4:	1a000005 	bne	fbf0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x4ec>
    fbd8:	e3a00028 	mov	r0, #40	@ 0x28
    fbdc:	eb009950 	bl	36124 <operator new(unsigned int)>
    fbe0:	e1a01007 	mov	r1, r7
    fbe4:	e1a05000 	mov	r5, r0
    fbe8:	eb002bdb 	bl	1ab5c <CLAN7800Device::CLAN7800Device(CUSBFunction*)>
    fbec:	eafffedf 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fbf0:	e1a00004 	mov	r0, r4
    fbf4:	e30a1edc 	movw	r1, #44764	@ 0xaedc
    fbf8:	e3401003 	movt	r1, #3
    fbfc:	eb008c2b 	bl	32cb0 <CString::Compare(char const*) const>
    fc00:	e3500000 	cmp	r0, #0
    fc04:	0a000005 	beq	fc20 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x51c>
    fc08:	e1a00004 	mov	r0, r4
    fc0c:	e30a1ee8 	movw	r1, #44776	@ 0xaee8
    fc10:	e3401003 	movt	r1, #3
    fc14:	eb008c25 	bl	32cb0 <CString::Compare(char const*) const>
    fc18:	e3500000 	cmp	r0, #0
    fc1c:	1a000005 	bne	fc38 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x534>
    fc20:	e3a0002c 	mov	r0, #44	@ 0x2c
    fc24:	eb00993e 	bl	36124 <operator new(unsigned int)>
    fc28:	e1a01007 	mov	r1, r7
    fc2c:	e1a05000 	mov	r5, r0
    fc30:	eb003348 	bl	1c958 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>
    fc34:	eafffecd 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fc38:	e1a00004 	mov	r0, r4
    fc3c:	e30a1ef4 	movw	r1, #44788	@ 0xaef4
    fc40:	e3401003 	movt	r1, #3
    fc44:	eb008c19 	bl	32cb0 <CString::Compare(char const*) const>
    fc48:	e3500000 	cmp	r0, #0
    fc4c:	0a000005 	beq	fc68 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x564>
    fc50:	e1a00004 	mov	r0, r4
    fc54:	e30a1f00 	movw	r1, #44800	@ 0xaf00
    fc58:	e3401003 	movt	r1, #3
    fc5c:	eb008c13 	bl	32cb0 <CString::Compare(char const*) const>
    fc60:	e3500000 	cmp	r0, #0
    fc64:	1a000005 	bne	fc80 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x57c>
    fc68:	e3a0002c 	mov	r0, #44	@ 0x2c
    fc6c:	eb00992c 	bl	36124 <operator new(unsigned int)>
    fc70:	e1a01007 	mov	r1, r7
    fc74:	e1a05000 	mov	r5, r0
    fc78:	eb0015a2 	bl	15308 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)>
    fc7c:	eafffebb 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fc80:	e1a00004 	mov	r0, r4
    fc84:	e30a1f0c 	movw	r1, #44812	@ 0xaf0c
    fc88:	e3401003 	movt	r1, #3
    fc8c:	eb008c07 	bl	32cb0 <CString::Compare(char const*) const>
    fc90:	e3500000 	cmp	r0, #0
    fc94:	1a000005 	bne	fcb0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5ac>
    fc98:	e3a00028 	mov	r0, #40	@ 0x28
    fc9c:	eb009920 	bl	36124 <operator new(unsigned int)>
    fca0:	e1a01007 	mov	r1, r7
    fca4:	e1a05000 	mov	r5, r0
    fca8:	eb003506 	bl	1d0c8 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>
    fcac:	eafffeaf 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fcb0:	e1a00004 	mov	r0, r4
    fcb4:	e30a1f18 	movw	r1, #44824	@ 0xaf18
    fcb8:	e3401003 	movt	r1, #3
    fcbc:	eb008bfb 	bl	32cb0 <CString::Compare(char const*) const>
    fcc0:	e3500000 	cmp	r0, #0
    fcc4:	0a000005 	beq	fce0 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5dc>
    fcc8:	e1a00004 	mov	r0, r4
    fccc:	e30a1f24 	movw	r1, #44836	@ 0xaf24
    fcd0:	e3401003 	movt	r1, #3
    fcd4:	eb008bf5 	bl	32cb0 <CString::Compare(char const*) const>
    fcd8:	e3500000 	cmp	r0, #0
    fcdc:	1a000005 	bne	fcf8 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x5f4>
    fce0:	e3a00044 	mov	r0, #68	@ 0x44
    fce4:	eb00990e 	bl	36124 <operator new(unsigned int)>
    fce8:	e1a01007 	mov	r1, r7
    fcec:	e1a05000 	mov	r5, r0
    fcf0:	eb00274f 	bl	19a34 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>
    fcf4:	eafffe9d 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fcf8:	eb0020ef 	bl	180bc <CUSBSerialCH341Device::GetDeviceIDTable()>
    fcfc:	e1a01000 	mov	r1, r0
    fd00:	e1a00004 	mov	r0, r4
    fd04:	ebfffe58 	bl	f66c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
    fd08:	e3500000 	cmp	r0, #0
    fd0c:	0a000005 	beq	fd28 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x624>
    fd10:	e3a00040 	mov	r0, #64	@ 0x40
    fd14:	eb009902 	bl	36124 <operator new(unsigned int)>
    fd18:	e1a01007 	mov	r1, r7
    fd1c:	e1a05000 	mov	r5, r0
    fd20:	eb0020dc 	bl	18098 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>
    fd24:	eafffe91 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fd28:	eb002242 	bl	18638 <CUSBSerialCP210xDevice::GetDeviceIDTable()>
    fd2c:	e1a01000 	mov	r1, r0
    fd30:	e1a00004 	mov	r0, r4
    fd34:	ebfffe4c 	bl	f66c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
    fd38:	e3500000 	cmp	r0, #0
    fd3c:	0a000005 	beq	fd58 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x654>
    fd40:	e3a00044 	mov	r0, #68	@ 0x44
    fd44:	eb0098f6 	bl	36124 <operator new(unsigned int)>
    fd48:	e1a01007 	mov	r1, r7
    fd4c:	e1a05000 	mov	r5, r0
    fd50:	eb00222d 	bl	1860c <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)>
    fd54:	eafffe85 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fd58:	eb0023ba 	bl	18c48 <CUSBSerialPL2303Device::GetDeviceIDTable()>
    fd5c:	e1a01000 	mov	r1, r0
    fd60:	e1a00004 	mov	r0, r4
    fd64:	ebfffe40 	bl	f66c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
    fd68:	e3500000 	cmp	r0, #0
    fd6c:	0a000005 	beq	fd88 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x684>
    fd70:	e3a00040 	mov	r0, #64	@ 0x40
    fd74:	eb0098ea 	bl	36124 <operator new(unsigned int)>
    fd78:	e1a01007 	mov	r1, r7
    fd7c:	e1a05000 	mov	r5, r0
    fd80:	eb0023a7 	bl	18c24 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>
    fd84:	eafffe79 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>
    fd88:	eb00260a 	bl	195b8 <CUSBSerialFT231XDevice::GetDeviceIDTable()>
    fd8c:	e1a01000 	mov	r1, r0
    fd90:	e1a00004 	mov	r0, r4
    fd94:	ebfffe34 	bl	f66c <CUSBDeviceFactory::FindDeviceID(CString*, TUSBDeviceID const*)>
    fd98:	e3500000 	cmp	r0, #0
    fd9c:	0afffea6 	beq	f83c <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x138>
    fda0:	e3a00040 	mov	r0, #64	@ 0x40
    fda4:	eb0098de 	bl	36124 <operator new(unsigned int)>
    fda8:	e1a01007 	mov	r1, r7
    fdac:	e1a05000 	mov	r5, r0
    fdb0:	eb0025f7 	bl	19594 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>
    fdb4:	eafffe6d 	b	f770 <CUSBDeviceFactory::GetDevice(CUSBFunction*, CString*)+0x6c>

0000fdb8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)>:
    fdb8:	e3a02000 	mov	r2, #0
    fdbc:	eddf0b0f 	vldr	d16, [pc, #60]	@ fe00 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*)+0x48>
    fdc0:	e280c008 	add	ip, r0, #8
    fdc4:	e1510002 	cmp	r1, r2
    fdc8:	e5801000 	str	r1, [r0]
    fdcc:	e1c020b4 	strh	r2, [r0, #4]
    fdd0:	e5c02006 	strb	r2, [r0, #6]
    fdd4:	f44c078f 	vst1.32	{d16}, [ip]
    fdd8:	e5c02010 	strb	r2, [r0, #16]
    fddc:	112fff1e 	bxne	lr
    fde0:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
    fde4:	e3401003 	movt	r1, #3
    fde8:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
    fdec:	e3400003 	movt	r0, #3
    fdf0:	e3a02024 	mov	r2, #36	@ 0x24
    fdf4:	e92d4010 	push	{r4, lr}
    fdf8:	eb006ff7 	bl	2bddc <assertion_failed>
    fdfc:	e320f000 	nop	{0}
    fe00:	00000008 	.word	0x00000008
    fe04:	00000001 	.word	0x00000001

0000fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>:
    fe08:	e92d4070 	push	{r4, r5, r6, lr}
    fe0c:	e3a0c001 	mov	ip, #1
    fe10:	e1a04000 	mov	r4, r0
    fe14:	e3510000 	cmp	r1, #0
    fe18:	e5801000 	str	r1, [r0]
    fe1c:	e580c00c 	str	ip, [r0, #12]
    fe20:	e5c0c010 	strb	ip, [r0, #16]
    fe24:	0a000043 	beq	ff38 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x130>
    fe28:	e3520000 	cmp	r2, #0
    fe2c:	0a000047 	beq	ff50 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x148>
    fe30:	e5d23000 	ldrb	r3, [r2]
    fe34:	e3530006 	cmp	r3, #6
    fe38:	9a00004a 	bls	ff68 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x160>
    fe3c:	e5d23001 	ldrb	r3, [r2, #1]
    fe40:	e3530005 	cmp	r3, #5
    fe44:	1a00004d 	bne	ff80 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x178>
    fe48:	e5d23003 	ldrb	r3, [r2, #3]
    fe4c:	e1a00001 	mov	r0, r1
    fe50:	e2033003 	and	r3, r3, #3
    fe54:	e3530002 	cmp	r3, #2
    fe58:	0a000020 	beq	fee0 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xd8>
    fe5c:	e3530003 	cmp	r3, #3
    fe60:	0a00002f 	beq	ff24 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x11c>
    fe64:	e3530001 	cmp	r3, #1
    fe68:	03a03003 	moveq	r3, #3
    fe6c:	1a000059 	bne	ffd8 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x1d0>
    fe70:	e5d21002 	ldrb	r1, [r2, #2]
    fe74:	e5c43005 	strb	r3, [r4, #5]
    fe78:	e5d23006 	ldrb	r3, [r2, #6]
    fe7c:	e3530001 	cmp	r3, #1
    fe80:	21a05003 	movcs	r5, r3
    fe84:	e201300f 	and	r3, r1, #15
    fe88:	e1a013a1 	lsr	r1, r1, #7
    fe8c:	e5c43004 	strb	r3, [r4, #4]
    fe90:	e5c41006 	strb	r1, [r4, #6]
    fe94:	33a05001 	movcc	r5, #1
    fe98:	e1d230b4 	ldrh	r3, [r2, #4]
    fe9c:	e7ea3053 	ubfx	r3, r3, #0, #11
    fea0:	e5843008 	str	r3, [r4, #8]
    fea4:	ebfffa2a 	bl	e754 <CUSBDevice::GetSpeed() const>
    fea8:	e3500001 	cmp	r0, #1
    feac:	9a00001e 	bls	ff2c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x124>
    feb0:	e3550010 	cmp	r5, #16
    feb4:	e3a02001 	mov	r2, #1
    feb8:	31a03005 	movcc	r3, r5
    febc:	23a03010 	movcs	r3, #16
    fec0:	e2433001 	sub	r3, r3, #1
    fec4:	e5940000 	ldr	r0, [r4]
    fec8:	e1a03312 	lsl	r3, r2, r3
    fecc:	e3530007 	cmp	r3, #7
    fed0:	e1a031a3 	lsr	r3, r3, #3
    fed4:	e584300c 	str	r3, [r4, #12]
    fed8:	d584200c 	strle	r2, [r4, #12]
    fedc:	ea000008 	b	ff04 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xfc>
    fee0:	e5d23002 	ldrb	r3, [r2, #2]
    fee4:	e5c4c005 	strb	ip, [r4, #5]
    fee8:	e203100f 	and	r1, r3, #15
    feec:	e5c41004 	strb	r1, [r4, #4]
    fef0:	e1a033a3 	lsr	r3, r3, #7
    fef4:	e5c43006 	strb	r3, [r4, #6]
    fef8:	e1d230b4 	ldrh	r3, [r2, #4]
    fefc:	e7ea3053 	ubfx	r3, r3, #0, #11
    ff00:	e5843008 	str	r3, [r4, #8]
    ff04:	ebfffa12 	bl	e754 <CUSBDevice::GetSpeed() const>
    ff08:	e3500000 	cmp	r0, #0
    ff0c:	1a000002 	bne	ff1c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    ff10:	e5d43005 	ldrb	r3, [r4, #5]
    ff14:	e3530001 	cmp	r3, #1
    ff18:	0a00001e 	beq	ff98 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x190>
    ff1c:	e1a00004 	mov	r0, r4
    ff20:	e8bd8070 	pop	{r4, r5, r6, pc}
    ff24:	e3a03002 	mov	r3, #2
    ff28:	eaffffd0 	b	fe70 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x68>
    ff2c:	e5940000 	ldr	r0, [r4]
    ff30:	e584500c 	str	r5, [r4, #12]
    ff34:	eafffff2 	b	ff04 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0xfc>
    ff38:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
    ff3c:	e3401003 	movt	r1, #3
    ff40:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
    ff44:	e3400003 	movt	r0, #3
    ff48:	e3a02033 	mov	r2, #51	@ 0x33
    ff4c:	eb006fa2 	bl	2bddc <assertion_failed>
    ff50:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
    ff54:	e3401003 	movt	r1, #3
    ff58:	e30a0f5c 	movw	r0, #44892	@ 0xaf5c
    ff5c:	e3400003 	movt	r0, #3
    ff60:	e3a02035 	mov	r2, #53	@ 0x35
    ff64:	eb006f9c 	bl	2bddc <assertion_failed>
    ff68:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
    ff6c:	e3401003 	movt	r1, #3
    ff70:	e30a0f68 	movw	r0, #44904	@ 0xaf68
    ff74:	e3400003 	movt	r0, #3
    ff78:	e3a02036 	mov	r2, #54	@ 0x36
    ff7c:	eb006f96 	bl	2bddc <assertion_failed>
    ff80:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
    ff84:	e3401003 	movt	r1, #3
    ff88:	e30a0f88 	movw	r0, #44936	@ 0xaf88
    ff8c:	e3400003 	movt	r0, #3
    ff90:	e3a02037 	mov	r2, #55	@ 0x37
    ff94:	eb006f90 	bl	2bddc <assertion_failed>
    ff98:	eb007a0a 	bl	2e7c8 <CLogger::Get()>
    ff9c:	e3a02002 	mov	r2, #2
    ffa0:	e30a3fb8 	movw	r3, #44984	@ 0xafb8
    ffa4:	e3403003 	movt	r3, #3
    ffa8:	e30a1fdc 	movw	r1, #45020	@ 0xafdc
    ffac:	e3401003 	movt	r1, #3
    ffb0:	eb007bcd 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    ffb4:	e5943008 	ldr	r3, [r4, #8]
    ffb8:	e3a02002 	mov	r2, #2
    ffbc:	e5c42005 	strb	r2, [r4, #5]
    ffc0:	e3530008 	cmp	r3, #8
    ffc4:	83a03008 	movhi	r3, #8
    ffc8:	85843008 	strhi	r3, [r4, #8]
    ffcc:	e3a03001 	mov	r3, #1
    ffd0:	e584300c 	str	r3, [r4, #12]
    ffd4:	eaffffd0 	b	ff1c <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)+0x114>
    ffd8:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
    ffdc:	e3401003 	movt	r1, #3
    ffe0:	e30a093c 	movw	r0, #43324	@ 0xa93c
    ffe4:	e3400003 	movt	r0, #3
    ffe8:	e3a02048 	mov	r2, #72	@ 0x48
    ffec:	eb006f7a 	bl	2bddc <assertion_failed>

0000fff0 <CUSBEndpoint::~CUSBEndpoint()>:
    fff0:	e12fff1e 	bx	lr

0000fff4 <CUSBEndpoint::GetDevice() const>:
    fff4:	e5900000 	ldr	r0, [r0]
    fff8:	e3500000 	cmp	r0, #0
    fffc:	112fff1e 	bxne	lr
   10000:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
   10004:	e3401003 	movt	r1, #3
   10008:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   1000c:	e3400003 	movt	r0, #3
   10010:	e3a020a3 	mov	r2, #163	@ 0xa3
   10014:	e92d4010 	push	{r4, lr}
   10018:	eb006f6f 	bl	2bddc <assertion_failed>

0001001c <CUSBEndpoint::GetNumber() const>:
   1001c:	e5d00004 	ldrb	r0, [r0, #4]
   10020:	e12fff1e 	bx	lr

00010024 <CUSBEndpoint::GetType() const>:
   10024:	e5d00005 	ldrb	r0, [r0, #5]
   10028:	e12fff1e 	bx	lr

0001002c <CUSBEndpoint::IsDirectionIn() const>:
   1002c:	e5d00006 	ldrb	r0, [r0, #6]
   10030:	e12fff1e 	bx	lr

00010034 <CUSBEndpoint::SetMaxPacketSize(unsigned int)>:
   10034:	e1a03000 	mov	r3, r0
   10038:	e3a00001 	mov	r0, #1
   1003c:	e5831008 	str	r1, [r3, #8]
   10040:	e12fff1e 	bx	lr

00010044 <CUSBEndpoint::GetMaxPacketSize() const>:
   10044:	e5900008 	ldr	r0, [r0, #8]
   10048:	e12fff1e 	bx	lr

0001004c <CUSBEndpoint::GetInterval() const>:
   1004c:	e5d03005 	ldrb	r3, [r0, #5]
   10050:	e2433002 	sub	r3, r3, #2
   10054:	e3530001 	cmp	r3, #1
   10058:	8a000001 	bhi	10064 <CUSBEndpoint::GetInterval() const+0x18>
   1005c:	e590000c 	ldr	r0, [r0, #12]
   10060:	e12fff1e 	bx	lr
   10064:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
   10068:	e3401003 	movt	r1, #3
   1006c:	e30a0fe0 	movw	r0, #45024	@ 0xafe0
   10070:	e3400003 	movt	r0, #3
   10074:	e3a020cb 	mov	r2, #203	@ 0xcb
   10078:	e92d4010 	push	{r4, lr}
   1007c:	eb006f56 	bl	2bddc <assertion_failed>

00010080 <CUSBEndpoint::GetNextPID(bool)>:
   10080:	e3510000 	cmp	r1, #0
   10084:	0a000004 	beq	1009c <CUSBEndpoint::GetNextPID(bool)+0x1c>
   10088:	e5d03005 	ldrb	r3, [r0, #5]
   1008c:	e3530000 	cmp	r3, #0
   10090:	1a000003 	bne	100a4 <CUSBEndpoint::GetNextPID(bool)+0x24>
   10094:	e3a00002 	mov	r0, #2
   10098:	e12fff1e 	bx	lr
   1009c:	e5d00010 	ldrb	r0, [r0, #16]
   100a0:	e12fff1e 	bx	lr
   100a4:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
   100a8:	e3401003 	movt	r1, #3
   100ac:	e30b0028 	movw	r0, #45096	@ 0xb028
   100b0:	e3400003 	movt	r0, #3
   100b4:	e3a020d5 	mov	r2, #213	@ 0xd5
   100b8:	e92d4010 	push	{r4, lr}
   100bc:	eb006f46 	bl	2bddc <assertion_failed>

000100c0 <CUSBEndpoint::SkipPID(unsigned int, bool)>:
   100c0:	e5d03005 	ldrb	r3, [r0, #5]
   100c4:	e3530003 	cmp	r3, #3
   100c8:	012fff1e 	bxeq	lr
   100cc:	e3520000 	cmp	r2, #0
   100d0:	e92d4010 	push	{r4, lr}
   100d4:	1a000009 	bne	10100 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x40>
   100d8:	e5d03010 	ldrb	r3, [r0, #16]
   100dc:	e3530001 	cmp	r3, #1
   100e0:	0a00000e 	beq	10120 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x60>
   100e4:	e3530002 	cmp	r3, #2
   100e8:	0a000008 	beq	10110 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x50>
   100ec:	e3530000 	cmp	r3, #0
   100f0:	1a000013 	bne	10144 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x84>
   100f4:	e3a03002 	mov	r3, #2
   100f8:	e5c03010 	strb	r3, [r0, #16]
   100fc:	e8bd8010 	pop	{r4, pc}
   10100:	e3530000 	cmp	r3, #0
   10104:	1a000008 	bne	1012c <CUSBEndpoint::SkipPID(unsigned int, bool)+0x6c>
   10108:	e5c03010 	strb	r3, [r0, #16]
   1010c:	e8bd8010 	pop	{r4, pc}
   10110:	e3110001 	tst	r1, #1
   10114:	13a03001 	movne	r3, #1
   10118:	15c03010 	strbne	r3, [r0, #16]
   1011c:	e8bd8010 	pop	{r4, pc}
   10120:	e3110001 	tst	r1, #1
   10124:	08bd8010 	popeq	{r4, pc}
   10128:	eafffff1 	b	100f4 <CUSBEndpoint::SkipPID(unsigned int, bool)+0x34>
   1012c:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
   10130:	e3401003 	movt	r1, #3
   10134:	e30b0028 	movw	r0, #45096	@ 0xb028
   10138:	e3400003 	movt	r0, #3
   1013c:	e3002102 	movw	r2, #258	@ 0x102
   10140:	eb006f25 	bl	2bddc <assertion_failed>
   10144:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
   10148:	e3401003 	movt	r1, #3
   1014c:	e30a093c 	movw	r0, #43324	@ 0xa93c
   10150:	e3400003 	movt	r0, #3
   10154:	e3a020fc 	mov	r2, #252	@ 0xfc
   10158:	eb006f1f 	bl	2bddc <assertion_failed>

0001015c <CUSBEndpoint::ResetPID()>:
   1015c:	e5d03005 	ldrb	r3, [r0, #5]
   10160:	e3530001 	cmp	r3, #1
   10164:	8a000001 	bhi	10170 <CUSBEndpoint::ResetPID()+0x14>
   10168:	e5c03010 	strb	r3, [r0, #16]
   1016c:	e12fff1e 	bx	lr
   10170:	e30a1f4c 	movw	r1, #44876	@ 0xaf4c
   10174:	e3401003 	movt	r1, #3
   10178:	e30b0048 	movw	r0, #45128	@ 0xb048
   1017c:	e3400003 	movt	r0, #3
   10180:	e92d4010 	push	{r4, lr}
   10184:	e300210d 	movw	r2, #269	@ 0x10d
   10188:	eb006f13 	bl	2bddc <assertion_failed>

0001018c <CUSBFunction::Initialize()>:
   1018c:	e3a00001 	mov	r0, #1
   10190:	e12fff1e 	bx	lr

00010194 <CUSBFunction::ReScanDevices()>:
   10194:	e3a00000 	mov	r0, #0
   10198:	e12fff1e 	bx	lr

0001019c <CUSBFunction::~CUSBFunction()>:
   1019c:	e92d4070 	push	{r4, r5, r6, lr}
   101a0:	e3a03000 	mov	r3, #0
   101a4:	e590500c 	ldr	r5, [r0, #12]
   101a8:	e59f2040 	ldr	r2, [pc, #64]	@ 101f0 <CUSBFunction::~CUSBFunction()+0x54>
   101ac:	e1a04000 	mov	r4, r0
   101b0:	e1550003 	cmp	r5, r3
   101b4:	e5802000 	str	r2, [r0]
   101b8:	e5803010 	str	r3, [r0, #16]
   101bc:	0a000004 	beq	101d4 <CUSBFunction::~CUSBFunction()+0x38>
   101c0:	e1a00005 	mov	r0, r5
   101c4:	eb003507 	bl	1d5e8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   101c8:	e3a0101c 	mov	r1, #28
   101cc:	e1a00005 	mov	r0, r5
   101d0:	eb0097eb 	bl	36184 <operator delete(void*, unsigned int)>
   101d4:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   101d8:	e2843008 	add	r3, r4, #8
   101dc:	e1a00004 	mov	r0, r4
   101e0:	f443078f 	vst1.32	{d16}, [r3]
   101e4:	eb007128 	bl	2c68c <CDevice::~CDevice()>
   101e8:	e1a00004 	mov	r0, r4
   101ec:	e8bd8070 	pop	{r4, r5, r6, pc}
   101f0:	0003eca8 	.word	0x0003eca8

000101f4 <CUSBFunction::RemoveDevice()>:
   101f4:	e5900008 	ldr	r0, [r0, #8]
   101f8:	e3500000 	cmp	r0, #0
   101fc:	0a000000 	beq	10204 <CUSBFunction::RemoveDevice()+0x10>
   10200:	eafff8b6 	b	e4e0 <CUSBDevice::RemoveDevice()>
   10204:	e30b1084 	movw	r1, #45188	@ 0xb084
   10208:	e3401003 	movt	r1, #3
   1020c:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   10210:	e3400003 	movt	r0, #3
   10214:	e3a02066 	mov	r2, #102	@ 0x66
   10218:	e92d4010 	push	{r4, lr}
   1021c:	eb006eee 	bl	2bddc <assertion_failed>

00010220 <CUSBFunction::~CUSBFunction()>:
   10220:	e92d4070 	push	{r4, r5, r6, lr}
   10224:	e3a03000 	mov	r3, #0
   10228:	e590500c 	ldr	r5, [r0, #12]
   1022c:	e59f204c 	ldr	r2, [pc, #76]	@ 10280 <CUSBFunction::~CUSBFunction()+0x60>
   10230:	e1a04000 	mov	r4, r0
   10234:	e1550003 	cmp	r5, r3
   10238:	e5802000 	str	r2, [r0]
   1023c:	e5803010 	str	r3, [r0, #16]
   10240:	0a000004 	beq	10258 <CUSBFunction::~CUSBFunction()+0x38>
   10244:	e1a00005 	mov	r0, r5
   10248:	eb0034e6 	bl	1d5e8 <CUSBConfigurationParser::~CUSBConfigurationParser()>
   1024c:	e3a0101c 	mov	r1, #28
   10250:	e1a00005 	mov	r0, r5
   10254:	eb0097ca 	bl	36184 <operator delete(void*, unsigned int)>
   10258:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   1025c:	e2843008 	add	r3, r4, #8
   10260:	e1a00004 	mov	r0, r4
   10264:	f443078f 	vst1.32	{d16}, [r3]
   10268:	eb007107 	bl	2c68c <CDevice::~CDevice()>
   1026c:	e1a00004 	mov	r0, r4
   10270:	e3a01014 	mov	r1, #20
   10274:	eb0097c2 	bl	36184 <operator delete(void*, unsigned int)>
   10278:	e1a00004 	mov	r0, r4
   1027c:	e8bd8070 	pop	{r4, r5, r6, pc}
   10280:	0003eca8 	.word	0x0003eca8

00010284 <CUSBFunction::Configure()>:
   10284:	e5903010 	ldr	r3, [r0, #16]
   10288:	e92d4030 	push	{r4, r5, lr}
   1028c:	e3530000 	cmp	r3, #0
   10290:	e24dd014 	sub	sp, sp, #20
   10294:	0a000027 	beq	10338 <CUSBFunction::Configure()+0xb4>
   10298:	e5d33003 	ldrb	r3, [r3, #3]
   1029c:	e3530000 	cmp	r3, #0
   102a0:	1a000002 	bne	102b0 <CUSBFunction::Configure()+0x2c>
   102a4:	e3a00001 	mov	r0, #1
   102a8:	e28dd014 	add	sp, sp, #20
   102ac:	e8bd8030 	pop	{r4, r5, pc}
   102b0:	e1a04000 	mov	r4, r0
   102b4:	e5900008 	ldr	r0, [r0, #8]
   102b8:	e3500000 	cmp	r0, #0
   102bc:	0a000023 	beq	10350 <CUSBFunction::Configure()+0xcc>
   102c0:	ebfff937 	bl	e7a4 <CUSBDevice::GetHost() const>
   102c4:	e5943008 	ldr	r3, [r4, #8]
   102c8:	e1a05000 	mov	r5, r0
   102cc:	e3530000 	cmp	r3, #0
   102d0:	0a000024 	beq	10368 <CUSBFunction::Configure()+0xe4>
   102d4:	e1a00003 	mov	r0, r3
   102d8:	ebfff927 	bl	e77c <CUSBDevice::GetEndpoint0() const>
   102dc:	e5942010 	ldr	r2, [r4, #16]
   102e0:	e3a04000 	mov	r4, #0
   102e4:	e58d400c 	str	r4, [sp, #12]
   102e8:	e58d4008 	str	r4, [sp, #8]
   102ec:	e1a01000 	mov	r1, r0
   102f0:	e1a00005 	mov	r0, r5
   102f4:	e5d23002 	ldrb	r3, [r2, #2]
   102f8:	e58d3004 	str	r3, [sp, #4]
   102fc:	e3a0300b 	mov	r3, #11
   10300:	e5d22003 	ldrb	r2, [r2, #3]
   10304:	e58d2000 	str	r2, [sp]
   10308:	e3a02001 	mov	r2, #1
   1030c:	eb000dc3 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10310:	e1500004 	cmp	r0, r4
   10314:	aaffffe2 	bge	102a4 <CUSBFunction::Configure()+0x20>
   10318:	eb00792a 	bl	2e7c8 <CLogger::Get()>
   1031c:	e59f105c 	ldr	r1, [pc, #92]	@ 10380 <CUSBFunction::Configure()+0xfc>
   10320:	e3a02001 	mov	r2, #1
   10324:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   10328:	e3403003 	movt	r3, #3
   1032c:	eb007aee 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10330:	e1a00004 	mov	r0, r4
   10334:	eaffffdb 	b	102a8 <CUSBFunction::Configure()+0x24>
   10338:	e30b1084 	movw	r1, #45188	@ 0xb084
   1033c:	e3401003 	movt	r1, #3
   10340:	e30b0094 	movw	r0, #45204	@ 0xb094
   10344:	e3400003 	movt	r0, #3
   10348:	e3a0204e 	mov	r2, #78	@ 0x4e
   1034c:	eb006ea2 	bl	2bddc <assertion_failed>
   10350:	e30b1084 	movw	r1, #45188	@ 0xb084
   10354:	e3401003 	movt	r1, #3
   10358:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   1035c:	e3400003 	movt	r0, #3
   10360:	e3a02090 	mov	r2, #144	@ 0x90
   10364:	eb006e9c 	bl	2bddc <assertion_failed>
   10368:	e30b1084 	movw	r1, #45188	@ 0xb084
   1036c:	e3401003 	movt	r1, #3
   10370:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   10374:	e3400003 	movt	r0, #3
   10378:	e3a0208a 	mov	r2, #138	@ 0x8a
   1037c:	eb006e96 	bl	2bddc <assertion_failed>
   10380:	0003ecd4 	.word	0x0003ecd4

00010384 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)>:
   10384:	e92d4070 	push	{r4, r5, r6, lr}
   10388:	e1a04000 	mov	r4, r0
   1038c:	e1a05001 	mov	r5, r1
   10390:	e1a06002 	mov	r6, r2
   10394:	eb0070e9 	bl	2c740 <CDevice::CDevice()>
   10398:	e3a03000 	mov	r3, #0
   1039c:	e59f2098 	ldr	r2, [pc, #152]	@ 1043c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xb8>
   103a0:	e1550003 	cmp	r5, r3
   103a4:	e5842000 	str	r2, [r4]
   103a8:	e5845008 	str	r5, [r4, #8]
   103ac:	e584300c 	str	r3, [r4, #12]
   103b0:	e5843010 	str	r3, [r4, #16]
   103b4:	0a00000e 	beq	103f4 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x70>
   103b8:	e3560000 	cmp	r6, #0
   103bc:	0a000012 	beq	1040c <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0x88>
   103c0:	e3a0001c 	mov	r0, #28
   103c4:	eb009756 	bl	36124 <operator new(unsigned int)>
   103c8:	e1a01006 	mov	r1, r6
   103cc:	e1a05000 	mov	r5, r0
   103d0:	eb003470 	bl	1d598 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   103d4:	e1a00005 	mov	r0, r5
   103d8:	e584500c 	str	r5, [r4, #12]
   103dc:	eb0034af 	bl	1d6a0 <CUSBConfigurationParser::GetCurrentDescriptor()>
   103e0:	e3500000 	cmp	r0, #0
   103e4:	e5840010 	str	r0, [r4, #16]
   103e8:	0a00000d 	beq	10424 <CUSBFunction::CUSBFunction(CUSBDevice*, CUSBConfigurationParser*)+0xa0>
   103ec:	e1a00004 	mov	r0, r4
   103f0:	e8bd8070 	pop	{r4, r5, r6, pc}
   103f4:	e30b1084 	movw	r1, #45188	@ 0xb084
   103f8:	e3401003 	movt	r1, #3
   103fc:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   10400:	e3400003 	movt	r0, #3
   10404:	e3a02022 	mov	r2, #34	@ 0x22
   10408:	eb006e73 	bl	2bddc <assertion_failed>
   1040c:	e30b1084 	movw	r1, #45188	@ 0xb084
   10410:	e3401003 	movt	r1, #3
   10414:	e30b00c4 	movw	r0, #45252	@ 0xb0c4
   10418:	e3400003 	movt	r0, #3
   1041c:	e3a02024 	mov	r2, #36	@ 0x24
   10420:	eb006e6d 	bl	2bddc <assertion_failed>
   10424:	e30b1084 	movw	r1, #45188	@ 0xb084
   10428:	e3401003 	movt	r1, #3
   1042c:	e30b0094 	movw	r0, #45204	@ 0xb094
   10430:	e3400003 	movt	r0, #3
   10434:	e3a02029 	mov	r2, #41	@ 0x29
   10438:	eb006e67 	bl	2bddc <assertion_failed>
   1043c:	0003eca8 	.word	0x0003eca8

00010440 <CUSBFunction::CUSBFunction(CUSBFunction*)>:
   10440:	e92d4070 	push	{r4, r5, r6, lr}
   10444:	e1a04000 	mov	r4, r0
   10448:	e1a05001 	mov	r5, r1
   1044c:	eb0070bb 	bl	2c740 <CDevice::CDevice()>
   10450:	e1a03004 	mov	r3, r4
   10454:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   10458:	e59f10c4 	ldr	r1, [pc, #196]	@ 10524 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xe4>
   1045c:	e3a02000 	mov	r2, #0
   10460:	e4831008 	str	r1, [r3], #8
   10464:	e1550002 	cmp	r5, r2
   10468:	f443078f 	vst1.32	{d16}, [r3]
   1046c:	e5842010 	str	r2, [r4, #16]
   10470:	0a000013 	beq	104c4 <CUSBFunction::CUSBFunction(CUSBFunction*)+0x84>
   10474:	e5953008 	ldr	r3, [r5, #8]
   10478:	e5843008 	str	r3, [r4, #8]
   1047c:	e3530000 	cmp	r3, #0
   10480:	0a000015 	beq	104dc <CUSBFunction::CUSBFunction(CUSBFunction*)+0x9c>
   10484:	e595300c 	ldr	r3, [r5, #12]
   10488:	e3530000 	cmp	r3, #0
   1048c:	0a000018 	beq	104f4 <CUSBFunction::CUSBFunction(CUSBFunction*)+0xb4>
   10490:	e3a0001c 	mov	r0, #28
   10494:	eb009722 	bl	36124 <operator new(unsigned int)>
   10498:	e595100c 	ldr	r1, [r5, #12]
   1049c:	e1a05000 	mov	r5, r0
   104a0:	eb00343c 	bl	1d598 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>
   104a4:	e1a00005 	mov	r0, r5
   104a8:	e584500c 	str	r5, [r4, #12]
   104ac:	eb00347b 	bl	1d6a0 <CUSBConfigurationParser::GetCurrentDescriptor()>
   104b0:	e3500000 	cmp	r0, #0
   104b4:	e5840010 	str	r0, [r4, #16]
   104b8:	0a000013 	beq	1050c <CUSBFunction::CUSBFunction(CUSBFunction*)+0xcc>
   104bc:	e1a00004 	mov	r0, r4
   104c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   104c4:	e30b1084 	movw	r1, #45188	@ 0xb084
   104c8:	e3401003 	movt	r1, #3
   104cc:	e30b00d8 	movw	r0, #45272	@ 0xb0d8
   104d0:	e3400003 	movt	r0, #3
   104d4:	e3a02031 	mov	r2, #49	@ 0x31
   104d8:	eb006e3f 	bl	2bddc <assertion_failed>
   104dc:	e30b1084 	movw	r1, #45188	@ 0xb084
   104e0:	e3401003 	movt	r1, #3
   104e4:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   104e8:	e3400003 	movt	r0, #3
   104ec:	e3a02033 	mov	r2, #51	@ 0x33
   104f0:	eb006e39 	bl	2bddc <assertion_failed>
   104f4:	e30b1084 	movw	r1, #45188	@ 0xb084
   104f8:	e3401003 	movt	r1, #3
   104fc:	e30b00e8 	movw	r0, #45288	@ 0xb0e8
   10500:	e3400003 	movt	r0, #3
   10504:	e3a02035 	mov	r2, #53	@ 0x35
   10508:	eb006e33 	bl	2bddc <assertion_failed>
   1050c:	e30b1084 	movw	r1, #45188	@ 0xb084
   10510:	e3401003 	movt	r1, #3
   10514:	e30b0094 	movw	r0, #45204	@ 0xb094
   10518:	e3400003 	movt	r0, #3
   1051c:	e3a0203a 	mov	r2, #58	@ 0x3a
   10520:	eb006e2d 	bl	2bddc <assertion_failed>
   10524:	0003eca8 	.word	0x0003eca8

00010528 <CUSBFunction::GetInterfaceName() const>:
   10528:	e92d4030 	push	{r4, r5, lr}
   1052c:	e1a05000 	mov	r5, r0
   10530:	e3a00010 	mov	r0, #16
   10534:	e24dd00c 	sub	sp, sp, #12
   10538:	eb0096f9 	bl	36124 <operator new(unsigned int)>
   1053c:	e30a19a4 	movw	r1, #43428	@ 0xa9a4
   10540:	e3401003 	movt	r1, #3
   10544:	e1a04000 	mov	r4, r0
   10548:	eb008943 	bl	32a5c <CString::CString(char const*)>
   1054c:	e5951010 	ldr	r1, [r5, #16]
   10550:	e3510000 	cmp	r1, #0
   10554:	0a000004 	beq	1056c <CUSBFunction::GetInterfaceName() const+0x44>
   10558:	e5d12005 	ldrb	r2, [r1, #5]
   1055c:	e2423001 	sub	r3, r2, #1
   10560:	e6ef3073 	uxtb	r3, r3
   10564:	e35300fd 	cmp	r3, #253	@ 0xfd
   10568:	9a000002 	bls	10578 <CUSBFunction::GetInterfaceName() const+0x50>
   1056c:	e1a00004 	mov	r0, r4
   10570:	e28dd00c 	add	sp, sp, #12
   10574:	e8bd8030 	pop	{r4, r5, pc}
   10578:	e5d13006 	ldrb	r3, [r1, #6]
   1057c:	e1a00004 	mov	r0, r4
   10580:	e5d11007 	ldrb	r1, [r1, #7]
   10584:	e58d1000 	str	r1, [sp]
   10588:	e30b1108 	movw	r1, #45320	@ 0xb108
   1058c:	e3401003 	movt	r1, #3
   10590:	eb008ee4 	bl	34128 <CString::Format(char const*, ...)>
   10594:	e1a00004 	mov	r0, r4
   10598:	e28dd00c 	add	sp, sp, #12
   1059c:	e8bd8030 	pop	{r4, r5, pc}

000105a0 <CUSBFunction::GetNumEndpoints() const>:
   105a0:	e5903010 	ldr	r3, [r0, #16]
   105a4:	e3530000 	cmp	r3, #0
   105a8:	0a000001 	beq	105b4 <CUSBFunction::GetNumEndpoints() const+0x14>
   105ac:	e5d30004 	ldrb	r0, [r3, #4]
   105b0:	e12fff1e 	bx	lr
   105b4:	e30b1084 	movw	r1, #45188	@ 0xb084
   105b8:	e3401003 	movt	r1, #3
   105bc:	e30b0094 	movw	r0, #45204	@ 0xb094
   105c0:	e3400003 	movt	r0, #3
   105c4:	e3a0207e 	mov	r2, #126	@ 0x7e
   105c8:	e92d4010 	push	{r4, lr}
   105cc:	eb006e02 	bl	2bddc <assertion_failed>

000105d0 <CUSBFunction::GetDevice() const>:
   105d0:	e5900008 	ldr	r0, [r0, #8]
   105d4:	e3500000 	cmp	r0, #0
   105d8:	112fff1e 	bxne	lr
   105dc:	e30b1084 	movw	r1, #45188	@ 0xb084
   105e0:	e3401003 	movt	r1, #3
   105e4:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   105e8:	e3400003 	movt	r0, #3
   105ec:	e3a02084 	mov	r2, #132	@ 0x84
   105f0:	e92d4010 	push	{r4, lr}
   105f4:	eb006df8 	bl	2bddc <assertion_failed>

000105f8 <CUSBFunction::GetEndpoint0() const>:
   105f8:	e5900008 	ldr	r0, [r0, #8]
   105fc:	e3500000 	cmp	r0, #0
   10600:	0a000000 	beq	10608 <CUSBFunction::GetEndpoint0() const+0x10>
   10604:	eafff85c 	b	e77c <CUSBDevice::GetEndpoint0() const>
   10608:	e30b1084 	movw	r1, #45188	@ 0xb084
   1060c:	e3401003 	movt	r1, #3
   10610:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   10614:	e3400003 	movt	r0, #3
   10618:	e3a0208a 	mov	r2, #138	@ 0x8a
   1061c:	e92d4010 	push	{r4, lr}
   10620:	eb006ded 	bl	2bddc <assertion_failed>

00010624 <CUSBFunction::GetHost() const>:
   10624:	e5900008 	ldr	r0, [r0, #8]
   10628:	e3500000 	cmp	r0, #0
   1062c:	0a000000 	beq	10634 <CUSBFunction::GetHost() const+0x10>
   10630:	eafff85b 	b	e7a4 <CUSBDevice::GetHost() const>
   10634:	e30b1084 	movw	r1, #45188	@ 0xb084
   10638:	e3401003 	movt	r1, #3
   1063c:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   10640:	e3400003 	movt	r0, #3
   10644:	e3a02090 	mov	r2, #144	@ 0x90
   10648:	e92d4010 	push	{r4, lr}
   1064c:	eb006de2 	bl	2bddc <assertion_failed>

00010650 <CUSBFunction::GetDescriptor(unsigned char)>:
   10650:	e590000c 	ldr	r0, [r0, #12]
   10654:	e3500000 	cmp	r0, #0
   10658:	0a000000 	beq	10660 <CUSBFunction::GetDescriptor(unsigned char)+0x10>
   1065c:	ea0033e4 	b	1d5f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   10660:	e30b1084 	movw	r1, #45188	@ 0xb084
   10664:	e3401003 	movt	r1, #3
   10668:	e30a09fc 	movw	r0, #43516	@ 0xa9fc
   1066c:	e3400003 	movt	r0, #3
   10670:	e3a02096 	mov	r2, #150	@ 0x96
   10674:	e92d4010 	push	{r4, lr}
   10678:	eb006dd7 	bl	2bddc <assertion_failed>

0001067c <CUSBFunction::ConfigurationError(char const*) const>:
   1067c:	e590000c 	ldr	r0, [r0, #12]
   10680:	e92d4010 	push	{r4, lr}
   10684:	e3500000 	cmp	r0, #0
   10688:	0a000003 	beq	1069c <CUSBFunction::ConfigurationError(char const*) const+0x20>
   1068c:	e3510000 	cmp	r1, #0
   10690:	0a000007 	beq	106b4 <CUSBFunction::ConfigurationError(char const*) const+0x38>
   10694:	e8bd4010 	pop	{r4, lr}
   10698:	ea003413 	b	1d6ec <CUSBConfigurationParser::Error(char const*) const>
   1069c:	e30b1084 	movw	r1, #45188	@ 0xb084
   106a0:	e3401003 	movt	r1, #3
   106a4:	e30a09fc 	movw	r0, #43516	@ 0xa9fc
   106a8:	e3400003 	movt	r0, #3
   106ac:	e3a0209c 	mov	r2, #156	@ 0x9c
   106b0:	eb006dc9 	bl	2bddc <assertion_failed>
   106b4:	e30b1084 	movw	r1, #45188	@ 0xb084
   106b8:	e3401003 	movt	r1, #3
   106bc:	e30b0114 	movw	r0, #45332	@ 0xb114
   106c0:	e3400003 	movt	r0, #3
   106c4:	e3a0209d 	mov	r2, #157	@ 0x9d
   106c8:	eb006dc3 	bl	2bddc <assertion_failed>

000106cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>:
   106cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   106d0:	e1a04000 	mov	r4, r0
   106d4:	e5900010 	ldr	r0, [r0, #16]
   106d8:	e3500000 	cmp	r0, #0
   106dc:	0a00001d 	beq	10758 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x8c>
   106e0:	e1a07003 	mov	r7, r3
   106e4:	e594300c 	ldr	r3, [r4, #12]
   106e8:	e3530000 	cmp	r3, #0
   106ec:	0a00001f 	beq	10770 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xa4>
   106f0:	e5943008 	ldr	r3, [r4, #8]
   106f4:	e1a05001 	mov	r5, r1
   106f8:	e1a06002 	mov	r6, r2
   106fc:	e3530000 	cmp	r3, #0
   10700:	1a000009 	bne	1072c <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x60>
   10704:	ea00001f 	b	10788 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0xbc>
   10708:	e3a01004 	mov	r1, #4
   1070c:	e5940008 	ldr	r0, [r4, #8]
   10710:	ebfff841 	bl	e81c <CUSBDevice::GetDescriptor(unsigned char)>
   10714:	e594000c 	ldr	r0, [r4, #12]
   10718:	e3a01004 	mov	r1, #4
   1071c:	eb0033b4 	bl	1d5f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>
   10720:	e3500000 	cmp	r0, #0
   10724:	e5840010 	str	r0, [r4, #16]
   10728:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   1072c:	e5d0c005 	ldrb	ip, [r0, #5]
   10730:	e15c0005 	cmp	ip, r5
   10734:	1afffff3 	bne	10708 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   10738:	e5d01006 	ldrb	r1, [r0, #6]
   1073c:	e1510006 	cmp	r1, r6
   10740:	1afffff0 	bne	10708 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   10744:	e5d03007 	ldrb	r3, [r0, #7]
   10748:	e1530007 	cmp	r3, r7
   1074c:	1affffed 	bne	10708 <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)+0x3c>
   10750:	e3a00001 	mov	r0, #1
   10754:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10758:	e30b1084 	movw	r1, #45188	@ 0xb084
   1075c:	e3401003 	movt	r1, #3
   10760:	e30b0094 	movw	r0, #45204	@ 0xb094
   10764:	e3400003 	movt	r0, #3
   10768:	e3a020a3 	mov	r2, #163	@ 0xa3
   1076c:	eb006d9a 	bl	2bddc <assertion_failed>
   10770:	e30b1084 	movw	r1, #45188	@ 0xb084
   10774:	e3401003 	movt	r1, #3
   10778:	e30a09fc 	movw	r0, #43516	@ 0xa9fc
   1077c:	e3400003 	movt	r0, #3
   10780:	e3a020a4 	mov	r2, #164	@ 0xa4
   10784:	eb006d94 	bl	2bddc <assertion_failed>
   10788:	e30b1084 	movw	r1, #45188	@ 0xb084
   1078c:	e3401003 	movt	r1, #3
   10790:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   10794:	e3400003 	movt	r0, #3
   10798:	e3a020a5 	mov	r2, #165	@ 0xa5
   1079c:	eb006d8e 	bl	2bddc <assertion_failed>

000107a0 <CUSBFunction::GetInterfaceNumber() const>:
   107a0:	e5903010 	ldr	r3, [r0, #16]
   107a4:	e3530000 	cmp	r3, #0
   107a8:	0a000001 	beq	107b4 <CUSBFunction::GetInterfaceNumber() const+0x14>
   107ac:	e5d30002 	ldrb	r0, [r3, #2]
   107b0:	e12fff1e 	bx	lr
   107b4:	e30b1084 	movw	r1, #45188	@ 0xb084
   107b8:	e3401003 	movt	r1, #3
   107bc:	e30b0094 	movw	r0, #45204	@ 0xb094
   107c0:	e3400003 	movt	r0, #3
   107c4:	e3a020bb 	mov	r2, #187	@ 0xbb
   107c8:	e92d4010 	push	{r4, lr}
   107cc:	eb006d82 	bl	2bddc <assertion_failed>

000107d0 <CUSBFunction::GetInterfaceClass() const>:
   107d0:	e5903010 	ldr	r3, [r0, #16]
   107d4:	e3530000 	cmp	r3, #0
   107d8:	0a000001 	beq	107e4 <CUSBFunction::GetInterfaceClass() const+0x14>
   107dc:	e5d30005 	ldrb	r0, [r3, #5]
   107e0:	e12fff1e 	bx	lr
   107e4:	e30b1084 	movw	r1, #45188	@ 0xb084
   107e8:	e3401003 	movt	r1, #3
   107ec:	e30b0094 	movw	r0, #45204	@ 0xb094
   107f0:	e3400003 	movt	r0, #3
   107f4:	e3a020c1 	mov	r2, #193	@ 0xc1
   107f8:	e92d4010 	push	{r4, lr}
   107fc:	eb006d76 	bl	2bddc <assertion_failed>

00010800 <CUSBFunction::GetInterfaceSubClass() const>:
   10800:	e5903010 	ldr	r3, [r0, #16]
   10804:	e3530000 	cmp	r3, #0
   10808:	0a000001 	beq	10814 <CUSBFunction::GetInterfaceSubClass() const+0x14>
   1080c:	e5d30006 	ldrb	r0, [r3, #6]
   10810:	e12fff1e 	bx	lr
   10814:	e30b1084 	movw	r1, #45188	@ 0xb084
   10818:	e3401003 	movt	r1, #3
   1081c:	e30b0094 	movw	r0, #45204	@ 0xb094
   10820:	e3400003 	movt	r0, #3
   10824:	e3a020c7 	mov	r2, #199	@ 0xc7
   10828:	e92d4010 	push	{r4, lr}
   1082c:	eb006d6a 	bl	2bddc <assertion_failed>

00010830 <CUSBFunction::GetInterfaceProtocol() const>:
   10830:	e5903010 	ldr	r3, [r0, #16]
   10834:	e3530000 	cmp	r3, #0
   10838:	0a000001 	beq	10844 <CUSBFunction::GetInterfaceProtocol() const+0x14>
   1083c:	e5d30007 	ldrb	r0, [r3, #7]
   10840:	e12fff1e 	bx	lr
   10844:	e30b1084 	movw	r1, #45188	@ 0xb084
   10848:	e3401003 	movt	r1, #3
   1084c:	e30b0094 	movw	r0, #45204	@ 0xb094
   10850:	e3400003 	movt	r0, #3
   10854:	e3a020cd 	mov	r2, #205	@ 0xcd
   10858:	e92d4010 	push	{r4, lr}
   1085c:	eb006d5e 	bl	2bddc <assertion_failed>

00010860 <CUSBFunction::GetInterfaceDescriptor() const>:
   10860:	e5900010 	ldr	r0, [r0, #16]
   10864:	e3500000 	cmp	r0, #0
   10868:	112fff1e 	bxne	lr
   1086c:	e30b1084 	movw	r1, #45188	@ 0xb084
   10870:	e3401003 	movt	r1, #3
   10874:	e30b0094 	movw	r0, #45204	@ 0xb094
   10878:	e3400003 	movt	r0, #3
   1087c:	e3a020d3 	mov	r2, #211	@ 0xd3
   10880:	e92d4010 	push	{r4, lr}
   10884:	eb006d54 	bl	2bddc <assertion_failed>

00010888 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   10888:	e59f3014 	ldr	r3, [pc, #20]	@ 108a4 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x1c>
   1088c:	e92d4010 	push	{r4, lr}
   10890:	e1a04000 	mov	r4, r0
   10894:	e5803000 	str	r3, [r0]
   10898:	eb0003c3 	bl	117ac <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   1089c:	e1a00004 	mov	r0, r4
   108a0:	e8bd8010 	pop	{r4, pc}
   108a4:	0003ece8 	.word	0x0003ece8

000108a8 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()>:
   108a8:	e59f3020 	ldr	r3, [pc, #32]	@ 108d0 <CUSBGamePadPS3Device::~CUSBGamePadPS3Device()+0x28>
   108ac:	e92d4010 	push	{r4, lr}
   108b0:	e1a04000 	mov	r4, r0
   108b4:	e5803000 	str	r3, [r0]
   108b8:	eb0003bb 	bl	117ac <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>
   108bc:	e1a00004 	mov	r0, r4
   108c0:	e3a01d06 	mov	r1, #384	@ 0x180
   108c4:	eb00962e 	bl	36184 <operator delete(void*, unsigned int)>
   108c8:	e1a00004 	mov	r0, r4
   108cc:	e8bd8010 	pop	{r4, pc}
   108d0:	0003ece8 	.word	0x0003ece8

000108d4 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)>:
   108d4:	e92d4070 	push	{r4, r5, r6, lr}
   108d8:	e3a02030 	mov	r2, #48	@ 0x30
   108dc:	e1a04001 	mov	r4, r1
   108e0:	e24dd088 	sub	sp, sp, #136	@ 0x88
   108e4:	e2801d05 	add	r1, r0, #320	@ 0x140
   108e8:	e28d604f 	add	r6, sp, #79	@ 0x4f
   108ec:	e1a05000 	mov	r5, r0
   108f0:	e3c6603f 	bic	r6, r6, #63	@ 0x3f
   108f4:	e1a00006 	mov	r0, r6
   108f8:	eb009401 	bl	35904 <memcpy>
   108fc:	e3540001 	cmp	r4, #1
   10900:	0a00001f 	beq	10984 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xb0>
   10904:	e3540002 	cmp	r4, #2
   10908:	0a00001a 	beq	10978 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xa4>
   1090c:	e3540000 	cmp	r4, #0
   10910:	1a00001e 	bne	10990 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0xbc>
   10914:	e1a00005 	mov	r0, r5
   10918:	e5864001 	str	r4, [r6, #1]
   1091c:	ebffff40 	bl	10624 <CUSBFunction::GetHost() const>
   10920:	e1a04000 	mov	r4, r0
   10924:	e1a00005 	mov	r0, r5
   10928:	ebffff32 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1092c:	e1a01000 	mov	r1, r0
   10930:	e1a00005 	mov	r0, r5
   10934:	e1a05001 	mov	r5, r1
   10938:	ebffff98 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   1093c:	e300c201 	movw	ip, #513	@ 0x201
   10940:	e1a03000 	mov	r3, r0
   10944:	e3a02030 	mov	r2, #48	@ 0x30
   10948:	e98d0048 	stmib	sp, {r3, r6}
   1094c:	e1a01005 	mov	r1, r5
   10950:	e58d200c 	str	r2, [sp, #12]
   10954:	e1a00004 	mov	r0, r4
   10958:	e3a03009 	mov	r3, #9
   1095c:	e3a02021 	mov	r2, #33	@ 0x21
   10960:	e58dc000 	str	ip, [sp]
   10964:	eb000c2d 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10968:	e1e00000 	mvn	r0, r0
   1096c:	e1a00fa0 	lsr	r0, r0, #31
   10970:	e28dd088 	add	sp, sp, #136	@ 0x88
   10974:	e8bd8070 	pop	{r4, r5, r6, pc}
   10978:	e3a040fe 	mov	r4, #254	@ 0xfe
   1097c:	e34f4ffe 	movt	r4, #65534	@ 0xfffe
   10980:	eaffffe3 	b	10914 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x40>
   10984:	e30f4ffe 	movw	r4, #65534	@ 0xfffe
   10988:	e34040fe 	movt	r4, #254	@ 0xfe
   1098c:	eaffffe0 	b	10914 <CUSBGamePadPS3Device::SetRumbleMode(TGamePadRumbleMode)+0x40>
   10990:	e30b1124 	movw	r1, #45348	@ 0xb124
   10994:	e3401003 	movt	r1, #3
   10998:	e30a093c 	movw	r0, #43324	@ 0xa93c
   1099c:	e3400003 	movt	r0, #3
   109a0:	e300210e 	movw	r2, #270	@ 0x10e
   109a4:	eb006d0c 	bl	2bddc <assertion_failed>

000109a8 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)>:
   109a8:	e351000a 	cmp	r1, #10
   109ac:	9a000001 	bls	109b8 <CUSBGamePadPS3Device::SetLEDMode(TGamePadLEDMode)+0x10>
   109b0:	e3a00000 	mov	r0, #0
   109b4:	e12fff1e 	bx	lr
   109b8:	e30e3ce0 	movw	r3, #60640	@ 0xece0
   109bc:	e3403003 	movt	r3, #3
   109c0:	e0833001 	add	r3, r3, r1
   109c4:	e92d4070 	push	{r4, r5, r6, lr}
   109c8:	e1a04000 	mov	r4, r0
   109cc:	e24dd010 	sub	sp, sp, #16
   109d0:	e5d33054 	ldrb	r3, [r3, #84]	@ 0x54
   109d4:	e1a03083 	lsl	r3, r3, #1
   109d8:	e5c03149 	strb	r3, [r0, #329]	@ 0x149
   109dc:	ebffff10 	bl	10624 <CUSBFunction::GetHost() const>
   109e0:	e1a05000 	mov	r5, r0
   109e4:	e1a00004 	mov	r0, r4
   109e8:	ebffff02 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   109ec:	e1a06000 	mov	r6, r0
   109f0:	e1a00004 	mov	r0, r4
   109f4:	e2844d05 	add	r4, r4, #320	@ 0x140
   109f8:	ebffff68 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   109fc:	e300c201 	movw	ip, #513	@ 0x201
   10a00:	e1a03000 	mov	r3, r0
   10a04:	e3a02030 	mov	r2, #48	@ 0x30
   10a08:	e98d0018 	stmib	sp, {r3, r4}
   10a0c:	e1a01006 	mov	r1, r6
   10a10:	e58d200c 	str	r2, [sp, #12]
   10a14:	e1a00005 	mov	r0, r5
   10a18:	e3a03009 	mov	r3, #9
   10a1c:	e3a02021 	mov	r2, #33	@ 0x21
   10a20:	e58dc000 	str	ip, [sp]
   10a24:	eb000bfd 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10a28:	e1e00000 	mvn	r0, r0
   10a2c:	e1a00fa0 	lsr	r0, r0, #31
   10a30:	e28dd010 	add	sp, sp, #16
   10a34:	e8bd8070 	pop	{r4, r5, r6, pc}

00010a38 <CUSBGamePadPS3Device::CUSBGamePadPS3Device(CUSBFunction*)>:
   10a38:	e92d4070 	push	{r4, r5, r6, lr}
   10a3c:	e1a04000 	mov	r4, r0
   10a40:	e3a02000 	mov	r2, #0
   10a44:	eb000379 	bl	11830 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>
   10a48:	e30e5ce0 	movw	r5, #60640	@ 0xece0
   10a4c:	e3405003 	movt	r5, #3
   10a50:	e3a03000 	mov	r3, #0
   10a54:	e1a02003 	mov	r2, r3
   10a58:	e2851008 	add	r1, r5, #8
   10a5c:	e1a00004 	mov	r0, r4
   10a60:	e5841000 	str	r1, [r4]
   10a64:	e3a01003 	mov	r1, #3
   10a68:	ebffff17 	bl	106cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   10a6c:	e3a02030 	mov	r2, #48	@ 0x30
   10a70:	e1a03000 	mov	r3, r0
   10a74:	e2851060 	add	r1, r5, #96	@ 0x60
   10a78:	e2840d05 	add	r0, r4, #320	@ 0x140
   10a7c:	e5c4313a 	strb	r3, [r4, #314]	@ 0x13a
   10a80:	eb00939f 	bl	35904 <memcpy>
   10a84:	e1a00004 	mov	r0, r4
   10a88:	e8bd8070 	pop	{r4, r5, r6, pc}

00010a8c <CUSBGamePadPS3Device::PS3Enable()>:
   10a8c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   10a90:	e3002c42 	movw	r2, #3138	@ 0xc42
   10a94:	e1a04000 	mov	r4, r0
   10a98:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   10a9c:	e24dd08c 	sub	sp, sp, #140	@ 0x8c
   10aa0:	e28d504f 	add	r5, sp, #79	@ 0x4f
   10aa4:	e3c5503f 	bic	r5, r5, #63	@ 0x3f
   10aa8:	e1a03005 	mov	r3, r5
   10aac:	e4832004 	str	r2, [r3], #4
   10ab0:	edc30b0c 	vstr	d16, [r3, #48]	@ 0x30
   10ab4:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   10ab8:	edc30b04 	vstr	d16, [r3, #16]
   10abc:	edc30b06 	vstr	d16, [r3, #24]
   10ac0:	edc30b08 	vstr	d16, [r3, #32]
   10ac4:	edc30b0a 	vstr	d16, [r3, #40]	@ 0x28
   10ac8:	edc30b0d 	vstr	d16, [r3, #52]	@ 0x34
   10acc:	ebfffed4 	bl	10624 <CUSBFunction::GetHost() const>
   10ad0:	e1a06000 	mov	r6, r0
   10ad4:	e1a00004 	mov	r0, r4
   10ad8:	ebfffec6 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   10adc:	e1a07000 	mov	r7, r0
   10ae0:	e1a00004 	mov	r0, r4
   10ae4:	ebffff2d 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   10ae8:	e3a03ffd 	mov	r3, #1012	@ 0x3f4
   10aec:	e1a02000 	mov	r2, r0
   10af0:	e3a0c004 	mov	ip, #4
   10af4:	e58d2004 	str	r2, [sp, #4]
   10af8:	e1a01007 	mov	r1, r7
   10afc:	e58d3000 	str	r3, [sp]
   10b00:	e1a00006 	mov	r0, r6
   10b04:	e3a03009 	mov	r3, #9
   10b08:	e3a02021 	mov	r2, #33	@ 0x21
   10b0c:	e58d5008 	str	r5, [sp, #8]
   10b10:	e58dc00c 	str	ip, [sp, #12]
   10b14:	eb000bc1 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   10b18:	e3500000 	cmp	r0, #0
   10b1c:	b3a00000 	movlt	r0, #0
   10b20:	ba000004 	blt	10b38 <CUSBGamePadPS3Device::PS3Enable()+0xac>
   10b24:	e5943000 	ldr	r3, [r4]
   10b28:	e1a00004 	mov	r0, r4
   10b2c:	e5d4112c 	ldrb	r1, [r4, #300]	@ 0x12c
   10b30:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   10b34:	e12fff33 	blx	r3
   10b38:	e28dd08c 	add	sp, sp, #140	@ 0x8c
   10b3c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

00010b40 <CUSBGamePadPS3Device::Configure()>:
   10b40:	e5d0313a 	ldrb	r3, [r0, #314]	@ 0x13a
   10b44:	e92d4030 	push	{r4, r5, lr}
   10b48:	e3530000 	cmp	r3, #0
   10b4c:	e24dd00c 	sub	sp, sp, #12
   10b50:	0a00001d 	beq	10bcc <CUSBGamePadPS3Device::Configure()+0x8c>
   10b54:	e1a04000 	mov	r4, r0
   10b58:	eb0004c0 	bl	11e60 <CUSBGamePadStandardDevice::Configure()>
   10b5c:	e3500000 	cmp	r0, #0
   10b60:	0a000029 	beq	10c0c <CUSBGamePadPS3Device::Configure()+0xcc>
   10b64:	e2845f4a 	add	r5, r4, #296	@ 0x128
   10b68:	e1d530b0 	ldrh	r3, [r5]
   10b6c:	e2433031 	sub	r3, r3, #49	@ 0x31
   10b70:	e3530001 	cmp	r3, #1
   10b74:	8a000019 	bhi	10be0 <CUSBGamePadPS3Device::Configure()+0xa0>
   10b78:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   10b7c:	e284302c 	add	r3, r4, #44	@ 0x2c
   10b80:	e28420ec 	add	r2, r4, #236	@ 0xec
   10b84:	e3a00013 	mov	r0, #19
   10b88:	e3a01010 	mov	r1, #16
   10b8c:	e5840104 	str	r0, [r4, #260]	@ 0x104
   10b90:	e5841024 	str	r1, [r4, #36]	@ 0x24
   10b94:	f443078f 	vst1.32	{d16}, [r3]
   10b98:	e283300c 	add	r3, r3, #12
   10b9c:	e1530002 	cmp	r3, r2
   10ba0:	1afffffb 	bne	10b94 <CUSBGamePadPS3Device::Configure()+0x54>
   10ba4:	e3a03000 	mov	r3, #0
   10ba8:	e1a00004 	mov	r0, r4
   10bac:	e58430e8 	str	r3, [r4, #232]	@ 0xe8
   10bb0:	ebffffb5 	bl	10a8c <CUSBGamePadPS3Device::PS3Enable()>
   10bb4:	e3500000 	cmp	r0, #0
   10bb8:	0a00001c 	beq	10c30 <CUSBGamePadPS3Device::Configure()+0xf0>
   10bbc:	e1a00004 	mov	r0, r4
   10bc0:	e28dd00c 	add	sp, sp, #12
   10bc4:	e8bd4030 	pop	{r4, r5, lr}
   10bc8:	ea000a93 	b	1361c <CUSBHIDDevice::StartRequest()>
   10bcc:	e59f1080 	ldr	r1, [pc, #128]	@ 10c54 <CUSBGamePadPS3Device::Configure()+0x114>
   10bd0:	ebfffea9 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   10bd4:	e3a00000 	mov	r0, #0
   10bd8:	e28dd00c 	add	sp, sp, #12
   10bdc:	e8bd8030 	pop	{r4, r5, pc}
   10be0:	eb0076f8 	bl	2e7c8 <CLogger::Get()>
   10be4:	e1d5c0b0 	ldrh	ip, [r5]
   10be8:	e59f1064 	ldr	r1, [pc, #100]	@ 10c54 <CUSBGamePadPS3Device::Configure()+0x114>
   10bec:	e3a02001 	mov	r2, #1
   10bf0:	e58dc000 	str	ip, [sp]
   10bf4:	e30b3158 	movw	r3, #45400	@ 0xb158
   10bf8:	e3403003 	movt	r3, #3
   10bfc:	eb0078ba 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c00:	e3a00000 	mov	r0, #0
   10c04:	e28dd00c 	add	sp, sp, #12
   10c08:	e8bd8030 	pop	{r4, r5, pc}
   10c0c:	eb0076ed 	bl	2e7c8 <CLogger::Get()>
   10c10:	e59f103c 	ldr	r1, [pc, #60]	@ 10c54 <CUSBGamePadPS3Device::Configure()+0x114>
   10c14:	e3a02001 	mov	r2, #1
   10c18:	e30b3138 	movw	r3, #45368	@ 0xb138
   10c1c:	e3403003 	movt	r3, #3
   10c20:	eb0078b1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c24:	e3a00000 	mov	r0, #0
   10c28:	e28dd00c 	add	sp, sp, #12
   10c2c:	e8bd8030 	pop	{r4, r5, pc}
   10c30:	eb0076e4 	bl	2e7c8 <CLogger::Get()>
   10c34:	e59f1018 	ldr	r1, [pc, #24]	@ 10c54 <CUSBGamePadPS3Device::Configure()+0x114>
   10c38:	e3a02001 	mov	r2, #1
   10c3c:	e30b3174 	movw	r3, #45428	@ 0xb174
   10c40:	e3403003 	movt	r3, #3
   10c44:	eb0078a8 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10c48:	e3a00000 	mov	r0, #0
   10c4c:	e28dd00c 	add	sp, sp, #12
   10c50:	e8bd8030 	pop	{r4, r5, pc}
   10c54:	0003ed70 	.word	0x0003ed70

00010c58 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)>:
   10c58:	e2803f4a 	add	r3, r0, #296	@ 0x128
   10c5c:	e92d4070 	push	{r4, r5, r6, lr}
   10c60:	e1a0c000 	mov	ip, r0
   10c64:	e1a04001 	mov	r4, r1
   10c68:	e1d330b0 	ldrh	r3, [r3]
   10c6c:	e3530031 	cmp	r3, #49	@ 0x31
   10c70:	0a000038 	beq	10d58 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x100>
   10c74:	e3530032 	cmp	r3, #50	@ 0x32
   10c78:	0a000003 	beq	10c8c <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x34>
   10c7c:	e3530000 	cmp	r3, #0
   10c80:	1a00003c 	bne	10d78 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x120>
   10c84:	e8bd4070 	pop	{r4, r5, r6, lr}
   10c88:	ea000348 	b	119b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>
   10c8c:	e2814001 	add	r4, r1, #1
   10c90:	e5941002 	ldr	r1, [r4, #2]
   10c94:	e30007f8 	movw	r0, #2040	@ 0x7f8
   10c98:	e3a02b3e 	mov	r2, #63488	@ 0xf800
   10c9c:	e3402007 	movt	r2, #7
   10ca0:	e2845019 	add	r5, r4, #25
   10ca4:	e00002a1 	and	r0, r0, r1, lsr #5
   10ca8:	e7e23851 	ubfx	r3, r1, #16, #3
   10cac:	e0022581 	and	r2, r2, r1, lsl #11
   10cb0:	e1833000 	orr	r3, r3, r0
   10cb4:	e1833002 	orr	r3, r3, r2
   10cb8:	e58c3108 	str	r3, [ip, #264]	@ 0x108
   10cbc:	e59f00cc 	ldr	r0, [pc, #204]	@ 10d90 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x138>
   10cc0:	e284200d 	add	r2, r4, #13
   10cc4:	e5d43006 	ldrb	r3, [r4, #6]
   10cc8:	e3a0100c 	mov	r1, #12
   10ccc:	e58c3028 	str	r3, [ip, #40]	@ 0x28
   10cd0:	e5d43007 	ldrb	r3, [r4, #7]
   10cd4:	e58c3034 	str	r3, [ip, #52]	@ 0x34
   10cd8:	e5d43008 	ldrb	r3, [r4, #8]
   10cdc:	e58c3040 	str	r3, [ip, #64]	@ 0x40
   10ce0:	e5d43009 	ldrb	r3, [r4, #9]
   10ce4:	e58c304c 	str	r3, [ip, #76]	@ 0x4c
   10ce8:	e4903004 	ldr	r3, [r0], #4
   10cec:	e5f2e001 	ldrb	lr, [r2, #1]!
   10cf0:	e1550002 	cmp	r5, r2
   10cf4:	e023c391 	mla	r3, r1, r3, ip
   10cf8:	e583e028 	str	lr, [r3, #40]	@ 0x28
   10cfc:	1afffff9 	bne	10ce8 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x90>
   10d00:	e1d432b9 	ldrh	r3, [r4, #41]	@ 0x29
   10d04:	e30021ff 	movw	r2, #511	@ 0x1ff
   10d08:	e6bf3fb3 	rev16	r3, r3
   10d0c:	e6ff3073 	uxth	r3, r3
   10d10:	e0423003 	sub	r3, r2, r3
   10d14:	e58c310c 	str	r3, [ip, #268]	@ 0x10c
   10d18:	e1d432bb 	ldrh	r3, [r4, #43]	@ 0x2b
   10d1c:	e6bf3fb3 	rev16	r3, r3
   10d20:	e6ff3073 	uxth	r3, r3
   10d24:	e0423003 	sub	r3, r2, r3
   10d28:	e58c3110 	str	r3, [ip, #272]	@ 0x110
   10d2c:	e1d432bd 	ldrh	r3, [r4, #45]	@ 0x2d
   10d30:	e6bf3fb3 	rev16	r3, r3
   10d34:	e6ff3073 	uxth	r3, r3
   10d38:	e0422003 	sub	r2, r2, r3
   10d3c:	e58c2114 	str	r2, [ip, #276]	@ 0x114
   10d40:	e1d432bf 	ldrh	r3, [r4, #47]	@ 0x2f
   10d44:	e6bf3fb3 	rev16	r3, r3
   10d48:	e6ff3073 	uxth	r3, r3
   10d4c:	e2433006 	sub	r3, r3, #6
   10d50:	e58c3120 	str	r3, [ip, #288]	@ 0x120
   10d54:	e8bd8070 	pop	{r4, r5, r6, pc}
   10d58:	e3510000 	cmp	r1, #0
   10d5c:	1affffcb 	bne	10c90 <CUSBGamePadPS3Device::DecodeReport(unsigned char const*)+0x38>
   10d60:	e30b1124 	movw	r1, #45348	@ 0xb124
   10d64:	e3401003 	movt	r1, #3
   10d68:	e30b0194 	movw	r0, #45460	@ 0xb194
   10d6c:	e3400003 	movt	r0, #3
   10d70:	e3a02097 	mov	r2, #151	@ 0x97
   10d74:	eb006c18 	bl	2bddc <assertion_failed>
   10d78:	e30b1124 	movw	r1, #45348	@ 0xb124
   10d7c:	e3401003 	movt	r1, #3
   10d80:	e30a093c 	movw	r0, #43324	@ 0xa93c
   10d84:	e3400003 	movt	r0, #3
   10d88:	e3a02092 	mov	r2, #146	@ 0x92
   10d8c:	eb006c12 	bl	2bddc <assertion_failed>
   10d90:	0003ed80 	.word	0x0003ed80

00010d94 <CUSBGamePadDevice::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10d94:	e3a00000 	mov	r0, #0
   10d98:	e12fff1e 	bx	lr

00010d9c <CUSBGamePadPS3Device::GetProperties()>:
   10d9c:	e3a0001b 	mov	r0, #27
   10da0:	e12fff1e 	bx	lr
   10da4:	00000000 	andeq	r0, r0, r0

00010da8 <CUSBGamePadPS4Device::DecodeReport(unsigned char const*)>:
   10da8:	e5d13001 	ldrb	r3, [r1, #1]
   10dac:	e30e2db0 	movw	r2, #60848	@ 0xedb0
   10db0:	e3402003 	movt	r2, #3
   10db4:	e5803028 	str	r3, [r0, #40]	@ 0x28
   10db8:	e24dd010 	sub	sp, sp, #16
   10dbc:	e5d13002 	ldrb	r3, [r1, #2]
   10dc0:	e5803034 	str	r3, [r0, #52]	@ 0x34
   10dc4:	e5d13003 	ldrb	r3, [r1, #3]
   10dc8:	e5803040 	str	r3, [r0, #64]	@ 0x40
   10dcc:	e5d13004 	ldrb	r3, [r1, #4]
   10dd0:	e580304c 	str	r3, [r0, #76]	@ 0x4c
   10dd4:	e5d13008 	ldrb	r3, [r1, #8]
   10dd8:	e5803058 	str	r3, [r0, #88]	@ 0x58
   10ddc:	e5d13009 	ldrb	r3, [r1, #9]
   10de0:	e5803064 	str	r3, [r0, #100]	@ 0x64
   10de4:	e5d13005 	ldrb	r3, [r1, #5]
   10de8:	e203300f 	and	r3, r3, #15
   10dec:	e58030ec 	str	r3, [r0, #236]	@ 0xec
   10df0:	e7922103 	ldr	r2, [r2, r3, lsl #2]
   10df4:	e5802108 	str	r2, [r0, #264]	@ 0x108
   10df8:	e1d1c0d5 	ldrsb	ip, [r1, #5]
   10dfc:	e5d13005 	ldrb	r3, [r1, #5]
   10e00:	e35c0000 	cmp	ip, #0
   10e04:	b3822080 	orrlt	r2, r2, #128	@ 0x80
   10e08:	b5802108 	strlt	r2, [r0, #264]	@ 0x108
   10e0c:	e3130040 	tst	r3, #64	@ 0x40
   10e10:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10e14:	13822c01 	orrne	r2, r2, #256	@ 0x100
   10e18:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10e1c:	e3130020 	tst	r3, #32
   10e20:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10e24:	13822c02 	orrne	r2, r2, #512	@ 0x200
   10e28:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10e2c:	e3130010 	tst	r3, #16
   10e30:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   10e34:	13833b01 	orrne	r3, r3, #1024	@ 0x400
   10e38:	15803108 	strne	r3, [r0, #264]	@ 0x108
   10e3c:	e1d120d6 	ldrsb	r2, [r1, #6]
   10e40:	e5d13006 	ldrb	r3, [r1, #6]
   10e44:	e3520000 	cmp	r2, #0
   10e48:	b5902108 	ldrlt	r2, [r0, #264]	@ 0x108
   10e4c:	b3822a02 	orrlt	r2, r2, #8192	@ 0x2000
   10e50:	b5802108 	strlt	r2, [r0, #264]	@ 0x108
   10e54:	e3130040 	tst	r3, #64	@ 0x40
   10e58:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10e5c:	13822a01 	orrne	r2, r2, #4096	@ 0x1000
   10e60:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10e64:	e3130020 	tst	r3, #32
   10e68:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10e6c:	13822901 	orrne	r2, r2, #16384	@ 0x4000
   10e70:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10e74:	e3130010 	tst	r3, #16
   10e78:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10e7c:	13822b02 	orrne	r2, r2, #2048	@ 0x800
   10e80:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10e84:	e3130008 	tst	r3, #8
   10e88:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10e8c:	13822010 	orrne	r2, r2, #16
   10e90:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10e94:	e3130004 	tst	r3, #4
   10e98:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10e9c:	13822008 	orrne	r2, r2, #8
   10ea0:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10ea4:	e3130002 	tst	r3, #2
   10ea8:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10eac:	13822040 	orrne	r2, r2, #64	@ 0x40
   10eb0:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10eb4:	e3130001 	tst	r3, #1
   10eb8:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   10ebc:	13833020 	orrne	r3, r3, #32
   10ec0:	15803108 	strne	r3, [r0, #264]	@ 0x108
   10ec4:	e5d13007 	ldrb	r3, [r1, #7]
   10ec8:	e3130002 	tst	r3, #2
   10ecc:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   10ed0:	13822602 	orrne	r2, r2, #2097152	@ 0x200000
   10ed4:	15802108 	strne	r2, [r0, #264]	@ 0x108
   10ed8:	e3130001 	tst	r3, #1
   10edc:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   10ee0:	13833001 	orrne	r3, r3, #1
   10ee4:	15803108 	strne	r3, [r0, #264]	@ 0x108
   10ee8:	e1d131f3 	ldrsh	r3, [r1, #19]
   10eec:	e1d121f5 	ldrsh	r2, [r1, #21]
   10ef0:	e58d3000 	str	r3, [sp]
   10ef4:	e1d131f1 	ldrsh	r3, [r1, #17]
   10ef8:	e1d1c1f7 	ldrsh	ip, [r1, #23]
   10efc:	e1cd20f8 	strd	r2, [sp, #8]
   10f00:	e2803f43 	add	r3, r0, #268	@ 0x10c
   10f04:	e58dc004 	str	ip, [sp, #4]
   10f08:	f46d0adf 	vld1.64	{d16-d17}, [sp :64]
   10f0c:	f4430a8f 	vst1.32	{d16-d17}, [r3]
   10f10:	e1d130fd 	ldrsh	r3, [r1, #13]
   10f14:	e580311c 	str	r3, [r0, #284]	@ 0x11c
   10f18:	e1d130ff 	ldrsh	r3, [r1, #15]
   10f1c:	e5803120 	str	r3, [r0, #288]	@ 0x120
   10f20:	e28dd010 	add	sp, sp, #16
   10f24:	e12fff1e 	bx	lr

00010f28 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   10f28:	e92d4010 	push	{r4, lr}
   10f2c:	e1a04000 	mov	r4, r0
   10f30:	e5900140 	ldr	r0, [r0, #320]	@ 0x140
   10f34:	e59f3034 	ldr	r3, [pc, #52]	@ 10f70 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x48>
   10f38:	e3500000 	cmp	r0, #0
   10f3c:	e5843000 	str	r3, [r4]
   10f40:	0a000002 	beq	10f50 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   10f44:	e5903000 	ldr	r3, [r0]
   10f48:	e5933004 	ldr	r3, [r3, #4]
   10f4c:	e12fff33 	blx	r3
   10f50:	e594013c 	ldr	r0, [r4, #316]	@ 0x13c
   10f54:	e3500000 	cmp	r0, #0
   10f58:	0a000000 	beq	10f60 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   10f5c:	eb009482 	bl	3616c <operator delete[](void*)>
   10f60:	e1a00004 	mov	r0, r4
   10f64:	eb003269 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10f68:	e1a00004 	mov	r0, r4
   10f6c:	e8bd8010 	pop	{r4, pc}
   10f70:	0003eddc 	.word	0x0003eddc

00010f74 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()>:
   10f74:	e92d4010 	push	{r4, lr}
   10f78:	e1a04000 	mov	r4, r0
   10f7c:	e5900140 	ldr	r0, [r0, #320]	@ 0x140
   10f80:	e59f3040 	ldr	r3, [pc, #64]	@ 10fc8 <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x54>
   10f84:	e3500000 	cmp	r0, #0
   10f88:	e5843000 	str	r3, [r4]
   10f8c:	0a000002 	beq	10f9c <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x28>
   10f90:	e5903000 	ldr	r3, [r0]
   10f94:	e5933004 	ldr	r3, [r3, #4]
   10f98:	e12fff33 	blx	r3
   10f9c:	e594013c 	ldr	r0, [r4, #316]	@ 0x13c
   10fa0:	e3500000 	cmp	r0, #0
   10fa4:	0a000000 	beq	10fac <CUSBGamePadPS4Device::~CUSBGamePadPS4Device()+0x38>
   10fa8:	eb00946f 	bl	3616c <operator delete[](void*)>
   10fac:	e1a00004 	mov	r0, r4
   10fb0:	eb003256 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   10fb4:	e1a00004 	mov	r0, r4
   10fb8:	e3a01f53 	mov	r1, #332	@ 0x14c
   10fbc:	eb009470 	bl	36184 <operator delete(void*, unsigned int)>
   10fc0:	e1a00004 	mov	r0, r4
   10fc4:	e8bd8010 	pop	{r4, pc}
   10fc8:	0003eddc 	.word	0x0003eddc

00010fcc <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)>:
   10fcc:	e92d4010 	push	{r4, lr}
   10fd0:	e1a04821 	lsr	r4, r1, #16
   10fd4:	e590e13c 	ldr	lr, [r0, #316]	@ 0x13c
   10fd8:	e5c03138 	strb	r3, [r0, #312]	@ 0x138
   10fdc:	e3a03000 	mov	r3, #0
   10fe0:	e7c73014 	bfi	r3, r4, #0, #8
   10fe4:	e1a04421 	lsr	r4, r1, #8
   10fe8:	e7cf3414 	bfi	r3, r4, #8, #8
   10fec:	e7d73811 	bfi	r3, r1, #16, #8
   10ff0:	e7df3c12 	bfi	r3, r2, #24, #8
   10ff4:	e5d02131 	ldrb	r2, [r0, #305]	@ 0x131
   10ff8:	e5803134 	str	r3, [r0, #308]	@ 0x134
   10ffc:	e3a03000 	mov	r3, #0
   11000:	e5ce2003 	strb	r2, [lr, #3]
   11004:	e3a02020 	mov	r2, #32
   11008:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   1100c:	e5d0e133 	ldrb	lr, [r0, #307]	@ 0x133
   11010:	e5c1e004 	strb	lr, [r1, #4]
   11014:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11018:	e5d0e132 	ldrb	lr, [r0, #306]	@ 0x132
   1101c:	e5c1e005 	strb	lr, [r1, #5]
   11020:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11024:	e5d0e134 	ldrb	lr, [r0, #308]	@ 0x134
   11028:	e5c1e006 	strb	lr, [r1, #6]
   1102c:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11030:	e5d0e135 	ldrb	lr, [r0, #309]	@ 0x135
   11034:	e5c1e007 	strb	lr, [r1, #7]
   11038:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   1103c:	e5d0e136 	ldrb	lr, [r0, #310]	@ 0x136
   11040:	e5c1e008 	strb	lr, [r1, #8]
   11044:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11048:	e5d0e137 	ldrb	lr, [r0, #311]	@ 0x137
   1104c:	e5c1e009 	strb	lr, [r1, #9]
   11050:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11054:	e5d0e138 	ldrb	lr, [r0, #312]	@ 0x138
   11058:	e5c1e00a 	strb	lr, [r1, #10]
   1105c:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11060:	eb0008e8 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11064:	e2504000 	subs	r4, r0, #0
   11068:	0a000001 	beq	11074 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)+0xa8>
   1106c:	e1a00004 	mov	r0, r4
   11070:	e8bd8010 	pop	{r4, pc}
   11074:	eb0075d3 	bl	2e7c8 <CLogger::Get()>
   11078:	e59f1014 	ldr	r1, [pc, #20]	@ 11094 <CUSBGamePadPS4Device::SetLEDMode(unsigned int, unsigned char, unsigned char)+0xc8>
   1107c:	e3a02001 	mov	r2, #1
   11080:	e30b31a4 	movw	r3, #45476	@ 0xb1a4
   11084:	e3403003 	movt	r3, #3
   11088:	eb007797 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1108c:	e1a00004 	mov	r0, r4
   11090:	e8bd8010 	pop	{r4, pc}
   11094:	0003ee28 	.word	0x0003ee28

00011098 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)>:
   11098:	e3510001 	cmp	r1, #1
   1109c:	e92d4010 	push	{r4, lr}
   110a0:	0a000031 	beq	1116c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0xd4>
   110a4:	e3510002 	cmp	r1, #2
   110a8:	0a000004 	beq	110c0 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x28>
   110ac:	e3510000 	cmp	r1, #0
   110b0:	0a000031 	beq	1117c <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0xe4>
   110b4:	e3a04001 	mov	r4, #1
   110b8:	e1a00004 	mov	r0, r4
   110bc:	e8bd8010 	pop	{r4, pc}
   110c0:	e3a03000 	mov	r3, #0
   110c4:	e3a010ff 	mov	r1, #255	@ 0xff
   110c8:	e3a0c0f3 	mov	ip, #243	@ 0xf3
   110cc:	e590e13c 	ldr	lr, [r0, #316]	@ 0x13c
   110d0:	e3a02020 	mov	r2, #32
   110d4:	e5c03133 	strb	r3, [r0, #307]	@ 0x133
   110d8:	e3a03000 	mov	r3, #0
   110dc:	e5c01132 	strb	r1, [r0, #306]	@ 0x132
   110e0:	e5c0c131 	strb	ip, [r0, #305]	@ 0x131
   110e4:	e5cec003 	strb	ip, [lr, #3]
   110e8:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   110ec:	e5d0c133 	ldrb	ip, [r0, #307]	@ 0x133
   110f0:	e5c1c004 	strb	ip, [r1, #4]
   110f4:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   110f8:	e5d0c132 	ldrb	ip, [r0, #306]	@ 0x132
   110fc:	e5c1c005 	strb	ip, [r1, #5]
   11100:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11104:	e5d0c134 	ldrb	ip, [r0, #308]	@ 0x134
   11108:	e5c1c006 	strb	ip, [r1, #6]
   1110c:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11110:	e5d0c135 	ldrb	ip, [r0, #309]	@ 0x135
   11114:	e5c1c007 	strb	ip, [r1, #7]
   11118:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   1111c:	e5d0c136 	ldrb	ip, [r0, #310]	@ 0x136
   11120:	e5c1c008 	strb	ip, [r1, #8]
   11124:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11128:	e5d0c137 	ldrb	ip, [r0, #311]	@ 0x137
   1112c:	e5c1c009 	strb	ip, [r1, #9]
   11130:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11134:	e5d0c138 	ldrb	ip, [r0, #312]	@ 0x138
   11138:	e5c1c00a 	strb	ip, [r1, #10]
   1113c:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11140:	eb0008b0 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11144:	e2504000 	subs	r4, r0, #0
   11148:	1affffd9 	bne	110b4 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x1c>
   1114c:	eb00759d 	bl	2e7c8 <CLogger::Get()>
   11150:	e59f1030 	ldr	r1, [pc, #48]	@ 11188 <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0xf0>
   11154:	e3a02001 	mov	r2, #1
   11158:	e30b31a4 	movw	r3, #45476	@ 0xb1a4
   1115c:	e3403003 	movt	r3, #3
   11160:	eb007761 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11164:	e1a00004 	mov	r0, r4
   11168:	e8bd8010 	pop	{r4, pc}
   1116c:	e3a030ff 	mov	r3, #255	@ 0xff
   11170:	e3a01000 	mov	r1, #0
   11174:	e3a0c0f3 	mov	ip, #243	@ 0xf3
   11178:	eaffffd3 	b	110cc <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x34>
   1117c:	e1a03001 	mov	r3, r1
   11180:	e3a0c0f0 	mov	ip, #240	@ 0xf0
   11184:	eaffffd0 	b	110cc <CUSBGamePadPS4Device::SetRumbleMode(TGamePadRumbleMode)+0x34>
   11188:	0003ee28 	.word	0x0003ee28

0001118c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)>:
   1118c:	e2411001 	sub	r1, r1, #1
   11190:	e92d4010 	push	{r4, lr}
   11194:	e3510006 	cmp	r1, #6
   11198:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   1119c:	ea00005c 	b	11314 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x188>
   111a0:	00011264 	.word	0x00011264
   111a4:	000111bc 	.word	0x000111bc
   111a8:	0001127c 	.word	0x0001127c
   111ac:	00011294 	.word	0x00011294
   111b0:	000112ac 	.word	0x000112ac
   111b4:	000112c4 	.word	0x000112c4
   111b8:	000112dc 	.word	0x000112dc
   111bc:	e3a030ff 	mov	r3, #255	@ 0xff
   111c0:	e3a02000 	mov	r2, #0
   111c4:	e1a01002 	mov	r1, r2
   111c8:	e3a0e07f 	mov	lr, #127	@ 0x7f
   111cc:	e1a0c003 	mov	ip, r3
   111d0:	e5c02135 	strb	r2, [r0, #309]	@ 0x135
   111d4:	e590213c 	ldr	r2, [r0, #316]	@ 0x13c
   111d8:	e5c01136 	strb	r1, [r0, #310]	@ 0x136
   111dc:	e5d01131 	ldrb	r1, [r0, #305]	@ 0x131
   111e0:	e5c03134 	strb	r3, [r0, #308]	@ 0x134
   111e4:	e3a03000 	mov	r3, #0
   111e8:	e5c0c138 	strb	ip, [r0, #312]	@ 0x138
   111ec:	e5c0e137 	strb	lr, [r0, #311]	@ 0x137
   111f0:	e5c21003 	strb	r1, [r2, #3]
   111f4:	e3a02020 	mov	r2, #32
   111f8:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   111fc:	e5d0c133 	ldrb	ip, [r0, #307]	@ 0x133
   11200:	e5c1c004 	strb	ip, [r1, #4]
   11204:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11208:	e5d0c132 	ldrb	ip, [r0, #306]	@ 0x132
   1120c:	e5c1c005 	strb	ip, [r1, #5]
   11210:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11214:	e5d0c134 	ldrb	ip, [r0, #308]	@ 0x134
   11218:	e5c1c006 	strb	ip, [r1, #6]
   1121c:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11220:	e5d0c135 	ldrb	ip, [r0, #309]	@ 0x135
   11224:	e5c1c007 	strb	ip, [r1, #7]
   11228:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   1122c:	e5d0c136 	ldrb	ip, [r0, #310]	@ 0x136
   11230:	e5c1c008 	strb	ip, [r1, #8]
   11234:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11238:	e5d0c137 	ldrb	ip, [r0, #311]	@ 0x137
   1123c:	e5c1c009 	strb	ip, [r1, #9]
   11240:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11244:	e5d0c138 	ldrb	ip, [r0, #312]	@ 0x138
   11248:	e5c1c00a 	strb	ip, [r1, #10]
   1124c:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11250:	eb00086c 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   11254:	e2504000 	subs	r4, r0, #0
   11258:	0a000025 	beq	112f4 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x168>
   1125c:	e1a00004 	mov	r0, r4
   11260:	e8bd8010 	pop	{r4, pc}
   11264:	e3a03000 	mov	r3, #0
   11268:	e3a010ff 	mov	r1, #255	@ 0xff
   1126c:	e1a02003 	mov	r2, r3
   11270:	e3a0e07f 	mov	lr, #127	@ 0x7f
   11274:	e1a0c001 	mov	ip, r1
   11278:	eaffffd4 	b	111d0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   1127c:	e3a030ff 	mov	r3, #255	@ 0xff
   11280:	e3a02000 	mov	r2, #0
   11284:	e1a01003 	mov	r1, r3
   11288:	e3a0e07f 	mov	lr, #127	@ 0x7f
   1128c:	e1a0c003 	mov	ip, r3
   11290:	eaffffce 	b	111d0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   11294:	e3a03000 	mov	r3, #0
   11298:	e3a020ff 	mov	r2, #255	@ 0xff
   1129c:	e1a01003 	mov	r1, r3
   112a0:	e3a0e07f 	mov	lr, #127	@ 0x7f
   112a4:	e1a0c002 	mov	ip, r2
   112a8:	eaffffc8 	b	111d0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   112ac:	e3a020ff 	mov	r2, #255	@ 0xff
   112b0:	e3a03000 	mov	r3, #0
   112b4:	e1a01002 	mov	r1, r2
   112b8:	e3a0e07f 	mov	lr, #127	@ 0x7f
   112bc:	e1a0c002 	mov	ip, r2
   112c0:	eaffffc2 	b	111d0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   112c4:	e3a030ff 	mov	r3, #255	@ 0xff
   112c8:	e3a01000 	mov	r1, #0
   112cc:	e1a02003 	mov	r2, r3
   112d0:	e3a0e07f 	mov	lr, #127	@ 0x7f
   112d4:	e1a0c003 	mov	ip, r3
   112d8:	eaffffbc 	b	111d0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   112dc:	e3a030ff 	mov	r3, #255	@ 0xff
   112e0:	e3a0e07f 	mov	lr, #127	@ 0x7f
   112e4:	e1a02003 	mov	r2, r3
   112e8:	e1a01003 	mov	r1, r3
   112ec:	e1a0c003 	mov	ip, r3
   112f0:	eaffffb6 	b	111d0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   112f4:	eb007533 	bl	2e7c8 <CLogger::Get()>
   112f8:	e59f102c 	ldr	r1, [pc, #44]	@ 1132c <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x1a0>
   112fc:	e3a02001 	mov	r2, #1
   11300:	e30b31a4 	movw	r3, #45476	@ 0xb1a4
   11304:	e3403003 	movt	r3, #3
   11308:	eb0076f7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1130c:	e1a00004 	mov	r0, r4
   11310:	e8bd8010 	pop	{r4, pc}
   11314:	e3a03000 	mov	r3, #0
   11318:	e1a02003 	mov	r2, r3
   1131c:	e1a01003 	mov	r1, r3
   11320:	e1a0e003 	mov	lr, r3
   11324:	e1a0c003 	mov	ip, r3
   11328:	eaffffa8 	b	111d0 <CUSBGamePadPS4Device::SetLEDMode(TGamePadLEDMode)+0x44>
   1132c:	0003ee28 	.word	0x0003ee28

00011330 <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)>:
   11330:	e92d4010 	push	{r4, lr}
   11334:	e1a04000 	mov	r4, r0
   11338:	eb003163 	bl	1d8cc <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   1133c:	e3a03000 	mov	r3, #0
   11340:	e59f0034 	ldr	r0, [pc, #52]	@ 1137c <CUSBGamePadPS4Device::CUSBGamePadPS4Device(CUSBFunction*)+0x4c>
   11344:	e1a02003 	mov	r2, r3
   11348:	e5840000 	str	r0, [r4]
   1134c:	e3a01003 	mov	r1, #3
   11350:	e1a00004 	mov	r0, r4
   11354:	ebfffcdc 	bl	106cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   11358:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   1135c:	e2841f4f 	add	r1, r4, #316	@ 0x13c
   11360:	e2843f51 	add	r3, r4, #324	@ 0x144
   11364:	e5c40130 	strb	r0, [r4, #304]	@ 0x130
   11368:	e3a02000 	mov	r2, #0
   1136c:	e1a00004 	mov	r0, r4
   11370:	f441078f 	vst1.32	{d16}, [r1]
   11374:	e1c320b0 	strh	r2, [r3]
   11378:	e8bd8010 	pop	{r4, pc}
   1137c:	0003eddc 	.word	0x0003eddc

00011380 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>:
   11380:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   11384:	e1a06001 	mov	r6, r1
   11388:	e5d02144 	ldrb	r2, [r0, #324]	@ 0x144
   1138c:	e5d13007 	ldrb	r3, [r1, #7]
   11390:	e24dd00c 	sub	sp, sp, #12
   11394:	e1a05000 	mov	r5, r0
   11398:	e3130002 	tst	r3, #2
   1139c:	1a000050 	bne	114e4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x164>
   113a0:	e3520000 	cmp	r2, #0
   113a4:	1a000051 	bne	114f0 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x170>
   113a8:	e5d67021 	ldrb	r7, [r6, #33]	@ 0x21
   113ac:	e5d64023 	ldrb	r4, [r6, #35]	@ 0x23
   113b0:	e2473001 	sub	r3, r7, #1
   113b4:	e3530003 	cmp	r3, #3
   113b8:	23a07001 	movcs	r7, #1
   113bc:	e1b043a4 	lsrs	r4, r4, #7
   113c0:	1a00004e 	bne	11500 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x180>
   113c4:	e1a03004 	mov	r3, r4
   113c8:	e0833004 	add	r3, r3, r4
   113cc:	e5d51145 	ldrb	r1, [r5, #325]	@ 0x145
   113d0:	e0863003 	add	r3, r6, r3
   113d4:	e3a0e000 	mov	lr, #0
   113d8:	e151000e 	cmp	r1, lr
   113dc:	e5d3c025 	ldrb	ip, [r3, #37]	@ 0x25
   113e0:	e5d30024 	ldrb	r0, [r3, #36]	@ 0x24
   113e4:	e5d31026 	ldrb	r1, [r3, #38]	@ 0x26
   113e8:	e20c300f 	and	r3, ip, #15
   113ec:	e1800403 	orr	r0, r0, r3, lsl #8
   113f0:	e1a01201 	lsl	r1, r1, #4
   113f4:	e181122c 	orr	r1, r1, ip, lsr #4
   113f8:	e7cfe010 	bfi	lr, r0, #0, #16
   113fc:	e7dfe811 	bfi	lr, r1, #16, #16
   11400:	0a000027 	beq	114a4 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x124>
   11404:	e3003146 	movw	r3, #326	@ 0x146
   11408:	e3e0c07e 	mvn	ip, #126	@ 0x7e
   1140c:	e19590b3 	ldrh	r9, [r5, r3]
   11410:	e2853f52 	add	r3, r5, #328	@ 0x148
   11414:	e1d380b0 	ldrh	r8, [r3]
   11418:	e585e146 	str	lr, [r5, #326]	@ 0x146
   1141c:	e0413008 	sub	r3, r1, r8
   11420:	e353007f 	cmp	r3, #127	@ 0x7f
   11424:	a3a0307f 	movge	r3, #127	@ 0x7f
   11428:	e153000c 	cmp	r3, ip
   1142c:	b1a0300c 	movlt	r3, ip
   11430:	e1500009 	cmp	r0, r9
   11434:	13822001 	orrne	r2, r2, #1
   11438:	e3520000 	cmp	r2, #0
   1143c:	1a000035 	bne	11518 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x198>
   11440:	e1510008 	cmp	r1, r8
   11444:	0a000006 	beq	11464 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
   11448:	e5950140 	ldr	r0, [r5, #320]	@ 0x140
   1144c:	e3500000 	cmp	r0, #0
   11450:	0a00001d 	beq	114cc <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x14c>
   11454:	e5d51144 	ldrb	r1, [r5, #324]	@ 0x144
   11458:	e3a0c000 	mov	ip, #0
   1145c:	e58dc000 	str	ip, [sp]
   11460:	eb003759 	bl	1f1cc <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   11464:	e2844001 	add	r4, r4, #1
   11468:	e1570004 	cmp	r7, r4
   1146c:	0a00000a 	beq	1149c <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x11c>
   11470:	e1a03184 	lsl	r3, r4, #3
   11474:	e0832004 	add	r2, r3, r4
   11478:	e0862002 	add	r2, r6, r2
   1147c:	e5d22023 	ldrb	r2, [r2, #35]	@ 0x23
   11480:	e1b023a2 	lsrs	r2, r2, #7
   11484:	0affffcf 	beq	113c8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x48>
   11488:	e2844001 	add	r4, r4, #1
   1148c:	e3a03000 	mov	r3, #0
   11490:	e1570004 	cmp	r7, r4
   11494:	e5c53145 	strb	r3, [r5, #325]	@ 0x145
   11498:	1afffff4 	bne	11470 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xf0>
   1149c:	e28dd00c 	add	sp, sp, #12
   114a0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   114a4:	e3a03001 	mov	r3, #1
   114a8:	e3520000 	cmp	r2, #0
   114ac:	e5c53145 	strb	r3, [r5, #325]	@ 0x145
   114b0:	e585e146 	str	lr, [r5, #326]	@ 0x146
   114b4:	0affffea 	beq	11464 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
   114b8:	e5950140 	ldr	r0, [r5, #320]	@ 0x140
   114bc:	e3a03000 	mov	r3, #0
   114c0:	e1a02003 	mov	r2, r3
   114c4:	e3500000 	cmp	r0, #0
   114c8:	1affffe1 	bne	11454 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xd4>
   114cc:	e30b11c4 	movw	r1, #45508	@ 0xb1c4
   114d0:	e3401003 	movt	r1, #3
   114d4:	e30b01d8 	movw	r0, #45528	@ 0xb1d8
   114d8:	e3400003 	movt	r0, #3
   114dc:	e300215a 	movw	r2, #346	@ 0x15a
   114e0:	eb006a3d 	bl	2bddc <assertion_failed>
   114e4:	e3520000 	cmp	r2, #0
   114e8:	13a02000 	movne	r2, #0
   114ec:	1affffad 	bne	113a8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   114f0:	e7e030d3 	ubfx	r3, r3, #1, #1
   114f4:	e3a02001 	mov	r2, #1
   114f8:	e5c53144 	strb	r3, [r5, #324]	@ 0x144
   114fc:	eaffffa9 	b	113a8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x28>
   11500:	e3a04000 	mov	r4, #0
   11504:	e5c54145 	strb	r4, [r5, #325]	@ 0x145
   11508:	e1520004 	cmp	r2, r4
   1150c:	01a04002 	moveq	r4, r2
   11510:	1affffe8 	bne	114b8 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0x138>
   11514:	eaffffd2 	b	11464 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xe4>
   11518:	e0402009 	sub	r2, r0, r9
   1151c:	e352007f 	cmp	r2, #127	@ 0x7f
   11520:	a3a0207f 	movge	r2, #127	@ 0x7f
   11524:	e152000c 	cmp	r2, ip
   11528:	b1a0200c 	movlt	r2, ip
   1152c:	eaffffc5 	b	11448 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)+0xc8>

00011530 <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)>:
   11530:	e251c000 	subs	ip, r1, #0
   11534:	13a0c001 	movne	ip, #1
   11538:	e3520040 	cmp	r2, #64	@ 0x40
   1153c:	13a0c000 	movne	ip, #0
   11540:	e35c0000 	cmp	ip, #0
   11544:	012fff1e 	bxeq	lr
   11548:	e5903000 	ldr	r3, [r0]
   1154c:	e92d4070 	push	{r4, r5, r6, lr}
   11550:	e1a04000 	mov	r4, r0
   11554:	e1a05001 	mov	r5, r1
   11558:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   1155c:	e12fff33 	blx	r3
   11560:	e5943124 	ldr	r3, [r4, #292]	@ 0x124
   11564:	e3530000 	cmp	r3, #0
   11568:	0a000003 	beq	1157c <CUSBGamePadPS4Device::ReportHandler(unsigned char const*, unsigned int)+0x4c>
   1156c:	e594012c 	ldr	r0, [r4, #300]	@ 0x12c
   11570:	e2841024 	add	r1, r4, #36	@ 0x24
   11574:	e2400001 	sub	r0, r0, #1
   11578:	e12fff33 	blx	r3
   1157c:	e5943140 	ldr	r3, [r4, #320]	@ 0x140
   11580:	e3530000 	cmp	r3, #0
   11584:	08bd8070 	popeq	{r4, r5, r6, pc}
   11588:	e1a01005 	mov	r1, r5
   1158c:	e1a00004 	mov	r0, r4
   11590:	e8bd4070 	pop	{r4, r5, r6, lr}
   11594:	eaffff79 	b	11380 <CUSBGamePadPS4Device::HandleTouchpad(unsigned char const*)>

00011598 <CUSBGamePadPS4Device::SendLedRumbleCommand()>:
   11598:	e92d4010 	push	{r4, lr}
   1159c:	e3a03000 	mov	r3, #0
   115a0:	e590c13c 	ldr	ip, [r0, #316]	@ 0x13c
   115a4:	e5d0e131 	ldrb	lr, [r0, #305]	@ 0x131
   115a8:	e3a02020 	mov	r2, #32
   115ac:	e5cce003 	strb	lr, [ip, #3]
   115b0:	e590c13c 	ldr	ip, [r0, #316]	@ 0x13c
   115b4:	e5d0e133 	ldrb	lr, [r0, #307]	@ 0x133
   115b8:	e5cce004 	strb	lr, [ip, #4]
   115bc:	e590c13c 	ldr	ip, [r0, #316]	@ 0x13c
   115c0:	e5d0e132 	ldrb	lr, [r0, #306]	@ 0x132
   115c4:	e5cce005 	strb	lr, [ip, #5]
   115c8:	e590c13c 	ldr	ip, [r0, #316]	@ 0x13c
   115cc:	e5d0e134 	ldrb	lr, [r0, #308]	@ 0x134
   115d0:	e5cce006 	strb	lr, [ip, #6]
   115d4:	e590c13c 	ldr	ip, [r0, #316]	@ 0x13c
   115d8:	e5d0e135 	ldrb	lr, [r0, #309]	@ 0x135
   115dc:	e5cce007 	strb	lr, [ip, #7]
   115e0:	e590c13c 	ldr	ip, [r0, #316]	@ 0x13c
   115e4:	e5d0e136 	ldrb	lr, [r0, #310]	@ 0x136
   115e8:	e5cce008 	strb	lr, [ip, #8]
   115ec:	e590c13c 	ldr	ip, [r0, #316]	@ 0x13c
   115f0:	e5d0e137 	ldrb	lr, [r0, #311]	@ 0x137
   115f4:	e5cce009 	strb	lr, [ip, #9]
   115f8:	e590c13c 	ldr	ip, [r0, #316]	@ 0x13c
   115fc:	e5d0e138 	ldrb	lr, [r0, #312]	@ 0x138
   11600:	e5cce00a 	strb	lr, [ip, #10]
   11604:	e590113c 	ldr	r1, [r0, #316]	@ 0x13c
   11608:	eb00077e 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   1160c:	e2504000 	subs	r4, r0, #0
   11610:	0a000001 	beq	1161c <CUSBGamePadPS4Device::SendLedRumbleCommand()+0x84>
   11614:	e1a00004 	mov	r0, r4
   11618:	e8bd8010 	pop	{r4, pc}
   1161c:	eb007469 	bl	2e7c8 <CLogger::Get()>
   11620:	e59f1014 	ldr	r1, [pc, #20]	@ 1163c <CUSBGamePadPS4Device::SendLedRumbleCommand()+0xa4>
   11624:	e3a02001 	mov	r2, #1
   11628:	e30b31a4 	movw	r3, #45476	@ 0xb1a4
   1162c:	e3403003 	movt	r3, #3
   11630:	eb00762d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11634:	e1a00004 	mov	r0, r4
   11638:	e8bd8010 	pop	{r4, pc}
   1163c:	0003ee28 	.word	0x0003ee28

00011640 <CUSBGamePadPS4Device::DisableTouchpad()>:
   11640:	e3033e8c 	movw	r3, #16012	@ 0x3e8c
   11644:	e3403004 	movt	r3, #4
   11648:	e3a02000 	mov	r2, #0
   1164c:	e5c32000 	strb	r2, [r3]
   11650:	e12fff1e 	bx	lr

00011654 <CUSBGamePadPS4Device::Configure()>:
   11654:	e5d03130 	ldrb	r3, [r0, #304]	@ 0x130
   11658:	e92d4070 	push	{r4, r5, r6, lr}
   1165c:	e3530000 	cmp	r3, #0
   11660:	0a000038 	beq	11748 <CUSBGamePadPS4Device::Configure()+0xf4>
   11664:	e2803f4a 	add	r3, r0, #296	@ 0x128
   11668:	e3a02040 	mov	r2, #64	@ 0x40
   1166c:	e1a04000 	mov	r4, r0
   11670:	e1c320b0 	strh	r2, [r3]
   11674:	eb003038 	bl	1d75c <CUSBGamePadDevice::Configure()>
   11678:	e3500000 	cmp	r0, #0
   1167c:	0a00003d 	beq	11778 <CUSBGamePadPS4Device::Configure()+0x124>
   11680:	e3033e8c 	movw	r3, #16012	@ 0x3e8c
   11684:	e3403004 	movt	r3, #4
   11688:	e5d33000 	ldrb	r3, [r3]
   1168c:	e3530000 	cmp	r3, #0
   11690:	1a000030 	bne	11758 <CUSBGamePadPS4Device::Configure()+0x104>
   11694:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   11698:	e284302c 	add	r3, r4, #44	@ 0x2c
   1169c:	e2842074 	add	r2, r4, #116	@ 0x74
   116a0:	e3a01001 	mov	r1, #1
   116a4:	e3a00016 	mov	r0, #22
   116a8:	e58410e8 	str	r1, [r4, #232]	@ 0xe8
   116ac:	e5840104 	str	r0, [r4, #260]	@ 0x104
   116b0:	e3a01006 	mov	r1, #6
   116b4:	e5841024 	str	r1, [r4, #36]	@ 0x24
   116b8:	f443078f 	vst1.32	{d16}, [r3]
   116bc:	e283300c 	add	r3, r3, #12
   116c0:	e1520003 	cmp	r2, r3
   116c4:	1afffffb 	bne	116b8 <CUSBGamePadPS4Device::Configure()+0x64>
   116c8:	e3a00020 	mov	r0, #32
   116cc:	eb00929a 	bl	3613c <operator new[](unsigned int)>
   116d0:	e3a02020 	mov	r2, #32
   116d4:	e3a01000 	mov	r1, #0
   116d8:	e584013c 	str	r0, [r4, #316]	@ 0x13c
   116dc:	eb009071 	bl	358a8 <memset>
   116e0:	e594313c 	ldr	r3, [r4, #316]	@ 0x13c
   116e4:	e3a02005 	mov	r2, #5
   116e8:	e3a0c007 	mov	ip, #7
   116ec:	eddf0b29 	vldr	d16, [pc, #164]	@ 11798 <CUSBGamePadPS4Device::Configure()+0x144>
   116f0:	e3a01004 	mov	r1, #4
   116f4:	e5c32000 	strb	r2, [r3]
   116f8:	e2843e13 	add	r3, r4, #304	@ 0x130
   116fc:	e2833001 	add	r3, r3, #1
   11700:	e1a00004 	mov	r0, r4
   11704:	e594213c 	ldr	r2, [r4, #316]	@ 0x13c
   11708:	e5c2c001 	strb	ip, [r2, #1]
   1170c:	e594213c 	ldr	r2, [r4, #316]	@ 0x13c
   11710:	e5c21002 	strb	r1, [r2, #2]
   11714:	f443070f 	vst1.8	{d16}, [r3]
   11718:	ebffff9e 	bl	11598 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1171c:	e2842f4d 	add	r2, r4, #308	@ 0x134
   11720:	e3a03000 	mov	r3, #0
   11724:	e3a000fa 	mov	r0, #250	@ 0xfa
   11728:	e1c230b0 	strh	r3, [r2]
   1172c:	e5c43136 	strb	r3, [r4, #310]	@ 0x136
   11730:	eb008dff 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   11734:	e1a00004 	mov	r0, r4
   11738:	ebffff96 	bl	11598 <CUSBGamePadPS4Device::SendLedRumbleCommand()>
   1173c:	e1a00004 	mov	r0, r4
   11740:	e8bd4070 	pop	{r4, r5, r6, lr}
   11744:	ea0007b4 	b	1361c <CUSBHIDDevice::StartRequest()>
   11748:	e59f1050 	ldr	r1, [pc, #80]	@ 117a0 <CUSBGamePadPS4Device::Configure()+0x14c>
   1174c:	ebfffbca 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   11750:	e3a00000 	mov	r0, #0
   11754:	e8bd8070 	pop	{r4, r5, r6, pc}
   11758:	e3a00038 	mov	r0, #56	@ 0x38
   1175c:	eb009270 	bl	36124 <operator new(unsigned int)>
   11760:	e3a02000 	mov	r2, #0
   11764:	e3a01001 	mov	r1, #1
   11768:	e1a05000 	mov	r5, r0
   1176c:	eb003644 	bl	1f084 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   11770:	e5845140 	str	r5, [r4, #320]	@ 0x140
   11774:	eaffffc6 	b	11694 <CUSBGamePadPS4Device::Configure()+0x40>
   11778:	eb007412 	bl	2e7c8 <CLogger::Get()>
   1177c:	e59f101c 	ldr	r1, [pc, #28]	@ 117a0 <CUSBGamePadPS4Device::Configure()+0x14c>
   11780:	e3a02001 	mov	r2, #1
   11784:	e30b3138 	movw	r3, #45368	@ 0xb138
   11788:	e3403003 	movt	r3, #3
   1178c:	eb0075d6 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11790:	e3a00000 	mov	r0, #0
   11794:	e8bd8070 	pop	{r4, r5, r6, pc}
   11798:	ff0000f0 	.word	0xff0000f0
   1179c:	ff7fffff 	.word	0xff7fffff
   117a0:	0003ee28 	.word	0x0003ee28

000117a4 <CUSBGamePadPS4Device::GetProperties()>:
   117a4:	e3a0003f 	mov	r0, #63	@ 0x3f
   117a8:	e12fff1e 	bx	lr

000117ac <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   117ac:	e92d4010 	push	{r4, lr}
   117b0:	e1a04000 	mov	r4, r0
   117b4:	e5900134 	ldr	r0, [r0, #308]	@ 0x134
   117b8:	e59f3024 	ldr	r3, [pc, #36]	@ 117e4 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x38>
   117bc:	e3500000 	cmp	r0, #0
   117c0:	e5843000 	str	r3, [r4]
   117c4:	0a000000 	beq	117cc <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   117c8:	eb009267 	bl	3616c <operator delete[](void*)>
   117cc:	e3a03000 	mov	r3, #0
   117d0:	e1a00004 	mov	r0, r4
   117d4:	e5843134 	str	r3, [r4, #308]	@ 0x134
   117d8:	eb00304c 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   117dc:	e1a00004 	mov	r0, r4
   117e0:	e8bd8010 	pop	{r4, pc}
   117e4:	0003ee3c 	.word	0x0003ee3c

000117e8 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()>:
   117e8:	e92d4010 	push	{r4, lr}
   117ec:	e1a04000 	mov	r4, r0
   117f0:	e5900134 	ldr	r0, [r0, #308]	@ 0x134
   117f4:	e59f3030 	ldr	r3, [pc, #48]	@ 1182c <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x44>
   117f8:	e3500000 	cmp	r0, #0
   117fc:	e5843000 	str	r3, [r4]
   11800:	0a000000 	beq	11808 <CUSBGamePadStandardDevice::~CUSBGamePadStandardDevice()+0x20>
   11804:	eb009258 	bl	3616c <operator delete[](void*)>
   11808:	e3a03000 	mov	r3, #0
   1180c:	e1a00004 	mov	r0, r4
   11810:	e5843134 	str	r3, [r4, #308]	@ 0x134
   11814:	eb00303d 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   11818:	e1a00004 	mov	r0, r4
   1181c:	e3a01f4f 	mov	r1, #316	@ 0x13c
   11820:	eb009257 	bl	36184 <operator delete(void*, unsigned int)>
   11824:	e1a00004 	mov	r0, r4
   11828:	e8bd8010 	pop	{r4, pc}
   1182c:	0003ee3c 	.word	0x0003ee3c

00011830 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)>:
   11830:	e92d4070 	push	{r4, r5, r6, lr}
   11834:	e1a04000 	mov	r4, r0
   11838:	e1a05002 	mov	r5, r2
   1183c:	eb003022 	bl	1d8cc <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   11840:	e2842f4e 	add	r2, r4, #312	@ 0x138
   11844:	e59f1018 	ldr	r1, [pc, #24]	@ 11864 <CUSBGamePadStandardDevice::CUSBGamePadStandardDevice(CUSBFunction*, bool)+0x34>
   11848:	e3a03000 	mov	r3, #0
   1184c:	e5841000 	str	r1, [r4]
   11850:	e1a00004 	mov	r0, r4
   11854:	e5c45130 	strb	r5, [r4, #304]	@ 0x130
   11858:	e5843134 	str	r3, [r4, #308]	@ 0x134
   1185c:	e1c230b0 	strh	r3, [r2]
   11860:	e8bd8070 	pop	{r4, r5, r6, pc}
   11864:	0003ee3c 	.word	0x0003ee3c

00011868 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>:
   11868:	e3500000 	cmp	r0, #0
   1186c:	e92d4010 	push	{r4, lr}
   11870:	0a000014 	beq	118c8 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x60>
   11874:	e3520020 	cmp	r2, #32
   11878:	8a000018 	bhi	118e0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x78>
   1187c:	e3520000 	cmp	r2, #0
   11880:	0a00000e 	beq	118c0 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)+0x58>
   11884:	e3520018 	cmp	r2, #24
   11888:	e080e1a1 	add	lr, r0, r1, lsr #3
   1188c:	e79031a1 	ldr	r3, [r0, r1, lsr #3]
   11890:	e201c007 	and	ip, r1, #7
   11894:	82422018 	subhi	r2, r2, #24
   11898:	83e00000 	mvnhi	r0, #0
   1189c:	859e1003 	ldrhi	r1, [lr, #3]
   118a0:	93e01000 	mvnls	r1, #0
   118a4:	e1a03c33 	lsr	r3, r3, ip
   118a8:	83c334ff 	bichi	r3, r3, #-16777216	@ 0xff000000
   118ac:	81a01c31 	lsrhi	r1, r1, ip
   118b0:	81c12210 	bichi	r2, r1, r0, lsl r2
   118b4:	81830c02 	orrhi	r0, r3, r2, lsl #24
   118b8:	91c30211 	bicls	r0, r3, r1, lsl r2
   118bc:	e8bd8010 	pop	{r4, pc}
   118c0:	e1a00002 	mov	r0, r2
   118c4:	e8bd8010 	pop	{r4, pc}
   118c8:	e30b11ec 	movw	r1, #45548	@ 0xb1ec
   118cc:	e3401003 	movt	r1, #3
   118d0:	e30b0204 	movw	r0, #45572	@ 0xb204
   118d4:	e3400003 	movt	r0, #3
   118d8:	e3002132 	movw	r2, #306	@ 0x132
   118dc:	eb00693e 	bl	2bddc <assertion_failed>
   118e0:	e30b11ec 	movw	r1, #45548	@ 0xb1ec
   118e4:	e3401003 	movt	r1, #3
   118e8:	e30b0210 	movw	r0, #45584	@ 0xb210
   118ec:	e3400003 	movt	r0, #3
   118f0:	e3002133 	movw	r2, #307	@ 0x133
   118f4:	eb006938 	bl	2bddc <assertion_failed>

000118f8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>:
   118f8:	e3500000 	cmp	r0, #0
   118fc:	e92d4010 	push	{r4, lr}
   11900:	0a00001e 	beq	11980 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x88>
   11904:	e3520020 	cmp	r2, #32
   11908:	8a000022 	bhi	11998 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0xa0>
   1190c:	e3520000 	cmp	r2, #0
   11910:	0a000015 	beq	1196c <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x74>
   11914:	e08031a1 	add	r3, r0, r1, lsr #3
   11918:	e79001a1 	ldr	r0, [r0, r1, lsr #3]
   1191c:	e201c007 	and	ip, r1, #7
   11920:	e3520018 	cmp	r2, #24
   11924:	e1a00c30 	lsr	r0, r0, ip
   11928:	9a000011 	bls	11974 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x7c>
   1192c:	e5933003 	ldr	r3, [r3, #3]
   11930:	e2421018 	sub	r1, r2, #24
   11934:	e3520020 	cmp	r2, #32
   11938:	e3c004ff 	bic	r0, r0, #-16777216	@ 0xff000000
   1193c:	e1a03c33 	lsr	r3, r3, ip
   11940:	e3e0c000 	mvn	ip, #0
   11944:	e1c3311c 	bic	r3, r3, ip, lsl r1
   11948:	e1800c03 	orr	r0, r0, r3, lsl #24
   1194c:	08bd8010 	popeq	{r4, pc}
   11950:	e3a01001 	mov	r1, #1
   11954:	e2423001 	sub	r3, r2, #1
   11958:	e0103311 	ands	r3, r0, r1, lsl r3
   1195c:	11a01211 	lslne	r1, r1, r2
   11960:	12611000 	rsbne	r1, r1, #0
   11964:	11800001 	orrne	r0, r0, r1
   11968:	e8bd8010 	pop	{r4, pc}
   1196c:	e1a00002 	mov	r0, r2
   11970:	e8bd8010 	pop	{r4, pc}
   11974:	e3e03000 	mvn	r3, #0
   11978:	e1c00213 	bic	r0, r0, r3, lsl r2
   1197c:	eafffff3 	b	11950 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)+0x58>
   11980:	e30b11ec 	movw	r1, #45548	@ 0xb1ec
   11984:	e3401003 	movt	r1, #3
   11988:	e30b0204 	movw	r0, #45572	@ 0xb204
   1198c:	e3400003 	movt	r0, #3
   11990:	e3002155 	movw	r2, #341	@ 0x155
   11994:	eb006910 	bl	2bddc <assertion_failed>
   11998:	e30b11ec 	movw	r1, #45548	@ 0xb1ec
   1199c:	e3401003 	movt	r1, #3
   119a0:	e30b0210 	movw	r0, #45584	@ 0xb210
   119a4:	e3400003 	movt	r0, #3
   119a8:	e3002156 	movw	r2, #342	@ 0x156
   119ac:	eb00690a 	bl	2bddc <assertion_failed>

000119b0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)>:
   119b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119b4:	e5905134 	ldr	r5, [r0, #308]	@ 0x134
   119b8:	e24dd034 	sub	sp, sp, #52	@ 0x34
   119bc:	e3550000 	cmp	r5, #0
   119c0:	0a0000b0 	beq	11c88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2d8>
   119c4:	e2803f4e 	add	r3, r0, #312	@ 0x138
   119c8:	e1a0b000 	mov	fp, r0
   119cc:	e1d340b0 	ldrh	r4, [r3]
   119d0:	e3540000 	cmp	r4, #0
   119d4:	0a0000f4 	beq	11dac <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3fc>
   119d8:	e1a09001 	mov	r9, r1
   119dc:	e3a01000 	mov	r1, #0
   119e0:	e1a06001 	mov	r6, r1
   119e4:	e1a0a001 	mov	sl, r1
   119e8:	e1a07001 	mov	r7, r1
   119ec:	e1a03000 	mov	r3, r0
   119f0:	e1a0b001 	mov	fp, r1
   119f4:	e303c2eb 	movw	ip, #13035	@ 0x32eb
   119f8:	e34fc8a4 	movt	ip, #63652	@ 0xf8a4
   119fc:	e58d1014 	str	r1, [sp, #20]
   11a00:	e58d1010 	str	r1, [sp, #16]
   11a04:	e58dc004 	str	ip, [sp, #4]
   11a08:	e58dc008 	str	ip, [sp, #8]
   11a0c:	e58dc000 	str	ip, [sp]
   11a10:	e58dc00c 	str	ip, [sp, #12]
   11a14:	e1d520d0 	ldrsb	r2, [r5]
   11a18:	e2020003 	and	r0, r2, #3
   11a1c:	e3500001 	cmp	r0, #1
   11a20:	0a000053 	beq	11b74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1c4>
   11a24:	e3500002 	cmp	r0, #2
   11a28:	0a00004a 	beq	11b58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1a8>
   11a2c:	e3500000 	cmp	r0, #0
   11a30:	1a00003c 	bne	11b28 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x178>
   11a34:	e2444001 	sub	r4, r4, #1
   11a38:	e2855001 	add	r5, r5, #1
   11a3c:	e6ff4074 	uxth	r4, r4
   11a40:	e20220fc 	and	r2, r2, #252	@ 0xfc
   11a44:	e3520084 	cmp	r2, #132	@ 0x84
   11a48:	0a00001e 	beq	11ac8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x118>
   11a4c:	e3520034 	cmp	r2, #52	@ 0x34
   11a50:	0a000066 	beq	11bf0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x240>
   11a54:	ca000028 	bgt	11afc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x14c>
   11a58:	e3520014 	cmp	r2, #20
   11a5c:	058d0008 	streq	r0, [sp, #8]
   11a60:	0a00000b 	beq	11a94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe4>
   11a64:	ca000055 	bgt	11bc0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x210>
   11a68:	e3520004 	cmp	r2, #4
   11a6c:	0a00004d 	beq	11ba8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1f8>
   11a70:	e3520008 	cmp	r2, #8
   11a74:	1a000006 	bne	11a94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe4>
   11a78:	e3500036 	cmp	r0, #54	@ 0x36
   11a7c:	ca00005f 	bgt	11c00 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x250>
   11a80:	e350002f 	cmp	r0, #47	@ 0x2f
   11a84:	ca00007a 	bgt	11c74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2c4>
   11a88:	e2400004 	sub	r0, r0, #4
   11a8c:	e3500001 	cmp	r0, #1
   11a90:	93a01001 	movls	r1, #1
   11a94:	e3540000 	cmp	r4, #0
   11a98:	1affffdd 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11a9c:	e2877007 	add	r7, r7, #7
   11aa0:	e1a0b003 	mov	fp, r3
   11aa4:	e7ef41d7 	ubfx	r4, r7, #3, #16
   11aa8:	e28b3f4a 	add	r3, fp, #296	@ 0x128
   11aac:	e59d2010 	ldr	r2, [sp, #16]
   11ab0:	e58b2024 	str	r2, [fp, #36]	@ 0x24
   11ab4:	e59d2014 	ldr	r2, [sp, #20]
   11ab8:	e58b20e8 	str	r2, [fp, #232]	@ 0xe8
   11abc:	e1c340b0 	strh	r4, [r3]
   11ac0:	e28dd034 	add	sp, sp, #52	@ 0x34
   11ac4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ac8:	e3560000 	cmp	r6, #0
   11acc:	1a000073 	bne	11ca0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2f0>
   11ad0:	e3590000 	cmp	r9, #0
   11ad4:	0a000060 	beq	11c5c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x2ac>
   11ad8:	e5d92000 	ldrb	r2, [r9]
   11adc:	e3520000 	cmp	r2, #0
   11ae0:	11520000 	cmpne	r2, r0
   11ae4:	1afffff5 	bne	11ac0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x110>
   11ae8:	e1a06000 	mov	r6, r0
   11aec:	e3a07008 	mov	r7, #8
   11af0:	e3540000 	cmp	r4, #0
   11af4:	1affffc6 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11af8:	eaffffe7 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11afc:	e3520080 	cmp	r2, #128	@ 0x80
   11b00:	0a000020 	beq	11b88 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1d8>
   11b04:	ca000034 	bgt	11bdc <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x22c>
   11b08:	e3520044 	cmp	r2, #68	@ 0x44
   11b0c:	058d000c 	streq	r0, [sp, #12]
   11b10:	0affffdf 	beq	11a94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe4>
   11b14:	e3520074 	cmp	r2, #116	@ 0x74
   11b18:	01a0a000 	moveq	sl, r0
   11b1c:	e3540000 	cmp	r4, #0
   11b20:	1affffbb 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11b24:	eaffffdc 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11b28:	e1d500d3 	ldrsb	r0, [r5, #3]
   11b2c:	e2444005 	sub	r4, r4, #5
   11b30:	e1d5c0d2 	ldrsb	ip, [r5, #2]
   11b34:	e2855005 	add	r5, r5, #5
   11b38:	e6ff4074 	uxth	r4, r4
   11b3c:	e1a00800 	lsl	r0, r0, #16
   11b40:	e180040c 	orr	r0, r0, ip, lsl #8
   11b44:	e155c0d4 	ldrsb	ip, [r5, #-4]
   11b48:	e180000c 	orr	r0, r0, ip
   11b4c:	e155c0d1 	ldrsb	ip, [r5, #-1]
   11b50:	e1800c0c 	orr	r0, r0, ip, lsl #24
   11b54:	eaffffb9 	b	11a40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x90>
   11b58:	e5d50001 	ldrb	r0, [r5, #1]
   11b5c:	e2444003 	sub	r4, r4, #3
   11b60:	e1d5c0d2 	ldrsb	ip, [r5, #2]
   11b64:	e2855003 	add	r5, r5, #3
   11b68:	e6ff4074 	uxth	r4, r4
   11b6c:	e180040c 	orr	r0, r0, ip, lsl #8
   11b70:	eaffffb2 	b	11a40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x90>
   11b74:	e2444002 	sub	r4, r4, #2
   11b78:	e1d500d1 	ldrsb	r0, [r5, #1]
   11b7c:	e2855002 	add	r5, r5, #2
   11b80:	e6ff4074 	uxth	r4, r4
   11b84:	eaffffad 	b	11a40 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x90>
   11b88:	e2000003 	and	r0, r0, #3
   11b8c:	e0020a9b 	mul	r2, fp, sl
   11b90:	e3500002 	cmp	r0, #2
   11b94:	0a000020 	beq	11c1c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x26c>
   11b98:	e0877002 	add	r7, r7, r2
   11b9c:	e3540000 	cmp	r4, #0
   11ba0:	1affff9b 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11ba4:	eaffffbc 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11ba8:	e3510001 	cmp	r1, #1
   11bac:	03500009 	cmpeq	r0, #9
   11bb0:	03a01002 	moveq	r1, #2
   11bb4:	e3540000 	cmp	r4, #0
   11bb8:	1affff95 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11bbc:	eaffffb6 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11bc0:	e59dc000 	ldr	ip, [sp]
   11bc4:	e3520024 	cmp	r2, #36	@ 0x24
   11bc8:	01a0c000 	moveq	ip, r0
   11bcc:	e3540000 	cmp	r4, #0
   11bd0:	e58dc000 	str	ip, [sp]
   11bd4:	1affff8e 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11bd8:	eaffffaf 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11bdc:	e3520094 	cmp	r2, #148	@ 0x94
   11be0:	01a0b000 	moveq	fp, r0
   11be4:	e3540000 	cmp	r4, #0
   11be8:	1affff89 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11bec:	eaffffaa 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11bf0:	e3540000 	cmp	r4, #0
   11bf4:	e58d0004 	str	r0, [sp, #4]
   11bf8:	1affff85 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11bfc:	eaffffa6 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11c00:	e3500039 	cmp	r0, #57	@ 0x39
   11c04:	1affffa2 	bne	11a94 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xe4>
   11c08:	e3510001 	cmp	r1, #1
   11c0c:	03a01004 	moveq	r1, #4
   11c10:	e3540000 	cmp	r4, #0
   11c14:	1affff7e 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11c18:	eaffff9f 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11c1c:	e3510003 	cmp	r1, #3
   11c20:	0a000022 	beq	11cb0 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x300>
   11c24:	e3510004 	cmp	r1, #4
   11c28:	0a000062 	beq	11db8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x408>
   11c2c:	e3510002 	cmp	r1, #2
   11c30:	1affffd8 	bne	11b98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   11c34:	e1a01007 	mov	r1, r7
   11c38:	e583b104 	str	fp, [r3, #260]	@ 0x104
   11c3c:	e1a00009 	mov	r0, r9
   11c40:	e1cd21f8 	strd	r2, [sp, #24]
   11c44:	ebffff07 	bl	11868 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11c48:	e59d301c 	ldr	r3, [sp, #28]
   11c4c:	e59d2018 	ldr	r2, [sp, #24]
   11c50:	e3a01001 	mov	r1, #1
   11c54:	e5830108 	str	r0, [r3, #264]	@ 0x108
   11c58:	eaffffce 	b	11b98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   11c5c:	e30b11ec 	movw	r1, #45548	@ 0xb1ec
   11c60:	e3401003 	movt	r1, #3
   11c64:	e30b0204 	movw	r0, #45572	@ 0xb204
   11c68:	e3400003 	movt	r0, #3
   11c6c:	e3002132 	movw	r2, #306	@ 0x132
   11c70:	eb006859 	bl	2bddc <assertion_failed>
   11c74:	e3510001 	cmp	r1, #1
   11c78:	03a01003 	moveq	r1, #3
   11c7c:	e3540000 	cmp	r4, #0
   11c80:	1affff63 	bne	11a14 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x64>
   11c84:	eaffff84 	b	11a9c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xec>
   11c88:	e30b11ec 	movw	r1, #45548	@ 0xb1ec
   11c8c:	e3401003 	movt	r1, #3
   11c90:	e30b0220 	movw	r0, #45600	@ 0xb220
   11c94:	e3400003 	movt	r0, #3
   11c98:	e3a020a2 	mov	r2, #162	@ 0xa2
   11c9c:	eb00684e 	bl	2bddc <assertion_failed>
   11ca0:	e2874007 	add	r4, r7, #7
   11ca4:	e1a0b003 	mov	fp, r3
   11ca8:	e7ef41d4 	ubfx	r4, r4, #3, #16
   11cac:	eaffff7d 	b	11aa8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf8>
   11cb0:	e35b0000 	cmp	fp, #0
   11cb4:	0a000067 	beq	11e58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x4a8>
   11cb8:	e59d1010 	ldr	r1, [sp, #16]
   11cbc:	e3a0800c 	mov	r8, #12
   11cc0:	e59de008 	ldr	lr, [sp, #8]
   11cc4:	e30302eb 	movw	r0, #13035	@ 0x32eb
   11cc8:	e34f08a4 	movt	r0, #63652	@ 0xf8a4
   11ccc:	e58d5020 	str	r5, [sp, #32]
   11cd0:	e15e0000 	cmp	lr, r0
   11cd4:	e1a0c00e 	mov	ip, lr
   11cd8:	e0283198 	mla	r8, r8, r1, r3
   11cdc:	e59d1004 	ldr	r1, [sp, #4]
   11ce0:	e58d4024 	str	r4, [sp, #36]	@ 0x24
   11ce4:	01a0c001 	moveq	ip, r1
   11ce8:	e59d1000 	ldr	r1, [sp]
   11cec:	e58dc018 	str	ip, [sp, #24]
   11cf0:	e59dc00c 	ldr	ip, [sp, #12]
   11cf4:	e1510000 	cmp	r1, r0
   11cf8:	e1a0e001 	mov	lr, r1
   11cfc:	e3a01000 	mov	r1, #0
   11d00:	01a0e00c 	moveq	lr, ip
   11d04:	e59d4018 	ldr	r4, [sp, #24]
   11d08:	e1a05001 	mov	r5, r1
   11d0c:	e58d6018 	str	r6, [sp, #24]
   11d10:	e58d2028 	str	r2, [sp, #40]	@ 0x28
   11d14:	e1a0600a 	mov	r6, sl
   11d18:	e58d702c 	str	r7, [sp, #44]	@ 0x2c
   11d1c:	e1a0a008 	mov	sl, r8
   11d20:	e58d301c 	str	r3, [sp, #28]
   11d24:	e1a0800e 	mov	r8, lr
   11d28:	ea000008 	b	11d50 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3a0>
   11d2c:	ebfffecd 	bl	11868 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11d30:	e58a0028 	str	r0, [sl, #40]	@ 0x28
   11d34:	e2850001 	add	r0, r5, #1
   11d38:	e0877006 	add	r7, r7, r6
   11d3c:	e28aa00c 	add	sl, sl, #12
   11d40:	e350000f 	cmp	r0, #15
   11d44:	9150000b 	cmpls	r0, fp
   11d48:	2a000009 	bcs	11d74 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x3c4>
   11d4c:	e1a05000 	mov	r5, r0
   11d50:	e1a02006 	mov	r2, r6
   11d54:	e1a01007 	mov	r1, r7
   11d58:	e1a00009 	mov	r0, r9
   11d5c:	e3540000 	cmp	r4, #0
   11d60:	e58a402c 	str	r4, [sl, #44]	@ 0x2c
   11d64:	e58a8030 	str	r8, [sl, #48]	@ 0x30
   11d68:	aaffffef 	bge	11d2c <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x37c>
   11d6c:	ebfffee1 	bl	118f8 <CUSBGamePadStandardDevice::BitGetSigned(void const*, unsigned int, unsigned int)>
   11d70:	eaffffee 	b	11d30 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x380>
   11d74:	e59d1010 	ldr	r1, [sp, #16]
   11d78:	e1a00005 	mov	r0, r5
   11d7c:	e1a0a006 	mov	sl, r6
   11d80:	e59d4024 	ldr	r4, [sp, #36]	@ 0x24
   11d84:	e2811001 	add	r1, r1, #1
   11d88:	e59d6018 	ldr	r6, [sp, #24]
   11d8c:	e0811000 	add	r1, r1, r0
   11d90:	e59d2028 	ldr	r2, [sp, #40]	@ 0x28
   11d94:	e58d1010 	str	r1, [sp, #16]
   11d98:	e3a01001 	mov	r1, #1
   11d9c:	e59d702c 	ldr	r7, [sp, #44]	@ 0x2c
   11da0:	e59d5020 	ldr	r5, [sp, #32]
   11da4:	e59d301c 	ldr	r3, [sp, #28]
   11da8:	eaffff7a 	b	11b98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   11dac:	e58d4014 	str	r4, [sp, #20]
   11db0:	e58d4010 	str	r4, [sp, #16]
   11db4:	eaffff3b 	b	11aa8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0xf8>
   11db8:	e35b0000 	cmp	fp, #0
   11dbc:	0a000025 	beq	11e58 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x4a8>
   11dc0:	e59d1014 	ldr	r1, [sp, #20]
   11dc4:	e3a08000 	mov	r8, #0
   11dc8:	e58d5018 	str	r5, [sp, #24]
   11dcc:	e1a05008 	mov	r5, r8
   11dd0:	e281103a 	add	r1, r1, #58	@ 0x3a
   11dd4:	e58d401c 	str	r4, [sp, #28]
   11dd8:	e58d6020 	str	r6, [sp, #32]
   11ddc:	e1a0400a 	mov	r4, sl
   11de0:	e0830101 	add	r0, r3, r1, lsl #2
   11de4:	e1a06007 	mov	r6, r7
   11de8:	e1a0a007 	mov	sl, r7
   11dec:	e1a08000 	mov	r8, r0
   11df0:	e1a07002 	mov	r7, r2
   11df4:	e58d3024 	str	r3, [sp, #36]	@ 0x24
   11df8:	e1a01006 	mov	r1, r6
   11dfc:	e1a02004 	mov	r2, r4
   11e00:	e1a00009 	mov	r0, r9
   11e04:	e0866004 	add	r6, r6, r4
   11e08:	ebfffe96 	bl	11868 <CUSBGamePadStandardDevice::BitGetUnsigned(void const*, unsigned int, unsigned int)>
   11e0c:	e5a80004 	str	r0, [r8, #4]!
   11e10:	e1a00005 	mov	r0, r5
   11e14:	e2855001 	add	r5, r5, #1
   11e18:	e3550005 	cmp	r5, #5
   11e1c:	9155000b 	cmpls	r5, fp
   11e20:	3afffff4 	bcc	11df8 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x448>
   11e24:	e59d1014 	ldr	r1, [sp, #20]
   11e28:	e1a02007 	mov	r2, r7
   11e2c:	e59d5018 	ldr	r5, [sp, #24]
   11e30:	e1a0700a 	mov	r7, sl
   11e34:	e2811001 	add	r1, r1, #1
   11e38:	e1a0a004 	mov	sl, r4
   11e3c:	e0811000 	add	r1, r1, r0
   11e40:	e59d6020 	ldr	r6, [sp, #32]
   11e44:	e58d1014 	str	r1, [sp, #20]
   11e48:	e3a01001 	mov	r1, #1
   11e4c:	e59d401c 	ldr	r4, [sp, #28]
   11e50:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   11e54:	eaffff4f 	b	11b98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>
   11e58:	e3a01001 	mov	r1, #1
   11e5c:	eaffff4d 	b	11b98 <CUSBGamePadStandardDevice::DecodeReport(unsigned char const*)+0x1e8>

00011e60 <CUSBGamePadStandardDevice::Configure()>:
   11e60:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e64:	e3a01021 	mov	r1, #33	@ 0x21
   11e68:	e1a04000 	mov	r4, r0
   11e6c:	e24dd078 	sub	sp, sp, #120	@ 0x78
   11e70:	ebfff9f6 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   11e74:	e2505000 	subs	r5, r0, #0
   11e78:	0a000003 	beq	11e8c <CUSBGamePadStandardDevice::Configure()+0x2c>
   11e7c:	e1d530b7 	ldrh	r3, [r5, #7]
   11e80:	e6ff0073 	uxth	r0, r3
   11e84:	e3500000 	cmp	r0, #0
   11e88:	1a000005 	bne	11ea4 <CUSBGamePadStandardDevice::Configure()+0x44>
   11e8c:	e59f1154 	ldr	r1, [pc, #340]	@ 11fe8 <CUSBGamePadStandardDevice::Configure()+0x188>
   11e90:	e1a00004 	mov	r0, r4
   11e94:	ebfff9f8 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   11e98:	e3a00000 	mov	r0, #0
   11e9c:	e28dd078 	add	sp, sp, #120	@ 0x78
   11ea0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11ea4:	e2846f4e 	add	r6, r4, #312	@ 0x138
   11ea8:	e1c630b0 	strh	r3, [r6]
   11eac:	eb0090a2 	bl	3613c <operator new[](unsigned int)>
   11eb0:	e1a03000 	mov	r3, r0
   11eb4:	e1a00004 	mov	r0, r4
   11eb8:	e5843134 	str	r3, [r4, #308]	@ 0x134
   11ebc:	ebfff9d8 	bl	10624 <CUSBFunction::GetHost() const>
   11ec0:	e1a07000 	mov	r7, r0
   11ec4:	e1a00004 	mov	r0, r4
   11ec8:	ebfff9ca 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   11ecc:	e5d58006 	ldrb	r8, [r5, #6]
   11ed0:	e5949134 	ldr	r9, [r4, #308]	@ 0x134
   11ed4:	e1a05000 	mov	r5, r0
   11ed8:	e1d6a0b0 	ldrh	sl, [r6]
   11edc:	e1a00004 	mov	r0, r4
   11ee0:	ebfffa2e 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   11ee4:	e3a03081 	mov	r3, #129	@ 0x81
   11ee8:	e58d000c 	str	r0, [sp, #12]
   11eec:	e1a02008 	mov	r2, r8
   11ef0:	e58d3008 	str	r3, [sp, #8]
   11ef4:	e1a01005 	mov	r1, r5
   11ef8:	e3a03000 	mov	r3, #0
   11efc:	e1a00007 	mov	r0, r7
   11f00:	e58da004 	str	sl, [sp, #4]
   11f04:	e58d9000 	str	r9, [sp]
   11f08:	eb0006fa 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   11f0c:	e1d630b0 	ldrh	r3, [r6]
   11f10:	e1500003 	cmp	r0, r3
   11f14:	1a00001f 	bne	11f98 <CUSBGamePadStandardDevice::Configure()+0x138>
   11f18:	e3a02064 	mov	r2, #100	@ 0x64
   11f1c:	e3a01000 	mov	r1, #0
   11f20:	e28d0014 	add	r0, sp, #20
   11f24:	eb008e5f 	bl	358a8 <memset>
   11f28:	e5943000 	ldr	r3, [r4]
   11f2c:	e28d1014 	add	r1, sp, #20
   11f30:	e1a00004 	mov	r0, r4
   11f34:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   11f38:	e12fff33 	blx	r3
   11f3c:	e5943024 	ldr	r3, [r4, #36]	@ 0x24
   11f40:	e3530000 	cmp	r3, #0
   11f44:	1a000005 	bne	11f60 <CUSBGamePadStandardDevice::Configure()+0x100>
   11f48:	e59430e8 	ldr	r3, [r4, #232]	@ 0xe8
   11f4c:	e3530000 	cmp	r3, #0
   11f50:	1a000002 	bne	11f60 <CUSBGamePadStandardDevice::Configure()+0x100>
   11f54:	e5943104 	ldr	r3, [r4, #260]	@ 0x104
   11f58:	e3530000 	cmp	r3, #0
   11f5c:	0affffcd 	beq	11e98 <CUSBGamePadStandardDevice::Configure()+0x38>
   11f60:	e2843f4a 	add	r3, r4, #296	@ 0x128
   11f64:	e1d330b0 	ldrh	r3, [r3]
   11f68:	e3530000 	cmp	r3, #0
   11f6c:	0a000017 	beq	11fd0 <CUSBGamePadStandardDevice::Configure()+0x170>
   11f70:	e1a00004 	mov	r0, r4
   11f74:	eb002df8 	bl	1d75c <CUSBGamePadDevice::Configure()>
   11f78:	e3500000 	cmp	r0, #0
   11f7c:	0a00000c 	beq	11fb4 <CUSBGamePadStandardDevice::Configure()+0x154>
   11f80:	e5d43130 	ldrb	r3, [r4, #304]	@ 0x130
   11f84:	e3530000 	cmp	r3, #0
   11f88:	0affffc3 	beq	11e9c <CUSBGamePadStandardDevice::Configure()+0x3c>
   11f8c:	e1a00004 	mov	r0, r4
   11f90:	eb0005a1 	bl	1361c <CUSBHIDDevice::StartRequest()>
   11f94:	eaffffc0 	b	11e9c <CUSBGamePadStandardDevice::Configure()+0x3c>
   11f98:	eb00720a 	bl	2e7c8 <CLogger::Get()>
   11f9c:	e59f1044 	ldr	r1, [pc, #68]	@ 11fe8 <CUSBGamePadStandardDevice::Configure()+0x188>
   11fa0:	e3a02001 	mov	r2, #1
   11fa4:	e30a3d30 	movw	r3, #44336	@ 0xad30
   11fa8:	e3403003 	movt	r3, #3
   11fac:	eb0073ce 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fb0:	eaffffb8 	b	11e98 <CUSBGamePadStandardDevice::Configure()+0x38>
   11fb4:	eb007203 	bl	2e7c8 <CLogger::Get()>
   11fb8:	e59f1028 	ldr	r1, [pc, #40]	@ 11fe8 <CUSBGamePadStandardDevice::Configure()+0x188>
   11fbc:	e3a02001 	mov	r2, #1
   11fc0:	e30b3138 	movw	r3, #45368	@ 0xb138
   11fc4:	e3403003 	movt	r3, #3
   11fc8:	eb0073c7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fcc:	eaffffb1 	b	11e98 <CUSBGamePadStandardDevice::Configure()+0x38>
   11fd0:	e30b11ec 	movw	r1, #45548	@ 0xb1ec
   11fd4:	e3401003 	movt	r1, #3
   11fd8:	e30b023c 	movw	r0, #45628	@ 0xb23c
   11fdc:	e3400003 	movt	r0, #3
   11fe0:	e3a02085 	mov	r2, #133	@ 0x85
   11fe4:	eb00677c 	bl	2bddc <assertion_failed>
   11fe8:	0003ee88 	.word	0x0003ee88

00011fec <CUSBGamePadDevice::GetProperties()>:
   11fec:	e3a00000 	mov	r0, #0
   11ff0:	e12fff1e 	bx	lr

00011ff4 <CUSBGamePadDevice::SetLEDMode(TGamePadLEDMode)>:
   11ff4:	e3a00000 	mov	r0, #0
   11ff8:	e12fff1e 	bx	lr

00011ffc <CUSBGamePadDevice::SetRumbleMode(TGamePadRumbleMode)>:
   11ffc:	e3a00000 	mov	r0, #0
   12000:	e12fff1e 	bx	lr

00012004 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   12004:	e59f3014 	ldr	r3, [pc, #20]	@ 12020 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x1c>
   12008:	e92d4010 	push	{r4, lr}
   1200c:	e1a04000 	mov	r4, r0
   12010:	e5803000 	str	r3, [r0]
   12014:	eb002e3d 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12018:	e1a00004 	mov	r0, r4
   1201c:	e8bd8010 	pop	{r4, pc}
   12020:	0003eea0 	.word	0x0003eea0

00012024 <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()>:
   12024:	e59f3020 	ldr	r3, [pc, #32]	@ 1204c <CUSBGamePadSwitchProDevice::~CUSBGamePadSwitchProDevice()+0x28>
   12028:	e92d4010 	push	{r4, lr}
   1202c:	e1a04000 	mov	r4, r0
   12030:	e5803000 	str	r3, [r0]
   12034:	eb002e35 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12038:	e1a00004 	mov	r0, r4
   1203c:	e3a01f4d 	mov	r1, #308	@ 0x134
   12040:	eb00904f 	bl	36184 <operator delete(void*, unsigned int)>
   12044:	e1a00004 	mov	r0, r4
   12048:	e8bd8010 	pop	{r4, pc}
   1204c:	0003eea0 	.word	0x0003eea0

00012050 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)>:
   12050:	e92d4030 	push	{r4, r5, lr}
   12054:	e30eee98 	movw	lr, #61080	@ 0xee98
   12058:	e340e003 	movt	lr, #3
   1205c:	e24dd07c 	sub	sp, sp, #124	@ 0x7c
   12060:	e1a05001 	mov	r5, r1
   12064:	e28dc03f 	add	ip, sp, #63	@ 0x3f
   12068:	e1a04000 	mov	r4, r0
   1206c:	e3ccc03f 	bic	ip, ip, #63	@ 0x3f
   12070:	e59e0054 	ldr	r0, [lr, #84]	@ 0x54
   12074:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   12078:	e28c300b 	add	r3, ip, #11
   1207c:	e1a0200c 	mov	r2, ip
   12080:	e3510001 	cmp	r1, #1
   12084:	e59e1058 	ldr	r1, [lr, #88]	@ 0x58
   12088:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   1208c:	e28c301b 	add	r3, ip, #27
   12090:	e8a20003 	stmia	r2!, {r0, r1}
   12094:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12098:	e28c302b 	add	r3, ip, #43	@ 0x2b
   1209c:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   120a0:	e28c3038 	add	r3, ip, #56	@ 0x38
   120a4:	f443070f 	vst1.8	{d16}, [r3]
   120a8:	e1de35bc 	ldrh	r3, [lr, #92]	@ 0x5c
   120ac:	e1c230b0 	strh	r3, [r2]
   120b0:	e5de305e 	ldrb	r3, [lr, #94]	@ 0x5e
   120b4:	e5c23002 	strb	r3, [r2, #2]
   120b8:	0a000020 	beq	12140 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0xf0>
   120bc:	e3550002 	cmp	r5, #2
   120c0:	0a000005 	beq	120dc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x8c>
   120c4:	e3550000 	cmp	r5, #0
   120c8:	0a000007 	beq	120ec <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>
   120cc:	e3a04001 	mov	r4, #1
   120d0:	e1a00004 	mov	r0, r4
   120d4:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   120d8:	e8bd8030 	pop	{r4, r5, pc}
   120dc:	e3062220 	movw	r2, #25120	@ 0x6220
   120e0:	e3e03000 	mvn	r3, #0
   120e4:	e1cc20b3 	strh	r2, [ip, #3]
   120e8:	e5cc3005 	strb	r3, [ip, #5]
   120ec:	e5d41131 	ldrb	r1, [r4, #305]	@ 0x131
   120f0:	e3a03000 	mov	r3, #0
   120f4:	e3a0200a 	mov	r2, #10
   120f8:	e2810001 	add	r0, r1, #1
   120fc:	e201100f 	and	r1, r1, #15
   12100:	e5c40131 	strb	r0, [r4, #305]	@ 0x131
   12104:	e1a00004 	mov	r0, r4
   12108:	e5cc1001 	strb	r1, [ip, #1]
   1210c:	e1a0100c 	mov	r1, ip
   12110:	eb0004bc 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12114:	e2504000 	subs	r4, r0, #0
   12118:	1affffeb 	bne	120cc <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   1211c:	eb0071a9 	bl	2e7c8 <CLogger::Get()>
   12120:	e59f1028 	ldr	r1, [pc, #40]	@ 12150 <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x100>
   12124:	e3a02001 	mov	r2, #1
   12128:	e30b3250 	movw	r3, #45648	@ 0xb250
   1212c:	e3403003 	movt	r3, #3
   12130:	eb00736d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12134:	e1a00004 	mov	r0, r4
   12138:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   1213c:	e8bd8030 	pop	{r4, r5, pc}
   12140:	e3023098 	movw	r3, #8344	@ 0x2098
   12144:	e34f3f62 	movt	r3, #65378	@ 0xff62
   12148:	e58c3006 	str	r3, [ip, #6]
   1214c:	eaffffe6 	b	120ec <CUSBGamePadSwitchProDevice::SetRumbleMode(TGamePadRumbleMode)+0x9c>
   12150:	0003eef8 	.word	0x0003eef8

00012154 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)>:
   12154:	e92d4010 	push	{r4, lr}
   12158:	e1a04001 	mov	r4, r1
   1215c:	e5d13000 	ldrb	r3, [r1]
   12160:	e24dd008 	sub	sp, sp, #8
   12164:	e3530030 	cmp	r3, #48	@ 0x30
   12168:	1a000067 	bne	1230c <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1b8>
   1216c:	e3a03000 	mov	r3, #0
   12170:	e5803108 	str	r3, [r0, #264]	@ 0x108
   12174:	e5d12003 	ldrb	r2, [r1, #3]
   12178:	e2022001 	and	r2, r2, #1
   1217c:	e1a02382 	lsl	r2, r2, #7
   12180:	e5802108 	str	r2, [r0, #264]	@ 0x108
   12184:	e5d13003 	ldrb	r3, [r1, #3]
   12188:	e3130002 	tst	r3, #2
   1218c:	13822b01 	orrne	r2, r2, #1024	@ 0x400
   12190:	15802108 	strne	r2, [r0, #264]	@ 0x108
   12194:	15d13003 	ldrbne	r3, [r1, #3]
   12198:	e3130004 	tst	r3, #4
   1219c:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   121a0:	13833c01 	orrne	r3, r3, #256	@ 0x100
   121a4:	15803108 	strne	r3, [r0, #264]	@ 0x108
   121a8:	15d13003 	ldrbne	r3, [r1, #3]
   121ac:	e3130008 	tst	r3, #8
   121b0:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   121b4:	13833c02 	orrne	r3, r3, #512	@ 0x200
   121b8:	15803108 	strne	r3, [r0, #264]	@ 0x108
   121bc:	15d13003 	ldrbne	r3, [r1, #3]
   121c0:	e3130040 	tst	r3, #64	@ 0x40
   121c4:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   121c8:	13833040 	orrne	r3, r3, #64	@ 0x40
   121cc:	15803108 	strne	r3, [r0, #264]	@ 0x108
   121d0:	15d13003 	ldrbne	r3, [r1, #3]
   121d4:	e3130080 	tst	r3, #128	@ 0x80
   121d8:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   121dc:	13833010 	orrne	r3, r3, #16
   121e0:	15803108 	strne	r3, [r0, #264]	@ 0x108
   121e4:	e5d13004 	ldrb	r3, [r1, #4]
   121e8:	e3130001 	tst	r3, #1
   121ec:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   121f0:	13833702 	orrne	r3, r3, #524288	@ 0x80000
   121f4:	15803108 	strne	r3, [r0, #264]	@ 0x108
   121f8:	15d13004 	ldrbne	r3, [r1, #4]
   121fc:	e3130002 	tst	r3, #2
   12200:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12204:	13833601 	orrne	r3, r3, #1048576	@ 0x100000
   12208:	15803108 	strne	r3, [r0, #264]	@ 0x108
   1220c:	15d13004 	ldrbne	r3, [r1, #4]
   12210:	e3130004 	tst	r3, #4
   12214:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12218:	13833a02 	orrne	r3, r3, #8192	@ 0x2000
   1221c:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12220:	15d13004 	ldrbne	r3, [r1, #4]
   12224:	e3130008 	tst	r3, #8
   12228:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   1222c:	13833a01 	orrne	r3, r3, #4096	@ 0x1000
   12230:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12234:	15d13004 	ldrbne	r3, [r1, #4]
   12238:	e3130010 	tst	r3, #16
   1223c:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12240:	13833001 	orrne	r3, r3, #1
   12244:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12248:	15d13004 	ldrbne	r3, [r1, #4]
   1224c:	e3130020 	tst	r3, #32
   12250:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12254:	13833b02 	orrne	r3, r3, #2048	@ 0x800
   12258:	15803108 	strne	r3, [r0, #264]	@ 0x108
   1225c:	e5d13005 	ldrb	r3, [r1, #5]
   12260:	e3130001 	tst	r3, #1
   12264:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12268:	13833802 	orrne	r3, r3, #131072	@ 0x20000
   1226c:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12270:	15d13005 	ldrbne	r3, [r1, #5]
   12274:	e3130002 	tst	r3, #2
   12278:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   1227c:	13833902 	orrne	r3, r3, #32768	@ 0x8000
   12280:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12284:	15d13005 	ldrbne	r3, [r1, #5]
   12288:	e3130004 	tst	r3, #4
   1228c:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12290:	13833801 	orrne	r3, r3, #65536	@ 0x10000
   12294:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12298:	15d13005 	ldrbne	r3, [r1, #5]
   1229c:	e3130008 	tst	r3, #8
   122a0:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   122a4:	13833701 	orrne	r3, r3, #262144	@ 0x40000
   122a8:	15803108 	strne	r3, [r0, #264]	@ 0x108
   122ac:	15d13005 	ldrbne	r3, [r1, #5]
   122b0:	e3130040 	tst	r3, #64	@ 0x40
   122b4:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   122b8:	13833020 	orrne	r3, r3, #32
   122bc:	15803108 	strne	r3, [r0, #264]	@ 0x108
   122c0:	15d13005 	ldrbne	r3, [r1, #5]
   122c4:	e3130080 	tst	r3, #128	@ 0x80
   122c8:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   122cc:	13833008 	orrne	r3, r3, #8
   122d0:	15803108 	strne	r3, [r0, #264]	@ 0x108
   122d4:	e1d130b6 	ldrh	r3, [r1, #6]
   122d8:	e7e73253 	ubfx	r3, r3, #4, #8
   122dc:	e5803028 	str	r3, [r0, #40]	@ 0x28
   122e0:	e5d13008 	ldrb	r3, [r1, #8]
   122e4:	e26330ff 	rsb	r3, r3, #255	@ 0xff
   122e8:	e5803034 	str	r3, [r0, #52]	@ 0x34
   122ec:	e1d130b9 	ldrh	r3, [r1, #9]
   122f0:	e7e73253 	ubfx	r3, r3, #4, #8
   122f4:	e5803040 	str	r3, [r0, #64]	@ 0x40
   122f8:	e5d1300b 	ldrb	r3, [r1, #11]
   122fc:	e26330ff 	rsb	r3, r3, #255	@ 0xff
   12300:	e580304c 	str	r3, [r0, #76]	@ 0x4c
   12304:	e28dd008 	add	sp, sp, #8
   12308:	e8bd8010 	pop	{r4, pc}
   1230c:	eb00712d 	bl	2e7c8 <CLogger::Get()>
   12310:	e5d4c000 	ldrb	ip, [r4]
   12314:	e59f1018 	ldr	r1, [pc, #24]	@ 12334 <CUSBGamePadSwitchProDevice::DecodeReport(unsigned char const*)+0x1e0>
   12318:	e3a02003 	mov	r2, #3
   1231c:	e58dc000 	str	ip, [sp]
   12320:	e30b3268 	movw	r3, #45672	@ 0xb268
   12324:	e3403003 	movt	r3, #3
   12328:	eb0072ef 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1232c:	e28dd008 	add	sp, sp, #8
   12330:	e8bd8010 	pop	{r4, pc}
   12334:	0003eef8 	.word	0x0003eef8

00012338 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)>:
   12338:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   1233c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12340:	e30e4e98 	movw	r4, #61080	@ 0xee98
   12344:	e3404003 	movt	r4, #3
   12348:	e24dd07c 	sub	sp, sp, #124	@ 0x7c
   1234c:	e28dc03f 	add	ip, sp, #63	@ 0x3f
   12350:	e5d06131 	ldrb	r6, [r0, #305]	@ 0x131
   12354:	e3ccc03f 	bic	ip, ip, #63	@ 0x3f
   12358:	e1a05000 	mov	r5, r0
   1235c:	e28c300d 	add	r3, ip, #13
   12360:	e1a0e00c 	mov	lr, ip
   12364:	e5940070 	ldr	r0, [r4, #112]	@ 0x70
   12368:	e1a07001 	mov	r7, r1
   1236c:	e5942078 	ldr	r2, [r4, #120]	@ 0x78
   12370:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12374:	e28c301d 	add	r3, ip, #29
   12378:	e5941074 	ldr	r1, [r4, #116]	@ 0x74
   1237c:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   12380:	e1a00005 	mov	r0, r5
   12384:	e1a0100c 	mov	r1, ip
   12388:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   1238c:	e28c302d 	add	r3, ip, #45	@ 0x2d
   12390:	e3a0200c 	mov	r2, #12
   12394:	e5cc700b 	strb	r7, [ip, #11]
   12398:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   1239c:	e28c3038 	add	r3, ip, #56	@ 0x38
   123a0:	f443070f 	vst1.8	{d16}, [r3]
   123a4:	e5d4307c 	ldrb	r3, [r4, #124]	@ 0x7c
   123a8:	e5ce3000 	strb	r3, [lr]
   123ac:	e2863001 	add	r3, r6, #1
   123b0:	e5c53131 	strb	r3, [r5, #305]	@ 0x131
   123b4:	e3a03000 	mov	r3, #0
   123b8:	e206600f 	and	r6, r6, #15
   123bc:	e5cc6001 	strb	r6, [ip, #1]
   123c0:	eb000410 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   123c4:	e2505000 	subs	r5, r0, #0
   123c8:	0a000002 	beq	123d8 <CUSBGamePadSwitchProDevice::SetLEDMode(TGamePadLEDMode)+0xa0>
   123cc:	e1a00005 	mov	r0, r5
   123d0:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   123d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   123d8:	eb0070fa 	bl	2e7c8 <CLogger::Get()>
   123dc:	e3a02001 	mov	r2, #1
   123e0:	e2841060 	add	r1, r4, #96	@ 0x60
   123e4:	e30b3284 	movw	r3, #45700	@ 0xb284
   123e8:	e3403003 	movt	r3, #3
   123ec:	eb0072be 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   123f0:	e1a00005 	mov	r0, r5
   123f4:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   123f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000123fc <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)>:
   123fc:	e92d4010 	push	{r4, lr}
   12400:	e1a04000 	mov	r4, r0
   12404:	eb002d30 	bl	1d8cc <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   12408:	e3a03000 	mov	r3, #0
   1240c:	e59f0024 	ldr	r0, [pc, #36]	@ 12438 <CUSBGamePadSwitchProDevice::CUSBGamePadSwitchProDevice(CUSBFunction*)+0x3c>
   12410:	e1a02003 	mov	r2, r3
   12414:	e5840000 	str	r0, [r4]
   12418:	e3a01003 	mov	r1, #3
   1241c:	e1a00004 	mov	r0, r4
   12420:	ebfff8a9 	bl	106cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   12424:	e3a03000 	mov	r3, #0
   12428:	e5c40130 	strb	r0, [r4, #304]	@ 0x130
   1242c:	e1a00004 	mov	r0, r4
   12430:	e5c43131 	strb	r3, [r4, #305]	@ 0x131
   12434:	e8bd8010 	pop	{r4, pc}
   12438:	0003eea0 	.word	0x0003eea0

0001243c <CUSBGamePadSwitchProDevice::Configure()>:
   1243c:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   12440:	ed2d8b04 	vpush	{d8-d9}
   12444:	e28db028 	add	fp, sp, #40	@ 0x28
   12448:	e24dd0fc 	sub	sp, sp, #252	@ 0xfc
   1244c:	e5d03130 	ldrb	r3, [r0, #304]	@ 0x130
   12450:	e3530000 	cmp	r3, #0
   12454:	0a00008c 	beq	1268c <CUSBGamePadSwitchProDevice::Configure()+0x250>
   12458:	e2806f4a 	add	r6, r0, #296	@ 0x128
   1245c:	e3a03040 	mov	r3, #64	@ 0x40
   12460:	e1a04000 	mov	r4, r0
   12464:	e1c630b0 	strh	r3, [r6]
   12468:	eb002cbb 	bl	1d75c <CUSBGamePadDevice::Configure()>
   1246c:	e3500000 	cmp	r0, #0
   12470:	0a00008f 	beq	126b4 <CUSBGamePadSwitchProDevice::Configure()+0x278>
   12474:	e1d620b0 	ldrh	r2, [r6]
   12478:	e3a03015 	mov	r3, #21
   1247c:	e5843104 	str	r3, [r4, #260]	@ 0x104
   12480:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   12484:	e2423001 	sub	r3, r2, #1
   12488:	e284c02c 	add	ip, r4, #44	@ 0x2c
   1248c:	e383303f 	orr	r3, r3, #63	@ 0x3f
   12490:	e2840038 	add	r0, r4, #56	@ 0x38
   12494:	e2833040 	add	r3, r3, #64	@ 0x40
   12498:	e2841044 	add	r1, r4, #68	@ 0x44
   1249c:	e3c33007 	bic	r3, r3, #7
   124a0:	e24b50e5 	sub	r5, fp, #229	@ 0xe5
   124a4:	e04dd003 	sub	sp, sp, r3
   124a8:	e2843050 	add	r3, r4, #80	@ 0x50
   124ac:	e3c5503f 	bic	r5, r5, #63	@ 0x3f
   124b0:	e28d803f 	add	r8, sp, #63	@ 0x3f
   124b4:	e3a07000 	mov	r7, #0
   124b8:	e3c8803f 	bic	r8, r8, #63	@ 0x3f
   124bc:	f2808050 	vmov.i32	q4, #0	@ 0x00000000
   124c0:	e58470e8 	str	r7, [r4, #232]	@ 0xe8
   124c4:	e3a0e004 	mov	lr, #4
   124c8:	e584e024 	str	lr, [r4, #36]	@ 0x24
   124cc:	f44c078f 	vst1.32	{d16}, [ip]
   124d0:	f440078f 	vst1.32	{d16}, [r0]
   124d4:	e1a00004 	mov	r0, r4
   124d8:	f441078f 	vst1.32	{d16}, [r1]
   124dc:	e1a01008 	mov	r1, r8
   124e0:	f443078f 	vst1.32	{d16}, [r3]
   124e4:	e1a03007 	mov	r3, r7
   124e8:	eb000424 	bl	13580 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   124ec:	e3a02d0e 	mov	r2, #896	@ 0x380
   124f0:	e5852080 	str	r2, [r5, #128]	@ 0x80
   124f4:	e2852084 	add	r2, r5, #132	@ 0x84
   124f8:	e1a03007 	mov	r3, r7
   124fc:	e2851080 	add	r1, r5, #128	@ 0x80
   12500:	e1a00004 	mov	r0, r4
   12504:	ed858b2d 	vstr	d8, [r5, #180]	@ 0xb4
   12508:	f4028a0f 	vst1.8	{d8-d9}, [r2]
   1250c:	e3a02002 	mov	r2, #2
   12510:	ed858b25 	vstr	d8, [r5, #148]	@ 0x94
   12514:	ed858b27 	vstr	d8, [r5, #156]	@ 0x9c
   12518:	ed858b29 	vstr	d8, [r5, #164]	@ 0xa4
   1251c:	ed858b2b 	vstr	d8, [r5, #172]	@ 0xac
   12520:	ed858b2e 	vstr	d8, [r5, #184]	@ 0xb8
   12524:	eb0003b7 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12528:	e1500007 	cmp	r0, r7
   1252c:	0a00004c 	beq	12664 <CUSBGamePadSwitchProDevice::Configure()+0x228>
   12530:	e1d620b0 	ldrh	r2, [r6]
   12534:	e1a03007 	mov	r3, r7
   12538:	e1a01008 	mov	r1, r8
   1253c:	e1a00004 	mov	r0, r4
   12540:	eb00040e 	bl	13580 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   12544:	e3500000 	cmp	r0, #0
   12548:	da000060 	ble	126d0 <CUSBGamePadSwitchProDevice::Configure()+0x294>
   1254c:	e5d83000 	ldrb	r3, [r8]
   12550:	e3530081 	cmp	r3, #129	@ 0x81
   12554:	1a000042 	bne	12664 <CUSBGamePadSwitchProDevice::Configure()+0x228>
   12558:	e5d83001 	ldrb	r3, [r8, #1]
   1255c:	e3530003 	cmp	r3, #3
   12560:	1a00003f 	bne	12664 <CUSBGamePadSwitchProDevice::Configure()+0x228>
   12564:	e3a03d0a 	mov	r3, #640	@ 0x280
   12568:	e5853040 	str	r3, [r5, #64]	@ 0x40
   1256c:	e2853044 	add	r3, r5, #68	@ 0x44
   12570:	e3a02002 	mov	r2, #2
   12574:	e2851040 	add	r1, r5, #64	@ 0x40
   12578:	e1a00004 	mov	r0, r4
   1257c:	ed858b1d 	vstr	d8, [r5, #116]	@ 0x74
   12580:	f4038a0f 	vst1.8	{d8-d9}, [r3]
   12584:	e1a03007 	mov	r3, r7
   12588:	ed858b15 	vstr	d8, [r5, #84]	@ 0x54
   1258c:	ed858b17 	vstr	d8, [r5, #92]	@ 0x5c
   12590:	ed858b19 	vstr	d8, [r5, #100]	@ 0x64
   12594:	ed858b1b 	vstr	d8, [r5, #108]	@ 0x6c
   12598:	ed858b1e 	vstr	d8, [r5, #120]	@ 0x78
   1259c:	eb000399 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   125a0:	e3500000 	cmp	r0, #0
   125a4:	0a00003b 	beq	12698 <CUSBGamePadSwitchProDevice::Configure()+0x25c>
   125a8:	e1d620b0 	ldrh	r2, [r6]
   125ac:	e1a03007 	mov	r3, r7
   125b0:	e1a01008 	mov	r1, r8
   125b4:	e1a00004 	mov	r0, r4
   125b8:	eb0003f0 	bl	13580 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   125bc:	e3500000 	cmp	r0, #0
   125c0:	da000049 	ble	126ec <CUSBGamePadSwitchProDevice::Configure()+0x2b0>
   125c4:	e5d83000 	ldrb	r3, [r8]
   125c8:	e3530081 	cmp	r3, #129	@ 0x81
   125cc:	1a000031 	bne	12698 <CUSBGamePadSwitchProDevice::Configure()+0x25c>
   125d0:	e5d83001 	ldrb	r3, [r8, #1]
   125d4:	e3530002 	cmp	r3, #2
   125d8:	1a00002e 	bne	12698 <CUSBGamePadSwitchProDevice::Configure()+0x25c>
   125dc:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   125e0:	e3a03d12 	mov	r3, #1152	@ 0x480
   125e4:	e1a01005 	mov	r1, r5
   125e8:	e4853004 	str	r3, [r5], #4
   125ec:	e3a02002 	mov	r2, #2
   125f0:	e3a03000 	mov	r3, #0
   125f4:	e1a00004 	mov	r0, r4
   125f8:	edc50b0c 	vstr	d16, [r5, #48]	@ 0x30
   125fc:	f4450a0f 	vst1.8	{d16-d17}, [r5]
   12600:	edc50b04 	vstr	d16, [r5, #16]
   12604:	edc50b06 	vstr	d16, [r5, #24]
   12608:	edc50b08 	vstr	d16, [r5, #32]
   1260c:	edc50b0a 	vstr	d16, [r5, #40]	@ 0x28
   12610:	edc50b0d 	vstr	d16, [r5, #52]	@ 0x34
   12614:	eb00037b 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12618:	e3500000 	cmp	r0, #0
   1261c:	0a000040 	beq	12724 <CUSBGamePadSwitchProDevice::Configure()+0x2e8>
   12620:	e5943000 	ldr	r3, [r4]
   12624:	e1a00004 	mov	r0, r4
   12628:	e5d4112c 	ldrb	r1, [r4, #300]	@ 0x12c
   1262c:	e593303c 	ldr	r3, [r3, #60]	@ 0x3c
   12630:	e12fff33 	blx	r3
   12634:	e1d620b0 	ldrh	r2, [r6]
   12638:	e3a03000 	mov	r3, #0
   1263c:	e1a01008 	mov	r1, r8
   12640:	e1a00004 	mov	r0, r4
   12644:	eb0003cd 	bl	13580 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>
   12648:	e3500000 	cmp	r0, #0
   1264c:	da00002d 	ble	12708 <CUSBGamePadSwitchProDevice::Configure()+0x2cc>
   12650:	e1a00004 	mov	r0, r4
   12654:	eb0003f0 	bl	1361c <CUSBHIDDevice::StartRequest()>
   12658:	e24bd028 	sub	sp, fp, #40	@ 0x28
   1265c:	ecbd8b04 	vpop	{d8-d9}
   12660:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   12664:	eb007057 	bl	2e7c8 <CLogger::Get()>
   12668:	e30b3298 	movw	r3, #45720	@ 0xb298
   1266c:	e3403003 	movt	r3, #3
   12670:	e59f10c8 	ldr	r1, [pc, #200]	@ 12740 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   12674:	e3a02001 	mov	r2, #1
   12678:	eb00721b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1267c:	e3a00000 	mov	r0, #0
   12680:	e24bd028 	sub	sp, fp, #40	@ 0x28
   12684:	ecbd8b04 	vpop	{d8-d9}
   12688:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1268c:	e59f10ac 	ldr	r1, [pc, #172]	@ 12740 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   12690:	ebfff7f9 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   12694:	eafffff8 	b	1267c <CUSBGamePadSwitchProDevice::Configure()+0x240>
   12698:	eb00704a 	bl	2e7c8 <CLogger::Get()>
   1269c:	e59f109c 	ldr	r1, [pc, #156]	@ 12740 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   126a0:	e3a02001 	mov	r2, #1
   126a4:	e30b32d8 	movw	r3, #45784	@ 0xb2d8
   126a8:	e3403003 	movt	r3, #3
   126ac:	eb00720e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126b0:	eafffff1 	b	1267c <CUSBGamePadSwitchProDevice::Configure()+0x240>
   126b4:	eb007043 	bl	2e7c8 <CLogger::Get()>
   126b8:	e59f1080 	ldr	r1, [pc, #128]	@ 12740 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   126bc:	e3a02001 	mov	r2, #1
   126c0:	e30b3138 	movw	r3, #45368	@ 0xb138
   126c4:	e3403003 	movt	r3, #3
   126c8:	eb007207 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126cc:	eaffffea 	b	1267c <CUSBGamePadSwitchProDevice::Configure()+0x240>
   126d0:	eb00703c 	bl	2e7c8 <CLogger::Get()>
   126d4:	e59f1064 	ldr	r1, [pc, #100]	@ 12740 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   126d8:	e3a02001 	mov	r2, #1
   126dc:	e30b32b8 	movw	r3, #45752	@ 0xb2b8
   126e0:	e3403003 	movt	r3, #3
   126e4:	eb007200 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   126e8:	eaffffe3 	b	1267c <CUSBGamePadSwitchProDevice::Configure()+0x240>
   126ec:	eb007035 	bl	2e7c8 <CLogger::Get()>
   126f0:	e59f1048 	ldr	r1, [pc, #72]	@ 12740 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   126f4:	e3a02001 	mov	r2, #1
   126f8:	e30b32f4 	movw	r3, #45812	@ 0xb2f4
   126fc:	e3403003 	movt	r3, #3
   12700:	eb0071f9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12704:	eaffffdc 	b	1267c <CUSBGamePadSwitchProDevice::Configure()+0x240>
   12708:	eb00702e 	bl	2e7c8 <CLogger::Get()>
   1270c:	e59f102c 	ldr	r1, [pc, #44]	@ 12740 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   12710:	e3a02001 	mov	r2, #1
   12714:	e30b3330 	movw	r3, #45872	@ 0xb330
   12718:	e3403003 	movt	r3, #3
   1271c:	eb0071f2 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12720:	eaffffca 	b	12650 <CUSBGamePadSwitchProDevice::Configure()+0x214>
   12724:	eb007027 	bl	2e7c8 <CLogger::Get()>
   12728:	e59f1010 	ldr	r1, [pc, #16]	@ 12740 <CUSBGamePadSwitchProDevice::Configure()+0x304>
   1272c:	e3a02001 	mov	r2, #1
   12730:	e30b3310 	movw	r3, #45840	@ 0xb310
   12734:	e3403003 	movt	r3, #3
   12738:	eb0071eb 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1273c:	eaffffce 	b	1267c <CUSBGamePadSwitchProDevice::Configure()+0x240>
   12740:	0003eef8 	.word	0x0003eef8

00012744 <CUSBGamePadSwitchProDevice::GetProperties()>:
   12744:	e3a0004b 	mov	r0, #75	@ 0x4b
   12748:	e12fff1e 	bx	lr

0001274c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   1274c:	e59f3014 	ldr	r3, [pc, #20]	@ 12768 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x1c>
   12750:	e92d4010 	push	{r4, lr}
   12754:	e1a04000 	mov	r4, r0
   12758:	e5803000 	str	r3, [r0]
   1275c:	eb002c6b 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12760:	e1a00004 	mov	r0, r4
   12764:	e8bd8010 	pop	{r4, pc}
   12768:	0003ef20 	.word	0x0003ef20

0001276c <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()>:
   1276c:	e59f3020 	ldr	r3, [pc, #32]	@ 12794 <CUSBGamePadXbox360Device::~CUSBGamePadXbox360Device()+0x28>
   12770:	e92d4010 	push	{r4, lr}
   12774:	e1a04000 	mov	r4, r0
   12778:	e5803000 	str	r3, [r0]
   1277c:	eb002c63 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12780:	e1a00004 	mov	r0, r4
   12784:	e3a01e13 	mov	r1, #304	@ 0x130
   12788:	eb008e7d 	bl	36184 <operator delete(void*, unsigned int)>
   1278c:	e1a00004 	mov	r0, r4
   12790:	e8bd8010 	pop	{r4, pc}
   12794:	0003ef20 	.word	0x0003ef20

00012798 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)>:
   12798:	e3510000 	cmp	r1, #0
   1279c:	e92d4070 	push	{r4, r5, r6, lr}
   127a0:	0a00002f 	beq	12864 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xcc>
   127a4:	e1d130b0 	ldrh	r3, [r1]
   127a8:	e3530b05 	cmp	r3, #5120	@ 0x1400
   127ac:	1a000032 	bne	1287c <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xe4>
   127b0:	e59f30dc 	ldr	r3, [pc, #220]	@ 12894 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0xfc>
   127b4:	e3a0c000 	mov	ip, #0
   127b8:	e1d120b2 	ldrh	r2, [r1, #2]
   127bc:	e283e040 	add	lr, r3, #64	@ 0x40
   127c0:	e580c108 	str	ip, [r0, #264]	@ 0x108
   127c4:	e3120001 	tst	r2, #1
   127c8:	e2833004 	add	r3, r3, #4
   127cc:	e1a020a2 	lsr	r2, r2, #1
   127d0:	15134004 	ldrne	r4, [r3, #-4]
   127d4:	1590c108 	ldrne	ip, [r0, #264]	@ 0x108
   127d8:	118cc004 	orrne	ip, ip, r4
   127dc:	1580c108 	strne	ip, [r0, #264]	@ 0x108
   127e0:	e153000e 	cmp	r3, lr
   127e4:	1afffff6 	bne	127c4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x2c>
   127e8:	e59fe0a8 	ldr	lr, [pc, #168]	@ 12898 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x100>
   127ec:	e3a0c000 	mov	ip, #0
   127f0:	e3a0500c 	mov	r5, #12
   127f4:	e49e2004 	ldr	r2, [lr], #4
   127f8:	e081308c 	add	r3, r1, ip, lsl #1
   127fc:	e28cc001 	add	ip, ip, #1
   12800:	e3c24002 	bic	r4, r2, #2
   12804:	e1d330f6 	ldrsh	r3, [r3, #6]
   12808:	e3540001 	cmp	r4, #1
   1280c:	e0220295 	mla	r2, r5, r2, r0
   12810:	e2833902 	add	r3, r3, #32768	@ 0x8000
   12814:	e1a03423 	lsr	r3, r3, #8
   12818:	026330ff 	rsbeq	r3, r3, #255	@ 0xff
   1281c:	e35c0004 	cmp	ip, #4
   12820:	e5823028 	str	r3, [r2, #40]	@ 0x28
   12824:	1afffff2 	bne	127f4 <CUSBGamePadXbox360Device::DecodeReport(unsigned char const*)+0x5c>
   12828:	e5d13004 	ldrb	r3, [r1, #4]
   1282c:	e5803058 	str	r3, [r0, #88]	@ 0x58
   12830:	e1d130d4 	ldrsb	r3, [r1, #4]
   12834:	e3530000 	cmp	r3, #0
   12838:	b5903108 	ldrlt	r3, [r0, #264]	@ 0x108
   1283c:	b3833008 	orrlt	r3, r3, #8
   12840:	b5803108 	strlt	r3, [r0, #264]	@ 0x108
   12844:	e5d13005 	ldrb	r3, [r1, #5]
   12848:	e5803064 	str	r3, [r0, #100]	@ 0x64
   1284c:	e1d130d5 	ldrsb	r3, [r1, #5]
   12850:	e3530000 	cmp	r3, #0
   12854:	b5903108 	ldrlt	r3, [r0, #264]	@ 0x108
   12858:	b3833010 	orrlt	r3, r3, #16
   1285c:	b5803108 	strlt	r3, [r0, #264]	@ 0x108
   12860:	e8bd8070 	pop	{r4, r5, r6, pc}
   12864:	e30b134c 	movw	r1, #45900	@ 0xb34c
   12868:	e3401003 	movt	r1, #3
   1286c:	e30b0194 	movw	r0, #45460	@ 0xb194
   12870:	e3400003 	movt	r0, #3
   12874:	e3a02078 	mov	r2, #120	@ 0x78
   12878:	eb006557 	bl	2bddc <assertion_failed>
   1287c:	e30b134c 	movw	r1, #45900	@ 0xb34c
   12880:	e3401003 	movt	r1, #3
   12884:	e30b0364 	movw	r0, #45924	@ 0xb364
   12888:	e3400003 	movt	r0, #3
   1288c:	e3a02079 	mov	r2, #121	@ 0x79
   12890:	eb006551 	bl	2bddc <assertion_failed>
   12894:	0003ef70 	.word	0x0003ef70
   12898:	0003efb0 	.word	0x0003efb0

0001289c <CUSBGamePadXbox360Device::ReportHandler(unsigned char const*, unsigned int)>:
   1289c:	e251c000 	subs	ip, r1, #0
   128a0:	13a0c001 	movne	ip, #1
   128a4:	e352000e 	cmp	r2, #14
   128a8:	13a0c000 	movne	ip, #0
   128ac:	e35c0000 	cmp	ip, #0
   128b0:	012fff1e 	bxeq	lr
   128b4:	e5d12000 	ldrb	r2, [r1]
   128b8:	e3520000 	cmp	r2, #0
   128bc:	112fff1e 	bxne	lr
   128c0:	e5d13001 	ldrb	r3, [r1, #1]
   128c4:	e3530014 	cmp	r3, #20
   128c8:	112fff1e 	bxne	lr
   128cc:	e5903124 	ldr	r3, [r0, #292]	@ 0x124
   128d0:	e92d4070 	push	{r4, r5, r6, lr}
   128d4:	e1a04000 	mov	r4, r0
   128d8:	e3530000 	cmp	r3, #0
   128dc:	08bd8070 	popeq	{r4, r5, r6, pc}
   128e0:	e1a05000 	mov	r5, r0
   128e4:	e4953024 	ldr	r3, [r5], #36	@ 0x24
   128e8:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   128ec:	e12fff33 	blx	r3
   128f0:	e594012c 	ldr	r0, [r4, #300]	@ 0x12c
   128f4:	e5943124 	ldr	r3, [r4, #292]	@ 0x124
   128f8:	e1a01005 	mov	r1, r5
   128fc:	e2400001 	sub	r0, r0, #1
   12900:	e8bd4070 	pop	{r4, r5, r6, lr}
   12904:	e12fff13 	bx	r3

00012908 <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)>:
   12908:	e1a03001 	mov	r3, r1
   1290c:	e3510004 	cmp	r1, #4
   12910:	9a000001 	bls	1291c <CUSBGamePadXbox360Device::SetLEDMode(TGamePadLEDMode)+0x14>
   12914:	e3a00000 	mov	r0, #0
   12918:	e12fff1e 	bx	lr
   1291c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   12920:	e300e301 	movw	lr, #769	@ 0x301
   12924:	e24dd07c 	sub	sp, sp, #124	@ 0x7c
   12928:	e28d203f 	add	r2, sp, #63	@ 0x3f
   1292c:	e3c2103f 	bic	r1, r2, #63	@ 0x3f
   12930:	e30e2f18 	movw	r2, #61208	@ 0xef18
   12934:	e3402003 	movt	r2, #3
   12938:	e082c003 	add	ip, r2, r3
   1293c:	e3a03000 	mov	r3, #0
   12940:	e3a02003 	mov	r2, #3
   12944:	e1c1e0b0 	strh	lr, [r1]
   12948:	e5dcc0b0 	ldrb	ip, [ip, #176]	@ 0xb0
   1294c:	e5c1c002 	strb	ip, [r1, #2]
   12950:	eb0002ac 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12954:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   12958:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0001295c <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)>:
   1295c:	e92d4070 	push	{r4, r5, r6, lr}
   12960:	e3a02008 	mov	r2, #8
   12964:	e1a05001 	mov	r5, r1
   12968:	e24dd078 	sub	sp, sp, #120	@ 0x78
   1296c:	e3a01000 	mov	r1, #0
   12970:	e28d403f 	add	r4, sp, #63	@ 0x3f
   12974:	e1a06000 	mov	r6, r0
   12978:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   1297c:	e1a00004 	mov	r0, r4
   12980:	eb008bc8 	bl	358a8 <memset>
   12984:	e3a03008 	mov	r3, #8
   12988:	e3550001 	cmp	r5, #1
   1298c:	e5c43001 	strb	r3, [r4, #1]
   12990:	0a00000d 	beq	129cc <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x70>
   12994:	e3550002 	cmp	r5, #2
   12998:	0a000008 	beq	129c0 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x64>
   1299c:	e3550000 	cmp	r5, #0
   129a0:	1a00000c 	bne	129d8 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x7c>
   129a4:	e3a03000 	mov	r3, #0
   129a8:	e3a02008 	mov	r2, #8
   129ac:	e1a01004 	mov	r1, r4
   129b0:	e1a00006 	mov	r0, r6
   129b4:	eb000293 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   129b8:	e28dd078 	add	sp, sp, #120	@ 0x78
   129bc:	e8bd8070 	pop	{r4, r5, r6, pc}
   129c0:	e3e03000 	mvn	r3, #0
   129c4:	e5c43003 	strb	r3, [r4, #3]
   129c8:	eafffff5 	b	129a4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x48>
   129cc:	e3e03000 	mvn	r3, #0
   129d0:	e5c43004 	strb	r3, [r4, #4]
   129d4:	eafffff2 	b	129a4 <CUSBGamePadXbox360Device::SetRumbleMode(TGamePadRumbleMode)+0x48>
   129d8:	e30b134c 	movw	r1, #45900	@ 0xb34c
   129dc:	e3401003 	movt	r1, #3
   129e0:	e30a093c 	movw	r0, #43324	@ 0xa93c
   129e4:	e3400003 	movt	r0, #3
   129e8:	e3a020e6 	mov	r2, #230	@ 0xe6
   129ec:	eb0064fa 	bl	2bddc <assertion_failed>

000129f0 <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)>:
   129f0:	e92d4010 	push	{r4, lr}
   129f4:	e1a04000 	mov	r4, r0
   129f8:	eb002bb3 	bl	1d8cc <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   129fc:	e59f3008 	ldr	r3, [pc, #8]	@ 12a0c <CUSBGamePadXbox360Device::CUSBGamePadXbox360Device(CUSBFunction*)+0x1c>
   12a00:	e1a00004 	mov	r0, r4
   12a04:	e5843000 	str	r3, [r4]
   12a08:	e8bd8010 	pop	{r4, pc}
   12a0c:	0003ef20 	.word	0x0003ef20

00012a10 <CUSBGamePadXbox360Device::Configure()>:
   12a10:	e2803f4a 	add	r3, r0, #296	@ 0x128
   12a14:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   12a18:	e3a0200e 	mov	r2, #14
   12a1c:	e24dd07c 	sub	sp, sp, #124	@ 0x7c
   12a20:	e1a04000 	mov	r4, r0
   12a24:	e1c320b0 	strh	r2, [r3]
   12a28:	eb002b4b 	bl	1d75c <CUSBGamePadDevice::Configure()>
   12a2c:	e3500000 	cmp	r0, #0
   12a30:	0a000031 	beq	12afc <CUSBGamePadXbox360Device::Configure()+0xec>
   12a34:	e5943000 	ldr	r3, [r4]
   12a38:	f2c10e30 	vmov.i64	d16, #0x000000ff00000000
   12a3c:	e3a02013 	mov	r2, #19
   12a40:	e2841050 	add	r1, r4, #80	@ 0x50
   12a44:	e5842104 	str	r2, [r4, #260]	@ 0x104
   12a48:	e284e02c 	add	lr, r4, #44	@ 0x2c
   12a4c:	e593603c 	ldr	r6, [r3, #60]	@ 0x3c
   12a50:	e284c038 	add	ip, r4, #56	@ 0x38
   12a54:	e284305c 	add	r3, r4, #92	@ 0x5c
   12a58:	e2840044 	add	r0, r4, #68	@ 0x44
   12a5c:	e2842068 	add	r2, r4, #104	@ 0x68
   12a60:	e3027908 	movw	r7, #10504	@ 0x2908
   12a64:	e3407001 	movt	r7, #1
   12a68:	e1560007 	cmp	r6, r7
   12a6c:	e3a07006 	mov	r7, #6
   12a70:	e5847024 	str	r7, [r4, #36]	@ 0x24
   12a74:	f44e078f 	vst1.32	{d16}, [lr]
   12a78:	f44c078f 	vst1.32	{d16}, [ip]
   12a7c:	f440078f 	vst1.32	{d16}, [r0]
   12a80:	f441078f 	vst1.32	{d16}, [r1]
   12a84:	f443078f 	vst1.32	{d16}, [r3]
   12a88:	e3a03000 	mov	r3, #0
   12a8c:	f442078f 	vst1.32	{d16}, [r2]
   12a90:	e58430e8 	str	r3, [r4, #232]	@ 0xe8
   12a94:	e5d4112c 	ldrb	r1, [r4, #300]	@ 0x12c
   12a98:	1a000020 	bne	12b20 <CUSBGamePadXbox360Device::Configure()+0x110>
   12a9c:	e3510004 	cmp	r1, #4
   12aa0:	9a000002 	bls	12ab0 <CUSBGamePadXbox360Device::Configure()+0xa0>
   12aa4:	e3a00000 	mov	r0, #0
   12aa8:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   12aac:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12ab0:	e28d503f 	add	r5, sp, #63	@ 0x3f
   12ab4:	e3002301 	movw	r2, #769	@ 0x301
   12ab8:	e3c5503f 	bic	r5, r5, #63	@ 0x3f
   12abc:	e1a00004 	mov	r0, r4
   12ac0:	e1c520b0 	strh	r2, [r5]
   12ac4:	e30e2f18 	movw	r2, #61208	@ 0xef18
   12ac8:	e3402003 	movt	r2, #3
   12acc:	e0821001 	add	r1, r2, r1
   12ad0:	e3a02003 	mov	r2, #3
   12ad4:	e5d110b0 	ldrb	r1, [r1, #176]	@ 0xb0
   12ad8:	e5c51002 	strb	r1, [r5, #2]
   12adc:	e1a01005 	mov	r1, r5
   12ae0:	eb000248 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12ae4:	e3500000 	cmp	r0, #0
   12ae8:	0affffed 	beq	12aa4 <CUSBGamePadXbox360Device::Configure()+0x94>
   12aec:	e1a00004 	mov	r0, r4
   12af0:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   12af4:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   12af8:	ea0002c7 	b	1361c <CUSBHIDDevice::StartRequest()>
   12afc:	eb006f31 	bl	2e7c8 <CLogger::Get()>
   12b00:	e59f1024 	ldr	r1, [pc, #36]	@ 12b2c <CUSBGamePadXbox360Device::Configure()+0x11c>
   12b04:	e3a02001 	mov	r2, #1
   12b08:	e30b3138 	movw	r3, #45368	@ 0xb138
   12b0c:	e3403003 	movt	r3, #3
   12b10:	eb0070f5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12b14:	e3a00000 	mov	r0, #0
   12b18:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   12b1c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   12b20:	e1a00004 	mov	r0, r4
   12b24:	e12fff36 	blx	r6
   12b28:	eaffffed 	b	12ae4 <CUSBGamePadXbox360Device::Configure()+0xd4>
   12b2c:	0003efd0 	.word	0x0003efd0

00012b30 <CUSBGamePadXbox360Device::GetProperties()>:
   12b30:	e3a0000b 	mov	r0, #11
   12b34:	e12fff1e 	bx	lr

00012b38 <CUSBGamePadXboxOneDevice::DecodeReport(unsigned char const*)>:
   12b38:	e5d13004 	ldrb	r3, [r1, #4]
   12b3c:	e7e03153 	ubfx	r3, r3, #2, #1
   12b40:	e1a03703 	lsl	r3, r3, #14
   12b44:	e5803108 	str	r3, [r0, #264]	@ 0x108
   12b48:	e5d12004 	ldrb	r2, [r1, #4]
   12b4c:	e3120008 	tst	r2, #8
   12b50:	13833b02 	orrne	r3, r3, #2048	@ 0x800
   12b54:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12b58:	e3120010 	tst	r2, #16
   12b5c:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12b60:	13833c02 	orrne	r3, r3, #512	@ 0x200
   12b64:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12b68:	e3120020 	tst	r2, #32
   12b6c:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12b70:	13833c01 	orrne	r3, r3, #256	@ 0x100
   12b74:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12b78:	e3120040 	tst	r2, #64	@ 0x40
   12b7c:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12b80:	13833b01 	orrne	r3, r3, #1024	@ 0x400
   12b84:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12b88:	e1b023a2 	lsrs	r2, r2, #7
   12b8c:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12b90:	13833080 	orrne	r3, r3, #128	@ 0x80
   12b94:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12b98:	e5d13005 	ldrb	r3, [r1, #5]
   12b9c:	e3130001 	tst	r3, #1
   12ba0:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   12ba4:	13822902 	orrne	r2, r2, #32768	@ 0x8000
   12ba8:	15802108 	strne	r2, [r0, #264]	@ 0x108
   12bac:	e3130002 	tst	r3, #2
   12bb0:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   12bb4:	13822802 	orrne	r2, r2, #131072	@ 0x20000
   12bb8:	15802108 	strne	r2, [r0, #264]	@ 0x108
   12bbc:	e3130004 	tst	r3, #4
   12bc0:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   12bc4:	13822701 	orrne	r2, r2, #262144	@ 0x40000
   12bc8:	15802108 	strne	r2, [r0, #264]	@ 0x108
   12bcc:	e3130008 	tst	r3, #8
   12bd0:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   12bd4:	13822801 	orrne	r2, r2, #65536	@ 0x10000
   12bd8:	15802108 	strne	r2, [r0, #264]	@ 0x108
   12bdc:	e3130010 	tst	r3, #16
   12be0:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   12be4:	13822020 	orrne	r2, r2, #32
   12be8:	15802108 	strne	r2, [r0, #264]	@ 0x108
   12bec:	e3130020 	tst	r3, #32
   12bf0:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   12bf4:	13822040 	orrne	r2, r2, #64	@ 0x40
   12bf8:	15802108 	strne	r2, [r0, #264]	@ 0x108
   12bfc:	e3130040 	tst	r3, #64	@ 0x40
   12c00:	15902108 	ldrne	r2, [r0, #264]	@ 0x108
   12c04:	13822a01 	orrne	r2, r2, #4096	@ 0x1000
   12c08:	15802108 	strne	r2, [r0, #264]	@ 0x108
   12c0c:	e1b033a3 	lsrs	r3, r3, #7
   12c10:	15903108 	ldrne	r3, [r0, #264]	@ 0x108
   12c14:	13833a02 	orrne	r3, r3, #8192	@ 0x2000
   12c18:	15803108 	strne	r3, [r0, #264]	@ 0x108
   12c1c:	e1d130b6 	ldrh	r3, [r1, #6]
   12c20:	e1a03123 	lsr	r3, r3, #2
   12c24:	e5803058 	str	r3, [r0, #88]	@ 0x58
   12c28:	e353007f 	cmp	r3, #127	@ 0x7f
   12c2c:	85903108 	ldrhi	r3, [r0, #264]	@ 0x108
   12c30:	83833008 	orrhi	r3, r3, #8
   12c34:	85803108 	strhi	r3, [r0, #264]	@ 0x108
   12c38:	e1d130b8 	ldrh	r3, [r1, #8]
   12c3c:	e1a03123 	lsr	r3, r3, #2
   12c40:	e5803064 	str	r3, [r0, #100]	@ 0x64
   12c44:	e353007f 	cmp	r3, #127	@ 0x7f
   12c48:	85903108 	ldrhi	r3, [r0, #264]	@ 0x108
   12c4c:	83833010 	orrhi	r3, r3, #16
   12c50:	85803108 	strhi	r3, [r0, #264]	@ 0x108
   12c54:	e1d130fa 	ldrsh	r3, [r1, #10]
   12c58:	e2833902 	add	r3, r3, #32768	@ 0x8000
   12c5c:	e1a03423 	lsr	r3, r3, #8
   12c60:	e5803028 	str	r3, [r0, #40]	@ 0x28
   12c64:	e1d130fc 	ldrsh	r3, [r1, #12]
   12c68:	e2833902 	add	r3, r3, #32768	@ 0x8000
   12c6c:	e1a03423 	lsr	r3, r3, #8
   12c70:	e22330ff 	eor	r3, r3, #255	@ 0xff
   12c74:	e5803034 	str	r3, [r0, #52]	@ 0x34
   12c78:	e1d130fe 	ldrsh	r3, [r1, #14]
   12c7c:	e2833902 	add	r3, r3, #32768	@ 0x8000
   12c80:	e1a03423 	lsr	r3, r3, #8
   12c84:	e5803040 	str	r3, [r0, #64]	@ 0x40
   12c88:	e1d131f0 	ldrsh	r3, [r1, #16]
   12c8c:	e2833902 	add	r3, r3, #32768	@ 0x8000
   12c90:	e1a03423 	lsr	r3, r3, #8
   12c94:	e22330ff 	eor	r3, r3, #255	@ 0xff
   12c98:	e580304c 	str	r3, [r0, #76]	@ 0x4c
   12c9c:	e12fff1e 	bx	lr

00012ca0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   12ca0:	e59f3014 	ldr	r3, [pc, #20]	@ 12cbc <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x1c>
   12ca4:	e92d4010 	push	{r4, lr}
   12ca8:	e1a04000 	mov	r4, r0
   12cac:	e5803000 	str	r3, [r0]
   12cb0:	eb002b16 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12cb4:	e1a00004 	mov	r0, r4
   12cb8:	e8bd8010 	pop	{r4, pc}
   12cbc:	0003efe8 	.word	0x0003efe8

00012cc0 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()>:
   12cc0:	e59f3020 	ldr	r3, [pc, #32]	@ 12ce8 <CUSBGamePadXboxOneDevice::~CUSBGamePadXboxOneDevice()+0x28>
   12cc4:	e92d4010 	push	{r4, lr}
   12cc8:	e1a04000 	mov	r4, r0
   12ccc:	e5803000 	str	r3, [r0]
   12cd0:	eb002b0e 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   12cd4:	e1a00004 	mov	r0, r4
   12cd8:	e3a01f4d 	mov	r1, #308	@ 0x134
   12cdc:	eb008d28 	bl	36184 <operator delete(void*, unsigned int)>
   12ce0:	e1a00004 	mov	r0, r4
   12ce4:	e8bd8010 	pop	{r4, pc}
   12ce8:	0003efe8 	.word	0x0003efe8

00012cec <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)>:
   12cec:	e2513000 	subs	r3, r1, #0
   12cf0:	012fff1e 	bxeq	lr
   12cf4:	e92d4030 	push	{r4, r5, lr}
   12cf8:	e3520006 	cmp	r2, #6
   12cfc:	e1a04000 	mov	r4, r0
   12d00:	e24dd07c 	sub	sp, sp, #124	@ 0x7c
   12d04:	0a000008 	beq	12d2c <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x40>
   12d08:	e590c124 	ldr	ip, [r0, #292]	@ 0x124
   12d0c:	e25cc000 	subs	ip, ip, #0
   12d10:	13a0c001 	movne	ip, #1
   12d14:	e3520012 	cmp	r2, #18
   12d18:	13a0c000 	movne	ip, #0
   12d1c:	e35c0000 	cmp	ip, #0
   12d20:	1a00002b 	bne	12dd4 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0xe8>
   12d24:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   12d28:	e8bd8030 	pop	{r4, r5, pc}
   12d2c:	e5d32000 	ldrb	r2, [r3]
   12d30:	e3520007 	cmp	r2, #7
   12d34:	1afffffa 	bne	12d24 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12d38:	e5d32001 	ldrb	r2, [r3, #1]
   12d3c:	e3520030 	cmp	r2, #48	@ 0x30
   12d40:	1afffff7 	bne	12d24 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12d44:	e28dc03f 	add	ip, sp, #63	@ 0x3f
   12d48:	e30e5fe0 	movw	r5, #61408	@ 0xefe0
   12d4c:	e3405003 	movt	r5, #3
   12d50:	e3ccc03f 	bic	ip, ip, #63	@ 0x3f
   12d54:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   12d58:	e28c200e 	add	r2, ip, #14
   12d5c:	e1a0e00c 	mov	lr, ip
   12d60:	e5d33002 	ldrb	r3, [r3, #2]
   12d64:	e5950054 	ldr	r0, [r5, #84]	@ 0x54
   12d68:	e5951058 	ldr	r1, [r5, #88]	@ 0x58
   12d6c:	f4420a0f 	vst1.8	{d16-d17}, [r2]
   12d70:	e28c201e 	add	r2, ip, #30
   12d74:	f4420a0f 	vst1.8	{d16-d17}, [r2]
   12d78:	e28c202e 	add	r2, ip, #46	@ 0x2e
   12d7c:	f4420a0f 	vst1.8	{d16-d17}, [r2]
   12d80:	e595205c 	ldr	r2, [r5, #92]	@ 0x5c
   12d84:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   12d88:	e28c2038 	add	r2, ip, #56	@ 0x38
   12d8c:	e1a00004 	mov	r0, r4
   12d90:	e5cc3002 	strb	r3, [ip, #2]
   12d94:	e1a0100c 	mov	r1, ip
   12d98:	f442070f 	vst1.8	{d16}, [r2]
   12d9c:	e3a03000 	mov	r3, #0
   12da0:	e1d526b0 	ldrh	r2, [r5, #96]	@ 0x60
   12da4:	e1ce20b0 	strh	r2, [lr]
   12da8:	e3a0200d 	mov	r2, #13
   12dac:	eb0001ba 	bl	1349c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>
   12db0:	e3500000 	cmp	r0, #0
   12db4:	1affffda 	bne	12d24 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12db8:	eb006e82 	bl	2e7c8 <CLogger::Get()>
   12dbc:	e3a02001 	mov	r2, #1
   12dc0:	e2851064 	add	r1, r5, #100	@ 0x64
   12dc4:	e30b3388 	movw	r3, #45960	@ 0xb388
   12dc8:	e3403003 	movt	r3, #3
   12dcc:	eb007046 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12dd0:	eaffffd3 	b	12d24 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12dd4:	e5d33000 	ldrb	r3, [r3]
   12dd8:	e3530020 	cmp	r3, #32
   12ddc:	1affffd0 	bne	12d24 <CUSBGamePadXboxOneDevice::ReportHandler(unsigned char const*, unsigned int)+0x38>
   12de0:	e1a05000 	mov	r5, r0
   12de4:	e4953024 	ldr	r3, [r5], #36	@ 0x24
   12de8:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   12dec:	e12fff33 	blx	r3
   12df0:	e594012c 	ldr	r0, [r4, #300]	@ 0x12c
   12df4:	e5943124 	ldr	r3, [r4, #292]	@ 0x124
   12df8:	e1a01005 	mov	r1, r5
   12dfc:	e2400001 	sub	r0, r0, #1
   12e00:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   12e04:	e8bd4030 	pop	{r4, r5, lr}
   12e08:	e12fff13 	bx	r3

00012e0c <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)>:
   12e0c:	e92d4070 	push	{r4, r5, r6, lr}
   12e10:	e30e4fe0 	movw	r4, #61408	@ 0xefe0
   12e14:	e3404003 	movt	r4, #3
   12e18:	e24dd078 	sub	sp, sp, #120	@ 0x78
   12e1c:	e1a06001 	mov	r6, r1
   12e20:	e28dc03f 	add	ip, sp, #63	@ 0x3f
   12e24:	e1a05000 	mov	r5, r0
   12e28:	e3ccc03f 	bic	ip, ip, #63	@ 0x3f
   12e2c:	e5940074 	ldr	r0, [r4, #116]	@ 0x74
   12e30:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   12e34:	e28c300e 	add	r3, ip, #14
   12e38:	e1a0e00c 	mov	lr, ip
   12e3c:	e594207c 	ldr	r2, [r4, #124]	@ 0x7c
   12e40:	e3510001 	cmp	r1, #1
   12e44:	e5941078 	ldr	r1, [r4, #120]	@ 0x78
   12e48:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12e4c:	e28c301e 	add	r3, ip, #30
   12e50:	e8ae0007 	stmia	lr!, {r0, r1, r2}
   12e54:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12e58:	e28c302e 	add	r3, ip, #46	@ 0x2e
   12e5c:	f4430a0f 	vst1.8	{d16-d17}, [r3]
   12e60:	e1d438b0 	ldrh	r3, [r4, #128]	@ 0x80
   12e64:	e1ce30b0 	strh	r3, [lr]
   12e68:	e28c3038 	add	r3, ip, #56	@ 0x38
   12e6c:	f443070f 	vst1.8	{d16}, [r3]
   12e70:	0a000011 	beq	12ebc <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xb0>
   12e74:	e3560002 	cmp	r6, #2
   12e78:	0a00000c 	beq	12eb0 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xa4>
   12e7c:	e3560000 	cmp	r6, #0
   12e80:	1a000010 	bne	12ec8 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0xbc>
   12e84:	e5d51130 	ldrb	r1, [r5, #304]	@ 0x130
   12e88:	e3a03000 	mov	r3, #0
   12e8c:	e5cc1002 	strb	r1, [ip, #2]
   12e90:	e3a0200d 	mov	r2, #13
   12e94:	e2810001 	add	r0, r1, #1
   12e98:	e1a0100c 	mov	r1, ip
   12e9c:	e5c50130 	strb	r0, [r5, #304]	@ 0x130
   12ea0:	e1a00005 	mov	r0, r5
   12ea4:	eb000157 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12ea8:	e28dd078 	add	sp, sp, #120	@ 0x78
   12eac:	e8bd8070 	pop	{r4, r5, r6, pc}
   12eb0:	e3e03000 	mvn	r3, #0
   12eb4:	e5cc3008 	strb	r3, [ip, #8]
   12eb8:	eafffff1 	b	12e84 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x78>
   12ebc:	e3e03000 	mvn	r3, #0
   12ec0:	e5cc3009 	strb	r3, [ip, #9]
   12ec4:	eaffffee 	b	12e84 <CUSBGamePadXboxOneDevice::SetRumbleMode(TGamePadRumbleMode)+0x78>
   12ec8:	e30b139c 	movw	r1, #45980	@ 0xb39c
   12ecc:	e3401003 	movt	r1, #3
   12ed0:	e30a093c 	movw	r0, #43324	@ 0xa93c
   12ed4:	e3400003 	movt	r0, #3
   12ed8:	e3a020ef 	mov	r2, #239	@ 0xef
   12edc:	eb0063be 	bl	2bddc <assertion_failed>

00012ee0 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)>:
   12ee0:	e92d4010 	push	{r4, lr}
   12ee4:	e1a04000 	mov	r4, r0
   12ee8:	eb002a77 	bl	1d8cc <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>
   12eec:	e59f2010 	ldr	r2, [pc, #16]	@ 12f04 <CUSBGamePadXboxOneDevice::CUSBGamePadXboxOneDevice(CUSBFunction*)+0x24>
   12ef0:	e3a03000 	mov	r3, #0
   12ef4:	e1a00004 	mov	r0, r4
   12ef8:	e5842000 	str	r2, [r4]
   12efc:	e5c43130 	strb	r3, [r4, #304]	@ 0x130
   12f00:	e8bd8010 	pop	{r4, pc}
   12f04:	0003efe8 	.word	0x0003efe8

00012f08 <CUSBGamePadXboxOneDevice::Configure()>:
   12f08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   12f0c:	e2803f4a 	add	r3, r0, #296	@ 0x128
   12f10:	e3a01040 	mov	r1, #64	@ 0x40
   12f14:	e24dd078 	sub	sp, sp, #120	@ 0x78
   12f18:	e1a05000 	mov	r5, r0
   12f1c:	e28d203f 	add	r2, sp, #63	@ 0x3f
   12f20:	e1c310b0 	strh	r1, [r3]
   12f24:	e3c2403f 	bic	r4, r2, #63	@ 0x3f
   12f28:	eb002a0b 	bl	1d75c <CUSBGamePadDevice::Configure()>
   12f2c:	e3500000 	cmp	r0, #0
   12f30:	0a000031 	beq	12ffc <CUSBGamePadXboxOneDevice::Configure()+0xf4>
   12f34:	e1a02004 	mov	r2, r4
   12f38:	f2c12e30 	vmov.i64	d18, #0x000000ff00000000
   12f3c:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   12f40:	e1a01004 	mov	r1, r4
   12f44:	e285e050 	add	lr, r5, #80	@ 0x50
   12f48:	e285c05c 	add	ip, r5, #92	@ 0x5c
   12f4c:	e2850068 	add	r0, r5, #104	@ 0x68
   12f50:	e285702c 	add	r7, r5, #44	@ 0x2c
   12f54:	e2856038 	add	r6, r5, #56	@ 0x38
   12f58:	e2854044 	add	r4, r5, #68	@ 0x44
   12f5c:	e3028005 	movw	r8, #8197	@ 0x2005
   12f60:	e3408100 	movt	r8, #256	@ 0x100
   12f64:	e4828004 	str	r8, [r2], #4
   12f68:	e3a03013 	mov	r3, #19
   12f6c:	e5853104 	str	r3, [r5, #260]	@ 0x104
   12f70:	e3a03000 	mov	r3, #0
   12f74:	edc20b0c 	vstr	d16, [r2, #48]	@ 0x30
   12f78:	f4420a0f 	vst1.8	{d16-d17}, [r2]
   12f7c:	edc20b04 	vstr	d16, [r2, #16]
   12f80:	edc20b06 	vstr	d16, [r2, #24]
   12f84:	edc20b08 	vstr	d16, [r2, #32]
   12f88:	edc20b0a 	vstr	d16, [r2, #40]	@ 0x28
   12f8c:	edc20b0d 	vstr	d16, [r2, #52]	@ 0x34
   12f90:	e3a02006 	mov	r2, #6
   12f94:	e5852024 	str	r2, [r5, #36]	@ 0x24
   12f98:	e3a02005 	mov	r2, #5
   12f9c:	f447278f 	vst1.32	{d18}, [r7]
   12fa0:	f446278f 	vst1.32	{d18}, [r6]
   12fa4:	f444278f 	vst1.32	{d18}, [r4]
   12fa8:	f44e278f 	vst1.32	{d18}, [lr]
   12fac:	f44c278f 	vst1.32	{d18}, [ip]
   12fb0:	f440278f 	vst1.32	{d18}, [r0]
   12fb4:	e1a00005 	mov	r0, r5
   12fb8:	e58530e8 	str	r3, [r5, #232]	@ 0xe8
   12fbc:	eb000111 	bl	13408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>
   12fc0:	e3500000 	cmp	r0, #0
   12fc4:	0a000003 	beq	12fd8 <CUSBGamePadXboxOneDevice::Configure()+0xd0>
   12fc8:	e1a00005 	mov	r0, r5
   12fcc:	eb000192 	bl	1361c <CUSBHIDDevice::StartRequest()>
   12fd0:	e28dd078 	add	sp, sp, #120	@ 0x78
   12fd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12fd8:	eb006dfa 	bl	2e7c8 <CLogger::Get()>
   12fdc:	e30b33b4 	movw	r3, #46004	@ 0xb3b4
   12fe0:	e3403003 	movt	r3, #3
   12fe4:	e59f102c 	ldr	r1, [pc, #44]	@ 13018 <CUSBGamePadXboxOneDevice::Configure()+0x110>
   12fe8:	e3a02001 	mov	r2, #1
   12fec:	eb006fbe 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12ff0:	e3a00000 	mov	r0, #0
   12ff4:	e28dd078 	add	sp, sp, #120	@ 0x78
   12ff8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   12ffc:	eb006df1 	bl	2e7c8 <CLogger::Get()>
   13000:	e59f1010 	ldr	r1, [pc, #16]	@ 13018 <CUSBGamePadXboxOneDevice::Configure()+0x110>
   13004:	e3a02001 	mov	r2, #1
   13008:	e30b3138 	movw	r3, #45368	@ 0xb138
   1300c:	e3403003 	movt	r3, #3
   13010:	eb006fb5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13014:	eafffff5 	b	12ff0 <CUSBGamePadXboxOneDevice::Configure()+0xe8>
   13018:	0003f044 	.word	0x0003f044

0001301c <CUSBGamePadXboxOneDevice::GetProperties()>:
   1301c:	e3a00009 	mov	r0, #9
   13020:	e12fff1e 	bx	lr

00013024 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)>:
   13024:	e92d4070 	push	{r4, r5, r6, lr}
   13028:	e2504000 	subs	r4, r0, #0
   1302c:	0a000015 	beq	13088 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x64>
   13030:	e1a05001 	mov	r5, r1
   13034:	eb000d1d 	bl	164b0 <CUSBRequest::GetStatus() const>
   13038:	e3500000 	cmp	r0, #0
   1303c:	0a000009 	beq	13068 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x44>
   13040:	e1a00004 	mov	r0, r4
   13044:	eb000d08 	bl	1646c <CUSBRequest::~CUSBRequest()>
   13048:	e3a01070 	mov	r1, #112	@ 0x70
   1304c:	e1a00004 	mov	r0, r4
   13050:	eb000dc1 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   13054:	e3550000 	cmp	r5, #0
   13058:	0a000010 	beq	130a0 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x7c>
   1305c:	e1a00005 	mov	r0, r5
   13060:	e8bd4070 	pop	{r4, r5, r6, lr}
   13064:	ea008c40 	b	3616c <operator delete[](void*)>
   13068:	eb006dd6 	bl	2e7c8 <CLogger::Get()>
   1306c:	e3a02002 	mov	r2, #2
   13070:	e30b33e0 	movw	r3, #46048	@ 0xb3e0
   13074:	e3403003 	movt	r3, #3
   13078:	e30f1064 	movw	r1, #61540	@ 0xf064
   1307c:	e3401003 	movt	r1, #3
   13080:	eb006f99 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13084:	eaffffed 	b	13040 <CUSBHIDDevice::SendCompletionRoutine(CUSBRequest*, void*, void*)+0x1c>
   13088:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   1308c:	e3401003 	movt	r1, #3
   13090:	e3090e38 	movw	r0, #40504	@ 0x9e38
   13094:	e3400003 	movt	r0, #3
   13098:	e3a020af 	mov	r2, #175	@ 0xaf
   1309c:	eb00634e 	bl	2bddc <assertion_failed>
   130a0:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   130a4:	e3401003 	movt	r1, #3
   130a8:	e30b03fc 	movw	r0, #46076	@ 0xb3fc
   130ac:	e3400003 	movt	r0, #3
   130b0:	e3a020b8 	mov	r2, #184	@ 0xb8
   130b4:	eb006348 	bl	2bddc <assertion_failed>

000130b8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>:
   130b8:	e92d4070 	push	{r4, r5, r6, lr}
   130bc:	e1a04000 	mov	r4, r0
   130c0:	e1a05002 	mov	r5, r2
   130c4:	ebfff4dd 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   130c8:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   130cc:	e2842018 	add	r2, r4, #24
   130d0:	e3a03000 	mov	r3, #0
   130d4:	e59f1030 	ldr	r1, [pc, #48]	@ 1310c <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x54>
   130d8:	e1550003 	cmp	r5, r3
   130dc:	e5841000 	str	r1, [r4]
   130e0:	e5845014 	str	r5, [r4, #20]
   130e4:	f442078f 	vst1.32	{d16}, [r2]
   130e8:	e5843020 	str	r3, [r4, #32]
   130ec:	1a000001 	bne	130f8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)+0x40>
   130f0:	e1a00004 	mov	r0, r4
   130f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   130f8:	e1a00005 	mov	r0, r5
   130fc:	eb008c0e 	bl	3613c <operator new[](unsigned int)>
   13100:	e5840020 	str	r0, [r4, #32]
   13104:	e1a00004 	mov	r0, r4
   13108:	e8bd8070 	pop	{r4, r5, r6, pc}
   1310c:	0003f074 	.word	0x0003f074

00013110 <CUSBHIDDevice::~CUSBHIDDevice()>:
   13110:	e92d4070 	push	{r4, r5, r6, lr}
   13114:	e1a04000 	mov	r4, r0
   13118:	e5900020 	ldr	r0, [r0, #32]
   1311c:	e59f3074 	ldr	r3, [pc, #116]	@ 13198 <CUSBHIDDevice::~CUSBHIDDevice()+0x88>
   13120:	e3500000 	cmp	r0, #0
   13124:	e5843000 	str	r3, [r4]
   13128:	0a000000 	beq	13130 <CUSBHIDDevice::~CUSBHIDDevice()+0x20>
   1312c:	eb008c0e 	bl	3616c <operator delete[](void*)>
   13130:	e594501c 	ldr	r5, [r4, #28]
   13134:	e3a03000 	mov	r3, #0
   13138:	e5843020 	str	r3, [r4, #32]
   1313c:	e1550003 	cmp	r5, r3
   13140:	0a000004 	beq	13158 <CUSBHIDDevice::~CUSBHIDDevice()+0x48>
   13144:	e1a00005 	mov	r0, r5
   13148:	ebfff3a8 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1314c:	e3a01014 	mov	r1, #20
   13150:	e1a00005 	mov	r0, r5
   13154:	eb008c0a 	bl	36184 <operator delete(void*, unsigned int)>
   13158:	e5945018 	ldr	r5, [r4, #24]
   1315c:	e3a03000 	mov	r3, #0
   13160:	e584301c 	str	r3, [r4, #28]
   13164:	e1550003 	cmp	r5, r3
   13168:	0a000004 	beq	13180 <CUSBHIDDevice::~CUSBHIDDevice()+0x70>
   1316c:	e1a00005 	mov	r0, r5
   13170:	ebfff39e 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   13174:	e3a01014 	mov	r1, #20
   13178:	e1a00005 	mov	r0, r5
   1317c:	eb008c00 	bl	36184 <operator delete(void*, unsigned int)>
   13180:	e3a03000 	mov	r3, #0
   13184:	e1a00004 	mov	r0, r4
   13188:	e5843018 	str	r3, [r4, #24]
   1318c:	ebfff402 	bl	1019c <CUSBFunction::~CUSBFunction()>
   13190:	e1a00004 	mov	r0, r4
   13194:	e8bd8070 	pop	{r4, r5, r6, pc}
   13198:	0003f074 	.word	0x0003f074

0001319c <CUSBHIDDevice::~CUSBHIDDevice()>:
   1319c:	e92d4010 	push	{r4, lr}
   131a0:	e1a04000 	mov	r4, r0
   131a4:	ebffffd9 	bl	13110 <CUSBHIDDevice::~CUSBHIDDevice()>
   131a8:	e1a00004 	mov	r0, r4
   131ac:	e3a01024 	mov	r1, #36	@ 0x24
   131b0:	eb008bf3 	bl	36184 <operator delete(void*, unsigned int)>
   131b4:	e1a00004 	mov	r0, r4
   131b8:	e8bd8010 	pop	{r4, pc}

000131bc <CUSBHIDDevice::ConfigureHID(unsigned int)>:
   131bc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c0:	e1a05000 	mov	r5, r0
   131c4:	e1a06001 	mov	r6, r1
   131c8:	e24dd014 	sub	sp, sp, #20
   131cc:	ebfff4f3 	bl	105a0 <CUSBFunction::GetNumEndpoints() const>
   131d0:	e3500000 	cmp	r0, #0
   131d4:	1a000004 	bne	131ec <CUSBHIDDevice::ConfigureHID(unsigned int)+0x30>
   131d8:	ea00004a 	b	13308 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x14c>
   131dc:	e5d43003 	ldrb	r3, [r4, #3]
   131e0:	e203303f 	and	r3, r3, #63	@ 0x3f
   131e4:	e3530003 	cmp	r3, #3
   131e8:	0a00001e 	beq	13268 <CUSBHIDDevice::ConfigureHID(unsigned int)+0xac>
   131ec:	e3a01005 	mov	r1, #5
   131f0:	e1a00005 	mov	r0, r5
   131f4:	ebfff515 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   131f8:	e2504000 	subs	r4, r0, #0
   131fc:	1afffff6 	bne	131dc <CUSBHIDDevice::ConfigureHID(unsigned int)+0x20>
   13200:	e5953018 	ldr	r3, [r5, #24]
   13204:	e3530000 	cmp	r3, #0
   13208:	0a00003e 	beq	13308 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x14c>
   1320c:	e1a00005 	mov	r0, r5
   13210:	ebfff41b 	bl	10284 <CUSBFunction::Configure()>
   13214:	e2507000 	subs	r7, r0, #0
   13218:	0a000031 	beq	132e4 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x128>
   1321c:	e1a00005 	mov	r0, r5
   13220:	ebfff56a 	bl	107d0 <CUSBFunction::GetInterfaceClass() const>
   13224:	e3500003 	cmp	r0, #3
   13228:	0a000044 	beq	13340 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x184>
   1322c:	e5953014 	ldr	r3, [r5, #20]
   13230:	e3530000 	cmp	r3, #0
   13234:	1a000038 	bne	1331c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x160>
   13238:	e3560000 	cmp	r6, #0
   1323c:	e5856014 	str	r6, [r5, #20]
   13240:	0a000064 	beq	133d8 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x21c>
   13244:	e5953020 	ldr	r3, [r5, #32]
   13248:	e3530000 	cmp	r3, #0
   1324c:	1a000067 	bne	133f0 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x234>
   13250:	e1a00006 	mov	r0, r6
   13254:	eb008bb8 	bl	3613c <operator new[](unsigned int)>
   13258:	e5850020 	str	r0, [r5, #32]
   1325c:	e1a00007 	mov	r0, r7
   13260:	e28dd014 	add	sp, sp, #20
   13264:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13268:	e1d430d2 	ldrsb	r3, [r4, #2]
   1326c:	e3530000 	cmp	r3, #0
   13270:	ba00000d 	blt	132ac <CUSBHIDDevice::ConfigureHID(unsigned int)+0xf0>
   13274:	e595301c 	ldr	r3, [r5, #28]
   13278:	e3530000 	cmp	r3, #0
   1327c:	1a000021 	bne	13308 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x14c>
   13280:	e3a00014 	mov	r0, #20
   13284:	eb008ba6 	bl	36124 <operator new(unsigned int)>
   13288:	e1a07000 	mov	r7, r0
   1328c:	e1a00005 	mov	r0, r5
   13290:	ebfff4ce 	bl	105d0 <CUSBFunction::GetDevice() const>
   13294:	e1a02004 	mov	r2, r4
   13298:	e1a01000 	mov	r1, r0
   1329c:	e1a00007 	mov	r0, r7
   132a0:	ebfff2d8 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   132a4:	e585701c 	str	r7, [r5, #28]
   132a8:	eaffffcf 	b	131ec <CUSBHIDDevice::ConfigureHID(unsigned int)+0x30>
   132ac:	e5953018 	ldr	r3, [r5, #24]
   132b0:	e3530000 	cmp	r3, #0
   132b4:	1a000013 	bne	13308 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x14c>
   132b8:	e3a00014 	mov	r0, #20
   132bc:	eb008b98 	bl	36124 <operator new(unsigned int)>
   132c0:	e1a07000 	mov	r7, r0
   132c4:	e1a00005 	mov	r0, r5
   132c8:	ebfff4c0 	bl	105d0 <CUSBFunction::GetDevice() const>
   132cc:	e1a02004 	mov	r2, r4
   132d0:	e1a01000 	mov	r1, r0
   132d4:	e1a00007 	mov	r0, r7
   132d8:	ebfff2ca 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   132dc:	e5857018 	str	r7, [r5, #24]
   132e0:	eaffffc1 	b	131ec <CUSBHIDDevice::ConfigureHID(unsigned int)+0x30>
   132e4:	eb006d37 	bl	2e7c8 <CLogger::Get()>
   132e8:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   132ec:	e3403003 	movt	r3, #3
   132f0:	e30f1064 	movw	r1, #61540	@ 0xf064
   132f4:	e3401003 	movt	r1, #3
   132f8:	e3a02001 	mov	r2, #1
   132fc:	eb006efa 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13300:	e3a07000 	mov	r7, #0
   13304:	eaffffd4 	b	1325c <CUSBHIDDevice::ConfigureHID(unsigned int)+0xa0>
   13308:	e1a00005 	mov	r0, r5
   1330c:	e30f1064 	movw	r1, #61540	@ 0xf064
   13310:	e3401003 	movt	r1, #3
   13314:	ebfff4d8 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   13318:	eafffff8 	b	13300 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   1331c:	e5953020 	ldr	r3, [r5, #32]
   13320:	e3530000 	cmp	r3, #0
   13324:	1affffcc 	bne	1325c <CUSBHIDDevice::ConfigureHID(unsigned int)+0xa0>
   13328:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   1332c:	e3401003 	movt	r1, #3
   13330:	e30b0454 	movw	r0, #46164	@ 0xb454
   13334:	e3400003 	movt	r0, #3
   13338:	e3a02082 	mov	r2, #130	@ 0x82
   1333c:	eb0062a6 	bl	2bddc <assertion_failed>
   13340:	e1a00005 	mov	r0, r5
   13344:	ebfff52d 	bl	10800 <CUSBFunction::GetInterfaceSubClass() const>
   13348:	e1a08000 	mov	r8, r0
   1334c:	e3500001 	cmp	r0, #1
   13350:	1affffb5 	bne	1322c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x70>
   13354:	e1a00005 	mov	r0, r5
   13358:	ebfff4b1 	bl	10624 <CUSBFunction::GetHost() const>
   1335c:	e1a0a000 	mov	sl, r0
   13360:	e1a00005 	mov	r0, r5
   13364:	ebfff4a3 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   13368:	e1a0b000 	mov	fp, r0
   1336c:	e1a00005 	mov	r0, r5
   13370:	ebfff52e 	bl	10830 <CUSBFunction::GetInterfaceProtocol() const>
   13374:	e1a09000 	mov	r9, r0
   13378:	e2499002 	sub	r9, r9, #2
   1337c:	e1a00005 	mov	r0, r5
   13380:	e16f9f19 	clz	r9, r9
   13384:	ebfff505 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   13388:	e1a0100b 	mov	r1, fp
   1338c:	e58d0004 	str	r0, [sp, #4]
   13390:	e1a092a9 	lsr	r9, r9, #5
   13394:	e1a0000a 	mov	r0, sl
   13398:	e3a0300b 	mov	r3, #11
   1339c:	e3a02021 	mov	r2, #33	@ 0x21
   133a0:	e58d9000 	str	r9, [sp]
   133a4:	e58d400c 	str	r4, [sp, #12]
   133a8:	e58d4008 	str	r4, [sp, #8]
   133ac:	eb00019b 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   133b0:	e3500000 	cmp	r0, #0
   133b4:	aaffff9c 	bge	1322c <CUSBHIDDevice::ConfigureHID(unsigned int)+0x70>
   133b8:	eb006d02 	bl	2e7c8 <CLogger::Get()>
   133bc:	e1a02008 	mov	r2, r8
   133c0:	e30b3410 	movw	r3, #46096	@ 0xb410
   133c4:	e3403003 	movt	r3, #3
   133c8:	e30f1064 	movw	r1, #61540	@ 0xf064
   133cc:	e3401003 	movt	r1, #3
   133d0:	eb006ec5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   133d4:	eaffffc9 	b	13300 <CUSBHIDDevice::ConfigureHID(unsigned int)+0x144>
   133d8:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   133dc:	e3401003 	movt	r1, #3
   133e0:	e30b0424 	movw	r0, #46116	@ 0xb424
   133e4:	e3400003 	movt	r0, #3
   133e8:	e3a0207d 	mov	r2, #125	@ 0x7d
   133ec:	eb00627a 	bl	2bddc <assertion_failed>
   133f0:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   133f4:	e3401003 	movt	r1, #3
   133f8:	e30b043c 	movw	r0, #46140	@ 0xb43c
   133fc:	e3400003 	movt	r0, #3
   13400:	e3a0207f 	mov	r2, #127	@ 0x7f
   13404:	eb006274 	bl	2bddc <assertion_failed>

00013408 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)>:
   13408:	e590c01c 	ldr	ip, [r0, #28]
   1340c:	e35c0000 	cmp	ip, #0
   13410:	0a000013 	beq	13464 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x5c>
   13414:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13418:	e3510000 	cmp	r1, #0
   1341c:	e1a05001 	mov	r5, r1
   13420:	e24dd00c 	sub	sp, sp, #12
   13424:	0a000010 	beq	1346c <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x64>
   13428:	e1a06002 	mov	r6, r2
   1342c:	e3520000 	cmp	r2, #0
   13430:	0a000013 	beq	13484 <CUSBHIDDevice::SendToEndpointOut(void const*, unsigned int, unsigned int)+0x7c>
   13434:	e1a04000 	mov	r4, r0
   13438:	e1a07003 	mov	r7, r3
   1343c:	ebfff478 	bl	10624 <CUSBFunction::GetHost() const>
   13440:	e1a03006 	mov	r3, r6
   13444:	e1a02005 	mov	r2, r5
   13448:	e594101c 	ldr	r1, [r4, #28]
   1344c:	e58d7000 	str	r7, [sp]
   13450:	eb0001d9 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   13454:	e1e00000 	mvn	r0, r0
   13458:	e1a00fa0 	lsr	r0, r0, #31
   1345c:	e28dd00c 	add	sp, sp, #12
   13460:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13464:	e1a0000c 	mov	r0, ip
   13468:	e12fff1e 	bx	lr
   1346c:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   13470:	e3401003 	movt	r1, #3
   13474:	e30b0400 	movw	r0, #46080	@ 0xb400
   13478:	e3400003 	movt	r0, #3
   1347c:	e3a0208e 	mov	r2, #142	@ 0x8e
   13480:	eb006255 	bl	2bddc <assertion_failed>
   13484:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   13488:	e3401003 	movt	r1, #3
   1348c:	e30b046c 	movw	r0, #46188	@ 0xb46c
   13490:	e3400003 	movt	r0, #3
   13494:	e3a0208f 	mov	r2, #143	@ 0x8f
   13498:	eb00624f 	bl	2bddc <assertion_failed>

0001349c <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)>:
   1349c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   134a0:	e1a04000 	mov	r4, r0
   134a4:	e590001c 	ldr	r0, [r0, #28]
   134a8:	e24dd00c 	sub	sp, sp, #12
   134ac:	e3500000 	cmp	r0, #0
   134b0:	0a000024 	beq	13548 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xac>
   134b4:	e1a06001 	mov	r6, r1
   134b8:	e3510000 	cmp	r1, #0
   134bc:	0a000023 	beq	13550 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xb4>
   134c0:	e1a05002 	mov	r5, r2
   134c4:	e3520000 	cmp	r2, #0
   134c8:	0a000026 	beq	13568 <CUSBHIDDevice::SendToEndpointOutAsync(void const*, unsigned int, unsigned int)+0xcc>
   134cc:	e1a00002 	mov	r0, r2
   134d0:	e1a07003 	mov	r7, r3
   134d4:	eb008b18 	bl	3613c <operator new[](unsigned int)>
   134d8:	e1a01006 	mov	r1, r6
   134dc:	e1a02005 	mov	r2, r5
   134e0:	e1a06000 	mov	r6, r0
   134e4:	eb008906 	bl	35904 <memcpy>
   134e8:	e3a00070 	mov	r0, #112	@ 0x70
   134ec:	eb000c84 	bl	16704 <CUSBRequest::operator new(unsigned int)>
   134f0:	e3a02000 	mov	r2, #0
   134f4:	e58d2000 	str	r2, [sp]
   134f8:	e1a03005 	mov	r3, r5
   134fc:	e1a02006 	mov	r2, r6
   13500:	e1a05000 	mov	r5, r0
   13504:	e594101c 	ldr	r1, [r4, #28]
   13508:	eb000bb3 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1350c:	e1a03004 	mov	r3, r4
   13510:	e1a02006 	mov	r2, r6
   13514:	e1a00005 	mov	r0, r5
   13518:	e3031024 	movw	r1, #12324	@ 0x3024
   1351c:	e3401001 	movt	r1, #1
   13520:	eb000c58 	bl	16688 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13524:	e1a00004 	mov	r0, r4
   13528:	ebfff43d 	bl	10624 <CUSBFunction::GetHost() const>
   1352c:	e5903000 	ldr	r3, [r0]
   13530:	e1a02007 	mov	r2, r7
   13534:	e1a01005 	mov	r1, r5
   13538:	e5933014 	ldr	r3, [r3, #20]
   1353c:	e28dd00c 	add	sp, sp, #12
   13540:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   13544:	e12fff13 	bx	r3
   13548:	e28dd00c 	add	sp, sp, #12
   1354c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   13550:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   13554:	e3401003 	movt	r1, #3
   13558:	e30b0400 	movw	r0, #46080	@ 0xb400
   1355c:	e3400003 	movt	r0, #3
   13560:	e3a020a0 	mov	r2, #160	@ 0xa0
   13564:	eb00621c 	bl	2bddc <assertion_failed>
   13568:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   1356c:	e3401003 	movt	r1, #3
   13570:	e30b046c 	movw	r0, #46188	@ 0xb46c
   13574:	e3400003 	movt	r0, #3
   13578:	e3a020a1 	mov	r2, #161	@ 0xa1
   1357c:	eb006216 	bl	2bddc <assertion_failed>

00013580 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)>:
   13580:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   13584:	e1a07003 	mov	r7, r3
   13588:	e5903018 	ldr	r3, [r0, #24]
   1358c:	e24dd00c 	sub	sp, sp, #12
   13590:	e3530000 	cmp	r3, #0
   13594:	0a00000e 	beq	135d4 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x54>
   13598:	e1a05001 	mov	r5, r1
   1359c:	e3510000 	cmp	r1, #0
   135a0:	0a000011 	beq	135ec <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x6c>
   135a4:	e1a06002 	mov	r6, r2
   135a8:	e3520000 	cmp	r2, #0
   135ac:	0a000014 	beq	13604 <CUSBHIDDevice::ReceiveFromEndpointIn(void*, unsigned int, unsigned int)+0x84>
   135b0:	e1a04000 	mov	r4, r0
   135b4:	ebfff41a 	bl	10624 <CUSBFunction::GetHost() const>
   135b8:	e1a03006 	mov	r3, r6
   135bc:	e1a02005 	mov	r2, r5
   135c0:	e5941018 	ldr	r1, [r4, #24]
   135c4:	e58d7000 	str	r7, [sp]
   135c8:	eb00017b 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   135cc:	e28dd00c 	add	sp, sp, #12
   135d0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   135d4:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   135d8:	e3401003 	movt	r1, #3
   135dc:	e30b047c 	movw	r0, #46204	@ 0xb47c
   135e0:	e3400003 	movt	r0, #3
   135e4:	e3a020be 	mov	r2, #190	@ 0xbe
   135e8:	eb0061fb 	bl	2bddc <assertion_failed>
   135ec:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   135f0:	e3401003 	movt	r1, #3
   135f4:	e30b0400 	movw	r0, #46080	@ 0xb400
   135f8:	e3400003 	movt	r0, #3
   135fc:	e3a020bf 	mov	r2, #191	@ 0xbf
   13600:	eb0061f5 	bl	2bddc <assertion_failed>
   13604:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   13608:	e3401003 	movt	r1, #3
   1360c:	e30b046c 	movw	r0, #46188	@ 0xb46c
   13610:	e3400003 	movt	r0, #3
   13614:	e3a020c0 	mov	r2, #192	@ 0xc0
   13618:	eb0061ef 	bl	2bddc <assertion_failed>

0001361c <CUSBHIDDevice::StartRequest()>:
   1361c:	e5903018 	ldr	r3, [r0, #24]
   13620:	e92d4070 	push	{r4, r5, r6, lr}
   13624:	e3530000 	cmp	r3, #0
   13628:	e24dd008 	sub	sp, sp, #8
   1362c:	0a00001e 	beq	136ac <CUSBHIDDevice::StartRequest()+0x90>
   13630:	e5903020 	ldr	r3, [r0, #32]
   13634:	e1a04000 	mov	r4, r0
   13638:	e3530000 	cmp	r3, #0
   1363c:	0a000020 	beq	136c4 <CUSBHIDDevice::StartRequest()+0xa8>
   13640:	e5903014 	ldr	r3, [r0, #20]
   13644:	e3530000 	cmp	r3, #0
   13648:	0a000023 	beq	136dc <CUSBHIDDevice::StartRequest()+0xc0>
   1364c:	e3a00070 	mov	r0, #112	@ 0x70
   13650:	e3a06000 	mov	r6, #0
   13654:	eb000c2a 	bl	16704 <CUSBRequest::operator new(unsigned int)>
   13658:	e5943014 	ldr	r3, [r4, #20]
   1365c:	e58d6000 	str	r6, [sp]
   13660:	e1a05000 	mov	r5, r0
   13664:	e5942020 	ldr	r2, [r4, #32]
   13668:	e5941018 	ldr	r1, [r4, #24]
   1366c:	eb000b5a 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13670:	e1a03004 	mov	r3, r4
   13674:	e1a02006 	mov	r2, r6
   13678:	e1a00005 	mov	r0, r5
   1367c:	e30317e0 	movw	r1, #14304	@ 0x37e0
   13680:	e3401001 	movt	r1, #1
   13684:	eb000bff 	bl	16688 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   13688:	e1a00004 	mov	r0, r4
   1368c:	ebfff3e4 	bl	10624 <CUSBFunction::GetHost() const>
   13690:	e5903000 	ldr	r3, [r0]
   13694:	e1a02006 	mov	r2, r6
   13698:	e1a01005 	mov	r1, r5
   1369c:	e5933014 	ldr	r3, [r3, #20]
   136a0:	e28dd008 	add	sp, sp, #8
   136a4:	e8bd4070 	pop	{r4, r5, r6, lr}
   136a8:	e12fff13 	bx	r3
   136ac:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   136b0:	e3401003 	movt	r1, #3
   136b4:	e30b047c 	movw	r0, #46204	@ 0xb47c
   136b8:	e3400003 	movt	r0, #3
   136bc:	e3a020c6 	mov	r2, #198	@ 0xc6
   136c0:	eb0061c5 	bl	2bddc <assertion_failed>
   136c4:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   136c8:	e3401003 	movt	r1, #3
   136cc:	e30b0454 	movw	r0, #46164	@ 0xb454
   136d0:	e3400003 	movt	r0, #3
   136d4:	e3a020c7 	mov	r2, #199	@ 0xc7
   136d8:	eb0061bf 	bl	2bddc <assertion_failed>
   136dc:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   136e0:	e3401003 	movt	r1, #3
   136e4:	e30b0424 	movw	r0, #46116	@ 0xb424
   136e8:	e3400003 	movt	r0, #3
   136ec:	e3a020c9 	mov	r2, #201	@ 0xc9
   136f0:	eb0061b9 	bl	2bddc <assertion_failed>

000136f4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>:
   136f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   136f8:	e2514000 	subs	r4, r1, #0
   136fc:	0a000031 	beq	137c8 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   13700:	e1a05000 	mov	r5, r0
   13704:	e1a00004 	mov	r0, r4
   13708:	eb000b68 	bl	164b0 <CUSBRequest::GetStatus() const>
   1370c:	e3500000 	cmp	r0, #0
   13710:	1a000018 	bne	13778 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x84>
   13714:	eb000141 	bl	13c20 <CUSBHostController::IsPlugAndPlay()>
   13718:	e2502000 	subs	r2, r0, #0
   1371c:	1a00001f 	bne	137a0 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0xac>
   13720:	e5953000 	ldr	r3, [r5]
   13724:	e1a01002 	mov	r1, r2
   13728:	e1a00005 	mov	r0, r5
   1372c:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   13730:	e12fff33 	blx	r3
   13734:	e1a00004 	mov	r0, r4
   13738:	eb000b4b 	bl	1646c <CUSBRequest::~CUSBRequest()>
   1373c:	e3a01070 	mov	r1, #112	@ 0x70
   13740:	e1a00004 	mov	r0, r4
   13744:	eb000c04 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   13748:	e1a00005 	mov	r0, r5
   1374c:	ebffffb2 	bl	1361c <CUSBHIDDevice::StartRequest()>
   13750:	e3500000 	cmp	r0, #0
   13754:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   13758:	eb006c1a 	bl	2e7c8 <CLogger::Get()>
   1375c:	e30b3494 	movw	r3, #46228	@ 0xb494
   13760:	e3403003 	movt	r3, #3
   13764:	e30f1064 	movw	r1, #61540	@ 0xf064
   13768:	e3401003 	movt	r1, #3
   1376c:	e3a02001 	mov	r2, #1
   13770:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13774:	ea006ddc 	b	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   13778:	e5953000 	ldr	r3, [r5]
   1377c:	e1a00004 	mov	r0, r4
   13780:	e5957020 	ldr	r7, [r5, #32]
   13784:	e593602c 	ldr	r6, [r3, #44]	@ 0x2c
   13788:	eb000b4a 	bl	164b8 <CUSBRequest::GetResultLength() const>
   1378c:	e1a01007 	mov	r1, r7
   13790:	e1a02000 	mov	r2, r0
   13794:	e1a00005 	mov	r0, r5
   13798:	e12fff36 	blx	r6
   1379c:	eaffffe4 	b	13734 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x40>
   137a0:	e1a00004 	mov	r0, r4
   137a4:	eb000b4f 	bl	164e8 <CUSBRequest::GetUSBError() const>
   137a8:	e3500003 	cmp	r0, #3
   137ac:	e1a00004 	mov	r0, r4
   137b0:	0affffe0 	beq	13738 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)+0x44>
   137b4:	eb000b2c 	bl	1646c <CUSBRequest::~CUSBRequest()>
   137b8:	e1a00004 	mov	r0, r4
   137bc:	e3a01070 	mov	r1, #112	@ 0x70
   137c0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   137c4:	ea000be4 	b	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   137c8:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   137cc:	e3401003 	movt	r1, #3
   137d0:	e3090e38 	movw	r0, #40504	@ 0x9e38
   137d4:	e3400003 	movt	r0, #3
   137d8:	e3a020d3 	mov	r2, #211	@ 0xd3
   137dc:	eb00617e 	bl	2bddc <assertion_failed>

000137e0 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   137e0:	e1a01000 	mov	r1, r0
   137e4:	e2520000 	subs	r0, r2, #0
   137e8:	0a000000 	beq	137f0 <CUSBHIDDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   137ec:	eaffffc0 	b	136f4 <CUSBHIDDevice::CompletionRoutine(CUSBRequest*)>
   137f0:	e30b13cc 	movw	r1, #46028	@ 0xb3cc
   137f4:	e3401003 	movt	r1, #3
   137f8:	e3090d50 	movw	r0, #40272	@ 0x9d50
   137fc:	e3400003 	movt	r0, #3
   13800:	e3a020f6 	mov	r2, #246	@ 0xf6
   13804:	e92d4010 	push	{r4, lr}
   13808:	eb006173 	bl	2bddc <assertion_failed>

0001380c <CUSBHostController::UpdatePlugAndPlay()>:
   1380c:	e3043088 	movw	r3, #16520	@ 0x4088
   13810:	e3403004 	movt	r3, #4
   13814:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13818:	e5d38000 	ldrb	r8, [r3]
   1381c:	e3580000 	cmp	r8, #0
   13820:	0a000045 	beq	1393c <CUSBHostController::UpdatePlugAndPlay()+0x130>
   13824:	e1a06000 	mov	r6, r0
   13828:	e590000c 	ldr	r0, [r0, #12]
   1382c:	e3a03000 	mov	r3, #0
   13830:	e1500003 	cmp	r0, r3
   13834:	e5d64004 	ldrb	r4, [r6, #4]
   13838:	e5c63004 	strb	r3, [r6, #4]
   1383c:	1a000030 	bne	13904 <CUSBHostController::UpdatePlugAndPlay()+0xf8>
   13840:	e2867008 	add	r7, r6, #8
   13844:	e1a00007 	mov	r0, r7
   13848:	eb0070ba 	bl	2fb38 <CPtrList::GetFirst()>
   1384c:	e2505000 	subs	r5, r0, #0
   13850:	0a00003f 	beq	13954 <CUSBHostController::UpdatePlugAndPlay()+0x148>
   13854:	e1a01005 	mov	r1, r5
   13858:	e1a00007 	mov	r0, r7
   1385c:	eb0070cd 	bl	2fb98 <CPtrList::GetPtr(TPtrListElement*)>
   13860:	e1a01005 	mov	r1, r5
   13864:	e1a04000 	mov	r4, r0
   13868:	e1a00007 	mov	r0, r7
   1386c:	eb007157 	bl	2fdd0 <CPtrList::Remove(TPtrListElement*)>
   13870:	e596300c 	ldr	r3, [r6, #12]
   13874:	e3530000 	cmp	r3, #0
   13878:	1a000018 	bne	138e0 <CUSBHostController::UpdatePlugAndPlay()+0xd4>
   1387c:	e3540000 	cmp	r4, #0
   13880:	0a000019 	beq	138ec <CUSBHostController::UpdatePlugAndPlay()+0xe0>
   13884:	e5d43000 	ldrb	r3, [r4]
   13888:	e5940004 	ldr	r0, [r4, #4]
   1388c:	e3530000 	cmp	r3, #0
   13890:	0a00000e 	beq	138d0 <CUSBHostController::UpdatePlugAndPlay()+0xc4>
   13894:	e3500000 	cmp	r0, #0
   13898:	0a000021 	beq	13924 <CUSBHostController::UpdatePlugAndPlay()+0x118>
   1389c:	e5903000 	ldr	r3, [r0]
   138a0:	e5933010 	ldr	r3, [r3, #16]
   138a4:	e12fff33 	blx	r3
   138a8:	e1a00004 	mov	r0, r4
   138ac:	e3a01008 	mov	r1, #8
   138b0:	eb008a33 	bl	36184 <operator delete(void*, unsigned int)>
   138b4:	e596000c 	ldr	r0, [r6, #12]
   138b8:	e3500000 	cmp	r0, #0
   138bc:	01a04008 	moveq	r4, r8
   138c0:	0affffdf 	beq	13844 <CUSBHostController::UpdatePlugAndPlay()+0x38>
   138c4:	e1a04008 	mov	r4, r8
   138c8:	eb00902c 	bl	37980 <EnterCritical>
   138cc:	eaffffdc 	b	13844 <CUSBHostController::UpdatePlugAndPlay()+0x38>
   138d0:	e3500000 	cmp	r0, #0
   138d4:	0a00000c 	beq	1390c <CUSBHostController::UpdatePlugAndPlay()+0x100>
   138d8:	eb000f4d 	bl	17614 <CUSBStandardHub::HandlePortStatusChange()>
   138dc:	eafffff1 	b	138a8 <CUSBHostController::UpdatePlugAndPlay()+0x9c>
   138e0:	eb009051 	bl	37a2c <LeaveCritical>
   138e4:	e3540000 	cmp	r4, #0
   138e8:	1affffe5 	bne	13884 <CUSBHostController::UpdatePlugAndPlay()+0x78>
   138ec:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   138f0:	e3401003 	movt	r1, #3
   138f4:	e30b04d4 	movw	r0, #46292	@ 0xb4d4
   138f8:	e3400003 	movt	r0, #3
   138fc:	e3a020a1 	mov	r2, #161	@ 0xa1
   13900:	eb006135 	bl	2bddc <assertion_failed>
   13904:	eb00901d 	bl	37980 <EnterCritical>
   13908:	eaffffcc 	b	13840 <CUSBHostController::UpdatePlugAndPlay()+0x34>
   1390c:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13910:	e3401003 	movt	r1, #3
   13914:	e30b04f8 	movw	r0, #46328	@ 0xb4f8
   13918:	e3400003 	movt	r0, #3
   1391c:	e3a020a9 	mov	r2, #169	@ 0xa9
   13920:	eb00612d 	bl	2bddc <assertion_failed>
   13924:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13928:	e3401003 	movt	r1, #3
   1392c:	e30b04e0 	movw	r0, #46304	@ 0xb4e0
   13930:	e3400003 	movt	r0, #3
   13934:	e3a020a4 	mov	r2, #164	@ 0xa4
   13938:	eb006127 	bl	2bddc <assertion_failed>
   1393c:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13940:	e3401003 	movt	r1, #3
   13944:	e30b04c4 	movw	r0, #46276	@ 0xb4c4
   13948:	e3400003 	movt	r0, #3
   1394c:	e3a02091 	mov	r2, #145	@ 0x91
   13950:	eb006121 	bl	2bddc <assertion_failed>
   13954:	e596300c 	ldr	r3, [r6, #12]
   13958:	e3530000 	cmp	r3, #0
   1395c:	1a000001 	bne	13968 <CUSBHostController::UpdatePlugAndPlay()+0x15c>
   13960:	e1a00004 	mov	r0, r4
   13964:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   13968:	eb00902f 	bl	37a2c <LeaveCritical>
   1396c:	eafffffb 	b	13960 <CUSBHostController::UpdatePlugAndPlay()+0x154>

00013970 <CUSBHostController::CUSBHostController(bool)>:
   13970:	e92d4070 	push	{r4, r5, r6, lr}
   13974:	e1a04000 	mov	r4, r0
   13978:	e59f3030 	ldr	r3, [pc, #48]	@ 139b0 <CUSBHostController::CUSBHostController(bool)+0x40>
   1397c:	e3a06001 	mov	r6, #1
   13980:	e2800008 	add	r0, r0, #8
   13984:	e5843000 	str	r3, [r4]
   13988:	e1a05001 	mov	r5, r1
   1398c:	e5c46004 	strb	r6, [r4, #4]
   13990:	eb00705b 	bl	2fb04 <CPtrList::CPtrList()>
   13994:	e3043088 	movw	r3, #16520	@ 0x4088
   13998:	e3403004 	movt	r3, #4
   1399c:	e1a00004 	mov	r0, r4
   139a0:	e584600c 	str	r6, [r4, #12]
   139a4:	e5834004 	str	r4, [r3, #4]
   139a8:	e5c35000 	strb	r5, [r3]
   139ac:	e8bd8070 	pop	{r4, r5, r6, pc}
   139b0:	0003f0ac 	.word	0x0003f0ac

000139b4 <CUSBHostController::~CUSBHostController()>:
   139b4:	e3043088 	movw	r3, #16520	@ 0x4088
   139b8:	e3403004 	movt	r3, #4
   139bc:	e59f101c 	ldr	r1, [pc, #28]	@ 139e0 <CUSBHostController::~CUSBHostController()+0x2c>
   139c0:	e3a02000 	mov	r2, #0
   139c4:	e92d4010 	push	{r4, lr}
   139c8:	e1a04000 	mov	r4, r0
   139cc:	e4801008 	str	r1, [r0], #8
   139d0:	e5832004 	str	r2, [r3, #4]
   139d4:	eb00704d 	bl	2fb10 <CPtrList::~CPtrList()>
   139d8:	e1a00004 	mov	r0, r4
   139dc:	e8bd8010 	pop	{r4, pc}
   139e0:	0003f0ac 	.word	0x0003f0ac

000139e4 <CUSBHostController::~CUSBHostController()>:
   139e4:	e3043088 	movw	r3, #16520	@ 0x4088
   139e8:	e3403004 	movt	r3, #4
   139ec:	e59f1028 	ldr	r1, [pc, #40]	@ 13a1c <CUSBHostController::~CUSBHostController()+0x38>
   139f0:	e3a02000 	mov	r2, #0
   139f4:	e92d4010 	push	{r4, lr}
   139f8:	e1a04000 	mov	r4, r0
   139fc:	e4801008 	str	r1, [r0], #8
   13a00:	e5832004 	str	r2, [r3, #4]
   13a04:	eb007041 	bl	2fb10 <CPtrList::~CPtrList()>
   13a08:	e1a00004 	mov	r0, r4
   13a0c:	e3a01010 	mov	r1, #16
   13a10:	eb0089db 	bl	36184 <operator delete(void*, unsigned int)>
   13a14:	e1a00004 	mov	r0, r4
   13a18:	e8bd8010 	pop	{r4, pc}
   13a1c:	0003f0ac 	.word	0x0003f0ac

00013a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>:
   13a20:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a24:	e1a06000 	mov	r6, r0
   13a28:	e1a05001 	mov	r5, r1
   13a2c:	e24dd07c 	sub	sp, sp, #124	@ 0x7c
   13a30:	e3a00008 	mov	r0, #8
   13a34:	e1a08002 	mov	r8, r2
   13a38:	e1a07003 	mov	r7, r3
   13a3c:	e1dd9abc 	ldrh	r9, [sp, #172]	@ 0xac
   13a40:	e1ddbab0 	ldrh	fp, [sp, #160]	@ 0xa0
   13a44:	e1ddaab4 	ldrh	sl, [sp, #164]	@ 0xa4
   13a48:	eb0089b5 	bl	36124 <operator new(unsigned int)>
   13a4c:	e59d20a8 	ldr	r2, [sp, #168]	@ 0xa8
   13a50:	e1a03009 	mov	r3, r9
   13a54:	e5c08000 	strb	r8, [r0]
   13a58:	e1a01005 	mov	r1, r5
   13a5c:	e5c07001 	strb	r7, [r0, #1]
   13a60:	e1a04000 	mov	r4, r0
   13a64:	e1c0b0b2 	strh	fp, [r0, #2]
   13a68:	e58d0000 	str	r0, [sp]
   13a6c:	e1c0a0b4 	strh	sl, [r0, #4]
   13a70:	e1c090b6 	strh	r9, [r0, #6]
   13a74:	e28d0008 	add	r0, sp, #8
   13a78:	eb000a57 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13a7c:	e5963000 	ldr	r3, [r6]
   13a80:	e1a00006 	mov	r0, r6
   13a84:	e3a02000 	mov	r2, #0
   13a88:	e28d1008 	add	r1, sp, #8
   13a8c:	e5933010 	ldr	r3, [r3, #16]
   13a90:	e12fff33 	blx	r3
   13a94:	e3500000 	cmp	r0, #0
   13a98:	1a00000c 	bne	13ad0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xb0>
   13a9c:	e3550000 	cmp	r5, #0
   13aa0:	0a00000e 	beq	13ae0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0xc0>
   13aa4:	e1a00005 	mov	r0, r5
   13aa8:	e3e05000 	mvn	r5, #0
   13aac:	ebfff1aa 	bl	1015c <CUSBEndpoint::ResetPID()>
   13ab0:	e3a01008 	mov	r1, #8
   13ab4:	e1a00004 	mov	r0, r4
   13ab8:	eb0089b1 	bl	36184 <operator delete(void*, unsigned int)>
   13abc:	e28d0008 	add	r0, sp, #8
   13ac0:	eb000a69 	bl	1646c <CUSBRequest::~CUSBRequest()>
   13ac4:	e1a00005 	mov	r0, r5
   13ac8:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   13acc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ad0:	e28d0008 	add	r0, sp, #8
   13ad4:	eb000a77 	bl	164b8 <CUSBRequest::GetResultLength() const>
   13ad8:	e1a05000 	mov	r5, r0
   13adc:	eafffff3 	b	13ab0 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)+0x90>
   13ae0:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13ae4:	e3401003 	movt	r1, #3
   13ae8:	e30b050c 	movw	r0, #46348	@ 0xb50c
   13aec:	e3400003 	movt	r0, #3
   13af0:	e3a02074 	mov	r2, #116	@ 0x74
   13af4:	eb0060b8 	bl	2bddc <assertion_failed>

00013af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>:
   13af8:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   13afc:	e1832402 	orr	r2, r3, r2, lsl #8
   13b00:	e59dc004 	ldr	ip, [sp, #4]
   13b04:	e1dde1b0 	ldrh	lr, [sp, #16]
   13b08:	e3a03006 	mov	r3, #6
   13b0c:	e58d2004 	str	r2, [sp, #4]
   13b10:	e5dd200c 	ldrb	r2, [sp, #12]
   13b14:	e58dc00c 	str	ip, [sp, #12]
   13b18:	e1ddc0b8 	ldrh	ip, [sp, #8]
   13b1c:	e58dc010 	str	ip, [sp, #16]
   13b20:	e58de008 	str	lr, [sp, #8]
   13b24:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
   13b28:	eaffffbc 	b	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>

00013b2c <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)>:
   13b2c:	e92d4010 	push	{r4, lr}
   13b30:	e3a04000 	mov	r4, #0
   13b34:	e3a03005 	mov	r3, #5
   13b38:	e24dd010 	sub	sp, sp, #16
   13b3c:	e88d0014 	stm	sp, {r2, r4}
   13b40:	e1a02004 	mov	r2, r4
   13b44:	e58d400c 	str	r4, [sp, #12]
   13b48:	e58d4008 	str	r4, [sp, #8]
   13b4c:	ebffffb3 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13b50:	e1500004 	cmp	r0, r4
   13b54:	b1a00004 	movlt	r0, r4
   13b58:	ba000003 	blt	13b6c <CUSBHostController::SetAddress(CUSBEndpoint*, unsigned char)+0x40>
   13b5c:	eb008535 	bl	35038 <CTimer::Get()>
   13b60:	e3a00032 	mov	r0, #50	@ 0x32
   13b64:	eb0084f2 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   13b68:	e3a00001 	mov	r0, #1
   13b6c:	e28dd010 	add	sp, sp, #16
   13b70:	e8bd8010 	pop	{r4, pc}

00013b74 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)>:
   13b74:	e92d4010 	push	{r4, lr}
   13b78:	e3a04000 	mov	r4, #0
   13b7c:	e3a03009 	mov	r3, #9
   13b80:	e24dd010 	sub	sp, sp, #16
   13b84:	e88d0014 	stm	sp, {r2, r4}
   13b88:	e1a02004 	mov	r2, r4
   13b8c:	e58d400c 	str	r4, [sp, #12]
   13b90:	e58d4008 	str	r4, [sp, #8]
   13b94:	ebffffa1 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   13b98:	e1500004 	cmp	r0, r4
   13b9c:	b1a00004 	movlt	r0, r4
   13ba0:	ba000003 	blt	13bb4 <CUSBHostController::SetConfiguration(CUSBEndpoint*, unsigned char)+0x40>
   13ba4:	eb008523 	bl	35038 <CTimer::Get()>
   13ba8:	e3a00032 	mov	r0, #50	@ 0x32
   13bac:	eb0084e0 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   13bb0:	e3a00001 	mov	r0, #1
   13bb4:	e28dd010 	add	sp, sp, #16
   13bb8:	e8bd8010 	pop	{r4, pc}

00013bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>:
   13bbc:	e92d4010 	push	{r4, lr}
   13bc0:	e1a04000 	mov	r4, r0
   13bc4:	e3a00000 	mov	r0, #0
   13bc8:	e24dd078 	sub	sp, sp, #120	@ 0x78
   13bcc:	e58d0000 	str	r0, [sp]
   13bd0:	e28d0008 	add	r0, sp, #8
   13bd4:	eb000a00 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   13bd8:	e5943000 	ldr	r3, [r4]
   13bdc:	e59d2080 	ldr	r2, [sp, #128]	@ 0x80
   13be0:	e28d1008 	add	r1, sp, #8
   13be4:	e1a00004 	mov	r0, r4
   13be8:	e5933010 	ldr	r3, [r3, #16]
   13bec:	e12fff33 	blx	r3
   13bf0:	e3500000 	cmp	r0, #0
   13bf4:	0a000007 	beq	13c18 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x5c>
   13bf8:	e28d0008 	add	r0, sp, #8
   13bfc:	eb000a2d 	bl	164b8 <CUSBRequest::GetResultLength() const>
   13c00:	e1a04000 	mov	r4, r0
   13c04:	e28d0008 	add	r0, sp, #8
   13c08:	eb000a17 	bl	1646c <CUSBRequest::~CUSBRequest()>
   13c0c:	e1a00004 	mov	r0, r4
   13c10:	e28dd078 	add	sp, sp, #120	@ 0x78
   13c14:	e8bd8010 	pop	{r4, pc}
   13c18:	e3e04000 	mvn	r4, #0
   13c1c:	eafffff8 	b	13c04 <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)+0x48>

00013c20 <CUSBHostController::IsPlugAndPlay()>:
   13c20:	e3043088 	movw	r3, #16520	@ 0x4088
   13c24:	e3403004 	movt	r3, #4
   13c28:	e5d30000 	ldrb	r0, [r3]
   13c2c:	e12fff1e 	bx	lr

00013c30 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)>:
   13c30:	e3043088 	movw	r3, #16520	@ 0x4088
   13c34:	e3403004 	movt	r3, #4
   13c38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13c3c:	e5d33000 	ldrb	r3, [r3]
   13c40:	e3530000 	cmp	r3, #0
   13c44:	0a000021 	beq	13cd0 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xa0>
   13c48:	e1a04001 	mov	r4, r1
   13c4c:	e3510000 	cmp	r1, #0
   13c50:	0a000024 	beq	13ce8 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xb8>
   13c54:	e1a06000 	mov	r6, r0
   13c58:	e3a00008 	mov	r0, #8
   13c5c:	eb008930 	bl	36124 <operator new(unsigned int)>
   13c60:	e1a07000 	mov	r7, r0
   13c64:	e3a03001 	mov	r3, #1
   13c68:	e596000c 	ldr	r0, [r6, #12]
   13c6c:	e5c73000 	strb	r3, [r7]
   13c70:	e3500000 	cmp	r0, #0
   13c74:	e5874004 	str	r4, [r7, #4]
   13c78:	1a000012 	bne	13cc8 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x98>
   13c7c:	e2864008 	add	r4, r6, #8
   13c80:	e1a00004 	mov	r0, r4
   13c84:	eb006fab 	bl	2fb38 <CPtrList::GetFirst()>
   13c88:	e2501000 	subs	r1, r0, #0
   13c8c:	0a00001b 	beq	13d00 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0xd0>
   13c90:	e1a00004 	mov	r0, r4
   13c94:	e1a05001 	mov	r5, r1
   13c98:	eb006fa8 	bl	2fb40 <CPtrList::GetNext(TPtrListElement*)>
   13c9c:	e2501000 	subs	r1, r0, #0
   13ca0:	1afffffa 	bne	13c90 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x60>
   13ca4:	e1a02007 	mov	r2, r7
   13ca8:	e1a01005 	mov	r1, r5
   13cac:	e1a00004 	mov	r0, r4
   13cb0:	eb00700a 	bl	2fce0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   13cb4:	e596300c 	ldr	r3, [r6, #12]
   13cb8:	e3530000 	cmp	r3, #0
   13cbc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   13cc0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13cc4:	ea008f58 	b	37a2c <LeaveCritical>
   13cc8:	eb008f2c 	bl	37980 <EnterCritical>
   13ccc:	eaffffea 	b	13c7c <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x4c>
   13cd0:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13cd4:	e3401003 	movt	r1, #3
   13cd8:	e30b04c4 	movw	r0, #46276	@ 0xb4c4
   13cdc:	e3400003 	movt	r0, #3
   13ce0:	e3a020bb 	mov	r2, #187	@ 0xbb
   13ce4:	eb00603c 	bl	2bddc <assertion_failed>
   13ce8:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13cec:	e3401003 	movt	r1, #3
   13cf0:	e30b04e8 	movw	r0, #46312	@ 0xb4e8
   13cf4:	e3400003 	movt	r0, #3
   13cf8:	e3a020bc 	mov	r2, #188	@ 0xbc
   13cfc:	eb006036 	bl	2bddc <assertion_failed>
   13d00:	e1a05001 	mov	r5, r1
   13d04:	eaffffe6 	b	13ca4 <CUSBHostController::PortStatusChanged(CUSBHCIRootPort*)+0x74>

00013d08 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>:
   13d08:	e3043088 	movw	r3, #16520	@ 0x4088
   13d0c:	e3403004 	movt	r3, #4
   13d10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   13d14:	e5d33000 	ldrb	r3, [r3]
   13d18:	e3530000 	cmp	r3, #0
   13d1c:	0a000021 	beq	13da8 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xa0>
   13d20:	e1a04001 	mov	r4, r1
   13d24:	e3510000 	cmp	r1, #0
   13d28:	0a000024 	beq	13dc0 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xb8>
   13d2c:	e1a06000 	mov	r6, r0
   13d30:	e3a00008 	mov	r0, #8
   13d34:	eb0088fa 	bl	36124 <operator new(unsigned int)>
   13d38:	e1a07000 	mov	r7, r0
   13d3c:	e3a03000 	mov	r3, #0
   13d40:	e596000c 	ldr	r0, [r6, #12]
   13d44:	e5c73000 	strb	r3, [r7]
   13d48:	e1500003 	cmp	r0, r3
   13d4c:	e5874004 	str	r4, [r7, #4]
   13d50:	1a000012 	bne	13da0 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x98>
   13d54:	e2864008 	add	r4, r6, #8
   13d58:	e1a00004 	mov	r0, r4
   13d5c:	eb006f75 	bl	2fb38 <CPtrList::GetFirst()>
   13d60:	e2501000 	subs	r1, r0, #0
   13d64:	0a00001b 	beq	13dd8 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0xd0>
   13d68:	e1a00004 	mov	r0, r4
   13d6c:	e1a05001 	mov	r5, r1
   13d70:	eb006f72 	bl	2fb40 <CPtrList::GetNext(TPtrListElement*)>
   13d74:	e2501000 	subs	r1, r0, #0
   13d78:	1afffffa 	bne	13d68 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x60>
   13d7c:	e1a02007 	mov	r2, r7
   13d80:	e1a01005 	mov	r1, r5
   13d84:	e1a00004 	mov	r0, r4
   13d88:	eb006fd4 	bl	2fce0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   13d8c:	e596300c 	ldr	r3, [r6, #12]
   13d90:	e3530000 	cmp	r3, #0
   13d94:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   13d98:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   13d9c:	ea008f22 	b	37a2c <LeaveCritical>
   13da0:	eb008ef6 	bl	37980 <EnterCritical>
   13da4:	eaffffea 	b	13d54 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x4c>
   13da8:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13dac:	e3401003 	movt	r1, #3
   13db0:	e30b04c4 	movw	r0, #46276	@ 0xb4c4
   13db4:	e3400003 	movt	r0, #3
   13db8:	e3a020d4 	mov	r2, #212	@ 0xd4
   13dbc:	eb006006 	bl	2bddc <assertion_failed>
   13dc0:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13dc4:	e3401003 	movt	r1, #3
   13dc8:	e30b0500 	movw	r0, #46336	@ 0xb500
   13dcc:	e3400003 	movt	r0, #3
   13dd0:	e3a020d5 	mov	r2, #213	@ 0xd5
   13dd4:	eb006000 	bl	2bddc <assertion_failed>
   13dd8:	e1a05001 	mov	r5, r1
   13ddc:	eaffffe6 	b	13d7c <CUSBHostController::PortStatusChanged(CUSBStandardHub*)+0x74>

00013de0 <CUSBHostController::Get()>:
   13de0:	e3043088 	movw	r3, #16520	@ 0x4088
   13de4:	e3403004 	movt	r3, #4
   13de8:	e5930004 	ldr	r0, [r3, #4]
   13dec:	e3500000 	cmp	r0, #0
   13df0:	112fff1e 	bxne	lr
   13df4:	e30b14ac 	movw	r1, #46252	@ 0xb4ac
   13df8:	e3401003 	movt	r1, #3
   13dfc:	e30b051c 	movw	r0, #46364	@ 0xb51c
   13e00:	e3400003 	movt	r0, #3
   13e04:	e3a020ed 	mov	r2, #237	@ 0xed
   13e08:	e92d4010 	push	{r4, lr}
   13e0c:	eb005ff2 	bl	2bddc <assertion_failed>

00013e10 <proxy_handler(unsigned char, unsigned char const*, void*)>:
   13e10:	e12fff12 	bx	r2

00013e14 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   13e14:	e5903550 	ldr	r3, [r0, #1360]	@ 0x550
   13e18:	e92d4070 	push	{r4, r5, r6, lr}
   13e1c:	e3a06000 	mov	r6, #0
   13e20:	e59f5050 	ldr	r5, [pc, #80]	@ 13e78 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x64>
   13e24:	e1a04000 	mov	r4, r0
   13e28:	e1530006 	cmp	r3, r6
   13e2c:	e5805000 	str	r5, [r0]
   13e30:	e580653c 	str	r6, [r0, #1340]	@ 0x53c
   13e34:	1a000005 	bne	13e50 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x3c>
   13e38:	e2840024 	add	r0, r4, #36	@ 0x24
   13e3c:	eb002a84 	bl	1e854 <CKeyboardBehaviour::~CKeyboardBehaviour()>
   13e40:	e1a00004 	mov	r0, r4
   13e44:	ebfffcb1 	bl	13110 <CUSBHIDDevice::~CUSBHIDDevice()>
   13e48:	e1a00004 	mov	r0, r4
   13e4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   13e50:	eb006375 	bl	2cc2c <CDeviceNameService::Get()>
   13e54:	e2851030 	add	r1, r5, #48	@ 0x30
   13e58:	e5942550 	ldr	r2, [r4, #1360]	@ 0x550
   13e5c:	e1a03006 	mov	r3, r6
   13e60:	eb006397 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   13e64:	e5941550 	ldr	r1, [r4, #1360]	@ 0x550
   13e68:	e3040090 	movw	r0, #16528	@ 0x4090
   13e6c:	e3400004 	movt	r0, #4
   13e70:	eb008a2b 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   13e74:	eaffffef 	b	13e38 <CUSBKeyboardDevice::~CUSBKeyboardDevice()+0x24>
   13e78:	0003f0d0 	.word	0x0003f0d0

00013e7c <CUSBKeyboardDevice::~CUSBKeyboardDevice()>:
   13e7c:	e92d4010 	push	{r4, lr}
   13e80:	e1a04000 	mov	r4, r0
   13e84:	ebffffe2 	bl	13e14 <CUSBKeyboardDevice::~CUSBKeyboardDevice()>
   13e88:	e1a00004 	mov	r0, r4
   13e8c:	e3001554 	movw	r1, #1364	@ 0x554
   13e90:	eb0088bb 	bl	36184 <operator delete(void*, unsigned int)>
   13e94:	e1a00004 	mov	r0, r4
   13e98:	e8bd8010 	pop	{r4, pc}

00013e9c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)>:
   13e9c:	e2522008 	subs	r2, r2, #8
   13ea0:	13a02001 	movne	r2, #1
   13ea4:	e3510000 	cmp	r1, #0
   13ea8:	03822001 	orreq	r2, r2, #1
   13eac:	e3520000 	cmp	r2, #0
   13eb0:	112fff1e 	bxne	lr
   13eb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13eb8:	e1a08001 	mov	r8, r1
   13ebc:	e590353c 	ldr	r3, [r0, #1340]	@ 0x53c
   13ec0:	e1a06000 	mov	r6, r0
   13ec4:	e1a07001 	mov	r7, r1
   13ec8:	e4d80002 	ldrb	r0, [r8], #2
   13ecc:	e3530000 	cmp	r3, #0
   13ed0:	0a000006 	beq	13ef0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x54>
   13ed4:	e5962540 	ldr	r2, [r6, #1344]	@ 0x540
   13ed8:	e1a01008 	mov	r1, r8
   13edc:	e12fff33 	blx	r3
   13ee0:	e5d63544 	ldrb	r3, [r6, #1348]	@ 0x544
   13ee4:	e3530000 	cmp	r3, #0
   13ee8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13eec:	e5d70000 	ldrb	r0, [r7]
   13ef0:	e3a04080 	mov	r4, #128	@ 0x80
   13ef4:	e3a05000 	mov	r5, #0
   13ef8:	e3a0a001 	mov	sl, #1
   13efc:	e2869024 	add	r9, r6, #36	@ 0x24
   13f00:	ea000007 	b	13f24 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x88>
   13f04:	e3530000 	cmp	r3, #0
   13f08:	1a000010 	bne	13f50 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xb4>
   13f0c:	e2844001 	add	r4, r4, #1
   13f10:	e2855001 	add	r5, r5, #1
   13f14:	e3550008 	cmp	r5, #8
   13f18:	e6ef4074 	uxtb	r4, r4
   13f1c:	0a00000f 	beq	13f60 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xc4>
   13f20:	e5d70000 	ldrb	r0, [r7]
   13f24:	e5d63545 	ldrb	r3, [r6, #1349]	@ 0x545
   13f28:	e1a0251a 	lsl	r2, sl, r5
   13f2c:	e1100002 	tst	r0, r2
   13f30:	e0033002 	and	r3, r3, r2
   13f34:	0afffff2 	beq	13f04 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x68>
   13f38:	e3530000 	cmp	r3, #0
   13f3c:	1afffff2 	bne	13f0c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x70>
   13f40:	e1a01004 	mov	r1, r4
   13f44:	e1a00009 	mov	r0, r9
   13f48:	eb002acb 	bl	1ea7c <CKeyboardBehaviour::KeyPressed(unsigned char)>
   13f4c:	eaffffee 	b	13f0c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x70>
   13f50:	e1a01004 	mov	r1, r4
   13f54:	e1a00009 	mov	r0, r9
   13f58:	eb002ad7 	bl	1eabc <CKeyboardBehaviour::KeyReleased(unsigned char)>
   13f5c:	eaffffea 	b	13f0c <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x70>
   13f60:	e2864d15 	add	r4, r6, #1344	@ 0x540
   13f64:	e2875008 	add	r5, r7, #8
   13f68:	e1a09004 	mov	r9, r4
   13f6c:	e2844006 	add	r4, r4, #6
   13f70:	e289900c 	add	r9, r9, #12
   13f74:	ea000001 	b	13f80 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   13f78:	e1540009 	cmp	r4, r9
   13f7c:	0a000005 	beq	13f98 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xfc>
   13f80:	e5f41001 	ldrb	r1, [r4, #1]!
   13f84:	e3510000 	cmp	r1, #0
   13f88:	11a03008 	movne	r3, r8
   13f8c:	1a000018 	bne	13ff4 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x158>
   13f90:	e1540009 	cmp	r4, r9
   13f94:	1afffff9 	bne	13f80 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xe4>
   13f98:	e2865d15 	add	r5, r6, #1344	@ 0x540
   13f9c:	e2874001 	add	r4, r7, #1
   13fa0:	e2878007 	add	r8, r7, #7
   13fa4:	e285500d 	add	r5, r5, #13
   13fa8:	e3009547 	movw	r9, #1351	@ 0x547
   13fac:	ea000001 	b	13fb8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x11c>
   13fb0:	e1580004 	cmp	r8, r4
   13fb4:	0a000005 	beq	13fd0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x134>
   13fb8:	e5f41001 	ldrb	r1, [r4, #1]!
   13fbc:	e3510000 	cmp	r1, #0
   13fc0:	10863009 	addne	r3, r6, r9
   13fc4:	1a000012 	bne	14014 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x178>
   13fc8:	e1580004 	cmp	r8, r4
   13fcc:	1afffff9 	bne	13fb8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x11c>
   13fd0:	e2860d15 	add	r0, r6, #1344	@ 0x540
   13fd4:	e1a01007 	mov	r1, r7
   13fd8:	e3a02008 	mov	r2, #8
   13fdc:	e2800005 	add	r0, r0, #5
   13fe0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13fe4:	ea008646 	b	35904 <memcpy>
   13fe8:	e4d32001 	ldrb	r2, [r3], #1
   13fec:	e1520001 	cmp	r2, r1
   13ff0:	0affffe0 	beq	13f78 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
   13ff4:	e1550003 	cmp	r5, r3
   13ff8:	1afffffa 	bne	13fe8 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x14c>
   13ffc:	e2860024 	add	r0, r6, #36	@ 0x24
   14000:	eb002aad 	bl	1eabc <CKeyboardBehaviour::KeyReleased(unsigned char)>
   14004:	eaffffdb 	b	13f78 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0xdc>
   14008:	e4d32001 	ldrb	r2, [r3], #1
   1400c:	e1520001 	cmp	r2, r1
   14010:	0affffe6 	beq	13fb0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x114>
   14014:	e1550003 	cmp	r5, r3
   14018:	1afffffa 	bne	14008 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x16c>
   1401c:	e2860024 	add	r0, r6, #36	@ 0x24
   14020:	eb002a95 	bl	1ea7c <CKeyboardBehaviour::KeyPressed(unsigned char)>
   14024:	eaffffe1 	b	13fb0 <CUSBKeyboardDevice::ReportHandler(unsigned char const*, unsigned int)+0x114>

00014028 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)>:
   14028:	e92d4010 	push	{r4, lr}
   1402c:	e3a02008 	mov	r2, #8
   14030:	e1a04000 	mov	r4, r0
   14034:	ebfffc1f 	bl	130b8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   14038:	e1a00004 	mov	r0, r4
   1403c:	e59f3034 	ldr	r3, [pc, #52]	@ 14078 <CUSBKeyboardDevice::CUSBKeyboardDevice(CUSBFunction*)+0x50>
   14040:	e4803024 	str	r3, [r0], #36	@ 0x24
   14044:	eb0029f6 	bl	1e824 <CKeyboardBehaviour::CKeyboardBehaviour()>
   14048:	e2840d15 	add	r0, r4, #1344	@ 0x540
   1404c:	e3a01000 	mov	r1, #0
   14050:	e3a02008 	mov	r2, #8
   14054:	e584153c 	str	r1, [r4, #1340]	@ 0x53c
   14058:	e2800005 	add	r0, r0, #5
   1405c:	e5841540 	str	r1, [r4, #1344]	@ 0x540
   14060:	e5c41544 	strb	r1, [r4, #1348]	@ 0x544
   14064:	e5c4154d 	strb	r1, [r4, #1357]	@ 0x54d
   14068:	e5841550 	str	r1, [r4, #1360]	@ 0x550
   1406c:	eb00860d 	bl	358a8 <memset>
   14070:	e1a00004 	mov	r0, r4
   14074:	e8bd8010 	pop	{r4, pc}
   14078:	0003f0d0 	.word	0x0003f0d0

0001407c <CUSBKeyboardDevice::RegisterKeyPressedHandler(void (*)(char const*))>:
   1407c:	e2800024 	add	r0, r0, #36	@ 0x24
   14080:	ea0029fd 	b	1e87c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>

00014084 <CUSBKeyboardDevice::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   14084:	e2800024 	add	r0, r0, #36	@ 0x24
   14088:	ea002a06 	b	1e8a8 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>

0001408c <CUSBKeyboardDevice::RegisterShutdownHandler(void (*)())>:
   1408c:	e2800024 	add	r0, r0, #36	@ 0x24
   14090:	ea002a0f 	b	1e8d4 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>

00014094 <CUSBKeyboardDevice::GetLEDStatus() const>:
   14094:	e92d4010 	push	{r4, lr}
   14098:	e2800024 	add	r0, r0, #36	@ 0x24
   1409c:	eb002a17 	bl	1e900 <CKeyboardBehaviour::GetLEDStatus() const>
   140a0:	e1a03000 	mov	r3, r0
   140a4:	e2000001 	and	r0, r0, #1
   140a8:	e3130002 	tst	r3, #2
   140ac:	13800002 	orrne	r0, r0, #2
   140b0:	e3130004 	tst	r3, #4
   140b4:	13800004 	orrne	r0, r0, #4
   140b8:	e8bd8010 	pop	{r4, pc}

000140bc <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*, void*), bool, void*)>:
   140bc:	e3510000 	cmp	r1, #0
   140c0:	0a000003 	beq	140d4 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*, void*), bool, void*)+0x18>
   140c4:	e580153c 	str	r1, [r0, #1340]	@ 0x53c
   140c8:	e5803540 	str	r3, [r0, #1344]	@ 0x540
   140cc:	e5c02544 	strb	r2, [r0, #1348]	@ 0x544
   140d0:	e12fff1e 	bx	lr
   140d4:	e30b152c 	movw	r1, #46380	@ 0xb52c
   140d8:	e3401003 	movt	r1, #3
   140dc:	e30b053c 	movw	r0, #46396	@ 0xb53c
   140e0:	e3400003 	movt	r0, #3
   140e4:	e3a02087 	mov	r2, #135	@ 0x87
   140e8:	e92d4010 	push	{r4, lr}
   140ec:	eb005f3a 	bl	2bddc <assertion_failed>

000140f0 <CUSBKeyboardDevice::RegisterKeyStatusHandlerRaw(void (*)(unsigned char, unsigned char const*), bool)>:
   140f0:	e3033e10 	movw	r3, #15888	@ 0x3e10
   140f4:	e3403001 	movt	r3, #1
   140f8:	e5801540 	str	r1, [r0, #1344]	@ 0x540
   140fc:	e580353c 	str	r3, [r0, #1340]	@ 0x53c
   14100:	e5c02544 	strb	r2, [r0, #1348]	@ 0x544
   14104:	e12fff1e 	bx	lr

00014108 <CUSBKeyboardDevice::UnregisterKeyStatusHandlerRaw()>:
   14108:	e3a03000 	mov	r3, #0
   1410c:	e580353c 	str	r3, [r0, #1340]	@ 0x53c
   14110:	e5803540 	str	r3, [r0, #1344]	@ 0x540
   14114:	e12fff1e 	bx	lr

00014118 <CUSBKeyboardDevice::SetLEDs(unsigned char)>:
   14118:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   1411c:	e92d4070 	push	{r4, r5, r6, lr}
   14120:	e1a05000 	mov	r5, r0
   14124:	e24dd088 	sub	sp, sp, #136	@ 0x88
   14128:	e28d404f 	add	r4, sp, #79	@ 0x4f
   1412c:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   14130:	f4440a2f 	vst1.8	{d16-d17}, [r4 :128]
   14134:	edc40b04 	vstr	d16, [r4, #16]
   14138:	edc40b06 	vstr	d16, [r4, #24]
   1413c:	edc40b08 	vstr	d16, [r4, #32]
   14140:	edc40b0a 	vstr	d16, [r4, #40]	@ 0x28
   14144:	edc40b0c 	vstr	d16, [r4, #48]	@ 0x30
   14148:	edc40b0e 	vstr	d16, [r4, #56]	@ 0x38
   1414c:	e5c41000 	strb	r1, [r4]
   14150:	ebfff133 	bl	10624 <CUSBFunction::GetHost() const>
   14154:	e1a06000 	mov	r6, r0
   14158:	e1a00005 	mov	r0, r5
   1415c:	ebfff125 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   14160:	e1a01000 	mov	r1, r0
   14164:	e1a00005 	mov	r0, r5
   14168:	e1a05001 	mov	r5, r1
   1416c:	ebfff18b 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   14170:	e3a0cc02 	mov	ip, #512	@ 0x200
   14174:	e1a03000 	mov	r3, r0
   14178:	e3a02001 	mov	r2, #1
   1417c:	e98d0018 	stmib	sp, {r3, r4}
   14180:	e1a01005 	mov	r1, r5
   14184:	e58d200c 	str	r2, [sp, #12]
   14188:	e1a00006 	mov	r0, r6
   1418c:	e3a03009 	mov	r3, #9
   14190:	e3a02021 	mov	r2, #33	@ 0x21
   14194:	e58dc000 	str	ip, [sp]
   14198:	ebfffe20 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1419c:	e1e00000 	mvn	r0, r0
   141a0:	e1a00fa0 	lsr	r0, r0, #31
   141a4:	e28dd088 	add	sp, sp, #136	@ 0x88
   141a8:	e8bd8070 	pop	{r4, r5, r6, pc}

000141ac <CUSBKeyboardDevice::Configure()>:
   141ac:	e92d4030 	push	{r4, r5, lr}
   141b0:	e3a01000 	mov	r1, #0
   141b4:	e1a04000 	mov	r4, r0
   141b8:	e24dd00c 	sub	sp, sp, #12
   141bc:	ebfffbfe 	bl	131bc <CUSBHIDDevice::ConfigureHID(unsigned int)>
   141c0:	e2505000 	subs	r5, r0, #0
   141c4:	0a000013 	beq	14218 <CUSBKeyboardDevice::Configure()+0x6c>
   141c8:	e5d4154d 	ldrb	r1, [r4, #1357]	@ 0x54d
   141cc:	e1a00004 	mov	r0, r4
   141d0:	ebffffd0 	bl	14118 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   141d4:	e59f2060 	ldr	r2, [pc, #96]	@ 1423c <CUSBKeyboardDevice::Configure()+0x90>
   141d8:	e3a01001 	mov	r1, #1
   141dc:	e3040090 	movw	r0, #16528	@ 0x4090
   141e0:	e3400004 	movt	r0, #4
   141e4:	eb00891c 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   141e8:	e5840550 	str	r0, [r4, #1360]	@ 0x550
   141ec:	eb00628e 	bl	2cc2c <CDeviceNameService::Get()>
   141f0:	e5942550 	ldr	r2, [r4, #1360]	@ 0x550
   141f4:	e3a0c000 	mov	ip, #0
   141f8:	e59f1040 	ldr	r1, [pc, #64]	@ 14240 <CUSBKeyboardDevice::Configure()+0x94>
   141fc:	e1a03004 	mov	r3, r4
   14200:	e58dc000 	str	ip, [sp]
   14204:	eb006294 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   14208:	e1a00004 	mov	r0, r4
   1420c:	e28dd00c 	add	sp, sp, #12
   14210:	e8bd4030 	pop	{r4, r5, lr}
   14214:	eafffd00 	b	1361c <CUSBHIDDevice::StartRequest()>
   14218:	eb00696a 	bl	2e7c8 <CLogger::Get()>
   1421c:	e59f1018 	ldr	r1, [pc, #24]	@ 1423c <CUSBKeyboardDevice::Configure()+0x90>
   14220:	e3a02001 	mov	r2, #1
   14224:	e30b3558 	movw	r3, #46424	@ 0xb558
   14228:	e3403003 	movt	r3, #3
   1422c:	eb006b2e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14230:	e1a00005 	mov	r0, r5
   14234:	e28dd00c 	add	sp, sp, #12
   14238:	e8bd8030 	pop	{r4, r5, pc}
   1423c:	0003f108 	.word	0x0003f108
   14240:	0003f100 	.word	0x0003f100

00014244 <CUSBKeyboardDevice::UpdateLEDs()>:
   14244:	e590353c 	ldr	r3, [r0, #1340]	@ 0x53c
   14248:	e92d4010 	push	{r4, lr}
   1424c:	e1a04000 	mov	r4, r0
   14250:	e3530000 	cmp	r3, #0
   14254:	0a000002 	beq	14264 <CUSBKeyboardDevice::UpdateLEDs()+0x20>
   14258:	e5d03544 	ldrb	r3, [r0, #1348]	@ 0x544
   1425c:	e3530000 	cmp	r3, #0
   14260:	08bd8010 	popeq	{r4, pc}
   14264:	e2840024 	add	r0, r4, #36	@ 0x24
   14268:	eb0029a4 	bl	1e900 <CKeyboardBehaviour::GetLEDStatus() const>
   1426c:	e2001001 	and	r1, r0, #1
   14270:	e3100002 	tst	r0, #2
   14274:	e5d4354d 	ldrb	r3, [r4, #1357]	@ 0x54d
   14278:	13811002 	orrne	r1, r1, #2
   1427c:	e3100004 	tst	r0, #4
   14280:	13811004 	orrne	r1, r1, #4
   14284:	e1530001 	cmp	r3, r1
   14288:	08bd8010 	popeq	{r4, pc}
   1428c:	e1a00004 	mov	r0, r4
   14290:	e5c4154d 	strb	r1, [r4, #1357]	@ 0x54d
   14294:	ebffff9f 	bl	14118 <CUSBKeyboardDevice::SetLEDs(unsigned char)>
   14298:	e3500000 	cmp	r0, #0
   1429c:	18bd8010 	popne	{r4, pc}
   142a0:	eb006948 	bl	2e7c8 <CLogger::Get()>
   142a4:	e30b3574 	movw	r3, #46452	@ 0xb574
   142a8:	e3403003 	movt	r3, #3
   142ac:	e59f1008 	ldr	r1, [pc, #8]	@ 142bc <CUSBKeyboardDevice::UpdateLEDs()+0x78>
   142b0:	e8bd4010 	pop	{r4, lr}
   142b4:	e3a02001 	mov	r2, #1
   142b8:	ea006b0b 	b	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   142bc:	0003f108 	.word	0x0003f108

000142c0 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)>:
   142c0:	e0802002 	add	r2, r0, r2
   142c4:	ea000002 	b	142d4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x14>
   142c8:	e4d03001 	ldrb	r3, [r0], #1
   142cc:	e1530001 	cmp	r3, r1
   142d0:	0a000003 	beq	142e4 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x24>
   142d4:	e1500002 	cmp	r0, r2
   142d8:	1afffffa 	bne	142c8 <CUSBKeyboardDevice::FindByte(unsigned char const*, unsigned char, unsigned int)+0x8>
   142dc:	e3a00000 	mov	r0, #0
   142e0:	e12fff1e 	bx	lr
   142e4:	e3a00001 	mov	r0, #1
   142e8:	e12fff1e 	bx	lr

000142ec <_GLOBAL__sub_I__ZN18CUSBKeyboardDevice18s_DeviceNumberPoolE>:
   142ec:	e92d4010 	push	{r4, lr}
   142f0:	e3044090 	movw	r4, #16528	@ 0x4090
   142f4:	e3404004 	movt	r4, #4
   142f8:	e3a0203f 	mov	r2, #63	@ 0x3f
   142fc:	e3a01001 	mov	r1, #1
   14300:	e1a00004 	mov	r0, r4
   14304:	eb0088bf 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   14308:	e1a00004 	mov	r0, r4
   1430c:	e3042180 	movw	r2, #16768	@ 0x4180
   14310:	e3402004 	movt	r2, #4
   14314:	e3061658 	movw	r1, #26200	@ 0x6658
   14318:	e3401003 	movt	r1, #3
   1431c:	e8bd4010 	pop	{r4, lr}
   14320:	ea007f8b 	b	34154 <__aeabi_atexit>

00014324 <CUSBBulkOnlyMassStorageDevice::Seek(unsigned long long)>:
   14324:	e1a0c000 	mov	ip, r0
   14328:	e1a01003 	mov	r1, r3
   1432c:	e1a00002 	mov	r0, r2
   14330:	e1cc22f8 	strd	r2, [ip, #40]	@ 0x28
   14334:	e12fff1e 	bx	lr

00014338 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   14338:	e5903034 	ldr	r3, [r0, #52]	@ 0x34
   1433c:	e92d4070 	push	{r4, r5, r6, lr}
   14340:	e1a04000 	mov	r4, r0
   14344:	e59f50c0 	ldr	r5, [pc, #192]	@ 1440c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xd4>
   14348:	e3530000 	cmp	r3, #0
   1434c:	e5805000 	str	r5, [r0]
   14350:	1a000021 	bne	143dc <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0xa4>
   14354:	e5945030 	ldr	r5, [r4, #48]	@ 0x30
   14358:	e3550000 	cmp	r5, #0
   1435c:	0a000004 	beq	14374 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x3c>
   14360:	e1a00005 	mov	r0, r5
   14364:	eb002dff 	bl	1fb68 <CPartitionManager::~CPartitionManager()>
   14368:	e3a01024 	mov	r1, #36	@ 0x24
   1436c:	e1a00005 	mov	r0, r5
   14370:	eb008783 	bl	36184 <operator delete(void*, unsigned int)>
   14374:	e5945018 	ldr	r5, [r4, #24]
   14378:	e3a03000 	mov	r3, #0
   1437c:	e5843030 	str	r3, [r4, #48]	@ 0x30
   14380:	e1550003 	cmp	r5, r3
   14384:	0a000004 	beq	1439c <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x64>
   14388:	e1a00005 	mov	r0, r5
   1438c:	ebffef17 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   14390:	e3a01014 	mov	r1, #20
   14394:	e1a00005 	mov	r0, r5
   14398:	eb008779 	bl	36184 <operator delete(void*, unsigned int)>
   1439c:	e5945014 	ldr	r5, [r4, #20]
   143a0:	e3a03000 	mov	r3, #0
   143a4:	e5843018 	str	r3, [r4, #24]
   143a8:	e1550003 	cmp	r5, r3
   143ac:	0a000004 	beq	143c4 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x8c>
   143b0:	e1a00005 	mov	r0, r5
   143b4:	ebffef0d 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   143b8:	e3a01014 	mov	r1, #20
   143bc:	e1a00005 	mov	r0, r5
   143c0:	eb00876f 	bl	36184 <operator delete(void*, unsigned int)>
   143c4:	e3a03000 	mov	r3, #0
   143c8:	e1a00004 	mov	r0, r4
   143cc:	e5843014 	str	r3, [r4, #20]
   143d0:	ebffef71 	bl	1019c <CUSBFunction::~CUSBFunction()>
   143d4:	e1a00004 	mov	r0, r4
   143d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   143dc:	eb006212 	bl	2cc2c <CDeviceNameService::Get()>
   143e0:	e3a03001 	mov	r3, #1
   143e4:	e5942034 	ldr	r2, [r4, #52]	@ 0x34
   143e8:	e285102c 	add	r1, r5, #44	@ 0x2c
   143ec:	eb006234 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   143f0:	e5941034 	ldr	r1, [r4, #52]	@ 0x34
   143f4:	e30400a0 	movw	r0, #16544	@ 0x40a0
   143f8:	e3400004 	movt	r0, #4
   143fc:	eb0088c8 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   14400:	e3a03000 	mov	r3, #0
   14404:	e5843034 	str	r3, [r4, #52]	@ 0x34
   14408:	eaffffd1 	b	14354 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()+0x1c>
   1440c:	0003f118 	.word	0x0003f118

00014410 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>:
   14410:	e92d4010 	push	{r4, lr}
   14414:	e1a04000 	mov	r4, r0
   14418:	ebffffc6 	bl	14338 <CUSBBulkOnlyMassStorageDevice::~CUSBBulkOnlyMassStorageDevice()>
   1441c:	e1a00004 	mov	r0, r4
   14420:	e3a01038 	mov	r1, #56	@ 0x38
   14424:	eb008756 	bl	36184 <operator delete(void*, unsigned int)>
   14428:	e1a00004 	mov	r0, r4
   1442c:	e8bd8010 	pop	{r4, pc}

00014430 <CUSBBulkOnlyMassStorageDevice::GetSize() const>:
   14430:	e5901020 	ldr	r1, [r0, #32]
   14434:	e92d4010 	push	{r4, lr}
   14438:	e3510000 	cmp	r1, #0
   1443c:	0a000004 	beq	14454 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x24>
   14440:	e3710001 	cmn	r1, #1
   14444:	0a000006 	beq	14464 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x34>
   14448:	e1a00481 	lsl	r0, r1, #9
   1444c:	e1a01ba1 	lsr	r1, r1, #23
   14450:	e8bd8010 	pop	{r4, pc}
   14454:	e59f1018 	ldr	r1, [pc, #24]	@ 14474 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x44>
   14458:	e3a02f79 	mov	r2, #484	@ 0x1e4
   1445c:	e2810014 	add	r0, r1, #20
   14460:	eb005e5d 	bl	2bddc <assertion_failed>
   14464:	e59f1008 	ldr	r1, [pc, #8]	@ 14474 <CUSBBulkOnlyMassStorageDevice::GetSize() const+0x44>
   14468:	e30021e5 	movw	r2, #485	@ 0x1e5
   1446c:	e2810028 	add	r0, r1, #40	@ 0x28
   14470:	eb005e59 	bl	2bddc <assertion_failed>
   14474:	0003f14c 	.word	0x0003f14c

00014478 <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)>:
   14478:	e92d4010 	push	{r4, lr}
   1447c:	e1a04000 	mov	r4, r0
   14480:	ebffefee 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   14484:	e1a03004 	mov	r3, r4
   14488:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   1448c:	f2c01010 	vmov.i32	d17, #0	@ 0x00000000
   14490:	e59f0024 	ldr	r0, [pc, #36]	@ 144bc <CUSBBulkOnlyMassStorageDevice::CUSBBulkOnlyMassStorageDevice(CUSBFunction*)+0x44>
   14494:	e284101c 	add	r1, r4, #28
   14498:	e3a02000 	mov	r2, #0
   1449c:	e4830014 	str	r0, [r3], #20
   144a0:	e1a00004 	mov	r0, r4
   144a4:	f443078f 	vst1.32	{d16}, [r3]
   144a8:	f441078f 	vst1.32	{d16}, [r1]
   144ac:	e5842030 	str	r2, [r4, #48]	@ 0x30
   144b0:	e5842034 	str	r2, [r4, #52]	@ 0x34
   144b4:	edc41b0a 	vstr	d17, [r4, #40]	@ 0x28
   144b8:	e8bd8010 	pop	{r4, pc}
   144bc:	0003f118 	.word	0x0003f118

000144c0 <CUSBBulkOnlyMassStorageDevice::GetCapacity() const>:
   144c0:	e5900020 	ldr	r0, [r0, #32]
   144c4:	e12fff1e 	bx	lr

000144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>:
   144c8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144cc:	e2518000 	subs	r8, r1, #0
   144d0:	e24dd0cc 	sub	sp, sp, #204	@ 0xcc
   144d4:	e59d90f0 	ldr	r9, [sp, #240]	@ 0xf0
   144d8:	e5dda0f4 	ldrb	sl, [sp, #244]	@ 0xf4
   144dc:	0a0000ac 	beq	14794 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2cc>
   144e0:	e1a07003 	mov	r7, r3
   144e4:	e2423006 	sub	r3, r2, #6
   144e8:	e1a06002 	mov	r6, r2
   144ec:	e353000a 	cmp	r3, #10
   144f0:	8a0000b0 	bhi	147b8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2f0>
   144f4:	e2573000 	subs	r3, r7, #0
   144f8:	13a03001 	movne	r3, #1
   144fc:	e3590000 	cmp	r9, #0
   14500:	03833001 	orreq	r3, r3, #1
   14504:	e3530000 	cmp	r3, #0
   14508:	0a0000ae 	beq	147c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x300>
   1450c:	e28d404f 	add	r4, sp, #79	@ 0x4f
   14510:	e1a05000 	mov	r5, r0
   14514:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   14518:	e3a0201f 	mov	r2, #31
   1451c:	e284b040 	add	fp, r4, #64	@ 0x40
   14520:	e3a01000 	mov	r1, #0
   14524:	e1a0000b 	mov	r0, fp
   14528:	eb0084de 	bl	358a8 <memset>
   1452c:	e595301c 	ldr	r3, [r5, #28]
   14530:	e1a02006 	mov	r2, r6
   14534:	e1a01008 	mov	r1, r8
   14538:	e2833001 	add	r3, r3, #1
   1453c:	e585301c 	str	r3, [r5, #28]
   14540:	e5843044 	str	r3, [r4, #68]	@ 0x44
   14544:	e284004f 	add	r0, r4, #79	@ 0x4f
   14548:	e5d4304e 	ldrb	r3, [r4, #78]	@ 0x4e
   1454c:	e5849048 	str	r9, [r4, #72]	@ 0x48
   14550:	e7c43016 	bfi	r3, r6, #0, #5
   14554:	e5c4304e 	strb	r3, [r4, #78]	@ 0x4e
   14558:	e5d4304d 	ldrb	r3, [r4, #77]	@ 0x4d
   1455c:	e3c3300f 	bic	r3, r3, #15
   14560:	e5c4304d 	strb	r3, [r4, #77]	@ 0x4d
   14564:	e1a0338a 	lsl	r3, sl, #7
   14568:	e5c4304c 	strb	r3, [r4, #76]	@ 0x4c
   1456c:	e3053355 	movw	r3, #21333	@ 0x5355
   14570:	e3443342 	movt	r3, #17218	@ 0x4342
   14574:	e5843040 	str	r3, [r4, #64]	@ 0x40
   14578:	eb0084e1 	bl	35904 <memcpy>
   1457c:	e1a00005 	mov	r0, r5
   14580:	ebfff027 	bl	10624 <CUSBFunction::GetHost() const>
   14584:	e2506000 	subs	r6, r0, #0
   14588:	0a000092 	beq	147d8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x310>
   1458c:	e3a08000 	mov	r8, #0
   14590:	e58d8000 	str	r8, [sp]
   14594:	e1a0200b 	mov	r2, fp
   14598:	e3a0301f 	mov	r3, #31
   1459c:	e5951018 	ldr	r1, [r5, #24]
   145a0:	ebfffd85 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   145a4:	e1500008 	cmp	r0, r8
   145a8:	ba0000aa 	blt	14858 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x390>
   145ac:	e3590000 	cmp	r9, #0
   145b0:	0a00001b 	beq	14624 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x15c>
   145b4:	e3570000 	cmp	r7, #0
   145b8:	0a00008a 	beq	147e8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x320>
   145bc:	e1873009 	orr	r3, r7, r9
   145c0:	e213303f 	ands	r3, r3, #63	@ 0x3f
   145c4:	0a000054 	beq	1471c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x254>
   145c8:	e1a01008 	mov	r1, r8
   145cc:	e1a00009 	mov	r0, r9
   145d0:	eb0086c5 	bl	360ec <operator new[](unsigned int, int)>
   145d4:	e35a0000 	cmp	sl, #0
   145d8:	e1a0b000 	mov	fp, r0
   145dc:	0a00005e 	beq	1475c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x294>
   145e0:	e58d8000 	str	r8, [sp]
   145e4:	e1a02000 	mov	r2, r0
   145e8:	e1a03009 	mov	r3, r9
   145ec:	e1a00006 	mov	r0, r6
   145f0:	e5951014 	ldr	r1, [r5, #20]
   145f4:	ebfffd70 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   145f8:	e2508000 	subs	r8, r0, #0
   145fc:	aa000068 	bge	147a4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2dc>
   14600:	eb006870 	bl	2e7c8 <CLogger::Get()>
   14604:	e59f327c 	ldr	r3, [pc, #636]	@ 14888 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c0>
   14608:	e3a02001 	mov	r2, #1
   1460c:	e2431018 	sub	r1, r3, #24
   14610:	eb006a35 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14614:	e1a0000b 	mov	r0, fp
   14618:	eb0086d3 	bl	3616c <operator delete[](void*)>
   1461c:	e3e08000 	mvn	r8, #0
   14620:	ea00003a 	b	14710 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x248>
   14624:	e1a08009 	mov	r8, r9
   14628:	e3a07000 	mov	r7, #0
   1462c:	e58d7000 	str	r7, [sp]
   14630:	e3a0300d 	mov	r3, #13
   14634:	e1a02004 	mov	r2, r4
   14638:	e5951014 	ldr	r1, [r5, #20]
   1463c:	e1a00006 	mov	r0, r6
   14640:	ebfffd5d 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   14644:	e350000d 	cmp	r0, #13
   14648:	0a000021 	beq	146d4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x20c>
   1464c:	eb00685d 	bl	2e7c8 <CLogger::Get()>
   14650:	e59f3234 	ldr	r3, [pc, #564]	@ 1488c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c4>
   14654:	e3a02001 	mov	r2, #1
   14658:	e2431030 	sub	r1, r3, #48	@ 0x30
   1465c:	eb006a22 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14660:	e1a00005 	mov	r0, r5
   14664:	ebffefe3 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   14668:	e1a09000 	mov	r9, r0
   1466c:	e5950014 	ldr	r0, [r5, #20]
   14670:	ebffee69 	bl	1001c <CUSBEndpoint::GetNumber() const>
   14674:	e1e00c80 	mvn	r0, r0, lsl #25
   14678:	e1a01009 	mov	r1, r9
   1467c:	e3a03001 	mov	r3, #1
   14680:	e1e00ca0 	mvn	r0, r0, lsr #25
   14684:	e3a02002 	mov	r2, #2
   14688:	e58d700c 	str	r7, [sp, #12]
   1468c:	e6ef0070 	uxtb	r0, r0
   14690:	e58d7008 	str	r7, [sp, #8]
   14694:	e58d0004 	str	r0, [sp, #4]
   14698:	e1a00006 	mov	r0, r6
   1469c:	e58d7000 	str	r7, [sp]
   146a0:	ebfffcde 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   146a4:	e1500007 	cmp	r0, r7
   146a8:	ba000070 	blt	14870 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3a8>
   146ac:	e5950014 	ldr	r0, [r5, #20]
   146b0:	ebffeea9 	bl	1015c <CUSBEndpoint::ResetPID()>
   146b4:	e58d7000 	str	r7, [sp]
   146b8:	e1a00006 	mov	r0, r6
   146bc:	e3a0300d 	mov	r3, #13
   146c0:	e5951014 	ldr	r1, [r5, #20]
   146c4:	e1a02004 	mov	r2, r4
   146c8:	ebfffd3b 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   146cc:	e350000d 	cmp	r0, #13
   146d0:	1a000054 	bne	14828 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x360>
   146d4:	e5942000 	ldr	r2, [r4]
   146d8:	e3053355 	movw	r3, #21333	@ 0x5355
   146dc:	e3453342 	movt	r3, #21314	@ 0x5342
   146e0:	e1520003 	cmp	r2, r3
   146e4:	1a000043 	bne	147f8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x330>
   146e8:	e5942004 	ldr	r2, [r4, #4]
   146ec:	e595301c 	ldr	r3, [r5, #28]
   146f0:	e1520003 	cmp	r2, r3
   146f4:	1a000045 	bne	14810 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x348>
   146f8:	e5d4300c 	ldrb	r3, [r4, #12]
   146fc:	e3530000 	cmp	r3, #0
   14700:	1affffc5 	bne	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14704:	e5943008 	ldr	r3, [r4, #8]
   14708:	e3530000 	cmp	r3, #0
   1470c:	1a00004b 	bne	14840 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x378>
   14710:	e1a00008 	mov	r0, r8
   14714:	e28dd0cc 	add	sp, sp, #204	@ 0xcc
   14718:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1471c:	e58d3000 	str	r3, [sp]
   14720:	e35a0000 	cmp	sl, #0
   14724:	e1a03009 	mov	r3, r9
   14728:	e1a02007 	mov	r2, r7
   1472c:	e1c501d4 	ldrd	r0, [r5, #20]
   14730:	11a01000 	movne	r1, r0
   14734:	e1a00006 	mov	r0, r6
   14738:	ebfffd1f 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1473c:	e2508000 	subs	r8, r0, #0
   14740:	aaffffb8 	bge	14628 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x160>
   14744:	eb00681f 	bl	2e7c8 <CLogger::Get()>
   14748:	e59f3138 	ldr	r3, [pc, #312]	@ 14888 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c0>
   1474c:	e3a02001 	mov	r2, #1
   14750:	e2431018 	sub	r1, r3, #24
   14754:	eb0069e4 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14758:	eaffffaf 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   1475c:	e1a01007 	mov	r1, r7
   14760:	e1a02009 	mov	r2, r9
   14764:	eb008466 	bl	35904 <memcpy>
   14768:	e58da000 	str	sl, [sp]
   1476c:	e1a03009 	mov	r3, r9
   14770:	e1a0200b 	mov	r2, fp
   14774:	e5951018 	ldr	r1, [r5, #24]
   14778:	e1a00006 	mov	r0, r6
   1477c:	ebfffd0e 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   14780:	e2508000 	subs	r8, r0, #0
   14784:	baffff9d 	blt	14600 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x138>
   14788:	e1a0000b 	mov	r0, fp
   1478c:	eb008676 	bl	3616c <operator delete[](void*)>
   14790:	eaffffa4 	b	14628 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x160>
   14794:	e59f10f4 	ldr	r1, [pc, #244]	@ 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   14798:	e3a02f8f 	mov	r2, #572	@ 0x23c
   1479c:	e2810044 	add	r0, r1, #68	@ 0x44
   147a0:	eb005d8d 	bl	2bddc <assertion_failed>
   147a4:	e1a02009 	mov	r2, r9
   147a8:	e1a00007 	mov	r0, r7
   147ac:	e1a0100b 	mov	r1, fp
   147b0:	eb008453 	bl	35904 <memcpy>
   147b4:	eafffff3 	b	14788 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x2c0>
   147b8:	e59f10d0 	ldr	r1, [pc, #208]	@ 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   147bc:	e300223d 	movw	r2, #573	@ 0x23d
   147c0:	e2810054 	add	r0, r1, #84	@ 0x54
   147c4:	eb005d84 	bl	2bddc <assertion_failed>
   147c8:	e59f10c0 	ldr	r1, [pc, #192]	@ 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   147cc:	e300223e 	movw	r2, #574	@ 0x23e
   147d0:	e2810078 	add	r0, r1, #120	@ 0x78
   147d4:	eb005d80 	bl	2bddc <assertion_failed>
   147d8:	e59f10b0 	ldr	r1, [pc, #176]	@ 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   147dc:	e300224e 	movw	r2, #590	@ 0x24e
   147e0:	e2810098 	add	r0, r1, #152	@ 0x98
   147e4:	eb005d7c 	bl	2bddc <assertion_failed>
   147e8:	e59f10a0 	ldr	r1, [pc, #160]	@ 14890 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3c8>
   147ec:	e300225b 	movw	r2, #603	@ 0x25b
   147f0:	e28100c0 	add	r0, r1, #192	@ 0xc0
   147f4:	eb005d78 	bl	2bddc <assertion_failed>
   147f8:	eb0067f2 	bl	2e7c8 <CLogger::Get()>
   147fc:	e59f3090 	ldr	r3, [pc, #144]	@ 14894 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3cc>
   14800:	e3a02001 	mov	r2, #1
   14804:	e2431084 	sub	r1, r3, #132	@ 0x84
   14808:	eb0069b7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1480c:	eaffff82 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14810:	eb0067ec 	bl	2e7c8 <CLogger::Get()>
   14814:	e59f307c 	ldr	r3, [pc, #124]	@ 14898 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3d0>
   14818:	e3a02001 	mov	r2, #1
   1481c:	e243109c 	sub	r1, r3, #156	@ 0x9c
   14820:	eb0069b1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14824:	eaffff7c 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14828:	eb0067e6 	bl	2e7c8 <CLogger::Get()>
   1482c:	e59f3068 	ldr	r3, [pc, #104]	@ 1489c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3d4>
   14830:	e3a02001 	mov	r2, #1
   14834:	e2431068 	sub	r1, r3, #104	@ 0x68
   14838:	eb0069ab 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1483c:	eaffff76 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14840:	eb0067e0 	bl	2e7c8 <CLogger::Get()>
   14844:	e59f3054 	ldr	r3, [pc, #84]	@ 148a0 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3d8>
   14848:	e3a02001 	mov	r2, #1
   1484c:	e24310b0 	sub	r1, r3, #176	@ 0xb0
   14850:	eb0069a5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14854:	eaffff70 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14858:	eb0067da 	bl	2e7c8 <CLogger::Get()>
   1485c:	e59f3040 	ldr	r3, [pc, #64]	@ 148a4 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3dc>
   14860:	e3a02001 	mov	r2, #1
   14864:	e2831014 	add	r1, r3, #20
   14868:	eb00699f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1486c:	eaffff6a 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14870:	eb0067d4 	bl	2e7c8 <CLogger::Get()>
   14874:	e59f302c 	ldr	r3, [pc, #44]	@ 148a8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x3e0>
   14878:	e3a02004 	mov	r2, #4
   1487c:	e2431044 	sub	r1, r3, #68	@ 0x44
   14880:	eb006999 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14884:	eaffff64 	b	1461c <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)+0x154>
   14888:	0003f21c 	.word	0x0003f21c
   1488c:	0003f234 	.word	0x0003f234
   14890:	0003f14c 	.word	0x0003f14c
   14894:	0003f288 	.word	0x0003f288
   14898:	0003f2a0 	.word	0x0003f2a0
   1489c:	0003f26c 	.word	0x0003f26c
   148a0:	0003f2b4 	.word	0x0003f2b4
   148a4:	0003f1f0 	.word	0x0003f1f0
   148a8:	0003f248 	.word	0x0003f248

000148ac <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>:
   148ac:	e92d4030 	push	{r4, r5, lr}
   148b0:	e2513000 	subs	r3, r1, #0
   148b4:	e24dd01c 	sub	sp, sp, #28
   148b8:	0a000023 	beq	1494c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xa0>
   148bc:	e590c02c 	ldr	ip, [r0, #44]	@ 0x2c
   148c0:	e1a04002 	mov	r4, r2
   148c4:	e5902028 	ldr	r2, [r0, #40]	@ 0x28
   148c8:	e35c0c02 	cmp	ip, #512	@ 0x200
   148cc:	33a01000 	movcc	r1, #0
   148d0:	23a01001 	movcs	r1, #1
   148d4:	e7e8e052 	ubfx	lr, r2, #0, #9
   148d8:	e35e0000 	cmp	lr, #0
   148dc:	13811001 	orrne	r1, r1, #1
   148e0:	e3510000 	cmp	r1, #0
   148e4:	1a000021 	bne	14970 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc4>
   148e8:	e1a024a2 	lsr	r2, r2, #9
   148ec:	e7e81054 	ubfx	r1, r4, #0, #9
   148f0:	e1822b8c 	orr	r2, r2, ip, lsl #23
   148f4:	e3510000 	cmp	r1, #0
   148f8:	1a00001c 	bne	14970 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xc4>
   148fc:	e6bf2f32 	rev	r2, r2
   14900:	e58d200e 	str	r2, [sp, #14]
   14904:	e1a024a4 	lsr	r2, r4, #9
   14908:	e5cd1012 	strb	r1, [sp, #18]
   1490c:	e6bf2fb2 	rev16	r2, r2
   14910:	e5cd1015 	strb	r1, [sp, #21]
   14914:	e1cd21b3 	strh	r2, [sp, #19]
   14918:	e3a05001 	mov	r5, #1
   1491c:	e3a0200a 	mov	r2, #10
   14920:	e28d100c 	add	r1, sp, #12
   14924:	e58d4000 	str	r4, [sp]
   14928:	e3a0c028 	mov	ip, #40	@ 0x28
   1492c:	e58d5004 	str	r5, [sp, #4]
   14930:	e1cdc0bc 	strh	ip, [sp, #12]
   14934:	ebfffee3 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14938:	e1500004 	cmp	r0, r4
   1493c:	1a000006 	bne	1495c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xb0>
   14940:	e1a00004 	mov	r0, r4
   14944:	e28dd01c 	add	sp, sp, #28
   14948:	e8bd8030 	pop	{r4, r5, pc}
   1494c:	e59f1024 	ldr	r1, [pc, #36]	@ 14978 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xcc>
   14950:	e30021f1 	movw	r2, #497	@ 0x1f1
   14954:	e28100c0 	add	r0, r1, #192	@ 0xc0
   14958:	eb005d1f 	bl	2bddc <assertion_failed>
   1495c:	eb006799 	bl	2e7c8 <CLogger::Get()>
   14960:	e59f3014 	ldr	r3, [pc, #20]	@ 1497c <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0xd0>
   14964:	e1a02005 	mov	r2, r5
   14968:	e24310c8 	sub	r1, r3, #200	@ 0xc8
   1496c:	eb00695e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14970:	e3e04000 	mvn	r4, #0
   14974:	eafffff1 	b	14940 <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)+0x94>
   14978:	0003f14c 	.word	0x0003f14c
   1497c:	0003f2cc 	.word	0x0003f2cc

00014980 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>:
   14980:	e92d4010 	push	{r4, lr}
   14984:	e2513000 	subs	r3, r1, #0
   14988:	e24dd018 	sub	sp, sp, #24
   1498c:	0a000022 	beq	14a1c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x9c>
   14990:	e590c02c 	ldr	ip, [r0, #44]	@ 0x2c
   14994:	e1a04002 	mov	r4, r2
   14998:	e5902028 	ldr	r2, [r0, #40]	@ 0x28
   1499c:	e35c0c02 	cmp	ip, #512	@ 0x200
   149a0:	33a01000 	movcc	r1, #0
   149a4:	23a01001 	movcs	r1, #1
   149a8:	e7e8e052 	ubfx	lr, r2, #0, #9
   149ac:	e35e0000 	cmp	lr, #0
   149b0:	13811001 	orrne	r1, r1, #1
   149b4:	e3510000 	cmp	r1, #0
   149b8:	1a000020 	bne	14a40 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc0>
   149bc:	e1a024a2 	lsr	r2, r2, #9
   149c0:	e7e81054 	ubfx	r1, r4, #0, #9
   149c4:	e1822b8c 	orr	r2, r2, ip, lsl #23
   149c8:	e3510000 	cmp	r1, #0
   149cc:	1a00001b 	bne	14a40 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc0>
   149d0:	e6bf2f32 	rev	r2, r2
   149d4:	e58d200e 	str	r2, [sp, #14]
   149d8:	e1a024a4 	lsr	r2, r4, #9
   149dc:	e58d1004 	str	r1, [sp, #4]
   149e0:	e6bf2fb2 	rev16	r2, r2
   149e4:	e5cd1012 	strb	r1, [sp, #18]
   149e8:	e1cd21b3 	strh	r2, [sp, #19]
   149ec:	e3a0200a 	mov	r2, #10
   149f0:	e5cd1015 	strb	r1, [sp, #21]
   149f4:	e28d100c 	add	r1, sp, #12
   149f8:	e58d4000 	str	r4, [sp]
   149fc:	e300c82a 	movw	ip, #2090	@ 0x82a
   14a00:	e1cdc0bc 	strh	ip, [sp, #12]
   14a04:	ebfffeaf 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14a08:	e3500000 	cmp	r0, #0
   14a0c:	a1a00004 	movge	r0, r4
   14a10:	ba000005 	blt	14a2c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xac>
   14a14:	e28dd018 	add	sp, sp, #24
   14a18:	e8bd8010 	pop	{r4, pc}
   14a1c:	e59f1024 	ldr	r1, [pc, #36]	@ 14a48 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xc8>
   14a20:	e3002216 	movw	r2, #534	@ 0x216
   14a24:	e28100c0 	add	r0, r1, #192	@ 0xc0
   14a28:	eb005ceb 	bl	2bddc <assertion_failed>
   14a2c:	eb006765 	bl	2e7c8 <CLogger::Get()>
   14a30:	e59f3014 	ldr	r3, [pc, #20]	@ 14a4c <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0xcc>
   14a34:	e3a02001 	mov	r2, #1
   14a38:	e24310d8 	sub	r1, r3, #216	@ 0xd8
   14a3c:	eb00692a 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14a40:	e3e00000 	mvn	r0, #0
   14a44:	eafffff2 	b	14a14 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)+0x94>
   14a48:	0003f14c 	.word	0x0003f14c
   14a4c:	0003f2dc 	.word	0x0003f2dc

00014a50 <CUSBBulkOnlyMassStorageDevice::Reset()>:
   14a50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14a54:	e1a05000 	mov	r5, r0
   14a58:	e24dd014 	sub	sp, sp, #20
   14a5c:	ebffeef0 	bl	10624 <CUSBFunction::GetHost() const>
   14a60:	e2506000 	subs	r6, r0, #0
   14a64:	0a00003c 	beq	14b5c <CUSBBulkOnlyMassStorageDevice::Reset()+0x10c>
   14a68:	e1a00005 	mov	r0, r5
   14a6c:	e3a04000 	mov	r4, #0
   14a70:	ebffeee0 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   14a74:	e1a07000 	mov	r7, r0
   14a78:	e1a00005 	mov	r0, r5
   14a7c:	ebffef47 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   14a80:	e1a01007 	mov	r1, r7
   14a84:	e98d0011 	stmib	sp, {r0, r4}
   14a88:	e3a030ff 	mov	r3, #255	@ 0xff
   14a8c:	e3a02021 	mov	r2, #33	@ 0x21
   14a90:	e1a00006 	mov	r0, r6
   14a94:	e58d400c 	str	r4, [sp, #12]
   14a98:	e58d4000 	str	r4, [sp]
   14a9c:	ebfffbdf 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14aa0:	e1500004 	cmp	r0, r4
   14aa4:	ba000030 	blt	14b6c <CUSBBulkOnlyMassStorageDevice::Reset()+0x11c>
   14aa8:	eb008162 	bl	35038 <CTimer::Get()>
   14aac:	e3a00064 	mov	r0, #100	@ 0x64
   14ab0:	eb00811f 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   14ab4:	e1a00005 	mov	r0, r5
   14ab8:	ebffeece 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   14abc:	e1a07000 	mov	r7, r0
   14ac0:	e5950014 	ldr	r0, [r5, #20]
   14ac4:	ebffed54 	bl	1001c <CUSBEndpoint::GetNumber() const>
   14ac8:	e1e00c80 	mvn	r0, r0, lsl #25
   14acc:	e1a01007 	mov	r1, r7
   14ad0:	e3a03001 	mov	r3, #1
   14ad4:	e1e00ca0 	mvn	r0, r0, lsr #25
   14ad8:	e3a02002 	mov	r2, #2
   14adc:	e58d400c 	str	r4, [sp, #12]
   14ae0:	e6ef0070 	uxtb	r0, r0
   14ae4:	e58d4008 	str	r4, [sp, #8]
   14ae8:	e58d0004 	str	r0, [sp, #4]
   14aec:	e1a00006 	mov	r0, r6
   14af0:	e58d4000 	str	r4, [sp]
   14af4:	ebfffbc9 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14af8:	e3500000 	cmp	r0, #0
   14afc:	ba000027 	blt	14ba0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x150>
   14b00:	e1a00005 	mov	r0, r5
   14b04:	ebffeebb 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   14b08:	e1a07000 	mov	r7, r0
   14b0c:	e5950018 	ldr	r0, [r5, #24]
   14b10:	ebffed41 	bl	1001c <CUSBEndpoint::GetNumber() const>
   14b14:	e1a01007 	mov	r1, r7
   14b18:	e1a03000 	mov	r3, r0
   14b1c:	e3a02002 	mov	r2, #2
   14b20:	e98d0018 	stmib	sp, {r3, r4}
   14b24:	e1a00006 	mov	r0, r6
   14b28:	e3a03001 	mov	r3, #1
   14b2c:	e58d400c 	str	r4, [sp, #12]
   14b30:	e58d4000 	str	r4, [sp]
   14b34:	ebfffbb9 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   14b38:	e3500000 	cmp	r0, #0
   14b3c:	ba000011 	blt	14b88 <CUSBBulkOnlyMassStorageDevice::Reset()+0x138>
   14b40:	e5950014 	ldr	r0, [r5, #20]
   14b44:	ebffed84 	bl	1015c <CUSBEndpoint::ResetPID()>
   14b48:	e5950018 	ldr	r0, [r5, #24]
   14b4c:	ebffed82 	bl	1015c <CUSBEndpoint::ResetPID()>
   14b50:	e1a00004 	mov	r0, r4
   14b54:	e28dd014 	add	sp, sp, #20
   14b58:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14b5c:	e59f1054 	ldr	r1, [pc, #84]	@ 14bb8 <CUSBBulkOnlyMassStorageDevice::Reset()+0x168>
   14b60:	e30022bb 	movw	r2, #699	@ 0x2bb
   14b64:	e2810098 	add	r0, r1, #152	@ 0x98
   14b68:	eb005c9b 	bl	2bddc <assertion_failed>
   14b6c:	eb006715 	bl	2e7c8 <CLogger::Get()>
   14b70:	e59f3044 	ldr	r3, [pc, #68]	@ 14bbc <CUSBBulkOnlyMassStorageDevice::Reset()+0x16c>
   14b74:	e3a02004 	mov	r2, #4
   14b78:	e24310e8 	sub	r1, r3, #232	@ 0xe8
   14b7c:	eb0068da 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b80:	e3e00000 	mvn	r0, #0
   14b84:	eafffff2 	b	14b54 <CUSBBulkOnlyMassStorageDevice::Reset()+0x104>
   14b88:	eb00670e 	bl	2e7c8 <CLogger::Get()>
   14b8c:	e59f302c 	ldr	r3, [pc, #44]	@ 14bc0 <CUSBBulkOnlyMassStorageDevice::Reset()+0x170>
   14b90:	e3a02004 	mov	r2, #4
   14b94:	e24310fc 	sub	r1, r3, #252	@ 0xfc
   14b98:	eb0068d3 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14b9c:	eafffff7 	b	14b80 <CUSBBulkOnlyMassStorageDevice::Reset()+0x130>
   14ba0:	eb006708 	bl	2e7c8 <CLogger::Get()>
   14ba4:	e59f3018 	ldr	r3, [pc, #24]	@ 14bc4 <CUSBBulkOnlyMassStorageDevice::Reset()+0x174>
   14ba8:	e3a02004 	mov	r2, #4
   14bac:	e2431044 	sub	r1, r3, #68	@ 0x44
   14bb0:	eb0068cd 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14bb4:	eafffff1 	b	14b80 <CUSBBulkOnlyMassStorageDevice::Reset()+0x130>
   14bb8:	0003f14c 	.word	0x0003f14c
   14bbc:	0003f2ec 	.word	0x0003f2ec
   14bc0:	0003f300 	.word	0x0003f300
   14bc4:	0003f248 	.word	0x0003f248

00014bc8 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)>:
   14bc8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14bcc:	e1a05002 	mov	r5, r2
   14bd0:	e1a06000 	mov	r6, r0
   14bd4:	e1a08001 	mov	r8, r1
   14bd8:	e1a09002 	mov	r9, r2
   14bdc:	e3a07008 	mov	r7, #8
   14be0:	e1a02005 	mov	r2, r5
   14be4:	e1a01008 	mov	r1, r8
   14be8:	e1a00006 	mov	r0, r6
   14bec:	ebffff2e 	bl	148ac <CUSBBulkOnlyMassStorageDevice::TryRead(void*, unsigned int)>
   14bf0:	e1a04000 	mov	r4, r0
   14bf4:	e1540005 	cmp	r4, r5
   14bf8:	e1a00006 	mov	r0, r6
   14bfc:	1a000001 	bne	14c08 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x40>
   14c00:	e1a00009 	mov	r0, r9
   14c04:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c08:	ebffff90 	bl	14a50 <CUSBBulkOnlyMassStorageDevice::Reset()>
   14c0c:	e3500000 	cmp	r0, #0
   14c10:	1a000004 	bne	14c28 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x60>
   14c14:	e2577001 	subs	r7, r7, #1
   14c18:	1afffff0 	bne	14be0 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x18>
   14c1c:	e1a09004 	mov	r9, r4
   14c20:	e1a00009 	mov	r0, r9
   14c24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c28:	e1a09000 	mov	r9, r0
   14c2c:	eafffff3 	b	14c00 <CUSBBulkOnlyMassStorageDevice::Read(void*, unsigned int)+0x38>

00014c30 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)>:
   14c30:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c34:	e1a05002 	mov	r5, r2
   14c38:	e1a06000 	mov	r6, r0
   14c3c:	e1a08001 	mov	r8, r1
   14c40:	e1a09002 	mov	r9, r2
   14c44:	e3a07008 	mov	r7, #8
   14c48:	e1a02005 	mov	r2, r5
   14c4c:	e1a01008 	mov	r1, r8
   14c50:	e1a00006 	mov	r0, r6
   14c54:	ebffff49 	bl	14980 <CUSBBulkOnlyMassStorageDevice::TryWrite(void const*, unsigned int)>
   14c58:	e1a04000 	mov	r4, r0
   14c5c:	e1540005 	cmp	r4, r5
   14c60:	e1a00006 	mov	r0, r6
   14c64:	1a000001 	bne	14c70 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x40>
   14c68:	e1a00009 	mov	r0, r9
   14c6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c70:	ebffff76 	bl	14a50 <CUSBBulkOnlyMassStorageDevice::Reset()>
   14c74:	e3500000 	cmp	r0, #0
   14c78:	1a000004 	bne	14c90 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x60>
   14c7c:	e2577001 	subs	r7, r7, #1
   14c80:	1afffff0 	bne	14c48 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x18>
   14c84:	e1a09004 	mov	r9, r4
   14c88:	e1a00009 	mov	r0, r9
   14c8c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c90:	e1a09000 	mov	r9, r0
   14c94:	eafffff3 	b	14c68 <CUSBBulkOnlyMassStorageDevice::Write(void const*, unsigned int)+0x38>

00014c98 <CUSBBulkOnlyMassStorageDevice::Configure()>:
   14c98:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   14c9c:	e1a05000 	mov	r5, r0
   14ca0:	e24dd064 	sub	sp, sp, #100	@ 0x64
   14ca4:	ebffee3d 	bl	105a0 <CUSBFunction::GetNumEndpoints() const>
   14ca8:	e3500001 	cmp	r0, #1
   14cac:	8a000004 	bhi	14cc4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   14cb0:	ea0000b9 	b	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14cb4:	e5d43003 	ldrb	r3, [r4, #3]
   14cb8:	e203303f 	and	r3, r3, #63	@ 0x3f
   14cbc:	e3530002 	cmp	r3, #2
   14cc0:	0a000028 	beq	14d68 <CUSBBulkOnlyMassStorageDevice::Configure()+0xd0>
   14cc4:	e3a01005 	mov	r1, #5
   14cc8:	e1a00005 	mov	r0, r5
   14ccc:	ebffee5f 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   14cd0:	e2504000 	subs	r4, r0, #0
   14cd4:	1afffff6 	bne	14cb4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x1c>
   14cd8:	e5953014 	ldr	r3, [r5, #20]
   14cdc:	e3530000 	cmp	r3, #0
   14ce0:	0a0000ad 	beq	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14ce4:	e5953018 	ldr	r3, [r5, #24]
   14ce8:	e3530000 	cmp	r3, #0
   14cec:	0a0000aa 	beq	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14cf0:	e1a00005 	mov	r0, r5
   14cf4:	ebffed62 	bl	10284 <CUSBFunction::Configure()>
   14cf8:	e3500000 	cmp	r0, #0
   14cfc:	0a0000ab 	beq	14fb0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x318>
   14d00:	e3a01024 	mov	r1, #36	@ 0x24
   14d04:	e3a00012 	mov	r0, #18
   14d08:	e1cd11b0 	strh	r1, [sp, #16]
   14d0c:	e3a06001 	mov	r6, #1
   14d10:	e58d000c 	str	r0, [sp, #12]
   14d14:	e28d303c 	add	r3, sp, #60	@ 0x3c
   14d18:	e88d0042 	stm	sp, {r1, r6}
   14d1c:	e3a02006 	mov	r2, #6
   14d20:	e28d100c 	add	r1, sp, #12
   14d24:	e1a00005 	mov	r0, r5
   14d28:	ebfffde6 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14d2c:	e3500024 	cmp	r0, #36	@ 0x24
   14d30:	1a0000a4 	bne	14fc8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x330>
   14d34:	e5dd403c 	ldrb	r4, [sp, #60]	@ 0x3c
   14d38:	e214401f 	ands	r4, r4, #31
   14d3c:	03a06063 	moveq	r6, #99	@ 0x63
   14d40:	0a000028 	beq	14de8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x150>
   14d44:	eb00669f 	bl	2e7c8 <CLogger::Get()>
   14d48:	e59f3360 	ldr	r3, [pc, #864]	@ 150b0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x418>
   14d4c:	e5ddc03c 	ldrb	ip, [sp, #60]	@ 0x3c
   14d50:	e1a02006 	mov	r2, r6
   14d54:	e2431e15 	sub	r1, r3, #336	@ 0x150
   14d58:	e20cc01f 	and	ip, ip, #31
   14d5c:	e58dc000 	str	ip, [sp]
   14d60:	eb006861 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14d64:	ea00008f 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   14d68:	e1d430d2 	ldrsb	r3, [r4, #2]
   14d6c:	e3530000 	cmp	r3, #0
   14d70:	ba00007b 	blt	14f64 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2cc>
   14d74:	e5953018 	ldr	r3, [r5, #24]
   14d78:	e3530000 	cmp	r3, #0
   14d7c:	1a000086 	bne	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14d80:	e3a00014 	mov	r0, #20
   14d84:	eb0084e6 	bl	36124 <operator new(unsigned int)>
   14d88:	e1a06000 	mov	r6, r0
   14d8c:	e1a00005 	mov	r0, r5
   14d90:	ebffee0e 	bl	105d0 <CUSBFunction::GetDevice() const>
   14d94:	e1a02004 	mov	r2, r4
   14d98:	e1a01000 	mov	r1, r0
   14d9c:	e1a00006 	mov	r0, r6
   14da0:	ebffec18 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14da4:	e5856018 	str	r6, [r5, #24]
   14da8:	eaffffc5 	b	14cc4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   14dac:	e3a00012 	mov	r0, #18
   14db0:	e3a07001 	mov	r7, #1
   14db4:	e1cd02b0 	strh	r0, [sp, #32]
   14db8:	e28d3028 	add	r3, sp, #40	@ 0x28
   14dbc:	e88d0081 	stm	sp, {r0, r7}
   14dc0:	e3a02006 	mov	r2, #6
   14dc4:	e28d101c 	add	r1, sp, #28
   14dc8:	e1a00005 	mov	r0, r5
   14dcc:	e3a0c003 	mov	ip, #3
   14dd0:	e58dc01c 	str	ip, [sp, #28]
   14dd4:	ebfffdbb 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14dd8:	e3500000 	cmp	r0, #0
   14ddc:	ba00007f 	blt	14fe0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x348>
   14de0:	e2566001 	subs	r6, r6, #1
   14de4:	0a00008b 	beq	15018 <CUSBBulkOnlyMassStorageDevice::Configure()+0x380>
   14de8:	eb008092 	bl	35038 <CTimer::Get()>
   14dec:	e3a00064 	mov	r0, #100	@ 0x64
   14df0:	eb00804f 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   14df4:	e3a03000 	mov	r3, #0
   14df8:	e3a02006 	mov	r2, #6
   14dfc:	e28d1014 	add	r1, sp, #20
   14e00:	e1a00005 	mov	r0, r5
   14e04:	e58d4004 	str	r4, [sp, #4]
   14e08:	e58d4000 	str	r4, [sp]
   14e0c:	e58d4014 	str	r4, [sp, #20]
   14e10:	e1cd41b8 	strh	r4, [sp, #24]
   14e14:	ebfffdab 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14e18:	e3500000 	cmp	r0, #0
   14e1c:	baffffe2 	blt	14dac <CUSBBulkOnlyMassStorageDevice::Configure()+0x114>
   14e20:	e3a02025 	mov	r2, #37	@ 0x25
   14e24:	e28d3014 	add	r3, sp, #20
   14e28:	e58d201c 	str	r2, [sp, #28]
   14e2c:	e28d101c 	add	r1, sp, #28
   14e30:	e3a02008 	mov	r2, #8
   14e34:	e3a06001 	mov	r6, #1
   14e38:	e58d2000 	str	r2, [sp]
   14e3c:	e1a00005 	mov	r0, r5
   14e40:	e3a0200a 	mov	r2, #10
   14e44:	e58d6004 	str	r6, [sp, #4]
   14e48:	e58d4020 	str	r4, [sp, #32]
   14e4c:	e1cd42b4 	strh	r4, [sp, #36]	@ 0x24
   14e50:	ebfffd9c 	bl	144c8 <CUSBBulkOnlyMassStorageDevice::Command(void*, unsigned int, void*, unsigned int, bool)>
   14e54:	e3500008 	cmp	r0, #8
   14e58:	1a000074 	bne	15030 <CUSBBulkOnlyMassStorageDevice::Configure()+0x398>
   14e5c:	e59d4018 	ldr	r4, [sp, #24]
   14e60:	e3540802 	cmp	r4, #131072	@ 0x20000
   14e64:	1a000063 	bne	14ff8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x360>
   14e68:	e59d2014 	ldr	r2, [sp, #20]
   14e6c:	e6bf3f32 	rev	r3, r2
   14e70:	e3720001 	cmn	r2, #1
   14e74:	e5853020 	str	r3, [r5, #32]
   14e78:	0a000078 	beq	15060 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3c8>
   14e7c:	e2833001 	add	r3, r3, #1
   14e80:	e5853020 	str	r3, [r5, #32]
   14e84:	eb00664f 	bl	2e7c8 <CLogger::Get()>
   14e88:	e5952020 	ldr	r2, [r5, #32]
   14e8c:	e59f3220 	ldr	r3, [pc, #544]	@ 150b4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x41c>
   14e90:	e1a025a2 	lsr	r2, r2, #11
   14e94:	e2431f7b 	sub	r1, r3, #492	@ 0x1ec
   14e98:	e58d2000 	str	r2, [sp]
   14e9c:	e3a02004 	mov	r2, #4
   14ea0:	eb006811 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ea4:	e59f220c 	ldr	r2, [pc, #524]	@ 150b8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x420>
   14ea8:	e3a01000 	mov	r1, #0
   14eac:	e30400a0 	movw	r0, #16544	@ 0x40a0
   14eb0:	e3400004 	movt	r0, #4
   14eb4:	eb0085e8 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   14eb8:	e3500040 	cmp	r0, #64	@ 0x40
   14ebc:	0a00006d 	beq	15078 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3e0>
   14ec0:	e5952034 	ldr	r2, [r5, #52]	@ 0x34
   14ec4:	e3520000 	cmp	r2, #0
   14ec8:	1a000074 	bne	150a0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x408>
   14ecc:	e5850034 	str	r0, [r5, #52]	@ 0x34
   14ed0:	e28d0028 	add	r0, sp, #40	@ 0x28
   14ed4:	eb0076da 	bl	32a44 <CString::CString()>
   14ed8:	e59f11dc 	ldr	r1, [pc, #476]	@ 150bc <CUSBBulkOnlyMassStorageDevice::Configure()+0x424>
   14edc:	e5952034 	ldr	r2, [r5, #52]	@ 0x34
   14ee0:	e28d0028 	add	r0, sp, #40	@ 0x28
   14ee4:	eb007c8f 	bl	34128 <CString::Format(char const*, ...)>
   14ee8:	e5953030 	ldr	r3, [r5, #48]	@ 0x30
   14eec:	e3530000 	cmp	r3, #0
   14ef0:	1a000066 	bne	15090 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3f8>
   14ef4:	e3a00024 	mov	r0, #36	@ 0x24
   14ef8:	eb008489 	bl	36124 <operator new(unsigned int)>
   14efc:	e1a04000 	mov	r4, r0
   14f00:	e28d0028 	add	r0, sp, #40	@ 0x28
   14f04:	eb007706 	bl	32b24 <CString::operator char const*() const>
   14f08:	e1a01005 	mov	r1, r5
   14f0c:	e1a02000 	mov	r2, r0
   14f10:	e1a00004 	mov	r0, r4
   14f14:	eb002b08 	bl	1fb3c <CPartitionManager::CPartitionManager(CDevice*, char const*)>
   14f18:	e1a00004 	mov	r0, r4
   14f1c:	e5854030 	str	r4, [r5, #48]	@ 0x30
   14f20:	eb002b41 	bl	1fc2c <CPartitionManager::Initialize()>
   14f24:	e2504000 	subs	r4, r0, #0
   14f28:	0a000046 	beq	15048 <CUSBBulkOnlyMassStorageDevice::Configure()+0x3b0>
   14f2c:	eb005f3e 	bl	2cc2c <CDeviceNameService::Get()>
   14f30:	e1a07000 	mov	r7, r0
   14f34:	e28d0028 	add	r0, sp, #40	@ 0x28
   14f38:	eb0076f9 	bl	32b24 <CString::operator char const*() const>
   14f3c:	e1a03006 	mov	r3, r6
   14f40:	e1a01000 	mov	r1, r0
   14f44:	e1a02005 	mov	r2, r5
   14f48:	e1a00007 	mov	r0, r7
   14f4c:	eb005e61 	bl	2c8d8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   14f50:	e28d0028 	add	r0, sp, #40	@ 0x28
   14f54:	eb007687 	bl	32978 <CString::~CString()>
   14f58:	e1a00004 	mov	r0, r4
   14f5c:	e28dd064 	add	sp, sp, #100	@ 0x64
   14f60:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   14f64:	e5953014 	ldr	r3, [r5, #20]
   14f68:	e3530000 	cmp	r3, #0
   14f6c:	1a00000a 	bne	14f9c <CUSBBulkOnlyMassStorageDevice::Configure()+0x304>
   14f70:	e3a00014 	mov	r0, #20
   14f74:	eb00846a 	bl	36124 <operator new(unsigned int)>
   14f78:	e1a06000 	mov	r6, r0
   14f7c:	e1a00005 	mov	r0, r5
   14f80:	ebffed92 	bl	105d0 <CUSBFunction::GetDevice() const>
   14f84:	e1a02004 	mov	r2, r4
   14f88:	e1a01000 	mov	r1, r0
   14f8c:	e1a00006 	mov	r0, r6
   14f90:	ebffeb9c 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   14f94:	e5856014 	str	r6, [r5, #20]
   14f98:	eaffff49 	b	14cc4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c>
   14f9c:	e59f111c 	ldr	r1, [pc, #284]	@ 150c0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x428>
   14fa0:	e1a00005 	mov	r0, r5
   14fa4:	ebffedb4 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   14fa8:	e3a04000 	mov	r4, #0
   14fac:	eaffffe9 	b	14f58 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2c0>
   14fb0:	eb006604 	bl	2e7c8 <CLogger::Get()>
   14fb4:	e59f3108 	ldr	r3, [pc, #264]	@ 150c4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x42c>
   14fb8:	e3a02001 	mov	r2, #1
   14fbc:	e2431e12 	sub	r1, r3, #288	@ 0x120
   14fc0:	eb0067c9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fc4:	eafffff7 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   14fc8:	eb0065fe 	bl	2e7c8 <CLogger::Get()>
   14fcc:	e59f30f4 	ldr	r3, [pc, #244]	@ 150c8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x430>
   14fd0:	e1a02006 	mov	r2, r6
   14fd4:	e2431f4e 	sub	r1, r3, #312	@ 0x138
   14fd8:	eb0067c3 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14fdc:	eafffff1 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   14fe0:	eb0065f8 	bl	2e7c8 <CLogger::Get()>
   14fe4:	e59f30e0 	ldr	r3, [pc, #224]	@ 150cc <CUSBBulkOnlyMassStorageDevice::Configure()+0x434>
   14fe8:	e1a02007 	mov	r2, r7
   14fec:	e2431e17 	sub	r1, r3, #368	@ 0x170
   14ff0:	eb0067bd 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   14ff4:	eaffffeb 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   14ff8:	eb0065f2 	bl	2e7c8 <CLogger::Get()>
   14ffc:	e59f30cc 	ldr	r3, [pc, #204]	@ 150d0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x438>
   15000:	e6bf4f34 	rev	r4, r4
   15004:	e1a02006 	mov	r2, r6
   15008:	e2431f6d 	sub	r1, r3, #436	@ 0x1b4
   1500c:	e58d4000 	str	r4, [sp]
   15010:	eb0067b5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15014:	eaffffe3 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15018:	eb0065ea 	bl	2e7c8 <CLogger::Get()>
   1501c:	e59f30b0 	ldr	r3, [pc, #176]	@ 150d4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x43c>
   15020:	e1a02007 	mov	r2, r7
   15024:	e2431f62 	sub	r1, r3, #392	@ 0x188
   15028:	eb0067af 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1502c:	eaffffdd 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15030:	eb0065e4 	bl	2e7c8 <CLogger::Get()>
   15034:	e59f309c 	ldr	r3, [pc, #156]	@ 150d8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x440>
   15038:	e1a02006 	mov	r2, r6
   1503c:	e2431f67 	sub	r1, r3, #412	@ 0x19c
   15040:	eb0067a9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15044:	eaffffd7 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15048:	e5951034 	ldr	r1, [r5, #52]	@ 0x34
   1504c:	e30400a0 	movw	r0, #16544	@ 0x40a0
   15050:	e3400004 	movt	r0, #4
   15054:	eb0085b2 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   15058:	e5854034 	str	r4, [r5, #52]	@ 0x34
   1505c:	eaffffbb 	b	14f50 <CUSBBulkOnlyMassStorageDevice::Configure()+0x2b8>
   15060:	eb0065d8 	bl	2e7c8 <CLogger::Get()>
   15064:	e59f3070 	ldr	r3, [pc, #112]	@ 150dc <CUSBBulkOnlyMassStorageDevice::Configure()+0x444>
   15068:	e1a02006 	mov	r2, r6
   1506c:	e2431e1d 	sub	r1, r3, #464	@ 0x1d0
   15070:	eb00679d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15074:	eaffffcb 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15078:	eb0065d2 	bl	2e7c8 <CLogger::Get()>
   1507c:	e59f305c 	ldr	r3, [pc, #92]	@ 150e0 <CUSBBulkOnlyMassStorageDevice::Configure()+0x448>
   15080:	e1a02006 	mov	r2, r6
   15084:	e2431f83 	sub	r1, r3, #524	@ 0x20c
   15088:	eb006797 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1508c:	eaffffc5 	b	14fa8 <CUSBBulkOnlyMassStorageDevice::Configure()+0x310>
   15090:	e59f104c 	ldr	r1, [pc, #76]	@ 150e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x44c>
   15094:	e3002199 	movw	r2, #409	@ 0x199
   15098:	e2810fbe 	add	r0, r1, #760	@ 0x2f8
   1509c:	eb005b4e 	bl	2bddc <assertion_failed>
   150a0:	e59f103c 	ldr	r1, [pc, #60]	@ 150e4 <CUSBBulkOnlyMassStorageDevice::Configure()+0x44c>
   150a4:	e3002193 	movw	r2, #403	@ 0x193
   150a8:	e2810fb6 	add	r0, r1, #728	@ 0x2d8
   150ac:	eb005b4a 	bl	2bddc <assertion_failed>
   150b0:	0003f354 	.word	0x0003f354
   150b4:	0003f3f0 	.word	0x0003f3f0
   150b8:	0003f408 	.word	0x0003f408
   150bc:	0003f43c 	.word	0x0003f43c
   150c0:	0003f204 	.word	0x0003f204
   150c4:	0003f324 	.word	0x0003f324
   150c8:	0003f33c 	.word	0x0003f33c
   150cc:	0003f374 	.word	0x0003f374
   150d0:	0003f3b8 	.word	0x0003f3b8
   150d4:	0003f38c 	.word	0x0003f38c
   150d8:	0003f3a0 	.word	0x0003f3a0
   150dc:	0003f3d4 	.word	0x0003f3d4
   150e0:	0003f410 	.word	0x0003f410
   150e4:	0003f14c 	.word	0x0003f14c

000150e8 <_GLOBAL__sub_I__ZN29CUSBBulkOnlyMassStorageDevice18s_DeviceNumberPoolE>:
   150e8:	e92d4010 	push	{r4, lr}
   150ec:	e30440a0 	movw	r4, #16544	@ 0x40a0
   150f0:	e3404004 	movt	r4, #4
   150f4:	e3a0203f 	mov	r2, #63	@ 0x3f
   150f8:	e3a01001 	mov	r1, #1
   150fc:	e1a00004 	mov	r0, r4
   15100:	eb008540 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   15104:	e1a00004 	mov	r0, r4
   15108:	e3042180 	movw	r2, #16768	@ 0x4180
   1510c:	e3402004 	movt	r2, #4
   15110:	e3061658 	movw	r1, #26200	@ 0x6658
   15114:	e3401003 	movt	r1, #3
   15118:	e8bd4010 	pop	{r4, lr}
   1511c:	ea007c0c 	b	34154 <__aeabi_atexit>

00015120 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>:
   15120:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
   15124:	e59f20c0 	ldr	r2, [pc, #192]	@ 151ec <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0xcc>
   15128:	e92d4070 	push	{r4, r5, r6, lr}
   1512c:	e3530000 	cmp	r3, #0
   15130:	e1a04000 	mov	r4, r0
   15134:	e5802000 	str	r2, [r0]
   15138:	1a000025 	bne	151d4 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0xb4>
   1513c:	e5940014 	ldr	r0, [r4, #20]
   15140:	e3500000 	cmp	r0, #0
   15144:	0a000002 	beq	15154 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x34>
   15148:	e5903000 	ldr	r3, [r0]
   1514c:	e5933004 	ldr	r3, [r3, #4]
   15150:	e12fff33 	blx	r3
   15154:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
   15158:	e3a03000 	mov	r3, #0
   1515c:	e5843014 	str	r3, [r4, #20]
   15160:	e1500003 	cmp	r0, r3
   15164:	0a000000 	beq	1516c <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x4c>
   15168:	eb0083ff 	bl	3616c <operator delete[](void*)>
   1516c:	e5945018 	ldr	r5, [r4, #24]
   15170:	e3a03000 	mov	r3, #0
   15174:	e5843024 	str	r3, [r4, #36]	@ 0x24
   15178:	e1550003 	cmp	r5, r3
   1517c:	0a000004 	beq	15194 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x74>
   15180:	e1a00005 	mov	r0, r5
   15184:	ebffeb99 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   15188:	e3a01014 	mov	r1, #20
   1518c:	e1a00005 	mov	r0, r5
   15190:	eb0083fb 	bl	36184 <operator delete(void*, unsigned int)>
   15194:	e594501c 	ldr	r5, [r4, #28]
   15198:	e3a03000 	mov	r3, #0
   1519c:	e5843018 	str	r3, [r4, #24]
   151a0:	e1550003 	cmp	r5, r3
   151a4:	0a000004 	beq	151bc <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x9c>
   151a8:	e1a00005 	mov	r0, r5
   151ac:	ebffeb8f 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   151b0:	e3a01014 	mov	r1, #20
   151b4:	e1a00005 	mov	r0, r5
   151b8:	eb0083f1 	bl	36184 <operator delete(void*, unsigned int)>
   151bc:	e3a03000 	mov	r3, #0
   151c0:	e1a00004 	mov	r0, r4
   151c4:	e584301c 	str	r3, [r4, #28]
   151c8:	ebffebf3 	bl	1019c <CUSBFunction::~CUSBFunction()>
   151cc:	e1a00004 	mov	r0, r4
   151d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   151d4:	eb007f97 	bl	35038 <CTimer::Get()>
   151d8:	e5941028 	ldr	r1, [r4, #40]	@ 0x28
   151dc:	eb007dff 	bl	349e0 <CTimer::CancelKernelTimer(unsigned int)>
   151e0:	e3a03000 	mov	r3, #0
   151e4:	e5843028 	str	r3, [r4, #40]	@ 0x28
   151e8:	eaffffd3 	b	1513c <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()+0x1c>
   151ec:	0003f468 	.word	0x0003f468

000151f0 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>:
   151f0:	e92d4010 	push	{r4, lr}
   151f4:	e1a04000 	mov	r4, r0
   151f8:	ebffffc8 	bl	15120 <CUSBMIDIHostDevice::~CUSBMIDIHostDevice()>
   151fc:	e1a00004 	mov	r0, r4
   15200:	e3a0102c 	mov	r1, #44	@ 0x2c
   15204:	eb0083de 	bl	36184 <operator delete(void*, unsigned int)>
   15208:	e1a00004 	mov	r0, r4
   1520c:	e8bd8010 	pop	{r4, pc}

00015210 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)>:
   15210:	e92d48f0 	push	{r4, r5, r6, r7, fp, lr}
   15214:	e2525000 	subs	r5, r2, #0
   15218:	e28db014 	add	fp, sp, #20
   1521c:	e24dd008 	sub	sp, sp, #8
   15220:	0a000020 	beq	152a8 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x98>
   15224:	e3500000 	cmp	r0, #0
   15228:	0a000024 	beq	152c0 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xb0>
   1522c:	e1a04001 	mov	r4, r1
   15230:	e3510000 	cmp	r1, #0
   15234:	0a000027 	beq	152d8 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xc8>
   15238:	e2116003 	ands	r6, r1, #3
   1523c:	1a00002b 	bne	152f0 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0xe0>
   15240:	e595301c 	ldr	r3, [r5, #28]
   15244:	e3530000 	cmp	r3, #0
   15248:	01a00003 	moveq	r0, r3
   1524c:	0a000013 	beq	152a0 <CUSBMIDIHostDevice::SendEventsHandler(unsigned char const*, unsigned int, void*)+0x90>
   15250:	e2413001 	sub	r3, r1, #1
   15254:	e1a02001 	mov	r2, r1
   15258:	e383303f 	orr	r3, r3, #63	@ 0x3f
   1525c:	e1a01000 	mov	r1, r0
   15260:	e2833040 	add	r3, r3, #64	@ 0x40
   15264:	e3c33007 	bic	r3, r3, #7
   15268:	e04dd003 	sub	sp, sp, r3
   1526c:	e28d7047 	add	r7, sp, #71	@ 0x47
   15270:	e3c7703f 	bic	r7, r7, #63	@ 0x3f
   15274:	e1a00007 	mov	r0, r7
   15278:	eb0081a1 	bl	35904 <memcpy>
   1527c:	e1a00005 	mov	r0, r5
   15280:	ebffece7 	bl	10624 <CUSBFunction::GetHost() const>
   15284:	e595101c 	ldr	r1, [r5, #28]
   15288:	e1a03004 	mov	r3, r4
   1528c:	e1a02007 	mov	r2, r7
   15290:	e58d6000 	str	r6, [sp]
   15294:	ebfffa48 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   15298:	e1e00000 	mvn	r0, r0
   1529c:	e1a00fa0 	lsr	r0, r0, #31
   152a0:	e24bd014 	sub	sp, fp, #20
   152a4:	e8bd88f0 	pop	{r4, r5, r6, r7, fp, pc}
   152a8:	e30b158c 	movw	r1, #46476	@ 0xb58c
   152ac:	e3401003 	movt	r1, #3
   152b0:	e30b059c 	movw	r0, #46492	@ 0xb59c
   152b4:	e3400003 	movt	r0, #3
   152b8:	e3a020ab 	mov	r2, #171	@ 0xab
   152bc:	eb005ac6 	bl	2bddc <assertion_failed>
   152c0:	e30b158c 	movw	r1, #46476	@ 0xb58c
   152c4:	e3401003 	movt	r1, #3
   152c8:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   152cc:	e3400003 	movt	r0, #3
   152d0:	e3a020ad 	mov	r2, #173	@ 0xad
   152d4:	eb005ac0 	bl	2bddc <assertion_failed>
   152d8:	e30b158c 	movw	r1, #46476	@ 0xb58c
   152dc:	e3401003 	movt	r1, #3
   152e0:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   152e4:	e3400003 	movt	r0, #3
   152e8:	e3a020ae 	mov	r2, #174	@ 0xae
   152ec:	eb005aba 	bl	2bddc <assertion_failed>
   152f0:	e30b158c 	movw	r1, #46476	@ 0xb58c
   152f4:	e3401003 	movt	r1, #3
   152f8:	e30b05bc 	movw	r0, #46524	@ 0xb5bc
   152fc:	e3400003 	movt	r0, #3
   15300:	e3a020af 	mov	r2, #175	@ 0xaf
   15304:	eb005ab4 	bl	2bddc <assertion_failed>

00015308 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)>:
   15308:	e92d4010 	push	{r4, lr}
   1530c:	e1a04000 	mov	r4, r0
   15310:	ebffec4a 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   15314:	e1a03004 	mov	r3, r4
   15318:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   1531c:	e59f101c 	ldr	r1, [pc, #28]	@ 15340 <CUSBMIDIHostDevice::CUSBMIDIHostDevice(CUSBFunction*)+0x38>
   15320:	e3a02000 	mov	r2, #0
   15324:	e1a00004 	mov	r0, r4
   15328:	e4831014 	str	r1, [r3], #20
   1532c:	f443078f 	vst1.32	{d16}, [r3]
   15330:	e584201c 	str	r2, [r4, #28]
   15334:	e5842024 	str	r2, [r4, #36]	@ 0x24
   15338:	e5842028 	str	r2, [r4, #40]	@ 0x28
   1533c:	e8bd8010 	pop	{r4, pc}
   15340:	0003f468 	.word	0x0003f468

00015344 <CUSBMIDIHostDevice::StartRequest()>:
   15344:	e5903018 	ldr	r3, [r0, #24]
   15348:	e92d4070 	push	{r4, r5, r6, lr}
   1534c:	e3530000 	cmp	r3, #0
   15350:	e24dd008 	sub	sp, sp, #8
   15354:	0a000020 	beq	153dc <CUSBMIDIHostDevice::StartRequest()+0x98>
   15358:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   1535c:	e1a04000 	mov	r4, r0
   15360:	e3530000 	cmp	r3, #0
   15364:	0a000022 	beq	153f4 <CUSBMIDIHostDevice::StartRequest()+0xb0>
   15368:	e1d032b0 	ldrh	r3, [r0, #32]
   1536c:	e3530000 	cmp	r3, #0
   15370:	0a000025 	beq	1540c <CUSBMIDIHostDevice::StartRequest()+0xc8>
   15374:	e3a00070 	mov	r0, #112	@ 0x70
   15378:	e3a06000 	mov	r6, #0
   1537c:	eb0004e0 	bl	16704 <CUSBRequest::operator new(unsigned int)>
   15380:	e1d432b0 	ldrh	r3, [r4, #32]
   15384:	e58d6000 	str	r6, [sp]
   15388:	e1a05000 	mov	r5, r0
   1538c:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
   15390:	e5941018 	ldr	r1, [r4, #24]
   15394:	eb000410 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   15398:	e1a03004 	mov	r3, r4
   1539c:	e1a02006 	mov	r2, r6
   153a0:	e1a00005 	mov	r0, r5
   153a4:	e305165c 	movw	r1, #22108	@ 0x565c
   153a8:	e3401001 	movt	r1, #1
   153ac:	eb0004b5 	bl	16688 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   153b0:	e1a00005 	mov	r0, r5
   153b4:	eb0004cd 	bl	166f0 <CUSBRequest::SetCompleteOnNAK()>
   153b8:	e1a00004 	mov	r0, r4
   153bc:	ebffec98 	bl	10624 <CUSBFunction::GetHost() const>
   153c0:	e5903000 	ldr	r3, [r0]
   153c4:	e1a02006 	mov	r2, r6
   153c8:	e1a01005 	mov	r1, r5
   153cc:	e5933014 	ldr	r3, [r3, #20]
   153d0:	e28dd008 	add	sp, sp, #8
   153d4:	e8bd4070 	pop	{r4, r5, r6, lr}
   153d8:	e12fff13 	bx	r3
   153dc:	e30b158c 	movw	r1, #46476	@ 0xb58c
   153e0:	e3401003 	movt	r1, #3
   153e4:	e30b05d0 	movw	r0, #46544	@ 0xb5d0
   153e8:	e3400003 	movt	r0, #3
   153ec:	e3a020be 	mov	r2, #190	@ 0xbe
   153f0:	eb005a79 	bl	2bddc <assertion_failed>
   153f4:	e30b158c 	movw	r1, #46476	@ 0xb58c
   153f8:	e3401003 	movt	r1, #3
   153fc:	e30b05e4 	movw	r0, #46564	@ 0xb5e4
   15400:	e3400003 	movt	r0, #3
   15404:	e3a020bf 	mov	r2, #191	@ 0xbf
   15408:	eb005a73 	bl	2bddc <assertion_failed>
   1540c:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15410:	e3401003 	movt	r1, #3
   15414:	e30b05fc 	movw	r0, #46588	@ 0xb5fc
   15418:	e3400003 	movt	r0, #3
   1541c:	e3a020c1 	mov	r2, #193	@ 0xc1
   15420:	eb005a6d 	bl	2bddc <assertion_failed>

00015424 <CUSBMIDIHostDevice::TimerStub(unsigned int, void*, void*)>:
   15424:	e1a03000 	mov	r3, r0
   15428:	e92d4010 	push	{r4, lr}
   1542c:	e2520000 	subs	r0, r2, #0
   15430:	0a000006 	beq	15450 <CUSBMIDIHostDevice::TimerStub(unsigned int, void*, void*)+0x2c>
   15434:	e5902028 	ldr	r2, [r0, #40]	@ 0x28
   15438:	e1530002 	cmp	r3, r2
   1543c:	1a000009 	bne	15468 <CUSBMIDIHostDevice::TimerStub(unsigned int, void*, void*)+0x44>
   15440:	e3a03000 	mov	r3, #0
   15444:	e5803028 	str	r3, [r0, #40]	@ 0x28
   15448:	e8bd4010 	pop	{r4, lr}
   1544c:	eaffffbc 	b	15344 <CUSBMIDIHostDevice::StartRequest()>
   15450:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15454:	e3401003 	movt	r1, #3
   15458:	e3090d50 	movw	r0, #40272	@ 0x9d50
   1545c:	e3400003 	movt	r0, #3
   15460:	e3002107 	movw	r2, #263	@ 0x107
   15464:	eb005a5c 	bl	2bddc <assertion_failed>
   15468:	e30b158c 	movw	r1, #46476	@ 0xb58c
   1546c:	e3401003 	movt	r1, #3
   15470:	e30b0610 	movw	r0, #46608	@ 0xb610
   15474:	e3400003 	movt	r0, #3
   15478:	e3a020fe 	mov	r2, #254	@ 0xfe
   1547c:	eb005a56 	bl	2bddc <assertion_failed>

00015480 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)>:
   15480:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15484:	e2514000 	subs	r4, r1, #0
   15488:	e24dd014 	sub	sp, sp, #20
   1548c:	0a000054 	beq	155e4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x164>
   15490:	e5903014 	ldr	r3, [r0, #20]
   15494:	e1a06000 	mov	r6, r0
   15498:	e3530000 	cmp	r3, #0
   1549c:	0a000056 	beq	155fc <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x17c>
   154a0:	e1a00004 	mov	r0, r4
   154a4:	eb000401 	bl	164b0 <CUSBRequest::GetStatus() const>
   154a8:	e3500000 	cmp	r0, #0
   154ac:	0a000019 	beq	15518 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x98>
   154b0:	e1a00004 	mov	r0, r4
   154b4:	eb0003ff 	bl	164b8 <CUSBRequest::GetResultLength() const>
   154b8:	e3100003 	tst	r0, #3
   154bc:	1a000015 	bne	15518 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x98>
   154c0:	e5965024 	ldr	r5, [r6, #36]	@ 0x24
   154c4:	e3550000 	cmp	r5, #0
   154c8:	0a000051 	beq	15614 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x194>
   154cc:	e5967014 	ldr	r7, [r6, #20]
   154d0:	e1a00004 	mov	r0, r4
   154d4:	eb0003f7 	bl	164b8 <CUSBRequest::GetResultLength() const>
   154d8:	e1a01005 	mov	r1, r5
   154dc:	e1a02000 	mov	r2, r0
   154e0:	e1a00007 	mov	r0, r7
   154e4:	eb002298 	bl	1df4c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>
   154e8:	e1a05000 	mov	r5, r0
   154ec:	e1a00004 	mov	r0, r4
   154f0:	eb0003dd 	bl	1646c <CUSBRequest::~CUSBRequest()>
   154f4:	e3a01070 	mov	r1, #112	@ 0x70
   154f8:	e1a00004 	mov	r0, r4
   154fc:	eb000496 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   15500:	e3550000 	cmp	r5, #0
   15504:	0a00000c 	beq	1553c <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   15508:	e1a00006 	mov	r0, r6
   1550c:	e28dd014 	add	sp, sp, #20
   15510:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   15514:	eaffff8a 	b	15344 <CUSBMIDIHostDevice::StartRequest()>
   15518:	e5960014 	ldr	r0, [r6, #20]
   1551c:	eb0022cd 	bl	1e058 <CUSBMIDIDevice::GetAllSoundOffOnUSBError() const>
   15520:	e3500000 	cmp	r0, #0
   15524:	1a000017 	bne	15588 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x108>
   15528:	e1a00004 	mov	r0, r4
   1552c:	eb0003ce 	bl	1646c <CUSBRequest::~CUSBRequest()>
   15530:	e3a01070 	mov	r1, #112	@ 0x70
   15534:	e1a00004 	mov	r0, r4
   15538:	eb000487 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   1553c:	eb006293 	bl	2df90 <CKernelOptions::Get()>
   15540:	eb006268 	bl	2dee8 <CKernelOptions::GetUSBBoost() const>
   15544:	e3500000 	cmp	r0, #0
   15548:	1affffee 	bne	15508 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x88>
   1554c:	e5964028 	ldr	r4, [r6, #40]	@ 0x28
   15550:	e3540000 	cmp	r4, #0
   15554:	1a000034 	bne	1562c <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1ac>
   15558:	eb007eb6 	bl	35038 <CTimer::Get()>
   1555c:	e3a01001 	mov	r1, #1
   15560:	e1a03004 	mov	r3, r4
   15564:	e58d6000 	str	r6, [sp]
   15568:	e3052424 	movw	r2, #21540	@ 0x5424
   1556c:	e3402001 	movt	r2, #1
   15570:	eb007cc5 	bl	3488c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   15574:	e3500000 	cmp	r0, #0
   15578:	e5860028 	str	r0, [r6, #40]	@ 0x28
   1557c:	0a000030 	beq	15644 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x1c4>
   15580:	e28dd014 	add	sp, sp, #20
   15584:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15588:	e1a00004 	mov	r0, r4
   1558c:	eb0003c7 	bl	164b0 <CUSBRequest::GetStatus() const>
   15590:	e2505000 	subs	r5, r0, #0
   15594:	1affffe3 	bne	15528 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa8>
   15598:	e1a00004 	mov	r0, r4
   1559c:	eb0003d1 	bl	164e8 <CUSBRequest::GetUSBError() const>
   155a0:	e3500009 	cmp	r0, #9
   155a4:	0affffdf 	beq	15528 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa8>
   155a8:	e3a0900b 	mov	r9, #11
   155ac:	e3a08078 	mov	r8, #120	@ 0x78
   155b0:	e3e0704f 	mvn	r7, #79	@ 0x4f
   155b4:	e1873005 	orr	r3, r7, r5
   155b8:	e5960014 	ldr	r0, [r6, #20]
   155bc:	e3a02004 	mov	r2, #4
   155c0:	e28d100c 	add	r1, sp, #12
   155c4:	e2855001 	add	r5, r5, #1
   155c8:	e5cd900c 	strb	r9, [sp, #12]
   155cc:	e1cd80be 	strh	r8, [sp, #14]
   155d0:	e5cd300d 	strb	r3, [sp, #13]
   155d4:	eb00225c 	bl	1df4c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>
   155d8:	e3550010 	cmp	r5, #16
   155dc:	1afffff4 	bne	155b4 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0x134>
   155e0:	eaffffd0 	b	15528 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)+0xa8>
   155e4:	e30b158c 	movw	r1, #46476	@ 0xb58c
   155e8:	e3401003 	movt	r1, #3
   155ec:	e3090e38 	movw	r0, #40504	@ 0x9e38
   155f0:	e3400003 	movt	r0, #3
   155f4:	e3a020cd 	mov	r2, #205	@ 0xcd
   155f8:	eb0059f7 	bl	2bddc <assertion_failed>
   155fc:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15600:	e3401003 	movt	r1, #3
   15604:	e30b0624 	movw	r0, #46628	@ 0xb624
   15608:	e3400003 	movt	r0, #3
   1560c:	e3a020ce 	mov	r2, #206	@ 0xce
   15610:	eb0059f1 	bl	2bddc <assertion_failed>
   15614:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15618:	e3401003 	movt	r1, #3
   1561c:	e30b05e4 	movw	r0, #46564	@ 0xb5e4
   15620:	e3400003 	movt	r0, #3
   15624:	e3a020d5 	mov	r2, #213	@ 0xd5
   15628:	eb0059eb 	bl	2bddc <assertion_failed>
   1562c:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15630:	e3401003 	movt	r1, #3
   15634:	e30b0638 	movw	r0, #46648	@ 0xb638
   15638:	e3400003 	movt	r0, #3
   1563c:	e3a020ee 	mov	r2, #238	@ 0xee
   15640:	eb0059e5 	bl	2bddc <assertion_failed>
   15644:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15648:	e3401003 	movt	r1, #3
   1564c:	e30b0648 	movw	r0, #46664	@ 0xb648
   15650:	e3400003 	movt	r0, #3
   15654:	e3a020f0 	mov	r2, #240	@ 0xf0
   15658:	eb0059df 	bl	2bddc <assertion_failed>

0001565c <CUSBMIDIHostDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1565c:	e1a01000 	mov	r1, r0
   15660:	e2520000 	subs	r0, r2, #0
   15664:	0a000000 	beq	1566c <CUSBMIDIHostDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   15668:	eaffff84 	b	15480 <CUSBMIDIHostDevice::CompletionRoutine(CUSBRequest*)>
   1566c:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15670:	e3401003 	movt	r1, #3
   15674:	e3090d50 	movw	r0, #40272	@ 0x9d50
   15678:	e3400003 	movt	r0, #3
   1567c:	e3a020f7 	mov	r2, #247	@ 0xf7
   15680:	e92d4010 	push	{r4, lr}
   15684:	eb0059d4 	bl	2bddc <assertion_failed>

00015688 <CUSBMIDIHostDevice::TimerHandler(unsigned int)>:
   15688:	e5902028 	ldr	r2, [r0, #40]	@ 0x28
   1568c:	e1520001 	cmp	r2, r1
   15690:	1a000002 	bne	156a0 <CUSBMIDIHostDevice::TimerHandler(unsigned int)+0x18>
   15694:	e3a02000 	mov	r2, #0
   15698:	e5802028 	str	r2, [r0, #40]	@ 0x28
   1569c:	eaffff28 	b	15344 <CUSBMIDIHostDevice::StartRequest()>
   156a0:	e30b158c 	movw	r1, #46476	@ 0xb58c
   156a4:	e3401003 	movt	r1, #3
   156a8:	e30b0610 	movw	r0, #46608	@ 0xb610
   156ac:	e3400003 	movt	r0, #3
   156b0:	e3a020fe 	mov	r2, #254	@ 0xfe
   156b4:	e92d4010 	push	{r4, lr}
   156b8:	eb0059c7 	bl	2bddc <assertion_failed>

000156bc <CUSBMIDIHostDevice::Configure()>:
   156bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   156c0:	e1a05000 	mov	r5, r0
   156c4:	ebffebb5 	bl	105a0 <CUSBFunction::GetNumEndpoints() const>
   156c8:	e3500000 	cmp	r0, #0
   156cc:	0a00004a 	beq	157fc <CUSBMIDIHostDevice::Configure()+0x140>
   156d0:	e1a00005 	mov	r0, r5
   156d4:	ebffebbd 	bl	105d0 <CUSBFunction::GetDevice() const>
   156d8:	ebffe43b 	bl	e7cc <CUSBDevice::GetDeviceDescriptor() const>
   156dc:	e3500000 	cmp	r0, #0
   156e0:	0a000067 	beq	15884 <CUSBMIDIHostDevice::Configure()+0x1c8>
   156e4:	e1d020b8 	ldrh	r2, [r0, #8]
   156e8:	e3003582 	movw	r3, #1410	@ 0x582
   156ec:	e1520003 	cmp	r2, r3
   156f0:	13a07000 	movne	r7, #0
   156f4:	0300312a 	movweq	r3, #298	@ 0x12a
   156f8:	01d070ba 	ldrheq	r7, [r0, #10]
   156fc:	00477003 	subeq	r7, r7, r3
   15700:	016f7f17 	clzeq	r7, r7
   15704:	01a072a7 	lsreq	r7, r7, #5
   15708:	e3a01005 	mov	r1, #5
   1570c:	e1a00005 	mov	r0, r5
   15710:	ebffebce 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   15714:	e2504000 	subs	r4, r0, #0
   15718:	0a00003c 	beq	15810 <CUSBMIDIHostDevice::Configure()+0x154>
   1571c:	e5d43003 	ldrb	r3, [r4, #3]
   15720:	e203303e 	and	r3, r3, #62	@ 0x3e
   15724:	e3530002 	cmp	r3, #2
   15728:	1afffff6 	bne	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   1572c:	e3570000 	cmp	r7, #0
   15730:	0a000010 	beq	15778 <CUSBMIDIHostDevice::Configure()+0xbc>
   15734:	e1d430d2 	ldrsb	r3, [r4, #2]
   15738:	e3530000 	cmp	r3, #0
   1573c:	ba000017 	blt	157a0 <CUSBMIDIHostDevice::Configure()+0xe4>
   15740:	e595301c 	ldr	r3, [r5, #28]
   15744:	e3530000 	cmp	r3, #0
   15748:	1a00002b 	bne	157fc <CUSBMIDIHostDevice::Configure()+0x140>
   1574c:	e3a00014 	mov	r0, #20
   15750:	eb008273 	bl	36124 <operator new(unsigned int)>
   15754:	e1a06000 	mov	r6, r0
   15758:	e1a00005 	mov	r0, r5
   1575c:	ebffeb9b 	bl	105d0 <CUSBFunction::GetDevice() const>
   15760:	e1a02004 	mov	r2, r4
   15764:	e1a01000 	mov	r1, r0
   15768:	e1a00006 	mov	r0, r6
   1576c:	ebffe9a5 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   15770:	e585601c 	str	r6, [r5, #28]
   15774:	eaffffe3 	b	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   15778:	e3a01025 	mov	r1, #37	@ 0x25
   1577c:	e1a00005 	mov	r0, r5
   15780:	ebffebb2 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   15784:	e3500000 	cmp	r0, #0
   15788:	0affffde 	beq	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   1578c:	e5d43000 	ldrb	r3, [r4]
   15790:	e0843003 	add	r3, r4, r3
   15794:	e1500003 	cmp	r0, r3
   15798:	1affffda 	bne	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   1579c:	eaffffe4 	b	15734 <CUSBMIDIHostDevice::Configure()+0x78>
   157a0:	e5953018 	ldr	r3, [r5, #24]
   157a4:	e3530000 	cmp	r3, #0
   157a8:	1a000013 	bne	157fc <CUSBMIDIHostDevice::Configure()+0x140>
   157ac:	e3a00014 	mov	r0, #20
   157b0:	eb00825b 	bl	36124 <operator new(unsigned int)>
   157b4:	e1a06000 	mov	r6, r0
   157b8:	e1a00005 	mov	r0, r5
   157bc:	ebffeb83 	bl	105d0 <CUSBFunction::GetDevice() const>
   157c0:	e1a02004 	mov	r2, r4
   157c4:	e1a01000 	mov	r1, r0
   157c8:	e1a00006 	mov	r0, r6
   157cc:	ebffe98d 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   157d0:	e5856018 	str	r6, [r5, #24]
   157d4:	e5952024 	ldr	r2, [r5, #36]	@ 0x24
   157d8:	e30f0ffc 	movw	r0, #65532	@ 0xfffc
   157dc:	e1d430b4 	ldrh	r3, [r4, #4]
   157e0:	e3520000 	cmp	r2, #0
   157e4:	e0000003 	and	r0, r0, r3
   157e8:	e1c502b0 	strh	r0, [r5, #32]
   157ec:	1a00001e 	bne	1586c <CUSBMIDIHostDevice::Configure()+0x1b0>
   157f0:	eb008251 	bl	3613c <operator new[](unsigned int)>
   157f4:	e5850024 	str	r0, [r5, #36]	@ 0x24
   157f8:	eaffffc2 	b	15708 <CUSBMIDIHostDevice::Configure()+0x4c>
   157fc:	e59f10cc 	ldr	r1, [pc, #204]	@ 158d0 <CUSBMIDIHostDevice::Configure()+0x214>
   15800:	e1a00005 	mov	r0, r5
   15804:	ebffeb9c 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   15808:	e3a00000 	mov	r0, #0
   1580c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   15810:	e5953018 	ldr	r3, [r5, #24]
   15814:	e3530000 	cmp	r3, #0
   15818:	0afffff7 	beq	157fc <CUSBMIDIHostDevice::Configure()+0x140>
   1581c:	e1a00005 	mov	r0, r5
   15820:	ebffea97 	bl	10284 <CUSBFunction::Configure()>
   15824:	e3500000 	cmp	r0, #0
   15828:	0a00001b 	beq	1589c <CUSBMIDIHostDevice::Configure()+0x1e0>
   1582c:	e5953014 	ldr	r3, [r5, #20]
   15830:	e3530000 	cmp	r3, #0
   15834:	1a00001f 	bne	158b8 <CUSBMIDIHostDevice::Configure()+0x1fc>
   15838:	e3a00020 	mov	r0, #32
   1583c:	eb008238 	bl	36124 <operator new(unsigned int)>
   15840:	e1a04000 	mov	r4, r0
   15844:	eb002094 	bl	1da9c <CUSBMIDIDevice::CUSBMIDIDevice()>
   15848:	e1a00004 	mov	r0, r4
   1584c:	e1a02005 	mov	r2, r5
   15850:	e5854014 	str	r4, [r5, #20]
   15854:	e3051210 	movw	r1, #21008	@ 0x5210
   15858:	e3401001 	movt	r1, #1
   1585c:	eb0021e9 	bl	1e008 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)>
   15860:	e1a00005 	mov	r0, r5
   15864:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   15868:	eafffeb5 	b	15344 <CUSBMIDIHostDevice::StartRequest()>
   1586c:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15870:	e3401003 	movt	r1, #3
   15874:	e30b066c 	movw	r0, #46700	@ 0xb66c
   15878:	e3400003 	movt	r0, #3
   1587c:	e3a0207e 	mov	r2, #126	@ 0x7e
   15880:	eb005955 	bl	2bddc <assertion_failed>
   15884:	e30b158c 	movw	r1, #46476	@ 0xb58c
   15888:	e3401003 	movt	r1, #3
   1588c:	e30b0658 	movw	r0, #46680	@ 0xb658
   15890:	e3400003 	movt	r0, #3
   15894:	e3a02050 	mov	r2, #80	@ 0x50
   15898:	eb00594f 	bl	2bddc <assertion_failed>
   1589c:	eb0063c9 	bl	2e7c8 <CLogger::Get()>
   158a0:	e59f1028 	ldr	r1, [pc, #40]	@ 158d0 <CUSBMIDIHostDevice::Configure()+0x214>
   158a4:	e3a02001 	mov	r2, #1
   158a8:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   158ac:	e3403003 	movt	r3, #3
   158b0:	eb00658d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   158b4:	eaffffd3 	b	15808 <CUSBMIDIHostDevice::Configure()+0x14c>
   158b8:	e30b158c 	movw	r1, #46476	@ 0xb58c
   158bc:	e3401003 	movt	r1, #3
   158c0:	e30b0684 	movw	r0, #46724	@ 0xb684
   158c4:	e3400003 	movt	r0, #3
   158c8:	e3a020a0 	mov	r2, #160	@ 0xa0
   158cc:	eb005942 	bl	2bddc <assertion_failed>
   158d0:	0003f494 	.word	0x0003f494

000158d4 <CUSBMouseDevice::~CUSBMouseDevice()>:
   158d4:	e92d4010 	push	{r4, lr}
   158d8:	e1a04000 	mov	r4, r0
   158dc:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   158e0:	e59f3044 	ldr	r3, [pc, #68]	@ 1592c <CUSBMouseDevice::~CUSBMouseDevice()+0x58>
   158e4:	e3500000 	cmp	r0, #0
   158e8:	e5843000 	str	r3, [r4]
   158ec:	0a000002 	beq	158fc <CUSBMouseDevice::~CUSBMouseDevice()+0x28>
   158f0:	e5903000 	ldr	r3, [r0]
   158f4:	e5933004 	ldr	r3, [r3, #4]
   158f8:	e12fff33 	blx	r3
   158fc:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
   15900:	e3a03000 	mov	r3, #0
   15904:	e5843024 	str	r3, [r4, #36]	@ 0x24
   15908:	e1500003 	cmp	r0, r3
   1590c:	0a000000 	beq	15914 <CUSBMouseDevice::~CUSBMouseDevice()+0x40>
   15910:	eb008215 	bl	3616c <operator delete[](void*)>
   15914:	e3a03000 	mov	r3, #0
   15918:	e1a00004 	mov	r0, r4
   1591c:	e5843028 	str	r3, [r4, #40]	@ 0x28
   15920:	ebfff5fa 	bl	13110 <CUSBHIDDevice::~CUSBHIDDevice()>
   15924:	e1a00004 	mov	r0, r4
   15928:	e8bd8010 	pop	{r4, pc}
   1592c:	0003f4a8 	.word	0x0003f4a8

00015930 <CUSBMouseDevice::~CUSBMouseDevice()>:
   15930:	e92d4010 	push	{r4, lr}
   15934:	e1a04000 	mov	r4, r0
   15938:	ebffffe5 	bl	158d4 <CUSBMouseDevice::~CUSBMouseDevice()>
   1593c:	e1a00004 	mov	r0, r4
   15940:	e3a01058 	mov	r1, #88	@ 0x58
   15944:	eb00820e 	bl	36184 <operator delete(void*, unsigned int)>
   15948:	e1a00004 	mov	r0, r4
   1594c:	e8bd8010 	pop	{r4, pc}

00015950 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)>:
   15950:	e92d4010 	push	{r4, lr}
   15954:	e3a02000 	mov	r2, #0
   15958:	e1a04000 	mov	r4, r0
   1595c:	ebfff5d5 	bl	130b8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   15960:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   15964:	e59f200c 	ldr	r2, [pc, #12]	@ 15978 <CUSBMouseDevice::CUSBMouseDevice(CUSBFunction*)+0x28>
   15968:	e1a00004 	mov	r0, r4
   1596c:	e4842024 	str	r2, [r4], #36	@ 0x24
   15970:	f444078f 	vst1.32	{d16}, [r4]
   15974:	e8bd8010 	pop	{r4, pc}
   15978:	0003f4a8 	.word	0x0003f4a8

0001597c <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>:
   1597c:	e3510000 	cmp	r1, #0
   15980:	e92d4010 	push	{r4, lr}
   15984:	0a000014 	beq	159dc <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x60>
   15988:	e3530020 	cmp	r3, #32
   1598c:	8a000018 	bhi	159f4 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x78>
   15990:	e3530000 	cmp	r3, #0
   15994:	0a00000e 	beq	159d4 <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)+0x58>
   15998:	e3530018 	cmp	r3, #24
   1599c:	e081c1a2 	add	ip, r1, r2, lsr #3
   159a0:	e2020007 	and	r0, r2, #7
   159a4:	e79121a2 	ldr	r2, [r1, r2, lsr #3]
   159a8:	82433018 	subhi	r3, r3, #24
   159ac:	93e01000 	mvnls	r1, #0
   159b0:	859c1003 	ldrhi	r1, [ip, #3]
   159b4:	83e0c000 	mvnhi	ip, #0
   159b8:	e1a02032 	lsr	r2, r2, r0
   159bc:	83c224ff 	bichi	r2, r2, #-16777216	@ 0xff000000
   159c0:	81a01031 	lsrhi	r1, r1, r0
   159c4:	81c1331c 	bichi	r3, r1, ip, lsl r3
   159c8:	81820c03 	orrhi	r0, r2, r3, lsl #24
   159cc:	91c20311 	bicls	r0, r2, r1, lsl r3
   159d0:	e8bd8010 	pop	{r4, pc}
   159d4:	e1a00003 	mov	r0, r3
   159d8:	e8bd8010 	pop	{r4, pc}
   159dc:	e30b1698 	movw	r1, #46744	@ 0xb698
   159e0:	e3401003 	movt	r1, #3
   159e4:	e30b0204 	movw	r0, #45572	@ 0xb204
   159e8:	e3400003 	movt	r0, #3
   159ec:	e3a020ac 	mov	r2, #172	@ 0xac
   159f0:	eb0058f9 	bl	2bddc <assertion_failed>
   159f4:	e30b1698 	movw	r1, #46744	@ 0xb698
   159f8:	e3401003 	movt	r1, #3
   159fc:	e30b0210 	movw	r0, #45584	@ 0xb210
   15a00:	e3400003 	movt	r0, #3
   15a04:	e3a020ad 	mov	r2, #173	@ 0xad
   15a08:	eb0058f3 	bl	2bddc <assertion_failed>

00015a0c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>:
   15a0c:	e3510000 	cmp	r1, #0
   15a10:	e92d4010 	push	{r4, lr}
   15a14:	0a00001e 	beq	15a94 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x88>
   15a18:	e3530020 	cmp	r3, #32
   15a1c:	8a000022 	bhi	15aac <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0xa0>
   15a20:	e3530000 	cmp	r3, #0
   15a24:	0a000015 	beq	15a80 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x74>
   15a28:	e79101a2 	ldr	r0, [r1, r2, lsr #3]
   15a2c:	e202c007 	and	ip, r2, #7
   15a30:	e081e1a2 	add	lr, r1, r2, lsr #3
   15a34:	e3530018 	cmp	r3, #24
   15a38:	e1a00c30 	lsr	r0, r0, ip
   15a3c:	9a000011 	bls	15a88 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x7c>
   15a40:	e59e2003 	ldr	r2, [lr, #3]
   15a44:	e2431018 	sub	r1, r3, #24
   15a48:	e3530020 	cmp	r3, #32
   15a4c:	e3c004ff 	bic	r0, r0, #-16777216	@ 0xff000000
   15a50:	e1a02c32 	lsr	r2, r2, ip
   15a54:	e3e0c000 	mvn	ip, #0
   15a58:	e1c2211c 	bic	r2, r2, ip, lsl r1
   15a5c:	e1800c02 	orr	r0, r0, r2, lsl #24
   15a60:	08bd8010 	popeq	{r4, pc}
   15a64:	e3a01001 	mov	r1, #1
   15a68:	e2432001 	sub	r2, r3, #1
   15a6c:	e0102211 	ands	r2, r0, r1, lsl r2
   15a70:	11a01311 	lslne	r1, r1, r3
   15a74:	12611000 	rsbne	r1, r1, #0
   15a78:	11800001 	orrne	r0, r0, r1
   15a7c:	e8bd8010 	pop	{r4, pc}
   15a80:	e1a00003 	mov	r0, r3
   15a84:	e8bd8010 	pop	{r4, pc}
   15a88:	e3e02000 	mvn	r2, #0
   15a8c:	e1c00312 	bic	r0, r0, r2, lsl r3
   15a90:	eafffff3 	b	15a64 <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)+0x58>
   15a94:	e30b1698 	movw	r1, #46744	@ 0xb698
   15a98:	e3401003 	movt	r1, #3
   15a9c:	e30b0204 	movw	r0, #45572	@ 0xb204
   15aa0:	e3400003 	movt	r0, #3
   15aa4:	e3a020cf 	mov	r2, #207	@ 0xcf
   15aa8:	eb0058cb 	bl	2bddc <assertion_failed>
   15aac:	e30b1698 	movw	r1, #46744	@ 0xb698
   15ab0:	e3401003 	movt	r1, #3
   15ab4:	e30b0210 	movw	r0, #45584	@ 0xb210
   15ab8:	e3400003 	movt	r0, #3
   15abc:	e3a020d0 	mov	r2, #208	@ 0xd0
   15ac0:	eb0058c5 	bl	2bddc <assertion_failed>

00015ac4 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)>:
   15ac4:	e92d4770 	push	{r4, r5, r6, r8, r9, sl, lr}
   15ac8:	e2515000 	subs	r5, r1, #0
   15acc:	e24dd00c 	sub	sp, sp, #12
   15ad0:	0a000003 	beq	15ae4 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   15ad4:	e5903034 	ldr	r3, [r0, #52]	@ 0x34
   15ad8:	e1a04000 	mov	r4, r0
   15adc:	e1530002 	cmp	r3, r2
   15ae0:	0a000001 	beq	15aec <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x28>
   15ae4:	e28dd00c 	add	sp, sp, #12
   15ae8:	e8bd8770 	pop	{r4, r5, r6, r8, r9, sl, pc}
   15aec:	e590a024 	ldr	sl, [r0, #36]	@ 0x24
   15af0:	e35a0000 	cmp	sl, #0
   15af4:	0afffffa 	beq	15ae4 <CUSBMouseDevice::ReportHandler(unsigned char const*, unsigned int)+0x20>
   15af8:	e5903038 	ldr	r3, [r0, #56]	@ 0x38
   15afc:	e3e0907e 	mvn	r9, #126	@ 0x7e
   15b00:	e590203c 	ldr	r2, [r0, #60]	@ 0x3c
   15b04:	ebffff9c 	bl	1597c <CUSBMouseDevice::ExtractUnsigned(void const*, unsigned int, unsigned int)>
   15b08:	e5943040 	ldr	r3, [r4, #64]	@ 0x40
   15b0c:	e1a08000 	mov	r8, r0
   15b10:	e5942044 	ldr	r2, [r4, #68]	@ 0x44
   15b14:	e1a01005 	mov	r1, r5
   15b18:	e1a00004 	mov	r0, r4
   15b1c:	ebffffba 	bl	15a0c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   15b20:	e1500009 	cmp	r0, r9
   15b24:	a1a06000 	movge	r6, r0
   15b28:	b1a06009 	movlt	r6, r9
   15b2c:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
   15b30:	e356007f 	cmp	r6, #127	@ 0x7f
   15b34:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   15b38:	e1a01005 	mov	r1, r5
   15b3c:	e1a00004 	mov	r0, r4
   15b40:	a3a0607f 	movge	r6, #127	@ 0x7f
   15b44:	ebffffb0 	bl	15a0c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   15b48:	e1500009 	cmp	r0, r9
   15b4c:	a1a09000 	movge	r9, r0
   15b50:	e5943050 	ldr	r3, [r4, #80]	@ 0x50
   15b54:	e5942054 	ldr	r2, [r4, #84]	@ 0x54
   15b58:	e359007f 	cmp	r9, #127	@ 0x7f
   15b5c:	e1a01005 	mov	r1, r5
   15b60:	e1a00004 	mov	r0, r4
   15b64:	a3a0907f 	movge	r9, #127	@ 0x7f
   15b68:	ebffffa7 	bl	15a0c <CUSBMouseDevice::ExtractSigned(void const*, unsigned int, unsigned int)>
   15b6c:	e2081001 	and	r1, r8, #1
   15b70:	e3180002 	tst	r8, #2
   15b74:	13811002 	orrne	r1, r1, #2
   15b78:	e3180004 	tst	r8, #4
   15b7c:	13811004 	orrne	r1, r1, #4
   15b80:	e3180008 	tst	r8, #8
   15b84:	13811008 	orrne	r1, r1, #8
   15b88:	e3180010 	tst	r8, #16
   15b8c:	e1a0c000 	mov	ip, r0
   15b90:	13811010 	orrne	r1, r1, #16
   15b94:	e1a03009 	mov	r3, r9
   15b98:	e1a02006 	mov	r2, r6
   15b9c:	e1a0000a 	mov	r0, sl
   15ba0:	e58dc000 	str	ip, [sp]
   15ba4:	eb002588 	bl	1f1cc <CMouseDevice::ReportHandler(unsigned int, int, int, int)>
   15ba8:	e28dd00c 	add	sp, sp, #12
   15bac:	e8bd8770 	pop	{r4, r5, r6, r8, r9, sl, pc}

00015bb0 <CUSBMouseDevice::DecodeReport()>:
   15bb0:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   15bb4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15bb8:	e5902028 	ldr	r2, [r0, #40]	@ 0x28
   15bbc:	e24dd024 	sub	sp, sp, #36	@ 0x24
   15bc0:	e28d3010 	add	r3, sp, #16
   15bc4:	e3520000 	cmp	r2, #0
   15bc8:	f4430a1f 	vst1.8	{d16-d17}, [r3 :64]
   15bcc:	0a0000b3 	beq	15ea0 <CUSBMouseDevice::DecodeReport()+0x2f0>
   15bd0:	e1d032bc 	ldrh	r3, [r0, #44]	@ 0x2c
   15bd4:	e1a0a000 	mov	sl, r0
   15bd8:	e3530000 	cmp	r3, #0
   15bdc:	0a0000b5 	beq	15eb8 <CUSBMouseDevice::DecodeReport()+0x308>
   15be0:	e3a0c000 	mov	ip, #0
   15be4:	e58da004 	str	sl, [sp, #4]
   15be8:	e1a0000c 	mov	r0, ip
   15bec:	e1a0400c 	mov	r4, ip
   15bf0:	e1a0100c 	mov	r1, ip
   15bf4:	e1a0700c 	mov	r7, ip
   15bf8:	e1a0b00c 	mov	fp, ip
   15bfc:	e1a0600c 	mov	r6, ip
   15c00:	e1a0e00c 	mov	lr, ip
   15c04:	ea00000e 	b	15c44 <CUSBMouseDevice::DecodeReport()+0x94>
   15c08:	e3550008 	cmp	r5, #8
   15c0c:	0a000044 	beq	15d24 <CUSBMouseDevice::DecodeReport()+0x174>
   15c10:	e3550084 	cmp	r5, #132	@ 0x84
   15c14:	1a00005b 	bne	15d88 <CUSBMouseDevice::DecodeReport()+0x1d8>
   15c18:	e35c0000 	cmp	ip, #0
   15c1c:	0a000006 	beq	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15c20:	e3570000 	cmp	r7, #0
   15c24:	10480007 	subne	r0, r8, r7
   15c28:	01a07008 	moveq	r7, r8
   15c2c:	116f0f10 	clzne	r0, r0
   15c30:	028ee008 	addeq	lr, lr, #8
   15c34:	01a0000c 	moveq	r0, ip
   15c38:	11a002a0 	lsrne	r0, r0, #5
   15c3c:	e3530000 	cmp	r3, #0
   15c40:	0a000014 	beq	15c98 <CUSBMouseDevice::DecodeReport()+0xe8>
   15c44:	e1d250d0 	ldrsb	r5, [r2]
   15c48:	e2058003 	and	r8, r5, #3
   15c4c:	e3580001 	cmp	r8, #1
   15c50:	0a00002e 	beq	15d10 <CUSBMouseDevice::DecodeReport()+0x160>
   15c54:	e3580002 	cmp	r8, #2
   15c58:	0a000025 	beq	15cf4 <CUSBMouseDevice::DecodeReport()+0x144>
   15c5c:	e3580000 	cmp	r8, #0
   15c60:	1a000013 	bne	15cb4 <CUSBMouseDevice::DecodeReport()+0x104>
   15c64:	e2433001 	sub	r3, r3, #1
   15c68:	e2822001 	add	r2, r2, #1
   15c6c:	e6ff3073 	uxth	r3, r3
   15c70:	e20550fc 	and	r5, r5, #252	@ 0xfc
   15c74:	e35500a0 	cmp	r5, #160	@ 0xa0
   15c78:	0a00001b 	beq	15cec <CUSBMouseDevice::DecodeReport()+0x13c>
   15c7c:	daffffe1 	ble	15c08 <CUSBMouseDevice::DecodeReport()+0x58>
   15c80:	e35500c0 	cmp	r5, #192	@ 0xc0
   15c84:	1affffec 	bne	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15c88:	e2511001 	subs	r1, r1, #1
   15c8c:	03a00000 	moveq	r0, #0
   15c90:	e3530000 	cmp	r3, #0
   15c94:	1affffea 	bne	15c44 <CUSBMouseDevice::DecodeReport()+0x94>
   15c98:	e28ee007 	add	lr, lr, #7
   15c9c:	e59da004 	ldr	sl, [sp, #4]
   15ca0:	e1a0e1ae 	lsr	lr, lr, #3
   15ca4:	e58a7030 	str	r7, [sl, #48]	@ 0x30
   15ca8:	e58ae034 	str	lr, [sl, #52]	@ 0x34
   15cac:	e28dd024 	add	sp, sp, #36	@ 0x24
   15cb0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cb4:	e1d280d3 	ldrsb	r8, [r2, #3]
   15cb8:	e2433005 	sub	r3, r3, #5
   15cbc:	e1d290d2 	ldrsb	r9, [r2, #2]
   15cc0:	e20550fc 	and	r5, r5, #252	@ 0xfc
   15cc4:	e6ff3073 	uxth	r3, r3
   15cc8:	e2822005 	add	r2, r2, #5
   15ccc:	e1a08808 	lsl	r8, r8, #16
   15cd0:	e35500a0 	cmp	r5, #160	@ 0xa0
   15cd4:	e1888409 	orr	r8, r8, r9, lsl #8
   15cd8:	e15290d4 	ldrsb	r9, [r2, #-4]
   15cdc:	e1888009 	orr	r8, r8, r9
   15ce0:	e15290d1 	ldrsb	r9, [r2, #-1]
   15ce4:	e1888c09 	orr	r8, r8, r9, lsl #24
   15ce8:	1affffe3 	bne	15c7c <CUSBMouseDevice::DecodeReport()+0xcc>
   15cec:	e2811001 	add	r1, r1, #1
   15cf0:	eaffffd1 	b	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15cf4:	e5d28001 	ldrb	r8, [r2, #1]
   15cf8:	e2433003 	sub	r3, r3, #3
   15cfc:	e1d290d2 	ldrsb	r9, [r2, #2]
   15d00:	e2822003 	add	r2, r2, #3
   15d04:	e6ff3073 	uxth	r3, r3
   15d08:	e1888409 	orr	r8, r8, r9, lsl #8
   15d0c:	eaffffd7 	b	15c70 <CUSBMouseDevice::DecodeReport()+0xc0>
   15d10:	e2433002 	sub	r3, r3, #2
   15d14:	e1d280d1 	ldrsb	r8, [r2, #1]
   15d18:	e2822002 	add	r2, r2, #2
   15d1c:	e6ff3073 	uxth	r3, r3
   15d20:	eaffffd2 	b	15c70 <CUSBMouseDevice::DecodeReport()+0xc0>
   15d24:	e3580002 	cmp	r8, #2
   15d28:	03a0c001 	moveq	ip, #1
   15d2c:	0affffc2 	beq	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15d30:	e3580001 	cmp	r8, #1
   15d34:	0a000023 	beq	15dc8 <CUSBMouseDevice::DecodeReport()+0x218>
   15d38:	e3500000 	cmp	r0, #0
   15d3c:	0affffbe 	beq	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15d40:	e3580031 	cmp	r8, #49	@ 0x31
   15d44:	0a000009 	beq	15d70 <CUSBMouseDevice::DecodeReport()+0x1c0>
   15d48:	e3580038 	cmp	r8, #56	@ 0x38
   15d4c:	0a00002b 	beq	15e00 <CUSBMouseDevice::DecodeReport()+0x250>
   15d50:	e3580030 	cmp	r8, #48	@ 0x30
   15d54:	1affffb8 	bne	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15d58:	e28d5020 	add	r5, sp, #32
   15d5c:	e3a08001 	mov	r8, #1
   15d60:	e0855104 	add	r5, r5, r4, lsl #2
   15d64:	e0844008 	add	r4, r4, r8
   15d68:	e5058010 	str	r8, [r5, #-16]
   15d6c:	eaffffb2 	b	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15d70:	e3a08002 	mov	r8, #2
   15d74:	e28d5020 	add	r5, sp, #32
   15d78:	e0855814 	add	r5, r5, r4, lsl r8
   15d7c:	e2844001 	add	r4, r4, #1
   15d80:	e5058010 	str	r8, [r5, #-16]
   15d84:	eaffffac 	b	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15d88:	e3500000 	cmp	r0, #0
   15d8c:	0affffaa 	beq	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15d90:	e3550074 	cmp	r5, #116	@ 0x74
   15d94:	01a06008 	moveq	r6, r8
   15d98:	0affffa7 	beq	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15d9c:	da00000c 	ble	15dd4 <CUSBMouseDevice::DecodeReport()+0x224>
   15da0:	e3550080 	cmp	r5, #128	@ 0x80
   15da4:	0a000002 	beq	15db4 <CUSBMouseDevice::DecodeReport()+0x204>
   15da8:	e3550094 	cmp	r5, #148	@ 0x94
   15dac:	01a0b008 	moveq	fp, r8
   15db0:	eaffffa1 	b	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15db4:	e2088003 	and	r8, r8, #3
   15db8:	e3580002 	cmp	r8, #2
   15dbc:	0a000015 	beq	15e18 <CUSBMouseDevice::DecodeReport()+0x268>
   15dc0:	e02ee69b 	mla	lr, fp, r6, lr
   15dc4:	eaffff9c 	b	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15dc8:	e3570000 	cmp	r7, #0
   15dcc:	03a00001 	moveq	r0, #1
   15dd0:	eaffff99 	b	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15dd4:	e3550004 	cmp	r5, #4
   15dd8:	13a00001 	movne	r0, #1
   15ddc:	1affff96 	bne	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15de0:	e3580009 	cmp	r8, #9
   15de4:	1affff94 	bne	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15de8:	e28d5020 	add	r5, sp, #32
   15dec:	e3a08000 	mov	r8, #0
   15df0:	e0855104 	add	r5, r5, r4, lsl #2
   15df4:	e2844001 	add	r4, r4, #1
   15df8:	e5058010 	str	r8, [r5, #-16]
   15dfc:	eaffff8e 	b	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15e00:	e28d5020 	add	r5, sp, #32
   15e04:	e3a08003 	mov	r8, #3
   15e08:	e0855104 	add	r5, r5, r4, lsl #2
   15e0c:	e2844001 	add	r4, r4, #1
   15e10:	e5058010 	str	r8, [r5, #-16]
   15e14:	eaffff88 	b	15c3c <CUSBMouseDevice::DecodeReport()+0x8c>
   15e18:	e3540003 	cmp	r4, #3
   15e1c:	8a000028 	bhi	15ec4 <CUSBMouseDevice::DecodeReport()+0x314>
   15e20:	e3540000 	cmp	r4, #0
   15e24:	0a00001b 	beq	15e98 <CUSBMouseDevice::DecodeReport()+0x2e8>
   15e28:	e28d5010 	add	r5, sp, #16
   15e2c:	e59da004 	ldr	sl, [sp, #4]
   15e30:	e0859104 	add	r9, r5, r4, lsl #2
   15e34:	e1a08005 	mov	r8, r5
   15e38:	e1a0400e 	mov	r4, lr
   15e3c:	e58dc008 	str	ip, [sp, #8]
   15e40:	e58d700c 	str	r7, [sp, #12]
   15e44:	ea000008 	b	15e6c <CUSBMouseDevice::DecodeReport()+0x2bc>
   15e48:	e08a718c 	add	r7, sl, ip, lsl #3
   15e4c:	e35c0000 	cmp	ip, #0
   15e50:	01a0500b 	moveq	r5, fp
   15e54:	11a05006 	movne	r5, r6
   15e58:	e1580009 	cmp	r8, r9
   15e5c:	e587403c 	str	r4, [r7, #60]	@ 0x3c
   15e60:	e0844005 	add	r4, r4, r5
   15e64:	e5875038 	str	r5, [r7, #56]	@ 0x38
   15e68:	0a000008 	beq	15e90 <CUSBMouseDevice::DecodeReport()+0x2e0>
   15e6c:	e498c004 	ldr	ip, [r8], #4
   15e70:	e35c0003 	cmp	ip, #3
   15e74:	9afffff3 	bls	15e48 <CUSBMouseDevice::DecodeReport()+0x298>
   15e78:	e30b1698 	movw	r1, #46744	@ 0xb698
   15e7c:	e3401003 	movt	r1, #3
   15e80:	e30b06c4 	movw	r0, #46788	@ 0xb6c4
   15e84:	e3400003 	movt	r0, #3
   15e88:	e3002169 	movw	r2, #361	@ 0x169
   15e8c:	eb0057d2 	bl	2bddc <assertion_failed>
   15e90:	e59dc008 	ldr	ip, [sp, #8]
   15e94:	e59d700c 	ldr	r7, [sp, #12]
   15e98:	e3a04000 	mov	r4, #0
   15e9c:	eaffffc7 	b	15dc0 <CUSBMouseDevice::DecodeReport()+0x210>
   15ea0:	e30b1698 	movw	r1, #46744	@ 0xb698
   15ea4:	e3401003 	movt	r1, #3
   15ea8:	e30b0220 	movw	r0, #45600	@ 0xb220
   15eac:	e3400003 	movt	r0, #3
   15eb0:	e3a020eb 	mov	r2, #235	@ 0xeb
   15eb4:	eb0057c8 	bl	2bddc <assertion_failed>
   15eb8:	e1a0e003 	mov	lr, r3
   15ebc:	e1a07003 	mov	r7, r3
   15ec0:	eaffff77 	b	15ca4 <CUSBMouseDevice::DecodeReport()+0xf4>
   15ec4:	e30b1698 	movw	r1, #46744	@ 0xb698
   15ec8:	e3401003 	movt	r1, #3
   15ecc:	e30b06a8 	movw	r0, #46760	@ 0xb6a8
   15ed0:	e3400003 	movt	r0, #3
   15ed4:	e3002165 	movw	r2, #357	@ 0x165
   15ed8:	eb0057bf 	bl	2bddc <assertion_failed>

00015edc <CUSBMouseDevice::Configure()>:
   15edc:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   15ee0:	e3a01021 	mov	r1, #33	@ 0x21
   15ee4:	e1a04000 	mov	r4, r0
   15ee8:	e24dd014 	sub	sp, sp, #20
   15eec:	ebffe9d7 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   15ef0:	e2505000 	subs	r5, r0, #0
   15ef4:	0a000003 	beq	15f08 <CUSBMouseDevice::Configure()+0x2c>
   15ef8:	e1d530b7 	ldrh	r3, [r5, #7]
   15efc:	e6ff0073 	uxth	r0, r3
   15f00:	e3500000 	cmp	r0, #0
   15f04:	1a000005 	bne	15f20 <CUSBMouseDevice::Configure()+0x44>
   15f08:	e59f1118 	ldr	r1, [pc, #280]	@ 16028 <CUSBMouseDevice::Configure()+0x14c>
   15f0c:	e1a00004 	mov	r0, r4
   15f10:	ebffe9d9 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   15f14:	e3a00000 	mov	r0, #0
   15f18:	e28dd014 	add	sp, sp, #20
   15f1c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15f20:	e1c432bc 	strh	r3, [r4, #44]	@ 0x2c
   15f24:	eb008084 	bl	3613c <operator new[](unsigned int)>
   15f28:	e1a03000 	mov	r3, r0
   15f2c:	e1a00004 	mov	r0, r4
   15f30:	e5843028 	str	r3, [r4, #40]	@ 0x28
   15f34:	ebffe9ba 	bl	10624 <CUSBFunction::GetHost() const>
   15f38:	e1a06000 	mov	r6, r0
   15f3c:	e1a00004 	mov	r0, r4
   15f40:	ebffe9ac 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   15f44:	e5d57006 	ldrb	r7, [r5, #6]
   15f48:	e5948028 	ldr	r8, [r4, #40]	@ 0x28
   15f4c:	e1a05000 	mov	r5, r0
   15f50:	e1d492bc 	ldrh	r9, [r4, #44]	@ 0x2c
   15f54:	e1a00004 	mov	r0, r4
   15f58:	ebffea10 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   15f5c:	e3a03000 	mov	r3, #0
   15f60:	e3a0c081 	mov	ip, #129	@ 0x81
   15f64:	e58d000c 	str	r0, [sp, #12]
   15f68:	e1a02007 	mov	r2, r7
   15f6c:	e1a01005 	mov	r1, r5
   15f70:	e1a00006 	mov	r0, r6
   15f74:	e58d9004 	str	r9, [sp, #4]
   15f78:	e58d8000 	str	r8, [sp]
   15f7c:	e58dc008 	str	ip, [sp, #8]
   15f80:	ebfff6dc 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   15f84:	e1d432bc 	ldrh	r3, [r4, #44]	@ 0x2c
   15f88:	e1500003 	cmp	r0, r3
   15f8c:	0a000008 	beq	15fb4 <CUSBMouseDevice::Configure()+0xd8>
   15f90:	eb00620c 	bl	2e7c8 <CLogger::Get()>
   15f94:	e59f108c 	ldr	r1, [pc, #140]	@ 16028 <CUSBMouseDevice::Configure()+0x14c>
   15f98:	e3a02001 	mov	r2, #1
   15f9c:	e30a3d30 	movw	r3, #44336	@ 0xad30
   15fa0:	e3403003 	movt	r3, #3
   15fa4:	eb0063d0 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   15fa8:	e3a00000 	mov	r0, #0
   15fac:	e28dd014 	add	sp, sp, #20
   15fb0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   15fb4:	e1a00004 	mov	r0, r4
   15fb8:	ebfffefc 	bl	15bb0 <CUSBMouseDevice::DecodeReport()>
   15fbc:	e5941034 	ldr	r1, [r4, #52]	@ 0x34
   15fc0:	e3510000 	cmp	r1, #0
   15fc4:	0affffd2 	beq	15f14 <CUSBMouseDevice::Configure()+0x38>
   15fc8:	e1a00004 	mov	r0, r4
   15fcc:	ebfff47a 	bl	131bc <CUSBHIDDevice::ConfigureHID(unsigned int)>
   15fd0:	e3500000 	cmp	r0, #0
   15fd4:	0a00000c 	beq	1600c <CUSBMouseDevice::Configure()+0x130>
   15fd8:	e3a00038 	mov	r0, #56	@ 0x38
   15fdc:	eb008050 	bl	36124 <operator new(unsigned int)>
   15fe0:	e5942050 	ldr	r2, [r4, #80]	@ 0x50
   15fe4:	e5941038 	ldr	r1, [r4, #56]	@ 0x38
   15fe8:	e1a05000 	mov	r5, r0
   15fec:	e2522000 	subs	r2, r2, #0
   15ff0:	13a02001 	movne	r2, #1
   15ff4:	eb002422 	bl	1f084 <CMouseDevice::CMouseDevice(unsigned int, bool)>
   15ff8:	e1a00004 	mov	r0, r4
   15ffc:	e5845024 	str	r5, [r4, #36]	@ 0x24
   16000:	e28dd014 	add	sp, sp, #20
   16004:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   16008:	eafff583 	b	1361c <CUSBHIDDevice::StartRequest()>
   1600c:	eb0061ed 	bl	2e7c8 <CLogger::Get()>
   16010:	e59f1010 	ldr	r1, [pc, #16]	@ 16028 <CUSBMouseDevice::Configure()+0x14c>
   16014:	e3a02001 	mov	r2, #1
   16018:	e30b3558 	movw	r3, #46424	@ 0xb558
   1601c:	e3403003 	movt	r3, #3
   16020:	eb0063b1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16024:	eaffffba 	b	15f14 <CUSBMouseDevice::Configure()+0x38>
   16028:	0003f4d8 	.word	0x0003f4d8

0001602c <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   1602c:	e5903020 	ldr	r3, [r0, #32]
   16030:	e92d4070 	push	{r4, r5, r6, lr}
   16034:	e1a04000 	mov	r4, r0
   16038:	e59f5090 	ldr	r5, [pc, #144]	@ 160d0 <CUSBPrinterDevice::~CUSBPrinterDevice()+0xa4>
   1603c:	e3530000 	cmp	r3, #0
   16040:	e5805000 	str	r5, [r0]
   16044:	1a000017 	bne	160a8 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x7c>
   16048:	e594501c 	ldr	r5, [r4, #28]
   1604c:	e3550000 	cmp	r5, #0
   16050:	0a000004 	beq	16068 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x3c>
   16054:	e1a00005 	mov	r0, r5
   16058:	ebffe7e4 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1605c:	e3a01014 	mov	r1, #20
   16060:	e1a00005 	mov	r0, r5
   16064:	eb008046 	bl	36184 <operator delete(void*, unsigned int)>
   16068:	e5945018 	ldr	r5, [r4, #24]
   1606c:	e3a03000 	mov	r3, #0
   16070:	e584301c 	str	r3, [r4, #28]
   16074:	e1550003 	cmp	r5, r3
   16078:	0a000004 	beq	16090 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x64>
   1607c:	e1a00005 	mov	r0, r5
   16080:	ebffe7da 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   16084:	e3a01014 	mov	r1, #20
   16088:	e1a00005 	mov	r0, r5
   1608c:	eb00803c 	bl	36184 <operator delete(void*, unsigned int)>
   16090:	e3a03000 	mov	r3, #0
   16094:	e1a00004 	mov	r0, r4
   16098:	e5843018 	str	r3, [r4, #24]
   1609c:	ebffe83e 	bl	1019c <CUSBFunction::~CUSBFunction()>
   160a0:	e1a00004 	mov	r0, r4
   160a4:	e8bd8070 	pop	{r4, r5, r6, pc}
   160a8:	eb005adf 	bl	2cc2c <CDeviceNameService::Get()>
   160ac:	e285102c 	add	r1, r5, #44	@ 0x2c
   160b0:	e5942020 	ldr	r2, [r4, #32]
   160b4:	e3a03000 	mov	r3, #0
   160b8:	eb005b01 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   160bc:	e5941020 	ldr	r1, [r4, #32]
   160c0:	e30400b0 	movw	r0, #16560	@ 0x40b0
   160c4:	e3400004 	movt	r0, #4
   160c8:	eb008195 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   160cc:	eaffffdd 	b	16048 <CUSBPrinterDevice::~CUSBPrinterDevice()+0x1c>
   160d0:	0003f4e8 	.word	0x0003f4e8

000160d4 <CUSBPrinterDevice::~CUSBPrinterDevice()>:
   160d4:	e92d4010 	push	{r4, lr}
   160d8:	e1a04000 	mov	r4, r0
   160dc:	ebffffd2 	bl	1602c <CUSBPrinterDevice::~CUSBPrinterDevice()>
   160e0:	e1a00004 	mov	r0, r4
   160e4:	e3a01024 	mov	r1, #36	@ 0x24
   160e8:	eb008025 	bl	36184 <operator delete(void*, unsigned int)>
   160ec:	e1a00004 	mov	r0, r4
   160f0:	e8bd8010 	pop	{r4, pc}

000160f4 <CUSBPrinterDevice::Write(void const*, unsigned int)>:
   160f4:	e92d4070 	push	{r4, r5, r6, lr}
   160f8:	e2515000 	subs	r5, r1, #0
   160fc:	e24dd008 	sub	sp, sp, #8
   16100:	0a000011 	beq	1614c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x58>
   16104:	e1a04002 	mov	r4, r2
   16108:	e3520000 	cmp	r2, #0
   1610c:	0a000014 	beq	16164 <CUSBPrinterDevice::Write(void const*, unsigned int)+0x70>
   16110:	e1a06000 	mov	r6, r0
   16114:	ebffe942 	bl	10624 <CUSBFunction::GetHost() const>
   16118:	e3500000 	cmp	r0, #0
   1611c:	0a000016 	beq	1617c <CUSBPrinterDevice::Write(void const*, unsigned int)+0x88>
   16120:	e596101c 	ldr	r1, [r6, #28]
   16124:	e3a03000 	mov	r3, #0
   16128:	e1a02005 	mov	r2, r5
   1612c:	e58d3000 	str	r3, [sp]
   16130:	e1a03004 	mov	r3, r4
   16134:	ebfff6a0 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   16138:	e3500000 	cmp	r0, #0
   1613c:	a1a00004 	movge	r0, r4
   16140:	b3e00000 	mvnlt	r0, #0
   16144:	e28dd008 	add	sp, sp, #8
   16148:	e8bd8070 	pop	{r4, r5, r6, pc}
   1614c:	e30b16dc 	movw	r1, #46812	@ 0xb6dc
   16150:	e3401003 	movt	r1, #3
   16154:	e30b0400 	movw	r0, #46080	@ 0xb400
   16158:	e3400003 	movt	r0, #3
   1615c:	e3a02088 	mov	r2, #136	@ 0x88
   16160:	eb00571d 	bl	2bddc <assertion_failed>
   16164:	e30b16dc 	movw	r1, #46812	@ 0xb6dc
   16168:	e3401003 	movt	r1, #3
   1616c:	e30b06ec 	movw	r0, #46828	@ 0xb6ec
   16170:	e3400003 	movt	r0, #3
   16174:	e3a02089 	mov	r2, #137	@ 0x89
   16178:	eb005717 	bl	2bddc <assertion_failed>
   1617c:	e30b16dc 	movw	r1, #46812	@ 0xb6dc
   16180:	e3401003 	movt	r1, #3
   16184:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   16188:	e3400003 	movt	r0, #3
   1618c:	e3a0208c 	mov	r2, #140	@ 0x8c
   16190:	eb005711 	bl	2bddc <assertion_failed>

00016194 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)>:
   16194:	e92d4010 	push	{r4, lr}
   16198:	e1a04000 	mov	r4, r0
   1619c:	ebffe8a7 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   161a0:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   161a4:	e2842018 	add	r2, r4, #24
   161a8:	e59f1018 	ldr	r1, [pc, #24]	@ 161c8 <CUSBPrinterDevice::CUSBPrinterDevice(CUSBFunction*)+0x34>
   161ac:	e3a03000 	mov	r3, #0
   161b0:	e5841000 	str	r1, [r4]
   161b4:	e1a00004 	mov	r0, r4
   161b8:	e5c43014 	strb	r3, [r4, #20]
   161bc:	f442078f 	vst1.32	{d16}, [r2]
   161c0:	e5843020 	str	r3, [r4, #32]
   161c4:	e8bd8010 	pop	{r4, pc}
   161c8:	0003f4e8 	.word	0x0003f4e8

000161cc <CUSBPrinterDevice::Configure()>:
   161cc:	e92d4070 	push	{r4, r5, r6, lr}
   161d0:	e1a05000 	mov	r5, r0
   161d4:	e24dd008 	sub	sp, sp, #8
   161d8:	ebffe994 	bl	10830 <CUSBFunction::GetInterfaceProtocol() const>
   161dc:	e5c50014 	strb	r0, [r5, #20]
   161e0:	e2400001 	sub	r0, r0, #1
   161e4:	e3500001 	cmp	r0, #1
   161e8:	8a000036 	bhi	162c8 <CUSBPrinterDevice::Configure()+0xfc>
   161ec:	e1a00005 	mov	r0, r5
   161f0:	ebffe8ea 	bl	105a0 <CUSBFunction::GetNumEndpoints() const>
   161f4:	e5d53014 	ldrb	r3, [r5, #20]
   161f8:	e3530001 	cmp	r3, #1
   161fc:	13a03002 	movne	r3, #2
   16200:	03a03001 	moveq	r3, #1
   16204:	e1500003 	cmp	r0, r3
   16208:	aa00000a 	bge	16238 <CUSBPrinterDevice::Configure()+0x6c>
   1620c:	e59f1188 	ldr	r1, [pc, #392]	@ 1639c <CUSBPrinterDevice::Configure()+0x1d0>
   16210:	e1a00005 	mov	r0, r5
   16214:	ebffe918 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   16218:	e3a04000 	mov	r4, #0
   1621c:	e1a00004 	mov	r0, r4
   16220:	e28dd008 	add	sp, sp, #8
   16224:	e8bd8070 	pop	{r4, r5, r6, pc}
   16228:	e5d43003 	ldrb	r3, [r4, #3]
   1622c:	e203303f 	and	r3, r3, #63	@ 0x3f
   16230:	e3530002 	cmp	r3, #2
   16234:	0a00002c 	beq	162ec <CUSBPrinterDevice::Configure()+0x120>
   16238:	e3a01005 	mov	r1, #5
   1623c:	e1a00005 	mov	r0, r5
   16240:	ebffe902 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   16244:	e2504000 	subs	r4, r0, #0
   16248:	1afffff6 	bne	16228 <CUSBPrinterDevice::Configure()+0x5c>
   1624c:	e595301c 	ldr	r3, [r5, #28]
   16250:	e3530000 	cmp	r3, #0
   16254:	0affffec 	beq	1620c <CUSBPrinterDevice::Configure()+0x40>
   16258:	e5d53014 	ldrb	r3, [r5, #20]
   1625c:	e3530001 	cmp	r3, #1
   16260:	0a000002 	beq	16270 <CUSBPrinterDevice::Configure()+0xa4>
   16264:	e5953018 	ldr	r3, [r5, #24]
   16268:	e3530000 	cmp	r3, #0
   1626c:	0affffe6 	beq	1620c <CUSBPrinterDevice::Configure()+0x40>
   16270:	e1a00005 	mov	r0, r5
   16274:	ebffe802 	bl	10284 <CUSBFunction::Configure()>
   16278:	e2504000 	subs	r4, r0, #0
   1627c:	0a000039 	beq	16368 <CUSBPrinterDevice::Configure()+0x19c>
   16280:	e5956020 	ldr	r6, [r5, #32]
   16284:	e3560000 	cmp	r6, #0
   16288:	1a00003d 	bne	16384 <CUSBPrinterDevice::Configure()+0x1b8>
   1628c:	e59f2108 	ldr	r2, [pc, #264]	@ 1639c <CUSBPrinterDevice::Configure()+0x1d0>
   16290:	e3a01001 	mov	r1, #1
   16294:	e30400b0 	movw	r0, #16560	@ 0x40b0
   16298:	e3400004 	movt	r0, #4
   1629c:	eb0080ee 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   162a0:	e5850020 	str	r0, [r5, #32]
   162a4:	eb005a60 	bl	2cc2c <CDeviceNameService::Get()>
   162a8:	e5952020 	ldr	r2, [r5, #32]
   162ac:	e59f10ec 	ldr	r1, [pc, #236]	@ 163a0 <CUSBPrinterDevice::Configure()+0x1d4>
   162b0:	e1a03005 	mov	r3, r5
   162b4:	e58d6000 	str	r6, [sp]
   162b8:	eb005a67 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   162bc:	e1a00004 	mov	r0, r4
   162c0:	e28dd008 	add	sp, sp, #8
   162c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   162c8:	eb00613e 	bl	2e7c8 <CLogger::Get()>
   162cc:	e5d5c014 	ldrb	ip, [r5, #20]
   162d0:	e59f10c4 	ldr	r1, [pc, #196]	@ 1639c <CUSBPrinterDevice::Configure()+0x1d0>
   162d4:	e3a02001 	mov	r2, #1
   162d8:	e30b3704 	movw	r3, #46852	@ 0xb704
   162dc:	e3403003 	movt	r3, #3
   162e0:	e58dc000 	str	ip, [sp]
   162e4:	eb006300 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   162e8:	eaffffca 	b	16218 <CUSBPrinterDevice::Configure()+0x4c>
   162ec:	e1d430d2 	ldrsb	r3, [r4, #2]
   162f0:	e3530000 	cmp	r3, #0
   162f4:	ba00000d 	blt	16330 <CUSBPrinterDevice::Configure()+0x164>
   162f8:	e595301c 	ldr	r3, [r5, #28]
   162fc:	e3530000 	cmp	r3, #0
   16300:	1affffc1 	bne	1620c <CUSBPrinterDevice::Configure()+0x40>
   16304:	e3a00014 	mov	r0, #20
   16308:	eb007f85 	bl	36124 <operator new(unsigned int)>
   1630c:	e1a06000 	mov	r6, r0
   16310:	e1a00005 	mov	r0, r5
   16314:	ebffe8ad 	bl	105d0 <CUSBFunction::GetDevice() const>
   16318:	e1a02004 	mov	r2, r4
   1631c:	e1a01000 	mov	r1, r0
   16320:	e1a00006 	mov	r0, r6
   16324:	ebffe6b7 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16328:	e585601c 	str	r6, [r5, #28]
   1632c:	eaffffc1 	b	16238 <CUSBPrinterDevice::Configure()+0x6c>
   16330:	e5953018 	ldr	r3, [r5, #24]
   16334:	e3530000 	cmp	r3, #0
   16338:	1affffb3 	bne	1620c <CUSBPrinterDevice::Configure()+0x40>
   1633c:	e3a00014 	mov	r0, #20
   16340:	eb007f77 	bl	36124 <operator new(unsigned int)>
   16344:	e1a06000 	mov	r6, r0
   16348:	e1a00005 	mov	r0, r5
   1634c:	ebffe89f 	bl	105d0 <CUSBFunction::GetDevice() const>
   16350:	e1a02004 	mov	r2, r4
   16354:	e1a01000 	mov	r1, r0
   16358:	e1a00006 	mov	r0, r6
   1635c:	ebffe6a9 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   16360:	e5856018 	str	r6, [r5, #24]
   16364:	eaffffb3 	b	16238 <CUSBPrinterDevice::Configure()+0x6c>
   16368:	eb006116 	bl	2e7c8 <CLogger::Get()>
   1636c:	e59f1028 	ldr	r1, [pc, #40]	@ 1639c <CUSBPrinterDevice::Configure()+0x1d0>
   16370:	e3a02001 	mov	r2, #1
   16374:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   16378:	e3403003 	movt	r3, #3
   1637c:	eb0062da 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16380:	eaffffa4 	b	16218 <CUSBPrinterDevice::Configure()+0x4c>
   16384:	e30b16dc 	movw	r1, #46812	@ 0xb6dc
   16388:	e3401003 	movt	r1, #3
   1638c:	e30b0724 	movw	r0, #46884	@ 0xb724
   16390:	e3400003 	movt	r0, #3
   16394:	e3a0207e 	mov	r2, #126	@ 0x7e
   16398:	eb00568f 	bl	2bddc <assertion_failed>
   1639c:	0003f51c 	.word	0x0003f51c
   163a0:	0003f514 	.word	0x0003f514

000163a4 <_GLOBAL__sub_I__ZN17CUSBPrinterDevice18s_DeviceNumberPoolE>:
   163a4:	e92d4010 	push	{r4, lr}
   163a8:	e30440b0 	movw	r4, #16560	@ 0x40b0
   163ac:	e3404004 	movt	r4, #4
   163b0:	e3a0203f 	mov	r2, #63	@ 0x3f
   163b4:	e3a01001 	mov	r1, #1
   163b8:	e1a00004 	mov	r0, r4
   163bc:	eb008091 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   163c0:	e1a00004 	mov	r0, r4
   163c4:	e3042180 	movw	r2, #16768	@ 0x4180
   163c8:	e3402004 	movt	r2, #4
   163cc:	e3061658 	movw	r1, #26200	@ 0x6658
   163d0:	e3401003 	movt	r1, #3
   163d4:	e8bd4010 	pop	{r4, lr}
   163d8:	ea00775d 	b	34154 <__aeabi_atexit>

000163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>:
   163dc:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   163e0:	e92d4010 	push	{r4, lr}
   163e4:	e280e064 	add	lr, r0, #100	@ 0x64
   163e8:	e5801000 	str	r1, [r0]
   163ec:	e3510000 	cmp	r1, #0
   163f0:	e59d1008 	ldr	r1, [sp, #8]
   163f4:	e3a04009 	mov	r4, #9
   163f8:	e5801004 	str	r1, [r0, #4]
   163fc:	e3a01000 	mov	r1, #0
   16400:	e1c020f8 	strd	r2, [r0, #8]
   16404:	e5801010 	str	r1, [r0, #16]
   16408:	e5801014 	str	r1, [r0, #20]
   1640c:	e580101c 	str	r1, [r0, #28]
   16410:	e5801060 	str	r1, [r0, #96]	@ 0x60
   16414:	e5c04018 	strb	r4, [r0, #24]
   16418:	f44e078f 	vst1.32	{d16}, [lr]
   1641c:	e5c0106c 	strb	r1, [r0, #108]	@ 0x6c
   16420:	0a00000b 	beq	16454 <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)+0x78>
   16424:	e2522000 	subs	r2, r2, #0
   16428:	13a02001 	movne	r2, #1
   1642c:	e3530000 	cmp	r3, #0
   16430:	03822001 	orreq	r2, r2, #1
   16434:	e3520000 	cmp	r2, #0
   16438:	18bd8010 	popne	{r4, pc}
   1643c:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16440:	e3401003 	movt	r1, #3
   16444:	e30b074c 	movw	r0, #46924	@ 0xb74c
   16448:	e3400003 	movt	r0, #3
   1644c:	e3a02026 	mov	r2, #38	@ 0x26
   16450:	eb005661 	bl	2bddc <assertion_failed>
   16454:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16458:	e3401003 	movt	r1, #3
   1645c:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
   16460:	e3400003 	movt	r0, #3
   16464:	e3a02025 	mov	r2, #37	@ 0x25
   16468:	eb00565b 	bl	2bddc <assertion_failed>

0001646c <CUSBRequest::~CUSBRequest()>:
   1646c:	e12fff1e 	bx	lr

00016470 <CUSBRequest::GetEndpoint() const>:
   16470:	e5900000 	ldr	r0, [r0]
   16474:	e3500000 	cmp	r0, #0
   16478:	112fff1e 	bxne	lr
   1647c:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16480:	e3401003 	movt	r1, #3
   16484:	e30a06bc 	movw	r0, #42684	@ 0xa6bc
   16488:	e3400003 	movt	r0, #3
   1648c:	e3a02033 	mov	r2, #51	@ 0x33
   16490:	e92d4010 	push	{r4, lr}
   16494:	eb005650 	bl	2bddc <assertion_failed>

00016498 <CUSBRequest::SetStatus(int)>:
   16498:	e5801010 	str	r1, [r0, #16]
   1649c:	e12fff1e 	bx	lr

000164a0 <CUSBRequest::SetResultLen(unsigned int)>:
   164a0:	e5801014 	str	r1, [r0, #20]
   164a4:	e12fff1e 	bx	lr

000164a8 <CUSBRequest::SetUSBError(TUSBError)>:
   164a8:	e5c01018 	strb	r1, [r0, #24]
   164ac:	e12fff1e 	bx	lr

000164b0 <CUSBRequest::GetStatus() const>:
   164b0:	e5900010 	ldr	r0, [r0, #16]
   164b4:	e12fff1e 	bx	lr

000164b8 <CUSBRequest::GetResultLength() const>:
   164b8:	e5903010 	ldr	r3, [r0, #16]
   164bc:	e3530000 	cmp	r3, #0
   164c0:	0a000001 	beq	164cc <CUSBRequest::GetResultLength() const+0x14>
   164c4:	e5900014 	ldr	r0, [r0, #20]
   164c8:	e12fff1e 	bx	lr
   164cc:	e30b173c 	movw	r1, #46908	@ 0xb73c
   164d0:	e3401003 	movt	r1, #3
   164d4:	e30b0770 	movw	r0, #46960	@ 0xb770
   164d8:	e3400003 	movt	r0, #3
   164dc:	e3a0204d 	mov	r2, #77	@ 0x4d
   164e0:	e92d4010 	push	{r4, lr}
   164e4:	eb00563c 	bl	2bddc <assertion_failed>

000164e8 <CUSBRequest::GetUSBError() const>:
   164e8:	e5903010 	ldr	r3, [r0, #16]
   164ec:	e3530000 	cmp	r3, #0
   164f0:	1a000001 	bne	164fc <CUSBRequest::GetUSBError() const+0x14>
   164f4:	e5d00018 	ldrb	r0, [r0, #24]
   164f8:	e12fff1e 	bx	lr
   164fc:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16500:	e3401003 	movt	r1, #3
   16504:	e30b077c 	movw	r0, #46972	@ 0xb77c
   16508:	e3400003 	movt	r0, #3
   1650c:	e3a02054 	mov	r2, #84	@ 0x54
   16510:	e92d4010 	push	{r4, lr}
   16514:	eb005630 	bl	2bddc <assertion_failed>

00016518 <CUSBRequest::GetSetupData()>:
   16518:	e92d4010 	push	{r4, lr}
   1651c:	e1a04000 	mov	r4, r0
   16520:	e5900000 	ldr	r0, [r0]
   16524:	ebffe6be 	bl	10024 <CUSBEndpoint::GetType() const>
   16528:	e3500000 	cmp	r0, #0
   1652c:	1a000008 	bne	16554 <CUSBRequest::GetSetupData()+0x3c>
   16530:	e5940004 	ldr	r0, [r4, #4]
   16534:	e3500000 	cmp	r0, #0
   16538:	18bd8010 	popne	{r4, pc}
   1653c:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16540:	e3401003 	movt	r1, #3
   16544:	e30b07b8 	movw	r0, #47032	@ 0xb7b8
   16548:	e3400003 	movt	r0, #3
   1654c:	e3a0205c 	mov	r2, #92	@ 0x5c
   16550:	eb005621 	bl	2bddc <assertion_failed>
   16554:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16558:	e3401003 	movt	r1, #3
   1655c:	e30b0788 	movw	r0, #46984	@ 0xb788
   16560:	e3400003 	movt	r0, #3
   16564:	e3a0205b 	mov	r2, #91	@ 0x5b
   16568:	eb00561b 	bl	2bddc <assertion_failed>

0001656c <CUSBRequest::GetBuffer()>:
   1656c:	e1a03000 	mov	r3, r0
   16570:	e5900008 	ldr	r0, [r0, #8]
   16574:	e3500000 	cmp	r0, #0
   16578:	112fff1e 	bxne	lr
   1657c:	e593300c 	ldr	r3, [r3, #12]
   16580:	e3530000 	cmp	r3, #0
   16584:	012fff1e 	bxeq	lr
   16588:	e30b173c 	movw	r1, #46908	@ 0xb73c
   1658c:	e3401003 	movt	r1, #3
   16590:	e30b074c 	movw	r0, #46924	@ 0xb74c
   16594:	e3400003 	movt	r0, #3
   16598:	e3a02063 	mov	r2, #99	@ 0x63
   1659c:	e92d4010 	push	{r4, lr}
   165a0:	eb00560d 	bl	2bddc <assertion_failed>

000165a4 <CUSBRequest::GetBufLen() const>:
   165a4:	e590000c 	ldr	r0, [r0, #12]
   165a8:	e12fff1e 	bx	lr

000165ac <CUSBRequest::AddIsoPacket(unsigned short)>:
   165ac:	e590301c 	ldr	r3, [r0, #28]
   165b0:	e92d4010 	push	{r4, lr}
   165b4:	e353001f 	cmp	r3, #31
   165b8:	8a000009 	bhi	165e4 <CUSBRequest::AddIsoPacket(unsigned short)+0x38>
   165bc:	e3510000 	cmp	r1, #0
   165c0:	0a00000d 	beq	165fc <CUSBRequest::AddIsoPacket(unsigned short)+0x50>
   165c4:	e590200c 	ldr	r2, [r0, #12]
   165c8:	e1510002 	cmp	r1, r2
   165cc:	8a000010 	bhi	16614 <CUSBRequest::AddIsoPacket(unsigned short)+0x68>
   165d0:	e0802083 	add	r2, r0, r3, lsl #1
   165d4:	e2833001 	add	r3, r3, #1
   165d8:	e580301c 	str	r3, [r0, #28]
   165dc:	e1c212b0 	strh	r1, [r2, #32]
   165e0:	e8bd8010 	pop	{r4, pc}
   165e4:	e30b173c 	movw	r1, #46908	@ 0xb73c
   165e8:	e3401003 	movt	r1, #3
   165ec:	e30b07cc 	movw	r0, #47052	@ 0xb7cc
   165f0:	e3400003 	movt	r0, #3
   165f4:	e3a02070 	mov	r2, #112	@ 0x70
   165f8:	eb0055f7 	bl	2bddc <assertion_failed>
   165fc:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16600:	e3401003 	movt	r1, #3
   16604:	e30b07f0 	movw	r0, #47088	@ 0xb7f0
   16608:	e3400003 	movt	r0, #3
   1660c:	e3a02071 	mov	r2, #113	@ 0x71
   16610:	eb0055f1 	bl	2bddc <assertion_failed>
   16614:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16618:	e3401003 	movt	r1, #3
   1661c:	e30b0804 	movw	r0, #47108	@ 0xb804
   16620:	e3400003 	movt	r0, #3
   16624:	e3a02072 	mov	r2, #114	@ 0x72
   16628:	eb0055eb 	bl	2bddc <assertion_failed>

0001662c <CUSBRequest::GetNumIsoPackets() const>:
   1662c:	e590001c 	ldr	r0, [r0, #28]
   16630:	e3500000 	cmp	r0, #0
   16634:	112fff1e 	bxne	lr
   16638:	e30b173c 	movw	r1, #46908	@ 0xb73c
   1663c:	e3401003 	movt	r1, #3
   16640:	e30b0820 	movw	r0, #47136	@ 0xb820
   16644:	e3400003 	movt	r0, #3
   16648:	e3a02079 	mov	r2, #121	@ 0x79
   1664c:	e92d4010 	push	{r4, lr}
   16650:	eb0055e1 	bl	2bddc <assertion_failed>

00016654 <CUSBRequest::GetIsoPacketSize(unsigned int) const>:
   16654:	e590301c 	ldr	r3, [r0, #28]
   16658:	e1530001 	cmp	r3, r1
   1665c:	9a000002 	bls	1666c <CUSBRequest::GetIsoPacketSize(unsigned int) const+0x18>
   16660:	e0800081 	add	r0, r0, r1, lsl #1
   16664:	e1d002b0 	ldrh	r0, [r0, #32]
   16668:	e12fff1e 	bx	lr
   1666c:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16670:	e3401003 	movt	r1, #3
   16674:	e30b0838 	movw	r0, #47160	@ 0xb838
   16678:	e3400003 	movt	r0, #3
   1667c:	e3a02080 	mov	r2, #128	@ 0x80
   16680:	e92d4010 	push	{r4, lr}
   16684:	eb0055d4 	bl	2bddc <assertion_failed>

00016688 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>:
   16688:	e3510000 	cmp	r1, #0
   1668c:	e5801060 	str	r1, [r0, #96]	@ 0x60
   16690:	e1c026f4 	strd	r2, [r0, #100]	@ 0x64
   16694:	112fff1e 	bxne	lr
   16698:	e30b173c 	movw	r1, #46908	@ 0xb73c
   1669c:	e3401003 	movt	r1, #3
   166a0:	e30b0858 	movw	r0, #47192	@ 0xb858
   166a4:	e3400003 	movt	r0, #3
   166a8:	e3a0208b 	mov	r2, #139	@ 0x8b
   166ac:	e92d4010 	push	{r4, lr}
   166b0:	eb0055c9 	bl	2bddc <assertion_failed>

000166b4 <CUSBRequest::CallCompletionRoutine()>:
   166b4:	e92d4010 	push	{r4, lr}
   166b8:	e590e060 	ldr	lr, [r0, #96]	@ 0x60
   166bc:	e35e0000 	cmp	lr, #0
   166c0:	0a000004 	beq	166d8 <CUSBRequest::CallCompletionRoutine()+0x24>
   166c4:	e1a0300e 	mov	r3, lr
   166c8:	e5902068 	ldr	r2, [r0, #104]	@ 0x68
   166cc:	e8bd4010 	pop	{r4, lr}
   166d0:	e5901064 	ldr	r1, [r0, #100]	@ 0x64
   166d4:	e12fff13 	bx	r3
   166d8:	e30b173c 	movw	r1, #46908	@ 0xb73c
   166dc:	e3401003 	movt	r1, #3
   166e0:	e30b0858 	movw	r0, #47192	@ 0xb858
   166e4:	e3400003 	movt	r0, #3
   166e8:	e3a02090 	mov	r2, #144	@ 0x90
   166ec:	eb0055ba 	bl	2bddc <assertion_failed>

000166f0 <CUSBRequest::SetCompleteOnNAK()>:
   166f0:	e3a03001 	mov	r3, #1
   166f4:	e5c0306c 	strb	r3, [r0, #108]	@ 0x6c
   166f8:	e12fff1e 	bx	lr

000166fc <CUSBRequest::IsCompleteOnNAK() const>:
   166fc:	e5d0006c 	ldrb	r0, [r0, #108]	@ 0x6c
   16700:	e12fff1e 	bx	lr

00016704 <CUSBRequest::operator new(unsigned int)>:
   16704:	e3500070 	cmp	r0, #112	@ 0x70
   16708:	e92d4010 	push	{r4, lr}
   1670c:	1a000006 	bne	1672c <CUSBRequest::operator new(unsigned int)+0x28>
   16710:	e30430c0 	movw	r3, #16576	@ 0x40c0
   16714:	e3403004 	movt	r3, #4
   16718:	e5930000 	ldr	r0, [r3]
   1671c:	e3500000 	cmp	r0, #0
   16720:	0a000007 	beq	16744 <CUSBRequest::operator new(unsigned int)+0x40>
   16724:	e8bd4010 	pop	{r4, lr}
   16728:	ea0056f4 	b	2c300 <CClassAllocator::Allocate()>
   1672c:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16730:	e3401003 	movt	r1, #3
   16734:	e30b0874 	movw	r0, #47220	@ 0xb874
   16738:	e3400003 	movt	r0, #3
   1673c:	e3a0209f 	mov	r2, #159	@ 0x9f
   16740:	eb0055a5 	bl	2bddc <assertion_failed>
   16744:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16748:	e3401003 	movt	r1, #3
   1674c:	e30a0354 	movw	r0, #41812	@ 0xa354
   16750:	e3400003 	movt	r0, #3
   16754:	e3a0209f 	mov	r2, #159	@ 0x9f
   16758:	eb00559f 	bl	2bddc <assertion_failed>

0001675c <CUSBRequest::operator delete(void*, unsigned int)>:
   1675c:	e3510070 	cmp	r1, #112	@ 0x70
   16760:	e92d4010 	push	{r4, lr}
   16764:	1a000008 	bne	1678c <CUSBRequest::operator delete(void*, unsigned int)+0x30>
   16768:	e30420c0 	movw	r2, #16576	@ 0x40c0
   1676c:	e3402004 	movt	r2, #4
   16770:	e1a03000 	mov	r3, r0
   16774:	e5920000 	ldr	r0, [r2]
   16778:	e3500000 	cmp	r0, #0
   1677c:	0a000008 	beq	167a4 <CUSBRequest::operator delete(void*, unsigned int)+0x48>
   16780:	e8bd4010 	pop	{r4, lr}
   16784:	e1a01003 	mov	r1, r3
   16788:	ea005717 	b	2c3ec <CClassAllocator::Free(void*)>
   1678c:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16790:	e3401003 	movt	r1, #3
   16794:	e30b0874 	movw	r0, #47220	@ 0xb874
   16798:	e3400003 	movt	r0, #3
   1679c:	e3a0209f 	mov	r2, #159	@ 0x9f
   167a0:	eb00558d 	bl	2bddc <assertion_failed>
   167a4:	e30b173c 	movw	r1, #46908	@ 0xb73c
   167a8:	e3401003 	movt	r1, #3
   167ac:	e30a0354 	movw	r0, #41812	@ 0xa354
   167b0:	e3400003 	movt	r0, #3
   167b4:	e3a0209f 	mov	r2, #159	@ 0x9f
   167b8:	eb005587 	bl	2bddc <assertion_failed>

000167bc <CUSBRequest::InitAllocator(unsigned int)>:
   167bc:	e92d4070 	push	{r4, r5, r6, lr}
   167c0:	e30440c0 	movw	r4, #16576	@ 0x40c0
   167c4:	e3404004 	movt	r4, #4
   167c8:	e5943000 	ldr	r3, [r4]
   167cc:	e3530000 	cmp	r3, #0
   167d0:	1a00000a 	bne	16800 <CUSBRequest::InitAllocator(unsigned int)+0x44>
   167d4:	e1a05000 	mov	r5, r0
   167d8:	e3a00020 	mov	r0, #32
   167dc:	eb007e50 	bl	36124 <operator new(unsigned int)>
   167e0:	e1a02005 	mov	r2, r5
   167e4:	e3a01070 	mov	r1, #112	@ 0x70
   167e8:	e30b3894 	movw	r3, #47252	@ 0xb894
   167ec:	e3403003 	movt	r3, #3
   167f0:	e1a05000 	mov	r5, r0
   167f4:	eb005663 	bl	2c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   167f8:	e5845000 	str	r5, [r4]
   167fc:	e8bd8070 	pop	{r4, r5, r6, pc}
   16800:	e30b173c 	movw	r1, #46908	@ 0xb73c
   16804:	e3401003 	movt	r1, #3
   16808:	e30a039c 	movw	r0, #41884	@ 0xa39c
   1680c:	e3400003 	movt	r0, #3
   16810:	e3a0209f 	mov	r2, #159	@ 0x9f
   16814:	eb005570 	bl	2bddc <assertion_failed>

00016818 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)>:
   16818:	e92d4070 	push	{r4, r5, r6, lr}
   1681c:	e30440c0 	movw	r4, #16576	@ 0x40c0
   16820:	e3404004 	movt	r4, #4
   16824:	e1a05000 	mov	r5, r0
   16828:	e24dd008 	sub	sp, sp, #8
   1682c:	e1a06001 	mov	r6, r1
   16830:	e5940000 	ldr	r0, [r4]
   16834:	e3500000 	cmp	r0, #0
   16838:	0a000004 	beq	16850 <CUSBRequest::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
   1683c:	e1a02001 	mov	r2, r1
   16840:	e1a01005 	mov	r1, r5
   16844:	e28dd008 	add	sp, sp, #8
   16848:	e8bd4070 	pop	{r4, r5, r6, lr}
   1684c:	ea005667 	b	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
   16850:	e3a00020 	mov	r0, #32
   16854:	eb007e32 	bl	36124 <operator new(unsigned int)>
   16858:	e1a02005 	mov	r2, r5
   1685c:	e1a03006 	mov	r3, r6
   16860:	e3a01070 	mov	r1, #112	@ 0x70
   16864:	e30bc894 	movw	ip, #47252	@ 0xb894
   16868:	e340c003 	movt	ip, #3
   1686c:	e58dc000 	str	ip, [sp]
   16870:	e1a05000 	mov	r5, r0
   16874:	eb00564f 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   16878:	e5845000 	str	r5, [r4]
   1687c:	e28dd008 	add	sp, sp, #8
   16880:	e8bd8070 	pop	{r4, r5, r6, pc}

00016884 <CUSBStandardHub::~CUSBStandardHub()>:
   16884:	e5903070 	ldr	r3, [r0, #112]	@ 0x70
   16888:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1688c:	e1a05000 	mov	r5, r0
   16890:	e59f4104 	ldr	r4, [pc, #260]	@ 1699c <CUSBStandardHub::~CUSBStandardHub()+0x118>
   16894:	e3530000 	cmp	r3, #0
   16898:	e5804000 	str	r4, [r0]
   1689c:	1a000034 	bne	16974 <CUSBStandardHub::~CUSBStandardHub()+0xf0>
   168a0:	e5953020 	ldr	r3, [r5, #32]
   168a4:	e3530000 	cmp	r3, #0
   168a8:	0a000014 	beq	16900 <CUSBStandardHub::~CUSBStandardHub()+0x7c>
   168ac:	e3a04000 	mov	r4, #0
   168b0:	e2857024 	add	r7, r5, #36	@ 0x24
   168b4:	e2856044 	add	r6, r5, #68	@ 0x44
   168b8:	e1a08004 	mov	r8, r4
   168bc:	e5b60004 	ldr	r0, [r6, #4]!
   168c0:	e3a01004 	mov	r1, #4
   168c4:	e3500000 	cmp	r0, #0
   168c8:	0a000000 	beq	168d0 <CUSBStandardHub::~CUSBStandardHub()+0x4c>
   168cc:	eb007e2c 	bl	36184 <operator delete(void*, unsigned int)>
   168d0:	e5973004 	ldr	r3, [r7, #4]
   168d4:	e5868000 	str	r8, [r6]
   168d8:	e2530000 	subs	r0, r3, #0
   168dc:	0a000002 	beq	168ec <CUSBStandardHub::~CUSBStandardHub()+0x68>
   168e0:	e5933000 	ldr	r3, [r3]
   168e4:	e5933004 	ldr	r3, [r3, #4]
   168e8:	e12fff33 	blx	r3
   168ec:	e5953020 	ldr	r3, [r5, #32]
   168f0:	e2844001 	add	r4, r4, #1
   168f4:	e5a78004 	str	r8, [r7, #4]!
   168f8:	e1530004 	cmp	r3, r4
   168fc:	8affffee 	bhi	168bc <CUSBStandardHub::~CUSBStandardHub()+0x38>
   16900:	e595001c 	ldr	r0, [r5, #28]
   16904:	e3a03000 	mov	r3, #0
   16908:	e5853020 	str	r3, [r5, #32]
   1690c:	e1500003 	cmp	r0, r3
   16910:	0a000000 	beq	16918 <CUSBStandardHub::~CUSBStandardHub()+0x94>
   16914:	eb007e14 	bl	3616c <operator delete[](void*)>
   16918:	e5954018 	ldr	r4, [r5, #24]
   1691c:	e3a03000 	mov	r3, #0
   16920:	e585301c 	str	r3, [r5, #28]
   16924:	e1540003 	cmp	r4, r3
   16928:	0a000004 	beq	16940 <CUSBStandardHub::~CUSBStandardHub()+0xbc>
   1692c:	e1a00004 	mov	r0, r4
   16930:	ebffe5ae 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   16934:	e3a01014 	mov	r1, #20
   16938:	e1a00004 	mov	r0, r4
   1693c:	eb007e10 	bl	36184 <operator delete(void*, unsigned int)>
   16940:	e5950014 	ldr	r0, [r5, #20]
   16944:	e3a03000 	mov	r3, #0
   16948:	e5853018 	str	r3, [r5, #24]
   1694c:	e1500003 	cmp	r0, r3
   16950:	0a000001 	beq	1695c <CUSBStandardHub::~CUSBStandardHub()+0xd8>
   16954:	e3a01009 	mov	r1, #9
   16958:	eb007e09 	bl	36184 <operator delete(void*, unsigned int)>
   1695c:	e3a03000 	mov	r3, #0
   16960:	e1a00005 	mov	r0, r5
   16964:	e5853014 	str	r3, [r5, #20]
   16968:	ebffe60b 	bl	1019c <CUSBFunction::~CUSBFunction()>
   1696c:	e1a00005 	mov	r0, r5
   16970:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16974:	eb0058ac 	bl	2cc2c <CDeviceNameService::Get()>
   16978:	e284102c 	add	r1, r4, #44	@ 0x2c
   1697c:	e5952070 	ldr	r2, [r5, #112]	@ 0x70
   16980:	e3a03000 	mov	r3, #0
   16984:	eb0058ce 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   16988:	e5951070 	ldr	r1, [r5, #112]	@ 0x70
   1698c:	e30400c8 	movw	r0, #16584	@ 0x40c8
   16990:	e3400004 	movt	r0, #4
   16994:	eb007f62 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   16998:	eaffffc0 	b	168a0 <CUSBStandardHub::~CUSBStandardHub()+0x1c>
   1699c:	0003f52c 	.word	0x0003f52c

000169a0 <CUSBStandardHub::~CUSBStandardHub()>:
   169a0:	e92d4010 	push	{r4, lr}
   169a4:	e1a04000 	mov	r4, r0
   169a8:	ebffffb5 	bl	16884 <CUSBStandardHub::~CUSBStandardHub()>
   169ac:	e1a00004 	mov	r0, r4
   169b0:	e3a01074 	mov	r1, #116	@ 0x74
   169b4:	eb007df2 	bl	36184 <operator delete(void*, unsigned int)>
   169b8:	e1a00004 	mov	r0, r4
   169bc:	e8bd8010 	pop	{r4, pc}

000169c0 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)>:
   169c0:	e92d4010 	push	{r4, lr}
   169c4:	e1a04000 	mov	r4, r0
   169c8:	ebffe69c 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   169cc:	e1a02004 	mov	r2, r4
   169d0:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   169d4:	e2840030 	add	r0, r4, #48	@ 0x30
   169d8:	e59f3068 	ldr	r3, [pc, #104]	@ 16a48 <CUSBStandardHub::CUSBStandardHub(CUSBFunction*)+0x88>
   169dc:	e284c028 	add	ip, r4, #40	@ 0x28
   169e0:	e2841038 	add	r1, r4, #56	@ 0x38
   169e4:	e4823014 	str	r3, [r2], #20
   169e8:	e3a03000 	mov	r3, #0
   169ec:	f2c01010 	vmov.i32	d17, #0	@ 0x00000000
   169f0:	f442078f 	vst1.32	{d16}, [r2]
   169f4:	e2842040 	add	r2, r4, #64	@ 0x40
   169f8:	e584301c 	str	r3, [r4, #28]
   169fc:	e5843020 	str	r3, [r4, #32]
   16a00:	e5c43024 	strb	r3, [r4, #36]	@ 0x24
   16a04:	e5843070 	str	r3, [r4, #112]	@ 0x70
   16a08:	e2843050 	add	r3, r4, #80	@ 0x50
   16a0c:	f44c078f 	vst1.32	{d16}, [ip]
   16a10:	f440078f 	vst1.32	{d16}, [r0]
   16a14:	e2840048 	add	r0, r4, #72	@ 0x48
   16a18:	f441078f 	vst1.32	{d16}, [r1]
   16a1c:	e2841058 	add	r1, r4, #88	@ 0x58
   16a20:	f442078f 	vst1.32	{d16}, [r2]
   16a24:	e2842060 	add	r2, r4, #96	@ 0x60
   16a28:	f440078f 	vst1.32	{d16}, [r0]
   16a2c:	e1a00004 	mov	r0, r4
   16a30:	f443078f 	vst1.32	{d16}, [r3]
   16a34:	e2843068 	add	r3, r4, #104	@ 0x68
   16a38:	f441078f 	vst1.32	{d16}, [r1]
   16a3c:	f442078f 	vst1.32	{d16}, [r2]
   16a40:	f443170f 	vst1.8	{d17}, [r3]
   16a44:	e8bd8010 	pop	{r4, pc}
   16a48:	0003f52c 	.word	0x0003f52c

00016a4c <CUSBStandardHub::DisablePort(unsigned int)>:
   16a4c:	e5903020 	ldr	r3, [r0, #32]
   16a50:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   16a54:	e1530001 	cmp	r3, r1
   16a58:	e24dd010 	sub	sp, sp, #16
   16a5c:	9a000023 	bls	16af0 <CUSBStandardHub::DisablePort(unsigned int)+0xa4>
   16a60:	e1a05001 	mov	r5, r1
   16a64:	e1a04000 	mov	r4, r0
   16a68:	e2858001 	add	r8, r5, #1
   16a6c:	ebffe6ec 	bl	10624 <CUSBFunction::GetHost() const>
   16a70:	e1a06000 	mov	r6, r0
   16a74:	e1a00004 	mov	r0, r4
   16a78:	ebffe6de 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   16a7c:	e1a01000 	mov	r1, r0
   16a80:	e1a00006 	mov	r0, r6
   16a84:	e3a06001 	mov	r6, #1
   16a88:	e3a07000 	mov	r7, #0
   16a8c:	e6ff3078 	uxth	r3, r8
   16a90:	e3a02023 	mov	r2, #35	@ 0x23
   16a94:	e58d3004 	str	r3, [sp, #4]
   16a98:	e58d700c 	str	r7, [sp, #12]
   16a9c:	e1a03006 	mov	r3, r6
   16aa0:	e58d7008 	str	r7, [sp, #8]
   16aa4:	e58d6000 	str	r6, [sp]
   16aa8:	ebfff3dc 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16aac:	e1500007 	cmp	r0, r7
   16ab0:	a0844005 	addge	r4, r4, r5
   16ab4:	a1a00006 	movge	r0, r6
   16ab8:	a5c47068 	strbge	r7, [r4, #104]	@ 0x68
   16abc:	ba000001 	blt	16ac8 <CUSBStandardHub::DisablePort(unsigned int)+0x7c>
   16ac0:	e28dd010 	add	sp, sp, #16
   16ac4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16ac8:	eb005f3e 	bl	2e7c8 <CLogger::Get()>
   16acc:	e59f1034 	ldr	r1, [pc, #52]	@ 16b08 <CUSBStandardHub::DisablePort(unsigned int)+0xbc>
   16ad0:	e1a02006 	mov	r2, r6
   16ad4:	e58d8000 	str	r8, [sp]
   16ad8:	e30b38cc 	movw	r3, #47308	@ 0xb8cc
   16adc:	e3403003 	movt	r3, #3
   16ae0:	eb006101 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16ae4:	e1a00007 	mov	r0, r7
   16ae8:	e28dd010 	add	sp, sp, #16
   16aec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   16af0:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   16af4:	e3401003 	movt	r1, #3
   16af8:	e30b08b4 	movw	r0, #47284	@ 0xb8b4
   16afc:	e3400003 	movt	r0, #3
   16b00:	e3a020db 	mov	r2, #219	@ 0xdb
   16b04:	eb0054b4 	bl	2bddc <assertion_failed>
   16b08:	0003f560 	.word	0x0003f560

00016b0c <CUSBStandardHub::RemoveDeviceAt(unsigned int)>:
   16b0c:	e92d4070 	push	{r4, r5, r6, lr}
   16b10:	e1a04000 	mov	r4, r0
   16b14:	e1a06001 	mov	r6, r1
   16b18:	ebffffcb 	bl	16a4c <CUSBStandardHub::DisablePort(unsigned int)>
   16b1c:	e2505000 	subs	r5, r0, #0
   16b20:	0a000008 	beq	16b48 <CUSBStandardHub::RemoveDeviceAt(unsigned int)+0x3c>
   16b24:	e0844106 	add	r4, r4, r6, lsl #2
   16b28:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
   16b2c:	e3500000 	cmp	r0, #0
   16b30:	0a000002 	beq	16b40 <CUSBStandardHub::RemoveDeviceAt(unsigned int)+0x34>
   16b34:	e5903000 	ldr	r3, [r0]
   16b38:	e5933004 	ldr	r3, [r3, #4]
   16b3c:	e12fff33 	blx	r3
   16b40:	e3a03000 	mov	r3, #0
   16b44:	e5843028 	str	r3, [r4, #40]	@ 0x28
   16b48:	e1a00005 	mov	r0, r5
   16b4c:	e8bd8070 	pop	{r4, r5, r6, pc}

00016b50 <CUSBStandardHub::StartStatusChangeRequest()>:
   16b50:	e5903020 	ldr	r3, [r0, #32]
   16b54:	e92d4070 	push	{r4, r5, r6, lr}
   16b58:	e3530000 	cmp	r3, #0
   16b5c:	e24dd008 	sub	sp, sp, #8
   16b60:	0a000024 	beq	16bf8 <CUSBStandardHub::StartStatusChangeRequest()+0xa8>
   16b64:	e590201c 	ldr	r2, [r0, #28]
   16b68:	e2833008 	add	r3, r3, #8
   16b6c:	e1a04000 	mov	r4, r0
   16b70:	e3520000 	cmp	r2, #0
   16b74:	e1a051a3 	lsr	r5, r3, #3
   16b78:	0a00001a 	beq	16be8 <CUSBStandardHub::StartStatusChangeRequest()+0x98>
   16b7c:	e5943018 	ldr	r3, [r4, #24]
   16b80:	e3530000 	cmp	r3, #0
   16b84:	0a000021 	beq	16c10 <CUSBStandardHub::StartStatusChangeRequest()+0xc0>
   16b88:	e3a00070 	mov	r0, #112	@ 0x70
   16b8c:	e3a06000 	mov	r6, #0
   16b90:	ebfffedb 	bl	16704 <CUSBRequest::operator new(unsigned int)>
   16b94:	e58d6000 	str	r6, [sp]
   16b98:	e1a03005 	mov	r3, r5
   16b9c:	e1a05000 	mov	r5, r0
   16ba0:	e594201c 	ldr	r2, [r4, #28]
   16ba4:	e5941018 	ldr	r1, [r4, #24]
   16ba8:	ebfffe0b 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   16bac:	e1a03004 	mov	r3, r4
   16bb0:	e1a02006 	mov	r2, r6
   16bb4:	e1a00005 	mov	r0, r5
   16bb8:	e3061ccc 	movw	r1, #27852	@ 0x6ccc
   16bbc:	e3401001 	movt	r1, #1
   16bc0:	ebfffeb0 	bl	16688 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   16bc4:	e1a00004 	mov	r0, r4
   16bc8:	ebffe695 	bl	10624 <CUSBFunction::GetHost() const>
   16bcc:	e5903000 	ldr	r3, [r0]
   16bd0:	e1a02006 	mov	r2, r6
   16bd4:	e1a01005 	mov	r1, r5
   16bd8:	e5933014 	ldr	r3, [r3, #20]
   16bdc:	e28dd008 	add	sp, sp, #8
   16be0:	e8bd4070 	pop	{r4, r5, r6, lr}
   16be4:	e12fff13 	bx	r3
   16be8:	e1a00005 	mov	r0, r5
   16bec:	eb007d52 	bl	3613c <operator new[](unsigned int)>
   16bf0:	e584001c 	str	r0, [r4, #28]
   16bf4:	eaffffe0 	b	16b7c <CUSBStandardHub::StartStatusChangeRequest()+0x2c>
   16bf8:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   16bfc:	e3401003 	movt	r1, #3
   16c00:	e30b08e4 	movw	r0, #47332	@ 0xb8e4
   16c04:	e3400003 	movt	r0, #3
   16c08:	e30021e2 	movw	r2, #482	@ 0x1e2
   16c0c:	eb005472 	bl	2bddc <assertion_failed>
   16c10:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   16c14:	e3401003 	movt	r1, #3
   16c18:	e30b08f4 	movw	r0, #47348	@ 0xb8f4
   16c1c:	e3400003 	movt	r0, #3
   16c20:	e30021eb 	movw	r2, #491	@ 0x1eb
   16c24:	eb00546c 	bl	2bddc <assertion_failed>

00016c28 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>:
   16c28:	e92d4070 	push	{r4, r5, r6, lr}
   16c2c:	e2514000 	subs	r4, r1, #0
   16c30:	0a000016 	beq	16c90 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x68>
   16c34:	e1a05000 	mov	r5, r0
   16c38:	e1a00004 	mov	r0, r4
   16c3c:	ebfffe1b 	bl	164b0 <CUSBRequest::GetStatus() const>
   16c40:	e3500000 	cmp	r0, #0
   16c44:	e1a00004 	mov	r0, r4
   16c48:	0a000007 	beq	16c6c <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x44>
   16c4c:	ebfffe19 	bl	164b8 <CUSBRequest::GetResultLength() const>
   16c50:	e3500000 	cmp	r0, #0
   16c54:	0a000016 	beq	16cb4 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x8c>
   16c58:	e1a00005 	mov	r0, r5
   16c5c:	ebffe670 	bl	10624 <CUSBFunction::GetHost() const>
   16c60:	e1a01005 	mov	r1, r5
   16c64:	ebfff427 	bl	13d08 <CUSBHostController::PortStatusChanged(CUSBStandardHub*)>
   16c68:	ea000002 	b	16c78 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x50>
   16c6c:	ebfffe1d 	bl	164e8 <CUSBRequest::GetUSBError() const>
   16c70:	e3500003 	cmp	r0, #3
   16c74:	0a00000b 	beq	16ca8 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x80>
   16c78:	e1a00004 	mov	r0, r4
   16c7c:	ebfffdfa 	bl	1646c <CUSBRequest::~CUSBRequest()>
   16c80:	e1a00004 	mov	r0, r4
   16c84:	e3a01070 	mov	r1, #112	@ 0x70
   16c88:	e8bd4070 	pop	{r4, r5, r6, lr}
   16c8c:	eafffeb2 	b	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   16c90:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   16c94:	e3401003 	movt	r1, #3
   16c98:	e3090e38 	movw	r0, #40504	@ 0x9e38
   16c9c:	e3400003 	movt	r0, #3
   16ca0:	e30021f5 	movw	r2, #501	@ 0x1f5
   16ca4:	eb00544c 	bl	2bddc <assertion_failed>
   16ca8:	e1a00005 	mov	r0, r5
   16cac:	ebffffa7 	bl	16b50 <CUSBStandardHub::StartStatusChangeRequest()>
   16cb0:	eafffff0 	b	16c78 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)+0x50>
   16cb4:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   16cb8:	e3401003 	movt	r1, #3
   16cbc:	e30b0910 	movw	r0, #47376	@ 0xb910
   16cc0:	e3400003 	movt	r0, #3
   16cc4:	e30021f9 	movw	r2, #505	@ 0x1f9
   16cc8:	eb005443 	bl	2bddc <assertion_failed>

00016ccc <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)>:
   16ccc:	e1a01000 	mov	r1, r0
   16cd0:	e2520000 	subs	r0, r2, #0
   16cd4:	0a000000 	beq	16cdc <CUSBStandardHub::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   16cd8:	eaffffd2 	b	16c28 <CUSBStandardHub::CompletionRoutine(CUSBRequest*)>
   16cdc:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   16ce0:	e3401003 	movt	r1, #3
   16ce4:	e3090d50 	movw	r0, #40272	@ 0x9d50
   16ce8:	e3400003 	movt	r0, #3
   16cec:	e92d4010 	push	{r4, lr}
   16cf0:	e300220b 	movw	r2, #523	@ 0x20b
   16cf4:	eb005438 	bl	2bddc <assertion_failed>

00016cf8 <CUSBStandardHub::Initialize()>:
   16cf8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   16cfc:	e1a04000 	mov	r4, r0
   16d00:	e24dd014 	sub	sp, sp, #20
   16d04:	ebffe520 	bl	1018c <CUSBFunction::Initialize()>
   16d08:	e2505000 	subs	r5, r0, #0
   16d0c:	0a00002f 	beq	16dd0 <CUSBStandardHub::Initialize()+0xd8>
   16d10:	e5946014 	ldr	r6, [r4, #20]
   16d14:	e3560000 	cmp	r6, #0
   16d18:	1a00003e 	bne	16e18 <CUSBStandardHub::Initialize()+0x120>
   16d1c:	e3a00009 	mov	r0, #9
   16d20:	eb007cff 	bl	36124 <operator new(unsigned int)>
   16d24:	e1a03000 	mov	r3, r0
   16d28:	e1a00004 	mov	r0, r4
   16d2c:	e5843014 	str	r3, [r4, #20]
   16d30:	ebffe63b 	bl	10624 <CUSBFunction::GetHost() const>
   16d34:	e1a07000 	mov	r7, r0
   16d38:	e1a00004 	mov	r0, r4
   16d3c:	ebffe62d 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   16d40:	e58d600c 	str	r6, [sp, #12]
   16d44:	e1a01000 	mov	r1, r0
   16d48:	e1a03006 	mov	r3, r6
   16d4c:	e5942014 	ldr	r2, [r4, #20]
   16d50:	e1a00007 	mov	r0, r7
   16d54:	e58d2000 	str	r2, [sp]
   16d58:	e3a07009 	mov	r7, #9
   16d5c:	e3a020a0 	mov	r2, #160	@ 0xa0
   16d60:	e58d7004 	str	r7, [sp, #4]
   16d64:	e58d2008 	str	r2, [sp, #8]
   16d68:	e3a02029 	mov	r2, #41	@ 0x29
   16d6c:	ebfff361 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   16d70:	e1a06000 	mov	r6, r0
   16d74:	e1500007 	cmp	r0, r7
   16d78:	1a000007 	bne	16d9c <CUSBStandardHub::Initialize()+0xa4>
   16d7c:	e5943014 	ldr	r3, [r4, #20]
   16d80:	e5d33002 	ldrb	r3, [r3, #2]
   16d84:	e5843020 	str	r3, [r4, #32]
   16d88:	e3530008 	cmp	r3, #8
   16d8c:	8a000013 	bhi	16de0 <CUSBStandardHub::Initialize()+0xe8>
   16d90:	e1a00005 	mov	r0, r5
   16d94:	e28dd014 	add	sp, sp, #20
   16d98:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16d9c:	eb005e89 	bl	2e7c8 <CLogger::Get()>
   16da0:	e59f1088 	ldr	r1, [pc, #136]	@ 16e30 <CUSBStandardHub::Initialize()+0x138>
   16da4:	e3a02001 	mov	r2, #1
   16da8:	e30b3940 	movw	r3, #47424	@ 0xb940
   16dac:	e3403003 	movt	r3, #3
   16db0:	eb00604d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16db4:	e5940014 	ldr	r0, [r4, #20]
   16db8:	e3500000 	cmp	r0, #0
   16dbc:	0a000001 	beq	16dc8 <CUSBStandardHub::Initialize()+0xd0>
   16dc0:	e1a01007 	mov	r1, r7
   16dc4:	eb007cee 	bl	36184 <operator delete(void*, unsigned int)>
   16dc8:	e3a03000 	mov	r3, #0
   16dcc:	e5843014 	str	r3, [r4, #20]
   16dd0:	e3a05000 	mov	r5, #0
   16dd4:	e1a00005 	mov	r0, r5
   16dd8:	e28dd014 	add	sp, sp, #20
   16ddc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   16de0:	eb005e78 	bl	2e7c8 <CLogger::Get()>
   16de4:	e5943020 	ldr	r3, [r4, #32]
   16de8:	e58d3000 	str	r3, [sp]
   16dec:	e3a02001 	mov	r2, #1
   16df0:	e59f1038 	ldr	r1, [pc, #56]	@ 16e30 <CUSBStandardHub::Initialize()+0x138>
   16df4:	e30b395c 	movw	r3, #47452	@ 0xb95c
   16df8:	e3403003 	movt	r3, #3
   16dfc:	eb00603a 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   16e00:	e5940014 	ldr	r0, [r4, #20]
   16e04:	e3500000 	cmp	r0, #0
   16e08:	0affffee 	beq	16dc8 <CUSBStandardHub::Initialize()+0xd0>
   16e0c:	e1a01006 	mov	r1, r6
   16e10:	eb007cdb 	bl	36184 <operator delete(void*, unsigned int)>
   16e14:	eaffffeb 	b	16dc8 <CUSBStandardHub::Initialize()+0xd0>
   16e18:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   16e1c:	e3401003 	movt	r1, #3
   16e20:	e30b0930 	movw	r0, #47408	@ 0xb930
   16e24:	e3400003 	movt	r0, #3
   16e28:	e3a02062 	mov	r2, #98	@ 0x62
   16e2c:	eb0053ea 	bl	2bddc <assertion_failed>
   16e30:	0003f560 	.word	0x0003f560

00016e34 <CUSBStandardHub::EnumeratePorts()>:
   16e34:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e38:	e1a07000 	mov	r7, r0
   16e3c:	e24dd024 	sub	sp, sp, #36	@ 0x24
   16e40:	ebffe5f7 	bl	10624 <CUSBFunction::GetHost() const>
   16e44:	e250a000 	subs	sl, r0, #0
   16e48:	0a000129 	beq	172f4 <CUSBStandardHub::EnumeratePorts()+0x4c0>
   16e4c:	e1a00007 	mov	r0, r7
   16e50:	ebffe5e8 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   16e54:	e2503000 	subs	r3, r0, #0
   16e58:	e58d3014 	str	r3, [sp, #20]
   16e5c:	0a00012a 	beq	1730c <CUSBStandardHub::EnumeratePorts()+0x4d8>
   16e60:	e5973020 	ldr	r3, [r7, #32]
   16e64:	e3530000 	cmp	r3, #0
   16e68:	0a00012d 	beq	17324 <CUSBStandardHub::EnumeratePorts()+0x4f0>
   16e6c:	e5d74024 	ldrb	r4, [r7, #36]	@ 0x24
   16e70:	e3540000 	cmp	r4, #0
   16e74:	0a00006d 	beq	17030 <CUSBStandardHub::EnumeratePorts()+0x1fc>
   16e78:	e2876024 	add	r6, r7, #36	@ 0x24
   16e7c:	e30b3998 	movw	r3, #47512	@ 0xb998
   16e80:	e3403003 	movt	r3, #3
   16e84:	e1a09006 	mov	r9, r6
   16e88:	e2875048 	add	r5, r7, #72	@ 0x48
   16e8c:	e3a04001 	mov	r4, #1
   16e90:	e58d601c 	str	r6, [sp, #28]
   16e94:	e5b90004 	ldr	r0, [r9, #4]!
   16e98:	e58d3018 	str	r3, [sp, #24]
   16e9c:	e3500000 	cmp	r0, #0
   16ea0:	1a000051 	bne	16fec <CUSBStandardHub::EnumeratePorts()+0x1b8>
   16ea4:	e5950000 	ldr	r0, [r5]
   16ea8:	e3500000 	cmp	r0, #0
   16eac:	0a000057 	beq	17010 <CUSBStandardHub::EnumeratePorts()+0x1dc>
   16eb0:	e3a08000 	mov	r8, #0
   16eb4:	e3a03004 	mov	r3, #4
   16eb8:	e58d0008 	str	r0, [sp, #8]
   16ebc:	e6ffb074 	uxth	fp, r4
   16ec0:	e58d300c 	str	r3, [sp, #12]
   16ec4:	e3a020a3 	mov	r2, #163	@ 0xa3
   16ec8:	e59d1014 	ldr	r1, [sp, #20]
   16ecc:	e1a03008 	mov	r3, r8
   16ed0:	e1a0000a 	mov	r0, sl
   16ed4:	e88d0900 	stm	sp, {r8, fp}
   16ed8:	ebfff2d0 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16edc:	e1a06000 	mov	r6, r0
   16ee0:	e3500004 	cmp	r0, #4
   16ee4:	1a000042 	bne	16ff4 <CUSBStandardHub::EnumeratePorts()+0x1c0>
   16ee8:	e5953000 	ldr	r3, [r5]
   16eec:	e1d330b0 	ldrh	r3, [r3]
   16ef0:	e3130c01 	tst	r3, #256	@ 0x100
   16ef4:	0a00007c 	beq	170ec <CUSBStandardHub::EnumeratePorts()+0x2b8>
   16ef8:	e3130001 	tst	r3, #1
   16efc:	0a000031 	beq	16fc8 <CUSBStandardHub::EnumeratePorts()+0x194>
   16f00:	e59d1014 	ldr	r1, [sp, #20]
   16f04:	e3a03003 	mov	r3, #3
   16f08:	e3a02023 	mov	r2, #35	@ 0x23
   16f0c:	e1a0000a 	mov	r0, sl
   16f10:	e58d800c 	str	r8, [sp, #12]
   16f14:	e58d8008 	str	r8, [sp, #8]
   16f18:	e88d0840 	stm	sp, {r6, fp}
   16f1c:	ebfff2bf 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16f20:	e3500000 	cmp	r0, #0
   16f24:	ba000068 	blt	170cc <CUSBStandardHub::EnumeratePorts()+0x298>
   16f28:	eb007842 	bl	35038 <CTimer::Get()>
   16f2c:	e3a00064 	mov	r0, #100	@ 0x64
   16f30:	eb0077ff 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   16f34:	e58d600c 	str	r6, [sp, #12]
   16f38:	e88d0900 	stm	sp, {r8, fp}
   16f3c:	e3a020a3 	mov	r2, #163	@ 0xa3
   16f40:	e59d1014 	ldr	r1, [sp, #20]
   16f44:	e1a0000a 	mov	r0, sl
   16f48:	e5953000 	ldr	r3, [r5]
   16f4c:	e58d3008 	str	r3, [sp, #8]
   16f50:	e1a03008 	mov	r3, r8
   16f54:	ebfff2b1 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   16f58:	e3500004 	cmp	r0, #4
   16f5c:	1a00004d 	bne	17098 <CUSBStandardHub::EnumeratePorts()+0x264>
   16f60:	e5953000 	ldr	r3, [r5]
   16f64:	e1d330b0 	ldrh	r3, [r3]
   16f68:	e3130002 	tst	r3, #2
   16f6c:	0a0000a5 	beq	17208 <CUSBStandardHub::EnumeratePorts()+0x3d4>
   16f70:	e2132008 	ands	r2, r3, #8
   16f74:	1a000138 	bne	1745c <CUSBStandardHub::EnumeratePorts()+0x628>
   16f78:	e3130c02 	tst	r3, #512	@ 0x200
   16f7c:	11a08002 	movne	r8, r2
   16f80:	0a000026 	beq	17020 <CUSBStandardHub::EnumeratePorts()+0x1ec>
   16f84:	e5993000 	ldr	r3, [r9]
   16f88:	e3530000 	cmp	r3, #0
   16f8c:	1a0000ea 	bne	1733c <CUSBStandardHub::EnumeratePorts()+0x508>
   16f90:	e3a00058 	mov	r0, #88	@ 0x58
   16f94:	eb007c62 	bl	36124 <operator new(unsigned int)>
   16f98:	e1a02008 	mov	r2, r8
   16f9c:	e1a06000 	mov	r6, r0
   16fa0:	e2443001 	sub	r3, r4, #1
   16fa4:	e1a0100a 	mov	r1, sl
   16fa8:	e58d3000 	str	r3, [sp]
   16fac:	e1a03007 	mov	r3, r7
   16fb0:	ebffdce1 	bl	e33c <CUSBDevice::CUSBDevice(CUSBHostController*, TUSBSpeed, CUSBStandardHub*, unsigned int)>
   16fb4:	e1a00006 	mov	r0, r6
   16fb8:	e5896000 	str	r6, [r9]
   16fbc:	ebffdee4 	bl	eb54 <CUSBDevice::Initialize()>
   16fc0:	e3500000 	cmp	r0, #0
   16fc4:	0a000037 	beq	170a8 <CUSBStandardHub::EnumeratePorts()+0x274>
   16fc8:	e5972020 	ldr	r2, [r7, #32]
   16fcc:	e2843001 	add	r3, r4, #1
   16fd0:	e2855004 	add	r5, r5, #4
   16fd4:	e1520004 	cmp	r2, r4
   16fd8:	9a000092 	bls	17228 <CUSBStandardHub::EnumeratePorts()+0x3f4>
   16fdc:	e5b90004 	ldr	r0, [r9, #4]!
   16fe0:	e1a04003 	mov	r4, r3
   16fe4:	e3500000 	cmp	r0, #0
   16fe8:	0affffad 	beq	16ea4 <CUSBStandardHub::EnumeratePorts()+0x70>
   16fec:	ebffdd2b 	bl	e4a0 <CUSBDevice::ReScanDevices()>
   16ff0:	eafffff4 	b	16fc8 <CUSBStandardHub::EnumeratePorts()+0x194>
   16ff4:	eb005df3 	bl	2e7c8 <CLogger::Get()>
   16ff8:	e59d3018 	ldr	r3, [sp, #24]
   16ffc:	e59f14a4 	ldr	r1, [pc, #1188]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   17000:	e3a02001 	mov	r2, #1
   17004:	e58d4000 	str	r4, [sp]
   17008:	eb005fb7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1700c:	eaffffed 	b	16fc8 <CUSBStandardHub::EnumeratePorts()+0x194>
   17010:	e3a00004 	mov	r0, #4
   17014:	eb007c42 	bl	36124 <operator new(unsigned int)>
   17018:	e5850000 	str	r0, [r5]
   1701c:	eaffffa3 	b	16eb0 <CUSBStandardHub::EnumeratePorts()+0x7c>
   17020:	e3130b01 	tst	r3, #1024	@ 0x400
   17024:	03a08001 	moveq	r8, #1
   17028:	13a08002 	movne	r8, #2
   1702c:	eaffffd4 	b	16f84 <CUSBStandardHub::EnumeratePorts()+0x150>
   17030:	e59d8014 	ldr	r8, [sp, #20]
   17034:	e1a05004 	mov	r5, r4
   17038:	e3a06008 	mov	r6, #8
   1703c:	ea000002 	b	1704c <CUSBStandardHub::EnumeratePorts()+0x218>
   17040:	e5973020 	ldr	r3, [r7, #32]
   17044:	e1530004 	cmp	r3, r4
   17048:	9a00002d 	bls	17104 <CUSBStandardHub::EnumeratePorts()+0x2d0>
   1704c:	e2844001 	add	r4, r4, #1
   17050:	e3a03003 	mov	r3, #3
   17054:	e3a02023 	mov	r2, #35	@ 0x23
   17058:	e1a01008 	mov	r1, r8
   1705c:	e6ffc074 	uxth	ip, r4
   17060:	e1a0000a 	mov	r0, sl
   17064:	e58d500c 	str	r5, [sp, #12]
   17068:	e58d5008 	str	r5, [sp, #8]
   1706c:	e88d1040 	stm	sp, {r6, ip}
   17070:	ebfff26a 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17074:	e3500000 	cmp	r0, #0
   17078:	aafffff0 	bge	17040 <CUSBStandardHub::EnumeratePorts()+0x20c>
   1707c:	eb005dd1 	bl	2e7c8 <CLogger::Get()>
   17080:	e30b3980 	movw	r3, #47488	@ 0xb980
   17084:	e3403003 	movt	r3, #3
   17088:	e59f1418 	ldr	r1, [pc, #1048]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   1708c:	e3a02001 	mov	r2, #1
   17090:	e58d4000 	str	r4, [sp]
   17094:	eb005f94 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17098:	e3a09000 	mov	r9, #0
   1709c:	e1a00009 	mov	r0, r9
   170a0:	e28dd024 	add	sp, sp, #36	@ 0x24
   170a4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170a8:	e5990000 	ldr	r0, [r9]
   170ac:	e3500000 	cmp	r0, #0
   170b0:	0a000002 	beq	170c0 <CUSBStandardHub::EnumeratePorts()+0x28c>
   170b4:	e5903000 	ldr	r3, [r0]
   170b8:	e5933004 	ldr	r3, [r3, #4]
   170bc:	e12fff33 	blx	r3
   170c0:	e3a03000 	mov	r3, #0
   170c4:	e5893000 	str	r3, [r9]
   170c8:	eaffffbe 	b	16fc8 <CUSBStandardHub::EnumeratePorts()+0x194>
   170cc:	eb005dbd 	bl	2e7c8 <CLogger::Get()>
   170d0:	e59f13d0 	ldr	r1, [pc, #976]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   170d4:	e3a02001 	mov	r2, #1
   170d8:	e58d4000 	str	r4, [sp]
   170dc:	e30b39ec 	movw	r3, #47596	@ 0xb9ec
   170e0:	e3403003 	movt	r3, #3
   170e4:	eb005f80 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   170e8:	eaffffb6 	b	16fc8 <CUSBStandardHub::EnumeratePorts()+0x194>
   170ec:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   170f0:	e3401003 	movt	r1, #3
   170f4:	e30b09b8 	movw	r0, #47544	@ 0xb9b8
   170f8:	e3400003 	movt	r0, #3
   170fc:	e3002139 	movw	r2, #313	@ 0x139
   17100:	eb005335 	bl	2bddc <assertion_failed>
   17104:	e3a03001 	mov	r3, #1
   17108:	e5c73024 	strb	r3, [r7, #36]	@ 0x24
   1710c:	eb005b9f 	bl	2df90 <CKernelOptions::Get()>
   17110:	e3500000 	cmp	r0, #0
   17114:	0a000002 	beq	17124 <CUSBStandardHub::EnumeratePorts()+0x2f0>
   17118:	eb005b6e 	bl	2ded8 <CKernelOptions::GetUSBPowerDelay() const>
   1711c:	e2504000 	subs	r4, r0, #0
   17120:	1a000000 	bne	17128 <CUSBStandardHub::EnumeratePorts()+0x2f4>
   17124:	e30041fe 	movw	r4, #510	@ 0x1fe
   17128:	eb0077c2 	bl	35038 <CTimer::Get()>
   1712c:	e1a00004 	mov	r0, r4
   17130:	eb00777f 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   17134:	e5973020 	ldr	r3, [r7, #32]
   17138:	e3530000 	cmp	r3, #0
   1713c:	1affff4d 	bne	16e78 <CUSBStandardHub::EnumeratePorts()+0x44>
   17140:	e3a05000 	mov	r5, #0
   17144:	e3a00004 	mov	r0, #4
   17148:	eb007bf5 	bl	36124 <operator new(unsigned int)>
   1714c:	e3a04004 	mov	r4, #4
   17150:	e58d0008 	str	r0, [sp, #8]
   17154:	e1a06000 	mov	r6, r0
   17158:	e59d1014 	ldr	r1, [sp, #20]
   1715c:	e1a03005 	mov	r3, r5
   17160:	e3a020a0 	mov	r2, #160	@ 0xa0
   17164:	e1a0000a 	mov	r0, sl
   17168:	e58d400c 	str	r4, [sp, #12]
   1716c:	e58d5004 	str	r5, [sp, #4]
   17170:	e58d5000 	str	r5, [sp]
   17174:	ebfff229 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17178:	e1a0b000 	mov	fp, r0
   1717c:	e1500004 	cmp	r0, r4
   17180:	1a000073 	bne	17354 <CUSBStandardHub::EnumeratePorts()+0x520>
   17184:	e1d630b0 	ldrh	r3, [r6]
   17188:	e3130002 	tst	r3, #2
   1718c:	0a00007a 	beq	1737c <CUSBStandardHub::EnumeratePorts()+0x548>
   17190:	e5973020 	ldr	r3, [r7, #32]
   17194:	e3530000 	cmp	r3, #0
   17198:	13a04001 	movne	r4, #1
   1719c:	13a08008 	movne	r8, #8
   171a0:	159d9014 	ldrne	r9, [sp, #20]
   171a4:	0a00000d 	beq	171e0 <CUSBStandardHub::EnumeratePorts()+0x3ac>
   171a8:	e6ff3074 	uxth	r3, r4
   171ac:	e3a02023 	mov	r2, #35	@ 0x23
   171b0:	e58d3004 	str	r3, [sp, #4]
   171b4:	e1a01009 	mov	r1, r9
   171b8:	e3a03001 	mov	r3, #1
   171bc:	e1a0000a 	mov	r0, sl
   171c0:	e58d500c 	str	r5, [sp, #12]
   171c4:	e58d5008 	str	r5, [sp, #8]
   171c8:	e58d8000 	str	r8, [sp]
   171cc:	ebfff213 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   171d0:	e5972020 	ldr	r2, [r7, #32]
   171d4:	e1520004 	cmp	r2, r4
   171d8:	e2844001 	add	r4, r4, #1
   171dc:	8afffff1 	bhi	171a8 <CUSBStandardHub::EnumeratePorts()+0x374>
   171e0:	eb005d78 	bl	2e7c8 <CLogger::Get()>
   171e4:	e59f12bc 	ldr	r1, [pc, #700]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   171e8:	e3a02001 	mov	r2, #1
   171ec:	e30b3ab0 	movw	r3, #47792	@ 0xbab0
   171f0:	e3403003 	movt	r3, #3
   171f4:	eb005f3c 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   171f8:	e3a01004 	mov	r1, #4
   171fc:	e1a00006 	mov	r0, r6
   17200:	eb007bdf 	bl	36184 <operator delete(void*, unsigned int)>
   17204:	eaffffa3 	b	17098 <CUSBStandardHub::EnumeratePorts()+0x264>
   17208:	eb005d6e 	bl	2e7c8 <CLogger::Get()>
   1720c:	e59f1294 	ldr	r1, [pc, #660]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   17210:	e3a02001 	mov	r2, #1
   17214:	e58d4000 	str	r4, [sp]
   17218:	e30b3a04 	movw	r3, #47620	@ 0xba04
   1721c:	e3403003 	movt	r3, #3
   17220:	eb005f31 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17224:	eaffff67 	b	16fc8 <CUSBStandardHub::EnumeratePorts()+0x194>
   17228:	e59d601c 	ldr	r6, [sp, #28]
   1722c:	e3520000 	cmp	r2, #0
   17230:	0affffc2 	beq	17140 <CUSBStandardHub::EnumeratePorts()+0x30c>
   17234:	e30b9a7c 	movw	r9, #47740	@ 0xba7c
   17238:	e3409003 	movt	r9, #3
   1723c:	e30bba58 	movw	fp, #47704	@ 0xba58
   17240:	e340b003 	movt	fp, #3
   17244:	e59f825c 	ldr	r8, [pc, #604]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   17248:	e2875068 	add	r5, r7, #104	@ 0x68
   1724c:	e3a04000 	mov	r4, #0
   17250:	ea000009 	b	1727c <CUSBStandardHub::EnumeratePorts()+0x448>
   17254:	eb005d5b 	bl	2e7c8 <CLogger::Get()>
   17258:	e3a02004 	mov	r2, #4
   1725c:	e1a03009 	mov	r3, r9
   17260:	e1a01008 	mov	r1, r8
   17264:	e58d4000 	str	r4, [sp]
   17268:	eb005f1f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1726c:	e5972020 	ldr	r2, [r7, #32]
   17270:	e2855001 	add	r5, r5, #1
   17274:	e1520004 	cmp	r2, r4
   17278:	9affffb0 	bls	17140 <CUSBStandardHub::EnumeratePorts()+0x30c>
   1727c:	e5b60004 	ldr	r0, [r6, #4]!
   17280:	e2844001 	add	r4, r4, #1
   17284:	e3500000 	cmp	r0, #0
   17288:	0afffff8 	beq	17270 <CUSBStandardHub::EnumeratePorts()+0x43c>
   1728c:	e5d53000 	ldrb	r3, [r5]
   17290:	e3530000 	cmp	r3, #0
   17294:	1afffff5 	bne	17270 <CUSBStandardHub::EnumeratePorts()+0x43c>
   17298:	e5903000 	ldr	r3, [r0]
   1729c:	e3a02001 	mov	r2, #1
   172a0:	e593300c 	ldr	r3, [r3, #12]
   172a4:	e5c52000 	strb	r2, [r5]
   172a8:	e12fff33 	blx	r3
   172ac:	e3500000 	cmp	r0, #0
   172b0:	1affffe7 	bne	17254 <CUSBStandardHub::EnumeratePorts()+0x420>
   172b4:	eb005d43 	bl	2e7c8 <CLogger::Get()>
   172b8:	e1a0300b 	mov	r3, fp
   172bc:	e3a02002 	mov	r2, #2
   172c0:	e1a01008 	mov	r1, r8
   172c4:	e58d4000 	str	r4, [sp]
   172c8:	eb005f07 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   172cc:	e5960000 	ldr	r0, [r6]
   172d0:	e3500000 	cmp	r0, #0
   172d4:	0a000002 	beq	172e4 <CUSBStandardHub::EnumeratePorts()+0x4b0>
   172d8:	e5903000 	ldr	r3, [r0]
   172dc:	e5933004 	ldr	r3, [r3, #4]
   172e0:	e12fff33 	blx	r3
   172e4:	e3a03000 	mov	r3, #0
   172e8:	e5972020 	ldr	r2, [r7, #32]
   172ec:	e5863000 	str	r3, [r6]
   172f0:	eaffffde 	b	17270 <CUSBStandardHub::EnumeratePorts()+0x43c>
   172f4:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   172f8:	e3401003 	movt	r1, #3
   172fc:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   17300:	e3400003 	movt	r0, #3
   17304:	e3a020f7 	mov	r2, #247	@ 0xf7
   17308:	eb0052b3 	bl	2bddc <assertion_failed>
   1730c:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   17310:	e3401003 	movt	r1, #3
   17314:	e30b0970 	movw	r0, #47472	@ 0xb970
   17318:	e3400003 	movt	r0, #3
   1731c:	e3a020fa 	mov	r2, #250	@ 0xfa
   17320:	eb0052ad 	bl	2bddc <assertion_failed>
   17324:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   17328:	e3401003 	movt	r1, #3
   1732c:	e30b08e4 	movw	r0, #47332	@ 0xb8e4
   17330:	e3400003 	movt	r0, #3
   17334:	e3a020fc 	mov	r2, #252	@ 0xfc
   17338:	eb0052a7 	bl	2bddc <assertion_failed>
   1733c:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   17340:	e3401003 	movt	r1, #3
   17344:	e30b0a40 	movw	r0, #47680	@ 0xba40
   17348:	e3400003 	movt	r0, #3
   1734c:	e3002176 	movw	r2, #374	@ 0x176
   17350:	eb0052a1 	bl	2bddc <assertion_failed>
   17354:	eb005d1b 	bl	2e7c8 <CLogger::Get()>
   17358:	e59f1148 	ldr	r1, [pc, #328]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   1735c:	e3a02001 	mov	r2, #1
   17360:	e30b3a98 	movw	r3, #47768	@ 0xba98
   17364:	e3403003 	movt	r3, #3
   17368:	eb005edf 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1736c:	e1a01004 	mov	r1, r4
   17370:	e1a00006 	mov	r0, r6
   17374:	eb007b82 	bl	36184 <operator delete(void*, unsigned int)>
   17378:	eaffff46 	b	17098 <CUSBStandardHub::EnumeratePorts()+0x264>
   1737c:	e1a00006 	mov	r0, r6
   17380:	e1a0100b 	mov	r1, fp
   17384:	eb007b7e 	bl	36184 <operator delete(void*, unsigned int)>
   17388:	e5973020 	ldr	r3, [r7, #32]
   1738c:	e3530000 	cmp	r3, #0
   17390:	0a000042 	beq	174a0 <CUSBStandardHub::EnumeratePorts()+0x66c>
   17394:	e59d9014 	ldr	r9, [sp, #20]
   17398:	e3a04001 	mov	r4, #1
   1739c:	e30b3a1c 	movw	r3, #47644	@ 0xba1c
   173a0:	e3403003 	movt	r3, #3
   173a4:	e2876044 	add	r6, r7, #68	@ 0x44
   173a8:	e58d4018 	str	r4, [sp, #24]
   173ac:	e58d3014 	str	r3, [sp, #20]
   173b0:	ea000003 	b	173c4 <CUSBStandardHub::EnumeratePorts()+0x590>
   173b4:	e5973020 	ldr	r3, [r7, #32]
   173b8:	e1530004 	cmp	r3, r4
   173bc:	e2844001 	add	r4, r4, #1
   173c0:	9a000023 	bls	17454 <CUSBStandardHub::EnumeratePorts()+0x620>
   173c4:	e3a05000 	mov	r5, #0
   173c8:	e58db00c 	str	fp, [sp, #12]
   173cc:	e58d5000 	str	r5, [sp]
   173d0:	e6ff8074 	uxth	r8, r4
   173d4:	e3a020a3 	mov	r2, #163	@ 0xa3
   173d8:	e1a01009 	mov	r1, r9
   173dc:	e5b63004 	ldr	r3, [r6, #4]!
   173e0:	e1a0000a 	mov	r0, sl
   173e4:	e58d3008 	str	r3, [sp, #8]
   173e8:	e1a03005 	mov	r3, r5
   173ec:	e58d8004 	str	r8, [sp, #4]
   173f0:	ebfff18a 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   173f4:	e3500004 	cmp	r0, #4
   173f8:	1affffed 	bne	173b4 <CUSBStandardHub::EnumeratePorts()+0x580>
   173fc:	e5963000 	ldr	r3, [r6]
   17400:	e1d330b0 	ldrh	r3, [r3]
   17404:	e3130008 	tst	r3, #8
   17408:	0affffe9 	beq	173b4 <CUSBStandardHub::EnumeratePorts()+0x580>
   1740c:	e3a02023 	mov	r2, #35	@ 0x23
   17410:	e1a01009 	mov	r1, r9
   17414:	e3a03008 	mov	r3, #8
   17418:	e1a0000a 	mov	r0, sl
   1741c:	e58d3000 	str	r3, [sp]
   17420:	e3a03001 	mov	r3, #1
   17424:	e58d8004 	str	r8, [sp, #4]
   17428:	e58d500c 	str	r5, [sp, #12]
   1742c:	e58d5008 	str	r5, [sp, #8]
   17430:	ebfff17a 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17434:	eb005ce3 	bl	2e7c8 <CLogger::Get()>
   17438:	e59d3014 	ldr	r3, [sp, #20]
   1743c:	e59f1064 	ldr	r1, [pc, #100]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   17440:	e3a02001 	mov	r2, #1
   17444:	e58d4000 	str	r4, [sp]
   17448:	eb005ea7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1744c:	e58d5018 	str	r5, [sp, #24]
   17450:	eaffffd7 	b	173b4 <CUSBStandardHub::EnumeratePorts()+0x580>
   17454:	e59d9018 	ldr	r9, [sp, #24]
   17458:	eaffff0f 	b	1709c <CUSBStandardHub::EnumeratePorts()+0x268>
   1745c:	e59d1014 	ldr	r1, [sp, #20]
   17460:	e3a02023 	mov	r2, #35	@ 0x23
   17464:	e1a0000a 	mov	r0, sl
   17468:	e3a03008 	mov	r3, #8
   1746c:	e58d800c 	str	r8, [sp, #12]
   17470:	e88d0808 	stm	sp, {r3, fp}
   17474:	e3a03001 	mov	r3, #1
   17478:	e58d8008 	str	r8, [sp, #8]
   1747c:	ebfff167 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17480:	eb005cd0 	bl	2e7c8 <CLogger::Get()>
   17484:	e59f101c 	ldr	r1, [pc, #28]	@ 174a8 <CUSBStandardHub::EnumeratePorts()+0x674>
   17488:	e3a02001 	mov	r2, #1
   1748c:	e30b3a1c 	movw	r3, #47644	@ 0xba1c
   17490:	e3403003 	movt	r3, #3
   17494:	e58d4000 	str	r4, [sp]
   17498:	eb005e93 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1749c:	eafffefd 	b	17098 <CUSBStandardHub::EnumeratePorts()+0x264>
   174a0:	e3a09001 	mov	r9, #1
   174a4:	eafffefc 	b	1709c <CUSBStandardHub::EnumeratePorts()+0x268>
   174a8:	0003f560 	.word	0x0003f560

000174ac <CUSBStandardHub::ReScanDevices()>:
   174ac:	eafffe60 	b	16e34 <CUSBStandardHub::EnumeratePorts()>

000174b0 <CUSBStandardHub::Configure()>:
   174b0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   174b4:	e1a04000 	mov	r4, r0
   174b8:	e24dd00c 	sub	sp, sp, #12
   174bc:	ebffe437 	bl	105a0 <CUSBFunction::GetNumEndpoints() const>
   174c0:	e3500001 	cmp	r0, #1
   174c4:	1a00000c 	bne	174fc <CUSBStandardHub::Configure()+0x4c>
   174c8:	e1a05000 	mov	r5, r0
   174cc:	e3a01005 	mov	r1, #5
   174d0:	e1a00004 	mov	r0, r4
   174d4:	ebffe45d 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   174d8:	e2506000 	subs	r6, r0, #0
   174dc:	0a000006 	beq	174fc <CUSBStandardHub::Configure()+0x4c>
   174e0:	e1d630d2 	ldrsb	r3, [r6, #2]
   174e4:	e3530000 	cmp	r3, #0
   174e8:	aa000003 	bge	174fc <CUSBStandardHub::Configure()+0x4c>
   174ec:	e5d63003 	ldrb	r3, [r6, #3]
   174f0:	e203303f 	and	r3, r3, #63	@ 0x3f
   174f4:	e3530003 	cmp	r3, #3
   174f8:	0a000006 	beq	17518 <CUSBStandardHub::Configure()+0x68>
   174fc:	e59f1108 	ldr	r1, [pc, #264]	@ 1760c <CUSBStandardHub::Configure()+0x15c>
   17500:	e1a00004 	mov	r0, r4
   17504:	ebffe45c 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   17508:	e3a06000 	mov	r6, #0
   1750c:	e1a00006 	mov	r0, r6
   17510:	e28dd00c 	add	sp, sp, #12
   17514:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   17518:	e3a00014 	mov	r0, #20
   1751c:	eb007b00 	bl	36124 <operator new(unsigned int)>
   17520:	e1a07000 	mov	r7, r0
   17524:	e1a00004 	mov	r0, r4
   17528:	ebffe428 	bl	105d0 <CUSBFunction::GetDevice() const>
   1752c:	e1a02006 	mov	r2, r6
   17530:	e1a01000 	mov	r1, r0
   17534:	e1a00007 	mov	r0, r7
   17538:	ebffe232 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1753c:	e1a00004 	mov	r0, r4
   17540:	e5847018 	str	r7, [r4, #24]
   17544:	ebffe34e 	bl	10284 <CUSBFunction::Configure()>
   17548:	e3500000 	cmp	r0, #0
   1754c:	0a000027 	beq	175f0 <CUSBStandardHub::Configure()+0x140>
   17550:	e59f20b4 	ldr	r2, [pc, #180]	@ 1760c <CUSBStandardHub::Configure()+0x15c>
   17554:	e1a01005 	mov	r1, r5
   17558:	e30400c8 	movw	r0, #16584	@ 0x40c8
   1755c:	e3400004 	movt	r0, #4
   17560:	eb007c3d 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   17564:	e5840070 	str	r0, [r4, #112]	@ 0x70
   17568:	eb0055af 	bl	2cc2c <CDeviceNameService::Get()>
   1756c:	e5942070 	ldr	r2, [r4, #112]	@ 0x70
   17570:	e3a01000 	mov	r1, #0
   17574:	e1a03004 	mov	r3, r4
   17578:	e58d1000 	str	r1, [sp]
   1757c:	e59f108c 	ldr	r1, [pc, #140]	@ 17610 <CUSBStandardHub::Configure()+0x160>
   17580:	eb0055b5 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   17584:	e1a00004 	mov	r0, r4
   17588:	ebfffe29 	bl	16e34 <CUSBStandardHub::EnumeratePorts()>
   1758c:	e2506000 	subs	r6, r0, #0
   17590:	0a00000f 	beq	175d4 <CUSBStandardHub::Configure()+0x124>
   17594:	e1a00004 	mov	r0, r4
   17598:	ebffe421 	bl	10624 <CUSBFunction::GetHost() const>
   1759c:	ebfff19f 	bl	13c20 <CUSBHostController::IsPlugAndPlay()>
   175a0:	e3500000 	cmp	r0, #0
   175a4:	0affffd8 	beq	1750c <CUSBStandardHub::Configure()+0x5c>
   175a8:	e1a00004 	mov	r0, r4
   175ac:	ebfffd67 	bl	16b50 <CUSBStandardHub::StartStatusChangeRequest()>
   175b0:	e3500000 	cmp	r0, #0
   175b4:	1affffd4 	bne	1750c <CUSBStandardHub::Configure()+0x5c>
   175b8:	eb005c82 	bl	2e7c8 <CLogger::Get()>
   175bc:	e59f1048 	ldr	r1, [pc, #72]	@ 1760c <CUSBStandardHub::Configure()+0x15c>
   175c0:	e1a02005 	mov	r2, r5
   175c4:	e30b3ae4 	movw	r3, #47844	@ 0xbae4
   175c8:	e3403003 	movt	r3, #3
   175cc:	eb005e46 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   175d0:	eaffffcc 	b	17508 <CUSBStandardHub::Configure()+0x58>
   175d4:	eb005c7b 	bl	2e7c8 <CLogger::Get()>
   175d8:	e59f102c 	ldr	r1, [pc, #44]	@ 1760c <CUSBStandardHub::Configure()+0x15c>
   175dc:	e1a02005 	mov	r2, r5
   175e0:	e30b3acc 	movw	r3, #47820	@ 0xbacc
   175e4:	e3403003 	movt	r3, #3
   175e8:	eb005e3f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   175ec:	eaffffc5 	b	17508 <CUSBStandardHub::Configure()+0x58>
   175f0:	eb005c74 	bl	2e7c8 <CLogger::Get()>
   175f4:	e59f1010 	ldr	r1, [pc, #16]	@ 1760c <CUSBStandardHub::Configure()+0x15c>
   175f8:	e1a02005 	mov	r2, r5
   175fc:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   17600:	e3403003 	movt	r3, #3
   17604:	eb005e38 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17608:	eaffffbe 	b	17508 <CUSBStandardHub::Configure()+0x58>
   1760c:	0003f560 	.word	0x0003f560
   17610:	0003f558 	.word	0x0003f558

00017614 <CUSBStandardHub::HandlePortStatusChange()>:
   17614:	e590301c 	ldr	r3, [r0, #28]
   17618:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1761c:	e3530000 	cmp	r3, #0
   17620:	e24dd01c 	sub	sp, sp, #28
   17624:	0a0000d6 	beq	17984 <CUSBStandardHub::HandlePortStatusChange()+0x370>
   17628:	e5901020 	ldr	r1, [r0, #32]
   1762c:	e1a06000 	mov	r6, r0
   17630:	e5d32000 	ldrb	r2, [r3]
   17634:	e3510007 	cmp	r1, #7
   17638:	8a00008f 	bhi	1787c <CUSBStandardHub::HandlePortStatusChange()+0x268>
   1763c:	e1a0b002 	mov	fp, r2
   17640:	e3120001 	tst	r2, #1
   17644:	1a000091 	bne	17890 <CUSBStandardHub::HandlePortStatusChange()+0x27c>
   17648:	e3510000 	cmp	r1, #0
   1764c:	0a0000aa 	beq	178fc <CUSBStandardHub::HandlePortStatusChange()+0x2e8>
   17650:	e30b3b48 	movw	r3, #47944	@ 0xbb48
   17654:	e3403003 	movt	r3, #3
   17658:	e2865028 	add	r5, r6, #40	@ 0x28
   1765c:	e3a04000 	mov	r4, #0
   17660:	e58d3010 	str	r3, [sp, #16]
   17664:	ea000007 	b	17688 <CUSBStandardHub::HandlePortStatusChange()+0x74>
   17668:	e3170010 	tst	r7, #16
   1766c:	1a000045 	bne	17788 <CUSBStandardHub::HandlePortStatusChange()+0x174>
   17670:	e3170001 	tst	r7, #1
   17674:	1a00005e 	bne	177f4 <CUSBStandardHub::HandlePortStatusChange()+0x1e0>
   17678:	e5961020 	ldr	r1, [r6, #32]
   1767c:	e2855004 	add	r5, r5, #4
   17680:	e1540001 	cmp	r4, r1
   17684:	2a00009c 	bcs	178fc <CUSBStandardHub::HandlePortStatusChange()+0x2e8>
   17688:	e1a0a004 	mov	sl, r4
   1768c:	e2844001 	add	r4, r4, #1
   17690:	e1a0345b 	asr	r3, fp, r4
   17694:	e3130001 	tst	r3, #1
   17698:	0afffff7 	beq	1767c <CUSBStandardHub::HandlePortStatusChange()+0x68>
   1769c:	e1a00006 	mov	r0, r6
   176a0:	e6ff8074 	uxth	r8, r4
   176a4:	ebffe3de 	bl	10624 <CUSBFunction::GetHost() const>
   176a8:	e1a07000 	mov	r7, r0
   176ac:	e1a00006 	mov	r0, r6
   176b0:	ebffe3d0 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   176b4:	e3a03004 	mov	r3, #4
   176b8:	e58d300c 	str	r3, [sp, #12]
   176bc:	e1a01000 	mov	r1, r0
   176c0:	e1a00007 	mov	r0, r7
   176c4:	e3a07000 	mov	r7, #0
   176c8:	e5953020 	ldr	r3, [r5, #32]
   176cc:	e3a020a3 	mov	r2, #163	@ 0xa3
   176d0:	e58d3008 	str	r3, [sp, #8]
   176d4:	e1a03007 	mov	r3, r7
   176d8:	e58d8004 	str	r8, [sp, #4]
   176dc:	e58d7000 	str	r7, [sp]
   176e0:	ebfff0ce 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   176e4:	e3500004 	cmp	r0, #4
   176e8:	0a000005 	beq	17704 <CUSBStandardHub::HandlePortStatusChange()+0xf0>
   176ec:	eb005c35 	bl	2e7c8 <CLogger::Get()>
   176f0:	e59d3010 	ldr	r3, [sp, #16]
   176f4:	e59f12c0 	ldr	r1, [pc, #704]	@ 179bc <CUSBStandardHub::HandlePortStatusChange()+0x3a8>
   176f8:	e1a02007 	mov	r2, r7
   176fc:	e58d4000 	str	r4, [sp]
   17700:	eb005df9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17704:	e5953020 	ldr	r3, [r5, #32]
   17708:	e1d370b2 	ldrh	r7, [r3, #2]
   1770c:	e3170004 	tst	r7, #4
   17710:	1a00007f 	bne	17914 <CUSBStandardHub::HandlePortStatusChange()+0x300>
   17714:	e2179008 	ands	r9, r7, #8
   17718:	1a000083 	bne	1792c <CUSBStandardHub::HandlePortStatusChange()+0x318>
   1771c:	e3170002 	tst	r7, #2
   17720:	0affffd0 	beq	17668 <CUSBStandardHub::HandlePortStatusChange()+0x54>
   17724:	e1a00006 	mov	r0, r6
   17728:	ebffe3bd 	bl	10624 <CUSBFunction::GetHost() const>
   1772c:	e58d0014 	str	r0, [sp, #20]
   17730:	e1a00006 	mov	r0, r6
   17734:	ebffe3af 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   17738:	e3a03011 	mov	r3, #17
   1773c:	e1a01000 	mov	r1, r0
   17740:	e58d3000 	str	r3, [sp]
   17744:	e59d0014 	ldr	r0, [sp, #20]
   17748:	e3a03001 	mov	r3, #1
   1774c:	e3a02023 	mov	r2, #35	@ 0x23
   17750:	e58d900c 	str	r9, [sp, #12]
   17754:	e1cd80f4 	strd	r8, [sp, #4]
   17758:	ebfff0b0 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1775c:	e3500000 	cmp	r0, #0
   17760:	aaffffc0 	bge	17668 <CUSBStandardHub::HandlePortStatusChange()+0x54>
   17764:	eb005c17 	bl	2e7c8 <CLogger::Get()>
   17768:	e59f124c 	ldr	r1, [pc, #588]	@ 179bc <CUSBStandardHub::HandlePortStatusChange()+0x3a8>
   1776c:	e1a02009 	mov	r2, r9
   17770:	e58d4000 	str	r4, [sp]
   17774:	e30b3bc8 	movw	r3, #48072	@ 0xbbc8
   17778:	e3403003 	movt	r3, #3
   1777c:	eb005dda 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17780:	e3170010 	tst	r7, #16
   17784:	0affffb9 	beq	17670 <CUSBStandardHub::HandlePortStatusChange()+0x5c>
   17788:	e1a00006 	mov	r0, r6
   1778c:	ebffe3a4 	bl	10624 <CUSBFunction::GetHost() const>
   17790:	e1a09000 	mov	r9, r0
   17794:	e1a00006 	mov	r0, r6
   17798:	ebffe396 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1779c:	e3a03014 	mov	r3, #20
   177a0:	e1a01000 	mov	r1, r0
   177a4:	e58d3000 	str	r3, [sp]
   177a8:	e1a00009 	mov	r0, r9
   177ac:	e3a03001 	mov	r3, #1
   177b0:	e3a09000 	mov	r9, #0
   177b4:	e3a02023 	mov	r2, #35	@ 0x23
   177b8:	e58d8004 	str	r8, [sp, #4]
   177bc:	e58d900c 	str	r9, [sp, #12]
   177c0:	e58d9008 	str	r9, [sp, #8]
   177c4:	ebfff095 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   177c8:	e1500009 	cmp	r0, r9
   177cc:	aaffffa7 	bge	17670 <CUSBStandardHub::HandlePortStatusChange()+0x5c>
   177d0:	eb005bfc 	bl	2e7c8 <CLogger::Get()>
   177d4:	e59f11e0 	ldr	r1, [pc, #480]	@ 179bc <CUSBStandardHub::HandlePortStatusChange()+0x3a8>
   177d8:	e1a02009 	mov	r2, r9
   177dc:	e58d4000 	str	r4, [sp]
   177e0:	e30b3bf0 	movw	r3, #48112	@ 0xbbf0
   177e4:	e3403003 	movt	r3, #3
   177e8:	eb005dbf 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   177ec:	e3170001 	tst	r7, #1
   177f0:	0affffa0 	beq	17678 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   177f4:	e1a00006 	mov	r0, r6
   177f8:	ebffe389 	bl	10624 <CUSBFunction::GetHost() const>
   177fc:	e1a07000 	mov	r7, r0
   17800:	e1a00006 	mov	r0, r6
   17804:	ebffe37b 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   17808:	e3a03010 	mov	r3, #16
   1780c:	e1a01000 	mov	r1, r0
   17810:	e58d3000 	str	r3, [sp]
   17814:	e1a00007 	mov	r0, r7
   17818:	e3a03001 	mov	r3, #1
   1781c:	e3a07000 	mov	r7, #0
   17820:	e3a02023 	mov	r2, #35	@ 0x23
   17824:	e58d8004 	str	r8, [sp, #4]
   17828:	e58d700c 	str	r7, [sp, #12]
   1782c:	e58d7008 	str	r7, [sp, #8]
   17830:	ebfff07a 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   17834:	e1500007 	cmp	r0, r7
   17838:	ba000041 	blt	17944 <CUSBStandardHub::HandlePortStatusChange()+0x330>
   1783c:	e5953020 	ldr	r3, [r5, #32]
   17840:	e1d330b0 	ldrh	r3, [r3]
   17844:	e3130001 	tst	r3, #1
   17848:	e5953000 	ldr	r3, [r5]
   1784c:	0a000017 	beq	178b0 <CUSBStandardHub::HandlePortStatusChange()+0x29c>
   17850:	e3530000 	cmp	r3, #0
   17854:	1affff87 	bne	17678 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   17858:	e5963000 	ldr	r3, [r6]
   1785c:	e1a00006 	mov	r0, r6
   17860:	e5932028 	ldr	r2, [r3, #40]	@ 0x28
   17864:	e30734ac 	movw	r3, #29868	@ 0x74ac
   17868:	e3403001 	movt	r3, #1
   1786c:	e1520003 	cmp	r2, r3
   17870:	1a00004f 	bne	179b4 <CUSBStandardHub::HandlePortStatusChange()+0x3a0>
   17874:	ebfffd6e 	bl	16e34 <CUSBStandardHub::EnumeratePorts()>
   17878:	eaffff7e 	b	17678 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   1787c:	e351000f 	cmp	r1, #15
   17880:	8a000045 	bhi	1799c <CUSBStandardHub::HandlePortStatusChange()+0x388>
   17884:	e1d3b0b0 	ldrh	fp, [r3]
   17888:	e31b0001 	tst	fp, #1
   1788c:	0affff6f 	beq	17650 <CUSBStandardHub::HandlePortStatusChange()+0x3c>
   17890:	eb005bcc 	bl	2e7c8 <CLogger::Get()>
   17894:	e59f1120 	ldr	r1, [pc, #288]	@ 179bc <CUSBStandardHub::HandlePortStatusChange()+0x3a8>
   17898:	e3a02000 	mov	r2, #0
   1789c:	e30b3b28 	movw	r3, #47912	@ 0xbb28
   178a0:	e3403003 	movt	r3, #3
   178a4:	eb005d90 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   178a8:	e5961020 	ldr	r1, [r6, #32]
   178ac:	eaffff65 	b	17648 <CUSBStandardHub::HandlePortStatusChange()+0x34>
   178b0:	e3530000 	cmp	r3, #0
   178b4:	0affff6f 	beq	17678 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   178b8:	e1a0100a 	mov	r1, sl
   178bc:	e1a00006 	mov	r0, r6
   178c0:	ebfffc61 	bl	16a4c <CUSBStandardHub::DisablePort(unsigned int)>
   178c4:	e3500000 	cmp	r0, #0
   178c8:	0affff6a 	beq	17678 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   178cc:	e5950000 	ldr	r0, [r5]
   178d0:	e3500000 	cmp	r0, #0
   178d4:	0a000002 	beq	178e4 <CUSBStandardHub::HandlePortStatusChange()+0x2d0>
   178d8:	e5903000 	ldr	r3, [r0]
   178dc:	e5933004 	ldr	r3, [r3, #4]
   178e0:	e12fff33 	blx	r3
   178e4:	e5961020 	ldr	r1, [r6, #32]
   178e8:	e3a03000 	mov	r3, #0
   178ec:	e2855004 	add	r5, r5, #4
   178f0:	e5053004 	str	r3, [r5, #-4]
   178f4:	e1540001 	cmp	r4, r1
   178f8:	3affff62 	bcc	17688 <CUSBStandardHub::HandlePortStatusChange()+0x74>
   178fc:	e1a00006 	mov	r0, r6
   17900:	ebfffc92 	bl	16b50 <CUSBStandardHub::StartStatusChangeRequest()>
   17904:	e3500000 	cmp	r0, #0
   17908:	0a000015 	beq	17964 <CUSBStandardHub::HandlePortStatusChange()+0x350>
   1790c:	e28dd01c 	add	sp, sp, #28
   17910:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17914:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   17918:	e3401003 	movt	r1, #3
   1791c:	e30b0b6c 	movw	r0, #47980	@ 0xbb6c
   17920:	e3400003 	movt	r0, #3
   17924:	e3002236 	movw	r2, #566	@ 0x236
   17928:	eb00512b 	bl	2bddc <assertion_failed>
   1792c:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   17930:	e3401003 	movt	r1, #3
   17934:	e30b0b98 	movw	r0, #48024	@ 0xbb98
   17938:	e3400003 	movt	r0, #3
   1793c:	e3002237 	movw	r2, #567	@ 0x237
   17940:	eb005125 	bl	2bddc <assertion_failed>
   17944:	eb005b9f 	bl	2e7c8 <CLogger::Get()>
   17948:	e59f106c 	ldr	r1, [pc, #108]	@ 179bc <CUSBStandardHub::HandlePortStatusChange()+0x3a8>
   1794c:	e1a02007 	mov	r2, r7
   17950:	e58d4000 	str	r4, [sp]
   17954:	e30b3c14 	movw	r3, #48148	@ 0xbc14
   17958:	e3403003 	movt	r3, #3
   1795c:	eb005d62 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17960:	eaffffb5 	b	1783c <CUSBStandardHub::HandlePortStatusChange()+0x228>
   17964:	eb005b97 	bl	2e7c8 <CLogger::Get()>
   17968:	e59f104c 	ldr	r1, [pc, #76]	@ 179bc <CUSBStandardHub::HandlePortStatusChange()+0x3a8>
   1796c:	e3a02001 	mov	r2, #1
   17970:	e30b3494 	movw	r3, #46228	@ 0xb494
   17974:	e3403003 	movt	r3, #3
   17978:	e28dd01c 	add	sp, sp, #28
   1797c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17980:	ea005d59 	b	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   17984:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   17988:	e3401003 	movt	r1, #3
   1798c:	e30b0afc 	movw	r0, #47868	@ 0xbafc
   17990:	e3400003 	movt	r0, #3
   17994:	e3002212 	movw	r2, #530	@ 0x212
   17998:	eb00510f 	bl	2bddc <assertion_failed>
   1799c:	e30b18a0 	movw	r1, #47264	@ 0xb8a0
   179a0:	e3401003 	movt	r1, #3
   179a4:	e30b0b18 	movw	r0, #47896	@ 0xbb18
   179a8:	e3400003 	movt	r0, #3
   179ac:	e3002216 	movw	r2, #534	@ 0x216
   179b0:	eb005109 	bl	2bddc <assertion_failed>
   179b4:	e12fff32 	blx	r2
   179b8:	eaffff2e 	b	17678 <CUSBStandardHub::HandlePortStatusChange()+0x64>
   179bc:	0003f560 	.word	0x0003f560

000179c0 <_GLOBAL__sub_I__ZN15CUSBStandardHub18s_DeviceNumberPoolE>:
   179c0:	e92d4010 	push	{r4, lr}
   179c4:	e30440c8 	movw	r4, #16584	@ 0x40c8
   179c8:	e3404004 	movt	r4, #4
   179cc:	e3a0203f 	mov	r2, #63	@ 0x3f
   179d0:	e3a01001 	mov	r1, #1
   179d4:	e1a00004 	mov	r0, r4
   179d8:	eb007b0a 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   179dc:	e1a00004 	mov	r0, r4
   179e0:	e3042180 	movw	r2, #16768	@ 0x4180
   179e4:	e3402004 	movt	r2, #4
   179e8:	e3061658 	movw	r1, #26200	@ 0x6658
   179ec:	e3401003 	movt	r1, #3
   179f0:	e8bd4010 	pop	{r4, lr}
   179f4:	ea0071d6 	b	34154 <__aeabi_atexit>

000179f8 <CUSBString::CUSBString(CUSBDevice*)>:
   179f8:	e92d4070 	push	{r4, r5, r6, lr}
   179fc:	e1a04000 	mov	r4, r0
   17a00:	e3a03000 	mov	r3, #0
   17a04:	e3a00010 	mov	r0, #16
   17a08:	e884000a 	stm	r4, {r1, r3}
   17a0c:	eb0079c4 	bl	36124 <operator new(unsigned int)>
   17a10:	e1a05000 	mov	r5, r0
   17a14:	eb006c0a 	bl	32a44 <CString::CString()>
   17a18:	e5943000 	ldr	r3, [r4]
   17a1c:	e5845008 	str	r5, [r4, #8]
   17a20:	e3530000 	cmp	r3, #0
   17a24:	0a000001 	beq	17a30 <CUSBString::CUSBString(CUSBDevice*)+0x38>
   17a28:	e1a00004 	mov	r0, r4
   17a2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   17a30:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17a34:	e3401003 	movt	r1, #3
   17a38:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   17a3c:	e3400003 	movt	r0, #3
   17a40:	e3a02023 	mov	r2, #35	@ 0x23
   17a44:	eb0050e4 	bl	2bddc <assertion_failed>

00017a48 <CUSBString::CUSBString(CUSBString*)>:
   17a48:	e92d4070 	push	{r4, r5, r6, lr}
   17a4c:	e1a04000 	mov	r4, r0
   17a50:	e3a03000 	mov	r3, #0
   17a54:	e3a00010 	mov	r0, #16
   17a58:	e1a05001 	mov	r5, r1
   17a5c:	e5843004 	str	r3, [r4, #4]
   17a60:	eb0079af 	bl	36124 <operator new(unsigned int)>
   17a64:	e1a06000 	mov	r6, r0
   17a68:	eb006bf5 	bl	32a44 <CString::CString()>
   17a6c:	e3550000 	cmp	r5, #0
   17a70:	e5846008 	str	r6, [r4, #8]
   17a74:	0a000018 	beq	17adc <CUSBString::CUSBString(CUSBString*)+0x94>
   17a78:	e1c520d0 	ldrd	r2, [r5]
   17a7c:	e5842000 	str	r2, [r4]
   17a80:	e3530000 	cmp	r3, #0
   17a84:	0a000008 	beq	17aac <CUSBString::CUSBString(CUSBString*)+0x64>
   17a88:	e5d30000 	ldrb	r0, [r3]
   17a8c:	eb0079aa 	bl	3613c <operator new[](unsigned int)>
   17a90:	e5951004 	ldr	r1, [r5, #4]
   17a94:	e5840004 	str	r0, [r4, #4]
   17a98:	e5d12000 	ldrb	r2, [r1]
   17a9c:	eb007798 	bl	35904 <memcpy>
   17aa0:	e5943008 	ldr	r3, [r4, #8]
   17aa4:	e3530000 	cmp	r3, #0
   17aa8:	0a000005 	beq	17ac4 <CUSBString::CUSBString(CUSBString*)+0x7c>
   17aac:	e5953008 	ldr	r3, [r5, #8]
   17ab0:	e3530000 	cmp	r3, #0
   17ab4:	0a00000e 	beq	17af4 <CUSBString::CUSBString(CUSBString*)+0xac>
   17ab8:	e1a00004 	mov	r0, r4
   17abc:	e5843008 	str	r3, [r4, #8]
   17ac0:	e8bd8070 	pop	{r4, r5, r6, pc}
   17ac4:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17ac8:	e3401003 	movt	r1, #3
   17acc:	e30b0c50 	movw	r0, #48208	@ 0xbc50
   17ad0:	e3400003 	movt	r0, #3
   17ad4:	e3a02035 	mov	r2, #53	@ 0x35
   17ad8:	eb0050bf 	bl	2bddc <assertion_failed>
   17adc:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17ae0:	e3401003 	movt	r1, #3
   17ae4:	e30a0d6c 	movw	r0, #44396	@ 0xad6c
   17ae8:	e3400003 	movt	r0, #3
   17aec:	e3a0202b 	mov	r2, #43	@ 0x2b
   17af0:	eb0050b9 	bl	2bddc <assertion_failed>
   17af4:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17af8:	e3401003 	movt	r1, #3
   17afc:	e30b0c60 	movw	r0, #48224	@ 0xbc60
   17b00:	e3400003 	movt	r0, #3
   17b04:	e3a02036 	mov	r2, #54	@ 0x36
   17b08:	eb0050b3 	bl	2bddc <assertion_failed>

00017b0c <CUSBString::~CUSBString()>:
   17b0c:	e92d4010 	push	{r4, lr}
   17b10:	e1a04000 	mov	r4, r0
   17b14:	e5900008 	ldr	r0, [r0, #8]
   17b18:	e3500000 	cmp	r0, #0
   17b1c:	0a000002 	beq	17b2c <CUSBString::~CUSBString()+0x20>
   17b20:	e5903000 	ldr	r3, [r0]
   17b24:	e5933004 	ldr	r3, [r3, #4]
   17b28:	e12fff33 	blx	r3
   17b2c:	e5940004 	ldr	r0, [r4, #4]
   17b30:	e3a03000 	mov	r3, #0
   17b34:	e5843008 	str	r3, [r4, #8]
   17b38:	e1500003 	cmp	r0, r3
   17b3c:	0a000000 	beq	17b44 <CUSBString::~CUSBString()+0x38>
   17b40:	eb007989 	bl	3616c <operator delete[](void*)>
   17b44:	e1a00004 	mov	r0, r4
   17b48:	e8bd8010 	pop	{r4, pc}

00017b4c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>:
   17b4c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b50:	e2516000 	subs	r6, r1, #0
   17b54:	e28db020 	add	fp, sp, #32
   17b58:	e24dd01c 	sub	sp, sp, #28
   17b5c:	0a000050 	beq	17ca4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x158>
   17b60:	e1a04000 	mov	r4, r0
   17b64:	e5900004 	ldr	r0, [r0, #4]
   17b68:	e1a07002 	mov	r7, r2
   17b6c:	e3500000 	cmp	r0, #0
   17b70:	0a000000 	beq	17b78 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x2c>
   17b74:	eb00797c 	bl	3616c <operator delete[](void*)>
   17b78:	e3a00004 	mov	r0, #4
   17b7c:	eb00796e 	bl	3613c <operator new[](unsigned int)>
   17b80:	e5943000 	ldr	r3, [r4]
   17b84:	e5840004 	str	r0, [r4, #4]
   17b88:	e3530000 	cmp	r3, #0
   17b8c:	0a00004a 	beq	17cbc <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x170>
   17b90:	e1a00003 	mov	r0, r3
   17b94:	e3a08080 	mov	r8, #128	@ 0x80
   17b98:	ebffdb01 	bl	e7a4 <CUSBDevice::GetHost() const>
   17b9c:	e1a05000 	mov	r5, r0
   17ba0:	e5940000 	ldr	r0, [r4]
   17ba4:	ebffdaf4 	bl	e77c <CUSBDevice::GetEndpoint0() const>
   17ba8:	e58d700c 	str	r7, [sp, #12]
   17bac:	e58d8008 	str	r8, [sp, #8]
   17bb0:	e1a01000 	mov	r1, r0
   17bb4:	e3a02003 	mov	r2, #3
   17bb8:	e1a00005 	mov	r0, r5
   17bbc:	e5943004 	ldr	r3, [r4, #4]
   17bc0:	e58d3000 	str	r3, [sp]
   17bc4:	e3a03004 	mov	r3, #4
   17bc8:	e58d3004 	str	r3, [sp, #4]
   17bcc:	e1a03006 	mov	r3, r6
   17bd0:	ebffefc8 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17bd4:	e3500000 	cmp	r0, #0
   17bd8:	ba00002e 	blt	17c98 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   17bdc:	e5940004 	ldr	r0, [r4, #4]
   17be0:	e5d05000 	ldrb	r5, [r0]
   17be4:	e3550001 	cmp	r5, #1
   17be8:	9a00002a 	bls	17c98 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   17bec:	e3150001 	tst	r5, #1
   17bf0:	1a000028 	bne	17c98 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   17bf4:	e5d09001 	ldrb	r9, [r0, #1]
   17bf8:	e3590003 	cmp	r9, #3
   17bfc:	1a000025 	bne	17c98 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   17c00:	e3550004 	cmp	r5, #4
   17c04:	8a000032 	bhi	17cd4 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x188>
   17c08:	e3550002 	cmp	r5, #2
   17c0c:	0a000056 	beq	17d6c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x220>
   17c10:	e3550004 	cmp	r5, #4
   17c14:	024b6028 	subeq	r6, fp, #40	@ 0x28
   17c18:	03a0c001 	moveq	ip, #1
   17c1c:	1a000058 	bne	17d84 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   17c20:	e24c5001 	sub	r5, ip, #1
   17c24:	e2462001 	sub	r2, r6, #1
   17c28:	e0855006 	add	r5, r5, r6
   17c2c:	e2661001 	rsb	r1, r6, #1
   17c30:	e0813002 	add	r3, r1, r2
   17c34:	e0803083 	add	r3, r0, r3, lsl #1
   17c38:	e1d330b2 	ldrh	r3, [r3, #2]
   17c3c:	e243e020 	sub	lr, r3, #32
   17c40:	e3530000 	cmp	r3, #0
   17c44:	135e005e 	cmpne	lr, #94	@ 0x5e
   17c48:	83a0305f 	movhi	r3, #95	@ 0x5f
   17c4c:	e5e23001 	strb	r3, [r2, #1]!
   17c50:	e1520005 	cmp	r2, r5
   17c54:	1afffff5 	bne	17c30 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xe4>
   17c58:	e5940008 	ldr	r0, [r4, #8]
   17c5c:	e3a03000 	mov	r3, #0
   17c60:	e7c6300c 	strb	r3, [r6, ip]
   17c64:	e1500003 	cmp	r0, r3
   17c68:	0a000002 	beq	17c78 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x12c>
   17c6c:	e5903000 	ldr	r3, [r0]
   17c70:	e5933004 	ldr	r3, [r3, #4]
   17c74:	e12fff33 	blx	r3
   17c78:	e3a00010 	mov	r0, #16
   17c7c:	eb007928 	bl	36124 <operator new(unsigned int)>
   17c80:	e1a01006 	mov	r1, r6
   17c84:	e1a05000 	mov	r5, r0
   17c88:	eb006b73 	bl	32a5c <CString::CString(char const*)>
   17c8c:	e3a00001 	mov	r0, #1
   17c90:	e5845008 	str	r5, [r4, #8]
   17c94:	ea000000 	b	17c9c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x150>
   17c98:	e3a00000 	mov	r0, #0
   17c9c:	e24bd020 	sub	sp, fp, #32
   17ca0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ca4:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17ca8:	e3401003 	movt	r1, #3
   17cac:	e30b0c78 	movw	r0, #48248	@ 0xbc78
   17cb0:	e3400003 	movt	r0, #3
   17cb4:	e3a02047 	mov	r2, #71	@ 0x47
   17cb8:	eb005047 	bl	2bddc <assertion_failed>
   17cbc:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17cc0:	e3401003 	movt	r1, #3
   17cc4:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   17cc8:	e3400003 	movt	r0, #3
   17ccc:	e3a0204d 	mov	r2, #77	@ 0x4d
   17cd0:	eb005041 	bl	2bddc <assertion_failed>
   17cd4:	e3a01002 	mov	r1, #2
   17cd8:	eb007929 	bl	36184 <operator delete(void*, unsigned int)>
   17cdc:	e1a00005 	mov	r0, r5
   17ce0:	eb007915 	bl	3613c <operator new[](unsigned int)>
   17ce4:	e5840004 	str	r0, [r4, #4]
   17ce8:	e5940000 	ldr	r0, [r4]
   17cec:	ebffdaac 	bl	e7a4 <CUSBDevice::GetHost() const>
   17cf0:	e1a0a000 	mov	sl, r0
   17cf4:	e5940000 	ldr	r0, [r4]
   17cf8:	ebffda9f 	bl	e77c <CUSBDevice::GetEndpoint0() const>
   17cfc:	e58d700c 	str	r7, [sp, #12]
   17d00:	e58d8008 	str	r8, [sp, #8]
   17d04:	e1a01000 	mov	r1, r0
   17d08:	e58d5004 	str	r5, [sp, #4]
   17d0c:	e1a03006 	mov	r3, r6
   17d10:	e1a02009 	mov	r2, r9
   17d14:	e1a0000a 	mov	r0, sl
   17d18:	e594c004 	ldr	ip, [r4, #4]
   17d1c:	e58dc000 	str	ip, [sp]
   17d20:	ebffef74 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17d24:	e1500005 	cmp	r0, r5
   17d28:	1affffda 	bne	17c98 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   17d2c:	e5940004 	ldr	r0, [r4, #4]
   17d30:	e5d03000 	ldrb	r3, [r0]
   17d34:	e1530005 	cmp	r3, r5
   17d38:	1affffd6 	bne	17c98 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   17d3c:	e5d03001 	ldrb	r3, [r0, #1]
   17d40:	e3530003 	cmp	r3, #3
   17d44:	1affffd3 	bne	17c98 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x14c>
   17d48:	e3150001 	tst	r5, #1
   17d4c:	1a00000c 	bne	17d84 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0x238>
   17d50:	e245c002 	sub	ip, r5, #2
   17d54:	e1a0c0cc 	asr	ip, ip, #1
   17d58:	e28c3008 	add	r3, ip, #8
   17d5c:	e3c33007 	bic	r3, r3, #7
   17d60:	e04dd003 	sub	sp, sp, r3
   17d64:	e28d6010 	add	r6, sp, #16
   17d68:	eaffffac 	b	17c20 <CUSBString::GetFromDescriptor(unsigned char, unsigned short)+0xd4>
   17d6c:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17d70:	e3401003 	movt	r1, #3
   17d74:	e30b0c84 	movw	r0, #48260	@ 0xbc84
   17d78:	e3400003 	movt	r0, #3
   17d7c:	e3a02075 	mov	r2, #117	@ 0x75
   17d80:	eb005015 	bl	2bddc <assertion_failed>
   17d84:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17d88:	e3401003 	movt	r1, #3
   17d8c:	e30b0ca0 	movw	r0, #48288	@ 0xbca0
   17d90:	e3400003 	movt	r0, #3
   17d94:	e3a02076 	mov	r2, #118	@ 0x76
   17d98:	eb00500f 	bl	2bddc <assertion_failed>

00017d9c <CUSBString::Get() const>:
   17d9c:	e5900008 	ldr	r0, [r0, #8]
   17da0:	ea006b5f 	b	32b24 <CString::operator char const*() const>

00017da4 <CUSBString::GetLanguageID()>:
   17da4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   17da8:	e1a06000 	mov	r6, r0
   17dac:	e3a00004 	mov	r0, #4
   17db0:	e24dd014 	sub	sp, sp, #20
   17db4:	eb0078e0 	bl	3613c <operator new[](unsigned int)>
   17db8:	e5963000 	ldr	r3, [r6]
   17dbc:	e3530000 	cmp	r3, #0
   17dc0:	0a000057 	beq	17f24 <CUSBString::GetLanguageID()+0x180>
   17dc4:	e1a04000 	mov	r4, r0
   17dc8:	e1a00003 	mov	r0, r3
   17dcc:	ebffda74 	bl	e7a4 <CUSBDevice::GetHost() const>
   17dd0:	e1a05000 	mov	r5, r0
   17dd4:	e5960000 	ldr	r0, [r6]
   17dd8:	e3a07080 	mov	r7, #128	@ 0x80
   17ddc:	ebffda66 	bl	e77c <CUSBDevice::GetEndpoint0() const>
   17de0:	e3a03000 	mov	r3, #0
   17de4:	e1a01000 	mov	r1, r0
   17de8:	e3a02004 	mov	r2, #4
   17dec:	e1a00005 	mov	r0, r5
   17df0:	e58d2004 	str	r2, [sp, #4]
   17df4:	e58d300c 	str	r3, [sp, #12]
   17df8:	e3a02003 	mov	r2, #3
   17dfc:	e58d4000 	str	r4, [sp]
   17e00:	e58d7008 	str	r7, [sp, #8]
   17e04:	ebffef3b 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17e08:	e3500000 	cmp	r0, #0
   17e0c:	ba000015 	blt	17e68 <CUSBString::GetLanguageID()+0xc4>
   17e10:	e5d45000 	ldrb	r5, [r4]
   17e14:	e3550003 	cmp	r5, #3
   17e18:	9a000012 	bls	17e68 <CUSBString::GetLanguageID()+0xc4>
   17e1c:	e2159001 	ands	r9, r5, #1
   17e20:	1a000010 	bne	17e68 <CUSBString::GetLanguageID()+0xc4>
   17e24:	e5d48001 	ldrb	r8, [r4, #1]
   17e28:	e3580003 	cmp	r8, #3
   17e2c:	1a00000d 	bne	17e68 <CUSBString::GetLanguageID()+0xc4>
   17e30:	e3550004 	cmp	r5, #4
   17e34:	1a000011 	bne	17e80 <CUSBString::GetLanguageID()+0xdc>
   17e38:	e2455002 	sub	r5, r5, #2
   17e3c:	e3a03000 	mov	r3, #0
   17e40:	e3001409 	movw	r1, #1033	@ 0x409
   17e44:	e1a050c5 	asr	r5, r5, #1
   17e48:	ea000002 	b	17e58 <CUSBString::GetLanguageID()+0xb4>
   17e4c:	e2833001 	add	r3, r3, #1
   17e50:	e1550003 	cmp	r5, r3
   17e54:	0a00002c 	beq	17f0c <CUSBString::GetLanguageID()+0x168>
   17e58:	e0842083 	add	r2, r4, r3, lsl #1
   17e5c:	e1d220b2 	ldrh	r2, [r2, #2]
   17e60:	e1520001 	cmp	r2, r1
   17e64:	1afffff8 	bne	17e4c <CUSBString::GetLanguageID()+0xa8>
   17e68:	e1a00004 	mov	r0, r4
   17e6c:	e3004409 	movw	r4, #1033	@ 0x409
   17e70:	eb0078bd 	bl	3616c <operator delete[](void*)>
   17e74:	e1a00004 	mov	r0, r4
   17e78:	e28dd014 	add	sp, sp, #20
   17e7c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e80:	e1a00004 	mov	r0, r4
   17e84:	eb0078b8 	bl	3616c <operator delete[](void*)>
   17e88:	e1a00005 	mov	r0, r5
   17e8c:	eb0078aa 	bl	3613c <operator new[](unsigned int)>
   17e90:	e1a04000 	mov	r4, r0
   17e94:	e5960000 	ldr	r0, [r6]
   17e98:	ebffda41 	bl	e7a4 <CUSBDevice::GetHost() const>
   17e9c:	e1a03000 	mov	r3, r0
   17ea0:	e5960000 	ldr	r0, [r6]
   17ea4:	e1a06003 	mov	r6, r3
   17ea8:	ebffda33 	bl	e77c <CUSBDevice::GetEndpoint0() const>
   17eac:	e1a02008 	mov	r2, r8
   17eb0:	e1a01000 	mov	r1, r0
   17eb4:	e1a03009 	mov	r3, r9
   17eb8:	e1a00006 	mov	r0, r6
   17ebc:	e58d7008 	str	r7, [sp, #8]
   17ec0:	e58d900c 	str	r9, [sp, #12]
   17ec4:	e1cd40f0 	strd	r4, [sp]
   17ec8:	ebffef0a 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   17ecc:	e1500005 	cmp	r0, r5
   17ed0:	1affffe4 	bne	17e68 <CUSBString::GetLanguageID()+0xc4>
   17ed4:	e5d43000 	ldrb	r3, [r4]
   17ed8:	e1530005 	cmp	r3, r5
   17edc:	1affffe1 	bne	17e68 <CUSBString::GetLanguageID()+0xc4>
   17ee0:	e5d43001 	ldrb	r3, [r4, #1]
   17ee4:	e3530003 	cmp	r3, #3
   17ee8:	1affffde 	bne	17e68 <CUSBString::GetLanguageID()+0xc4>
   17eec:	e3150001 	tst	r5, #1
   17ef0:	0affffd0 	beq	17e38 <CUSBString::GetLanguageID()+0x94>
   17ef4:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17ef8:	e3401003 	movt	r1, #3
   17efc:	e30b0cc4 	movw	r0, #48324	@ 0xbcc4
   17f00:	e3400003 	movt	r0, #3
   17f04:	e3a020c9 	mov	r2, #201	@ 0xc9
   17f08:	eb004fb3 	bl	2bddc <assertion_failed>
   17f0c:	e1a00004 	mov	r0, r4
   17f10:	e1d440b2 	ldrh	r4, [r4, #2]
   17f14:	eb007894 	bl	3616c <operator delete[](void*)>
   17f18:	e1a00004 	mov	r0, r4
   17f1c:	e28dd014 	add	sp, sp, #20
   17f20:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   17f24:	e30b1c40 	movw	r1, #48192	@ 0xbc40
   17f28:	e3401003 	movt	r1, #3
   17f2c:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   17f30:	e3400003 	movt	r0, #3
   17f34:	e3a0209b 	mov	r2, #155	@ 0x9b
   17f38:	eb004fa7 	bl	2bddc <assertion_failed>

00017f3c <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   17f3c:	e59f3014 	ldr	r3, [pc, #20]	@ 17f58 <CUSBSerialCH341Device::~CUSBSerialCH341Device()+0x1c>
   17f40:	e92d4010 	push	{r4, lr}
   17f44:	e1a04000 	mov	r4, r0
   17f48:	e5803000 	str	r3, [r0]
   17f4c:	eb001855 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   17f50:	e1a00004 	mov	r0, r4
   17f54:	e8bd8010 	pop	{r4, pc}
   17f58:	0003f570 	.word	0x0003f570

00017f5c <CUSBSerialCH341Device::~CUSBSerialCH341Device()>:
   17f5c:	e59f3020 	ldr	r3, [pc, #32]	@ 17f84 <CUSBSerialCH341Device::~CUSBSerialCH341Device()+0x28>
   17f60:	e92d4010 	push	{r4, lr}
   17f64:	e1a04000 	mov	r4, r0
   17f68:	e5803000 	str	r3, [r0]
   17f6c:	eb00184d 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   17f70:	e1a00004 	mov	r0, r4
   17f74:	e3a01040 	mov	r1, #64	@ 0x40
   17f78:	eb007881 	bl	36184 <operator delete(void*, unsigned int)>
   17f7c:	e1a00004 	mov	r0, r4
   17f80:	e8bd8010 	pop	{r4, pc}
   17f84:	0003f570 	.word	0x0003f570

00017f88 <CUSBSerialCH341Device::SetBaudRate(unsigned int)>:
   17f88:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   17f8c:	e3a02a0f 	mov	r2, #61440	@ 0xf000
   17f90:	e3452b59 	movt	r2, #23385	@ 0x5b59
   17f94:	e1a05001 	mov	r5, r1
   17f98:	e24dd014 	sub	sp, sp, #20
   17f9c:	e30f1ff0 	movw	r1, #65520	@ 0xfff0
   17fa0:	e1a04000 	mov	r4, r0
   17fa4:	e3a03003 	mov	r3, #3
   17fa8:	e732f512 	udiv	r2, r2, r5
   17fac:	e1520001 	cmp	r2, r1
   17fb0:	9a000007 	bls	17fd4 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x4c>
   17fb4:	e2433001 	sub	r3, r3, #1
   17fb8:	e1a021a2 	lsr	r2, r2, #3
   17fbc:	e6ff3073 	uxth	r3, r3
   17fc0:	e3530000 	cmp	r3, #0
   17fc4:	11520001 	cmpne	r2, r1
   17fc8:	8afffff9 	bhi	17fb4 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x2c>
   17fcc:	e1520001 	cmp	r2, r1
   17fd0:	8a00001a 	bhi	18040 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xb8>
   17fd4:	e2622801 	rsb	r2, r2, #65536	@ 0x10000
   17fd8:	e1a00004 	mov	r0, r4
   17fdc:	e2022cff 	and	r2, r2, #65280	@ 0xff00
   17fe0:	e1822003 	orr	r2, r2, r3
   17fe4:	e3826080 	orr	r6, r2, #128	@ 0x80
   17fe8:	ebffe18d 	bl	10624 <CUSBFunction::GetHost() const>
   17fec:	e2507000 	subs	r7, r0, #0
   17ff0:	0a000021 	beq	1807c <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xf4>
   17ff4:	e1a00004 	mov	r0, r4
   17ff8:	ebffe17e 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   17ffc:	e3a02000 	mov	r2, #0
   18000:	e1a01000 	mov	r1, r0
   18004:	e3013312 	movw	r3, #4882	@ 0x1312
   18008:	e58d200c 	str	r2, [sp, #12]
   1800c:	e1a00007 	mov	r0, r7
   18010:	e58d3000 	str	r3, [sp]
   18014:	e3a0309a 	mov	r3, #154	@ 0x9a
   18018:	e58d2008 	str	r2, [sp, #8]
   1801c:	e3a02040 	mov	r2, #64	@ 0x40
   18020:	e58d6004 	str	r6, [sp, #4]
   18024:	ebffee7d 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18028:	e3500000 	cmp	r0, #0
   1802c:	a3a00001 	movge	r0, #1
   18030:	a5845014 	strge	r5, [r4, #20]
   18034:	ba000009 	blt	18060 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xd8>
   18038:	e28dd014 	add	sp, sp, #20
   1803c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18040:	eb0059e0 	bl	2e7c8 <CLogger::Get()>
   18044:	e30b3ce8 	movw	r3, #48360	@ 0xbce8
   18048:	e3403003 	movt	r3, #3
   1804c:	e59f1040 	ldr	r1, [pc, #64]	@ 18094 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x10c>
   18050:	e3a02001 	mov	r2, #1
   18054:	eb005ba4 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18058:	e3a00000 	mov	r0, #0
   1805c:	eafffff5 	b	18038 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xb0>
   18060:	eb0059d8 	bl	2e7c8 <CLogger::Get()>
   18064:	e59f1028 	ldr	r1, [pc, #40]	@ 18094 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0x10c>
   18068:	e3a02001 	mov	r2, #1
   1806c:	e30b3d0c 	movw	r3, #48396	@ 0xbd0c
   18070:	e3403003 	movt	r3, #3
   18074:	eb005b9c 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18078:	eafffff6 	b	18058 <CUSBSerialCH341Device::SetBaudRate(unsigned int)+0xd0>
   1807c:	e30b1cf8 	movw	r1, #48376	@ 0xbcf8
   18080:	e3401003 	movt	r1, #3
   18084:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   18088:	e3400003 	movt	r0, #3
   1808c:	e3a02087 	mov	r2, #135	@ 0x87
   18090:	eb004f51 	bl	2bddc <assertion_failed>
   18094:	0003f5a4 	.word	0x0003f5a4

00018098 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)>:
   18098:	e92d4010 	push	{r4, lr}
   1809c:	e1a04000 	mov	r4, r0
   180a0:	e3a02000 	mov	r2, #0
   180a4:	eb00190b 	bl	1e4d8 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   180a8:	e59f3008 	ldr	r3, [pc, #8]	@ 180b8 <CUSBSerialCH341Device::CUSBSerialCH341Device(CUSBFunction*)+0x20>
   180ac:	e1a00004 	mov	r0, r4
   180b0:	e5843000 	str	r3, [r4]
   180b4:	e8bd8010 	pop	{r4, pc}
   180b8:	0003f570 	.word	0x0003f570

000180bc <CUSBSerialCH341Device::GetDeviceIDTable()>:
   180bc:	e59f0000 	ldr	r0, [pc]	@ 180c4 <CUSBSerialCH341Device::GetDeviceIDTable()+0x8>
   180c0:	e12fff1e 	bx	lr
   180c4:	0003f5ac 	.word	0x0003f5ac

000180c8 <CUSBSerialCH341Device::Configure()>:
   180c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   180cc:	e1a06000 	mov	r6, r0
   180d0:	e24dd08c 	sub	sp, sp, #140	@ 0x8c
   180d4:	eb001963 	bl	1e668 <CUSBSerialDevice::Configure()>
   180d8:	e3500000 	cmp	r0, #0
   180dc:	0a00004a 	beq	1820c <CUSBSerialCH341Device::Configure()+0x144>
   180e0:	e1a00006 	mov	r0, r6
   180e4:	ebffe14e 	bl	10624 <CUSBFunction::GetHost() const>
   180e8:	e2507000 	subs	r7, r0, #0
   180ec:	0a00004d 	beq	18228 <CUSBSerialCH341Device::Configure()+0x160>
   180f0:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   180f4:	e28d404f 	add	r4, sp, #79	@ 0x4f
   180f8:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   180fc:	e1a00006 	mov	r0, r6
   18100:	e3a05000 	mov	r5, #0
   18104:	f4440a2f 	vst1.8	{d16-d17}, [r4 :128]
   18108:	edc40b04 	vstr	d16, [r4, #16]
   1810c:	edc40b06 	vstr	d16, [r4, #24]
   18110:	edc40b08 	vstr	d16, [r4, #32]
   18114:	edc40b0a 	vstr	d16, [r4, #40]	@ 0x28
   18118:	edc40b0c 	vstr	d16, [r4, #48]	@ 0x30
   1811c:	edc40b0e 	vstr	d16, [r4, #56]	@ 0x38
   18120:	ebffe134 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18124:	e3a03002 	mov	r3, #2
   18128:	e1a01000 	mov	r1, r0
   1812c:	e58d300c 	str	r3, [sp, #12]
   18130:	e3a020c0 	mov	r2, #192	@ 0xc0
   18134:	e3a0305f 	mov	r3, #95	@ 0x5f
   18138:	e1a00007 	mov	r0, r7
   1813c:	e58d4008 	str	r4, [sp, #8]
   18140:	e58d5004 	str	r5, [sp, #4]
   18144:	e58d5000 	str	r5, [sp]
   18148:	ebffee34 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1814c:	e3500002 	cmp	r0, #2
   18150:	0a000008 	beq	18178 <CUSBSerialCH341Device::Configure()+0xb0>
   18154:	eb00599b 	bl	2e7c8 <CLogger::Get()>
   18158:	e30b3d44 	movw	r3, #48452	@ 0xbd44
   1815c:	e3403003 	movt	r3, #3
   18160:	e59f10f4 	ldr	r1, [pc, #244]	@ 1825c <CUSBSerialCH341Device::Configure()+0x194>
   18164:	e3a02001 	mov	r2, #1
   18168:	eb005b5f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1816c:	e3a00000 	mov	r0, #0
   18170:	e28dd08c 	add	sp, sp, #140	@ 0x8c
   18174:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   18178:	eb005992 	bl	2e7c8 <CLogger::Get()>
   1817c:	e5d43000 	ldrb	r3, [r4]
   18180:	e59f10d4 	ldr	r1, [pc, #212]	@ 1825c <CUSBSerialCH341Device::Configure()+0x194>
   18184:	e3a02003 	mov	r2, #3
   18188:	e58d3000 	str	r3, [sp]
   1818c:	e30b3d60 	movw	r3, #48480	@ 0xbd60
   18190:	e3403003 	movt	r3, #3
   18194:	eb005b54 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18198:	e1a00006 	mov	r0, r6
   1819c:	ebffe115 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   181a0:	e3a030a1 	mov	r3, #161	@ 0xa1
   181a4:	e1a01000 	mov	r1, r0
   181a8:	e3a02040 	mov	r2, #64	@ 0x40
   181ac:	e1a00007 	mov	r0, r7
   181b0:	e58d500c 	str	r5, [sp, #12]
   181b4:	e58d5008 	str	r5, [sp, #8]
   181b8:	e58d5004 	str	r5, [sp, #4]
   181bc:	e58d5000 	str	r5, [sp]
   181c0:	ebffee16 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   181c4:	e3500000 	cmp	r0, #0
   181c8:	ba00001c 	blt	18240 <CUSBSerialCH341Device::Configure()+0x178>
   181cc:	e5963000 	ldr	r3, [r6]
   181d0:	e3a01d96 	mov	r1, #9600	@ 0x2580
   181d4:	e1a00006 	mov	r0, r6
   181d8:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   181dc:	e12fff33 	blx	r3
   181e0:	e3500000 	cmp	r0, #0
   181e4:	0affffe0 	beq	1816c <CUSBSerialCH341Device::Configure()+0xa4>
   181e8:	e596c000 	ldr	ip, [r6]
   181ec:	e3a03001 	mov	r3, #1
   181f0:	e1a02005 	mov	r2, r5
   181f4:	e3a01008 	mov	r1, #8
   181f8:	e1a00006 	mov	r0, r6
   181fc:	e59c4030 	ldr	r4, [ip, #48]	@ 0x30
   18200:	e12fff34 	blx	r4
   18204:	e28dd08c 	add	sp, sp, #140	@ 0x8c
   18208:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1820c:	eb00596d 	bl	2e7c8 <CLogger::Get()>
   18210:	e59f1044 	ldr	r1, [pc, #68]	@ 1825c <CUSBSerialCH341Device::Configure()+0x194>
   18214:	e3a02001 	mov	r2, #1
   18218:	e30b3d24 	movw	r3, #48420	@ 0xbd24
   1821c:	e3403003 	movt	r3, #3
   18220:	eb005b31 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18224:	eaffffd0 	b	1816c <CUSBSerialCH341Device::Configure()+0xa4>
   18228:	e30b1cf8 	movw	r1, #48376	@ 0xbcf8
   1822c:	e3401003 	movt	r1, #3
   18230:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   18234:	e3400003 	movt	r0, #3
   18238:	e3a02044 	mov	r2, #68	@ 0x44
   1823c:	eb004ee6 	bl	2bddc <assertion_failed>
   18240:	eb005960 	bl	2e7c8 <CLogger::Get()>
   18244:	e59f1010 	ldr	r1, [pc, #16]	@ 1825c <CUSBSerialCH341Device::Configure()+0x194>
   18248:	e3a02001 	mov	r2, #1
   1824c:	e30b3d74 	movw	r3, #48500	@ 0xbd74
   18250:	e3403003 	movt	r3, #3
   18254:	eb005b24 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18258:	eaffffc3 	b	1816c <CUSBSerialCH341Device::Configure()+0xa4>
   1825c:	0003f5a4 	.word	0x0003f5a4

00018260 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   18260:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18264:	e1a08000 	mov	r8, r0
   18268:	e1a04001 	mov	r4, r1
   1826c:	e24dd024 	sub	sp, sp, #36	@ 0x24
   18270:	e1a06002 	mov	r6, r2
   18274:	e1a09003 	mov	r9, r3
   18278:	ebffe0e9 	bl	10624 <CUSBFunction::GetHost() const>
   1827c:	e2505000 	subs	r5, r0, #0
   18280:	0a000070 	beq	18448 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e8>
   18284:	e28d0010 	add	r0, sp, #16
   18288:	eb0069ed 	bl	32a44 <CString::CString()>
   1828c:	e2443005 	sub	r3, r4, #5
   18290:	e3530003 	cmp	r3, #3
   18294:	8a000021 	bhi	18320 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc0>
   18298:	e2447045 	sub	r7, r4, #69	@ 0x45
   1829c:	e1a02004 	mov	r2, r4
   182a0:	e28d0010 	add	r0, sp, #16
   182a4:	e30b1d8c 	movw	r1, #48524	@ 0xbd8c
   182a8:	e3401003 	movt	r1, #3
   182ac:	e6ef7077 	uxtb	r7, r7
   182b0:	eb006f9c 	bl	34128 <CString::Format(char const*, ...)>
   182b4:	e3560001 	cmp	r6, #1
   182b8:	0a000035 	beq	18394 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x134>
   182bc:	e3560002 	cmp	r6, #2
   182c0:	0a000027 	beq	18364 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x104>
   182c4:	e3560000 	cmp	r6, #0
   182c8:	1a00001d 	bne	18344 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xe4>
   182cc:	e30b1da8 	movw	r1, #48552	@ 0xbda8
   182d0:	e3401003 	movt	r1, #3
   182d4:	e28d0010 	add	r0, sp, #16
   182d8:	eb006a53 	bl	32c2c <CString::Append(char const*)>
   182dc:	e3590001 	cmp	r9, #1
   182e0:	0a000026 	beq	18380 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   182e4:	e3590002 	cmp	r9, #2
   182e8:	0a00002f 	beq	183ac <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x14c>
   182ec:	e3a04000 	mov	r4, #0
   182f0:	eb005934 	bl	2e7c8 <CLogger::Get()>
   182f4:	e59f119c 	ldr	r1, [pc, #412]	@ 18498 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   182f8:	e3a02001 	mov	r2, #1
   182fc:	e30b3dc4 	movw	r3, #48580	@ 0xbdc4
   18300:	e3403003 	movt	r3, #3
   18304:	e58d9000 	str	r9, [sp]
   18308:	eb005af7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1830c:	e28d0010 	add	r0, sp, #16
   18310:	eb006998 	bl	32978 <CString::~CString()>
   18314:	e1a00004 	mov	r0, r4
   18318:	e28dd024 	add	sp, sp, #36	@ 0x24
   1831c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18320:	eb005928 	bl	2e7c8 <CLogger::Get()>
   18324:	e30b3d90 	movw	r3, #48528	@ 0xbd90
   18328:	e3403003 	movt	r3, #3
   1832c:	e59f1164 	ldr	r1, [pc, #356]	@ 18498 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   18330:	e3a02001 	mov	r2, #1
   18334:	e58d4000 	str	r4, [sp]
   18338:	eb005aeb 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1833c:	e3a04000 	mov	r4, #0
   18340:	eafffff1 	b	1830c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xac>
   18344:	eb00591f 	bl	2e7c8 <CLogger::Get()>
   18348:	e59f1148 	ldr	r1, [pc, #328]	@ 18498 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   1834c:	e3a02001 	mov	r2, #1
   18350:	e30b3db0 	movw	r3, #48560	@ 0xbdb0
   18354:	e3403003 	movt	r3, #3
   18358:	e58d6000 	str	r6, [sp]
   1835c:	eb005ae2 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18360:	eafffff5 	b	1833c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
   18364:	e28d0010 	add	r0, sp, #16
   18368:	e30d1b44 	movw	r1, #56132	@ 0xdb44
   1836c:	e3401003 	movt	r1, #3
   18370:	e3877018 	orr	r7, r7, #24
   18374:	eb006a2c 	bl	32c2c <CString::Append(char const*)>
   18378:	e3590001 	cmp	r9, #1
   1837c:	1affffd8 	bne	182e4 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x84>
   18380:	e28d0010 	add	r0, sp, #16
   18384:	e30a1ee4 	movw	r1, #44772	@ 0xaee4
   18388:	e3401003 	movt	r1, #3
   1838c:	eb006a26 	bl	32c2c <CString::Append(char const*)>
   18390:	ea00000a 	b	183c0 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x160>
   18394:	e28d0010 	add	r0, sp, #16
   18398:	e30b1dac 	movw	r1, #48556	@ 0xbdac
   1839c:	e3401003 	movt	r1, #3
   183a0:	e3877008 	orr	r7, r7, #8
   183a4:	eb006a20 	bl	32c2c <CString::Append(char const*)>
   183a8:	eaffffcb 	b	182dc <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x7c>
   183ac:	e30b1c9c 	movw	r1, #48284	@ 0xbc9c
   183b0:	e3401003 	movt	r1, #3
   183b4:	e28d0010 	add	r0, sp, #16
   183b8:	e3877004 	orr	r7, r7, #4
   183bc:	eb006a1a 	bl	32c2c <CString::Append(char const*)>
   183c0:	e1a00008 	mov	r0, r8
   183c4:	ebffe08b 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   183c8:	e58d7004 	str	r7, [sp, #4]
   183cc:	e1a01000 	mov	r1, r0
   183d0:	e3a07000 	mov	r7, #0
   183d4:	e3023518 	movw	r3, #9496	@ 0x2518
   183d8:	e3a02040 	mov	r2, #64	@ 0x40
   183dc:	e58d3000 	str	r3, [sp]
   183e0:	e1a00005 	mov	r0, r5
   183e4:	e3a0309a 	mov	r3, #154	@ 0x9a
   183e8:	e58d700c 	str	r7, [sp, #12]
   183ec:	e58d7008 	str	r7, [sp, #8]
   183f0:	ebffed8a 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   183f4:	e1500007 	cmp	r0, r7
   183f8:	ba000018 	blt	18460 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x200>
   183fc:	e1a00008 	mov	r0, r8
   18400:	ebffe07c 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18404:	e30f3fff 	movw	r3, #65535	@ 0xffff
   18408:	e1a01000 	mov	r1, r0
   1840c:	e58d3000 	str	r3, [sp]
   18410:	e1a00005 	mov	r0, r5
   18414:	e3a030a4 	mov	r3, #164	@ 0xa4
   18418:	e3a02040 	mov	r2, #64	@ 0x40
   1841c:	e58d700c 	str	r7, [sp, #12]
   18420:	e58d7008 	str	r7, [sp, #8]
   18424:	e58d7004 	str	r7, [sp, #4]
   18428:	ebffed7c 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1842c:	e3500000 	cmp	r0, #0
   18430:	ba000011 	blt	1847c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x21c>
   18434:	e5c84018 	strb	r4, [r8, #24]
   18438:	e3a04001 	mov	r4, #1
   1843c:	e5c86019 	strb	r6, [r8, #25]
   18440:	e5c8901a 	strb	r9, [r8, #26]
   18444:	eaffffb0 	b	1830c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xac>
   18448:	e30b1cf8 	movw	r1, #48376	@ 0xbcf8
   1844c:	e3401003 	movt	r1, #3
   18450:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   18454:	e3400003 	movt	r0, #3
   18458:	e3a020a0 	mov	r2, #160	@ 0xa0
   1845c:	eb004e5e 	bl	2bddc <assertion_failed>
   18460:	eb0058d8 	bl	2e7c8 <CLogger::Get()>
   18464:	e59f102c 	ldr	r1, [pc, #44]	@ 18498 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   18468:	e3a02001 	mov	r2, #1
   1846c:	e30b3ddc 	movw	r3, #48604	@ 0xbddc
   18470:	e3403003 	movt	r3, #3
   18474:	eb005a9c 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18478:	eaffffaf 	b	1833c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
   1847c:	eb0058d1 	bl	2e7c8 <CLogger::Get()>
   18480:	e59f1010 	ldr	r1, [pc, #16]	@ 18498 <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x238>
   18484:	e3a02001 	mov	r2, #1
   18488:	e30b3df8 	movw	r3, #48632	@ 0xbdf8
   1848c:	e3403003 	movt	r3, #3
   18490:	eb005a95 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18494:	eaffffa8 	b	1833c <CUSBSerialCH341Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xdc>
   18498:	0003f5a4 	.word	0x0003f5a4

0001849c <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()>:
   1849c:	e59f3014 	ldr	r3, [pc, #20]	@ 184b8 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()+0x1c>
   184a0:	e92d4010 	push	{r4, lr}
   184a4:	e1a04000 	mov	r4, r0
   184a8:	e5803000 	str	r3, [r0]
   184ac:	eb0016fd 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   184b0:	e1a00004 	mov	r0, r4
   184b4:	e8bd8010 	pop	{r4, pc}
   184b8:	0003f5c8 	.word	0x0003f5c8

000184bc <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()>:
   184bc:	e59f3020 	ldr	r3, [pc, #32]	@ 184e4 <CUSBSerialCP210xDevice::~CUSBSerialCP210xDevice()+0x28>
   184c0:	e92d4010 	push	{r4, lr}
   184c4:	e1a04000 	mov	r4, r0
   184c8:	e5803000 	str	r3, [r0]
   184cc:	eb0016f5 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   184d0:	e1a00004 	mov	r0, r4
   184d4:	e3a01044 	mov	r1, #68	@ 0x44
   184d8:	eb007729 	bl	36184 <operator delete(void*, unsigned int)>
   184dc:	e1a00004 	mov	r0, r4
   184e0:	e8bd8010 	pop	{r4, pc}
   184e4:	0003f5c8 	.word	0x0003f5c8

000184e8 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)>:
   184e8:	e92d4070 	push	{r4, r5, r6, lr}
   184ec:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
   184f0:	e24dd018 	sub	sp, sp, #24
   184f4:	e3530000 	cmp	r3, #0
   184f8:	e58d1014 	str	r1, [sp, #20]
   184fc:	0a000035 	beq	185d8 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xf0>
   18500:	e5933004 	ldr	r3, [r3, #4]
   18504:	e1530001 	cmp	r3, r1
   18508:	3a000020 	bcc	18590 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xa8>
   1850c:	e1a04000 	mov	r4, r0
   18510:	ebffe043 	bl	10624 <CUSBFunction::GetHost() const>
   18514:	e2505000 	subs	r5, r0, #0
   18518:	0a000034 	beq	185f0 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x108>
   1851c:	e1a00004 	mov	r0, r4
   18520:	e3a06004 	mov	r6, #4
   18524:	ebffe033 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18528:	e28d3014 	add	r3, sp, #20
   1852c:	e1a01000 	mov	r1, r0
   18530:	e58d3008 	str	r3, [sp, #8]
   18534:	e1a00005 	mov	r0, r5
   18538:	e3a03000 	mov	r3, #0
   1853c:	e3a02041 	mov	r2, #65	@ 0x41
   18540:	e58d3004 	str	r3, [sp, #4]
   18544:	e58d3000 	str	r3, [sp]
   18548:	e3a0301e 	mov	r3, #30
   1854c:	e58d600c 	str	r6, [sp, #12]
   18550:	ebffed32 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18554:	e3500000 	cmp	r0, #0
   18558:	ba000017 	blt	185bc <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xd4>
   1855c:	e59d3014 	ldr	r3, [sp, #20]
   18560:	e5843014 	str	r3, [r4, #20]
   18564:	eb005897 	bl	2e7c8 <CLogger::Get()>
   18568:	e5943014 	ldr	r3, [r4, #20]
   1856c:	e58d3000 	str	r3, [sp]
   18570:	e1a02006 	mov	r2, r6
   18574:	e59f108c 	ldr	r1, [pc, #140]	@ 18608 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x120>
   18578:	e30b3e70 	movw	r3, #48752	@ 0xbe70
   1857c:	e3403003 	movt	r3, #3
   18580:	eb005a59 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18584:	e3a00001 	mov	r0, #1
   18588:	e28dd018 	add	sp, sp, #24
   1858c:	e8bd8070 	pop	{r4, r5, r6, pc}
   18590:	eb00588c 	bl	2e7c8 <CLogger::Get()>
   18594:	e59dc014 	ldr	ip, [sp, #20]
   18598:	e30b3e3c 	movw	r3, #48700	@ 0xbe3c
   1859c:	e3403003 	movt	r3, #3
   185a0:	e59f1060 	ldr	r1, [pc, #96]	@ 18608 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x120>
   185a4:	e3a02001 	mov	r2, #1
   185a8:	e58dc000 	str	ip, [sp]
   185ac:	eb005a4e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   185b0:	e3a00000 	mov	r0, #0
   185b4:	e28dd018 	add	sp, sp, #24
   185b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   185bc:	eb005881 	bl	2e7c8 <CLogger::Get()>
   185c0:	e59f1040 	ldr	r1, [pc, #64]	@ 18608 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0x120>
   185c4:	e3a02001 	mov	r2, #1
   185c8:	e30b3e58 	movw	r3, #48728	@ 0xbe58
   185cc:	e3403003 	movt	r3, #3
   185d0:	eb005a45 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   185d4:	eafffff5 	b	185b0 <CUSBSerialCP210xDevice::SetBaudRate(unsigned int)+0xc8>
   185d8:	e30b1e14 	movw	r1, #48660	@ 0xbe14
   185dc:	e3401003 	movt	r1, #3
   185e0:	e30b0e28 	movw	r0, #48680	@ 0xbe28
   185e4:	e3400003 	movt	r0, #3
   185e8:	e3a0209c 	mov	r2, #156	@ 0x9c
   185ec:	eb004dfa 	bl	2bddc <assertion_failed>
   185f0:	e30b1e14 	movw	r1, #48660	@ 0xbe14
   185f4:	e3401003 	movt	r1, #3
   185f8:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   185fc:	e3400003 	movt	r0, #3
   18600:	e3a020a6 	mov	r2, #166	@ 0xa6
   18604:	eb004df4 	bl	2bddc <assertion_failed>
   18608:	0003f5fc 	.word	0x0003f5fc

0001860c <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)>:
   1860c:	e92d4010 	push	{r4, lr}
   18610:	e1a04000 	mov	r4, r0
   18614:	e3a02000 	mov	r2, #0
   18618:	eb0017ae 	bl	1e4d8 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   1861c:	e59f2010 	ldr	r2, [pc, #16]	@ 18634 <CUSBSerialCP210xDevice::CUSBSerialCP210xDevice(CUSBFunction*)+0x28>
   18620:	e3a03000 	mov	r3, #0
   18624:	e1a00004 	mov	r0, r4
   18628:	e5842000 	str	r2, [r4]
   1862c:	e5843040 	str	r3, [r4, #64]	@ 0x40
   18630:	e8bd8010 	pop	{r4, pc}
   18634:	0003f5c8 	.word	0x0003f5c8

00018638 <CUSBSerialCP210xDevice::GetDeviceIDTable()>:
   18638:	e59f0000 	ldr	r0, [pc]	@ 18640 <CUSBSerialCP210xDevice::GetDeviceIDTable()+0x8>
   1863c:	e12fff1e 	bx	lr
   18640:	0003f604 	.word	0x0003f604

00018644 <CUSBSerialCP210xDevice::Configure()>:
   18644:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18648:	e1a05000 	mov	r5, r0
   1864c:	e24dd088 	sub	sp, sp, #136	@ 0x88
   18650:	eb001804 	bl	1e668 <CUSBSerialDevice::Configure()>
   18654:	e3500000 	cmp	r0, #0
   18658:	0a000051 	beq	187a4 <CUSBSerialCP210xDevice::Configure()+0x160>
   1865c:	e1a00005 	mov	r0, r5
   18660:	ebffdfef 	bl	10624 <CUSBFunction::GetHost() const>
   18664:	e2506000 	subs	r6, r0, #0
   18668:	0a000066 	beq	18808 <CUSBSerialCP210xDevice::Configure()+0x1c4>
   1866c:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   18670:	e28d404f 	add	r4, sp, #79	@ 0x4f
   18674:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   18678:	e1a00005 	mov	r0, r5
   1867c:	e3a08001 	mov	r8, #1
   18680:	e3a07000 	mov	r7, #0
   18684:	f4440a2f 	vst1.8	{d16-d17}, [r4 :128]
   18688:	edc40b04 	vstr	d16, [r4, #16]
   1868c:	edc40b06 	vstr	d16, [r4, #24]
   18690:	edc40b08 	vstr	d16, [r4, #32]
   18694:	edc40b0a 	vstr	d16, [r4, #40]	@ 0x28
   18698:	edc40b0c 	vstr	d16, [r4, #48]	@ 0x30
   1869c:	edc40b0e 	vstr	d16, [r4, #56]	@ 0x38
   186a0:	ebffdfd4 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   186a4:	e303370b 	movw	r3, #14091	@ 0x370b
   186a8:	e1a01000 	mov	r1, r0
   186ac:	e58d3000 	str	r3, [sp]
   186b0:	e3a020c0 	mov	r2, #192	@ 0xc0
   186b4:	e3a030ff 	mov	r3, #255	@ 0xff
   186b8:	e1a00006 	mov	r0, r6
   186bc:	e58d800c 	str	r8, [sp, #12]
   186c0:	e58d4008 	str	r4, [sp, #8]
   186c4:	e58d7004 	str	r7, [sp, #4]
   186c8:	ebffecd4 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   186cc:	e1500008 	cmp	r0, r8
   186d0:	1a00003c 	bne	187c8 <CUSBSerialCP210xDevice::Configure()+0x184>
   186d4:	e5d41000 	ldrb	r1, [r4]
   186d8:	e59f315c 	ldr	r3, [pc, #348]	@ 1883c <CUSBSerialCP210xDevice::Configure()+0x1f8>
   186dc:	e5857040 	str	r7, [r5, #64]	@ 0x40
   186e0:	ea000003 	b	186f4 <CUSBSerialCP210xDevice::Configure()+0xb0>
   186e4:	e5932014 	ldr	r2, [r3, #20]
   186e8:	e2833010 	add	r3, r3, #16
   186ec:	e3520000 	cmp	r2, #0
   186f0:	0a00003b 	beq	187e4 <CUSBSerialCP210xDevice::Configure()+0x1a0>
   186f4:	e5d32000 	ldrb	r2, [r3]
   186f8:	e1520001 	cmp	r2, r1
   186fc:	1afffff8 	bne	186e4 <CUSBSerialCP210xDevice::Configure()+0xa0>
   18700:	e5853040 	str	r3, [r5, #64]	@ 0x40
   18704:	e3a04000 	mov	r4, #0
   18708:	eb00582e 	bl	2e7c8 <CLogger::Get()>
   1870c:	e5951040 	ldr	r1, [r5, #64]	@ 0x40
   18710:	e3a02003 	mov	r2, #3
   18714:	e30b3e9c 	movw	r3, #48796	@ 0xbe9c
   18718:	e3403003 	movt	r3, #3
   1871c:	e3a07001 	mov	r7, #1
   18720:	e591100c 	ldr	r1, [r1, #12]
   18724:	e58d1000 	str	r1, [sp]
   18728:	e59f1110 	ldr	r1, [pc, #272]	@ 18840 <CUSBSerialCP210xDevice::Configure()+0x1fc>
   1872c:	eb0059ee 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18730:	e1a00005 	mov	r0, r5
   18734:	ebffdfaf 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18738:	e1a03004 	mov	r3, r4
   1873c:	e1a01000 	mov	r1, r0
   18740:	e3a02041 	mov	r2, #65	@ 0x41
   18744:	e1a00006 	mov	r0, r6
   18748:	e58d400c 	str	r4, [sp, #12]
   1874c:	e58d4008 	str	r4, [sp, #8]
   18750:	e58d4004 	str	r4, [sp, #4]
   18754:	e58d7000 	str	r7, [sp]
   18758:	ebffecb0 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1875c:	e1500004 	cmp	r0, r4
   18760:	ba00002e 	blt	18820 <CUSBSerialCP210xDevice::Configure()+0x1dc>
   18764:	e5953000 	ldr	r3, [r5]
   18768:	e3a01d96 	mov	r1, #9600	@ 0x2580
   1876c:	e1a00005 	mov	r0, r5
   18770:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   18774:	e12fff33 	blx	r3
   18778:	e3500000 	cmp	r0, #0
   1877c:	0a00000e 	beq	187bc <CUSBSerialCP210xDevice::Configure()+0x178>
   18780:	e595c000 	ldr	ip, [r5]
   18784:	e1a02004 	mov	r2, r4
   18788:	e1a03007 	mov	r3, r7
   1878c:	e3a01008 	mov	r1, #8
   18790:	e1a00005 	mov	r0, r5
   18794:	e59c4030 	ldr	r4, [ip, #48]	@ 0x30
   18798:	e12fff34 	blx	r4
   1879c:	e28dd088 	add	sp, sp, #136	@ 0x88
   187a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   187a4:	eb005807 	bl	2e7c8 <CLogger::Get()>
   187a8:	e30b3d24 	movw	r3, #48420	@ 0xbd24
   187ac:	e3403003 	movt	r3, #3
   187b0:	e59f1088 	ldr	r1, [pc, #136]	@ 18840 <CUSBSerialCP210xDevice::Configure()+0x1fc>
   187b4:	e3a02001 	mov	r2, #1
   187b8:	eb0059cb 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   187bc:	e3a00000 	mov	r0, #0
   187c0:	e28dd088 	add	sp, sp, #136	@ 0x88
   187c4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   187c8:	eb0057fe 	bl	2e7c8 <CLogger::Get()>
   187cc:	e59f106c 	ldr	r1, [pc, #108]	@ 18840 <CUSBSerialCP210xDevice::Configure()+0x1fc>
   187d0:	e1a02008 	mov	r2, r8
   187d4:	e30b3e80 	movw	r3, #48768	@ 0xbe80
   187d8:	e3403003 	movt	r3, #3
   187dc:	eb0059c2 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   187e0:	eafffff5 	b	187bc <CUSBSerialCP210xDevice::Configure()+0x178>
   187e4:	eb0057f7 	bl	2e7c8 <CLogger::Get()>
   187e8:	e5d4c000 	ldrb	ip, [r4]
   187ec:	e59f104c 	ldr	r1, [pc, #76]	@ 18840 <CUSBSerialCP210xDevice::Configure()+0x1fc>
   187f0:	e3a02001 	mov	r2, #1
   187f4:	e30b3eac 	movw	r3, #48812	@ 0xbeac
   187f8:	e3403003 	movt	r3, #3
   187fc:	e58dc000 	str	ip, [sp]
   18800:	eb0059b9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18804:	eaffffec 	b	187bc <CUSBSerialCP210xDevice::Configure()+0x178>
   18808:	e30b1e14 	movw	r1, #48660	@ 0xbe14
   1880c:	e3401003 	movt	r1, #3
   18810:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   18814:	e3400003 	movt	r0, #3
   18818:	e3a0205d 	mov	r2, #93	@ 0x5d
   1881c:	eb004d6e 	bl	2bddc <assertion_failed>
   18820:	eb0057e8 	bl	2e7c8 <CLogger::Get()>
   18824:	e59f1014 	ldr	r1, [pc, #20]	@ 18840 <CUSBSerialCP210xDevice::Configure()+0x1fc>
   18828:	e1a02007 	mov	r2, r7
   1882c:	e30b3ecc 	movw	r3, #48844	@ 0xbecc
   18830:	e3403003 	movt	r3, #3
   18834:	eb0059ac 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18838:	eaffffdf 	b	187bc <CUSBSerialCP210xDevice::Configure()+0x178>
   1883c:	0003f60c 	.word	0x0003f60c
   18840:	0003f5fc 	.word	0x0003f5fc

00018844 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   18844:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   18848:	e1a05003 	mov	r5, r3
   1884c:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
   18850:	e24dd024 	sub	sp, sp, #36	@ 0x24
   18854:	e3530000 	cmp	r3, #0
   18858:	0a000055 	beq	189b4 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x170>
   1885c:	e1a06002 	mov	r6, r2
   18860:	e5d32008 	ldrb	r2, [r3, #8]
   18864:	e1a04001 	mov	r4, r1
   18868:	e1520001 	cmp	r2, r1
   1886c:	8a000048 	bhi	18994 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x150>
   18870:	e5d33009 	ldrb	r3, [r3, #9]
   18874:	e1530005 	cmp	r3, r5
   18878:	3a00001c 	bcc	188f0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xac>
   1887c:	e1a07000 	mov	r7, r0
   18880:	ebffdf67 	bl	10624 <CUSBFunction::GetHost() const>
   18884:	e2508000 	subs	r8, r0, #0
   18888:	0a000077 	beq	18a6c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x228>
   1888c:	e28d0010 	add	r0, sp, #16
   18890:	eb00686b 	bl	32a44 <CString::CString()>
   18894:	e2443005 	sub	r3, r4, #5
   18898:	e3530003 	cmp	r3, #3
   1889c:	8a00001e 	bhi	1891c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xd8>
   188a0:	e1a02004 	mov	r2, r4
   188a4:	e28d0010 	add	r0, sp, #16
   188a8:	e30b1d8c 	movw	r1, #48524	@ 0xbd8c
   188ac:	e3401003 	movt	r1, #3
   188b0:	eb006e1c 	bl	34128 <CString::Format(char const*, ...)>
   188b4:	e1a09404 	lsl	r9, r4, #8
   188b8:	e3560001 	cmp	r6, #1
   188bc:	0a000023 	beq	18950 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x10c>
   188c0:	e3560002 	cmp	r6, #2
   188c4:	0a000062 	beq	18a54 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x210>
   188c8:	e3560000 	cmp	r6, #0
   188cc:	0a00005b 	beq	18a40 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1fc>
   188d0:	eb0057bc 	bl	2e7c8 <CLogger::Get()>
   188d4:	e59f11c4 	ldr	r1, [pc, #452]	@ 18aa0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   188d8:	e3a02001 	mov	r2, #1
   188dc:	e30b3db0 	movw	r3, #48560	@ 0xbdb0
   188e0:	e3403003 	movt	r3, #3
   188e4:	e58d6000 	str	r6, [sp]
   188e8:	eb00597f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   188ec:	ea000011 	b	18938 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf4>
   188f0:	eb0057b4 	bl	2e7c8 <CLogger::Get()>
   188f4:	e30b3f04 	movw	r3, #48900	@ 0xbf04
   188f8:	e3403003 	movt	r3, #3
   188fc:	e59f119c 	ldr	r1, [pc, #412]	@ 18aa0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   18900:	e3a02001 	mov	r2, #1
   18904:	e58d5000 	str	r5, [sp]
   18908:	eb005977 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1890c:	e3a04000 	mov	r4, #0
   18910:	e1a00004 	mov	r0, r4
   18914:	e28dd024 	add	sp, sp, #36	@ 0x24
   18918:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1891c:	eb0057a9 	bl	2e7c8 <CLogger::Get()>
   18920:	e30b3d90 	movw	r3, #48528	@ 0xbd90
   18924:	e3403003 	movt	r3, #3
   18928:	e59f1170 	ldr	r1, [pc, #368]	@ 18aa0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   1892c:	e3a02001 	mov	r2, #1
   18930:	e58d4000 	str	r4, [sp]
   18934:	eb00596c 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18938:	e3a04000 	mov	r4, #0
   1893c:	e28d0010 	add	r0, sp, #16
   18940:	eb00680c 	bl	32978 <CString::~CString()>
   18944:	e1a00004 	mov	r0, r4
   18948:	e28dd024 	add	sp, sp, #36	@ 0x24
   1894c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   18950:	e30b1dac 	movw	r1, #48556	@ 0xbdac
   18954:	e3401003 	movt	r1, #3
   18958:	e28d0010 	add	r0, sp, #16
   1895c:	e3899010 	orr	r9, r9, #16
   18960:	eb0068b1 	bl	32c2c <CString::Append(char const*)>
   18964:	e3550001 	cmp	r5, #1
   18968:	0a00002f 	beq	18a2c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1e8>
   1896c:	e3550002 	cmp	r5, #2
   18970:	0a000015 	beq	189cc <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x188>
   18974:	eb005793 	bl	2e7c8 <CLogger::Get()>
   18978:	e59f1120 	ldr	r1, [pc, #288]	@ 18aa0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   1897c:	e3a02001 	mov	r2, #1
   18980:	e30b3dc4 	movw	r3, #48580	@ 0xbdc4
   18984:	e3403003 	movt	r3, #3
   18988:	e58d5000 	str	r5, [sp]
   1898c:	eb005956 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18990:	eaffffe8 	b	18938 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf4>
   18994:	eb00578b 	bl	2e7c8 <CLogger::Get()>
   18998:	e59f1100 	ldr	r1, [pc, #256]	@ 18aa0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   1899c:	e3a02001 	mov	r2, #1
   189a0:	e30b3ee8 	movw	r3, #48872	@ 0xbee8
   189a4:	e3403003 	movt	r3, #3
   189a8:	e58d4000 	str	r4, [sp]
   189ac:	eb00594e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   189b0:	eaffffd5 	b	1890c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xc8>
   189b4:	e30b1e14 	movw	r1, #48660	@ 0xbe14
   189b8:	e3401003 	movt	r1, #3
   189bc:	e30b0e28 	movw	r0, #48680	@ 0xbe28
   189c0:	e3400003 	movt	r0, #3
   189c4:	e3a020be 	mov	r2, #190	@ 0xbe
   189c8:	eb004d03 	bl	2bddc <assertion_failed>
   189cc:	e30b1c9c 	movw	r1, #48284	@ 0xbc9c
   189d0:	e3401003 	movt	r1, #3
   189d4:	e28d0010 	add	r0, sp, #16
   189d8:	e3899002 	orr	r9, r9, #2
   189dc:	eb006892 	bl	32c2c <CString::Append(char const*)>
   189e0:	e1a00007 	mov	r0, r7
   189e4:	ebffdf03 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   189e8:	e3a03000 	mov	r3, #0
   189ec:	e1a01000 	mov	r1, r0
   189f0:	e58d300c 	str	r3, [sp, #12]
   189f4:	e58d3008 	str	r3, [sp, #8]
   189f8:	e1a00008 	mov	r0, r8
   189fc:	e58d3004 	str	r3, [sp, #4]
   18a00:	e3a02041 	mov	r2, #65	@ 0x41
   18a04:	e3a03003 	mov	r3, #3
   18a08:	e58d9000 	str	r9, [sp]
   18a0c:	ebffec03 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18a10:	e3500000 	cmp	r0, #0
   18a14:	ba00001a 	blt	18a84 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x240>
   18a18:	e5c74018 	strb	r4, [r7, #24]
   18a1c:	e3a04001 	mov	r4, #1
   18a20:	e5c76019 	strb	r6, [r7, #25]
   18a24:	e5c7501a 	strb	r5, [r7, #26]
   18a28:	eaffffc3 	b	1893c <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf8>
   18a2c:	e28d0010 	add	r0, sp, #16
   18a30:	e30a1ee4 	movw	r1, #44772	@ 0xaee4
   18a34:	e3401003 	movt	r1, #3
   18a38:	eb00687b 	bl	32c2c <CString::Append(char const*)>
   18a3c:	eaffffe7 	b	189e0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x19c>
   18a40:	e28d0010 	add	r0, sp, #16
   18a44:	e30b1da8 	movw	r1, #48552	@ 0xbda8
   18a48:	e3401003 	movt	r1, #3
   18a4c:	eb006876 	bl	32c2c <CString::Append(char const*)>
   18a50:	eaffffc3 	b	18964 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   18a54:	e28d0010 	add	r0, sp, #16
   18a58:	e30d1b44 	movw	r1, #56132	@ 0xdb44
   18a5c:	e3401003 	movt	r1, #3
   18a60:	e3899020 	orr	r9, r9, #32
   18a64:	eb006870 	bl	32c2c <CString::Append(char const*)>
   18a68:	eaffffbd 	b	18964 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x120>
   18a6c:	e30b1e14 	movw	r1, #48660	@ 0xbe14
   18a70:	e3401003 	movt	r1, #3
   18a74:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   18a78:	e3400003 	movt	r0, #3
   18a7c:	e3a020ce 	mov	r2, #206	@ 0xce
   18a80:	eb004cd5 	bl	2bddc <assertion_failed>
   18a84:	eb00574f 	bl	2e7c8 <CLogger::Get()>
   18a88:	e59f1010 	ldr	r1, [pc, #16]	@ 18aa0 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x25c>
   18a8c:	e3a02001 	mov	r2, #1
   18a90:	e30b3f20 	movw	r3, #48928	@ 0xbf20
   18a94:	e3403003 	movt	r3, #3
   18a98:	eb005913 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18a9c:	eaffffa5 	b	18938 <CUSBSerialCP210xDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xf4>
   18aa0:	0003f5fc 	.word	0x0003f5fc

00018aa4 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   18aa4:	e59f3014 	ldr	r3, [pc, #20]	@ 18ac0 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()+0x1c>
   18aa8:	e92d4010 	push	{r4, lr}
   18aac:	e1a04000 	mov	r4, r0
   18ab0:	e5803000 	str	r3, [r0]
   18ab4:	eb00157b 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   18ab8:	e1a00004 	mov	r0, r4
   18abc:	e8bd8010 	pop	{r4, pc}
   18ac0:	0003f6c4 	.word	0x0003f6c4

00018ac4 <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()>:
   18ac4:	e59f3020 	ldr	r3, [pc, #32]	@ 18aec <CUSBSerialPL2303Device::~CUSBSerialPL2303Device()+0x28>
   18ac8:	e92d4010 	push	{r4, lr}
   18acc:	e1a04000 	mov	r4, r0
   18ad0:	e5803000 	str	r3, [r0]
   18ad4:	eb001573 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   18ad8:	e1a00004 	mov	r0, r4
   18adc:	e3a01040 	mov	r1, #64	@ 0x40
   18ae0:	eb0075a7 	bl	36184 <operator delete(void*, unsigned int)>
   18ae4:	e1a00004 	mov	r0, r4
   18ae8:	e8bd8010 	pop	{r4, pc}
   18aec:	0003f6c4 	.word	0x0003f6c4

00018af0 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)>:
   18af0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   18af4:	e1a08000 	mov	r8, r0
   18af8:	e24dd090 	sub	sp, sp, #144	@ 0x90
   18afc:	e58d1014 	str	r1, [sp, #20]
   18b00:	ebffdec7 	bl	10624 <CUSBFunction::GetHost() const>
   18b04:	e2507000 	subs	r7, r0, #0
   18b08:	0a000037 	beq	18bec <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xfc>
   18b0c:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   18b10:	e28d4057 	add	r4, sp, #87	@ 0x57
   18b14:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   18b18:	e1a00008 	mov	r0, r8
   18b1c:	e3a06000 	mov	r6, #0
   18b20:	f4440a2f 	vst1.8	{d16-d17}, [r4 :128]
   18b24:	edc40b04 	vstr	d16, [r4, #16]
   18b28:	edc40b06 	vstr	d16, [r4, #24]
   18b2c:	edc40b08 	vstr	d16, [r4, #32]
   18b30:	edc40b0a 	vstr	d16, [r4, #40]	@ 0x28
   18b34:	edc40b0c 	vstr	d16, [r4, #48]	@ 0x30
   18b38:	edc40b0e 	vstr	d16, [r4, #56]	@ 0x38
   18b3c:	ebffdead 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18b40:	e3a03007 	mov	r3, #7
   18b44:	e1a01000 	mov	r1, r0
   18b48:	e58d300c 	str	r3, [sp, #12]
   18b4c:	e3a020a1 	mov	r2, #161	@ 0xa1
   18b50:	e3a03021 	mov	r3, #33	@ 0x21
   18b54:	e1a00007 	mov	r0, r7
   18b58:	e58d4008 	str	r4, [sp, #8]
   18b5c:	e58d6004 	str	r6, [sp, #4]
   18b60:	e58d6000 	str	r6, [sp]
   18b64:	ebffebad 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18b68:	e1a05000 	mov	r5, r0
   18b6c:	e3500007 	cmp	r0, #7
   18b70:	1a000015 	bne	18bcc <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xdc>
   18b74:	e3a02004 	mov	r2, #4
   18b78:	e28d1014 	add	r1, sp, #20
   18b7c:	e1a00004 	mov	r0, r4
   18b80:	eb00735f 	bl	35904 <memcpy>
   18b84:	e1a00008 	mov	r0, r8
   18b88:	ebffde9a 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18b8c:	e3a03020 	mov	r3, #32
   18b90:	e1a01000 	mov	r1, r0
   18b94:	e3a02021 	mov	r2, #33	@ 0x21
   18b98:	e1a00007 	mov	r0, r7
   18b9c:	e58d500c 	str	r5, [sp, #12]
   18ba0:	e58d4008 	str	r4, [sp, #8]
   18ba4:	e58d6004 	str	r6, [sp, #4]
   18ba8:	e58d6000 	str	r6, [sp]
   18bac:	ebffeb9b 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18bb0:	e3500000 	cmp	r0, #0
   18bb4:	ba000012 	blt	18c04 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x114>
   18bb8:	e59d3014 	ldr	r3, [sp, #20]
   18bbc:	e3a00001 	mov	r0, #1
   18bc0:	e5883014 	str	r3, [r8, #20]
   18bc4:	e28dd090 	add	sp, sp, #144	@ 0x90
   18bc8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   18bcc:	eb0056fd 	bl	2e7c8 <CLogger::Get()>
   18bd0:	e30b3f90 	movw	r3, #49040	@ 0xbf90
   18bd4:	e3403003 	movt	r3, #3
   18bd8:	e59f1040 	ldr	r1, [pc, #64]	@ 18c20 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x130>
   18bdc:	e3a02001 	mov	r2, #1
   18be0:	eb0058c1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18be4:	e3a00000 	mov	r0, #0
   18be8:	eafffff5 	b	18bc4 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xd4>
   18bec:	e30b1f7c 	movw	r1, #49020	@ 0xbf7c
   18bf0:	e3401003 	movt	r1, #3
   18bf4:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   18bf8:	e3400003 	movt	r0, #3
   18bfc:	e3a020ed 	mov	r2, #237	@ 0xed
   18c00:	eb004c75 	bl	2bddc <assertion_failed>
   18c04:	eb0056ef 	bl	2e7c8 <CLogger::Get()>
   18c08:	e59f1010 	ldr	r1, [pc, #16]	@ 18c20 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0x130>
   18c0c:	e3a02001 	mov	r2, #1
   18c10:	e30b3e58 	movw	r3, #48728	@ 0xbe58
   18c14:	e3403003 	movt	r3, #3
   18c18:	eb0058b3 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18c1c:	eafffff0 	b	18be4 <CUSBSerialPL2303Device::SetBaudRate(unsigned int)+0xf4>
   18c20:	0003f6f8 	.word	0x0003f6f8

00018c24 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)>:
   18c24:	e92d4010 	push	{r4, lr}
   18c28:	e1a04000 	mov	r4, r0
   18c2c:	e3a02000 	mov	r2, #0
   18c30:	eb001628 	bl	1e4d8 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   18c34:	e59f3008 	ldr	r3, [pc, #8]	@ 18c44 <CUSBSerialPL2303Device::CUSBSerialPL2303Device(CUSBFunction*)+0x20>
   18c38:	e1a00004 	mov	r0, r4
   18c3c:	e5843000 	str	r3, [r4]
   18c40:	e8bd8010 	pop	{r4, pc}
   18c44:	0003f6c4 	.word	0x0003f6c4

00018c48 <CUSBSerialPL2303Device::GetDeviceIDTable()>:
   18c48:	e59f0000 	ldr	r0, [pc]	@ 18c50 <CUSBSerialPL2303Device::GetDeviceIDTable()+0x8>
   18c4c:	e12fff1e 	bx	lr
   18c50:	0003f700 	.word	0x0003f700

00018c54 <CUSBSerialPL2303Device::Configure()>:
   18c54:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c58:	e1a05000 	mov	r5, r0
   18c5c:	e24dd09c 	sub	sp, sp, #156	@ 0x9c
   18c60:	eb001680 	bl	1e668 <CUSBSerialDevice::Configure()>
   18c64:	e2506000 	subs	r6, r0, #0
   18c68:	0a00006e 	beq	18e28 <CUSBSerialPL2303Device::Configure()+0x1d4>
   18c6c:	e1a00005 	mov	r0, r5
   18c70:	e28d405f 	add	r4, sp, #95	@ 0x5f
   18c74:	ebffde55 	bl	105d0 <CUSBFunction::GetDevice() const>
   18c78:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   18c7c:	ebffd6d2 	bl	e7cc <CUSBDevice::GetDeviceDescriptor() const>
   18c80:	e1a06000 	mov	r6, r0
   18c84:	e30a193c 	movw	r1, #43324	@ 0xa93c
   18c88:	e3401003 	movt	r1, #3
   18c8c:	e28d0010 	add	r0, sp, #16
   18c90:	eb006771 	bl	32a5c <CString::CString(char const*)>
   18c94:	e5d63004 	ldrb	r3, [r6, #4]
   18c98:	e3530002 	cmp	r3, #2
   18c9c:	0a000095 	beq	18ef8 <CUSBSerialPL2303Device::Configure()+0x2a4>
   18ca0:	e5d62007 	ldrb	r2, [r6, #7]
   18ca4:	e3520040 	cmp	r2, #64	@ 0x40
   18ca8:	0a000088 	beq	18ed0 <CUSBSerialPL2303Device::Configure()+0x27c>
   18cac:	e2433001 	sub	r3, r3, #1
   18cb0:	e6ef3073 	uxtb	r3, r3
   18cb4:	e35300fd 	cmp	r3, #253	@ 0xfd
   18cb8:	8a000089 	bhi	18ee4 <CUSBSerialPL2303Device::Configure()+0x290>
   18cbc:	eb0056c1 	bl	2e7c8 <CLogger::Get()>
   18cc0:	e1a06000 	mov	r6, r0
   18cc4:	e28d0010 	add	r0, sp, #16
   18cc8:	eb006795 	bl	32b24 <CString::operator char const*() const>
   18ccc:	e59f14bc 	ldr	r1, [pc, #1212]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   18cd0:	e1a03000 	mov	r3, r0
   18cd4:	e3a02003 	mov	r2, #3
   18cd8:	e1a00006 	mov	r0, r6
   18cdc:	e58d3000 	str	r3, [sp]
   18ce0:	e30b3fac 	movw	r3, #49068	@ 0xbfac
   18ce4:	e3403003 	movt	r3, #3
   18ce8:	eb00587f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18cec:	e1a00005 	mov	r0, r5
   18cf0:	ebffde4b 	bl	10624 <CUSBFunction::GetHost() const>
   18cf4:	e2506000 	subs	r6, r0, #0
   18cf8:	0a00008a 	beq	18f28 <CUSBSerialPL2303Device::Configure()+0x2d4>
   18cfc:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   18d00:	e3a09001 	mov	r9, #1
   18d04:	e1a00005 	mov	r0, r5
   18d08:	e3a07000 	mov	r7, #0
   18d0c:	e3088484 	movw	r8, #33924	@ 0x8484
   18d10:	f4440a2f 	vst1.8	{d16-d17}, [r4 :128]
   18d14:	edc40b04 	vstr	d16, [r4, #16]
   18d18:	edc40b06 	vstr	d16, [r4, #24]
   18d1c:	edc40b08 	vstr	d16, [r4, #32]
   18d20:	edc40b0a 	vstr	d16, [r4, #40]	@ 0x28
   18d24:	edc40b0c 	vstr	d16, [r4, #48]	@ 0x30
   18d28:	edc40b0e 	vstr	d16, [r4, #56]	@ 0x38
   18d2c:	ebffde31 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18d30:	e1a03009 	mov	r3, r9
   18d34:	e1a01000 	mov	r1, r0
   18d38:	e3a020c0 	mov	r2, #192	@ 0xc0
   18d3c:	e1a00006 	mov	r0, r6
   18d40:	e58d4008 	str	r4, [sp, #8]
   18d44:	e58d900c 	str	r9, [sp, #12]
   18d48:	e58d7004 	str	r7, [sp, #4]
   18d4c:	e58d8000 	str	r8, [sp]
   18d50:	ebffeb32 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18d54:	e1a0b000 	mov	fp, r0
   18d58:	e1500009 	cmp	r0, r9
   18d5c:	1a00003a 	bne	18e4c <CUSBSerialPL2303Device::Configure()+0x1f8>
   18d60:	e1a00005 	mov	r0, r5
   18d64:	e300a404 	movw	sl, #1028	@ 0x404
   18d68:	ebffde22 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18d6c:	e1a0300b 	mov	r3, fp
   18d70:	e1a01000 	mov	r1, r0
   18d74:	e3a02040 	mov	r2, #64	@ 0x40
   18d78:	e1a00006 	mov	r0, r6
   18d7c:	e58d700c 	str	r7, [sp, #12]
   18d80:	e58d7008 	str	r7, [sp, #8]
   18d84:	e58d7004 	str	r7, [sp, #4]
   18d88:	e58da000 	str	sl, [sp]
   18d8c:	ebffeb23 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18d90:	e3500000 	cmp	r0, #0
   18d94:	ba00005c 	blt	18f0c <CUSBSerialPL2303Device::Configure()+0x2b8>
   18d98:	e1a00005 	mov	r0, r5
   18d9c:	ebffde15 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18da0:	e1a0300b 	mov	r3, fp
   18da4:	e1a01000 	mov	r1, r0
   18da8:	e3a020c0 	mov	r2, #192	@ 0xc0
   18dac:	e1a00006 	mov	r0, r6
   18db0:	e58db00c 	str	fp, [sp, #12]
   18db4:	e58d4008 	str	r4, [sp, #8]
   18db8:	e58d7004 	str	r7, [sp, #4]
   18dbc:	e58d8000 	str	r8, [sp]
   18dc0:	ebffeb16 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18dc4:	e1a09000 	mov	r9, r0
   18dc8:	e3500001 	cmp	r0, #1
   18dcc:	1a000038 	bne	18eb4 <CUSBSerialPL2303Device::Configure()+0x260>
   18dd0:	e1a00005 	mov	r0, r5
   18dd4:	ebffde07 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18dd8:	e3083383 	movw	r3, #33667	@ 0x8383
   18ddc:	e1a01000 	mov	r1, r0
   18de0:	e58d3000 	str	r3, [sp]
   18de4:	e3a020c0 	mov	r2, #192	@ 0xc0
   18de8:	e1a03009 	mov	r3, r9
   18dec:	e1a00006 	mov	r0, r6
   18df0:	e58d900c 	str	r9, [sp, #12]
   18df4:	e58d4008 	str	r4, [sp, #8]
   18df8:	e58d7004 	str	r7, [sp, #4]
   18dfc:	ebffeb07 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18e00:	e1a0b000 	mov	fp, r0
   18e04:	e3500001 	cmp	r0, #1
   18e08:	0a00001b 	beq	18e7c <CUSBSerialPL2303Device::Configure()+0x228>
   18e0c:	eb00566d 	bl	2e7c8 <CLogger::Get()>
   18e10:	e59f1378 	ldr	r1, [pc, #888]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   18e14:	e1a02009 	mov	r2, r9
   18e18:	e30b3ff0 	movw	r3, #49136	@ 0xbff0
   18e1c:	e3403003 	movt	r3, #3
   18e20:	eb005831 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18e24:	ea00000e 	b	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   18e28:	eb005666 	bl	2e7c8 <CLogger::Get()>
   18e2c:	e59f135c 	ldr	r1, [pc, #860]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   18e30:	e3a02001 	mov	r2, #1
   18e34:	e30b3d24 	movw	r3, #48420	@ 0xbd24
   18e38:	e3403003 	movt	r3, #3
   18e3c:	eb00582a 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18e40:	e1a00006 	mov	r0, r6
   18e44:	e28dd09c 	add	sp, sp, #156	@ 0x9c
   18e48:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e4c:	eb00565d 	bl	2e7c8 <CLogger::Get()>
   18e50:	e30b3fc8 	movw	r3, #49096	@ 0xbfc8
   18e54:	e3403003 	movt	r3, #3
   18e58:	e59f1330 	ldr	r1, [pc, #816]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   18e5c:	e1a02009 	mov	r2, r9
   18e60:	eb005821 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18e64:	e3a06000 	mov	r6, #0
   18e68:	e28d0010 	add	r0, sp, #16
   18e6c:	eb0066c1 	bl	32978 <CString::~CString()>
   18e70:	e1a00006 	mov	r0, r6
   18e74:	e28dd09c 	add	sp, sp, #156	@ 0x9c
   18e78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e7c:	e1a00005 	mov	r0, r5
   18e80:	ebffdddc 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18e84:	e1a0300b 	mov	r3, fp
   18e88:	e1a01000 	mov	r1, r0
   18e8c:	e3a020c0 	mov	r2, #192	@ 0xc0
   18e90:	e1a00006 	mov	r0, r6
   18e94:	e58db00c 	str	fp, [sp, #12]
   18e98:	e58d4008 	str	r4, [sp, #8]
   18e9c:	e58d7004 	str	r7, [sp, #4]
   18ea0:	e58d8000 	str	r8, [sp]
   18ea4:	ebffeadd 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18ea8:	e1a09000 	mov	r9, r0
   18eac:	e3500001 	cmp	r0, #1
   18eb0:	0a000022 	beq	18f40 <CUSBSerialPL2303Device::Configure()+0x2ec>
   18eb4:	eb005643 	bl	2e7c8 <CLogger::Get()>
   18eb8:	e59f12d0 	ldr	r1, [pc, #720]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   18ebc:	e1a0200b 	mov	r2, fp
   18ec0:	e30b3fc8 	movw	r3, #49096	@ 0xbfc8
   18ec4:	e3403003 	movt	r3, #3
   18ec8:	eb005807 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18ecc:	eaffffe4 	b	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   18ed0:	e28d0010 	add	r0, sp, #16
   18ed4:	e30b1fa8 	movw	r1, #49064	@ 0xbfa8
   18ed8:	e3401003 	movt	r1, #3
   18edc:	eb006716 	bl	32b3c <CString::operator=(char const*)>
   18ee0:	eaffff75 	b	18cbc <CUSBSerialPL2303Device::Configure()+0x68>
   18ee4:	e28d0010 	add	r0, sp, #16
   18ee8:	e30a1ee4 	movw	r1, #44772	@ 0xaee4
   18eec:	e3401003 	movt	r1, #3
   18ef0:	eb006711 	bl	32b3c <CString::operator=(char const*)>
   18ef4:	eaffff70 	b	18cbc <CUSBSerialPL2303Device::Configure()+0x68>
   18ef8:	e28d0010 	add	r0, sp, #16
   18efc:	e30a193c 	movw	r1, #43324	@ 0xa93c
   18f00:	e3401003 	movt	r1, #3
   18f04:	eb00670c 	bl	32b3c <CString::operator=(char const*)>
   18f08:	eaffff6b 	b	18cbc <CUSBSerialPL2303Device::Configure()+0x68>
   18f0c:	eb00562d 	bl	2e7c8 <CLogger::Get()>
   18f10:	e59f1278 	ldr	r1, [pc, #632]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   18f14:	e1a0200b 	mov	r2, fp
   18f18:	e30b3fdc 	movw	r3, #49116	@ 0xbfdc
   18f1c:	e3403003 	movt	r3, #3
   18f20:	eb0057f1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   18f24:	eaffffce 	b	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   18f28:	e30b1f7c 	movw	r1, #49020	@ 0xbf7c
   18f2c:	e3401003 	movt	r1, #3
   18f30:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   18f34:	e3400003 	movt	r0, #3
   18f38:	e3a0204a 	mov	r2, #74	@ 0x4a
   18f3c:	eb004ba6 	bl	2bddc <assertion_failed>
   18f40:	e1a00005 	mov	r0, r5
   18f44:	ebffddab 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18f48:	e1a03009 	mov	r3, r9
   18f4c:	e1a01000 	mov	r1, r0
   18f50:	e3a02040 	mov	r2, #64	@ 0x40
   18f54:	e1a00006 	mov	r0, r6
   18f58:	e58da000 	str	sl, [sp]
   18f5c:	e58d700c 	str	r7, [sp, #12]
   18f60:	e58d7008 	str	r7, [sp, #8]
   18f64:	e58d9004 	str	r9, [sp, #4]
   18f68:	ebffeaac 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18f6c:	e3500000 	cmp	r0, #0
   18f70:	ba000023 	blt	19004 <CUSBSerialPL2303Device::Configure()+0x3b0>
   18f74:	e1a00005 	mov	r0, r5
   18f78:	ebffdd9e 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18f7c:	e58d8000 	str	r8, [sp]
   18f80:	e1a01000 	mov	r1, r0
   18f84:	e1a03009 	mov	r3, r9
   18f88:	e3a020c0 	mov	r2, #192	@ 0xc0
   18f8c:	e1a00006 	mov	r0, r6
   18f90:	e58d900c 	str	r9, [sp, #12]
   18f94:	e58d4008 	str	r4, [sp, #8]
   18f98:	e58d7004 	str	r7, [sp, #4]
   18f9c:	ebffea9f 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18fa0:	e1a08000 	mov	r8, r0
   18fa4:	e3500001 	cmp	r0, #1
   18fa8:	1affffa7 	bne	18e4c <CUSBSerialPL2303Device::Configure()+0x1f8>
   18fac:	e1a00005 	mov	r0, r5
   18fb0:	ebffdd90 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   18fb4:	e58d4008 	str	r4, [sp, #8]
   18fb8:	e1a01000 	mov	r1, r0
   18fbc:	e3083383 	movw	r3, #33667	@ 0x8383
   18fc0:	e3a020c0 	mov	r2, #192	@ 0xc0
   18fc4:	e58d3000 	str	r3, [sp]
   18fc8:	e1a00006 	mov	r0, r6
   18fcc:	e1a03008 	mov	r3, r8
   18fd0:	e58d800c 	str	r8, [sp, #12]
   18fd4:	e58d7004 	str	r7, [sp, #4]
   18fd8:	ebffea90 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   18fdc:	e1a04000 	mov	r4, r0
   18fe0:	e3500001 	cmp	r0, #1
   18fe4:	0a00000d 	beq	19020 <CUSBSerialPL2303Device::Configure()+0x3cc>
   18fe8:	eb0055f6 	bl	2e7c8 <CLogger::Get()>
   18fec:	e59f119c 	ldr	r1, [pc, #412]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   18ff0:	e1a02008 	mov	r2, r8
   18ff4:	e30b3ff0 	movw	r3, #49136	@ 0xbff0
   18ff8:	e3403003 	movt	r3, #3
   18ffc:	eb0057ba 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19000:	eaffff97 	b	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   19004:	eb0055ef 	bl	2e7c8 <CLogger::Get()>
   19008:	e59f1180 	ldr	r1, [pc, #384]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   1900c:	e1a02009 	mov	r2, r9
   19010:	e30b3fdc 	movw	r3, #49116	@ 0xbfdc
   19014:	e3403003 	movt	r3, #3
   19018:	eb0057b3 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1901c:	eaffff90 	b	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   19020:	e1a00005 	mov	r0, r5
   19024:	ebffdd73 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   19028:	e1a03004 	mov	r3, r4
   1902c:	e1a01000 	mov	r1, r0
   19030:	e3a02040 	mov	r2, #64	@ 0x40
   19034:	e1a00006 	mov	r0, r6
   19038:	e58d700c 	str	r7, [sp, #12]
   1903c:	e58d7008 	str	r7, [sp, #8]
   19040:	e58d7000 	str	r7, [sp]
   19044:	e58d4004 	str	r4, [sp, #4]
   19048:	ebffea74 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1904c:	e3500000 	cmp	r0, #0
   19050:	ba000039 	blt	1913c <CUSBSerialPL2303Device::Configure()+0x4e8>
   19054:	e3a07001 	mov	r7, #1
   19058:	e1a00005 	mov	r0, r5
   1905c:	ebffdd65 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   19060:	e3a04000 	mov	r4, #0
   19064:	e1a01000 	mov	r1, r0
   19068:	e1a03007 	mov	r3, r7
   1906c:	e3a02040 	mov	r2, #64	@ 0x40
   19070:	e1a00006 	mov	r0, r6
   19074:	e58d400c 	str	r4, [sp, #12]
   19078:	e58d4008 	str	r4, [sp, #8]
   1907c:	e58d4004 	str	r4, [sp, #4]
   19080:	e58d7000 	str	r7, [sp]
   19084:	ebffea65 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19088:	e1500004 	cmp	r0, r4
   1908c:	ba000031 	blt	19158 <CUSBSerialPL2303Device::Configure()+0x504>
   19090:	e1a00005 	mov	r0, r5
   19094:	e3a08002 	mov	r8, #2
   19098:	ebffdd56 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1909c:	e3a09044 	mov	r9, #68	@ 0x44
   190a0:	e1a01000 	mov	r1, r0
   190a4:	e1a03007 	mov	r3, r7
   190a8:	e3a02040 	mov	r2, #64	@ 0x40
   190ac:	e1a00006 	mov	r0, r6
   190b0:	e58d400c 	str	r4, [sp, #12]
   190b4:	e58d4008 	str	r4, [sp, #8]
   190b8:	e1cd80f0 	strd	r8, [sp]
   190bc:	ebffea57 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   190c0:	e3500000 	cmp	r0, #0
   190c4:	ba00002a 	blt	19174 <CUSBSerialPL2303Device::Configure()+0x520>
   190c8:	e1a00005 	mov	r0, r5
   190cc:	ebffdd49 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   190d0:	e1a03007 	mov	r3, r7
   190d4:	e1a01000 	mov	r1, r0
   190d8:	e3a02040 	mov	r2, #64	@ 0x40
   190dc:	e1a00006 	mov	r0, r6
   190e0:	e58d400c 	str	r4, [sp, #12]
   190e4:	e58d4008 	str	r4, [sp, #8]
   190e8:	e58d4004 	str	r4, [sp, #4]
   190ec:	e58d4000 	str	r4, [sp]
   190f0:	ebffea4a 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   190f4:	e3500000 	cmp	r0, #0
   190f8:	ba00000f 	blt	1913c <CUSBSerialPL2303Device::Configure()+0x4e8>
   190fc:	e5953000 	ldr	r3, [r5]
   19100:	e3a01d96 	mov	r1, #9600	@ 0x2580
   19104:	e1a00005 	mov	r0, r5
   19108:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   1910c:	e12fff33 	blx	r3
   19110:	e3500000 	cmp	r0, #0
   19114:	0affff52 	beq	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   19118:	e5951000 	ldr	r1, [r5]
   1911c:	e1a02004 	mov	r2, r4
   19120:	e1a03007 	mov	r3, r7
   19124:	e1a00005 	mov	r0, r5
   19128:	e5914030 	ldr	r4, [r1, #48]	@ 0x30
   1912c:	e3a01008 	mov	r1, #8
   19130:	e12fff34 	blx	r4
   19134:	e1a06000 	mov	r6, r0
   19138:	eaffff4a 	b	18e68 <CUSBSerialPL2303Device::Configure()+0x214>
   1913c:	eb0055a1 	bl	2e7c8 <CLogger::Get()>
   19140:	e59f1048 	ldr	r1, [pc, #72]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   19144:	e3a02001 	mov	r2, #1
   19148:	e30c3004 	movw	r3, #49156	@ 0xc004
   1914c:	e3403003 	movt	r3, #3
   19150:	eb005765 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19154:	eaffff42 	b	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   19158:	eb00559a 	bl	2e7c8 <CLogger::Get()>
   1915c:	e59f102c 	ldr	r1, [pc, #44]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   19160:	e1a02007 	mov	r2, r7
   19164:	e30c3014 	movw	r3, #49172	@ 0xc014
   19168:	e3403003 	movt	r3, #3
   1916c:	eb00575e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19170:	eaffff3b 	b	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   19174:	eb005593 	bl	2e7c8 <CLogger::Get()>
   19178:	e59f1010 	ldr	r1, [pc, #16]	@ 19190 <CUSBSerialPL2303Device::Configure()+0x53c>
   1917c:	e1a02007 	mov	r2, r7
   19180:	e30c3024 	movw	r3, #49188	@ 0xc024
   19184:	e3403003 	movt	r3, #3
   19188:	eb005757 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1918c:	eaffff34 	b	18e64 <CUSBSerialPL2303Device::Configure()+0x210>
   19190:	0003f6f8 	.word	0x0003f6f8

00019194 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   19194:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19198:	e1a07000 	mov	r7, r0
   1919c:	e1a0a001 	mov	sl, r1
   191a0:	e24dd098 	sub	sp, sp, #152	@ 0x98
   191a4:	e1a08002 	mov	r8, r2
   191a8:	e1a09003 	mov	r9, r3
   191ac:	ebffdd1c 	bl	10624 <CUSBFunction::GetHost() const>
   191b0:	e2505000 	subs	r5, r0, #0
   191b4:	0a000053 	beq	19308 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x174>
   191b8:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   191bc:	e28d405f 	add	r4, sp, #95	@ 0x5f
   191c0:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   191c4:	e1a00007 	mov	r0, r7
   191c8:	e3a06000 	mov	r6, #0
   191cc:	f4440a2f 	vst1.8	{d16-d17}, [r4 :128]
   191d0:	edc40b04 	vstr	d16, [r4, #16]
   191d4:	edc40b06 	vstr	d16, [r4, #24]
   191d8:	edc40b08 	vstr	d16, [r4, #32]
   191dc:	edc40b0a 	vstr	d16, [r4, #40]	@ 0x28
   191e0:	edc40b0c 	vstr	d16, [r4, #48]	@ 0x30
   191e4:	edc40b0e 	vstr	d16, [r4, #56]	@ 0x38
   191e8:	ebffdd02 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   191ec:	e3a03007 	mov	r3, #7
   191f0:	e1a01000 	mov	r1, r0
   191f4:	e58d300c 	str	r3, [sp, #12]
   191f8:	e3a020a1 	mov	r2, #161	@ 0xa1
   191fc:	e3a03021 	mov	r3, #33	@ 0x21
   19200:	e1a00005 	mov	r0, r5
   19204:	e58d4008 	str	r4, [sp, #8]
   19208:	e58d6004 	str	r6, [sp, #4]
   1920c:	e58d6000 	str	r6, [sp]
   19210:	ebffea02 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19214:	e3500007 	cmp	r0, #7
   19218:	0a000008 	beq	19240 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xac>
   1921c:	eb005569 	bl	2e7c8 <CLogger::Get()>
   19220:	e59f11ec 	ldr	r1, [pc, #492]	@ 19414 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x280>
   19224:	e3a02001 	mov	r2, #1
   19228:	e30c3034 	movw	r3, #49204	@ 0xc034
   1922c:	e3403003 	movt	r3, #3
   19230:	eb00572d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19234:	e1a00006 	mov	r0, r6
   19238:	e28dd098 	add	sp, sp, #152	@ 0x98
   1923c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19240:	e28d0010 	add	r0, sp, #16
   19244:	eb0065fe 	bl	32a44 <CString::CString()>
   19248:	e24a3005 	sub	r3, sl, #5
   1924c:	e3530003 	cmp	r3, #3
   19250:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   19254:	ea000066 	b	193f4 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x260>
   19258:	00019268 	.word	0x00019268
   1925c:	00019268 	.word	0x00019268
   19260:	00019268 	.word	0x00019268
   19264:	00019268 	.word	0x00019268
   19268:	e1a0200a 	mov	r2, sl
   1926c:	e28d0010 	add	r0, sp, #16
   19270:	e30b1d8c 	movw	r1, #48524	@ 0xbd8c
   19274:	e3401003 	movt	r1, #3
   19278:	e5c4a006 	strb	sl, [r4, #6]
   1927c:	eb006ba9 	bl	34128 <CString::Format(char const*, ...)>
   19280:	e3580001 	cmp	r8, #1
   19284:	0a00003e 	beq	19384 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f0>
   19288:	e3580002 	cmp	r8, #2
   1928c:	0a000017 	beq	192f0 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x15c>
   19290:	e3580000 	cmp	r8, #0
   19294:	1a000047 	bne	193b8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x224>
   19298:	e30b1da8 	movw	r1, #48552	@ 0xbda8
   1929c:	e3401003 	movt	r1, #3
   192a0:	e28d0010 	add	r0, sp, #16
   192a4:	e5c48005 	strb	r8, [r4, #5]
   192a8:	eb00665f 	bl	32c2c <CString::Append(char const*)>
   192ac:	e3590001 	cmp	r9, #1
   192b0:	0a000039 	beq	1939c <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x208>
   192b4:	e3590002 	cmp	r9, #2
   192b8:	0a000018 	beq	19320 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x18c>
   192bc:	eb005541 	bl	2e7c8 <CLogger::Get()>
   192c0:	e30b3dc4 	movw	r3, #48580	@ 0xbdc4
   192c4:	e3403003 	movt	r3, #3
   192c8:	e59f1144 	ldr	r1, [pc, #324]	@ 19414 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x280>
   192cc:	e3a02001 	mov	r2, #1
   192d0:	e58d9000 	str	r9, [sp]
   192d4:	eb005704 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   192d8:	e3a06000 	mov	r6, #0
   192dc:	e28d0010 	add	r0, sp, #16
   192e0:	eb0065a4 	bl	32978 <CString::~CString()>
   192e4:	e1a00006 	mov	r0, r6
   192e8:	e28dd098 	add	sp, sp, #152	@ 0x98
   192ec:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   192f0:	e28d0010 	add	r0, sp, #16
   192f4:	e30d1b44 	movw	r1, #56132	@ 0xdb44
   192f8:	e3401003 	movt	r1, #3
   192fc:	e5c48005 	strb	r8, [r4, #5]
   19300:	eb006649 	bl	32c2c <CString::Append(char const*)>
   19304:	eaffffe8 	b	192ac <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x118>
   19308:	e30b1f7c 	movw	r1, #49020	@ 0xbf7c
   1930c:	e3401003 	movt	r1, #3
   19310:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   19314:	e3400003 	movt	r0, #3
   19318:	e3002115 	movw	r2, #277	@ 0x115
   1931c:	eb004aae 	bl	2bddc <assertion_failed>
   19320:	e30b1c9c 	movw	r1, #48284	@ 0xbc9c
   19324:	e3401003 	movt	r1, #3
   19328:	e28d0010 	add	r0, sp, #16
   1932c:	e5c49004 	strb	r9, [r4, #4]
   19330:	eb00663d 	bl	32c2c <CString::Append(char const*)>
   19334:	e1a00007 	mov	r0, r7
   19338:	ebffdcae 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1933c:	e3a03000 	mov	r3, #0
   19340:	e1a01000 	mov	r1, r0
   19344:	e58d3004 	str	r3, [sp, #4]
   19348:	e58d3000 	str	r3, [sp]
   1934c:	e1a00005 	mov	r0, r5
   19350:	e3a03007 	mov	r3, #7
   19354:	e3a02021 	mov	r2, #33	@ 0x21
   19358:	e58d300c 	str	r3, [sp, #12]
   1935c:	e3a03020 	mov	r3, #32
   19360:	e58d4008 	str	r4, [sp, #8]
   19364:	ebffe9ad 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19368:	e3500000 	cmp	r0, #0
   1936c:	ba000019 	blt	193d8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x244>
   19370:	e3a06001 	mov	r6, #1
   19374:	e5c7a018 	strb	sl, [r7, #24]
   19378:	e5c78019 	strb	r8, [r7, #25]
   1937c:	e5c7901a 	strb	r9, [r7, #26]
   19380:	eaffffd5 	b	192dc <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x148>
   19384:	e28d0010 	add	r0, sp, #16
   19388:	e30b1dac 	movw	r1, #48556	@ 0xbdac
   1938c:	e3401003 	movt	r1, #3
   19390:	e5c48005 	strb	r8, [r4, #5]
   19394:	eb006624 	bl	32c2c <CString::Append(char const*)>
   19398:	eaffffc3 	b	192ac <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x118>
   1939c:	e28d0010 	add	r0, sp, #16
   193a0:	e30a1ee4 	movw	r1, #44772	@ 0xaee4
   193a4:	e3401003 	movt	r1, #3
   193a8:	e3a03000 	mov	r3, #0
   193ac:	e5c43004 	strb	r3, [r4, #4]
   193b0:	eb00661d 	bl	32c2c <CString::Append(char const*)>
   193b4:	eaffffde 	b	19334 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1a0>
   193b8:	eb005502 	bl	2e7c8 <CLogger::Get()>
   193bc:	e59f1050 	ldr	r1, [pc, #80]	@ 19414 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x280>
   193c0:	e3a02001 	mov	r2, #1
   193c4:	e30b3db0 	movw	r3, #48560	@ 0xbdb0
   193c8:	e3403003 	movt	r3, #3
   193cc:	e58d8000 	str	r8, [sp]
   193d0:	eb0056c5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   193d4:	eaffffbf 	b	192d8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x144>
   193d8:	eb0054fa 	bl	2e7c8 <CLogger::Get()>
   193dc:	e59f1030 	ldr	r1, [pc, #48]	@ 19414 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x280>
   193e0:	e3a02001 	mov	r2, #1
   193e4:	e30b3f20 	movw	r3, #48928	@ 0xbf20
   193e8:	e3403003 	movt	r3, #3
   193ec:	eb0056be 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   193f0:	eaffffb8 	b	192d8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x144>
   193f4:	eb0054f3 	bl	2e7c8 <CLogger::Get()>
   193f8:	e59f1014 	ldr	r1, [pc, #20]	@ 19414 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x280>
   193fc:	e3a02001 	mov	r2, #1
   19400:	e30b3d90 	movw	r3, #48528	@ 0xbd90
   19404:	e3403003 	movt	r3, #3
   19408:	e58da000 	str	sl, [sp]
   1940c:	eb0056b6 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19410:	eaffffb0 	b	192d8 <CUSBSerialPL2303Device::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x144>
   19414:	0003f6f8 	.word	0x0003f6f8

00019418 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   19418:	e59f3014 	ldr	r3, [pc, #20]	@ 19434 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()+0x1c>
   1941c:	e92d4010 	push	{r4, lr}
   19420:	e1a04000 	mov	r4, r0
   19424:	e5803000 	str	r3, [r0]
   19428:	eb00131e 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   1942c:	e1a00004 	mov	r0, r4
   19430:	e8bd8010 	pop	{r4, pc}
   19434:	0003f710 	.word	0x0003f710

00019438 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()>:
   19438:	e59f3020 	ldr	r3, [pc, #32]	@ 19460 <CUSBSerialFT231XDevice::~CUSBSerialFT231XDevice()+0x28>
   1943c:	e92d4010 	push	{r4, lr}
   19440:	e1a04000 	mov	r4, r0
   19444:	e5803000 	str	r3, [r0]
   19448:	eb001316 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   1944c:	e1a00004 	mov	r0, r4
   19450:	e3a01040 	mov	r1, #64	@ 0x40
   19454:	eb00734a 	bl	36184 <operator delete(void*, unsigned int)>
   19458:	e1a00004 	mov	r0, r4
   1945c:	e8bd8010 	pop	{r4, pc}
   19460:	0003f710 	.word	0x0003f710

00019464 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)>:
   19464:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   19468:	e1a05000 	mov	r5, r0
   1946c:	e1a07001 	mov	r7, r1
   19470:	e24dd018 	sub	sp, sp, #24
   19474:	ebffdc6a 	bl	10624 <CUSBFunction::GetHost() const>
   19478:	e2506000 	subs	r6, r0, #0
   1947c:	0a00003c 	beq	19574 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x110>
   19480:	e59f3104 	ldr	r3, [pc, #260]	@ 1958c <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x128>
   19484:	e3a02c36 	mov	r2, #13824	@ 0x3600
   19488:	e340216e 	movt	r2, #366	@ 0x16e
   1948c:	e732f712 	udiv	r2, r2, r7
   19490:	e8930003 	ldm	r3, {r0, r1}
   19494:	e28d3018 	add	r3, sp, #24
   19498:	e9030003 	stmdb	r3, {r0, r1}
   1949c:	e2023007 	and	r3, r2, #7
   194a0:	e2833018 	add	r3, r3, #24
   194a4:	e08d3003 	add	r3, sp, r3
   194a8:	e5533008 	ldrb	r3, [r3, #-8]
   194ac:	e1a03703 	lsl	r3, r3, #14
   194b0:	e18331a2 	orr	r3, r3, r2, lsr #3
   194b4:	e3530001 	cmp	r3, #1
   194b8:	0a000021 	beq	19544 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xe0>
   194bc:	e3042001 	movw	r2, #16385	@ 0x4001
   194c0:	e1530002 	cmp	r3, r2
   194c4:	0a00001b 	beq	19538 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xd4>
   194c8:	e6ff8073 	uxth	r8, r3
   194cc:	e1a04823 	lsr	r4, r3, #16
   194d0:	e1a00005 	mov	r0, r5
   194d4:	ebffdc47 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   194d8:	e58d4004 	str	r4, [sp, #4]
   194dc:	e1a01000 	mov	r1, r0
   194e0:	e3a04000 	mov	r4, #0
   194e4:	e1a00006 	mov	r0, r6
   194e8:	e3a03003 	mov	r3, #3
   194ec:	e3a02040 	mov	r2, #64	@ 0x40
   194f0:	e58d8000 	str	r8, [sp]
   194f4:	e58d400c 	str	r4, [sp, #12]
   194f8:	e58d4008 	str	r4, [sp, #8]
   194fc:	ebffe947 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19500:	e1500004 	cmp	r0, r4
   19504:	ba000011 	blt	19550 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0xec>
   19508:	e5857014 	str	r7, [r5, #20]
   1950c:	eb0054ad 	bl	2e7c8 <CLogger::Get()>
   19510:	e5953014 	ldr	r3, [r5, #20]
   19514:	e58d3000 	str	r3, [sp]
   19518:	e3a02004 	mov	r2, #4
   1951c:	e59f106c 	ldr	r1, [pc, #108]	@ 19590 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x12c>
   19520:	e30b3e70 	movw	r3, #48752	@ 0xbe70
   19524:	e3403003 	movt	r3, #3
   19528:	eb00566f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1952c:	e3a00001 	mov	r0, #1
   19530:	e28dd018 	add	sp, sp, #24
   19534:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19538:	e3a04000 	mov	r4, #0
   1953c:	e3a08001 	mov	r8, #1
   19540:	eaffffe2 	b	194d0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x6c>
   19544:	e3a04000 	mov	r4, #0
   19548:	e1a08004 	mov	r8, r4
   1954c:	eaffffdf 	b	194d0 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x6c>
   19550:	eb00549c 	bl	2e7c8 <CLogger::Get()>
   19554:	e59f1034 	ldr	r1, [pc, #52]	@ 19590 <CUSBSerialFT231XDevice::SetBaudRate(unsigned int)+0x12c>
   19558:	e3a02001 	mov	r2, #1
   1955c:	e30b3e58 	movw	r3, #48728	@ 0xbe58
   19560:	e3403003 	movt	r3, #3
   19564:	eb005660 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19568:	e1a00004 	mov	r0, r4
   1956c:	e28dd018 	add	sp, sp, #24
   19570:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   19574:	e30c1050 	movw	r1, #49232	@ 0xc050
   19578:	e3401003 	movt	r1, #3
   1957c:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   19580:	e3400003 	movt	r0, #3
   19584:	e3a0207b 	mov	r2, #123	@ 0x7b
   19588:	eb004a13 	bl	2bddc <assertion_failed>
   1958c:	0003f744 	.word	0x0003f744
   19590:	0003f74c 	.word	0x0003f74c

00019594 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)>:
   19594:	e92d4010 	push	{r4, lr}
   19598:	e1a04000 	mov	r4, r0
   1959c:	e3a02002 	mov	r2, #2
   195a0:	eb0013cc 	bl	1e4d8 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   195a4:	e59f3008 	ldr	r3, [pc, #8]	@ 195b4 <CUSBSerialFT231XDevice::CUSBSerialFT231XDevice(CUSBFunction*)+0x20>
   195a8:	e1a00004 	mov	r0, r4
   195ac:	e5843000 	str	r3, [r4]
   195b0:	e8bd8010 	pop	{r4, pc}
   195b4:	0003f710 	.word	0x0003f710

000195b8 <CUSBSerialFT231XDevice::GetDeviceIDTable()>:
   195b8:	e59f0000 	ldr	r0, [pc]	@ 195c0 <CUSBSerialFT231XDevice::GetDeviceIDTable()+0x8>
   195bc:	e12fff1e 	bx	lr
   195c0:	0003f754 	.word	0x0003f754

000195c4 <CUSBSerialFT231XDevice::Configure()>:
   195c4:	e92d4070 	push	{r4, r5, r6, lr}
   195c8:	e1a04000 	mov	r4, r0
   195cc:	e24dd020 	sub	sp, sp, #32
   195d0:	eb001424 	bl	1e668 <CUSBSerialDevice::Configure()>
   195d4:	e2505000 	subs	r5, r0, #0
   195d8:	0a000050 	beq	19720 <CUSBSerialFT231XDevice::Configure()+0x15c>
   195dc:	e1a00004 	mov	r0, r4
   195e0:	ebffdbfa 	bl	105d0 <CUSBFunction::GetDevice() const>
   195e4:	ebffd478 	bl	e7cc <CUSBDevice::GetDeviceDescriptor() const>
   195e8:	e1a05000 	mov	r5, r0
   195ec:	e30c1064 	movw	r1, #49252	@ 0xc064
   195f0:	e3401003 	movt	r1, #3
   195f4:	e28d0010 	add	r0, sp, #16
   195f8:	eb006517 	bl	32a5c <CString::CString(char const*)>
   195fc:	e1d530bc 	ldrh	r3, [r5, #12]
   19600:	e3530a01 	cmp	r3, #4096	@ 0x1000
   19604:	0a000060 	beq	1978c <CUSBSerialFT231XDevice::Configure()+0x1c8>
   19608:	e3530c06 	cmp	r3, #1536	@ 0x600
   1960c:	0a00004c 	beq	19744 <CUSBSerialFT231XDevice::Configure()+0x180>
   19610:	e2433c07 	sub	r3, r3, #1792	@ 0x700
   19614:	e30f2dff 	movw	r2, #65023	@ 0xfdff
   19618:	e0022003 	and	r2, r2, r3
   1961c:	e3520000 	cmp	r2, #0
   19620:	0a000054 	beq	19778 <CUSBSerialFT231XDevice::Configure()+0x1b4>
   19624:	eb005467 	bl	2e7c8 <CLogger::Get()>
   19628:	e1a05000 	mov	r5, r0
   1962c:	e28d0010 	add	r0, sp, #16
   19630:	eb00653b 	bl	32b24 <CString::operator char const*() const>
   19634:	e59f1198 	ldr	r1, [pc, #408]	@ 197d4 <CUSBSerialFT231XDevice::Configure()+0x210>
   19638:	e1a03000 	mov	r3, r0
   1963c:	e3a02003 	mov	r2, #3
   19640:	e1a00005 	mov	r0, r5
   19644:	e58d3000 	str	r3, [sp]
   19648:	e30b3e9c 	movw	r3, #48796	@ 0xbe9c
   1964c:	e3403003 	movt	r3, #3
   19650:	eb005625 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19654:	e1a00004 	mov	r0, r4
   19658:	ebffdbf1 	bl	10624 <CUSBFunction::GetHost() const>
   1965c:	e2506000 	subs	r6, r0, #0
   19660:	0a00004e 	beq	197a0 <CUSBSerialFT231XDevice::Configure()+0x1dc>
   19664:	e3a05000 	mov	r5, #0
   19668:	e1a00004 	mov	r0, r4
   1966c:	ebffdbe1 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   19670:	e1a03005 	mov	r3, r5
   19674:	e1a01000 	mov	r1, r0
   19678:	e3a02040 	mov	r2, #64	@ 0x40
   1967c:	e1a00006 	mov	r0, r6
   19680:	e58d500c 	str	r5, [sp, #12]
   19684:	e58d5008 	str	r5, [sp, #8]
   19688:	e58d5004 	str	r5, [sp, #4]
   1968c:	e58d5000 	str	r5, [sp]
   19690:	ebffe8e2 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19694:	e1500005 	cmp	r0, r5
   19698:	ba00002e 	blt	19758 <CUSBSerialFT231XDevice::Configure()+0x194>
   1969c:	e1a00004 	mov	r0, r4
   196a0:	ebffdbd4 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   196a4:	e3a03002 	mov	r3, #2
   196a8:	e1a01000 	mov	r1, r0
   196ac:	e3a02040 	mov	r2, #64	@ 0x40
   196b0:	e1a00006 	mov	r0, r6
   196b4:	e58d500c 	str	r5, [sp, #12]
   196b8:	e58d5008 	str	r5, [sp, #8]
   196bc:	e58d5004 	str	r5, [sp, #4]
   196c0:	e58d5000 	str	r5, [sp]
   196c4:	ebffe8d5 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   196c8:	e3500000 	cmp	r0, #0
   196cc:	ba000039 	blt	197b8 <CUSBSerialFT231XDevice::Configure()+0x1f4>
   196d0:	e5943000 	ldr	r3, [r4]
   196d4:	e3a01d96 	mov	r1, #9600	@ 0x2580
   196d8:	e1a00004 	mov	r0, r4
   196dc:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   196e0:	e12fff33 	blx	r3
   196e4:	e3500000 	cmp	r0, #0
   196e8:	0a000020 	beq	19770 <CUSBSerialFT231XDevice::Configure()+0x1ac>
   196ec:	e5941000 	ldr	r1, [r4]
   196f0:	e1a02005 	mov	r2, r5
   196f4:	e1a00004 	mov	r0, r4
   196f8:	e3a03001 	mov	r3, #1
   196fc:	e5914030 	ldr	r4, [r1, #48]	@ 0x30
   19700:	e3a01008 	mov	r1, #8
   19704:	e12fff34 	blx	r4
   19708:	e1a05000 	mov	r5, r0
   1970c:	e28d0010 	add	r0, sp, #16
   19710:	eb006498 	bl	32978 <CString::~CString()>
   19714:	e1a00005 	mov	r0, r5
   19718:	e28dd020 	add	sp, sp, #32
   1971c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19720:	eb005428 	bl	2e7c8 <CLogger::Get()>
   19724:	e59f10a8 	ldr	r1, [pc, #168]	@ 197d4 <CUSBSerialFT231XDevice::Configure()+0x210>
   19728:	e3a02001 	mov	r2, #1
   1972c:	e30b3d24 	movw	r3, #48420	@ 0xbd24
   19730:	e3403003 	movt	r3, #3
   19734:	eb0055ec 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19738:	e1a00005 	mov	r0, r5
   1973c:	e28dd020 	add	sp, sp, #32
   19740:	e8bd8070 	pop	{r4, r5, r6, pc}
   19744:	e28d0010 	add	r0, sp, #16
   19748:	e30c1070 	movw	r1, #49264	@ 0xc070
   1974c:	e3401003 	movt	r1, #3
   19750:	eb0064f9 	bl	32b3c <CString::operator=(char const*)>
   19754:	eaffffb2 	b	19624 <CUSBSerialFT231XDevice::Configure()+0x60>
   19758:	eb00541a 	bl	2e7c8 <CLogger::Get()>
   1975c:	e30c3080 	movw	r3, #49280	@ 0xc080
   19760:	e3403003 	movt	r3, #3
   19764:	e59f1068 	ldr	r1, [pc, #104]	@ 197d4 <CUSBSerialFT231XDevice::Configure()+0x210>
   19768:	e3a02001 	mov	r2, #1
   1976c:	eb0055de 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19770:	e3a05000 	mov	r5, #0
   19774:	eaffffe4 	b	1970c <CUSBSerialFT231XDevice::Configure()+0x148>
   19778:	e28d0010 	add	r0, sp, #16
   1977c:	e30c1078 	movw	r1, #49272	@ 0xc078
   19780:	e3401003 	movt	r1, #3
   19784:	eb0064ec 	bl	32b3c <CString::operator=(char const*)>
   19788:	eaffffa5 	b	19624 <CUSBSerialFT231XDevice::Configure()+0x60>
   1978c:	e28d0010 	add	r0, sp, #16
   19790:	e30c1068 	movw	r1, #49256	@ 0xc068
   19794:	e3401003 	movt	r1, #3
   19798:	eb0064e7 	bl	32b3c <CString::operator=(char const*)>
   1979c:	eaffffa0 	b	19624 <CUSBSerialFT231XDevice::Configure()+0x60>
   197a0:	e30c1050 	movw	r1, #49232	@ 0xc050
   197a4:	e3401003 	movt	r1, #3
   197a8:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   197ac:	e3400003 	movt	r0, #3
   197b0:	e3a02051 	mov	r2, #81	@ 0x51
   197b4:	eb004988 	bl	2bddc <assertion_failed>
   197b8:	eb005402 	bl	2e7c8 <CLogger::Get()>
   197bc:	e59f1010 	ldr	r1, [pc, #16]	@ 197d4 <CUSBSerialFT231XDevice::Configure()+0x210>
   197c0:	e3a02001 	mov	r2, #1
   197c4:	e30c3094 	movw	r3, #49300	@ 0xc094
   197c8:	e3403003 	movt	r3, #3
   197cc:	eb0055c6 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   197d0:	eaffffe6 	b	19770 <CUSBSerialFT231XDevice::Configure()+0x1ac>
   197d4:	0003f74c 	.word	0x0003f74c

000197d8 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   197d8:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   197dc:	e1a08000 	mov	r8, r0
   197e0:	e1a04001 	mov	r4, r1
   197e4:	e24dd024 	sub	sp, sp, #36	@ 0x24
   197e8:	e1a05002 	mov	r5, r2
   197ec:	e1a07003 	mov	r7, r3
   197f0:	ebffdb8b 	bl	10624 <CUSBFunction::GetHost() const>
   197f4:	e2506000 	subs	r6, r0, #0
   197f8:	0a00006c 	beq	199b0 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1d8>
   197fc:	e28d0010 	add	r0, sp, #16
   19800:	eb00648f 	bl	32a44 <CString::CString()>
   19804:	e3540007 	cmp	r4, #7
   19808:	0a00000e 	beq	19848 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x70>
   1980c:	e3540008 	cmp	r4, #8
   19810:	0a00000c 	beq	19848 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x70>
   19814:	eb0053eb 	bl	2e7c8 <CLogger::Get()>
   19818:	e30b3ee8 	movw	r3, #48872	@ 0xbee8
   1981c:	e3403003 	movt	r3, #3
   19820:	e59f11bc 	ldr	r1, [pc, #444]	@ 199e4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   19824:	e3a02001 	mov	r2, #1
   19828:	e58d4000 	str	r4, [sp]
   1982c:	eb0055ae 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19830:	e3a04000 	mov	r4, #0
   19834:	e28d0010 	add	r0, sp, #16
   19838:	eb00644e 	bl	32978 <CString::~CString()>
   1983c:	e1a00004 	mov	r0, r4
   19840:	e28dd024 	add	sp, sp, #36	@ 0x24
   19844:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   19848:	e1a02004 	mov	r2, r4
   1984c:	e28d0010 	add	r0, sp, #16
   19850:	e30b1d8c 	movw	r1, #48524	@ 0xbd8c
   19854:	e3401003 	movt	r1, #3
   19858:	eb006a32 	bl	34128 <CString::Format(char const*, ...)>
   1985c:	e1a09004 	mov	r9, r4
   19860:	e3550001 	cmp	r5, #1
   19864:	0a000027 	beq	19908 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x130>
   19868:	e3550002 	cmp	r5, #2
   1986c:	0a000019 	beq	198d8 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x100>
   19870:	e3550000 	cmp	r5, #0
   19874:	1a00000f 	bne	198b8 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xe0>
   19878:	e30b1da8 	movw	r1, #48552	@ 0xbda8
   1987c:	e3401003 	movt	r1, #3
   19880:	e28d0010 	add	r0, sp, #16
   19884:	eb0064e8 	bl	32c2c <CString::Append(char const*)>
   19888:	e3570001 	cmp	r7, #1
   1988c:	0a000018 	beq	198f4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x11c>
   19890:	e3570002 	cmp	r7, #2
   19894:	0a000021 	beq	19920 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x148>
   19898:	eb0053ca 	bl	2e7c8 <CLogger::Get()>
   1989c:	e59f1140 	ldr	r1, [pc, #320]	@ 199e4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   198a0:	e3a02001 	mov	r2, #1
   198a4:	e30b3dc4 	movw	r3, #48580	@ 0xbdc4
   198a8:	e3403003 	movt	r3, #3
   198ac:	e58d7000 	str	r7, [sp]
   198b0:	eb00558d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   198b4:	eaffffdd 	b	19830 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   198b8:	eb0053c2 	bl	2e7c8 <CLogger::Get()>
   198bc:	e59f1120 	ldr	r1, [pc, #288]	@ 199e4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   198c0:	e3a02001 	mov	r2, #1
   198c4:	e30b3db0 	movw	r3, #48560	@ 0xbdb0
   198c8:	e3403003 	movt	r3, #3
   198cc:	e58d5000 	str	r5, [sp]
   198d0:	eb005585 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   198d4:	eaffffd5 	b	19830 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   198d8:	e28d0010 	add	r0, sp, #16
   198dc:	e30d1b44 	movw	r1, #56132	@ 0xdb44
   198e0:	e3401003 	movt	r1, #3
   198e4:	e3849c02 	orr	r9, r4, #512	@ 0x200
   198e8:	eb0064cf 	bl	32c2c <CString::Append(char const*)>
   198ec:	e3570001 	cmp	r7, #1
   198f0:	1affffe6 	bne	19890 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xb8>
   198f4:	e28d0010 	add	r0, sp, #16
   198f8:	e30a1ee4 	movw	r1, #44772	@ 0xaee4
   198fc:	e3401003 	movt	r1, #3
   19900:	eb0064c9 	bl	32c2c <CString::Append(char const*)>
   19904:	ea00000a 	b	19934 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x15c>
   19908:	e28d0010 	add	r0, sp, #16
   1990c:	e30b1dac 	movw	r1, #48556	@ 0xbdac
   19910:	e3401003 	movt	r1, #3
   19914:	e3849c01 	orr	r9, r4, #256	@ 0x100
   19918:	eb0064c3 	bl	32c2c <CString::Append(char const*)>
   1991c:	eaffffd9 	b	19888 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0xb0>
   19920:	e30b1c9c 	movw	r1, #48284	@ 0xbc9c
   19924:	e3401003 	movt	r1, #3
   19928:	e28d0010 	add	r0, sp, #16
   1992c:	e3899a01 	orr	r9, r9, #4096	@ 0x1000
   19930:	eb0064bd 	bl	32c2c <CString::Append(char const*)>
   19934:	e1a00008 	mov	r0, r8
   19938:	ebffdb2e 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1993c:	e3a03000 	mov	r3, #0
   19940:	e1a01000 	mov	r1, r0
   19944:	e58d300c 	str	r3, [sp, #12]
   19948:	e58d3008 	str	r3, [sp, #8]
   1994c:	e1a00006 	mov	r0, r6
   19950:	e58d3004 	str	r3, [sp, #4]
   19954:	e3a02040 	mov	r2, #64	@ 0x40
   19958:	e3a03004 	mov	r3, #4
   1995c:	e58d9000 	str	r9, [sp]
   19960:	ebffe82e 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19964:	e3500000 	cmp	r0, #0
   19968:	ba000016 	blt	199c8 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x1f0>
   1996c:	e5c84018 	strb	r4, [r8, #24]
   19970:	e5c85019 	strb	r5, [r8, #25]
   19974:	e5c8701a 	strb	r7, [r8, #26]
   19978:	eb005392 	bl	2e7c8 <CLogger::Get()>
   1997c:	e1a04000 	mov	r4, r0
   19980:	e28d0010 	add	r0, sp, #16
   19984:	eb006466 	bl	32b24 <CString::operator char const*() const>
   19988:	e59f1054 	ldr	r1, [pc, #84]	@ 199e4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   1998c:	e1a03000 	mov	r3, r0
   19990:	e3a02004 	mov	r2, #4
   19994:	e1a00004 	mov	r0, r4
   19998:	e58d3000 	str	r3, [sp]
   1999c:	e30c30b0 	movw	r3, #49328	@ 0xc0b0
   199a0:	e3403003 	movt	r3, #3
   199a4:	e3a04001 	mov	r4, #1
   199a8:	eb00554f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   199ac:	eaffffa0 	b	19834 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x5c>
   199b0:	e30c1050 	movw	r1, #49232	@ 0xc050
   199b4:	e3401003 	movt	r1, #3
   199b8:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   199bc:	e3400003 	movt	r0, #3
   199c0:	e3a020a1 	mov	r2, #161	@ 0xa1
   199c4:	eb004904 	bl	2bddc <assertion_failed>
   199c8:	eb00537e 	bl	2e7c8 <CLogger::Get()>
   199cc:	e59f1010 	ldr	r1, [pc, #16]	@ 199e4 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x20c>
   199d0:	e3a02001 	mov	r2, #1
   199d4:	e30b3f20 	movw	r3, #48928	@ 0xbf20
   199d8:	e3403003 	movt	r3, #3
   199dc:	eb005542 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   199e0:	eaffff92 	b	19830 <CUSBSerialFT231XDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)+0x58>
   199e4:	0003f74c 	.word	0x0003f74c

000199e8 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   199e8:	e59f3014 	ldr	r3, [pc, #20]	@ 19a04 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()+0x1c>
   199ec:	e92d4010 	push	{r4, lr}
   199f0:	e1a04000 	mov	r4, r0
   199f4:	e5803000 	str	r3, [r0]
   199f8:	eb0011aa 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   199fc:	e1a00004 	mov	r0, r4
   19a00:	e8bd8010 	pop	{r4, pc}
   19a04:	0003f770 	.word	0x0003f770

00019a08 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()>:
   19a08:	e59f3020 	ldr	r3, [pc, #32]	@ 19a30 <CUSBSerialCDCDevice::~CUSBSerialCDCDevice()+0x28>
   19a0c:	e92d4010 	push	{r4, lr}
   19a10:	e1a04000 	mov	r4, r0
   19a14:	e5803000 	str	r3, [r0]
   19a18:	eb0011a2 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   19a1c:	e1a00004 	mov	r0, r4
   19a20:	e3a01044 	mov	r1, #68	@ 0x44
   19a24:	eb0071d6 	bl	36184 <operator delete(void*, unsigned int)>
   19a28:	e1a00004 	mov	r0, r4
   19a2c:	e8bd8010 	pop	{r4, pc}
   19a30:	0003f770 	.word	0x0003f770

00019a34 <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)>:
   19a34:	e92d4010 	push	{r4, lr}
   19a38:	e1a04000 	mov	r4, r0
   19a3c:	e3a02000 	mov	r2, #0
   19a40:	eb0012a4 	bl	1e4d8 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>
   19a44:	e59f3030 	ldr	r3, [pc, #48]	@ 19a7c <CUSBSerialCDCDevice::CUSBSerialCDCDevice(CUSBFunction*)+0x48>
   19a48:	e5843000 	str	r3, [r4]
   19a4c:	e1a00004 	mov	r0, r4
   19a50:	ebffdb52 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   19a54:	e3a03000 	mov	r3, #0
   19a58:	e1a02003 	mov	r2, r3
   19a5c:	e5c40040 	strb	r0, [r4, #64]	@ 0x40
   19a60:	e3a0100a 	mov	r1, #10
   19a64:	e1a00004 	mov	r0, r4
   19a68:	ebffdb17 	bl	106cc <CUSBFunction::SelectInterfaceByClass(unsigned char, unsigned char, unsigned char)>
   19a6c:	e1a03000 	mov	r3, r0
   19a70:	e1a00004 	mov	r0, r4
   19a74:	e5c43041 	strb	r3, [r4, #65]	@ 0x41
   19a78:	e8bd8010 	pop	{r4, pc}
   19a7c:	0003f770 	.word	0x0003f770

00019a80 <CUSBSerialCDCDevice::SetLineCoding()>:
   19a80:	e92d4070 	push	{r4, r5, r6, lr}
   19a84:	e1a04000 	mov	r4, r0
   19a88:	e5d0301a 	ldrb	r3, [r0, #26]
   19a8c:	e24dd088 	sub	sp, sp, #136	@ 0x88
   19a90:	e5901014 	ldr	r1, [r0, #20]
   19a94:	e28d504f 	add	r5, sp, #79	@ 0x4f
   19a98:	e2533001 	subs	r3, r3, #1
   19a9c:	e3c5503f 	bic	r5, r5, #63	@ 0x3f
   19aa0:	13a03001 	movne	r3, #1
   19aa4:	e5d02019 	ldrb	r2, [r0, #25]
   19aa8:	e1a03083 	lsl	r3, r3, #1
   19aac:	e5851000 	str	r1, [r5]
   19ab0:	e3520001 	cmp	r2, #1
   19ab4:	e5d01018 	ldrb	r1, [r0, #24]
   19ab8:	e5c51006 	strb	r1, [r5, #6]
   19abc:	e5c53004 	strb	r3, [r5, #4]
   19ac0:	0a000003 	beq	19ad4 <CUSBSerialCDCDevice::SetLineCoding()+0x54>
   19ac4:	e3520002 	cmp	r2, #2
   19ac8:	0a000001 	beq	19ad4 <CUSBSerialCDCDevice::SetLineCoding()+0x54>
   19acc:	e3520000 	cmp	r2, #0
   19ad0:	1a00001e 	bne	19b50 <CUSBSerialCDCDevice::SetLineCoding()+0xd0>
   19ad4:	e1a00004 	mov	r0, r4
   19ad8:	e5c52005 	strb	r2, [r5, #5]
   19adc:	ebffdad0 	bl	10624 <CUSBFunction::GetHost() const>
   19ae0:	e1a06000 	mov	r6, r0
   19ae4:	e1a00004 	mov	r0, r4
   19ae8:	ebffdac2 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   19aec:	e5d43040 	ldrb	r3, [r4, #64]	@ 0x40
   19af0:	e1a01000 	mov	r1, r0
   19af4:	e3a02007 	mov	r2, #7
   19af8:	e3a04000 	mov	r4, #0
   19afc:	e58d200c 	str	r2, [sp, #12]
   19b00:	e98d0028 	stmib	sp, {r3, r5}
   19b04:	e1a00006 	mov	r0, r6
   19b08:	e3a03020 	mov	r3, #32
   19b0c:	e3a02021 	mov	r2, #33	@ 0x21
   19b10:	e58d4000 	str	r4, [sp]
   19b14:	ebffe7c1 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   19b18:	e1500004 	cmp	r0, r4
   19b1c:	a3a00001 	movge	r0, #1
   19b20:	ba000001 	blt	19b2c <CUSBSerialCDCDevice::SetLineCoding()+0xac>
   19b24:	e28dd088 	add	sp, sp, #136	@ 0x88
   19b28:	e8bd8070 	pop	{r4, r5, r6, pc}
   19b2c:	eb005325 	bl	2e7c8 <CLogger::Get()>
   19b30:	e59f1030 	ldr	r1, [pc, #48]	@ 19b68 <CUSBSerialCDCDevice::SetLineCoding()+0xe8>
   19b34:	e3a02002 	mov	r2, #2
   19b38:	e30c30d0 	movw	r3, #49360	@ 0xc0d0
   19b3c:	e3403003 	movt	r3, #3
   19b40:	eb0054e9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19b44:	e1a00004 	mov	r0, r4
   19b48:	e28dd088 	add	sp, sp, #136	@ 0x88
   19b4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   19b50:	e30c10bc 	movw	r1, #49340	@ 0xc0bc
   19b54:	e3401003 	movt	r1, #3
   19b58:	e30a093c 	movw	r0, #43324	@ 0xa93c
   19b5c:	e3400003 	movt	r0, #3
   19b60:	e3a02077 	mov	r2, #119	@ 0x77
   19b64:	eb00489c 	bl	2bddc <assertion_failed>
   19b68:	0003f7a4 	.word	0x0003f7a4

00019b6c <CUSBSerialCDCDevice::SetBaudRate(unsigned int)>:
   19b6c:	e5801014 	str	r1, [r0, #20]
   19b70:	eaffffc2 	b	19a80 <CUSBSerialCDCDevice::SetLineCoding()>

00019b74 <CUSBSerialCDCDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   19b74:	e5c01018 	strb	r1, [r0, #24]
   19b78:	e5c02019 	strb	r2, [r0, #25]
   19b7c:	e5c0301a 	strb	r3, [r0, #26]
   19b80:	eaffffbe 	b	19a80 <CUSBSerialCDCDevice::SetLineCoding()>

00019b84 <CUSBSerialCDCDevice::Configure()>:
   19b84:	e5d03041 	ldrb	r3, [r0, #65]	@ 0x41
   19b88:	e92d4010 	push	{r4, lr}
   19b8c:	e3530000 	cmp	r3, #0
   19b90:	0a00000e 	beq	19bd0 <CUSBSerialCDCDevice::Configure()+0x4c>
   19b94:	e1a04000 	mov	r4, r0
   19b98:	eb0012b2 	bl	1e668 <CUSBSerialDevice::Configure()>
   19b9c:	e3500000 	cmp	r0, #0
   19ba0:	0a000002 	beq	19bb0 <CUSBSerialCDCDevice::Configure()+0x2c>
   19ba4:	e1a00004 	mov	r0, r4
   19ba8:	e8bd4010 	pop	{r4, lr}
   19bac:	eaffffb3 	b	19a80 <CUSBSerialCDCDevice::SetLineCoding()>
   19bb0:	eb005304 	bl	2e7c8 <CLogger::Get()>
   19bb4:	e59f1024 	ldr	r1, [pc, #36]	@ 19be0 <CUSBSerialCDCDevice::Configure()+0x5c>
   19bb8:	e3a02001 	mov	r2, #1
   19bbc:	e30b3d24 	movw	r3, #48420	@ 0xbd24
   19bc0:	e3403003 	movt	r3, #3
   19bc4:	eb0054c8 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   19bc8:	e3a00000 	mov	r0, #0
   19bcc:	e8bd8010 	pop	{r4, pc}
   19bd0:	e59f1008 	ldr	r1, [pc, #8]	@ 19be0 <CUSBSerialCDCDevice::Configure()+0x5c>
   19bd4:	ebffdaa8 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   19bd8:	e3a00000 	mov	r0, #0
   19bdc:	e8bd8010 	pop	{r4, pc}
   19be0:	0003f7a4 	.word	0x0003f7a4

00019be4 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()>:
   19be4:	e92d4010 	push	{r4, lr}
   19be8:	e1a04000 	mov	r4, r0
   19bec:	e5900204 	ldr	r0, [r0, #516]	@ 0x204
   19bf0:	e59f302c 	ldr	r3, [pc, #44]	@ 19c24 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x40>
   19bf4:	e3500000 	cmp	r0, #0
   19bf8:	e5843000 	str	r3, [r4]
   19bfc:	0a000002 	beq	19c0c <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x28>
   19c00:	e5903000 	ldr	r3, [r0]
   19c04:	e5933004 	ldr	r3, [r3, #4]
   19c08:	e12fff33 	blx	r3
   19c0c:	e3a03000 	mov	r3, #0
   19c10:	e1a00004 	mov	r0, r4
   19c14:	e5843204 	str	r3, [r4, #516]	@ 0x204
   19c18:	ebffe53c 	bl	13110 <CUSBHIDDevice::~CUSBHIDDevice()>
   19c1c:	e1a00004 	mov	r0, r4
   19c20:	e8bd8010 	pop	{r4, pc}
   19c24:	0003f7b4 	.word	0x0003f7b4

00019c28 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()>:
   19c28:	e92d4010 	push	{r4, lr}
   19c2c:	e1a04000 	mov	r4, r0
   19c30:	e5900204 	ldr	r0, [r0, #516]	@ 0x204
   19c34:	e59f3038 	ldr	r3, [pc, #56]	@ 19c74 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x4c>
   19c38:	e3500000 	cmp	r0, #0
   19c3c:	e5843000 	str	r3, [r4]
   19c40:	0a000002 	beq	19c50 <CUSBTouchScreenDevice::~CUSBTouchScreenDevice()+0x28>
   19c44:	e5903000 	ldr	r3, [r0]
   19c48:	e5933004 	ldr	r3, [r3, #4]
   19c4c:	e12fff33 	blx	r3
   19c50:	e3a03000 	mov	r3, #0
   19c54:	e1a00004 	mov	r0, r4
   19c58:	e5843204 	str	r3, [r4, #516]	@ 0x204
   19c5c:	ebffe52b 	bl	13110 <CUSBHIDDevice::~CUSBHIDDevice()>
   19c60:	e1a00004 	mov	r0, r4
   19c64:	e3a01f82 	mov	r1, #520	@ 0x208
   19c68:	eb007145 	bl	36184 <operator delete(void*, unsigned int)>
   19c6c:	e1a00004 	mov	r0, r4
   19c70:	e8bd8010 	pop	{r4, pc}
   19c74:	0003f7b4 	.word	0x0003f7b4

00019c78 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)>:
   19c78:	e92d4070 	push	{r4, r5, r6, lr}
   19c7c:	e1a05000 	mov	r5, r0
   19c80:	e3a02000 	mov	r2, #0
   19c84:	ebffe50b 	bl	130b8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   19c88:	e3a04000 	mov	r4, #0
   19c8c:	e59f3038 	ldr	r3, [pc, #56]	@ 19ccc <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)+0x54>
   19c90:	e3a02f69 	mov	r2, #420	@ 0x1a4
   19c94:	e5853000 	str	r3, [r5]
   19c98:	e1a01004 	mov	r1, r4
   19c9c:	e2850024 	add	r0, r5, #36	@ 0x24
   19ca0:	e5854204 	str	r4, [r5, #516]	@ 0x204
   19ca4:	eb006eff 	bl	358a8 <memset>
   19ca8:	e2853f71 	add	r3, r5, #452	@ 0x1c4
   19cac:	e2852e1d 	add	r2, r5, #464	@ 0x1d0
   19cb0:	e2833003 	add	r3, r3, #3
   19cb4:	e2822001 	add	r2, r2, #1
   19cb8:	e5e34001 	strb	r4, [r3, #1]!
   19cbc:	e1530002 	cmp	r3, r2
   19cc0:	1afffffc 	bne	19cb8 <CUSBTouchScreenDevice::CUSBTouchScreenDevice(CUSBFunction*)+0x40>
   19cc4:	e1a00005 	mov	r0, r5
   19cc8:	e8bd8070 	pop	{r4, r5, r6, pc}
   19ccc:	0003f7b4 	.word	0x0003f7b4

00019cd0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)>:
   19cd0:	e3520000 	cmp	r2, #0
   19cd4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19cd8:	0a000082 	beq	19ee8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x218>
   19cdc:	e3a04000 	mov	r4, #0
   19ce0:	e1a05004 	mov	r5, r4
   19ce4:	e1a08004 	mov	r8, r4
   19ce8:	e1a07004 	mov	r7, r4
   19cec:	e1a0a004 	mov	sl, r4
   19cf0:	e1a09004 	mov	r9, r4
   19cf4:	e1a06004 	mov	r6, r4
   19cf8:	e1a0e004 	mov	lr, r4
   19cfc:	ea00000e 	b	19d3c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x6c>
   19d00:	e3530004 	cmp	r3, #4
   19d04:	01a0600c 	moveq	r6, ip
   19d08:	0a000001 	beq	19d14 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x44>
   19d0c:	e3530008 	cmp	r3, #8
   19d10:	01a0900c 	moveq	r9, ip
   19d14:	e35e0001 	cmp	lr, #1
   19d18:	0a000029 	beq	19dc4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xf4>
   19d1c:	e35e0002 	cmp	lr, #2
   19d20:	0a000003 	beq	19d34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x64>
   19d24:	e3a0e000 	mov	lr, #0
   19d28:	e3530080 	cmp	r3, #128	@ 0x80
   19d2c:	1a000000 	bne	19d34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x64>
   19d30:	e0255897 	mla	r5, r7, r8, r5
   19d34:	e3520000 	cmp	r2, #0
   19d38:	0a000024 	beq	19dd0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x100>
   19d3c:	e5d13000 	ldrb	r3, [r1]
   19d40:	e203c003 	and	ip, r3, #3
   19d44:	e35c0002 	cmp	ip, #2
   19d48:	0a000034 	beq	19e20 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x150>
   19d4c:	e35c0003 	cmp	ip, #3
   19d50:	0a000012 	beq	19da0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xd0>
   19d54:	e35c0001 	cmp	ip, #1
   19d58:	12811001 	addne	r1, r1, #1
   19d5c:	12422001 	subne	r2, r2, #1
   19d60:	13a0c000 	movne	ip, #0
   19d64:	02422002 	subeq	r2, r2, #2
   19d68:	05d1c001 	ldrbeq	ip, [r1, #1]
   19d6c:	02811002 	addeq	r1, r1, #2
   19d70:	e20330fc 	and	r3, r3, #252	@ 0xfc
   19d74:	e3530074 	cmp	r3, #116	@ 0x74
   19d78:	0a00000e 	beq	19db8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xe8>
   19d7c:	9affffdf 	bls	19d00 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x30>
   19d80:	e3530084 	cmp	r3, #132	@ 0x84
   19d84:	0a000029 	beq	19e30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x160>
   19d88:	e3530094 	cmp	r3, #148	@ 0x94
   19d8c:	1a00002d 	bne	19e48 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x178>
   19d90:	e35e0001 	cmp	lr, #1
   19d94:	11a0700c 	movne	r7, ip
   19d98:	1affffdf 	bne	19d1c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x4c>
   19d9c:	ea000027 	b	19e40 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x170>
   19da0:	e20330fc 	and	r3, r3, #252	@ 0xfc
   19da4:	e591c001 	ldr	ip, [r1, #1]
   19da8:	e2422005 	sub	r2, r2, #5
   19dac:	e2811005 	add	r1, r1, #5
   19db0:	e3530074 	cmp	r3, #116	@ 0x74
   19db4:	1afffff0 	bne	19d7c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xac>
   19db8:	e1a0800c 	mov	r8, ip
   19dbc:	e35e0001 	cmp	lr, #1
   19dc0:	1affffd5 	bne	19d1c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x4c>
   19dc4:	e3a0e001 	mov	lr, #1
   19dc8:	e3520000 	cmp	r2, #0
   19dcc:	1affffda 	bne	19d3c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x6c>
   19dd0:	e2855007 	add	r5, r5, #7
   19dd4:	e1a021a5 	lsr	r2, r5, #3
   19dd8:	e590102c 	ldr	r1, [r0, #44]	@ 0x2c
   19ddc:	e5802024 	str	r2, [r0, #36]	@ 0x24
   19de0:	e3510001 	cmp	r1, #1
   19de4:	9a00003a 	bls	19ed4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x204>
   19de8:	e5903034 	ldr	r3, [r0, #52]	@ 0x34
   19dec:	e3530000 	cmp	r3, #0
   19df0:	0a000008 	beq	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>
   19df4:	e3a03000 	mov	r3, #0
   19df8:	ea000001 	b	19e04 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x134>
   19dfc:	e1510003 	cmp	r1, r3
   19e00:	0a000033 	beq	19ed4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x204>
   19e04:	e5902044 	ldr	r2, [r0, #68]	@ 0x44
   19e08:	e2833001 	add	r3, r3, #1
   19e0c:	e2800028 	add	r0, r0, #40	@ 0x28
   19e10:	e3520000 	cmp	r2, #0
   19e14:	1afffff8 	bne	19dfc <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x12c>
   19e18:	e3a00000 	mov	r0, #0
   19e1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e20:	e1d1c0b1 	ldrh	ip, [r1, #1]
   19e24:	e2422003 	sub	r2, r2, #3
   19e28:	e2811003 	add	r1, r1, #3
   19e2c:	eaffffcf 	b	19d70 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xa0>
   19e30:	e1a0a00c 	mov	sl, ip
   19e34:	e35e0001 	cmp	lr, #1
   19e38:	1affffb7 	bne	19d1c <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x4c>
   19e3c:	e1a0c007 	mov	ip, r7
   19e40:	e1a0700c 	mov	r7, ip
   19e44:	eaffffde 	b	19dc4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xf4>
   19e48:	e35e0001 	cmp	lr, #1
   19e4c:	1a000027 	bne	19ef0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x220>
   19e50:	e35300a0 	cmp	r3, #160	@ 0xa0
   19e54:	1a00000e 	bne	19e94 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x1c4>
   19e58:	e35c0002 	cmp	ip, #2
   19e5c:	0356000d 	cmpeq	r6, #13
   19e60:	1affffb3 	bne	19d34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x64>
   19e64:	e3590022 	cmp	r9, #34	@ 0x22
   19e68:	13a0600d 	movne	r6, #13
   19e6c:	1affffb0 	bne	19d34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x64>
   19e70:	e5d03028 	ldrb	r3, [r0, #40]	@ 0x28
   19e74:	e3530000 	cmp	r3, #0
   19e78:	13a0600d 	movne	r6, #13
   19e7c:	13a0e002 	movne	lr, #2
   19e80:	02855008 	addeq	r5, r5, #8
   19e84:	03a0600d 	moveq	r6, #13
   19e88:	03a0e002 	moveq	lr, #2
   19e8c:	05c0a028 	strbeq	sl, [r0, #40]	@ 0x28
   19e90:	eaffffa7 	b	19d34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x64>
   19e94:	e35300c0 	cmp	r3, #192	@ 0xc0
   19e98:	03a0e000 	moveq	lr, #0
   19e9c:	0affffa4 	beq	19d34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x64>
   19ea0:	e3530080 	cmp	r3, #128	@ 0x80
   19ea4:	1affffc6 	bne	19dc4 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xf4>
   19ea8:	e20cc003 	and	ip, ip, #3
   19eac:	e35c0002 	cmp	ip, #2
   19eb0:	1affff9e 	bne	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19eb4:	e356000d 	cmp	r6, #13
   19eb8:	03590054 	cmpeq	r9, #84	@ 0x54
   19ebc:	1affff9b 	bne	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19ec0:	e3570001 	cmp	r7, #1
   19ec4:	1affffd3 	bne	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>
   19ec8:	e5805030 	str	r5, [r0, #48]	@ 0x30
   19ecc:	e5808034 	str	r8, [r0, #52]	@ 0x34
   19ed0:	eaffff96 	b	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19ed4:	e16f0f1e 	clz	r0, lr
   19ed8:	e3510000 	cmp	r1, #0
   19edc:	e1a002a0 	lsr	r0, r0, #5
   19ee0:	03a00000 	moveq	r0, #0
   19ee4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19ee8:	e1a0e002 	mov	lr, r2
   19eec:	eaffffb9 	b	19dd8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x108>
   19ef0:	e35e0002 	cmp	lr, #2
   19ef4:	0a000007 	beq	19f18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x248>
   19ef8:	e35300a0 	cmp	r3, #160	@ 0xa0
   19efc:	035c0001 	cmpeq	ip, #1
   19f00:	1affff87 	bne	19d24 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x54>
   19f04:	e356000d 	cmp	r6, #13
   19f08:	03590004 	cmpeq	r9, #4
   19f0c:	03a0e001 	moveq	lr, #1
   19f10:	13a0e000 	movne	lr, #0
   19f14:	eaffff86 	b	19d34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x64>
   19f18:	e35300a0 	cmp	r3, #160	@ 0xa0
   19f1c:	0affffbd 	beq	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>
   19f20:	e35300c0 	cmp	r3, #192	@ 0xc0
   19f24:	0a000016 	beq	19f84 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2b4>
   19f28:	e3530080 	cmp	r3, #128	@ 0x80
   19f2c:	1affff80 	bne	19d34 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x64>
   19f30:	e20cc003 	and	ip, ip, #3
   19f34:	e35c0002 	cmp	ip, #2
   19f38:	1affff7c 	bne	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19f3c:	e3560001 	cmp	r6, #1
   19f40:	0a000016 	beq	19fa0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x2d0>
   19f44:	e356000d 	cmp	r6, #13
   19f48:	1affff78 	bne	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19f4c:	e3590042 	cmp	r9, #66	@ 0x42
   19f50:	0a00002e 	beq	1a010 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x340>
   19f54:	e3590051 	cmp	r9, #81	@ 0x51
   19f58:	0a000024 	beq	19ff0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x320>
   19f5c:	e3590030 	cmp	r9, #48	@ 0x30
   19f60:	1affff72 	bne	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19f64:	e3570001 	cmp	r7, #1
   19f68:	1affffaa 	bne	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>
   19f6c:	e3540009 	cmp	r4, #9
   19f70:	93a03028 	movls	r3, #40	@ 0x28
   19f74:	90230493 	mlals	r3, r3, r4, r0
   19f78:	95835048 	strls	r5, [r3, #72]	@ 0x48
   19f7c:	9583804c 	strls	r8, [r3, #76]	@ 0x4c
   19f80:	eaffff6a 	b	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19f84:	e3540009 	cmp	r4, #9
   19f88:	e3a0e001 	mov	lr, #1
   19f8c:	92844001 	addls	r4, r4, #1
   19f90:	9590302c 	ldrls	r3, [r0, #44]	@ 0x2c
   19f94:	92833001 	addls	r3, r3, #1
   19f98:	9580302c 	strls	r3, [r0, #44]	@ 0x2c
   19f9c:	eaffff89 	b	19dc8 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0xf8>
   19fa0:	e3590030 	cmp	r9, #48	@ 0x30
   19fa4:	0a000009 	beq	19fd0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x300>
   19fa8:	e3590031 	cmp	r9, #49	@ 0x31
   19fac:	1affff5f 	bne	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19fb0:	e3570001 	cmp	r7, #1
   19fb4:	1affff97 	bne	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>
   19fb8:	e3540009 	cmp	r4, #9
   19fbc:	93a03028 	movls	r3, #40	@ 0x28
   19fc0:	90230493 	mlals	r3, r3, r4, r0
   19fc4:	95835058 	strls	r5, [r3, #88]	@ 0x58
   19fc8:	9583805c 	strls	r8, [r3, #92]	@ 0x5c
   19fcc:	eaffff57 	b	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19fd0:	e3570001 	cmp	r7, #1
   19fd4:	1affff8f 	bne	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>
   19fd8:	e3540009 	cmp	r4, #9
   19fdc:	93a03028 	movls	r3, #40	@ 0x28
   19fe0:	90230493 	mlals	r3, r3, r4, r0
   19fe4:	95835050 	strls	r5, [r3, #80]	@ 0x50
   19fe8:	95838054 	strls	r8, [r3, #84]	@ 0x54
   19fec:	eaffff4f 	b	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   19ff0:	e3570001 	cmp	r7, #1
   19ff4:	1affff87 	bne	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>
   19ff8:	e3540009 	cmp	r4, #9
   19ffc:	93a03028 	movls	r3, #40	@ 0x28
   1a000:	90230493 	mlals	r3, r3, r4, r0
   1a004:	95835040 	strls	r5, [r3, #64]	@ 0x40
   1a008:	95838044 	strls	r8, [r3, #68]	@ 0x44
   1a00c:	eaffff47 	b	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>
   1a010:	e3570001 	cmp	r7, #1
   1a014:	1affff7f 	bne	19e18 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x148>
   1a018:	e3540009 	cmp	r4, #9
   1a01c:	93a03028 	movls	r3, #40	@ 0x28
   1a020:	90230493 	mlals	r3, r3, r4, r0
   1a024:	95835038 	strls	r5, [r3, #56]	@ 0x38
   1a028:	9583803c 	strls	r8, [r3, #60]	@ 0x3c
   1a02c:	eaffff3f 	b	19d30 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)+0x60>

0001a030 <CUSBTouchScreenDevice::Configure()>:
   1a030:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a034:	e3a01021 	mov	r1, #33	@ 0x21
   1a038:	e1a04000 	mov	r4, r0
   1a03c:	e28db01c 	add	fp, sp, #28
   1a040:	e24dd010 	sub	sp, sp, #16
   1a044:	ebffd981 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   1a048:	e2505000 	subs	r5, r0, #0
   1a04c:	0a000002 	beq	1a05c <CUSBTouchScreenDevice::Configure()+0x2c>
   1a050:	e1d560b7 	ldrh	r6, [r5, #7]
   1a054:	e3560000 	cmp	r6, #0
   1a058:	1a000006 	bne	1a078 <CUSBTouchScreenDevice::Configure()+0x48>
   1a05c:	e59f1158 	ldr	r1, [pc, #344]	@ 1a1bc <CUSBTouchScreenDevice::Configure()+0x18c>
   1a060:	e1a00004 	mov	r0, r4
   1a064:	ebffd984 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   1a068:	e3a05000 	mov	r5, #0
   1a06c:	e1a00005 	mov	r0, r5
   1a070:	e24bd01c 	sub	sp, fp, #28
   1a074:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a078:	e2463001 	sub	r3, r6, #1
   1a07c:	e1a00004 	mov	r0, r4
   1a080:	e383303f 	orr	r3, r3, #63	@ 0x3f
   1a084:	e2833040 	add	r3, r3, #64	@ 0x40
   1a088:	e3c33007 	bic	r3, r3, #7
   1a08c:	e04dd003 	sub	sp, sp, r3
   1a090:	ebffd963 	bl	10624 <CUSBFunction::GetHost() const>
   1a094:	e1a08000 	mov	r8, r0
   1a098:	e1a00004 	mov	r0, r4
   1a09c:	e28d704f 	add	r7, sp, #79	@ 0x4f
   1a0a0:	ebffd954 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1a0a4:	e5d59006 	ldrb	r9, [r5, #6]
   1a0a8:	e1a05000 	mov	r5, r0
   1a0ac:	e1a00004 	mov	r0, r4
   1a0b0:	ebffd9ba 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   1a0b4:	e3c7703f 	bic	r7, r7, #63	@ 0x3f
   1a0b8:	e1a02009 	mov	r2, r9
   1a0bc:	e3a03081 	mov	r3, #129	@ 0x81
   1a0c0:	e58d000c 	str	r0, [sp, #12]
   1a0c4:	e1a01005 	mov	r1, r5
   1a0c8:	e58d3008 	str	r3, [sp, #8]
   1a0cc:	e1a00008 	mov	r0, r8
   1a0d0:	e3a03000 	mov	r3, #0
   1a0d4:	e58d6004 	str	r6, [sp, #4]
   1a0d8:	e58d7000 	str	r7, [sp]
   1a0dc:	ebffe685 	bl	13af8 <CUSBHostController::GetDescriptor(CUSBEndpoint*, unsigned char, unsigned char, void*, unsigned int, unsigned char, unsigned short)>
   1a0e0:	e1a02000 	mov	r2, r0
   1a0e4:	e1500006 	cmp	r0, r6
   1a0e8:	0a000006 	beq	1a108 <CUSBTouchScreenDevice::Configure()+0xd8>
   1a0ec:	eb0051b5 	bl	2e7c8 <CLogger::Get()>
   1a0f0:	e59f10c4 	ldr	r1, [pc, #196]	@ 1a1bc <CUSBTouchScreenDevice::Configure()+0x18c>
   1a0f4:	e3a02001 	mov	r2, #1
   1a0f8:	e30a3d30 	movw	r3, #44336	@ 0xad30
   1a0fc:	e3403003 	movt	r3, #3
   1a100:	eb005379 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a104:	eaffffd7 	b	1a068 <CUSBTouchScreenDevice::Configure()+0x38>
   1a108:	e1a01007 	mov	r1, r7
   1a10c:	e1a00004 	mov	r0, r4
   1a110:	ebfffeee 	bl	19cd0 <CUSBTouchScreenDevice::DecodeReportDescriptor(unsigned char const*, unsigned int)>
   1a114:	e3500000 	cmp	r0, #0
   1a118:	0a000013 	beq	1a16c <CUSBTouchScreenDevice::Configure()+0x13c>
   1a11c:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
   1a120:	e1a00004 	mov	r0, r4
   1a124:	ebffe424 	bl	131bc <CUSBHIDDevice::ConfigureHID(unsigned int)>
   1a128:	e3500000 	cmp	r0, #0
   1a12c:	0a000015 	beq	1a188 <CUSBTouchScreenDevice::Configure()+0x158>
   1a130:	e1a00004 	mov	r0, r4
   1a134:	ebffe538 	bl	1361c <CUSBHIDDevice::StartRequest()>
   1a138:	e2505000 	subs	r5, r0, #0
   1a13c:	0affffc9 	beq	1a068 <CUSBTouchScreenDevice::Configure()+0x38>
   1a140:	e5946204 	ldr	r6, [r4, #516]	@ 0x204
   1a144:	e3560000 	cmp	r6, #0
   1a148:	1a000015 	bne	1a1a4 <CUSBTouchScreenDevice::Configure()+0x174>
   1a14c:	e3a00030 	mov	r0, #48	@ 0x30
   1a150:	eb006ff3 	bl	36124 <operator new(unsigned int)>
   1a154:	e1a02006 	mov	r2, r6
   1a158:	e1a01006 	mov	r1, r6
   1a15c:	e1a06000 	mov	r6, r0
   1a160:	eb001473 	bl	1f334 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)>
   1a164:	e5846204 	str	r6, [r4, #516]	@ 0x204
   1a168:	eaffffbf 	b	1a06c <CUSBTouchScreenDevice::Configure()+0x3c>
   1a16c:	eb005195 	bl	2e7c8 <CLogger::Get()>
   1a170:	e59f1044 	ldr	r1, [pc, #68]	@ 1a1bc <CUSBTouchScreenDevice::Configure()+0x18c>
   1a174:	e3a02001 	mov	r2, #1
   1a178:	e30c30e8 	movw	r3, #49384	@ 0xc0e8
   1a17c:	e3403003 	movt	r3, #3
   1a180:	eb005359 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a184:	eaffffb7 	b	1a068 <CUSBTouchScreenDevice::Configure()+0x38>
   1a188:	eb00518e 	bl	2e7c8 <CLogger::Get()>
   1a18c:	e59f1028 	ldr	r1, [pc, #40]	@ 1a1bc <CUSBTouchScreenDevice::Configure()+0x18c>
   1a190:	e3a02001 	mov	r2, #1
   1a194:	e30b3558 	movw	r3, #46424	@ 0xb558
   1a198:	e3403003 	movt	r3, #3
   1a19c:	eb005352 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a1a0:	eaffffb0 	b	1a068 <CUSBTouchScreenDevice::Configure()+0x38>
   1a1a4:	e30c1108 	movw	r1, #49416	@ 0xc108
   1a1a8:	e3401003 	movt	r1, #3
   1a1ac:	e30a0550 	movw	r0, #42320	@ 0xa550
   1a1b0:	e3400003 	movt	r0, #3
   1a1b4:	e3a0207a 	mov	r2, #122	@ 0x7a
   1a1b8:	eb004707 	bl	2bddc <assertion_failed>
   1a1bc:	0003f7e4 	.word	0x0003f7e4

0001a1c0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>:
   1a1c0:	e3500000 	cmp	r0, #0
   1a1c4:	e92d4010 	push	{r4, lr}
   1a1c8:	0a000016 	beq	1a228 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x68>
   1a1cc:	e5913004 	ldr	r3, [r1, #4]
   1a1d0:	e3530020 	cmp	r3, #32
   1a1d4:	8a000019 	bhi	1a240 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x80>
   1a1d8:	e3530000 	cmp	r3, #0
   1a1dc:	0a00000f 	beq	1a220 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)+0x60>
   1a1e0:	e5911000 	ldr	r1, [r1]
   1a1e4:	e3530018 	cmp	r3, #24
   1a1e8:	82433018 	subhi	r3, r3, #24
   1a1ec:	e201c007 	and	ip, r1, #7
   1a1f0:	83e0e000 	mvnhi	lr, #0
   1a1f4:	e79021a1 	ldr	r2, [r0, r1, lsr #3]
   1a1f8:	e08001a1 	add	r0, r0, r1, lsr #3
   1a1fc:	93e01000 	mvnls	r1, #0
   1a200:	85901003 	ldrhi	r1, [r0, #3]
   1a204:	e1a02c32 	lsr	r2, r2, ip
   1a208:	91c20311 	bicls	r0, r2, r1, lsl r3
   1a20c:	83c204ff 	bichi	r0, r2, #-16777216	@ 0xff000000
   1a210:	81a02c31 	lsrhi	r2, r1, ip
   1a214:	81c2331e 	bichi	r3, r2, lr, lsl r3
   1a218:	81800c03 	orrhi	r0, r0, r3, lsl #24
   1a21c:	e8bd8010 	pop	{r4, pc}
   1a220:	e1a00002 	mov	r0, r2
   1a224:	e8bd8010 	pop	{r4, pc}
   1a228:	e30c1108 	movw	r1, #49416	@ 0xc108
   1a22c:	e3401003 	movt	r1, #3
   1a230:	e30b0400 	movw	r0, #46080	@ 0xb400
   1a234:	e3400003 	movt	r0, #3
   1a238:	e30021b7 	movw	r2, #439	@ 0x1b7
   1a23c:	eb0046e6 	bl	2bddc <assertion_failed>
   1a240:	e30c1108 	movw	r1, #49416	@ 0xc108
   1a244:	e3401003 	movt	r1, #3
   1a248:	e30c011c 	movw	r0, #49436	@ 0xc11c
   1a24c:	e3400003 	movt	r0, #3
   1a250:	e30021bb 	movw	r2, #443	@ 0x1bb
   1a254:	eb0046e0 	bl	2bddc <assertion_failed>

0001a258 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)>:
   1a258:	e5903204 	ldr	r3, [r0, #516]	@ 0x204
   1a25c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a260:	e3530000 	cmp	r3, #0
   1a264:	e24dd02c 	sub	sp, sp, #44	@ 0x2c
   1a268:	0a000083 	beq	1a47c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x224>
   1a26c:	e1a05001 	mov	r5, r1
   1a270:	e3510000 	cmp	r1, #0
   1a274:	0a000069 	beq	1a420 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c8>
   1a278:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   1a27c:	e1a06000 	mov	r6, r0
   1a280:	e1530002 	cmp	r3, r2
   1a284:	1a000065 	bne	1a420 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c8>
   1a288:	e5d03028 	ldrb	r3, [r0, #40]	@ 0x28
   1a28c:	e3530000 	cmp	r3, #0
   1a290:	0a000002 	beq	1a2a0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x48>
   1a294:	e5d12000 	ldrb	r2, [r1]
   1a298:	e1520003 	cmp	r2, r3
   1a29c:	1a00005f 	bne	1a420 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c8>
   1a2a0:	e3a02001 	mov	r2, #1
   1a2a4:	e2861030 	add	r1, r6, #48	@ 0x30
   1a2a8:	e1a00005 	mov	r0, r5
   1a2ac:	ebffffc3 	bl	1a1c0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a2b0:	e1a09000 	mov	r9, r0
   1a2b4:	e350000a 	cmp	r0, #10
   1a2b8:	8a00009b 	bhi	1a52c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2d4>
   1a2bc:	e3500000 	cmp	r0, #0
   1a2c0:	0a000050 	beq	1a408 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1b0>
   1a2c4:	e2864038 	add	r4, r6, #56	@ 0x38
   1a2c8:	e3a08028 	mov	r8, #40	@ 0x28
   1a2cc:	e28d701c 	add	r7, sp, #28
   1a2d0:	e3e0b000 	mvn	fp, #0
   1a2d4:	e0284098 	mla	r8, r8, r0, r4
   1a2d8:	ea000004 	b	1a2f0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x98>
   1a2dc:	e5c7b000 	strb	fp, [r7]
   1a2e0:	e2844028 	add	r4, r4, #40	@ 0x28
   1a2e4:	e2877001 	add	r7, r7, #1
   1a2e8:	e1540008 	cmp	r4, r8
   1a2ec:	0a000045 	beq	1a408 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1b0>
   1a2f0:	e3a02001 	mov	r2, #1
   1a2f4:	e1a01004 	mov	r1, r4
   1a2f8:	e1a00005 	mov	r0, r5
   1a2fc:	ebffffaf 	bl	1a1c0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a300:	e3500000 	cmp	r0, #0
   1a304:	0afffff4 	beq	1a2dc <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x84>
   1a308:	e3a02001 	mov	r2, #1
   1a30c:	e2841010 	add	r1, r4, #16
   1a310:	e1a00005 	mov	r0, r5
   1a314:	ebffffa9 	bl	1a1c0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a318:	e3500000 	cmp	r0, #0
   1a31c:	0affffee 	beq	1a2dc <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x84>
   1a320:	e3a02000 	mov	r2, #0
   1a324:	e2841008 	add	r1, r4, #8
   1a328:	e1a00005 	mov	r0, r5
   1a32c:	ebffffa3 	bl	1a1c0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a330:	e3a02000 	mov	r2, #0
   1a334:	e6efa070 	uxtb	sl, r0
   1a338:	e2841018 	add	r1, r4, #24
   1a33c:	e1a00005 	mov	r0, r5
   1a340:	e5c7a000 	strb	sl, [r7]
   1a344:	ebffff9d 	bl	1a1c0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a348:	e3a02000 	mov	r2, #0
   1a34c:	e58d000c 	str	r0, [sp, #12]
   1a350:	e2841020 	add	r1, r4, #32
   1a354:	e1a00005 	mov	r0, r5
   1a358:	ebffff98 	bl	1a1c0 <CUSBTouchScreenDevice::GetValue(void const*, CUSBTouchScreenDevice::TReportItem const&, unsigned int)>
   1a35c:	e58d0010 	str	r0, [sp, #16]
   1a360:	e596002c 	ldr	r0, [r6, #44]	@ 0x2c
   1a364:	e286cf71 	add	ip, r6, #452	@ 0x1c4
   1a368:	e28cc003 	add	ip, ip, #3
   1a36c:	e3500000 	cmp	r0, #0
   1a370:	03e00000 	mvneq	r0, #0
   1a374:	0a00000d 	beq	1a3b0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x158>
   1a378:	e3a02000 	mov	r2, #0
   1a37c:	e1a0300c 	mov	r3, ip
   1a380:	e5f31001 	ldrb	r1, [r3, #1]!
   1a384:	e3510000 	cmp	r1, #0
   1a388:	0a000002 	beq	1a398 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x140>
   1a38c:	e5d3100a 	ldrb	r1, [r3, #10]
   1a390:	e151000a 	cmp	r1, sl
   1a394:	0a000048 	beq	1a4bc <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x264>
   1a398:	e2822001 	add	r2, r2, #1
   1a39c:	e1500002 	cmp	r0, r2
   1a3a0:	1afffff6 	bne	1a380 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x128>
   1a3a4:	e3500001 	cmp	r0, #1
   1a3a8:	e2400001 	sub	r0, r0, #1
   1a3ac:	0a000064 	beq	1a544 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2ec>
   1a3b0:	e3a02000 	mov	r2, #0
   1a3b4:	ea000002 	b	1a3c4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x16c>
   1a3b8:	e2822001 	add	r2, r2, #1
   1a3bc:	e1520000 	cmp	r2, r0
   1a3c0:	2a000002 	bcs	1a3d0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x178>
   1a3c4:	e5fc3001 	ldrb	r3, [ip, #1]!
   1a3c8:	e3530000 	cmp	r3, #0
   1a3cc:	1afffff9 	bne	1a3b8 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x160>
   1a3d0:	e59d3010 	ldr	r3, [sp, #16]
   1a3d4:	e3a01000 	mov	r1, #0
   1a3d8:	e58d3000 	str	r3, [sp]
   1a3dc:	e59d300c 	ldr	r3, [sp, #12]
   1a3e0:	e5960204 	ldr	r0, [r6, #516]	@ 0x204
   1a3e4:	e58d2014 	str	r2, [sp, #20]
   1a3e8:	eb001443 	bl	1f4fc <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   1a3ec:	e59d2014 	ldr	r2, [sp, #20]
   1a3f0:	e0863002 	add	r3, r6, r2
   1a3f4:	e5c3a1d2 	strb	sl, [r3, #466]	@ 0x1d2
   1a3f8:	e1a0a082 	lsl	sl, r2, #1
   1a3fc:	e3a02001 	mov	r2, #1
   1a400:	e5c321c8 	strb	r2, [r3, #456]	@ 0x1c8
   1a404:	ea000040 	b	1a50c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2b4>
   1a408:	e596c02c 	ldr	ip, [r6, #44]	@ 0x2c
   1a40c:	e35c0000 	cmp	ip, #0
   1a410:	12865f71 	addne	r5, r6, #452	@ 0x1c4
   1a414:	13a04000 	movne	r4, #0
   1a418:	12855003 	addne	r5, r5, #3
   1a41c:	1a000012 	bne	1a46c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x214>
   1a420:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   1a424:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a428:	e3590000 	cmp	r9, #0
   1a42c:	0a000018 	beq	1a494 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x23c>
   1a430:	e5d5200a 	ldrb	r2, [r5, #10]
   1a434:	e28d101c 	add	r1, sp, #28
   1a438:	e3a03000 	mov	r3, #0
   1a43c:	ea000002 	b	1a44c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1f4>
   1a440:	e2833001 	add	r3, r3, #1
   1a444:	e1590003 	cmp	r9, r3
   1a448:	0a000011 	beq	1a494 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x23c>
   1a44c:	e4d10001 	ldrb	r0, [r1], #1
   1a450:	e1520000 	cmp	r2, r0
   1a454:	1afffff9 	bne	1a440 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1e8>
   1a458:	e1590003 	cmp	r9, r3
   1a45c:	0a00000c 	beq	1a494 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x23c>
   1a460:	e2844001 	add	r4, r4, #1
   1a464:	e154000c 	cmp	r4, ip
   1a468:	2affffec 	bcs	1a420 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1c8>
   1a46c:	e5f53001 	ldrb	r3, [r5, #1]!
   1a470:	e3530000 	cmp	r3, #0
   1a474:	0afffff9 	beq	1a460 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x208>
   1a478:	eaffffea 	b	1a428 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x1d0>
   1a47c:	e30c1108 	movw	r1, #49416	@ 0xc108
   1a480:	e3401003 	movt	r1, #3
   1a484:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   1a488:	e3400003 	movt	r0, #3
   1a48c:	e3a02083 	mov	r2, #131	@ 0x83
   1a490:	eb004651 	bl	2bddc <assertion_failed>
   1a494:	e3a07000 	mov	r7, #0
   1a498:	e58d7000 	str	r7, [sp]
   1a49c:	e1a03007 	mov	r3, r7
   1a4a0:	e1a02004 	mov	r2, r4
   1a4a4:	e5960204 	ldr	r0, [r6, #516]	@ 0x204
   1a4a8:	e3a01001 	mov	r1, #1
   1a4ac:	eb001412 	bl	1f4fc <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   1a4b0:	e596c02c 	ldr	ip, [r6, #44]	@ 0x2c
   1a4b4:	e5c57000 	strb	r7, [r5]
   1a4b8:	eaffffe8 	b	1a460 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x208>
   1a4bc:	e1520000 	cmp	r2, r0
   1a4c0:	0affffb7 	beq	1a3a4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x14c>
   1a4c4:	e1a0a082 	lsl	sl, r2, #1
   1a4c8:	e59d000c 	ldr	r0, [sp, #12]
   1a4cc:	e086300a 	add	r3, r6, sl
   1a4d0:	e2831f77 	add	r1, r3, #476	@ 0x1dc
   1a4d4:	e1d110b0 	ldrh	r1, [r1]
   1a4d8:	e1500001 	cmp	r0, r1
   1a4dc:	1a000004 	bne	1a4f4 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x29c>
   1a4e0:	e2833e1f 	add	r3, r3, #496	@ 0x1f0
   1a4e4:	e59d1010 	ldr	r1, [sp, #16]
   1a4e8:	e1d330b0 	ldrh	r3, [r3]
   1a4ec:	e1510003 	cmp	r1, r3
   1a4f0:	0a000005 	beq	1a50c <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x2b4>
   1a4f4:	e59d3010 	ldr	r3, [sp, #16]
   1a4f8:	e3a01002 	mov	r1, #2
   1a4fc:	e58d3000 	str	r3, [sp]
   1a500:	e59d300c 	ldr	r3, [sp, #12]
   1a504:	e5960204 	ldr	r0, [r6, #516]	@ 0x204
   1a508:	eb0013fb 	bl	1f4fc <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>
   1a50c:	e086a00a 	add	sl, r6, sl
   1a510:	e59d200c 	ldr	r2, [sp, #12]
   1a514:	e28a3f77 	add	r3, sl, #476	@ 0x1dc
   1a518:	e28aae1f 	add	sl, sl, #496	@ 0x1f0
   1a51c:	e1c320b0 	strh	r2, [r3]
   1a520:	e59d3010 	ldr	r3, [sp, #16]
   1a524:	e1ca30b0 	strh	r3, [sl]
   1a528:	eaffff6c 	b	1a2e0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x88>
   1a52c:	e30c1108 	movw	r1, #49416	@ 0xc108
   1a530:	e3401003 	movt	r1, #3
   1a534:	e30c012c 	movw	r0, #49452	@ 0xc12c
   1a538:	e3400003 	movt	r0, #3
   1a53c:	e3a02093 	mov	r2, #147	@ 0x93
   1a540:	eb004625 	bl	2bddc <assertion_failed>
   1a544:	e3a02000 	mov	r2, #0
   1a548:	eaffffa0 	b	1a3d0 <CUSBTouchScreenDevice::ReportHandler(unsigned char const*, unsigned int)+0x178>

0001a54c <CDWHCIRegister::CDWHCIRegister(unsigned int)>:
   1a54c:	e3a02000 	mov	r2, #0
   1a550:	e5801004 	str	r1, [r0, #4]
   1a554:	e5c02000 	strb	r2, [r0]
   1a558:	e12fff1e 	bx	lr

0001a55c <CDWHCIRegister::CDWHCIRegister(unsigned int, unsigned int)>:
   1a55c:	e3a0c001 	mov	ip, #1
   1a560:	e5801004 	str	r1, [r0, #4]
   1a564:	e5c0c000 	strb	ip, [r0]
   1a568:	e5802008 	str	r2, [r0, #8]
   1a56c:	e12fff1e 	bx	lr

0001a570 <CDWHCIRegister::~CDWHCIRegister()>:
   1a570:	e12fff1e 	bx	lr

0001a574 <CDWHCIRegister::Read()>:
   1a574:	e5901004 	ldr	r1, [r0, #4]
   1a578:	e1a03000 	mov	r3, r0
   1a57c:	e3a02001 	mov	r2, #1
   1a580:	e5910000 	ldr	r0, [r1]
   1a584:	e5830008 	str	r0, [r3, #8]
   1a588:	e5c32000 	strb	r2, [r3]
   1a58c:	e12fff1e 	bx	lr

0001a590 <CDWHCIRegister::Write()>:
   1a590:	e5d03000 	ldrb	r3, [r0]
   1a594:	e3530000 	cmp	r3, #0
   1a598:	0a000003 	beq	1a5ac <CDWHCIRegister::Write()+0x1c>
   1a59c:	e5903004 	ldr	r3, [r0, #4]
   1a5a0:	e5902008 	ldr	r2, [r0, #8]
   1a5a4:	e5832000 	str	r2, [r3]
   1a5a8:	e12fff1e 	bx	lr
   1a5ac:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a5b0:	e3401003 	movt	r1, #3
   1a5b4:	e30c0164 	movw	r0, #49508	@ 0xc164
   1a5b8:	e3400003 	movt	r0, #3
   1a5bc:	e3a02035 	mov	r2, #53	@ 0x35
   1a5c0:	e92d4010 	push	{r4, lr}
   1a5c4:	eb004604 	bl	2bddc <assertion_failed>

0001a5c8 <CDWHCIRegister::Get() const>:
   1a5c8:	e5d03000 	ldrb	r3, [r0]
   1a5cc:	e3530000 	cmp	r3, #0
   1a5d0:	0a000001 	beq	1a5dc <CDWHCIRegister::Get() const+0x14>
   1a5d4:	e5900008 	ldr	r0, [r0, #8]
   1a5d8:	e12fff1e 	bx	lr
   1a5dc:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a5e0:	e3401003 	movt	r1, #3
   1a5e4:	e30c0164 	movw	r0, #49508	@ 0xc164
   1a5e8:	e3400003 	movt	r0, #3
   1a5ec:	e3a0203b 	mov	r2, #59	@ 0x3b
   1a5f0:	e92d4010 	push	{r4, lr}
   1a5f4:	eb0045f8 	bl	2bddc <assertion_failed>

0001a5f8 <CDWHCIRegister::Set(unsigned int)>:
   1a5f8:	e3a03001 	mov	r3, #1
   1a5fc:	e5801008 	str	r1, [r0, #8]
   1a600:	e5c03000 	strb	r3, [r0]
   1a604:	e12fff1e 	bx	lr

0001a608 <CDWHCIRegister::IsSet(unsigned int) const>:
   1a608:	e5d03000 	ldrb	r3, [r0]
   1a60c:	e3530000 	cmp	r3, #0
   1a610:	0a000004 	beq	1a628 <CDWHCIRegister::IsSet(unsigned int) const+0x20>
   1a614:	e5903008 	ldr	r3, [r0, #8]
   1a618:	e1110003 	tst	r1, r3
   1a61c:	13a00001 	movne	r0, #1
   1a620:	03a00000 	moveq	r0, #0
   1a624:	e12fff1e 	bx	lr
   1a628:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a62c:	e3401003 	movt	r1, #3
   1a630:	e30c0164 	movw	r0, #49508	@ 0xc164
   1a634:	e3400003 	movt	r0, #3
   1a638:	e3a02047 	mov	r2, #71	@ 0x47
   1a63c:	e92d4010 	push	{r4, lr}
   1a640:	eb0045e5 	bl	2bddc <assertion_failed>

0001a644 <CDWHCIRegister::And(unsigned int)>:
   1a644:	e5d03000 	ldrb	r3, [r0]
   1a648:	e3530000 	cmp	r3, #0
   1a64c:	0a000003 	beq	1a660 <CDWHCIRegister::And(unsigned int)+0x1c>
   1a650:	e5903008 	ldr	r3, [r0, #8]
   1a654:	e0033001 	and	r3, r3, r1
   1a658:	e5803008 	str	r3, [r0, #8]
   1a65c:	e12fff1e 	bx	lr
   1a660:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a664:	e3401003 	movt	r1, #3
   1a668:	e30c0164 	movw	r0, #49508	@ 0xc164
   1a66c:	e3400003 	movt	r0, #3
   1a670:	e3a0204d 	mov	r2, #77	@ 0x4d
   1a674:	e92d4010 	push	{r4, lr}
   1a678:	eb0045d7 	bl	2bddc <assertion_failed>

0001a67c <CDWHCIRegister::Or(unsigned int)>:
   1a67c:	e5d03000 	ldrb	r3, [r0]
   1a680:	e3530000 	cmp	r3, #0
   1a684:	0a000003 	beq	1a698 <CDWHCIRegister::Or(unsigned int)+0x1c>
   1a688:	e5903008 	ldr	r3, [r0, #8]
   1a68c:	e1833001 	orr	r3, r3, r1
   1a690:	e5803008 	str	r3, [r0, #8]
   1a694:	e12fff1e 	bx	lr
   1a698:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a69c:	e3401003 	movt	r1, #3
   1a6a0:	e30c0164 	movw	r0, #49508	@ 0xc164
   1a6a4:	e3400003 	movt	r0, #3
   1a6a8:	e3a02053 	mov	r2, #83	@ 0x53
   1a6ac:	e92d4010 	push	{r4, lr}
   1a6b0:	eb0045c9 	bl	2bddc <assertion_failed>

0001a6b4 <CDWHCIRegister::ClearBit(unsigned int)>:
   1a6b4:	e5d03000 	ldrb	r3, [r0]
   1a6b8:	e92d4010 	push	{r4, lr}
   1a6bc:	e3530000 	cmp	r3, #0
   1a6c0:	0a000006 	beq	1a6e0 <CDWHCIRegister::ClearBit(unsigned int)+0x2c>
   1a6c4:	e351001f 	cmp	r1, #31
   1a6c8:	8a00000a 	bhi	1a6f8 <CDWHCIRegister::ClearBit(unsigned int)+0x44>
   1a6cc:	e5903008 	ldr	r3, [r0, #8]
   1a6d0:	e3a02001 	mov	r2, #1
   1a6d4:	e1c33112 	bic	r3, r3, r2, lsl r1
   1a6d8:	e5803008 	str	r3, [r0, #8]
   1a6dc:	e8bd8010 	pop	{r4, pc}
   1a6e0:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a6e4:	e3401003 	movt	r1, #3
   1a6e8:	e30c0164 	movw	r0, #49508	@ 0xc164
   1a6ec:	e3400003 	movt	r0, #3
   1a6f0:	e3a02059 	mov	r2, #89	@ 0x59
   1a6f4:	eb0045b8 	bl	2bddc <assertion_failed>
   1a6f8:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a6fc:	e3401003 	movt	r1, #3
   1a700:	e30c0170 	movw	r0, #49520	@ 0xc170
   1a704:	e3400003 	movt	r0, #3
   1a708:	e3a0205a 	mov	r2, #90	@ 0x5a
   1a70c:	eb0045b2 	bl	2bddc <assertion_failed>

0001a710 <CDWHCIRegister::SetBit(unsigned int)>:
   1a710:	e5d03000 	ldrb	r3, [r0]
   1a714:	e92d4010 	push	{r4, lr}
   1a718:	e3530000 	cmp	r3, #0
   1a71c:	0a000006 	beq	1a73c <CDWHCIRegister::SetBit(unsigned int)+0x2c>
   1a720:	e351001f 	cmp	r1, #31
   1a724:	8a00000a 	bhi	1a754 <CDWHCIRegister::SetBit(unsigned int)+0x44>
   1a728:	e5903008 	ldr	r3, [r0, #8]
   1a72c:	e3a02001 	mov	r2, #1
   1a730:	e1833112 	orr	r3, r3, r2, lsl r1
   1a734:	e5803008 	str	r3, [r0, #8]
   1a738:	e8bd8010 	pop	{r4, pc}
   1a73c:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a740:	e3401003 	movt	r1, #3
   1a744:	e30c0164 	movw	r0, #49508	@ 0xc164
   1a748:	e3400003 	movt	r0, #3
   1a74c:	e3a02060 	mov	r2, #96	@ 0x60
   1a750:	eb0045a1 	bl	2bddc <assertion_failed>
   1a754:	e30c1150 	movw	r1, #49488	@ 0xc150
   1a758:	e3401003 	movt	r1, #3
   1a75c:	e30c0170 	movw	r0, #49520	@ 0xc170
   1a760:	e3400003 	movt	r0, #3
   1a764:	e3a02061 	mov	r2, #97	@ 0x61
   1a768:	eb00459b 	bl	2bddc <assertion_failed>

0001a76c <CDWHCIRegister::ClearAll()>:
   1a76c:	e3a02000 	mov	r2, #0
   1a770:	e3a03001 	mov	r3, #1
   1a774:	e5802008 	str	r2, [r0, #8]
   1a778:	e5c03000 	strb	r3, [r0]
   1a77c:	e12fff1e 	bx	lr

0001a780 <CDWHCIRegister::SetAll()>:
   1a780:	e3a02001 	mov	r2, #1
   1a784:	e3e03000 	mvn	r3, #0
   1a788:	e5c02000 	strb	r2, [r0]
   1a78c:	e5803008 	str	r3, [r0, #8]
   1a790:	e12fff1e 	bx	lr

0001a794 <CDWHCIRegister::Dump() const>:
   1a794:	e92d4010 	push	{r4, lr}
   1a798:	e1a04000 	mov	r4, r0
   1a79c:	e5d03000 	ldrb	r3, [r0]
   1a7a0:	e24dd008 	sub	sp, sp, #8
   1a7a4:	e3530000 	cmp	r3, #0
   1a7a8:	0a00000b 	beq	1a7dc <CDWHCIRegister::Dump() const+0x48>
   1a7ac:	eb005005 	bl	2e7c8 <CLogger::Get()>
   1a7b0:	e3a02004 	mov	r2, #4
   1a7b4:	e9941002 	ldmib	r4, {r1, ip}
   1a7b8:	e30c318c 	movw	r3, #49548	@ 0xc18c
   1a7bc:	e3403003 	movt	r3, #3
   1a7c0:	e7eb1051 	ubfx	r1, r1, #0, #12
   1a7c4:	e88d1002 	stm	sp, {r1, ip}
   1a7c8:	e30c11a8 	movw	r1, #49576	@ 0xc1a8
   1a7cc:	e3401003 	movt	r1, #3
   1a7d0:	eb0051c5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a7d4:	e28dd008 	add	sp, sp, #8
   1a7d8:	e8bd8010 	pop	{r4, pc}
   1a7dc:	eb004ff9 	bl	2e7c8 <CLogger::Get()>
   1a7e0:	e594c004 	ldr	ip, [r4, #4]
   1a7e4:	e3a02004 	mov	r2, #4
   1a7e8:	e30c31b0 	movw	r3, #49584	@ 0xc1b0
   1a7ec:	e3403003 	movt	r3, #3
   1a7f0:	e30c11a8 	movw	r1, #49576	@ 0xc1a8
   1a7f4:	e3401003 	movt	r1, #3
   1a7f8:	e7ebc05c 	ubfx	ip, ip, #0, #12
   1a7fc:	e58dc000 	str	ip, [sp]
   1a800:	eb0051b9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a804:	e28dd008 	add	sp, sp, #8
   1a808:	e8bd8010 	pop	{r4, pc}

0001a80c <CLAN7800Device::GetMACAddress() const>:
   1a80c:	e2800020 	add	r0, r0, #32
   1a810:	e12fff1e 	bx	lr

0001a814 <CLAN7800Device::~CLAN7800Device()>:
   1a814:	e92d4070 	push	{r4, r5, r6, lr}
   1a818:	e1a04000 	mov	r4, r0
   1a81c:	e59f3070 	ldr	r3, [pc, #112]	@ 1a894 <CLAN7800Device::~CLAN7800Device()+0x80>
   1a820:	e590501c 	ldr	r5, [r0, #28]
   1a824:	e2832048 	add	r2, r3, #72	@ 0x48
   1a828:	e5803000 	str	r3, [r0]
   1a82c:	e3550000 	cmp	r5, #0
   1a830:	e5802014 	str	r2, [r0, #20]
   1a834:	0a000004 	beq	1a84c <CLAN7800Device::~CLAN7800Device()+0x38>
   1a838:	e1a00005 	mov	r0, r5
   1a83c:	ebffd5eb 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1a840:	e3a01014 	mov	r1, #20
   1a844:	e1a00005 	mov	r0, r5
   1a848:	eb006e4d 	bl	36184 <operator delete(void*, unsigned int)>
   1a84c:	e5945018 	ldr	r5, [r4, #24]
   1a850:	e3a03000 	mov	r3, #0
   1a854:	e584301c 	str	r3, [r4, #28]
   1a858:	e1550003 	cmp	r5, r3
   1a85c:	0a000004 	beq	1a874 <CLAN7800Device::~CLAN7800Device()+0x60>
   1a860:	e1a00005 	mov	r0, r5
   1a864:	ebffd5e1 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1a868:	e3a01014 	mov	r1, #20
   1a86c:	e1a00005 	mov	r0, r5
   1a870:	eb006e43 	bl	36184 <operator delete(void*, unsigned int)>
   1a874:	e3a03000 	mov	r3, #0
   1a878:	e2840020 	add	r0, r4, #32
   1a87c:	e5843018 	str	r3, [r4, #24]
   1a880:	eb006d23 	bl	35d14 <CMACAddress::~CMACAddress()>
   1a884:	e1a00004 	mov	r0, r4
   1a888:	ebffd643 	bl	1019c <CUSBFunction::~CUSBFunction()>
   1a88c:	e1a00004 	mov	r0, r4
   1a890:	e8bd8070 	pop	{r4, r5, r6, pc}
   1a894:	0003f7f4 	.word	0x0003f7f4

0001a898 <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   1a898:	e2400014 	sub	r0, r0, #20
   1a89c:	eaffffdc 	b	1a814 <CLAN7800Device::~CLAN7800Device()>

0001a8a0 <CLAN7800Device::~CLAN7800Device()>:
   1a8a0:	e92d4010 	push	{r4, lr}
   1a8a4:	e1a04000 	mov	r4, r0
   1a8a8:	ebffffd9 	bl	1a814 <CLAN7800Device::~CLAN7800Device()>
   1a8ac:	e1a00004 	mov	r0, r4
   1a8b0:	e3a01028 	mov	r1, #40	@ 0x28
   1a8b4:	eb006e32 	bl	36184 <operator delete(void*, unsigned int)>
   1a8b8:	e1a00004 	mov	r0, r4
   1a8bc:	e8bd8010 	pop	{r4, pc}

0001a8c0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   1a8c0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1a8c4:	e1a04001 	mov	r4, r1
   1a8c8:	e5901018 	ldr	r1, [r0, #24]
   1a8cc:	e24dd07c 	sub	sp, sp, #124	@ 0x7c
   1a8d0:	e3510000 	cmp	r1, #0
   1a8d4:	0a000033 	beq	1a9a8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0xe8>
   1a8d8:	e3540000 	cmp	r4, #0
   1a8dc:	0a000037 	beq	1a9c0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x100>
   1a8e0:	e3a07000 	mov	r7, #0
   1a8e4:	e3a03d19 	mov	r3, #1600	@ 0x640
   1a8e8:	e1a05000 	mov	r5, r0
   1a8ec:	e58d7000 	str	r7, [sp]
   1a8f0:	e1a06002 	mov	r6, r2
   1a8f4:	e28d0008 	add	r0, sp, #8
   1a8f8:	e1a02004 	mov	r2, r4
   1a8fc:	ebffeeb6 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1a900:	e1a00005 	mov	r0, r5
   1a904:	ebffd746 	bl	10624 <CUSBFunction::GetHost() const>
   1a908:	e5903000 	ldr	r3, [r0]
   1a90c:	e1a02007 	mov	r2, r7
   1a910:	e28d1008 	add	r1, sp, #8
   1a914:	e5933010 	ldr	r3, [r3, #16]
   1a918:	e12fff33 	blx	r3
   1a91c:	e2507000 	subs	r7, r0, #0
   1a920:	1a000005 	bne	1a93c <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x7c>
   1a924:	e3a07000 	mov	r7, #0
   1a928:	e28d0008 	add	r0, sp, #8
   1a92c:	ebffeece 	bl	1646c <CUSBRequest::~CUSBRequest()>
   1a930:	e1a00007 	mov	r0, r7
   1a934:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   1a938:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1a93c:	e28d0008 	add	r0, sp, #8
   1a940:	ebffeedc 	bl	164b8 <CUSBRequest::GetResultLength() const>
   1a944:	e3500009 	cmp	r0, #9
   1a948:	9afffff5 	bls	1a924 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x64>
   1a94c:	e5945000 	ldr	r5, [r4]
   1a950:	e3150501 	tst	r5, #4194304	@ 0x400000
   1a954:	1a00001f 	bne	1a9d8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x118>
   1a958:	e7ed5055 	ubfx	r5, r5, #0, #14
   1a95c:	e240300a 	sub	r3, r0, #10
   1a960:	e1530005 	cmp	r3, r5
   1a964:	1a000023 	bne	1a9f8 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x138>
   1a968:	e3530004 	cmp	r3, #4
   1a96c:	9a000027 	bls	1aa10 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x150>
   1a970:	e240500e 	sub	r5, r0, #14
   1a974:	e284100a 	add	r1, r4, #10
   1a978:	e1a00004 	mov	r0, r4
   1a97c:	e1a02005 	mov	r2, r5
   1a980:	eb006bdf 	bl	35904 <memcpy>
   1a984:	e3560000 	cmp	r6, #0
   1a988:	15865000 	strne	r5, [r6]
   1a98c:	1affffe5 	bne	1a928 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x68>
   1a990:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1a994:	e3401003 	movt	r1, #3
   1a998:	e30c0250 	movw	r0, #49744	@ 0xc250
   1a99c:	e3400003 	movt	r0, #3
   1a9a0:	e3a02f79 	mov	r2, #484	@ 0x1e4
   1a9a4:	eb00450c 	bl	2bddc <assertion_failed>
   1a9a8:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1a9ac:	e3401003 	movt	r1, #3
   1a9b0:	e30c01dc 	movw	r0, #49628	@ 0xc1dc
   1a9b4:	e3400003 	movt	r0, #3
   1a9b8:	e3a02d07 	mov	r2, #448	@ 0x1c0
   1a9bc:	eb004506 	bl	2bddc <assertion_failed>
   1a9c0:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1a9c4:	e3401003 	movt	r1, #3
   1a9c8:	e30b0400 	movw	r0, #46080	@ 0xb400
   1a9cc:	e3400003 	movt	r0, #3
   1a9d0:	e30021c1 	movw	r2, #449	@ 0x1c1
   1a9d4:	eb004500 	bl	2bddc <assertion_failed>
   1a9d8:	eb004f7a 	bl	2e7c8 <CLogger::Get()>
   1a9dc:	e59f1044 	ldr	r1, [pc, #68]	@ 1aa28 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x168>
   1a9e0:	e3a02002 	mov	r2, #2
   1a9e4:	e30c31f4 	movw	r3, #49652	@ 0xc1f4
   1a9e8:	e3403003 	movt	r3, #3
   1a9ec:	e58d5000 	str	r5, [sp]
   1a9f0:	eb00513d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1a9f4:	eaffffca 	b	1a924 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)+0x64>
   1a9f8:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1a9fc:	e3401003 	movt	r1, #3
   1aa00:	e30c020c 	movw	r0, #49676	@ 0xc20c
   1aa04:	e3400003 	movt	r0, #3
   1aa08:	e3a02f76 	mov	r2, #472	@ 0x1d8
   1aa0c:	eb0044f2 	bl	2bddc <assertion_failed>
   1aa10:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1aa14:	e3401003 	movt	r1, #3
   1aa18:	e30c023c 	movw	r0, #49724	@ 0xc23c
   1aa1c:	e3400003 	movt	r0, #3
   1aa20:	e30021d9 	movw	r2, #473	@ 0x1d9
   1aa24:	eb0044ec 	bl	2bddc <assertion_failed>
   1aa28:	0003f864 	.word	0x0003f864

0001aa2c <non-virtual thunk to CLAN7800Device::ReceiveFrame(void*, unsigned int*)>:
   1aa2c:	e2400014 	sub	r0, r0, #20
   1aa30:	eaffffa2 	b	1a8c0 <CLAN7800Device::ReceiveFrame(void*, unsigned int*)>

0001aa34 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>:
   1aa34:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1aa38:	e1a05000 	mov	r5, r0
   1aa3c:	e1a06002 	mov	r6, r2
   1aa40:	e24ddd1b 	sub	sp, sp, #1728	@ 0x6c0
   1aa44:	e3a07000 	mov	r7, #0
   1aa48:	e24dd004 	sub	sp, sp, #4
   1aa4c:	e28d4047 	add	r4, sp, #71	@ 0x47
   1aa50:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   1aa54:	e2840008 	add	r0, r4, #8
   1aa58:	eb006ba9 	bl	35904 <memcpy>
   1aa5c:	e595301c 	ldr	r3, [r5, #28]
   1aa60:	e3862501 	orr	r2, r6, #4194304	@ 0x400000
   1aa64:	e5847004 	str	r7, [r4, #4]
   1aa68:	e1530007 	cmp	r3, r7
   1aa6c:	e5842000 	str	r2, [r4]
   1aa70:	0a00000b 	beq	1aaa4 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]+0x70>
   1aa74:	e1a00005 	mov	r0, r5
   1aa78:	ebffd6e9 	bl	10624 <CUSBFunction::GetHost() const>
   1aa7c:	e595101c 	ldr	r1, [r5, #28]
   1aa80:	e2863008 	add	r3, r6, #8
   1aa84:	e1a02004 	mov	r2, r4
   1aa88:	e58d7000 	str	r7, [sp]
   1aa8c:	ebffe44a 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1aa90:	e1e00000 	mvn	r0, r0
   1aa94:	e1a00fa0 	lsr	r0, r0, #31
   1aa98:	e28ddd1b 	add	sp, sp, #1728	@ 0x6c0
   1aa9c:	e28dd004 	add	sp, sp, #4
   1aaa0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1aaa4:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1aaa8:	e3401003 	movt	r1, #3
   1aaac:	e30c0264 	movw	r0, #49764	@ 0xc264
   1aab0:	e3400003 	movt	r0, #3
   1aab4:	e30021ba 	movw	r2, #442	@ 0x1ba
   1aab8:	eb0044c7 	bl	2bddc <assertion_failed>

0001aabc <CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1aabc:	e3520d19 	cmp	r2, #1600	@ 0x640
   1aac0:	8a000002 	bhi	1aad0 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x14>
   1aac4:	e3510000 	cmp	r1, #0
   1aac8:	0a000002 	beq	1aad8 <CLAN7800Device::SendFrame(void const*, unsigned int)+0x1c>
   1aacc:	eaffffd8 	b	1aa34 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   1aad0:	e3a00000 	mov	r0, #0
   1aad4:	e12fff1e 	bx	lr
   1aad8:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1aadc:	e3401003 	movt	r1, #3
   1aae0:	e30b0400 	movw	r0, #46080	@ 0xb400
   1aae4:	e3400003 	movt	r0, #3
   1aae8:	e92d4010 	push	{r4, lr}
   1aaec:	e30021b3 	movw	r2, #435	@ 0x1b3
   1aaf0:	eb0044b9 	bl	2bddc <assertion_failed>

0001aaf4 <non-virtual thunk to CLAN7800Device::GetMACAddress() const>:
   1aaf4:	e280000c 	add	r0, r0, #12
   1aaf8:	e12fff1e 	bx	lr

0001aafc <non-virtual thunk to CLAN7800Device::~CLAN7800Device()>:
   1aafc:	e92d4010 	push	{r4, lr}
   1ab00:	e2404014 	sub	r4, r0, #20
   1ab04:	e1a00004 	mov	r0, r4
   1ab08:	ebffff41 	bl	1a814 <CLAN7800Device::~CLAN7800Device()>
   1ab0c:	e1a00004 	mov	r0, r4
   1ab10:	e3a01028 	mov	r1, #40	@ 0x28
   1ab14:	eb006d9a 	bl	36184 <operator delete(void*, unsigned int)>
   1ab18:	e1a00004 	mov	r0, r4
   1ab1c:	e8bd8010 	pop	{r4, pc}

0001ab20 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)>:
   1ab20:	e3520d19 	cmp	r2, #1600	@ 0x640
   1ab24:	8a000003 	bhi	1ab38 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)+0x18>
   1ab28:	e3510000 	cmp	r1, #0
   1ab2c:	0a000003 	beq	1ab40 <non-virtual thunk to CLAN7800Device::SendFrame(void const*, unsigned int)+0x20>
   1ab30:	e2400014 	sub	r0, r0, #20
   1ab34:	eaffffbe 	b	1aa34 <CLAN7800Device::SendFrame(void const*, unsigned int) [clone .part.0]>
   1ab38:	e3a00000 	mov	r0, #0
   1ab3c:	e12fff1e 	bx	lr
   1ab40:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1ab44:	e3401003 	movt	r1, #3
   1ab48:	e30b0400 	movw	r0, #46080	@ 0xb400
   1ab4c:	e3400003 	movt	r0, #3
   1ab50:	e92d4010 	push	{r4, lr}
   1ab54:	e30021b3 	movw	r2, #435	@ 0x1b3
   1ab58:	eb00449f 	bl	2bddc <assertion_failed>

0001ab5c <CLAN7800Device::CLAN7800Device(CUSBFunction*)>:
   1ab5c:	e92d4010 	push	{r4, lr}
   1ab60:	e1a04000 	mov	r4, r0
   1ab64:	ebffd635 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1ab68:	e30f37ec 	movw	r3, #63468	@ 0xf7ec
   1ab6c:	e3403003 	movt	r3, #3
   1ab70:	e3a02000 	mov	r2, #0
   1ab74:	e2831008 	add	r1, r3, #8
   1ab78:	e2840020 	add	r0, r4, #32
   1ab7c:	e2833050 	add	r3, r3, #80	@ 0x50
   1ab80:	e5841000 	str	r1, [r4]
   1ab84:	e5843014 	str	r3, [r4, #20]
   1ab88:	e5842018 	str	r2, [r4, #24]
   1ab8c:	e584201c 	str	r2, [r4, #28]
   1ab90:	eb006c4b 	bl	35cc4 <CMACAddress::CMACAddress()>
   1ab94:	e1a00004 	mov	r0, r4
   1ab98:	e8bd8010 	pop	{r4, pc}

0001ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>:
   1ab9c:	e92d4070 	push	{r4, r5, r6, lr}
   1aba0:	e1a04001 	mov	r4, r1
   1aba4:	e1a06000 	mov	r6, r0
   1aba8:	e24dd018 	sub	sp, sp, #24
   1abac:	e58d2014 	str	r2, [sp, #20]
   1abb0:	ebffd69b 	bl	10624 <CUSBFunction::GetHost() const>
   1abb4:	e1a05000 	mov	r5, r0
   1abb8:	e1a00006 	mov	r0, r6
   1abbc:	ebffd68d 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1abc0:	e3a02004 	mov	r2, #4
   1abc4:	e1a01000 	mov	r1, r0
   1abc8:	e28d3014 	add	r3, sp, #20
   1abcc:	e1a00005 	mov	r0, r5
   1abd0:	e58d200c 	str	r2, [sp, #12]
   1abd4:	e3a05000 	mov	r5, #0
   1abd8:	e58d3008 	str	r3, [sp, #8]
   1abdc:	e3a02040 	mov	r2, #64	@ 0x40
   1abe0:	e6ff3074 	uxth	r3, r4
   1abe4:	e58d5000 	str	r5, [sp]
   1abe8:	e58d3004 	str	r3, [sp, #4]
   1abec:	e3a030a0 	mov	r3, #160	@ 0xa0
   1abf0:	ebffe38a 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1abf4:	e1500005 	cmp	r0, r5
   1abf8:	a3a00001 	movge	r0, #1
   1abfc:	ba000001 	blt	1ac08 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x6c>
   1ac00:	e28dd018 	add	sp, sp, #24
   1ac04:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ac08:	eb004eee 	bl	2e7c8 <CLogger::Get()>
   1ac0c:	e59f101c 	ldr	r1, [pc, #28]	@ 1ac30 <CLAN7800Device::WriteReg(unsigned int, unsigned int)+0x94>
   1ac10:	e3a02002 	mov	r2, #2
   1ac14:	e58d4000 	str	r4, [sp]
   1ac18:	e30c327c 	movw	r3, #49788	@ 0xc27c
   1ac1c:	e3403003 	movt	r3, #3
   1ac20:	eb0050b1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1ac24:	e1a00005 	mov	r0, r5
   1ac28:	e28dd018 	add	sp, sp, #24
   1ac2c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ac30:	0003f864 	.word	0x0003f864

0001ac34 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>:
   1ac34:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1ac38:	e1a05001 	mov	r5, r1
   1ac3c:	e1a07000 	mov	r7, r0
   1ac40:	e24dd014 	sub	sp, sp, #20
   1ac44:	e1a04002 	mov	r4, r2
   1ac48:	ebffd675 	bl	10624 <CUSBFunction::GetHost() const>
   1ac4c:	e1a06000 	mov	r6, r0
   1ac50:	e1a00007 	mov	r0, r7
   1ac54:	ebffd667 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1ac58:	e3a03004 	mov	r3, #4
   1ac5c:	e1a01000 	mov	r1, r0
   1ac60:	e58d300c 	str	r3, [sp, #12]
   1ac64:	e1a00006 	mov	r0, r6
   1ac68:	e6ff3075 	uxth	r3, r5
   1ac6c:	e3a020c0 	mov	r2, #192	@ 0xc0
   1ac70:	e98d0018 	stmib	sp, {r3, r4}
   1ac74:	e3a04000 	mov	r4, #0
   1ac78:	e3a030a1 	mov	r3, #161	@ 0xa1
   1ac7c:	e58d4000 	str	r4, [sp]
   1ac80:	ebffe366 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1ac84:	e3500004 	cmp	r0, #4
   1ac88:	03a00001 	moveq	r0, #1
   1ac8c:	1a000001 	bne	1ac98 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x64>
   1ac90:	e28dd014 	add	sp, sp, #20
   1ac94:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1ac98:	eb004eca 	bl	2e7c8 <CLogger::Get()>
   1ac9c:	e59f101c 	ldr	r1, [pc, #28]	@ 1acc0 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)+0x8c>
   1aca0:	e3a02002 	mov	r2, #2
   1aca4:	e58d5000 	str	r5, [sp]
   1aca8:	e30c3298 	movw	r3, #49816	@ 0xc298
   1acac:	e3403003 	movt	r3, #3
   1acb0:	eb00508d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1acb4:	e1a00004 	mov	r0, r4
   1acb8:	e28dd014 	add	sp, sp, #20
   1acbc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1acc0:	0003f864 	.word	0x0003f864

0001acc4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>:
   1acc4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1acc8:	e1a07000 	mov	r7, r0
   1accc:	e1a08001 	mov	r8, r1
   1acd0:	e24dd00c 	sub	sp, sp, #12
   1acd4:	e1a09002 	mov	r9, r2
   1acd8:	e1a0a003 	mov	sl, r3
   1acdc:	e59d5030 	ldr	r5, [sp, #48]	@ 0x30
   1ace0:	e59db034 	ldr	fp, [sp, #52]	@ 0x34
   1ace4:	eb0068d3 	bl	35038 <CTimer::Get()>
   1ace8:	e2504000 	subs	r4, r0, #0
   1acec:	0a000019 	beq	1ad58 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x94>
   1acf0:	eb0065fe 	bl	344f0 <CTimer::GetTicks() const>
   1acf4:	e1a06000 	mov	r6, r0
   1acf8:	ea00000e 	b	1ad38 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x74>
   1acfc:	e1a00004 	mov	r0, r4
   1ad00:	eb0065fa 	bl	344f0 <CTimer::GetTicks() const>
   1ad04:	e0400006 	sub	r0, r0, r6
   1ad08:	e150000b 	cmp	r0, fp
   1ad0c:	2a00000e 	bcs	1ad4c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   1ad10:	e28d2004 	add	r2, sp, #4
   1ad14:	e1a01008 	mov	r1, r8
   1ad18:	e1a00007 	mov	r0, r7
   1ad1c:	ebffffc4 	bl	1ac34 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1ad20:	e3500000 	cmp	r0, #0
   1ad24:	0a000008 	beq	1ad4c <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x88>
   1ad28:	e59d3004 	ldr	r3, [sp, #4]
   1ad2c:	e0033009 	and	r3, r3, r9
   1ad30:	e153000a 	cmp	r3, sl
   1ad34:	0a000005 	beq	1ad50 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x8c>
   1ad38:	e3550000 	cmp	r5, #0
   1ad3c:	0affffee 	beq	1acfc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   1ad40:	e1a00005 	mov	r0, r5
   1ad44:	eb006889 	bl	34f70 <CTimer::SimpleusDelay(unsigned int)>
   1ad48:	eaffffeb 	b	1acfc <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)+0x38>
   1ad4c:	e3a00000 	mov	r0, #0
   1ad50:	e28dd00c 	add	sp, sp, #12
   1ad54:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad58:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1ad5c:	e3401003 	movt	r1, #3
   1ad60:	e30c02b4 	movw	r0, #49844	@ 0xc2b4
   1ad64:	e3400003 	movt	r0, #3
   1ad68:	e300228f 	movw	r2, #655	@ 0x28f
   1ad6c:	eb00441a 	bl	2bddc <assertion_failed>

0001ad70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>:
   1ad70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ad74:	e351001f 	cmp	r1, #31
   1ad78:	e24dd008 	sub	sp, sp, #8
   1ad7c:	8a000024 	bhi	1ae14 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0xa4>
   1ad80:	e3a06000 	mov	r6, #0
   1ad84:	e1a04001 	mov	r4, r1
   1ad88:	e1a05002 	mov	r5, r2
   1ad8c:	e3a08064 	mov	r8, #100	@ 0x64
   1ad90:	e1a03006 	mov	r3, r6
   1ad94:	e3a02001 	mov	r2, #1
   1ad98:	e3a01e12 	mov	r1, #288	@ 0x120
   1ad9c:	e58d8004 	str	r8, [sp, #4]
   1ada0:	e58d6000 	str	r6, [sp]
   1ada4:	e1a07000 	mov	r7, r0
   1ada8:	ebffffc5 	bl	1acc4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1adac:	e1500006 	cmp	r0, r6
   1adb0:	1a000002 	bne	1adc0 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x50>
   1adb4:	e3a00000 	mov	r0, #0
   1adb8:	e28dd008 	add	sp, sp, #8
   1adbc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1adc0:	e1a02005 	mov	r2, r5
   1adc4:	e3a01f49 	mov	r1, #292	@ 0x124
   1adc8:	e1a00007 	mov	r0, r7
   1adcc:	ebffff72 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1add0:	e3500000 	cmp	r0, #0
   1add4:	0afffff6 	beq	1adb4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   1add8:	e3002803 	movw	r2, #2051	@ 0x803
   1addc:	e3a01e12 	mov	r1, #288	@ 0x120
   1ade0:	e1822304 	orr	r2, r2, r4, lsl #6
   1ade4:	e1a00007 	mov	r0, r7
   1ade8:	ebffff6b 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1adec:	e3500000 	cmp	r0, #0
   1adf0:	0affffef 	beq	1adb4 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)+0x44>
   1adf4:	e1a03006 	mov	r3, r6
   1adf8:	e3a02001 	mov	r2, #1
   1adfc:	e1a00007 	mov	r0, r7
   1ae00:	e3a01e12 	mov	r1, #288	@ 0x120
   1ae04:	e88d0140 	stm	sp, {r6, r8}
   1ae08:	ebffffad 	bl	1acc4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1ae0c:	e28dd008 	add	sp, sp, #8
   1ae10:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae14:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1ae18:	e3401003 	movt	r1, #3
   1ae1c:	e30c02c0 	movw	r0, #49856	@ 0xc2c0
   1ae20:	e3400003 	movt	r0, #3
   1ae24:	e300225a 	movw	r2, #602	@ 0x25a
   1ae28:	eb0043eb 	bl	2bddc <assertion_failed>

0001ae2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>:
   1ae2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1ae30:	e351001f 	cmp	r1, #31
   1ae34:	e24dd010 	sub	sp, sp, #16
   1ae38:	8a00002e 	bhi	1aef8 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0xcc>
   1ae3c:	e3a05000 	mov	r5, #0
   1ae40:	e1a04001 	mov	r4, r1
   1ae44:	e1a08002 	mov	r8, r2
   1ae48:	e3a06064 	mov	r6, #100	@ 0x64
   1ae4c:	e1a03005 	mov	r3, r5
   1ae50:	e3a02001 	mov	r2, #1
   1ae54:	e3a01e12 	mov	r1, #288	@ 0x120
   1ae58:	e58d6004 	str	r6, [sp, #4]
   1ae5c:	e58d5000 	str	r5, [sp]
   1ae60:	e1a07000 	mov	r7, r0
   1ae64:	ebffff96 	bl	1acc4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1ae68:	e1500005 	cmp	r0, r5
   1ae6c:	1a000002 	bne	1ae7c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x50>
   1ae70:	e3a00000 	mov	r0, #0
   1ae74:	e28dd010 	add	sp, sp, #16
   1ae78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1ae7c:	e3002801 	movw	r2, #2049	@ 0x801
   1ae80:	e3a01e12 	mov	r1, #288	@ 0x120
   1ae84:	e1822304 	orr	r2, r2, r4, lsl #6
   1ae88:	e1a00007 	mov	r0, r7
   1ae8c:	ebffff42 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1ae90:	e3500000 	cmp	r0, #0
   1ae94:	0afffff5 	beq	1ae70 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   1ae98:	e1a03005 	mov	r3, r5
   1ae9c:	e3a02001 	mov	r2, #1
   1aea0:	e3a01e12 	mov	r1, #288	@ 0x120
   1aea4:	e1a00007 	mov	r0, r7
   1aea8:	e88d0060 	stm	sp, {r5, r6}
   1aeac:	ebffff84 	bl	1acc4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1aeb0:	e3500000 	cmp	r0, #0
   1aeb4:	0affffed 	beq	1ae70 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   1aeb8:	e28d200c 	add	r2, sp, #12
   1aebc:	e3a01f49 	mov	r1, #292	@ 0x124
   1aec0:	e1a00007 	mov	r0, r7
   1aec4:	ebffff5a 	bl	1ac34 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1aec8:	e3500000 	cmp	r0, #0
   1aecc:	0affffe7 	beq	1ae70 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x44>
   1aed0:	e3580000 	cmp	r8, #0
   1aed4:	159d300c 	ldrne	r3, [sp, #12]
   1aed8:	11c830b0 	strhne	r3, [r8]
   1aedc:	1affffe4 	bne	1ae74 <CLAN7800Device::PHYRead(unsigned char, unsigned short*)+0x48>
   1aee0:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1aee4:	e3401003 	movt	r1, #3
   1aee8:	e30c02d0 	movw	r0, #49872	@ 0xc2d0
   1aeec:	e3400003 	movt	r0, #3
   1aef0:	e3002285 	movw	r2, #645	@ 0x285
   1aef4:	eb0043b8 	bl	2bddc <assertion_failed>
   1aef8:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1aefc:	e3401003 	movt	r1, #3
   1af00:	e30c02c0 	movw	r0, #49856	@ 0xc2c0
   1af04:	e3400003 	movt	r0, #3
   1af08:	e3002271 	movw	r2, #625	@ 0x271
   1af0c:	eb0043b2 	bl	2bddc <assertion_failed>

0001af10 <CLAN7800Device::IsLinkUp()>:
   1af10:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1af14:	e3a01001 	mov	r1, #1
   1af18:	e24dd00c 	sub	sp, sp, #12
   1af1c:	e28d2006 	add	r2, sp, #6
   1af20:	ebffffc1 	bl	1ae2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1af24:	e3500000 	cmp	r0, #0
   1af28:	11dd00b6 	ldrhne	r0, [sp, #6]
   1af2c:	17e00150 	ubfxne	r0, r0, #2, #1
   1af30:	e28dd00c 	add	sp, sp, #12
   1af34:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0001af38 <CLAN7800Device::GetLinkSpeed()>:
   1af38:	e92d4010 	push	{r4, lr}
   1af3c:	e3a02000 	mov	r2, #0
   1af40:	e3a0101f 	mov	r1, #31
   1af44:	e24dd008 	sub	sp, sp, #8
   1af48:	e1a04000 	mov	r4, r0
   1af4c:	ebffff87 	bl	1ad70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   1af50:	e3500000 	cmp	r0, #0
   1af54:	0a000028 	beq	1affc <CLAN7800Device::GetLinkSpeed()+0xc4>
   1af58:	e28d2006 	add	r2, sp, #6
   1af5c:	e3a0101c 	mov	r1, #28
   1af60:	e1a00004 	mov	r0, r4
   1af64:	ebffffb0 	bl	1ae2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1af68:	e3500000 	cmp	r0, #0
   1af6c:	0a000022 	beq	1affc <CLAN7800Device::GetLinkSpeed()+0xc4>
   1af70:	e1dd30b6 	ldrh	r3, [sp, #6]
   1af74:	e3130901 	tst	r3, #16384	@ 0x4000
   1af78:	1a00000c 	bne	1afb0 <CLAN7800Device::GetLinkSpeed()+0x78>
   1af7c:	e3130902 	tst	r3, #32768	@ 0x8000
   1af80:	0a00001d 	beq	1affc <CLAN7800Device::GetLinkSpeed()+0xc4>
   1af84:	e7e231d3 	ubfx	r3, r3, #3, #3
   1af88:	e3530006 	cmp	r3, #6
   1af8c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1af90:	ea000019 	b	1affc <CLAN7800Device::GetLinkSpeed()+0xc4>
   1af94:	0001afd4 	.word	0x0001afd4
   1af98:	0001afc8 	.word	0x0001afc8
   1af9c:	0001afdc 	.word	0x0001afdc
   1afa0:	0001affc 	.word	0x0001affc
   1afa4:	0001afec 	.word	0x0001afec
   1afa8:	0001aff4 	.word	0x0001aff4
   1afac:	0001afe4 	.word	0x0001afe4
   1afb0:	e30c11d0 	movw	r1, #49616	@ 0xc1d0
   1afb4:	e3401003 	movt	r1, #3
   1afb8:	e30c02dc 	movw	r0, #49884	@ 0xc2dc
   1afbc:	e3400003 	movt	r0, #3
   1afc0:	e3a02f81 	mov	r2, #516	@ 0x204
   1afc4:	eb004384 	bl	2bddc <assertion_failed>
   1afc8:	e3a00002 	mov	r0, #2
   1afcc:	e28dd008 	add	sp, sp, #8
   1afd0:	e8bd8010 	pop	{r4, pc}
   1afd4:	e3a00000 	mov	r0, #0
   1afd8:	eafffffb 	b	1afcc <CLAN7800Device::GetLinkSpeed()+0x94>
   1afdc:	e3a00004 	mov	r0, #4
   1afe0:	eafffff9 	b	1afcc <CLAN7800Device::GetLinkSpeed()+0x94>
   1afe4:	e3a00005 	mov	r0, #5
   1afe8:	eafffff7 	b	1afcc <CLAN7800Device::GetLinkSpeed()+0x94>
   1afec:	e3a00001 	mov	r0, #1
   1aff0:	eafffff5 	b	1afcc <CLAN7800Device::GetLinkSpeed()+0x94>
   1aff4:	e3a00003 	mov	r0, #3
   1aff8:	eafffff3 	b	1afcc <CLAN7800Device::GetLinkSpeed()+0x94>
   1affc:	e3a00006 	mov	r0, #6
   1b000:	eafffff1 	b	1afcc <CLAN7800Device::GetLinkSpeed()+0x94>

0001b004 <non-virtual thunk to CLAN7800Device::GetLinkSpeed()>:
   1b004:	e2400014 	sub	r0, r0, #20
   1b008:	eaffffca 	b	1af38 <CLAN7800Device::GetLinkSpeed()>

0001b00c <CLAN7800Device::InitPHY()>:
   1b00c:	e92d4010 	push	{r4, lr}
   1b010:	e3a02000 	mov	r2, #0
   1b014:	e3a0101f 	mov	r1, #31
   1b018:	e24dd008 	sub	sp, sp, #8
   1b01c:	e1a04000 	mov	r4, r0
   1b020:	ebffff52 	bl	1ad70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>
   1b024:	e3500000 	cmp	r0, #0
   1b028:	1a000002 	bne	1b038 <CLAN7800Device::InitPHY()+0x2c>
   1b02c:	e3a00000 	mov	r0, #0
   1b030:	e28dd008 	add	sp, sp, #8
   1b034:	e8bd8010 	pop	{r4, pc}
   1b038:	e28d2006 	add	r2, sp, #6
   1b03c:	e3a0101d 	mov	r1, #29
   1b040:	e1a00004 	mov	r0, r4
   1b044:	ebffff78 	bl	1ae2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1b048:	e3500000 	cmp	r0, #0
   1b04c:	0afffff6 	beq	1b02c <CLAN7800Device::InitPHY()+0x20>
   1b050:	e1dd20b6 	ldrh	r2, [sp, #6]
   1b054:	e3a0101d 	mov	r1, #29
   1b058:	e1a00004 	mov	r0, r4
   1b05c:	e3c220ff 	bic	r2, r2, #255	@ 0xff
   1b060:	e3822061 	orr	r2, r2, #97	@ 0x61
   1b064:	e28dd008 	add	sp, sp, #8
   1b068:	e8bd4010 	pop	{r4, lr}
   1b06c:	eaffff3f 	b	1ad70 <CLAN7800Device::PHYWrite(unsigned char, unsigned short)>

0001b070 <non-virtual thunk to CLAN7800Device::IsLinkUp()>:
   1b070:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1b074:	e3a01001 	mov	r1, #1
   1b078:	e2400014 	sub	r0, r0, #20
   1b07c:	e24dd00c 	sub	sp, sp, #12
   1b080:	e28d2006 	add	r2, sp, #6
   1b084:	ebffff68 	bl	1ae2c <CLAN7800Device::PHYRead(unsigned char, unsigned short*)>
   1b088:	e3500000 	cmp	r0, #0
   1b08c:	11dd00b6 	ldrhne	r0, [sp, #6]
   1b090:	17e00150 	ubfxne	r0, r0, #2, #1
   1b094:	e28dd00c 	add	sp, sp, #12
   1b098:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0001b09c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>:
   1b09c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b0a0:	e1a05002 	mov	r5, r2
   1b0a4:	e1a06000 	mov	r6, r0
   1b0a8:	e24dd00c 	sub	sp, sp, #12
   1b0ac:	e1a04003 	mov	r4, r3
   1b0b0:	e28d2004 	add	r2, sp, #4
   1b0b4:	e1a07001 	mov	r7, r1
   1b0b8:	ebfffedd 	bl	1ac34 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b0bc:	e3500000 	cmp	r0, #0
   1b0c0:	0a000006 	beq	1b0e0 <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)+0x44>
   1b0c4:	e59d3004 	ldr	r3, [sp, #4]
   1b0c8:	e1a01007 	mov	r1, r7
   1b0cc:	e1a00006 	mov	r0, r6
   1b0d0:	e0033004 	and	r3, r3, r4
   1b0d4:	e1832005 	orr	r2, r3, r5
   1b0d8:	e58d2004 	str	r2, [sp, #4]
   1b0dc:	ebfffeae 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b0e0:	e28dd00c 	add	sp, sp, #12
   1b0e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001b0e8 <CLAN7800Device::InitMACAddress()>:
   1b0e8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b0ec:	e3a01000 	mov	r1, #0
   1b0f0:	e1a04000 	mov	r4, r0
   1b0f4:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   1b0f8:	e28d000c 	add	r0, sp, #12
   1b0fc:	eb004357 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1b100:	e3a01000 	mov	r1, #0
   1b104:	e3a03014 	mov	r3, #20
   1b108:	e58d1000 	str	r1, [sp]
   1b10c:	e28d2024 	add	r2, sp, #36	@ 0x24
   1b110:	e3a01003 	mov	r1, #3
   1b114:	e3401001 	movt	r1, #1
   1b118:	e28d000c 	add	r0, sp, #12
   1b11c:	eb0043a1 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1b120:	e3500000 	cmp	r0, #0
   1b124:	1a000005 	bne	1b140 <CLAN7800Device::InitMACAddress()+0x58>
   1b128:	e3a04000 	mov	r4, #0
   1b12c:	e28d000c 	add	r0, sp, #12
   1b130:	eb004351 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   1b134:	e1a00004 	mov	r0, r4
   1b138:	e28dd03c 	add	sp, sp, #60	@ 0x3c
   1b13c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b140:	e2846020 	add	r6, r4, #32
   1b144:	e28d1030 	add	r1, sp, #48	@ 0x30
   1b148:	e1a00006 	mov	r0, r6
   1b14c:	eb006b25 	bl	35de8 <CMACAddress::Set(unsigned char const*)>
   1b150:	e59d5030 	ldr	r5, [sp, #48]	@ 0x30
   1b154:	e3a01f47 	mov	r1, #284	@ 0x11c
   1b158:	e1a00004 	mov	r0, r4
   1b15c:	e1a02005 	mov	r2, r5
   1b160:	e1dd73b4 	ldrh	r7, [sp, #52]	@ 0x34
   1b164:	ebfffe8c 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b168:	e3500000 	cmp	r0, #0
   1b16c:	0affffed 	beq	1b128 <CLAN7800Device::InitMACAddress()+0x40>
   1b170:	e1a02007 	mov	r2, r7
   1b174:	e3a01f46 	mov	r1, #280	@ 0x118
   1b178:	e1a00004 	mov	r0, r4
   1b17c:	ebfffe86 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b180:	e3500000 	cmp	r0, #0
   1b184:	0affffe7 	beq	1b128 <CLAN7800Device::InitMACAddress()+0x40>
   1b188:	e1a02005 	mov	r2, r5
   1b18c:	e1a00004 	mov	r0, r4
   1b190:	e3001404 	movw	r1, #1028	@ 0x404
   1b194:	ebfffe80 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b198:	e3500000 	cmp	r0, #0
   1b19c:	0affffe1 	beq	1b128 <CLAN7800Device::InitMACAddress()+0x40>
   1b1a0:	e1a00004 	mov	r0, r4
   1b1a4:	e3872102 	orr	r2, r7, #-2147483648	@ 0x80000000
   1b1a8:	e3a01b01 	mov	r1, #1024	@ 0x400
   1b1ac:	ebfffe7a 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b1b0:	e2504000 	subs	r4, r0, #0
   1b1b4:	0affffdb 	beq	1b128 <CLAN7800Device::InitMACAddress()+0x40>
   1b1b8:	e28d0014 	add	r0, sp, #20
   1b1bc:	eb005e20 	bl	32a44 <CString::CString()>
   1b1c0:	e28d1014 	add	r1, sp, #20
   1b1c4:	e1a00006 	mov	r0, r6
   1b1c8:	eb006b59 	bl	35f34 <CMACAddress::Format(CString*) const>
   1b1cc:	eb004d7d 	bl	2e7c8 <CLogger::Get()>
   1b1d0:	e1a05000 	mov	r5, r0
   1b1d4:	e28d0014 	add	r0, sp, #20
   1b1d8:	eb005e51 	bl	32b24 <CString::operator char const*() const>
   1b1dc:	e59f1024 	ldr	r1, [pc, #36]	@ 1b208 <CLAN7800Device::InitMACAddress()+0x120>
   1b1e0:	e1a03000 	mov	r3, r0
   1b1e4:	e3a02004 	mov	r2, #4
   1b1e8:	e1a00005 	mov	r0, r5
   1b1ec:	e58d3000 	str	r3, [sp]
   1b1f0:	e30c3304 	movw	r3, #49924	@ 0xc304
   1b1f4:	e3403003 	movt	r3, #3
   1b1f8:	eb004f3b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b1fc:	e28d0014 	add	r0, sp, #20
   1b200:	eb005ddc 	bl	32978 <CString::~CString()>
   1b204:	eaffffc8 	b	1b12c <CLAN7800Device::InitMACAddress()+0x44>
   1b208:	0003f864 	.word	0x0003f864

0001b20c <CLAN7800Device::Configure()>:
   1b20c:	e92d4070 	push	{r4, r5, r6, lr}
   1b210:	e1a05000 	mov	r5, r0
   1b214:	e24dd010 	sub	sp, sp, #16
   1b218:	ebffd4e0 	bl	105a0 <CUSBFunction::GetNumEndpoints() const>
   1b21c:	e3500003 	cmp	r0, #3
   1b220:	0a000004 	beq	1b238 <CLAN7800Device::Configure()+0x2c>
   1b224:	ea000024 	b	1b2bc <CLAN7800Device::Configure()+0xb0>
   1b228:	e5d42003 	ldrb	r2, [r4, #3]
   1b22c:	e202203f 	and	r2, r2, #63	@ 0x3f
   1b230:	e3520002 	cmp	r2, #2
   1b234:	0a000027 	beq	1b2d8 <CLAN7800Device::Configure()+0xcc>
   1b238:	e3a01005 	mov	r1, #5
   1b23c:	e1a00005 	mov	r0, r5
   1b240:	ebffd502 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   1b244:	e2504000 	subs	r4, r0, #0
   1b248:	1afffff6 	bne	1b228 <CLAN7800Device::Configure()+0x1c>
   1b24c:	e5953018 	ldr	r3, [r5, #24]
   1b250:	e3530000 	cmp	r3, #0
   1b254:	0a000018 	beq	1b2bc <CLAN7800Device::Configure()+0xb0>
   1b258:	e595301c 	ldr	r3, [r5, #28]
   1b25c:	e3530000 	cmp	r3, #0
   1b260:	0a000015 	beq	1b2bc <CLAN7800Device::Configure()+0xb0>
   1b264:	e1a00005 	mov	r0, r5
   1b268:	ebffd405 	bl	10284 <CUSBFunction::Configure()>
   1b26c:	e3500000 	cmp	r0, #0
   1b270:	0a000043 	beq	1b384 <CLAN7800Device::Configure()+0x178>
   1b274:	e28d2008 	add	r2, sp, #8
   1b278:	e1a01004 	mov	r1, r4
   1b27c:	e1a00005 	mov	r0, r5
   1b280:	ebfffe6b 	bl	1ac34 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b284:	e3500000 	cmp	r0, #0
   1b288:	0a000002 	beq	1b298 <CLAN7800Device::Configure()+0x8c>
   1b28c:	e1dd30ba 	ldrh	r3, [sp, #10]
   1b290:	e3530b1e 	cmp	r3, #30720	@ 0x7800
   1b294:	0a00002d 	beq	1b350 <CLAN7800Device::Configure()+0x144>
   1b298:	eb004d4a 	bl	2e7c8 <CLogger::Get()>
   1b29c:	e1ddc0ba 	ldrh	ip, [sp, #10]
   1b2a0:	e59f13f4 	ldr	r1, [pc, #1012]	@ 1b69c <CLAN7800Device::Configure()+0x490>
   1b2a4:	e3a02001 	mov	r2, #1
   1b2a8:	e30c3318 	movw	r3, #49944	@ 0xc318
   1b2ac:	e3403003 	movt	r3, #3
   1b2b0:	e58dc000 	str	ip, [sp]
   1b2b4:	eb004f0c 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b2b8:	ea000002 	b	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b2bc:	e59f13d8 	ldr	r1, [pc, #984]	@ 1b69c <CLAN7800Device::Configure()+0x490>
   1b2c0:	e1a00005 	mov	r0, r5
   1b2c4:	ebffd4ec 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   1b2c8:	e3a04000 	mov	r4, #0
   1b2cc:	e1a00004 	mov	r0, r4
   1b2d0:	e28dd010 	add	sp, sp, #16
   1b2d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b2d8:	e1d430d2 	ldrsb	r3, [r4, #2]
   1b2dc:	e3a00014 	mov	r0, #20
   1b2e0:	e3530000 	cmp	r3, #0
   1b2e4:	ba00000c 	blt	1b31c <CLAN7800Device::Configure()+0x110>
   1b2e8:	e595301c 	ldr	r3, [r5, #28]
   1b2ec:	e3530000 	cmp	r3, #0
   1b2f0:	1afffff1 	bne	1b2bc <CLAN7800Device::Configure()+0xb0>
   1b2f4:	eb006b8a 	bl	36124 <operator new(unsigned int)>
   1b2f8:	e1a06000 	mov	r6, r0
   1b2fc:	e1a00005 	mov	r0, r5
   1b300:	ebffd4b2 	bl	105d0 <CUSBFunction::GetDevice() const>
   1b304:	e1a02004 	mov	r2, r4
   1b308:	e1a01000 	mov	r1, r0
   1b30c:	e1a00006 	mov	r0, r6
   1b310:	ebffd2bc 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1b314:	e585601c 	str	r6, [r5, #28]
   1b318:	eaffffc6 	b	1b238 <CLAN7800Device::Configure()+0x2c>
   1b31c:	e5953018 	ldr	r3, [r5, #24]
   1b320:	e3530000 	cmp	r3, #0
   1b324:	1affffe4 	bne	1b2bc <CLAN7800Device::Configure()+0xb0>
   1b328:	eb006b7d 	bl	36124 <operator new(unsigned int)>
   1b32c:	e1a06000 	mov	r6, r0
   1b330:	e1a00005 	mov	r0, r5
   1b334:	ebffd4a5 	bl	105d0 <CUSBFunction::GetDevice() const>
   1b338:	e1a02004 	mov	r2, r4
   1b33c:	e1a01000 	mov	r1, r0
   1b340:	e1a00006 	mov	r0, r6
   1b344:	ebffd2af 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1b348:	e5856018 	str	r6, [r5, #24]
   1b34c:	eaffffb9 	b	1b238 <CLAN7800Device::Configure()+0x2c>
   1b350:	e3a01010 	mov	r1, #16
   1b354:	e28d200c 	add	r2, sp, #12
   1b358:	e1a00005 	mov	r0, r5
   1b35c:	ebfffe34 	bl	1ac34 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b360:	e3500000 	cmp	r0, #0
   1b364:	1a00000d 	bne	1b3a0 <CLAN7800Device::Configure()+0x194>
   1b368:	eb004d16 	bl	2e7c8 <CLogger::Get()>
   1b36c:	e59f1328 	ldr	r1, [pc, #808]	@ 1b69c <CLAN7800Device::Configure()+0x490>
   1b370:	e3a02001 	mov	r2, #1
   1b374:	e30c3330 	movw	r3, #49968	@ 0xc330
   1b378:	e3403003 	movt	r3, #3
   1b37c:	eb004eda 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b380:	eaffffd0 	b	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b384:	eb004d0f 	bl	2e7c8 <CLogger::Get()>
   1b388:	e59f130c 	ldr	r1, [pc, #780]	@ 1b69c <CLAN7800Device::Configure()+0x490>
   1b38c:	e3a02001 	mov	r2, #1
   1b390:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   1b394:	e3403003 	movt	r3, #3
   1b398:	eb004ed3 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b39c:	eaffffc9 	b	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b3a0:	e59d200c 	ldr	r2, [sp, #12]
   1b3a4:	e3a01010 	mov	r1, #16
   1b3a8:	e1a00005 	mov	r0, r5
   1b3ac:	e3822002 	orr	r2, r2, #2
   1b3b0:	e58d200c 	str	r2, [sp, #12]
   1b3b4:	ebfffdf8 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b3b8:	e3500000 	cmp	r0, #0
   1b3bc:	0affffe9 	beq	1b368 <CLAN7800Device::Configure()+0x15c>
   1b3c0:	e3a01064 	mov	r1, #100	@ 0x64
   1b3c4:	e3a02ffa 	mov	r2, #1000	@ 0x3e8
   1b3c8:	e58d1004 	str	r1, [sp, #4]
   1b3cc:	e1a03004 	mov	r3, r4
   1b3d0:	e58d2000 	str	r2, [sp]
   1b3d4:	e3a01010 	mov	r1, #16
   1b3d8:	e3a02002 	mov	r2, #2
   1b3dc:	e1a00005 	mov	r0, r5
   1b3e0:	ebfffe37 	bl	1acc4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1b3e4:	e3500000 	cmp	r0, #0
   1b3e8:	0affffde 	beq	1b368 <CLAN7800Device::Configure()+0x15c>
   1b3ec:	e1a00005 	mov	r0, r5
   1b3f0:	ebffff3c 	bl	1b0e8 <CLAN7800Device::InitMACAddress()>
   1b3f4:	e3500000 	cmp	r0, #0
   1b3f8:	0a000092 	beq	1b648 <CLAN7800Device::Configure()+0x43c>
   1b3fc:	e3a02018 	mov	r2, #24
   1b400:	e3a01090 	mov	r1, #144	@ 0x90
   1b404:	e1a00005 	mov	r0, r5
   1b408:	ebfffde3 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b40c:	e3500000 	cmp	r0, #0
   1b410:	0affffac 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b414:	e3a02b02 	mov	r2, #2048	@ 0x800
   1b418:	e3a01094 	mov	r1, #148	@ 0x94
   1b41c:	e1a00005 	mov	r0, r5
   1b420:	ebfffddd 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b424:	e3500000 	cmp	r0, #0
   1b428:	0affffa6 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b42c:	e28d200c 	add	r2, sp, #12
   1b430:	e3a01010 	mov	r1, #16
   1b434:	e1a00005 	mov	r0, r5
   1b438:	ebfffdfd 	bl	1ac34 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b43c:	e3500000 	cmp	r0, #0
   1b440:	0affffa0 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b444:	e59d200c 	ldr	r2, [sp, #12]
   1b448:	e3a01010 	mov	r1, #16
   1b44c:	e1a00005 	mov	r0, r5
   1b450:	e3c22010 	bic	r2, r2, #16
   1b454:	e3822603 	orr	r2, r2, #3145728	@ 0x300000
   1b458:	e58d200c 	str	r2, [sp, #12]
   1b45c:	ebfffdce 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b460:	e3500000 	cmp	r0, #0
   1b464:	0affff97 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b468:	e28d200c 	add	r2, sp, #12
   1b46c:	e3a01080 	mov	r1, #128	@ 0x80
   1b470:	e1a00005 	mov	r0, r5
   1b474:	ebfffdee 	bl	1ac34 <CLAN7800Device::ReadReg(unsigned int, unsigned int*)>
   1b478:	e3500000 	cmp	r0, #0
   1b47c:	0affff91 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b480:	e59d200c 	ldr	r2, [sp, #12]
   1b484:	e3a01080 	mov	r1, #128	@ 0x80
   1b488:	e1a00005 	mov	r0, r5
   1b48c:	e3c22040 	bic	r2, r2, #64	@ 0x40
   1b490:	e3822020 	orr	r2, r2, #32
   1b494:	e58d200c 	str	r2, [sp, #12]
   1b498:	ebfffdbf 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b49c:	e3500000 	cmp	r0, #0
   1b4a0:	0affff88 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b4a4:	e3a02017 	mov	r2, #23
   1b4a8:	e3a010c8 	mov	r1, #200	@ 0xc8
   1b4ac:	e1a00005 	mov	r0, r5
   1b4b0:	ebfffdb9 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b4b4:	e3500000 	cmp	r0, #0
   1b4b8:	0affff82 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b4bc:	e3a02017 	mov	r2, #23
   1b4c0:	e3a010cc 	mov	r1, #204	@ 0xcc
   1b4c4:	e1a00005 	mov	r0, r5
   1b4c8:	ebfffdb3 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b4cc:	e3500000 	cmp	r0, #0
   1b4d0:	0affff7c 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b4d4:	e3a02000 	mov	r2, #0
   1b4d8:	e3a01098 	mov	r1, #152	@ 0x98
   1b4dc:	e1a00005 	mov	r0, r5
   1b4e0:	ebfffdad 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b4e4:	e3500000 	cmp	r0, #0
   1b4e8:	0affff76 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b4ec:	e3a0100c 	mov	r1, #12
   1b4f0:	e1a00005 	mov	r0, r5
   1b4f4:	e3e02000 	mvn	r2, #0
   1b4f8:	ebfffda7 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b4fc:	e3500000 	cmp	r0, #0
   1b500:	0affff70 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b504:	e3a02000 	mov	r2, #0
   1b508:	e3a01f43 	mov	r1, #268	@ 0x10c
   1b50c:	e1a00005 	mov	r0, r5
   1b510:	ebfffda1 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b514:	e3500000 	cmp	r0, #0
   1b518:	0affff6a 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b51c:	e3a02000 	mov	r2, #0
   1b520:	e3a010d0 	mov	r1, #208	@ 0xd0
   1b524:	e1a00005 	mov	r0, r5
   1b528:	ebfffd9b 	bl	1ab9c <CLAN7800Device::WriteReg(unsigned int, unsigned int)>
   1b52c:	e3500000 	cmp	r0, #0
   1b530:	0affff64 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b534:	e3a010b0 	mov	r1, #176	@ 0xb0
   1b538:	e1a00005 	mov	r0, r5
   1b53c:	e3e03000 	mvn	r3, #0
   1b540:	e3002402 	movw	r2, #1026	@ 0x402
   1b544:	ebfffed4 	bl	1b09c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b548:	e3500000 	cmp	r0, #0
   1b54c:	0affff5d 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b550:	e3a02010 	mov	r2, #16
   1b554:	e3a01014 	mov	r1, #20
   1b558:	e1a00005 	mov	r0, r5
   1b55c:	e3e03000 	mvn	r3, #0
   1b560:	ebfffecd 	bl	1b09c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b564:	e3500000 	cmp	r0, #0
   1b568:	0a000044 	beq	1b680 <CLAN7800Device::Configure()+0x474>
   1b56c:	e3a00064 	mov	r0, #100	@ 0x64
   1b570:	e3a01ffa 	mov	r1, #1000	@ 0x3e8
   1b574:	e58d0004 	str	r0, [sp, #4]
   1b578:	e3a03080 	mov	r3, #128	@ 0x80
   1b57c:	e58d1000 	str	r1, [sp]
   1b580:	e3a02090 	mov	r2, #144	@ 0x90
   1b584:	e3a01014 	mov	r1, #20
   1b588:	e1a00005 	mov	r0, r5
   1b58c:	ebfffdcc 	bl	1acc4 <CLAN7800Device::WaitReg(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)>
   1b590:	e3500000 	cmp	r0, #0
   1b594:	0a000039 	beq	1b680 <CLAN7800Device::Configure()+0x474>
   1b598:	e3a02b06 	mov	r2, #6144	@ 0x1800
   1b59c:	e3a01c01 	mov	r1, #256	@ 0x100
   1b5a0:	e1a00005 	mov	r0, r5
   1b5a4:	e3e03000 	mvn	r3, #0
   1b5a8:	ebfffebb 	bl	1b09c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b5ac:	e3500000 	cmp	r0, #0
   1b5b0:	0affff44 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b5b4:	e3a02001 	mov	r2, #1
   1b5b8:	e3a01f42 	mov	r1, #264	@ 0x108
   1b5bc:	e1a00005 	mov	r0, r5
   1b5c0:	e3e03000 	mvn	r3, #0
   1b5c4:	ebfffeb4 	bl	1b09c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b5c8:	e3500000 	cmp	r0, #0
   1b5cc:	0affff3d 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b5d0:	e3a02102 	mov	r2, #-2147483648	@ 0x80000000
   1b5d4:	e3a010c4 	mov	r1, #196	@ 0xc4
   1b5d8:	e1a00005 	mov	r0, r5
   1b5dc:	e3e03000 	mvn	r3, #0
   1b5e0:	ebfffead 	bl	1b09c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b5e4:	e3500000 	cmp	r0, #0
   1b5e8:	0affff36 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b5ec:	e3a02001 	mov	r2, #1
   1b5f0:	e34025ee 	movt	r2, #1518	@ 0x5ee
   1b5f4:	e3a01f41 	mov	r1, #260	@ 0x104
   1b5f8:	e1a00005 	mov	r0, r5
   1b5fc:	e30f3fff 	movw	r3, #65535	@ 0xffff
   1b600:	e34c3000 	movt	r3, #49152	@ 0xc000
   1b604:	ebfffea4 	bl	1b09c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b608:	e3500000 	cmp	r0, #0
   1b60c:	0affff2d 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b610:	e3a02102 	mov	r2, #-2147483648	@ 0x80000000
   1b614:	e3a010c0 	mov	r1, #192	@ 0xc0
   1b618:	e1a00005 	mov	r0, r5
   1b61c:	e3e03000 	mvn	r3, #0
   1b620:	ebfffe9d 	bl	1b09c <CLAN7800Device::ReadWriteReg(unsigned int, unsigned int, unsigned int)>
   1b624:	e3500000 	cmp	r0, #0
   1b628:	0affff26 	beq	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b62c:	e1a00005 	mov	r0, r5
   1b630:	ebfffe75 	bl	1b00c <CLAN7800Device::InitPHY()>
   1b634:	e2504000 	subs	r4, r0, #0
   1b638:	0a000009 	beq	1b664 <CLAN7800Device::Configure()+0x458>
   1b63c:	e2850014 	add	r0, r5, #20
   1b640:	eb006a5e 	bl	35fc0 <CNetDevice::AddNetDevice()>
   1b644:	eaffff20 	b	1b2cc <CLAN7800Device::Configure()+0xc0>
   1b648:	eb004c5e 	bl	2e7c8 <CLogger::Get()>
   1b64c:	e59f1048 	ldr	r1, [pc, #72]	@ 1b69c <CLAN7800Device::Configure()+0x490>
   1b650:	e3a02001 	mov	r2, #1
   1b654:	e30c3340 	movw	r3, #49984	@ 0xc340
   1b658:	e3403003 	movt	r3, #3
   1b65c:	eb004e22 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b660:	eaffff18 	b	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b664:	eb004c57 	bl	2e7c8 <CLogger::Get()>
   1b668:	e59f102c 	ldr	r1, [pc, #44]	@ 1b69c <CLAN7800Device::Configure()+0x490>
   1b66c:	e3a02001 	mov	r2, #1
   1b670:	e30c336c 	movw	r3, #50028	@ 0xc36c
   1b674:	e3403003 	movt	r3, #3
   1b678:	eb004e1b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b67c:	eaffff11 	b	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b680:	eb004c50 	bl	2e7c8 <CLogger::Get()>
   1b684:	e59f1010 	ldr	r1, [pc, #16]	@ 1b69c <CLAN7800Device::Configure()+0x490>
   1b688:	e3a02001 	mov	r2, #1
   1b68c:	e30c3358 	movw	r3, #50008	@ 0xc358
   1b690:	e3403003 	movt	r3, #3
   1b694:	eb004e14 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b698:	eaffff0a 	b	1b2c8 <CLAN7800Device::Configure()+0xbc>
   1b69c:	0003f864 	.word	0x0003f864

0001b6a0 <CNetDevice::GetType()>:
   1b6a0:	e3a00000 	mov	r0, #0
   1b6a4:	e12fff1e 	bx	lr

0001b6a8 <CNetDevice::IsSendFrameAdvisable()>:
   1b6a8:	e3a00001 	mov	r0, #1
   1b6ac:	e12fff1e 	bx	lr

0001b6b0 <CNetDevice::UpdatePHY()>:
   1b6b0:	e3a00000 	mov	r0, #0
   1b6b4:	e12fff1e 	bx	lr

0001b6b8 <CSMSC951xDevice::GetMACAddress() const>:
   1b6b8:	e2800020 	add	r0, r0, #32
   1b6bc:	e12fff1e 	bx	lr

0001b6c0 <CSMSC951xDevice::~CSMSC951xDevice()>:
   1b6c0:	e92d4070 	push	{r4, r5, r6, lr}
   1b6c4:	e1a04000 	mov	r4, r0
   1b6c8:	e59f3070 	ldr	r3, [pc, #112]	@ 1b740 <CSMSC951xDevice::~CSMSC951xDevice()+0x80>
   1b6cc:	e590501c 	ldr	r5, [r0, #28]
   1b6d0:	e2832048 	add	r2, r3, #72	@ 0x48
   1b6d4:	e5803000 	str	r3, [r0]
   1b6d8:	e3550000 	cmp	r5, #0
   1b6dc:	e5802014 	str	r2, [r0, #20]
   1b6e0:	0a000004 	beq	1b6f8 <CSMSC951xDevice::~CSMSC951xDevice()+0x38>
   1b6e4:	e1a00005 	mov	r0, r5
   1b6e8:	ebffd240 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1b6ec:	e3a01014 	mov	r1, #20
   1b6f0:	e1a00005 	mov	r0, r5
   1b6f4:	eb006aa2 	bl	36184 <operator delete(void*, unsigned int)>
   1b6f8:	e5945018 	ldr	r5, [r4, #24]
   1b6fc:	e3a03000 	mov	r3, #0
   1b700:	e584301c 	str	r3, [r4, #28]
   1b704:	e1550003 	cmp	r5, r3
   1b708:	0a000004 	beq	1b720 <CSMSC951xDevice::~CSMSC951xDevice()+0x60>
   1b70c:	e1a00005 	mov	r0, r5
   1b710:	ebffd236 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1b714:	e3a01014 	mov	r1, #20
   1b718:	e1a00005 	mov	r0, r5
   1b71c:	eb006a98 	bl	36184 <operator delete(void*, unsigned int)>
   1b720:	e3a03000 	mov	r3, #0
   1b724:	e2840020 	add	r0, r4, #32
   1b728:	e5843018 	str	r3, [r4, #24]
   1b72c:	eb006978 	bl	35d14 <CMACAddress::~CMACAddress()>
   1b730:	e1a00004 	mov	r0, r4
   1b734:	ebffd298 	bl	1019c <CUSBFunction::~CUSBFunction()>
   1b738:	e1a00004 	mov	r0, r4
   1b73c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b740:	0003f874 	.word	0x0003f874

0001b744 <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   1b744:	e2400014 	sub	r0, r0, #20
   1b748:	eaffffdc 	b	1b6c0 <CSMSC951xDevice::~CSMSC951xDevice()>

0001b74c <CSMSC951xDevice::~CSMSC951xDevice()>:
   1b74c:	e92d4010 	push	{r4, lr}
   1b750:	e1a04000 	mov	r4, r0
   1b754:	ebffffd9 	bl	1b6c0 <CSMSC951xDevice::~CSMSC951xDevice()>
   1b758:	e1a00004 	mov	r0, r4
   1b75c:	e3a01028 	mov	r1, #40	@ 0x28
   1b760:	eb006a87 	bl	36184 <operator delete(void*, unsigned int)>
   1b764:	e1a00004 	mov	r0, r4
   1b768:	e8bd8010 	pop	{r4, pc}

0001b76c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   1b76c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1b770:	e1a04001 	mov	r4, r1
   1b774:	e5901018 	ldr	r1, [r0, #24]
   1b778:	e24dd07c 	sub	sp, sp, #124	@ 0x7c
   1b77c:	e3510000 	cmp	r1, #0
   1b780:	0a000036 	beq	1b860 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0xf4>
   1b784:	e3540000 	cmp	r4, #0
   1b788:	0a00003a 	beq	1b878 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x10c>
   1b78c:	e3a07000 	mov	r7, #0
   1b790:	e3a03d19 	mov	r3, #1600	@ 0x640
   1b794:	e1a05000 	mov	r5, r0
   1b798:	e58d7000 	str	r7, [sp]
   1b79c:	e1a06002 	mov	r6, r2
   1b7a0:	e28d0008 	add	r0, sp, #8
   1b7a4:	e1a02004 	mov	r2, r4
   1b7a8:	ebffeb0b 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1b7ac:	e1a00005 	mov	r0, r5
   1b7b0:	ebffd39b 	bl	10624 <CUSBFunction::GetHost() const>
   1b7b4:	e5903000 	ldr	r3, [r0]
   1b7b8:	e1a02007 	mov	r2, r7
   1b7bc:	e28d1008 	add	r1, sp, #8
   1b7c0:	e5933010 	ldr	r3, [r3, #16]
   1b7c4:	e12fff33 	blx	r3
   1b7c8:	e2507000 	subs	r7, r0, #0
   1b7cc:	1a000005 	bne	1b7e8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x7c>
   1b7d0:	e3a07000 	mov	r7, #0
   1b7d4:	e28d0008 	add	r0, sp, #8
   1b7d8:	ebffeb23 	bl	1646c <CUSBRequest::~CUSBRequest()>
   1b7dc:	e1a00007 	mov	r0, r7
   1b7e0:	e28dd07c 	add	sp, sp, #124	@ 0x7c
   1b7e4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1b7e8:	e28d0008 	add	r0, sp, #8
   1b7ec:	ebffeb31 	bl	164b8 <CUSBRequest::GetResultLength() const>
   1b7f0:	e3500003 	cmp	r0, #3
   1b7f4:	9afffff5 	bls	1b7d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   1b7f8:	e5945000 	ldr	r5, [r4]
   1b7fc:	e30930de 	movw	r3, #37086	@ 0x90de
   1b800:	e3443000 	movt	r3, #16384	@ 0x4000
   1b804:	e0033005 	and	r3, r3, r5
   1b808:	e3530000 	cmp	r3, #0
   1b80c:	1a00001f 	bne	1b890 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x124>
   1b810:	e7ed5855 	ubfx	r5, r5, #16, #14
   1b814:	e2400004 	sub	r0, r0, #4
   1b818:	e1500005 	cmp	r0, r5
   1b81c:	1a000023 	bne	1b8b0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x144>
   1b820:	e3500004 	cmp	r0, #4
   1b824:	9a000027 	bls	1b8c8 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x15c>
   1b828:	e2405004 	sub	r5, r0, #4
   1b82c:	e2841004 	add	r1, r4, #4
   1b830:	e1a00004 	mov	r0, r4
   1b834:	e1a02005 	mov	r2, r5
   1b838:	eb006831 	bl	35904 <memcpy>
   1b83c:	e3560000 	cmp	r6, #0
   1b840:	15865000 	strne	r5, [r6]
   1b844:	1affffe2 	bne	1b7d4 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x68>
   1b848:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1b84c:	e3401003 	movt	r1, #3
   1b850:	e30c0250 	movw	r0, #49744	@ 0xc250
   1b854:	e3400003 	movt	r0, #3
   1b858:	e3a02f4e 	mov	r2, #312	@ 0x138
   1b85c:	eb00415e 	bl	2bddc <assertion_failed>
   1b860:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1b864:	e3401003 	movt	r1, #3
   1b868:	e30c01dc 	movw	r0, #49628	@ 0xc1dc
   1b86c:	e3400003 	movt	r0, #3
   1b870:	e3a02f45 	mov	r2, #276	@ 0x114
   1b874:	eb004158 	bl	2bddc <assertion_failed>
   1b878:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1b87c:	e3401003 	movt	r1, #3
   1b880:	e30b0400 	movw	r0, #46080	@ 0xb400
   1b884:	e3400003 	movt	r0, #3
   1b888:	e3002115 	movw	r2, #277	@ 0x115
   1b88c:	eb004152 	bl	2bddc <assertion_failed>
   1b890:	eb004bcc 	bl	2e7c8 <CLogger::Get()>
   1b894:	e59f1044 	ldr	r1, [pc, #68]	@ 1b8e0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x174>
   1b898:	e3a02002 	mov	r2, #2
   1b89c:	e30c31f4 	movw	r3, #49652	@ 0xc1f4
   1b8a0:	e3403003 	movt	r3, #3
   1b8a4:	e58d5000 	str	r5, [sp]
   1b8a8:	eb004d8f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1b8ac:	eaffffc7 	b	1b7d0 <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)+0x64>
   1b8b0:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1b8b4:	e3401003 	movt	r1, #3
   1b8b8:	e30c038c 	movw	r0, #50060	@ 0xc38c
   1b8bc:	e3400003 	movt	r0, #3
   1b8c0:	e3a02f4b 	mov	r2, #300	@ 0x12c
   1b8c4:	eb004144 	bl	2bddc <assertion_failed>
   1b8c8:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1b8cc:	e3401003 	movt	r1, #3
   1b8d0:	e30c023c 	movw	r0, #49724	@ 0xc23c
   1b8d4:	e3400003 	movt	r0, #3
   1b8d8:	e300212d 	movw	r2, #301	@ 0x12d
   1b8dc:	eb00413e 	bl	2bddc <assertion_failed>
   1b8e0:	0003f8e4 	.word	0x0003f8e4

0001b8e4 <non-virtual thunk to CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>:
   1b8e4:	e2400014 	sub	r0, r0, #20
   1b8e8:	eaffff9f 	b	1b76c <CSMSC951xDevice::ReceiveFrame(void*, unsigned int*)>

0001b8ec <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>:
   1b8ec:	e92d4070 	push	{r4, r5, r6, lr}
   1b8f0:	e1a06000 	mov	r6, r0
   1b8f4:	e1a05002 	mov	r5, r2
   1b8f8:	e24ddd1b 	sub	sp, sp, #1728	@ 0x6c0
   1b8fc:	e28d4047 	add	r4, sp, #71	@ 0x47
   1b900:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   1b904:	e2840008 	add	r0, r4, #8
   1b908:	eb0067fd 	bl	35904 <memcpy>
   1b90c:	e596201c 	ldr	r2, [r6, #28]
   1b910:	e3853a03 	orr	r3, r5, #12288	@ 0x3000
   1b914:	e5845004 	str	r5, [r4, #4]
   1b918:	e3520000 	cmp	r2, #0
   1b91c:	e5843000 	str	r3, [r4]
   1b920:	0a00000b 	beq	1b954 <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]+0x68>
   1b924:	e1a00006 	mov	r0, r6
   1b928:	ebffd33d 	bl	10624 <CUSBFunction::GetHost() const>
   1b92c:	e596101c 	ldr	r1, [r6, #28]
   1b930:	e3a0c000 	mov	ip, #0
   1b934:	e2853008 	add	r3, r5, #8
   1b938:	e1a02004 	mov	r2, r4
   1b93c:	e58dc000 	str	ip, [sp]
   1b940:	ebffe09d 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1b944:	e1e00000 	mvn	r0, r0
   1b948:	e1a00fa0 	lsr	r0, r0, #31
   1b94c:	e28ddd1b 	add	sp, sp, #1728	@ 0x6c0
   1b950:	e8bd8070 	pop	{r4, r5, r6, pc}
   1b954:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1b958:	e3401003 	movt	r1, #3
   1b95c:	e30c0264 	movw	r0, #49764	@ 0xc264
   1b960:	e3400003 	movt	r0, #3
   1b964:	e300210e 	movw	r2, #270	@ 0x10e
   1b968:	eb00411b 	bl	2bddc <assertion_failed>

0001b96c <CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   1b96c:	e3520d19 	cmp	r2, #1600	@ 0x640
   1b970:	8a000002 	bhi	1b980 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x14>
   1b974:	e3510000 	cmp	r1, #0
   1b978:	0a000002 	beq	1b988 <CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x1c>
   1b97c:	eaffffda 	b	1b8ec <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   1b980:	e3a00000 	mov	r0, #0
   1b984:	e12fff1e 	bx	lr
   1b988:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1b98c:	e3401003 	movt	r1, #3
   1b990:	e30b0400 	movw	r0, #46080	@ 0xb400
   1b994:	e3400003 	movt	r0, #3
   1b998:	e92d4010 	push	{r4, lr}
   1b99c:	e3002107 	movw	r2, #263	@ 0x107
   1b9a0:	eb00410d 	bl	2bddc <assertion_failed>

0001b9a4 <non-virtual thunk to CSMSC951xDevice::GetMACAddress() const>:
   1b9a4:	e280000c 	add	r0, r0, #12
   1b9a8:	e12fff1e 	bx	lr

0001b9ac <non-virtual thunk to CSMSC951xDevice::~CSMSC951xDevice()>:
   1b9ac:	e92d4010 	push	{r4, lr}
   1b9b0:	e2404014 	sub	r4, r0, #20
   1b9b4:	e1a00004 	mov	r0, r4
   1b9b8:	ebffff40 	bl	1b6c0 <CSMSC951xDevice::~CSMSC951xDevice()>
   1b9bc:	e1a00004 	mov	r0, r4
   1b9c0:	e3a01028 	mov	r1, #40	@ 0x28
   1b9c4:	eb0069ee 	bl	36184 <operator delete(void*, unsigned int)>
   1b9c8:	e1a00004 	mov	r0, r4
   1b9cc:	e8bd8010 	pop	{r4, pc}

0001b9d0 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)>:
   1b9d0:	e3520d19 	cmp	r2, #1600	@ 0x640
   1b9d4:	8a000003 	bhi	1b9e8 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x18>
   1b9d8:	e3510000 	cmp	r1, #0
   1b9dc:	0a000003 	beq	1b9f0 <non-virtual thunk to CSMSC951xDevice::SendFrame(void const*, unsigned int)+0x20>
   1b9e0:	e2400014 	sub	r0, r0, #20
   1b9e4:	eaffffc0 	b	1b8ec <CSMSC951xDevice::SendFrame(void const*, unsigned int) [clone .part.0]>
   1b9e8:	e3a00000 	mov	r0, #0
   1b9ec:	e12fff1e 	bx	lr
   1b9f0:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1b9f4:	e3401003 	movt	r1, #3
   1b9f8:	e30b0400 	movw	r0, #46080	@ 0xb400
   1b9fc:	e3400003 	movt	r0, #3
   1ba00:	e92d4010 	push	{r4, lr}
   1ba04:	e3002107 	movw	r2, #263	@ 0x107
   1ba08:	eb0040f3 	bl	2bddc <assertion_failed>

0001ba0c <CSMSC951xDevice::CSMSC951xDevice(CUSBFunction*)>:
   1ba0c:	e92d4010 	push	{r4, lr}
   1ba10:	e1a04000 	mov	r4, r0
   1ba14:	ebffd289 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1ba18:	e30f386c 	movw	r3, #63596	@ 0xf86c
   1ba1c:	e3403003 	movt	r3, #3
   1ba20:	e3a02000 	mov	r2, #0
   1ba24:	e2831008 	add	r1, r3, #8
   1ba28:	e2840020 	add	r0, r4, #32
   1ba2c:	e2833050 	add	r3, r3, #80	@ 0x50
   1ba30:	e5841000 	str	r1, [r4]
   1ba34:	e5843014 	str	r3, [r4, #20]
   1ba38:	e5842018 	str	r2, [r4, #24]
   1ba3c:	e584201c 	str	r2, [r4, #28]
   1ba40:	eb00689f 	bl	35cc4 <CMACAddress::CMACAddress()>
   1ba44:	e1a00004 	mov	r0, r4
   1ba48:	e8bd8010 	pop	{r4, pc}

0001ba4c <CSMSC951xDevice::PHYWaitNotBusy()>:
   1ba4c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ba50:	e1a04000 	mov	r4, r0
   1ba54:	e24dd018 	sub	sp, sp, #24
   1ba58:	eb006576 	bl	35038 <CTimer::Get()>
   1ba5c:	e2505000 	subs	r5, r0, #0
   1ba60:	0a000023 	beq	1baf4 <CSMSC951xDevice::PHYWaitNotBusy()+0xa8>
   1ba64:	eb0062a1 	bl	344f0 <CTimer::GetTicks() const>
   1ba68:	e3a09004 	mov	r9, #4
   1ba6c:	e1a06000 	mov	r6, r0
   1ba70:	e28d8014 	add	r8, sp, #20
   1ba74:	e3a07f45 	mov	r7, #276	@ 0x114
   1ba78:	ea000012 	b	1bac8 <CSMSC951xDevice::PHYWaitNotBusy()+0x7c>
   1ba7c:	e1a00004 	mov	r0, r4
   1ba80:	ebffd2e7 	bl	10624 <CUSBFunction::GetHost() const>
   1ba84:	e1a0a000 	mov	sl, r0
   1ba88:	e1a00004 	mov	r0, r4
   1ba8c:	ebffd2d9 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1ba90:	e3a0c000 	mov	ip, #0
   1ba94:	e1a01000 	mov	r1, r0
   1ba98:	e3a030a1 	mov	r3, #161	@ 0xa1
   1ba9c:	e3a020c0 	mov	r2, #192	@ 0xc0
   1baa0:	e1a0000a 	mov	r0, sl
   1baa4:	e1cd80f8 	strd	r8, [sp, #8]
   1baa8:	e58d7004 	str	r7, [sp, #4]
   1baac:	e58dc000 	str	ip, [sp]
   1bab0:	ebffdfda 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bab4:	e3500004 	cmp	r0, #4
   1bab8:	1a000007 	bne	1badc <CSMSC951xDevice::PHYWaitNotBusy()+0x90>
   1babc:	e59d3014 	ldr	r3, [sp, #20]
   1bac0:	e3130001 	tst	r3, #1
   1bac4:	0a000007 	beq	1bae8 <CSMSC951xDevice::PHYWaitNotBusy()+0x9c>
   1bac8:	e1a00005 	mov	r0, r5
   1bacc:	eb006287 	bl	344f0 <CTimer::GetTicks() const>
   1bad0:	e0403006 	sub	r3, r0, r6
   1bad4:	e3530063 	cmp	r3, #99	@ 0x63
   1bad8:	9affffe7 	bls	1ba7c <CSMSC951xDevice::PHYWaitNotBusy()+0x30>
   1badc:	e3a00000 	mov	r0, #0
   1bae0:	e28dd018 	add	sp, sp, #24
   1bae4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bae8:	e3a00001 	mov	r0, #1
   1baec:	e28dd018 	add	sp, sp, #24
   1baf0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1baf4:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1baf8:	e3401003 	movt	r1, #3
   1bafc:	e30c02b4 	movw	r0, #49844	@ 0xc2b4
   1bb00:	e3400003 	movt	r0, #3
   1bb04:	e300218f 	movw	r2, #399	@ 0x18f
   1bb08:	eb0040b3 	bl	2bddc <assertion_failed>

0001bb0c <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)>:
   1bb0c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1bb10:	e351001f 	cmp	r1, #31
   1bb14:	e24dd01c 	sub	sp, sp, #28
   1bb18:	8a000036 	bhi	1bbf8 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0xec>
   1bb1c:	e1a06001 	mov	r6, r1
   1bb20:	e1a04000 	mov	r4, r0
   1bb24:	e1a05002 	mov	r5, r2
   1bb28:	ebffffc7 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1bb2c:	e3500000 	cmp	r0, #0
   1bb30:	1a000002 	bne	1bb40 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x34>
   1bb34:	e3a00000 	mov	r0, #0
   1bb38:	e28dd01c 	add	sp, sp, #28
   1bb3c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1bb40:	e1a00004 	mov	r0, r4
   1bb44:	e58d5014 	str	r5, [sp, #20]
   1bb48:	ebffd2b5 	bl	10624 <CUSBFunction::GetHost() const>
   1bb4c:	e1a05000 	mov	r5, r0
   1bb50:	e1a00004 	mov	r0, r4
   1bb54:	e3a07004 	mov	r7, #4
   1bb58:	ebffd2a6 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bb5c:	e28d3014 	add	r3, sp, #20
   1bb60:	e1a01000 	mov	r1, r0
   1bb64:	e58d3008 	str	r3, [sp, #8]
   1bb68:	e1a00005 	mov	r0, r5
   1bb6c:	e3a03f46 	mov	r3, #280	@ 0x118
   1bb70:	e3a05000 	mov	r5, #0
   1bb74:	e58d3004 	str	r3, [sp, #4]
   1bb78:	e3a02040 	mov	r2, #64	@ 0x40
   1bb7c:	e3a030a0 	mov	r3, #160	@ 0xa0
   1bb80:	e58d700c 	str	r7, [sp, #12]
   1bb84:	e58d5000 	str	r5, [sp]
   1bb88:	ebffdfa4 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bb8c:	e1500005 	cmp	r0, r5
   1bb90:	baffffe7 	blt	1bb34 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   1bb94:	e1a00004 	mov	r0, r4
   1bb98:	e3003803 	movw	r3, #2051	@ 0x803
   1bb9c:	e1833306 	orr	r3, r3, r6, lsl #6
   1bba0:	e58d3014 	str	r3, [sp, #20]
   1bba4:	ebffd29e 	bl	10624 <CUSBFunction::GetHost() const>
   1bba8:	e1a06000 	mov	r6, r0
   1bbac:	e1a00004 	mov	r0, r4
   1bbb0:	ebffd290 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bbb4:	e28d3014 	add	r3, sp, #20
   1bbb8:	e1a01000 	mov	r1, r0
   1bbbc:	e3a02f45 	mov	r2, #276	@ 0x114
   1bbc0:	e58d3008 	str	r3, [sp, #8]
   1bbc4:	e1a00006 	mov	r0, r6
   1bbc8:	e58d2004 	str	r2, [sp, #4]
   1bbcc:	e3a030a0 	mov	r3, #160	@ 0xa0
   1bbd0:	e3a02040 	mov	r2, #64	@ 0x40
   1bbd4:	e58d700c 	str	r7, [sp, #12]
   1bbd8:	e58d5000 	str	r5, [sp]
   1bbdc:	ebffdf8f 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bbe0:	e1500005 	cmp	r0, r5
   1bbe4:	baffffd2 	blt	1bb34 <CSMSC951xDevice::PHYWrite(unsigned char, unsigned short)+0x28>
   1bbe8:	e1a00004 	mov	r0, r4
   1bbec:	e28dd01c 	add	sp, sp, #28
   1bbf0:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   1bbf4:	eaffff94 	b	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1bbf8:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1bbfc:	e3401003 	movt	r1, #3
   1bc00:	e30c02c0 	movw	r0, #49856	@ 0xc2c0
   1bc04:	e3400003 	movt	r0, #3
   1bc08:	e3002163 	movw	r2, #355	@ 0x163
   1bc0c:	eb004072 	bl	2bddc <assertion_failed>

0001bc10 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)>:
   1bc10:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1bc14:	e351001f 	cmp	r1, #31
   1bc18:	e24dd018 	sub	sp, sp, #24
   1bc1c:	8a000041 	bhi	1bd28 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x118>
   1bc20:	e1a04001 	mov	r4, r1
   1bc24:	e1a05000 	mov	r5, r0
   1bc28:	e1a06002 	mov	r6, r2
   1bc2c:	ebffff86 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1bc30:	e3500000 	cmp	r0, #0
   1bc34:	1a000003 	bne	1bc48 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x38>
   1bc38:	e3a04000 	mov	r4, #0
   1bc3c:	e1a00004 	mov	r0, r4
   1bc40:	e28dd018 	add	sp, sp, #24
   1bc44:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1bc48:	e1a00005 	mov	r0, r5
   1bc4c:	e3003801 	movw	r3, #2049	@ 0x801
   1bc50:	e1833304 	orr	r3, r3, r4, lsl #6
   1bc54:	e58d3014 	str	r3, [sp, #20]
   1bc58:	ebffd271 	bl	10624 <CUSBFunction::GetHost() const>
   1bc5c:	e1a04000 	mov	r4, r0
   1bc60:	e1a00005 	mov	r0, r5
   1bc64:	e3a08000 	mov	r8, #0
   1bc68:	ebffd262 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bc6c:	e3a07004 	mov	r7, #4
   1bc70:	e1a01000 	mov	r1, r0
   1bc74:	e28d3014 	add	r3, sp, #20
   1bc78:	e1a00004 	mov	r0, r4
   1bc7c:	e58d3008 	str	r3, [sp, #8]
   1bc80:	e3a02040 	mov	r2, #64	@ 0x40
   1bc84:	e3a03f45 	mov	r3, #276	@ 0x114
   1bc88:	e58d700c 	str	r7, [sp, #12]
   1bc8c:	e58d3004 	str	r3, [sp, #4]
   1bc90:	e3a030a0 	mov	r3, #160	@ 0xa0
   1bc94:	e58d8000 	str	r8, [sp]
   1bc98:	ebffdf60 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bc9c:	e1500008 	cmp	r0, r8
   1bca0:	baffffe4 	blt	1bc38 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   1bca4:	e1a00005 	mov	r0, r5
   1bca8:	ebffff67 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1bcac:	e2504000 	subs	r4, r0, #0
   1bcb0:	0affffe0 	beq	1bc38 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   1bcb4:	e1a00005 	mov	r0, r5
   1bcb8:	ebffd259 	bl	10624 <CUSBFunction::GetHost() const>
   1bcbc:	e1a03000 	mov	r3, r0
   1bcc0:	e1a00005 	mov	r0, r5
   1bcc4:	e1a05003 	mov	r5, r3
   1bcc8:	ebffd24a 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bccc:	e28d3014 	add	r3, sp, #20
   1bcd0:	e1a01000 	mov	r1, r0
   1bcd4:	e3a02f46 	mov	r2, #280	@ 0x118
   1bcd8:	e58d3008 	str	r3, [sp, #8]
   1bcdc:	e1a00005 	mov	r0, r5
   1bce0:	e58d2004 	str	r2, [sp, #4]
   1bce4:	e3a030a1 	mov	r3, #161	@ 0xa1
   1bce8:	e3a020c0 	mov	r2, #192	@ 0xc0
   1bcec:	e58d700c 	str	r7, [sp, #12]
   1bcf0:	e58d8000 	str	r8, [sp]
   1bcf4:	ebffdf49 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bcf8:	e1500007 	cmp	r0, r7
   1bcfc:	1affffcd 	bne	1bc38 <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x28>
   1bd00:	e1560008 	cmp	r6, r8
   1bd04:	159d3014 	ldrne	r3, [sp, #20]
   1bd08:	11c630b0 	strhne	r3, [r6]
   1bd0c:	1affffca 	bne	1bc3c <CSMSC951xDevice::PHYRead(unsigned char, unsigned short*)+0x2c>
   1bd10:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1bd14:	e3401003 	movt	r1, #3
   1bd18:	e30c02d0 	movw	r0, #49872	@ 0xc2d0
   1bd1c:	e3400003 	movt	r0, #3
   1bd20:	e3002186 	movw	r2, #390	@ 0x186
   1bd24:	eb00402c 	bl	2bddc <assertion_failed>
   1bd28:	e30c137c 	movw	r1, #50044	@ 0xc37c
   1bd2c:	e3401003 	movt	r1, #3
   1bd30:	e30c02c0 	movw	r0, #49856	@ 0xc2c0
   1bd34:	e3400003 	movt	r0, #3
   1bd38:	e3002176 	movw	r2, #374	@ 0x176
   1bd3c:	eb004026 	bl	2bddc <assertion_failed>

0001bd40 <CSMSC951xDevice::IsLinkUp()>:
   1bd40:	e92d4070 	push	{r4, r5, r6, lr}
   1bd44:	e1a04000 	mov	r4, r0
   1bd48:	e24dd018 	sub	sp, sp, #24
   1bd4c:	ebffff3e 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1bd50:	e3500000 	cmp	r0, #0
   1bd54:	1a000002 	bne	1bd64 <CSMSC951xDevice::IsLinkUp()+0x24>
   1bd58:	e3a00000 	mov	r0, #0
   1bd5c:	e28dd018 	add	sp, sp, #24
   1bd60:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bd64:	e1a00004 	mov	r0, r4
   1bd68:	e3003841 	movw	r3, #2113	@ 0x841
   1bd6c:	e58d3014 	str	r3, [sp, #20]
   1bd70:	ebffd22b 	bl	10624 <CUSBFunction::GetHost() const>
   1bd74:	e1a05000 	mov	r5, r0
   1bd78:	e1a00004 	mov	r0, r4
   1bd7c:	ebffd21d 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bd80:	e3a06004 	mov	r6, #4
   1bd84:	e1a01000 	mov	r1, r0
   1bd88:	e28d3014 	add	r3, sp, #20
   1bd8c:	e1a00005 	mov	r0, r5
   1bd90:	e58d3008 	str	r3, [sp, #8]
   1bd94:	e3a05000 	mov	r5, #0
   1bd98:	e3a03f45 	mov	r3, #276	@ 0x114
   1bd9c:	e3a02040 	mov	r2, #64	@ 0x40
   1bda0:	e58d3004 	str	r3, [sp, #4]
   1bda4:	e58d600c 	str	r6, [sp, #12]
   1bda8:	e3a030a0 	mov	r3, #160	@ 0xa0
   1bdac:	e58d5000 	str	r5, [sp]
   1bdb0:	ebffdf1a 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bdb4:	e1500005 	cmp	r0, r5
   1bdb8:	baffffe6 	blt	1bd58 <CSMSC951xDevice::IsLinkUp()+0x18>
   1bdbc:	e1a00004 	mov	r0, r4
   1bdc0:	ebffff21 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1bdc4:	e1500005 	cmp	r0, r5
   1bdc8:	0affffe2 	beq	1bd58 <CSMSC951xDevice::IsLinkUp()+0x18>
   1bdcc:	e1a00004 	mov	r0, r4
   1bdd0:	ebffd213 	bl	10624 <CUSBFunction::GetHost() const>
   1bdd4:	e1a03000 	mov	r3, r0
   1bdd8:	e1a00004 	mov	r0, r4
   1bddc:	e1a04003 	mov	r4, r3
   1bde0:	ebffd204 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bde4:	e3a03f46 	mov	r3, #280	@ 0x118
   1bde8:	e1a01000 	mov	r1, r0
   1bdec:	e28d2014 	add	r2, sp, #20
   1bdf0:	e58d3004 	str	r3, [sp, #4]
   1bdf4:	e1a00004 	mov	r0, r4
   1bdf8:	e58d2008 	str	r2, [sp, #8]
   1bdfc:	e3a030a1 	mov	r3, #161	@ 0xa1
   1be00:	e3a020c0 	mov	r2, #192	@ 0xc0
   1be04:	e58d600c 	str	r6, [sp, #12]
   1be08:	e58d5000 	str	r5, [sp]
   1be0c:	ebffdf03 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1be10:	e1500006 	cmp	r0, r6
   1be14:	1affffcf 	bne	1bd58 <CSMSC951xDevice::IsLinkUp()+0x18>
   1be18:	e59d0014 	ldr	r0, [sp, #20]
   1be1c:	e7e00150 	ubfx	r0, r0, #2, #1
   1be20:	e28dd018 	add	sp, sp, #24
   1be24:	e8bd8070 	pop	{r4, r5, r6, pc}

0001be28 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()>:
   1be28:	e92d4070 	push	{r4, r5, r6, lr}
   1be2c:	e2404014 	sub	r4, r0, #20
   1be30:	e1a00004 	mov	r0, r4
   1be34:	e24dd018 	sub	sp, sp, #24
   1be38:	ebffff03 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1be3c:	e3500000 	cmp	r0, #0
   1be40:	1a000002 	bne	1be50 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x28>
   1be44:	e3a00000 	mov	r0, #0
   1be48:	e28dd018 	add	sp, sp, #24
   1be4c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1be50:	e1a00004 	mov	r0, r4
   1be54:	e3003841 	movw	r3, #2113	@ 0x841
   1be58:	e58d3014 	str	r3, [sp, #20]
   1be5c:	ebffd1f0 	bl	10624 <CUSBFunction::GetHost() const>
   1be60:	e1a05000 	mov	r5, r0
   1be64:	e1a00004 	mov	r0, r4
   1be68:	ebffd1e2 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1be6c:	e3a06004 	mov	r6, #4
   1be70:	e1a01000 	mov	r1, r0
   1be74:	e28d3014 	add	r3, sp, #20
   1be78:	e1a00005 	mov	r0, r5
   1be7c:	e58d3008 	str	r3, [sp, #8]
   1be80:	e3a05000 	mov	r5, #0
   1be84:	e3a03f45 	mov	r3, #276	@ 0x114
   1be88:	e3a02040 	mov	r2, #64	@ 0x40
   1be8c:	e58d3004 	str	r3, [sp, #4]
   1be90:	e58d600c 	str	r6, [sp, #12]
   1be94:	e3a030a0 	mov	r3, #160	@ 0xa0
   1be98:	e58d5000 	str	r5, [sp]
   1be9c:	ebffdedf 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bea0:	e1500005 	cmp	r0, r5
   1bea4:	baffffe6 	blt	1be44 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x1c>
   1bea8:	e1a00004 	mov	r0, r4
   1beac:	ebfffee6 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1beb0:	e1500005 	cmp	r0, r5
   1beb4:	0affffe2 	beq	1be44 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x1c>
   1beb8:	e1a00004 	mov	r0, r4
   1bebc:	ebffd1d8 	bl	10624 <CUSBFunction::GetHost() const>
   1bec0:	e1a03000 	mov	r3, r0
   1bec4:	e1a00004 	mov	r0, r4
   1bec8:	e1a04003 	mov	r4, r3
   1becc:	ebffd1c9 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bed0:	e3a03f46 	mov	r3, #280	@ 0x118
   1bed4:	e1a01000 	mov	r1, r0
   1bed8:	e28d2014 	add	r2, sp, #20
   1bedc:	e58d3004 	str	r3, [sp, #4]
   1bee0:	e1a00004 	mov	r0, r4
   1bee4:	e58d2008 	str	r2, [sp, #8]
   1bee8:	e3a030a1 	mov	r3, #161	@ 0xa1
   1beec:	e3a020c0 	mov	r2, #192	@ 0xc0
   1bef0:	e58d600c 	str	r6, [sp, #12]
   1bef4:	e58d5000 	str	r5, [sp]
   1bef8:	ebffdec8 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1befc:	e1500006 	cmp	r0, r6
   1bf00:	1affffcf 	bne	1be44 <non-virtual thunk to CSMSC951xDevice::IsLinkUp()+0x1c>
   1bf04:	e59d0014 	ldr	r0, [sp, #20]
   1bf08:	e7e00150 	ubfx	r0, r0, #2, #1
   1bf0c:	e28dd018 	add	sp, sp, #24
   1bf10:	e8bd8070 	pop	{r4, r5, r6, pc}

0001bf14 <CSMSC951xDevice::GetLinkSpeed()>:
   1bf14:	e92d4070 	push	{r4, r5, r6, lr}
   1bf18:	e1a04000 	mov	r4, r0
   1bf1c:	e24dd018 	sub	sp, sp, #24
   1bf20:	ebfffec9 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1bf24:	e3500000 	cmp	r0, #0
   1bf28:	1a000002 	bne	1bf38 <CSMSC951xDevice::GetLinkSpeed()+0x24>
   1bf2c:	e3a00006 	mov	r0, #6
   1bf30:	e28dd018 	add	sp, sp, #24
   1bf34:	e8bd8070 	pop	{r4, r5, r6, pc}
   1bf38:	e1a00004 	mov	r0, r4
   1bf3c:	e3003fc1 	movw	r3, #4033	@ 0xfc1
   1bf40:	e58d3014 	str	r3, [sp, #20]
   1bf44:	ebffd1b6 	bl	10624 <CUSBFunction::GetHost() const>
   1bf48:	e1a05000 	mov	r5, r0
   1bf4c:	e1a00004 	mov	r0, r4
   1bf50:	ebffd1a8 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bf54:	e3a06004 	mov	r6, #4
   1bf58:	e1a01000 	mov	r1, r0
   1bf5c:	e28d3014 	add	r3, sp, #20
   1bf60:	e1a00005 	mov	r0, r5
   1bf64:	e58d3008 	str	r3, [sp, #8]
   1bf68:	e3a05000 	mov	r5, #0
   1bf6c:	e3a03f45 	mov	r3, #276	@ 0x114
   1bf70:	e3a02040 	mov	r2, #64	@ 0x40
   1bf74:	e58d3004 	str	r3, [sp, #4]
   1bf78:	e58d600c 	str	r6, [sp, #12]
   1bf7c:	e3a030a0 	mov	r3, #160	@ 0xa0
   1bf80:	e58d5000 	str	r5, [sp]
   1bf84:	ebffdea5 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bf88:	e1500005 	cmp	r0, r5
   1bf8c:	baffffe6 	blt	1bf2c <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1bf90:	e1a00004 	mov	r0, r4
   1bf94:	ebfffeac 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1bf98:	e1500005 	cmp	r0, r5
   1bf9c:	0affffe2 	beq	1bf2c <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1bfa0:	e1a00004 	mov	r0, r4
   1bfa4:	ebffd19e 	bl	10624 <CUSBFunction::GetHost() const>
   1bfa8:	e1a03000 	mov	r3, r0
   1bfac:	e1a00004 	mov	r0, r4
   1bfb0:	e1a04003 	mov	r4, r3
   1bfb4:	ebffd18f 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1bfb8:	e3a03f46 	mov	r3, #280	@ 0x118
   1bfbc:	e1a01000 	mov	r1, r0
   1bfc0:	e28d2014 	add	r2, sp, #20
   1bfc4:	e58d3004 	str	r3, [sp, #4]
   1bfc8:	e1a00004 	mov	r0, r4
   1bfcc:	e58d2008 	str	r2, [sp, #8]
   1bfd0:	e3a030a1 	mov	r3, #161	@ 0xa1
   1bfd4:	e3a020c0 	mov	r2, #192	@ 0xc0
   1bfd8:	e58d600c 	str	r6, [sp, #12]
   1bfdc:	e58d5000 	str	r5, [sp]
   1bfe0:	ebffde8e 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1bfe4:	e1500006 	cmp	r0, r6
   1bfe8:	1affffcf 	bne	1bf2c <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1bfec:	e1dd31b4 	ldrh	r3, [sp, #20]
   1bff0:	e3130a01 	tst	r3, #4096	@ 0x1000
   1bff4:	0affffcc 	beq	1bf2c <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1bff8:	e7e23153 	ubfx	r3, r3, #2, #3
   1bffc:	e2433001 	sub	r3, r3, #1
   1c000:	e3530005 	cmp	r3, #5
   1c004:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c008:	eaffffc7 	b	1bf2c <CSMSC951xDevice::GetLinkSpeed()+0x18>
   1c00c:	0001c048 	.word	0x0001c048
   1c010:	0001c03c 	.word	0x0001c03c
   1c014:	0001bf2c 	.word	0x0001bf2c
   1c018:	0001bf2c 	.word	0x0001bf2c
   1c01c:	0001c030 	.word	0x0001c030
   1c020:	0001c024 	.word	0x0001c024
   1c024:	e3a00003 	mov	r0, #3
   1c028:	e28dd018 	add	sp, sp, #24
   1c02c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c030:	e3a00001 	mov	r0, #1
   1c034:	e28dd018 	add	sp, sp, #24
   1c038:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c03c:	e3a00002 	mov	r0, #2
   1c040:	e28dd018 	add	sp, sp, #24
   1c044:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c048:	e3a00000 	mov	r0, #0
   1c04c:	eaffffb7 	b	1bf30 <CSMSC951xDevice::GetLinkSpeed()+0x1c>

0001c050 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()>:
   1c050:	e92d4070 	push	{r4, r5, r6, lr}
   1c054:	e2404014 	sub	r4, r0, #20
   1c058:	e1a00004 	mov	r0, r4
   1c05c:	e24dd018 	sub	sp, sp, #24
   1c060:	ebfffe79 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1c064:	e3500000 	cmp	r0, #0
   1c068:	1a000002 	bne	1c078 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x28>
   1c06c:	e3a00006 	mov	r0, #6
   1c070:	e28dd018 	add	sp, sp, #24
   1c074:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c078:	e1a00004 	mov	r0, r4
   1c07c:	e3003fc1 	movw	r3, #4033	@ 0xfc1
   1c080:	e58d3014 	str	r3, [sp, #20]
   1c084:	ebffd166 	bl	10624 <CUSBFunction::GetHost() const>
   1c088:	e1a05000 	mov	r5, r0
   1c08c:	e1a00004 	mov	r0, r4
   1c090:	ebffd158 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c094:	e3a06004 	mov	r6, #4
   1c098:	e1a01000 	mov	r1, r0
   1c09c:	e28d3014 	add	r3, sp, #20
   1c0a0:	e1a00005 	mov	r0, r5
   1c0a4:	e58d3008 	str	r3, [sp, #8]
   1c0a8:	e3a05000 	mov	r5, #0
   1c0ac:	e3a03f45 	mov	r3, #276	@ 0x114
   1c0b0:	e3a02040 	mov	r2, #64	@ 0x40
   1c0b4:	e58d3004 	str	r3, [sp, #4]
   1c0b8:	e58d600c 	str	r6, [sp, #12]
   1c0bc:	e3a030a0 	mov	r3, #160	@ 0xa0
   1c0c0:	e58d5000 	str	r5, [sp]
   1c0c4:	ebffde55 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c0c8:	e1500005 	cmp	r0, r5
   1c0cc:	baffffe6 	blt	1c06c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c0d0:	e1a00004 	mov	r0, r4
   1c0d4:	ebfffe5c 	bl	1ba4c <CSMSC951xDevice::PHYWaitNotBusy()>
   1c0d8:	e1500005 	cmp	r0, r5
   1c0dc:	0affffe2 	beq	1c06c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c0e0:	e1a00004 	mov	r0, r4
   1c0e4:	ebffd14e 	bl	10624 <CUSBFunction::GetHost() const>
   1c0e8:	e1a03000 	mov	r3, r0
   1c0ec:	e1a00004 	mov	r0, r4
   1c0f0:	e1a04003 	mov	r4, r3
   1c0f4:	ebffd13f 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c0f8:	e3a03f46 	mov	r3, #280	@ 0x118
   1c0fc:	e1a01000 	mov	r1, r0
   1c100:	e28d2014 	add	r2, sp, #20
   1c104:	e58d3004 	str	r3, [sp, #4]
   1c108:	e1a00004 	mov	r0, r4
   1c10c:	e58d2008 	str	r2, [sp, #8]
   1c110:	e3a030a1 	mov	r3, #161	@ 0xa1
   1c114:	e3a020c0 	mov	r2, #192	@ 0xc0
   1c118:	e58d600c 	str	r6, [sp, #12]
   1c11c:	e58d5000 	str	r5, [sp]
   1c120:	ebffde3e 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c124:	e1500006 	cmp	r0, r6
   1c128:	1affffcf 	bne	1c06c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c12c:	e1dd31b4 	ldrh	r3, [sp, #20]
   1c130:	e3130a01 	tst	r3, #4096	@ 0x1000
   1c134:	0affffcc 	beq	1c06c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c138:	e7e23153 	ubfx	r3, r3, #2, #3
   1c13c:	e2433001 	sub	r3, r3, #1
   1c140:	e3530005 	cmp	r3, #5
   1c144:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   1c148:	eaffffc7 	b	1c06c <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x1c>
   1c14c:	0001c188 	.word	0x0001c188
   1c150:	0001c17c 	.word	0x0001c17c
   1c154:	0001c06c 	.word	0x0001c06c
   1c158:	0001c06c 	.word	0x0001c06c
   1c15c:	0001c170 	.word	0x0001c170
   1c160:	0001c164 	.word	0x0001c164
   1c164:	e3a00003 	mov	r0, #3
   1c168:	e28dd018 	add	sp, sp, #24
   1c16c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c170:	e3a00001 	mov	r0, #1
   1c174:	e28dd018 	add	sp, sp, #24
   1c178:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c17c:	e3a00002 	mov	r0, #2
   1c180:	e28dd018 	add	sp, sp, #24
   1c184:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c188:	e3a00000 	mov	r0, #0
   1c18c:	eaffffb7 	b	1c070 <non-virtual thunk to CSMSC951xDevice::GetLinkSpeed()+0x20>

0001c190 <CSMSC951xDevice::WriteReg(unsigned int, unsigned int)>:
   1c190:	e92d4070 	push	{r4, r5, r6, lr}
   1c194:	e1a04001 	mov	r4, r1
   1c198:	e1a06000 	mov	r6, r0
   1c19c:	e24dd018 	sub	sp, sp, #24
   1c1a0:	e6ff4074 	uxth	r4, r4
   1c1a4:	e58d2014 	str	r2, [sp, #20]
   1c1a8:	ebffd11d 	bl	10624 <CUSBFunction::GetHost() const>
   1c1ac:	e1a05000 	mov	r5, r0
   1c1b0:	e1a00006 	mov	r0, r6
   1c1b4:	ebffd10f 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c1b8:	e28d3014 	add	r3, sp, #20
   1c1bc:	e1a01000 	mov	r1, r0
   1c1c0:	e58d3008 	str	r3, [sp, #8]
   1c1c4:	e3a02004 	mov	r2, #4
   1c1c8:	e1a00005 	mov	r0, r5
   1c1cc:	e58d200c 	str	r2, [sp, #12]
   1c1d0:	e3a030a0 	mov	r3, #160	@ 0xa0
   1c1d4:	e3a02000 	mov	r2, #0
   1c1d8:	e88d0014 	stm	sp, {r2, r4}
   1c1dc:	e3a02040 	mov	r2, #64	@ 0x40
   1c1e0:	ebffde0e 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c1e4:	e1e00000 	mvn	r0, r0
   1c1e8:	e1a00fa0 	lsr	r0, r0, #31
   1c1ec:	e28dd018 	add	sp, sp, #24
   1c1f0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001c1f4 <CSMSC951xDevice::ReadReg(unsigned int, unsigned int*)>:
   1c1f4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1c1f8:	e1a04001 	mov	r4, r1
   1c1fc:	e1a07000 	mov	r7, r0
   1c200:	e24dd014 	sub	sp, sp, #20
   1c204:	e1a05002 	mov	r5, r2
   1c208:	ebffd105 	bl	10624 <CUSBFunction::GetHost() const>
   1c20c:	e1a06000 	mov	r6, r0
   1c210:	e1a00007 	mov	r0, r7
   1c214:	e6ff4074 	uxth	r4, r4
   1c218:	ebffd0f6 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c21c:	e3a0c000 	mov	ip, #0
   1c220:	e1a01000 	mov	r1, r0
   1c224:	e3a03004 	mov	r3, #4
   1c228:	e1a00006 	mov	r0, r6
   1c22c:	e58d300c 	str	r3, [sp, #12]
   1c230:	e3a020c0 	mov	r2, #192	@ 0xc0
   1c234:	e3a030a1 	mov	r3, #161	@ 0xa1
   1c238:	e1cd40f4 	strd	r4, [sp, #4]
   1c23c:	e58dc000 	str	ip, [sp]
   1c240:	ebffddf6 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c244:	e2400004 	sub	r0, r0, #4
   1c248:	e16f0f10 	clz	r0, r0
   1c24c:	e1a002a0 	lsr	r0, r0, #5
   1c250:	e28dd014 	add	sp, sp, #20
   1c254:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>:
   1c258:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1c25c:	e1a05002 	mov	r5, r2
   1c260:	e1a06000 	mov	r6, r0
   1c264:	e24dd01c 	sub	sp, sp, #28
   1c268:	e1a07001 	mov	r7, r1
   1c26c:	ebffd0ec 	bl	10624 <CUSBFunction::GetHost() const>
   1c270:	e1a04000 	mov	r4, r0
   1c274:	e1a00006 	mov	r0, r6
   1c278:	ebffd0de 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c27c:	e3a03004 	mov	r3, #4
   1c280:	e1a01000 	mov	r1, r0
   1c284:	e58d300c 	str	r3, [sp, #12]
   1c288:	e1a00004 	mov	r0, r4
   1c28c:	e28d3014 	add	r3, sp, #20
   1c290:	e3a020c0 	mov	r2, #192	@ 0xc0
   1c294:	e58d3008 	str	r3, [sp, #8]
   1c298:	e6ff3075 	uxth	r3, r5
   1c29c:	e58d3004 	str	r3, [sp, #4]
   1c2a0:	e3a03000 	mov	r3, #0
   1c2a4:	e58d3000 	str	r3, [sp]
   1c2a8:	e3a030a1 	mov	r3, #161	@ 0xa1
   1c2ac:	ebffdddb 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c2b0:	e3500004 	cmp	r0, #4
   1c2b4:	1a00000a 	bne	1c2e4 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0x8c>
   1c2b8:	e1a04000 	mov	r4, r0
   1c2bc:	eb004941 	bl	2e7c8 <CLogger::Get()>
   1c2c0:	e59d1014 	ldr	r1, [sp, #20]
   1c2c4:	e1a02004 	mov	r2, r4
   1c2c8:	e88d0082 	stm	sp, {r1, r7}
   1c2cc:	e30c33ac 	movw	r3, #50092	@ 0xc3ac
   1c2d0:	e3403003 	movt	r3, #3
   1c2d4:	e59f102c 	ldr	r1, [pc, #44]	@ 1c308 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0xb0>
   1c2d8:	eb004b03 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c2dc:	e28dd01c 	add	sp, sp, #28
   1c2e0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1c2e4:	eb004937 	bl	2e7c8 <CLogger::Get()>
   1c2e8:	e59f1018 	ldr	r1, [pc, #24]	@ 1c308 <CSMSC951xDevice::DumpReg(char const*, unsigned int)+0xb0>
   1c2ec:	e3a02001 	mov	r2, #1
   1c2f0:	e58d5000 	str	r5, [sp]
   1c2f4:	e30c3298 	movw	r3, #49816	@ 0xc298
   1c2f8:	e3403003 	movt	r3, #3
   1c2fc:	eb004afa 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c300:	e28dd01c 	add	sp, sp, #28
   1c304:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1c308:	0003f8e4 	.word	0x0003f8e4

0001c30c <CSMSC951xDevice::DumpRegs()>:
   1c30c:	e92d4010 	push	{r4, lr}
   1c310:	e3a02000 	mov	r2, #0
   1c314:	e1a04000 	mov	r4, r0
   1c318:	e30c13b4 	movw	r1, #50100	@ 0xc3b4
   1c31c:	e3401003 	movt	r1, #3
   1c320:	ebffffcc 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c324:	e1a00004 	mov	r0, r4
   1c328:	e3a02008 	mov	r2, #8
   1c32c:	e30c13bc 	movw	r1, #50108	@ 0xc3bc
   1c330:	e3401003 	movt	r1, #3
   1c334:	ebffffc7 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c338:	e1a00004 	mov	r0, r4
   1c33c:	e3a0200c 	mov	r2, #12
   1c340:	e30c13c4 	movw	r1, #50116	@ 0xc3c4
   1c344:	e3401003 	movt	r1, #3
   1c348:	ebffffc2 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c34c:	e1a00004 	mov	r0, r4
   1c350:	e3a02010 	mov	r2, #16
   1c354:	e30c13cc 	movw	r1, #50124	@ 0xc3cc
   1c358:	e3401003 	movt	r1, #3
   1c35c:	ebffffbd 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c360:	e1a00004 	mov	r0, r4
   1c364:	e3a02014 	mov	r2, #20
   1c368:	e30c13d4 	movw	r1, #50132	@ 0xc3d4
   1c36c:	e3401003 	movt	r1, #3
   1c370:	ebffffb8 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c374:	e1a00004 	mov	r0, r4
   1c378:	e3a02018 	mov	r2, #24
   1c37c:	e30c13dc 	movw	r1, #50140	@ 0xc3dc
   1c380:	e3401003 	movt	r1, #3
   1c384:	ebffffb3 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c388:	e1a00004 	mov	r0, r4
   1c38c:	e3a02020 	mov	r2, #32
   1c390:	e30c13e8 	movw	r1, #50152	@ 0xc3e8
   1c394:	e3401003 	movt	r1, #3
   1c398:	ebffffae 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c39c:	e1a00004 	mov	r0, r4
   1c3a0:	e3a02024 	mov	r2, #36	@ 0x24
   1c3a4:	e30c13f0 	movw	r1, #50160	@ 0xc3f0
   1c3a8:	e3401003 	movt	r1, #3
   1c3ac:	ebffffa9 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c3b0:	e1a00004 	mov	r0, r4
   1c3b4:	e3a02028 	mov	r2, #40	@ 0x28
   1c3b8:	e30c13f4 	movw	r1, #50164	@ 0xc3f4
   1c3bc:	e3401003 	movt	r1, #3
   1c3c0:	ebffffa4 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c3c4:	e1a00004 	mov	r0, r4
   1c3c8:	e3a0202c 	mov	r2, #44	@ 0x2c
   1c3cc:	e30c1400 	movw	r1, #50176	@ 0xc400
   1c3d0:	e3401003 	movt	r1, #3
   1c3d4:	ebffff9f 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c3d8:	e1a00004 	mov	r0, r4
   1c3dc:	e3a02038 	mov	r2, #56	@ 0x38
   1c3e0:	e30c1408 	movw	r1, #50184	@ 0xc408
   1c3e4:	e3401003 	movt	r1, #3
   1c3e8:	ebffff9a 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c3ec:	e1a00004 	mov	r0, r4
   1c3f0:	e3a02068 	mov	r2, #104	@ 0x68
   1c3f4:	e30c1414 	movw	r1, #50196	@ 0xc414
   1c3f8:	e3401003 	movt	r1, #3
   1c3fc:	ebffff95 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c400:	e1a00004 	mov	r0, r4
   1c404:	e3a0206c 	mov	r2, #108	@ 0x6c
   1c408:	e30c1420 	movw	r1, #50208	@ 0xc420
   1c40c:	e3401003 	movt	r1, #3
   1c410:	ebffff90 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c414:	e1a00004 	mov	r0, r4
   1c418:	e3a02c01 	mov	r2, #256	@ 0x100
   1c41c:	e30c142c 	movw	r1, #50220	@ 0xc42c
   1c420:	e3401003 	movt	r1, #3
   1c424:	ebffff8b 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c428:	e1a00004 	mov	r0, r4
   1c42c:	e3a02f41 	mov	r2, #260	@ 0x104
   1c430:	e30c1434 	movw	r1, #50228	@ 0xc434
   1c434:	e3401003 	movt	r1, #3
   1c438:	ebffff86 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c43c:	e1a00004 	mov	r0, r4
   1c440:	e3a02f42 	mov	r2, #264	@ 0x108
   1c444:	e30c143c 	movw	r1, #50236	@ 0xc43c
   1c448:	e3401003 	movt	r1, #3
   1c44c:	ebffff81 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c450:	e1a00004 	mov	r0, r4
   1c454:	e3a02f43 	mov	r2, #268	@ 0x10c
   1c458:	e30c1444 	movw	r1, #50244	@ 0xc444
   1c45c:	e3401003 	movt	r1, #3
   1c460:	ebffff7c 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c464:	e1a00004 	mov	r0, r4
   1c468:	e3a02e11 	mov	r2, #272	@ 0x110
   1c46c:	e30c144c 	movw	r1, #50252	@ 0xc44c
   1c470:	e3401003 	movt	r1, #3
   1c474:	ebffff77 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c478:	e1a00004 	mov	r0, r4
   1c47c:	e3a02f47 	mov	r2, #284	@ 0x11c
   1c480:	e30c1454 	movw	r1, #50260	@ 0xc454
   1c484:	e3401003 	movt	r1, #3
   1c488:	ebffff72 	bl	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>
   1c48c:	e1a00004 	mov	r0, r4
   1c490:	e30c145c 	movw	r1, #50268	@ 0xc45c
   1c494:	e3401003 	movt	r1, #3
   1c498:	e8bd4010 	pop	{r4, lr}
   1c49c:	e3a02f4b 	mov	r2, #300	@ 0x12c
   1c4a0:	eaffff6c 	b	1c258 <CSMSC951xDevice::DumpReg(char const*, unsigned int)>

0001c4a4 <CSMSC951xDevice::Configure()>:
   1c4a4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1c4a8:	e3a01000 	mov	r1, #0
   1c4ac:	e1a05000 	mov	r5, r0
   1c4b0:	e24dd04c 	sub	sp, sp, #76	@ 0x4c
   1c4b4:	e28d001c 	add	r0, sp, #28
   1c4b8:	eb003e68 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1c4bc:	e3a01000 	mov	r1, #0
   1c4c0:	e3a03014 	mov	r3, #20
   1c4c4:	e58d1000 	str	r1, [sp]
   1c4c8:	e28d2034 	add	r2, sp, #52	@ 0x34
   1c4cc:	e3a01003 	mov	r1, #3
   1c4d0:	e3401001 	movt	r1, #1
   1c4d4:	e28d001c 	add	r0, sp, #28
   1c4d8:	eb003eb2 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1c4dc:	e2506000 	subs	r6, r0, #0
   1c4e0:	0a0000ae 	beq	1c7a0 <CSMSC951xDevice::Configure()+0x2fc>
   1c4e4:	e2857020 	add	r7, r5, #32
   1c4e8:	e28d1040 	add	r1, sp, #64	@ 0x40
   1c4ec:	e1a00007 	mov	r0, r7
   1c4f0:	eb00663c 	bl	35de8 <CMACAddress::Set(unsigned char const*)>
   1c4f4:	e28d0024 	add	r0, sp, #36	@ 0x24
   1c4f8:	eb005951 	bl	32a44 <CString::CString()>
   1c4fc:	e28d1024 	add	r1, sp, #36	@ 0x24
   1c500:	e1a00007 	mov	r0, r7
   1c504:	eb00668a 	bl	35f34 <CMACAddress::Format(CString*) const>
   1c508:	eb0048ae 	bl	2e7c8 <CLogger::Get()>
   1c50c:	e1a04000 	mov	r4, r0
   1c510:	e28d0024 	add	r0, sp, #36	@ 0x24
   1c514:	eb005982 	bl	32b24 <CString::operator char const*() const>
   1c518:	e59f1324 	ldr	r1, [pc, #804]	@ 1c844 <CSMSC951xDevice::Configure()+0x3a0>
   1c51c:	e3a02004 	mov	r2, #4
   1c520:	e58d0000 	str	r0, [sp]
   1c524:	e30c3304 	movw	r3, #49924	@ 0xc304
   1c528:	e3403003 	movt	r3, #3
   1c52c:	e1a00004 	mov	r0, r4
   1c530:	eb004a6d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c534:	e1a00005 	mov	r0, r5
   1c538:	ebffd018 	bl	105a0 <CUSBFunction::GetNumEndpoints() const>
   1c53c:	e3500003 	cmp	r0, #3
   1c540:	0a00000e 	beq	1c580 <CSMSC951xDevice::Configure()+0xdc>
   1c544:	e59f12f8 	ldr	r1, [pc, #760]	@ 1c844 <CSMSC951xDevice::Configure()+0x3a0>
   1c548:	e1a00005 	mov	r0, r5
   1c54c:	ebffd04a 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   1c550:	e3a06000 	mov	r6, #0
   1c554:	e28d0024 	add	r0, sp, #36	@ 0x24
   1c558:	eb005906 	bl	32978 <CString::~CString()>
   1c55c:	e28d001c 	add	r0, sp, #28
   1c560:	eb003e45 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   1c564:	e1a00006 	mov	r0, r6
   1c568:	e28dd04c 	add	sp, sp, #76	@ 0x4c
   1c56c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c570:	e5d43003 	ldrb	r3, [r4, #3]
   1c574:	e203303f 	and	r3, r3, #63	@ 0x3f
   1c578:	e3530002 	cmp	r3, #2
   1c57c:	0a000076 	beq	1c75c <CSMSC951xDevice::Configure()+0x2b8>
   1c580:	e3a01005 	mov	r1, #5
   1c584:	e1a00005 	mov	r0, r5
   1c588:	ebffd030 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   1c58c:	e2504000 	subs	r4, r0, #0
   1c590:	1afffff6 	bne	1c570 <CSMSC951xDevice::Configure()+0xcc>
   1c594:	e5953018 	ldr	r3, [r5, #24]
   1c598:	e3530000 	cmp	r3, #0
   1c59c:	0affffe8 	beq	1c544 <CSMSC951xDevice::Configure()+0xa0>
   1c5a0:	e595301c 	ldr	r3, [r5, #28]
   1c5a4:	e3530000 	cmp	r3, #0
   1c5a8:	0affffe5 	beq	1c544 <CSMSC951xDevice::Configure()+0xa0>
   1c5ac:	e1a00005 	mov	r0, r5
   1c5b0:	ebffcf33 	bl	10284 <CUSBFunction::Configure()>
   1c5b4:	e2506000 	subs	r6, r0, #0
   1c5b8:	0a00007f 	beq	1c7bc <CSMSC951xDevice::Configure()+0x318>
   1c5bc:	e28d1014 	add	r1, sp, #20
   1c5c0:	e1a00007 	mov	r0, r7
   1c5c4:	eb00662c 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   1c5c8:	e1dd31b8 	ldrh	r3, [sp, #24]
   1c5cc:	e1a00005 	mov	r0, r5
   1c5d0:	e58d3010 	str	r3, [sp, #16]
   1c5d4:	e59d9014 	ldr	r9, [sp, #20]
   1c5d8:	ebffd011 	bl	10624 <CUSBFunction::GetHost() const>
   1c5dc:	e1a07000 	mov	r7, r0
   1c5e0:	e1a00005 	mov	r0, r5
   1c5e4:	ebffd003 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c5e8:	e28d8010 	add	r8, sp, #16
   1c5ec:	e1a01000 	mov	r1, r0
   1c5f0:	e3a03f41 	mov	r3, #260	@ 0x104
   1c5f4:	e1a00007 	mov	r0, r7
   1c5f8:	e58d3004 	str	r3, [sp, #4]
   1c5fc:	e3a07004 	mov	r7, #4
   1c600:	e3a030a0 	mov	r3, #160	@ 0xa0
   1c604:	e3a02040 	mov	r2, #64	@ 0x40
   1c608:	e58d4000 	str	r4, [sp]
   1c60c:	e58d700c 	str	r7, [sp, #12]
   1c610:	e58d8008 	str	r8, [sp, #8]
   1c614:	ebffdd01 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c618:	e3500000 	cmp	r0, #0
   1c61c:	ba00007a 	blt	1c80c <CSMSC951xDevice::Configure()+0x368>
   1c620:	e1a00005 	mov	r0, r5
   1c624:	e58d9010 	str	r9, [sp, #16]
   1c628:	ebffcffd 	bl	10624 <CUSBFunction::GetHost() const>
   1c62c:	e1a09000 	mov	r9, r0
   1c630:	e1a00005 	mov	r0, r5
   1c634:	ebffcfef 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c638:	e3a03f42 	mov	r3, #264	@ 0x108
   1c63c:	e1a01000 	mov	r1, r0
   1c640:	e58d3004 	str	r3, [sp, #4]
   1c644:	e1a00009 	mov	r0, r9
   1c648:	e3a030a0 	mov	r3, #160	@ 0xa0
   1c64c:	e3a02040 	mov	r2, #64	@ 0x40
   1c650:	e58d700c 	str	r7, [sp, #12]
   1c654:	e58d8008 	str	r8, [sp, #8]
   1c658:	e58d4000 	str	r4, [sp]
   1c65c:	ebffdcef 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c660:	e3500000 	cmp	r0, #0
   1c664:	ba000068 	blt	1c80c <CSMSC951xDevice::Configure()+0x368>
   1c668:	e1a00005 	mov	r0, r5
   1c66c:	e3a03000 	mov	r3, #0
   1c670:	e3403111 	movt	r3, #273	@ 0x111
   1c674:	e58d3010 	str	r3, [sp, #16]
   1c678:	ebffcfe9 	bl	10624 <CUSBFunction::GetHost() const>
   1c67c:	e1a09000 	mov	r9, r0
   1c680:	e1a00005 	mov	r0, r5
   1c684:	ebffcfdb 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c688:	e3a03024 	mov	r3, #36	@ 0x24
   1c68c:	e1a01000 	mov	r1, r0
   1c690:	e58d3004 	str	r3, [sp, #4]
   1c694:	e1a00009 	mov	r0, r9
   1c698:	e3a030a0 	mov	r3, #160	@ 0xa0
   1c69c:	e3a02040 	mov	r2, #64	@ 0x40
   1c6a0:	e58d700c 	str	r7, [sp, #12]
   1c6a4:	e58d8008 	str	r8, [sp, #8]
   1c6a8:	e58d4000 	str	r4, [sp]
   1c6ac:	ebffdcdb 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c6b0:	e3500000 	cmp	r0, #0
   1c6b4:	ba00005b 	blt	1c828 <CSMSC951xDevice::Configure()+0x384>
   1c6b8:	e1a00005 	mov	r0, r5
   1c6bc:	e3a0300c 	mov	r3, #12
   1c6c0:	e3403080 	movt	r3, #128	@ 0x80
   1c6c4:	e58d3010 	str	r3, [sp, #16]
   1c6c8:	ebffcfd5 	bl	10624 <CUSBFunction::GetHost() const>
   1c6cc:	e1a09000 	mov	r9, r0
   1c6d0:	e1a00005 	mov	r0, r5
   1c6d4:	ebffcfc7 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c6d8:	e3a03c01 	mov	r3, #256	@ 0x100
   1c6dc:	e1a01000 	mov	r1, r0
   1c6e0:	e58d3004 	str	r3, [sp, #4]
   1c6e4:	e1a00009 	mov	r0, r9
   1c6e8:	e3a030a0 	mov	r3, #160	@ 0xa0
   1c6ec:	e3a02040 	mov	r2, #64	@ 0x40
   1c6f0:	e58d700c 	str	r7, [sp, #12]
   1c6f4:	e58d8008 	str	r8, [sp, #8]
   1c6f8:	e58d4000 	str	r4, [sp]
   1c6fc:	ebffdcc7 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c700:	e3500000 	cmp	r0, #0
   1c704:	ba000047 	blt	1c828 <CSMSC951xDevice::Configure()+0x384>
   1c708:	e1a00005 	mov	r0, r5
   1c70c:	e58d7010 	str	r7, [sp, #16]
   1c710:	ebffcfc3 	bl	10624 <CUSBFunction::GetHost() const>
   1c714:	e1a09000 	mov	r9, r0
   1c718:	e1a00005 	mov	r0, r5
   1c71c:	ebffcfb5 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c720:	e3a03010 	mov	r3, #16
   1c724:	e1a01000 	mov	r1, r0
   1c728:	e58d3004 	str	r3, [sp, #4]
   1c72c:	e1a00009 	mov	r0, r9
   1c730:	e3a030a0 	mov	r3, #160	@ 0xa0
   1c734:	e3a02040 	mov	r2, #64	@ 0x40
   1c738:	e58d700c 	str	r7, [sp, #12]
   1c73c:	e58d8008 	str	r8, [sp, #8]
   1c740:	e58d4000 	str	r4, [sp]
   1c744:	ebffdcb5 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c748:	e3500000 	cmp	r0, #0
   1c74c:	ba000035 	blt	1c828 <CSMSC951xDevice::Configure()+0x384>
   1c750:	e2850014 	add	r0, r5, #20
   1c754:	eb006619 	bl	35fc0 <CNetDevice::AddNetDevice()>
   1c758:	eaffff7d 	b	1c554 <CSMSC951xDevice::Configure()+0xb0>
   1c75c:	e1d430d2 	ldrsb	r3, [r4, #2]
   1c760:	e3a00014 	mov	r0, #20
   1c764:	e3530000 	cmp	r3, #0
   1c768:	ba00001a 	blt	1c7d8 <CSMSC951xDevice::Configure()+0x334>
   1c76c:	e595301c 	ldr	r3, [r5, #28]
   1c770:	e3530000 	cmp	r3, #0
   1c774:	1affff72 	bne	1c544 <CSMSC951xDevice::Configure()+0xa0>
   1c778:	eb006669 	bl	36124 <operator new(unsigned int)>
   1c77c:	e1a06000 	mov	r6, r0
   1c780:	e1a00005 	mov	r0, r5
   1c784:	ebffcf91 	bl	105d0 <CUSBFunction::GetDevice() const>
   1c788:	e1a02004 	mov	r2, r4
   1c78c:	e1a01000 	mov	r1, r0
   1c790:	e1a00006 	mov	r0, r6
   1c794:	ebffcd9b 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1c798:	e585601c 	str	r6, [r5, #28]
   1c79c:	eaffff77 	b	1c580 <CSMSC951xDevice::Configure()+0xdc>
   1c7a0:	eb004808 	bl	2e7c8 <CLogger::Get()>
   1c7a4:	e59f1098 	ldr	r1, [pc, #152]	@ 1c844 <CSMSC951xDevice::Configure()+0x3a0>
   1c7a8:	e3a02001 	mov	r2, #1
   1c7ac:	e30c3464 	movw	r3, #50276	@ 0xc464
   1c7b0:	e3403003 	movt	r3, #3
   1c7b4:	eb0049cc 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c7b8:	eaffff67 	b	1c55c <CSMSC951xDevice::Configure()+0xb8>
   1c7bc:	eb004801 	bl	2e7c8 <CLogger::Get()>
   1c7c0:	e59f107c 	ldr	r1, [pc, #124]	@ 1c844 <CSMSC951xDevice::Configure()+0x3a0>
   1c7c4:	e3a02001 	mov	r2, #1
   1c7c8:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   1c7cc:	e3403003 	movt	r3, #3
   1c7d0:	eb0049c5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c7d4:	eaffff5d 	b	1c550 <CSMSC951xDevice::Configure()+0xac>
   1c7d8:	e5953018 	ldr	r3, [r5, #24]
   1c7dc:	e3530000 	cmp	r3, #0
   1c7e0:	1affff57 	bne	1c544 <CSMSC951xDevice::Configure()+0xa0>
   1c7e4:	eb00664e 	bl	36124 <operator new(unsigned int)>
   1c7e8:	e1a06000 	mov	r6, r0
   1c7ec:	e1a00005 	mov	r0, r5
   1c7f0:	ebffcf76 	bl	105d0 <CUSBFunction::GetDevice() const>
   1c7f4:	e1a02004 	mov	r2, r4
   1c7f8:	e1a01000 	mov	r1, r0
   1c7fc:	e1a00006 	mov	r0, r6
   1c800:	ebffcd80 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1c804:	e5856018 	str	r6, [r5, #24]
   1c808:	eaffff5c 	b	1c580 <CSMSC951xDevice::Configure()+0xdc>
   1c80c:	eb0047ed 	bl	2e7c8 <CLogger::Get()>
   1c810:	e59f102c 	ldr	r1, [pc, #44]	@ 1c844 <CSMSC951xDevice::Configure()+0x3a0>
   1c814:	e3a02001 	mov	r2, #1
   1c818:	e30c347c 	movw	r3, #50300	@ 0xc47c
   1c81c:	e3403003 	movt	r3, #3
   1c820:	eb0049b1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c824:	eaffff49 	b	1c550 <CSMSC951xDevice::Configure()+0xac>
   1c828:	eb0047e6 	bl	2e7c8 <CLogger::Get()>
   1c82c:	e59f1010 	ldr	r1, [pc, #16]	@ 1c844 <CSMSC951xDevice::Configure()+0x3a0>
   1c830:	e3a02001 	mov	r2, #1
   1c834:	e30c3494 	movw	r3, #50324	@ 0xc494
   1c838:	e3403003 	movt	r3, #3
   1c83c:	eb0049aa 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1c840:	eaffff42 	b	1c550 <CSMSC951xDevice::Configure()+0xac>
   1c844:	0003f8e4 	.word	0x0003f8e4

0001c848 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1c848:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
   1c84c:	e92d4070 	push	{r4, r5, r6, lr}
   1c850:	e3a06000 	mov	r6, #0
   1c854:	e59f50d8 	ldr	r5, [pc, #216]	@ 1c934 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xec>
   1c858:	e1a04000 	mov	r4, r0
   1c85c:	e1530006 	cmp	r3, r6
   1c860:	e5805000 	str	r5, [r0]
   1c864:	e5806024 	str	r6, [r0, #36]	@ 0x24
   1c868:	1a000027 	bne	1c90c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xc4>
   1c86c:	e5940020 	ldr	r0, [r4, #32]
   1c870:	e3500000 	cmp	r0, #0
   1c874:	0a000000 	beq	1c87c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x34>
   1c878:	eb00663b 	bl	3616c <operator delete[](void*)>
   1c87c:	e594501c 	ldr	r5, [r4, #28]
   1c880:	e3a03000 	mov	r3, #0
   1c884:	e5843020 	str	r3, [r4, #32]
   1c888:	e1550003 	cmp	r5, r3
   1c88c:	0a000004 	beq	1c8a4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x5c>
   1c890:	e1a00005 	mov	r0, r5
   1c894:	ebffcdd5 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1c898:	e3a01014 	mov	r1, #20
   1c89c:	e1a00005 	mov	r0, r5
   1c8a0:	eb006637 	bl	36184 <operator delete(void*, unsigned int)>
   1c8a4:	e5945018 	ldr	r5, [r4, #24]
   1c8a8:	e3a03000 	mov	r3, #0
   1c8ac:	e584301c 	str	r3, [r4, #28]
   1c8b0:	e1550003 	cmp	r5, r3
   1c8b4:	0a000004 	beq	1c8cc <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x84>
   1c8b8:	e1a00005 	mov	r0, r5
   1c8bc:	ebffcdcb 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1c8c0:	e3a01014 	mov	r1, #20
   1c8c4:	e1a00005 	mov	r0, r5
   1c8c8:	eb00662d 	bl	36184 <operator delete(void*, unsigned int)>
   1c8cc:	e5945014 	ldr	r5, [r4, #20]
   1c8d0:	e3a03000 	mov	r3, #0
   1c8d4:	e5843018 	str	r3, [r4, #24]
   1c8d8:	e1550003 	cmp	r5, r3
   1c8dc:	0a000004 	beq	1c8f4 <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0xac>
   1c8e0:	e1a00005 	mov	r0, r5
   1c8e4:	ebffcdc1 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1c8e8:	e3a01014 	mov	r1, #20
   1c8ec:	e1a00005 	mov	r0, r5
   1c8f0:	eb006623 	bl	36184 <operator delete(void*, unsigned int)>
   1c8f4:	e3a03000 	mov	r3, #0
   1c8f8:	e1a00004 	mov	r0, r4
   1c8fc:	e5843014 	str	r3, [r4, #20]
   1c900:	ebffce25 	bl	1019c <CUSBFunction::~CUSBFunction()>
   1c904:	e1a00004 	mov	r0, r4
   1c908:	e8bd8070 	pop	{r4, r5, r6, pc}
   1c90c:	eb0040c6 	bl	2cc2c <CDeviceNameService::Get()>
   1c910:	e285102c 	add	r1, r5, #44	@ 0x2c
   1c914:	e5942028 	ldr	r2, [r4, #40]	@ 0x28
   1c918:	e1a03006 	mov	r3, r6
   1c91c:	eb0040e8 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1c920:	e5941028 	ldr	r1, [r4, #40]	@ 0x28
   1c924:	e30400d8 	movw	r0, #16600	@ 0x40d8
   1c928:	e3400004 	movt	r0, #4
   1c92c:	eb00677c 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   1c930:	eaffffcd 	b	1c86c <CUSBBluetoothDevice::~CUSBBluetoothDevice()+0x24>
   1c934:	0003f8f8 	.word	0x0003f8f8

0001c938 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>:
   1c938:	e92d4010 	push	{r4, lr}
   1c93c:	e1a04000 	mov	r4, r0
   1c940:	ebffffc0 	bl	1c848 <CUSBBluetoothDevice::~CUSBBluetoothDevice()>
   1c944:	e1a00004 	mov	r0, r4
   1c948:	e3a0102c 	mov	r1, #44	@ 0x2c
   1c94c:	eb00660c 	bl	36184 <operator delete(void*, unsigned int)>
   1c950:	e1a00004 	mov	r0, r4
   1c954:	e8bd8010 	pop	{r4, pc}

0001c958 <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)>:
   1c958:	e92d4010 	push	{r4, lr}
   1c95c:	e1a04000 	mov	r4, r0
   1c960:	ebffceb6 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1c964:	e1a03004 	mov	r3, r4
   1c968:	e59f101c 	ldr	r1, [pc, #28]	@ 1c98c <CUSBBluetoothDevice::CUSBBluetoothDevice(CUSBFunction*)+0x34>
   1c96c:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   1c970:	e3a02000 	mov	r2, #0
   1c974:	e1a00004 	mov	r0, r4
   1c978:	e4831014 	str	r1, [r3], #20
   1c97c:	f4430a8f 	vst1.32	{d16-d17}, [r3]
   1c980:	e5842024 	str	r2, [r4, #36]	@ 0x24
   1c984:	e5842028 	str	r2, [r4, #40]	@ 0x28
   1c988:	e8bd8010 	pop	{r4, pc}
   1c98c:	0003f8f8 	.word	0x0003f8f8

0001c990 <CUSBBluetoothDevice::SendHCICommand(void const*, unsigned int)>:
   1c990:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1c994:	e1a04002 	mov	r4, r2
   1c998:	e1a07000 	mov	r7, r0
   1c99c:	e24dd014 	sub	sp, sp, #20
   1c9a0:	e1a05001 	mov	r5, r1
   1c9a4:	ebffcf1e 	bl	10624 <CUSBFunction::GetHost() const>
   1c9a8:	e1a06000 	mov	r6, r0
   1c9ac:	e1a00007 	mov	r0, r7
   1c9b0:	e6ff4074 	uxth	r4, r4
   1c9b4:	ebffcf0f 	bl	105f8 <CUSBFunction::GetEndpoint0() const>
   1c9b8:	e3a03000 	mov	r3, #0
   1c9bc:	e1a01000 	mov	r1, r0
   1c9c0:	e3a02020 	mov	r2, #32
   1c9c4:	e1a00006 	mov	r0, r6
   1c9c8:	e58d400c 	str	r4, [sp, #12]
   1c9cc:	e58d5008 	str	r5, [sp, #8]
   1c9d0:	e58d3004 	str	r3, [sp, #4]
   1c9d4:	e58d3000 	str	r3, [sp]
   1c9d8:	ebffdc10 	bl	13a20 <CUSBHostController::ControlMessage(CUSBEndpoint*, unsigned char, unsigned char, unsigned short, unsigned short, void*, unsigned short)>
   1c9dc:	e1e00000 	mvn	r0, r0
   1c9e0:	e1a00fa0 	lsr	r0, r0, #31
   1c9e4:	e28dd014 	add	sp, sp, #20
   1c9e8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001c9ec <CUSBBluetoothDevice::StartRequest()>:
   1c9ec:	e5903014 	ldr	r3, [r0, #20]
   1c9f0:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1c9f4:	e3530000 	cmp	r3, #0
   1c9f8:	e24dd00c 	sub	sp, sp, #12
   1c9fc:	0a000020 	beq	1ca84 <CUSBBluetoothDevice::StartRequest()+0x98>
   1ca00:	e5903020 	ldr	r3, [r0, #32]
   1ca04:	e1a04000 	mov	r4, r0
   1ca08:	e3530000 	cmp	r3, #0
   1ca0c:	0a000022 	beq	1ca9c <CUSBBluetoothDevice::StartRequest()+0xb0>
   1ca10:	e3a00070 	mov	r0, #112	@ 0x70
   1ca14:	ebffe73a 	bl	16704 <CUSBRequest::operator new(unsigned int)>
   1ca18:	e5946014 	ldr	r6, [r4, #20]
   1ca1c:	e5947020 	ldr	r7, [r4, #32]
   1ca20:	e1a05000 	mov	r5, r0
   1ca24:	e1a00006 	mov	r0, r6
   1ca28:	ebffcd85 	bl	10044 <CUSBEndpoint::GetMaxPacketSize() const>
   1ca2c:	e1a02007 	mov	r2, r7
   1ca30:	e1a03000 	mov	r3, r0
   1ca34:	e1a01006 	mov	r1, r6
   1ca38:	e1a00005 	mov	r0, r5
   1ca3c:	e3a06000 	mov	r6, #0
   1ca40:	e58d6000 	str	r6, [sp]
   1ca44:	ebffe664 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1ca48:	e1a03004 	mov	r3, r4
   1ca4c:	e1a02006 	mov	r2, r6
   1ca50:	e1a00005 	mov	r0, r5
   1ca54:	e30c1be8 	movw	r1, #52200	@ 0xcbe8
   1ca58:	e3401001 	movt	r1, #1
   1ca5c:	ebffe709 	bl	16688 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1ca60:	e1a00004 	mov	r0, r4
   1ca64:	ebffceee 	bl	10624 <CUSBFunction::GetHost() const>
   1ca68:	e5903000 	ldr	r3, [r0]
   1ca6c:	e1a02006 	mov	r2, r6
   1ca70:	e1a01005 	mov	r1, r5
   1ca74:	e5933014 	ldr	r3, [r3, #20]
   1ca78:	e28dd00c 	add	sp, sp, #12
   1ca7c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
   1ca80:	e12fff13 	bx	r3
   1ca84:	e30c14a8 	movw	r1, #50344	@ 0xc4a8
   1ca88:	e3401003 	movt	r1, #3
   1ca8c:	e30c04bc 	movw	r0, #50364	@ 0xc4bc
   1ca90:	e3400003 	movt	r0, #3
   1ca94:	e3a020ac 	mov	r2, #172	@ 0xac
   1ca98:	eb003ccf 	bl	2bddc <assertion_failed>
   1ca9c:	e30c14a8 	movw	r1, #50344	@ 0xc4a8
   1caa0:	e3401003 	movt	r1, #3
   1caa4:	e30c04d8 	movw	r0, #50392	@ 0xc4d8
   1caa8:	e3400003 	movt	r0, #3
   1caac:	e3a020ad 	mov	r2, #173	@ 0xad
   1cab0:	eb003cc9 	bl	2bddc <assertion_failed>

0001cab4 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))>:
   1cab4:	e3510000 	cmp	r1, #0
   1cab8:	e5801024 	str	r1, [r0, #36]	@ 0x24
   1cabc:	0a000000 	beq	1cac4 <CUSBBluetoothDevice::RegisterHCIEventHandler(void (*)(void const*, unsigned int))+0x10>
   1cac0:	eaffffc9 	b	1c9ec <CUSBBluetoothDevice::StartRequest()>
   1cac4:	e30c14a8 	movw	r1, #50344	@ 0xc4a8
   1cac8:	e3401003 	movt	r1, #3
   1cacc:	e30c04ec 	movw	r0, #50412	@ 0xc4ec
   1cad0:	e3400003 	movt	r0, #3
   1cad4:	e3a020a5 	mov	r2, #165	@ 0xa5
   1cad8:	e92d4010 	push	{r4, lr}
   1cadc:	eb003cbe 	bl	2bddc <assertion_failed>

0001cae0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>:
   1cae0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1cae4:	e2514000 	subs	r4, r1, #0
   1cae8:	0a000031 	beq	1cbb4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xd4>
   1caec:	e1a05000 	mov	r5, r0
   1caf0:	e1a00004 	mov	r0, r4
   1caf4:	ebffe66d 	bl	164b0 <CUSBRequest::GetStatus() const>
   1caf8:	e3500000 	cmp	r0, #0
   1cafc:	0a00001a 	beq	1cb6c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x8c>
   1cb00:	e5956024 	ldr	r6, [r5, #36]	@ 0x24
   1cb04:	e3560000 	cmp	r6, #0
   1cb08:	0a00002f 	beq	1cbcc <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xec>
   1cb0c:	e5957020 	ldr	r7, [r5, #32]
   1cb10:	e3570000 	cmp	r7, #0
   1cb14:	0a000020 	beq	1cb9c <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0xbc>
   1cb18:	e1a00004 	mov	r0, r4
   1cb1c:	ebffe665 	bl	164b8 <CUSBRequest::GetResultLength() const>
   1cb20:	e1a01000 	mov	r1, r0
   1cb24:	e1a00007 	mov	r0, r7
   1cb28:	e12fff36 	blx	r6
   1cb2c:	e1a00004 	mov	r0, r4
   1cb30:	ebffe64d 	bl	1646c <CUSBRequest::~CUSBRequest()>
   1cb34:	e3a01070 	mov	r1, #112	@ 0x70
   1cb38:	e1a00004 	mov	r0, r4
   1cb3c:	ebffe706 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   1cb40:	e1a00005 	mov	r0, r5
   1cb44:	ebffffa8 	bl	1c9ec <CUSBBluetoothDevice::StartRequest()>
   1cb48:	e3500000 	cmp	r0, #0
   1cb4c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
   1cb50:	eb00471c 	bl	2e7c8 <CLogger::Get()>
   1cb54:	e30b3494 	movw	r3, #46228	@ 0xb494
   1cb58:	e3403003 	movt	r3, #3
   1cb5c:	e59f1080 	ldr	r1, [pc, #128]	@ 1cbe4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   1cb60:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1cb64:	e3a02001 	mov	r2, #1
   1cb68:	ea0048df 	b	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cb6c:	eb004715 	bl	2e7c8 <CLogger::Get()>
   1cb70:	e59f106c 	ldr	r1, [pc, #108]	@ 1cbe4 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)+0x104>
   1cb74:	e3a02002 	mov	r2, #2
   1cb78:	e30c3504 	movw	r3, #50436	@ 0xc504
   1cb7c:	e3403003 	movt	r3, #3
   1cb80:	eb0048d9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cb84:	e1a00004 	mov	r0, r4
   1cb88:	ebffe637 	bl	1646c <CUSBRequest::~CUSBRequest()>
   1cb8c:	e1a00004 	mov	r0, r4
   1cb90:	e3a01070 	mov	r1, #112	@ 0x70
   1cb94:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1cb98:	eaffe6ef 	b	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   1cb9c:	e30c14a8 	movw	r1, #50344	@ 0xc4a8
   1cba0:	e3401003 	movt	r1, #3
   1cba4:	e30c04d8 	movw	r0, #50392	@ 0xc4d8
   1cba8:	e3400003 	movt	r0, #3
   1cbac:	e3a020c1 	mov	r2, #193	@ 0xc1
   1cbb0:	eb003c89 	bl	2bddc <assertion_failed>
   1cbb4:	e30c14a8 	movw	r1, #50344	@ 0xc4a8
   1cbb8:	e3401003 	movt	r1, #3
   1cbbc:	e3090e38 	movw	r0, #40504	@ 0x9e38
   1cbc0:	e3400003 	movt	r0, #3
   1cbc4:	e3a020ba 	mov	r2, #186	@ 0xba
   1cbc8:	eb003c83 	bl	2bddc <assertion_failed>
   1cbcc:	e30c14a8 	movw	r1, #50344	@ 0xc4a8
   1cbd0:	e3401003 	movt	r1, #3
   1cbd4:	e30c04ec 	movw	r0, #50412	@ 0xc4ec
   1cbd8:	e3400003 	movt	r0, #3
   1cbdc:	e3a020c0 	mov	r2, #192	@ 0xc0
   1cbe0:	eb003c7d 	bl	2bddc <assertion_failed>
   1cbe4:	0003f928 	.word	0x0003f928

0001cbe8 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1cbe8:	e1a01000 	mov	r1, r0
   1cbec:	e2520000 	subs	r0, r2, #0
   1cbf0:	0a000000 	beq	1cbf8 <CUSBBluetoothDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   1cbf4:	eaffffb9 	b	1cae0 <CUSBBluetoothDevice::CompletionRoutine(CUSBRequest*)>
   1cbf8:	e30c14a8 	movw	r1, #50344	@ 0xc4a8
   1cbfc:	e3401003 	movt	r1, #3
   1cc00:	e3090d50 	movw	r0, #40272	@ 0x9d50
   1cc04:	e3400003 	movt	r0, #3
   1cc08:	e3a020d7 	mov	r2, #215	@ 0xd7
   1cc0c:	e92d4010 	push	{r4, lr}
   1cc10:	eb003c71 	bl	2bddc <assertion_failed>

0001cc14 <CUSBBluetoothDevice::Configure()>:
   1cc14:	e92d4070 	push	{r4, r5, r6, lr}
   1cc18:	e1a05000 	mov	r5, r0
   1cc1c:	e24dd008 	sub	sp, sp, #8
   1cc20:	ebffcede 	bl	107a0 <CUSBFunction::GetInterfaceNumber() const>
   1cc24:	e3500000 	cmp	r0, #0
   1cc28:	1a00004b 	bne	1cd5c <CUSBBluetoothDevice::Configure()+0x148>
   1cc2c:	e1a00005 	mov	r0, r5
   1cc30:	ebffce5a 	bl	105a0 <CUSBFunction::GetNumEndpoints() const>
   1cc34:	e3500003 	cmp	r0, #3
   1cc38:	1a000021 	bne	1ccc4 <CUSBBluetoothDevice::Configure()+0xb0>
   1cc3c:	e3a01005 	mov	r1, #5
   1cc40:	e1a00005 	mov	r0, r5
   1cc44:	ebffce81 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   1cc48:	e2504000 	subs	r4, r0, #0
   1cc4c:	0a000013 	beq	1cca0 <CUSBBluetoothDevice::Configure()+0x8c>
   1cc50:	e5d43003 	ldrb	r3, [r4, #3]
   1cc54:	e203303f 	and	r3, r3, #63	@ 0x3f
   1cc58:	e3530002 	cmp	r3, #2
   1cc5c:	0a00001f 	beq	1cce0 <CUSBBluetoothDevice::Configure()+0xcc>
   1cc60:	e3530003 	cmp	r3, #3
   1cc64:	1afffff4 	bne	1cc3c <CUSBBluetoothDevice::Configure()+0x28>
   1cc68:	e5953014 	ldr	r3, [r5, #20]
   1cc6c:	e3530000 	cmp	r3, #0
   1cc70:	1a000013 	bne	1ccc4 <CUSBBluetoothDevice::Configure()+0xb0>
   1cc74:	e3a00014 	mov	r0, #20
   1cc78:	eb006529 	bl	36124 <operator new(unsigned int)>
   1cc7c:	e1a06000 	mov	r6, r0
   1cc80:	e1a00005 	mov	r0, r5
   1cc84:	ebffce51 	bl	105d0 <CUSBFunction::GetDevice() const>
   1cc88:	e1a02004 	mov	r2, r4
   1cc8c:	e1a01000 	mov	r1, r0
   1cc90:	e1a00006 	mov	r0, r6
   1cc94:	ebffcc5b 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1cc98:	e5856014 	str	r6, [r5, #20]
   1cc9c:	eaffffe6 	b	1cc3c <CUSBBluetoothDevice::Configure()+0x28>
   1cca0:	e5953018 	ldr	r3, [r5, #24]
   1cca4:	e3530000 	cmp	r3, #0
   1cca8:	0a000005 	beq	1ccc4 <CUSBBluetoothDevice::Configure()+0xb0>
   1ccac:	e595301c 	ldr	r3, [r5, #28]
   1ccb0:	e3530000 	cmp	r3, #0
   1ccb4:	0a000002 	beq	1ccc4 <CUSBBluetoothDevice::Configure()+0xb0>
   1ccb8:	e5953014 	ldr	r3, [r5, #20]
   1ccbc:	e3530000 	cmp	r3, #0
   1ccc0:	1a00002c 	bne	1cd78 <CUSBBluetoothDevice::Configure()+0x164>
   1ccc4:	e59f1140 	ldr	r1, [pc, #320]	@ 1ce0c <CUSBBluetoothDevice::Configure()+0x1f8>
   1ccc8:	e1a00005 	mov	r0, r5
   1cccc:	ebffce6a 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   1ccd0:	e3a04000 	mov	r4, #0
   1ccd4:	e1a00004 	mov	r0, r4
   1ccd8:	e28dd008 	add	sp, sp, #8
   1ccdc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cce0:	e1d430d2 	ldrsb	r3, [r4, #2]
   1cce4:	e3530000 	cmp	r3, #0
   1cce8:	ba00000d 	blt	1cd24 <CUSBBluetoothDevice::Configure()+0x110>
   1ccec:	e595301c 	ldr	r3, [r5, #28]
   1ccf0:	e3530000 	cmp	r3, #0
   1ccf4:	1afffff2 	bne	1ccc4 <CUSBBluetoothDevice::Configure()+0xb0>
   1ccf8:	e3a00014 	mov	r0, #20
   1ccfc:	eb006508 	bl	36124 <operator new(unsigned int)>
   1cd00:	e1a06000 	mov	r6, r0
   1cd04:	e1a00005 	mov	r0, r5
   1cd08:	ebffce30 	bl	105d0 <CUSBFunction::GetDevice() const>
   1cd0c:	e1a02004 	mov	r2, r4
   1cd10:	e1a01000 	mov	r1, r0
   1cd14:	e1a00006 	mov	r0, r6
   1cd18:	ebffcc3a 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1cd1c:	e585601c 	str	r6, [r5, #28]
   1cd20:	eaffffc5 	b	1cc3c <CUSBBluetoothDevice::Configure()+0x28>
   1cd24:	e5953018 	ldr	r3, [r5, #24]
   1cd28:	e3530000 	cmp	r3, #0
   1cd2c:	1affffe4 	bne	1ccc4 <CUSBBluetoothDevice::Configure()+0xb0>
   1cd30:	e3a00014 	mov	r0, #20
   1cd34:	eb0064fa 	bl	36124 <operator new(unsigned int)>
   1cd38:	e1a06000 	mov	r6, r0
   1cd3c:	e1a00005 	mov	r0, r5
   1cd40:	ebffce22 	bl	105d0 <CUSBFunction::GetDevice() const>
   1cd44:	e1a02004 	mov	r2, r4
   1cd48:	e1a01000 	mov	r1, r0
   1cd4c:	e1a00006 	mov	r0, r6
   1cd50:	ebffcc2c 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1cd54:	e5856018 	str	r6, [r5, #24]
   1cd58:	eaffffb7 	b	1cc3c <CUSBBluetoothDevice::Configure()+0x28>
   1cd5c:	eb004699 	bl	2e7c8 <CLogger::Get()>
   1cd60:	e59f10a4 	ldr	r1, [pc, #164]	@ 1ce0c <CUSBBluetoothDevice::Configure()+0x1f8>
   1cd64:	e3a02002 	mov	r2, #2
   1cd68:	e30c3514 	movw	r3, #50452	@ 0xc514
   1cd6c:	e3403003 	movt	r3, #3
   1cd70:	eb00485d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cd74:	eaffffd5 	b	1ccd0 <CUSBBluetoothDevice::Configure()+0xbc>
   1cd78:	e1a00005 	mov	r0, r5
   1cd7c:	ebffcd40 	bl	10284 <CUSBFunction::Configure()>
   1cd80:	e2504000 	subs	r4, r0, #0
   1cd84:	0a000013 	beq	1cdd8 <CUSBBluetoothDevice::Configure()+0x1c4>
   1cd88:	e5950014 	ldr	r0, [r5, #20]
   1cd8c:	ebffccac 	bl	10044 <CUSBEndpoint::GetMaxPacketSize() const>
   1cd90:	eb0064e9 	bl	3613c <operator new[](unsigned int)>
   1cd94:	e5956028 	ldr	r6, [r5, #40]	@ 0x28
   1cd98:	e5850020 	str	r0, [r5, #32]
   1cd9c:	e3560000 	cmp	r6, #0
   1cda0:	1a000013 	bne	1cdf4 <CUSBBluetoothDevice::Configure()+0x1e0>
   1cda4:	e59f2060 	ldr	r2, [pc, #96]	@ 1ce0c <CUSBBluetoothDevice::Configure()+0x1f8>
   1cda8:	e3a01001 	mov	r1, #1
   1cdac:	e30400d8 	movw	r0, #16600	@ 0x40d8
   1cdb0:	e3400004 	movt	r0, #4
   1cdb4:	eb006628 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   1cdb8:	e5850028 	str	r0, [r5, #40]	@ 0x28
   1cdbc:	eb003f9a 	bl	2cc2c <CDeviceNameService::Get()>
   1cdc0:	e5952028 	ldr	r2, [r5, #40]	@ 0x28
   1cdc4:	e59f1044 	ldr	r1, [pc, #68]	@ 1ce10 <CUSBBluetoothDevice::Configure()+0x1fc>
   1cdc8:	e1a03005 	mov	r3, r5
   1cdcc:	e58d6000 	str	r6, [sp]
   1cdd0:	eb003fa1 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1cdd4:	eaffffbe 	b	1ccd4 <CUSBBluetoothDevice::Configure()+0xc0>
   1cdd8:	eb00467a 	bl	2e7c8 <CLogger::Get()>
   1cddc:	e59f1028 	ldr	r1, [pc, #40]	@ 1ce0c <CUSBBluetoothDevice::Configure()+0x1f8>
   1cde0:	e3a02001 	mov	r2, #1
   1cde4:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   1cde8:	e3403003 	movt	r3, #3
   1cdec:	eb00483e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1cdf0:	eaffffb6 	b	1ccd0 <CUSBBluetoothDevice::Configure()+0xbc>
   1cdf4:	e30c14a8 	movw	r1, #50344	@ 0xc4a8
   1cdf8:	e3401003 	movt	r1, #3
   1cdfc:	e30b0724 	movw	r0, #46884	@ 0xb724
   1ce00:	e3400003 	movt	r0, #3
   1ce04:	e3a0208f 	mov	r2, #143	@ 0x8f
   1ce08:	eb003bf3 	bl	2bddc <assertion_failed>
   1ce0c:	0003f928 	.word	0x0003f928
   1ce10:	0003f924 	.word	0x0003f924

0001ce14 <_GLOBAL__sub_I__ZN19CUSBBluetoothDevice18s_DeviceNumberPoolE>:
   1ce14:	e92d4010 	push	{r4, lr}
   1ce18:	e30440d8 	movw	r4, #16600	@ 0x40d8
   1ce1c:	e3404004 	movt	r4, #4
   1ce20:	e3a0203f 	mov	r2, #63	@ 0x3f
   1ce24:	e3a01001 	mov	r1, #1
   1ce28:	e1a00004 	mov	r0, r4
   1ce2c:	eb0065f5 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1ce30:	e1a00004 	mov	r0, r4
   1ce34:	e3042180 	movw	r2, #16768	@ 0x4180
   1ce38:	e3402004 	movt	r2, #4
   1ce3c:	e3061658 	movw	r1, #26200	@ 0x6658
   1ce40:	e3401003 	movt	r1, #3
   1ce44:	e8bd4010 	pop	{r4, lr}
   1ce48:	ea005cc1 	b	34154 <__aeabi_atexit>

0001ce4c <CUSBCDCEthernetDevice::GetMACAddress() const>:
   1ce4c:	e2800020 	add	r0, r0, #32
   1ce50:	e12fff1e 	bx	lr

0001ce54 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1ce54:	e92d4070 	push	{r4, r5, r6, lr}
   1ce58:	e1a04000 	mov	r4, r0
   1ce5c:	e59f3070 	ldr	r3, [pc, #112]	@ 1ced4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x80>
   1ce60:	e590501c 	ldr	r5, [r0, #28]
   1ce64:	e2832040 	add	r2, r3, #64	@ 0x40
   1ce68:	e5803000 	str	r3, [r0]
   1ce6c:	e3550000 	cmp	r5, #0
   1ce70:	e5802014 	str	r2, [r0, #20]
   1ce74:	0a000004 	beq	1ce8c <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x38>
   1ce78:	e1a00005 	mov	r0, r5
   1ce7c:	ebffcc5b 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1ce80:	e3a01014 	mov	r1, #20
   1ce84:	e1a00005 	mov	r0, r5
   1ce88:	eb0064bd 	bl	36184 <operator delete(void*, unsigned int)>
   1ce8c:	e5945018 	ldr	r5, [r4, #24]
   1ce90:	e3a03000 	mov	r3, #0
   1ce94:	e584301c 	str	r3, [r4, #28]
   1ce98:	e1550003 	cmp	r5, r3
   1ce9c:	0a000004 	beq	1ceb4 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()+0x60>
   1cea0:	e1a00005 	mov	r0, r5
   1cea4:	ebffcc51 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1cea8:	e3a01014 	mov	r1, #20
   1ceac:	e1a00005 	mov	r0, r5
   1ceb0:	eb0064b3 	bl	36184 <operator delete(void*, unsigned int)>
   1ceb4:	e3a03000 	mov	r3, #0
   1ceb8:	e2840020 	add	r0, r4, #32
   1cebc:	e5843018 	str	r3, [r4, #24]
   1cec0:	eb006393 	bl	35d14 <CMACAddress::~CMACAddress()>
   1cec4:	e1a00004 	mov	r0, r4
   1cec8:	ebffccb3 	bl	1019c <CUSBFunction::~CUSBFunction()>
   1cecc:	e1a00004 	mov	r0, r4
   1ced0:	e8bd8070 	pop	{r4, r5, r6, pc}
   1ced4:	0003f938 	.word	0x0003f938

0001ced8 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1ced8:	e2400014 	sub	r0, r0, #20
   1cedc:	eaffffdc 	b	1ce54 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>

0001cee0 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1cee0:	e92d4010 	push	{r4, lr}
   1cee4:	e1a04000 	mov	r4, r0
   1cee8:	ebffffd9 	bl	1ce54 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   1ceec:	e1a00004 	mov	r0, r4
   1cef0:	e3a01028 	mov	r1, #40	@ 0x28
   1cef4:	eb0064a2 	bl	36184 <operator delete(void*, unsigned int)>
   1cef8:	e1a00004 	mov	r0, r4
   1cefc:	e8bd8010 	pop	{r4, pc}

0001cf00 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   1cf00:	e590301c 	ldr	r3, [r0, #28]
   1cf04:	e92d4070 	push	{r4, r5, r6, lr}
   1cf08:	e3530000 	cmp	r3, #0
   1cf0c:	e24dd008 	sub	sp, sp, #8
   1cf10:	0a000011 	beq	1cf5c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x5c>
   1cf14:	e1a05001 	mov	r5, r1
   1cf18:	e3510000 	cmp	r1, #0
   1cf1c:	0a000014 	beq	1cf74 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x74>
   1cf20:	e1a06002 	mov	r6, r2
   1cf24:	e3520d19 	cmp	r2, #1600	@ 0x640
   1cf28:	8a000017 	bhi	1cf8c <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)+0x8c>
   1cf2c:	e1a04000 	mov	r4, r0
   1cf30:	ebffcdbb 	bl	10624 <CUSBFunction::GetHost() const>
   1cf34:	e3a0c000 	mov	ip, #0
   1cf38:	e1a03006 	mov	r3, r6
   1cf3c:	e1a02005 	mov	r2, r5
   1cf40:	e594101c 	ldr	r1, [r4, #28]
   1cf44:	e58dc000 	str	ip, [sp]
   1cf48:	ebffdb1b 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1cf4c:	e1e00000 	mvn	r0, r0
   1cf50:	e1a00fa0 	lsr	r0, r0, #31
   1cf54:	e28dd008 	add	sp, sp, #8
   1cf58:	e8bd8070 	pop	{r4, r5, r6, pc}
   1cf5c:	e30c1538 	movw	r1, #50488	@ 0xc538
   1cf60:	e3401003 	movt	r1, #3
   1cf64:	e30c0264 	movw	r0, #49764	@ 0xc264
   1cf68:	e3400003 	movt	r0, #3
   1cf6c:	e3a020aa 	mov	r2, #170	@ 0xaa
   1cf70:	eb003b99 	bl	2bddc <assertion_failed>
   1cf74:	e30c1538 	movw	r1, #50488	@ 0xc538
   1cf78:	e3401003 	movt	r1, #3
   1cf7c:	e30b0400 	movw	r0, #46080	@ 0xb400
   1cf80:	e3400003 	movt	r0, #3
   1cf84:	e3a020ab 	mov	r2, #171	@ 0xab
   1cf88:	eb003b93 	bl	2bddc <assertion_failed>
   1cf8c:	e30c1538 	movw	r1, #50488	@ 0xc538
   1cf90:	e3401003 	movt	r1, #3
   1cf94:	e30c054c 	movw	r0, #50508	@ 0xc54c
   1cf98:	e3400003 	movt	r0, #3
   1cf9c:	e3a020ac 	mov	r2, #172	@ 0xac
   1cfa0:	eb003b8d 	bl	2bddc <assertion_failed>

0001cfa4 <non-virtual thunk to CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>:
   1cfa4:	e2400014 	sub	r0, r0, #20
   1cfa8:	eaffffd4 	b	1cf00 <CUSBCDCEthernetDevice::SendFrame(void const*, unsigned int)>

0001cfac <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1cfac:	e1a03001 	mov	r3, r1
   1cfb0:	e92d4070 	push	{r4, r5, r6, lr}
   1cfb4:	e5901018 	ldr	r1, [r0, #24]
   1cfb8:	e24dd078 	sub	sp, sp, #120	@ 0x78
   1cfbc:	e3510000 	cmp	r1, #0
   1cfc0:	0a000027 	beq	1d064 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xb8>
   1cfc4:	e3530000 	cmp	r3, #0
   1cfc8:	0a00002b 	beq	1d07c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0xd0>
   1cfcc:	e1a04000 	mov	r4, r0
   1cfd0:	e3a05000 	mov	r5, #0
   1cfd4:	e1a06002 	mov	r6, r2
   1cfd8:	e28d0008 	add	r0, sp, #8
   1cfdc:	e1a02003 	mov	r2, r3
   1cfe0:	e58d5000 	str	r5, [sp]
   1cfe4:	e3a03d19 	mov	r3, #1600	@ 0x640
   1cfe8:	ebffe4fb 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1cfec:	e28d0008 	add	r0, sp, #8
   1cff0:	ebffe5be 	bl	166f0 <CUSBRequest::SetCompleteOnNAK()>
   1cff4:	e1a00004 	mov	r0, r4
   1cff8:	ebffcd89 	bl	10624 <CUSBFunction::GetHost() const>
   1cffc:	e5903000 	ldr	r3, [r0]
   1d000:	e1a02005 	mov	r2, r5
   1d004:	e28d1008 	add	r1, sp, #8
   1d008:	e5933010 	ldr	r3, [r3, #16]
   1d00c:	e12fff33 	blx	r3
   1d010:	e2504000 	subs	r4, r0, #0
   1d014:	1a000005 	bne	1d030 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x84>
   1d018:	e3a04000 	mov	r4, #0
   1d01c:	e28d0008 	add	r0, sp, #8
   1d020:	ebffe511 	bl	1646c <CUSBRequest::~CUSBRequest()>
   1d024:	e1a00004 	mov	r0, r4
   1d028:	e28dd078 	add	sp, sp, #120	@ 0x78
   1d02c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d030:	e28d0008 	add	r0, sp, #8
   1d034:	ebffe51f 	bl	164b8 <CUSBRequest::GetResultLength() const>
   1d038:	e3500000 	cmp	r0, #0
   1d03c:	0afffff5 	beq	1d018 <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x6c>
   1d040:	e3560000 	cmp	r6, #0
   1d044:	15860000 	strne	r0, [r6]
   1d048:	1afffff3 	bne	1d01c <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)+0x70>
   1d04c:	e30c1538 	movw	r1, #50488	@ 0xc538
   1d050:	e3401003 	movt	r1, #3
   1d054:	e30c0250 	movw	r0, #49744	@ 0xc250
   1d058:	e3400003 	movt	r0, #3
   1d05c:	e3a020c3 	mov	r2, #195	@ 0xc3
   1d060:	eb003b5d 	bl	2bddc <assertion_failed>
   1d064:	e30c1538 	movw	r1, #50488	@ 0xc538
   1d068:	e3401003 	movt	r1, #3
   1d06c:	e30c01dc 	movw	r0, #49628	@ 0xc1dc
   1d070:	e3400003 	movt	r0, #3
   1d074:	e3a020b2 	mov	r2, #178	@ 0xb2
   1d078:	eb003b57 	bl	2bddc <assertion_failed>
   1d07c:	e30c1538 	movw	r1, #50488	@ 0xc538
   1d080:	e3401003 	movt	r1, #3
   1d084:	e30b0400 	movw	r0, #46080	@ 0xb400
   1d088:	e3400003 	movt	r0, #3
   1d08c:	e3a020b3 	mov	r2, #179	@ 0xb3
   1d090:	eb003b51 	bl	2bddc <assertion_failed>

0001d094 <non-virtual thunk to CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>:
   1d094:	e2400014 	sub	r0, r0, #20
   1d098:	eaffffc3 	b	1cfac <CUSBCDCEthernetDevice::ReceiveFrame(void*, unsigned int*)>

0001d09c <non-virtual thunk to CUSBCDCEthernetDevice::GetMACAddress() const>:
   1d09c:	e280000c 	add	r0, r0, #12
   1d0a0:	e12fff1e 	bx	lr

0001d0a4 <non-virtual thunk to CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>:
   1d0a4:	e92d4010 	push	{r4, lr}
   1d0a8:	e2404014 	sub	r4, r0, #20
   1d0ac:	e1a00004 	mov	r0, r4
   1d0b0:	ebffff67 	bl	1ce54 <CUSBCDCEthernetDevice::~CUSBCDCEthernetDevice()>
   1d0b4:	e1a00004 	mov	r0, r4
   1d0b8:	e3a01028 	mov	r1, #40	@ 0x28
   1d0bc:	eb006430 	bl	36184 <operator delete(void*, unsigned int)>
   1d0c0:	e1a00004 	mov	r0, r4
   1d0c4:	e8bd8010 	pop	{r4, pc}

0001d0c8 <CUSBCDCEthernetDevice::CUSBCDCEthernetDevice(CUSBFunction*)>:
   1d0c8:	e92d4010 	push	{r4, lr}
   1d0cc:	e1a04000 	mov	r4, r0
   1d0d0:	ebffccda 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1d0d4:	e30f3930 	movw	r3, #63792	@ 0xf930
   1d0d8:	e3403003 	movt	r3, #3
   1d0dc:	e3a02000 	mov	r2, #0
   1d0e0:	e2831008 	add	r1, r3, #8
   1d0e4:	e2840020 	add	r0, r4, #32
   1d0e8:	e2833048 	add	r3, r3, #72	@ 0x48
   1d0ec:	e5841000 	str	r1, [r4]
   1d0f0:	e5843014 	str	r3, [r4, #20]
   1d0f4:	e5842018 	str	r2, [r4, #24]
   1d0f8:	e584201c 	str	r2, [r4, #28]
   1d0fc:	eb0062f0 	bl	35cc4 <CMACAddress::CMACAddress()>
   1d100:	e1a00004 	mov	r0, r4
   1d104:	e8bd8010 	pop	{r4, pc}

0001d108 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>:
   1d108:	e92d4030 	push	{r4, r5, lr}
   1d10c:	e1a04001 	mov	r4, r1
   1d110:	e1a05000 	mov	r5, r0
   1d114:	e24dd01c 	sub	sp, sp, #28
   1d118:	ebffcd2c 	bl	105d0 <CUSBFunction::GetDevice() const>
   1d11c:	e1a01000 	mov	r1, r0
   1d120:	e28d000c 	add	r0, sp, #12
   1d124:	ebffea33 	bl	179f8 <CUSBString::CUSBString(CUSBDevice*)>
   1d128:	e3540000 	cmp	r4, #0
   1d12c:	1a000005 	bne	1d148 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x40>
   1d130:	e3a04000 	mov	r4, #0
   1d134:	e28d000c 	add	r0, sp, #12
   1d138:	ebffea73 	bl	17b0c <CUSBString::~CUSBString()>
   1d13c:	e1a00004 	mov	r0, r4
   1d140:	e28dd01c 	add	sp, sp, #28
   1d144:	e8bd8030 	pop	{r4, r5, pc}
   1d148:	e28d000c 	add	r0, sp, #12
   1d14c:	ebffeb14 	bl	17da4 <CUSBString::GetLanguageID()>
   1d150:	e1a01004 	mov	r1, r4
   1d154:	e1a02000 	mov	r2, r0
   1d158:	e28d000c 	add	r0, sp, #12
   1d15c:	ebffea7a 	bl	17b4c <CUSBString::GetFromDescriptor(unsigned char, unsigned short)>
   1d160:	e2504000 	subs	r4, r0, #0
   1d164:	0afffff1 	beq	1d130 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1d168:	e28d000c 	add	r0, sp, #12
   1d16c:	ebffeb0a 	bl	17d9c <CUSBString::Get() const>
   1d170:	e3500000 	cmp	r0, #0
   1d174:	12801002 	addne	r1, r0, #2
   1d178:	128dc004 	addne	ip, sp, #4
   1d17c:	1280000e 	addne	r0, r0, #14
   1d180:	0a00001a 	beq	1d1f0 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0xe8>
   1d184:	e15130d2 	ldrsb	r3, [r1, #-2]
   1d188:	e3530039 	cmp	r3, #57	@ 0x39
   1d18c:	e6ef3073 	uxtb	r3, r3
   1d190:	c2433007 	subgt	r3, r3, #7
   1d194:	c6ef3073 	uxtbgt	r3, r3
   1d198:	e2433030 	sub	r3, r3, #48	@ 0x30
   1d19c:	e6ef2073 	uxtb	r2, r3
   1d1a0:	e352000f 	cmp	r2, #15
   1d1a4:	8affffe1 	bhi	1d130 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1d1a8:	e15130d1 	ldrsb	r3, [r1, #-1]
   1d1ac:	e3530039 	cmp	r3, #57	@ 0x39
   1d1b0:	e6ef3073 	uxtb	r3, r3
   1d1b4:	c2433007 	subgt	r3, r3, #7
   1d1b8:	c6ef3073 	uxtbgt	r3, r3
   1d1bc:	e2433030 	sub	r3, r3, #48	@ 0x30
   1d1c0:	e6ef3073 	uxtb	r3, r3
   1d1c4:	e353000f 	cmp	r3, #15
   1d1c8:	8affffd8 	bhi	1d130 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x28>
   1d1cc:	e2811002 	add	r1, r1, #2
   1d1d0:	e1833202 	orr	r3, r3, r2, lsl #4
   1d1d4:	e1510000 	cmp	r1, r0
   1d1d8:	e4cc3001 	strb	r3, [ip], #1
   1d1dc:	1affffe8 	bne	1d184 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x7c>
   1d1e0:	e28d1004 	add	r1, sp, #4
   1d1e4:	e2850020 	add	r0, r5, #32
   1d1e8:	eb0062fe 	bl	35de8 <CMACAddress::Set(unsigned char const*)>
   1d1ec:	eaffffd0 	b	1d134 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)+0x2c>
   1d1f0:	e30c1538 	movw	r1, #50488	@ 0xc538
   1d1f4:	e3401003 	movt	r1, #3
   1d1f8:	e30c056c 	movw	r0, #50540	@ 0xc56c
   1d1fc:	e3400003 	movt	r0, #3
   1d200:	e3a020d3 	mov	r2, #211	@ 0xd3
   1d204:	eb003af4 	bl	2bddc <assertion_failed>

0001d208 <CUSBCDCEthernetDevice::Configure()>:
   1d208:	e92d4070 	push	{r4, r5, r6, lr}
   1d20c:	e1a05000 	mov	r5, r0
   1d210:	e24dd018 	sub	sp, sp, #24
   1d214:	ea000002 	b	1d224 <CUSBCDCEthernetDevice::Configure()+0x1c>
   1d218:	e5d43002 	ldrb	r3, [r4, #2]
   1d21c:	e353000f 	cmp	r3, #15
   1d220:	0a000014 	beq	1d278 <CUSBCDCEthernetDevice::Configure()+0x70>
   1d224:	e3a01024 	mov	r1, #36	@ 0x24
   1d228:	e1a00005 	mov	r0, r5
   1d22c:	ebffcd07 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   1d230:	e2504000 	subs	r4, r0, #0
   1d234:	1afffff7 	bne	1d218 <CUSBCDCEthernetDevice::Configure()+0x10>
   1d238:	e59f11e4 	ldr	r1, [pc, #484]	@ 1d424 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d23c:	e1a00005 	mov	r0, r5
   1d240:	ebffcd0d 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   1d244:	e3a04000 	mov	r4, #0
   1d248:	e1a00004 	mov	r0, r4
   1d24c:	e28dd018 	add	sp, sp, #24
   1d250:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d254:	e5d03006 	ldrb	r3, [r0, #6]
   1d258:	e3530000 	cmp	r3, #0
   1d25c:	1a000005 	bne	1d278 <CUSBCDCEthernetDevice::Configure()+0x70>
   1d260:	e5d03007 	ldrb	r3, [r0, #7]
   1d264:	e3530000 	cmp	r3, #0
   1d268:	1a000002 	bne	1d278 <CUSBCDCEthernetDevice::Configure()+0x70>
   1d26c:	e5d03004 	ldrb	r3, [r0, #4]
   1d270:	e3530001 	cmp	r3, #1
   1d274:	8a000008 	bhi	1d29c <CUSBCDCEthernetDevice::Configure()+0x94>
   1d278:	e3a01004 	mov	r1, #4
   1d27c:	e1a00005 	mov	r0, r5
   1d280:	ebffccf2 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   1d284:	e3500000 	cmp	r0, #0
   1d288:	0affffea 	beq	1d238 <CUSBCDCEthernetDevice::Configure()+0x30>
   1d28c:	e5d03005 	ldrb	r3, [r0, #5]
   1d290:	e353000a 	cmp	r3, #10
   1d294:	1afffff7 	bne	1d278 <CUSBCDCEthernetDevice::Configure()+0x70>
   1d298:	eaffffed 	b	1d254 <CUSBCDCEthernetDevice::Configure()+0x4c>
   1d29c:	e5d41003 	ldrb	r1, [r4, #3]
   1d2a0:	e1a00005 	mov	r0, r5
   1d2a4:	ebffff97 	bl	1d108 <CUSBCDCEthernetDevice::InitMACAddress(unsigned char)>
   1d2a8:	e3500000 	cmp	r0, #0
   1d2ac:	0a00002b 	beq	1d360 <CUSBCDCEthernetDevice::Configure()+0x158>
   1d2b0:	e28d0008 	add	r0, sp, #8
   1d2b4:	eb0055e2 	bl	32a44 <CString::CString()>
   1d2b8:	e28d1008 	add	r1, sp, #8
   1d2bc:	e2850020 	add	r0, r5, #32
   1d2c0:	eb00631b 	bl	35f34 <CMACAddress::Format(CString*) const>
   1d2c4:	eb00453f 	bl	2e7c8 <CLogger::Get()>
   1d2c8:	e1a04000 	mov	r4, r0
   1d2cc:	e28d0008 	add	r0, sp, #8
   1d2d0:	eb005613 	bl	32b24 <CString::operator char const*() const>
   1d2d4:	e59f1148 	ldr	r1, [pc, #328]	@ 1d424 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d2d8:	e1a02000 	mov	r2, r0
   1d2dc:	e30c3304 	movw	r3, #49924	@ 0xc304
   1d2e0:	e3403003 	movt	r3, #3
   1d2e4:	e58d2000 	str	r2, [sp]
   1d2e8:	e1a00004 	mov	r0, r4
   1d2ec:	e3a02004 	mov	r2, #4
   1d2f0:	eb0046fd 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d2f4:	ea000003 	b	1d308 <CUSBCDCEthernetDevice::Configure()+0x100>
   1d2f8:	e5d43003 	ldrb	r3, [r4, #3]
   1d2fc:	e203303f 	and	r3, r3, #63	@ 0x3f
   1d300:	e3530002 	cmp	r3, #2
   1d304:	0a00001c 	beq	1d37c <CUSBCDCEthernetDevice::Configure()+0x174>
   1d308:	e3a01005 	mov	r1, #5
   1d30c:	e1a00005 	mov	r0, r5
   1d310:	ebffccce 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   1d314:	e2504000 	subs	r4, r0, #0
   1d318:	1afffff6 	bne	1d2f8 <CUSBCDCEthernetDevice::Configure()+0xf0>
   1d31c:	e5953018 	ldr	r3, [r5, #24]
   1d320:	e3530000 	cmp	r3, #0
   1d324:	0a00002d 	beq	1d3e0 <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1d328:	e595301c 	ldr	r3, [r5, #28]
   1d32c:	e3530000 	cmp	r3, #0
   1d330:	0a00002a 	beq	1d3e0 <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1d334:	e1a00005 	mov	r0, r5
   1d338:	ebffcbd1 	bl	10284 <CUSBFunction::Configure()>
   1d33c:	e2504000 	subs	r4, r0, #0
   1d340:	0a00001e 	beq	1d3c0 <CUSBCDCEthernetDevice::Configure()+0x1b8>
   1d344:	e2850014 	add	r0, r5, #20
   1d348:	eb00631c 	bl	35fc0 <CNetDevice::AddNetDevice()>
   1d34c:	e28d0008 	add	r0, sp, #8
   1d350:	eb005588 	bl	32978 <CString::~CString()>
   1d354:	e1a00004 	mov	r0, r4
   1d358:	e28dd018 	add	sp, sp, #24
   1d35c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d360:	eb004518 	bl	2e7c8 <CLogger::Get()>
   1d364:	e59f10b8 	ldr	r1, [pc, #184]	@ 1d424 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d368:	e3a02001 	mov	r2, #1
   1d36c:	e30c3464 	movw	r3, #50276	@ 0xc464
   1d370:	e3403003 	movt	r3, #3
   1d374:	eb0046dc 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d378:	eaffffb1 	b	1d244 <CUSBCDCEthernetDevice::Configure()+0x3c>
   1d37c:	e1d430d2 	ldrsb	r3, [r4, #2]
   1d380:	e3a00014 	mov	r0, #20
   1d384:	e3530000 	cmp	r3, #0
   1d388:	ba000018 	blt	1d3f0 <CUSBCDCEthernetDevice::Configure()+0x1e8>
   1d38c:	e595301c 	ldr	r3, [r5, #28]
   1d390:	e3530000 	cmp	r3, #0
   1d394:	1a000011 	bne	1d3e0 <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1d398:	eb006361 	bl	36124 <operator new(unsigned int)>
   1d39c:	e1a06000 	mov	r6, r0
   1d3a0:	e1a00005 	mov	r0, r5
   1d3a4:	ebffcc89 	bl	105d0 <CUSBFunction::GetDevice() const>
   1d3a8:	e1a02004 	mov	r2, r4
   1d3ac:	e1a01000 	mov	r1, r0
   1d3b0:	e1a00006 	mov	r0, r6
   1d3b4:	ebffca93 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1d3b8:	e585601c 	str	r6, [r5, #28]
   1d3bc:	eaffffd1 	b	1d308 <CUSBCDCEthernetDevice::Configure()+0x100>
   1d3c0:	eb004500 	bl	2e7c8 <CLogger::Get()>
   1d3c4:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   1d3c8:	e3403003 	movt	r3, #3
   1d3cc:	e59f1050 	ldr	r1, [pc, #80]	@ 1d424 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d3d0:	e3a02001 	mov	r2, #1
   1d3d4:	eb0046c4 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d3d8:	e3a04000 	mov	r4, #0
   1d3dc:	eaffffda 	b	1d34c <CUSBCDCEthernetDevice::Configure()+0x144>
   1d3e0:	e59f103c 	ldr	r1, [pc, #60]	@ 1d424 <CUSBCDCEthernetDevice::Configure()+0x21c>
   1d3e4:	e1a00005 	mov	r0, r5
   1d3e8:	ebffcca3 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   1d3ec:	eafffff9 	b	1d3d8 <CUSBCDCEthernetDevice::Configure()+0x1d0>
   1d3f0:	e5953018 	ldr	r3, [r5, #24]
   1d3f4:	e3530000 	cmp	r3, #0
   1d3f8:	1afffff8 	bne	1d3e0 <CUSBCDCEthernetDevice::Configure()+0x1d8>
   1d3fc:	eb006348 	bl	36124 <operator new(unsigned int)>
   1d400:	e1a06000 	mov	r6, r0
   1d404:	e1a00005 	mov	r0, r5
   1d408:	ebffcc70 	bl	105d0 <CUSBFunction::GetDevice() const>
   1d40c:	e1a02004 	mov	r2, r4
   1d410:	e1a01000 	mov	r1, r0
   1d414:	e1a00006 	mov	r0, r6
   1d418:	ebffca7a 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1d41c:	e5856018 	str	r6, [r5, #24]
   1d420:	eaffffb8 	b	1d308 <CUSBCDCEthernetDevice::Configure()+0x100>
   1d424:	0003f9a0 	.word	0x0003f9a0

0001d428 <CNetDevice::IsLinkUp()>:
   1d428:	e3a00001 	mov	r0, #1
   1d42c:	e12fff1e 	bx	lr

0001d430 <CNetDevice::GetLinkSpeed()>:
   1d430:	e3a00006 	mov	r0, #6
   1d434:	e12fff1e 	bx	lr

0001d438 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)>:
   1d438:	e3a03000 	mov	r3, #0
   1d43c:	e92d4070 	push	{r4, r5, r6, lr}
   1d440:	e1510003 	cmp	r1, r3
   1d444:	e081e002 	add	lr, r1, r2
   1d448:	e8800006 	stm	r0, {r1, r2}
   1d44c:	e5c03008 	strb	r3, [r0, #8]
   1d450:	e580e00c 	str	lr, [r0, #12]
   1d454:	e5801010 	str	r1, [r0, #16]
   1d458:	e5803014 	str	r3, [r0, #20]
   1d45c:	e5801018 	str	r1, [r0, #24]
   1d460:	0a000040 	beq	1d568 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x130>
   1d464:	e2423004 	sub	r3, r2, #4
   1d468:	e3530fff 	cmp	r3, #1020	@ 0x3fc
   1d46c:	88bd8070 	pophi	{r4, r5, r6, pc}
   1d470:	e5d13000 	ldrb	r3, [r1]
   1d474:	e3530009 	cmp	r3, #9
   1d478:	18bd8070 	popne	{r4, r5, r6, pc}
   1d47c:	e5d1c001 	ldrb	ip, [r1, #1]
   1d480:	e35c0002 	cmp	ip, #2
   1d484:	18bd8070 	popne	{r4, r5, r6, pc}
   1d488:	e1d130b2 	ldrh	r3, [r1, #2]
   1d48c:	e1520003 	cmp	r2, r3
   1d490:	38bd8070 	popcc	{r4, r5, r6, pc}
   1d494:	8081e003 	addhi	lr, r1, r3
   1d498:	e2813002 	add	r3, r1, #2
   1d49c:	8580e00c 	strhi	lr, [r0, #12]
   1d4a0:	e15e0003 	cmp	lr, r3
   1d4a4:	9a000035 	bls	1d580 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x148>
   1d4a8:	e3a05000 	mov	r5, #0
   1d4ac:	e3a02009 	mov	r2, #9
   1d4b0:	e1a04005 	mov	r4, r5
   1d4b4:	ea00000d 	b	1d4f0 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xb8>
   1d4b8:	e35c0002 	cmp	ip, #2
   1d4bc:	1a000004 	bne	1d4d4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x9c>
   1d4c0:	e3540000 	cmp	r4, #0
   1d4c4:	1a000017 	bne	1d528 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   1d4c8:	e3a04009 	mov	r4, #9
   1d4cc:	e1520004 	cmp	r2, r4
   1d4d0:	1a000014 	bne	1d528 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   1d4d4:	e2832002 	add	r2, r3, #2
   1d4d8:	e15e0002 	cmp	lr, r2
   1d4dc:	9a000028 	bls	1d584 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x14c>
   1d4e0:	e1a0400c 	mov	r4, ip
   1d4e4:	e5d32000 	ldrb	r2, [r3]
   1d4e8:	e5d3c001 	ldrb	ip, [r3, #1]
   1d4ec:	e1a01003 	mov	r1, r3
   1d4f0:	e0813002 	add	r3, r1, r2
   1d4f4:	e153000e 	cmp	r3, lr
   1d4f8:	8a00000a 	bhi	1d528 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   1d4fc:	e35c0004 	cmp	ip, #4
   1d500:	0a00000a 	beq	1d530 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf8>
   1d504:	e35c0005 	cmp	ip, #5
   1d508:	1affffea 	bne	1d4b8 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x80>
   1d50c:	e31400fd 	tst	r4, #253	@ 0xfd
   1d510:	0a000004 	beq	1d528 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   1d514:	e3550000 	cmp	r5, #0
   1d518:	0a000010 	beq	1d560 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x128>
   1d51c:	e2422007 	sub	r2, r2, #7
   1d520:	e31200fd 	tst	r2, #253	@ 0xfd
   1d524:	0affffea 	beq	1d4d4 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x9c>
   1d528:	e5801018 	str	r1, [r0, #24]
   1d52c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d530:	e3540000 	cmp	r4, #0
   1d534:	0afffffb 	beq	1d528 <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0xf0>
   1d538:	e5d14005 	ldrb	r4, [r1, #5]
   1d53c:	e3540001 	cmp	r4, #1
   1d540:	13a04009 	movne	r4, #9
   1d544:	13a05000 	movne	r5, #0
   1d548:	1affffdf 	bne	1d4cc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x94>
   1d54c:	e5d15007 	ldrb	r5, [r1, #7]
   1d550:	e3a04009 	mov	r4, #9
   1d554:	e2555020 	subs	r5, r5, #32
   1d558:	13a05001 	movne	r5, #1
   1d55c:	eaffffda 	b	1d4cc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x94>
   1d560:	e3a04007 	mov	r4, #7
   1d564:	eaffffd8 	b	1d4cc <CUSBConfigurationParser::CUSBConfigurationParser(void const*, unsigned int)+0x94>
   1d568:	e30c157c 	movw	r1, #50556	@ 0xc57c
   1d56c:	e3401003 	movt	r1, #3
   1d570:	e30c0590 	movw	r0, #50576	@ 0xc590
   1d574:	e3400003 	movt	r0, #3
   1d578:	e3a02024 	mov	r2, #36	@ 0x24
   1d57c:	eb003a16 	bl	2bddc <assertion_failed>
   1d580:	e1a03001 	mov	r3, r1
   1d584:	e153000e 	cmp	r3, lr
   1d588:	15803018 	strne	r3, [r0, #24]
   1d58c:	03a03001 	moveq	r3, #1
   1d590:	05c03008 	strbeq	r3, [r0, #8]
   1d594:	e8bd8070 	pop	{r4, r5, r6, pc}

0001d598 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)>:
   1d598:	e3510000 	cmp	r1, #0
   1d59c:	e92d4010 	push	{r4, lr}
   1d5a0:	0a00000a 	beq	1d5d0 <CUSBConfigurationParser::CUSBConfigurationParser(CUSBConfigurationParser*)+0x38>
   1d5a4:	e281c00c 	add	ip, r1, #12
   1d5a8:	e280200c 	add	r2, r0, #12
   1d5ac:	e591e000 	ldr	lr, [r1]
   1d5b0:	e580e000 	str	lr, [r0]
   1d5b4:	f46c0a8f 	vld1.32	{d16-d17}, [ip]
   1d5b8:	e591c004 	ldr	ip, [r1, #4]
   1d5bc:	e5d11008 	ldrb	r1, [r1, #8]
   1d5c0:	e580c004 	str	ip, [r0, #4]
   1d5c4:	e5c01008 	strb	r1, [r0, #8]
   1d5c8:	f4420a8f 	vst1.32	{d16-d17}, [r2]
   1d5cc:	e8bd8010 	pop	{r4, pc}
   1d5d0:	e30c157c 	movw	r1, #50556	@ 0xc57c
   1d5d4:	e3401003 	movt	r1, #3
   1d5d8:	e30c05a0 	movw	r0, #50592	@ 0xc5a0
   1d5dc:	e3400003 	movt	r0, #3
   1d5e0:	e3a0208b 	mov	r2, #139	@ 0x8b
   1d5e4:	eb0039fc 	bl	2bddc <assertion_failed>

0001d5e8 <CUSBConfigurationParser::~CUSBConfigurationParser()>:
   1d5e8:	e12fff1e 	bx	lr

0001d5ec <CUSBConfigurationParser::IsValid() const>:
   1d5ec:	e5d00008 	ldrb	r0, [r0, #8]
   1d5f0:	e12fff1e 	bx	lr

0001d5f4 <CUSBConfigurationParser::GetDescriptor(unsigned char)>:
   1d5f4:	e5d03008 	ldrb	r3, [r0, #8]
   1d5f8:	e92d4010 	push	{r4, lr}
   1d5fc:	e3530000 	cmp	r3, #0
   1d600:	0a000020 	beq	1d688 <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x94>
   1d604:	e5903010 	ldr	r3, [r0, #16]
   1d608:	e1a0e000 	mov	lr, r0
   1d60c:	e590c00c 	ldr	ip, [r0, #12]
   1d610:	e15c0003 	cmp	ip, r3
   1d614:	8a000008 	bhi	1d63c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x48>
   1d618:	ea000017 	b	1d67c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   1d61c:	e3510005 	cmp	r1, #5
   1d620:	03520004 	cmpeq	r2, #4
   1d624:	0a000014 	beq	1d67c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   1d628:	e1520001 	cmp	r2, r1
   1d62c:	0a00000e 	beq	1d66c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x78>
   1d630:	e15c0003 	cmp	ip, r3
   1d634:	e58e3010 	str	r3, [lr, #16]
   1d638:	9a00000f 	bls	1d67c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x88>
   1d63c:	e5d34000 	ldrb	r4, [r3]
   1d640:	e1a00003 	mov	r0, r3
   1d644:	e5d32001 	ldrb	r2, [r3, #1]
   1d648:	e0833004 	add	r3, r3, r4
   1d64c:	e15c0003 	cmp	ip, r3
   1d650:	2afffff1 	bcs	1d61c <CUSBConfigurationParser::GetDescriptor(unsigned char)+0x28>
   1d654:	e30c157c 	movw	r1, #50556	@ 0xc57c
   1d658:	e3401003 	movt	r1, #3
   1d65c:	e30c05b0 	movw	r0, #50608	@ 0xc5b0
   1d660:	e3400003 	movt	r0, #3
   1d664:	e3a020b2 	mov	r2, #178	@ 0xb2
   1d668:	eb0039db 	bl	2bddc <assertion_failed>
   1d66c:	e58e3010 	str	r3, [lr, #16]
   1d670:	e58e0018 	str	r0, [lr, #24]
   1d674:	e58e0014 	str	r0, [lr, #20]
   1d678:	e8bd8010 	pop	{r4, pc}
   1d67c:	e3a00000 	mov	r0, #0
   1d680:	e58e0014 	str	r0, [lr, #20]
   1d684:	e8bd8010 	pop	{r4, pc}
   1d688:	e30c157c 	movw	r1, #50556	@ 0xc57c
   1d68c:	e3401003 	movt	r1, #3
   1d690:	e30c0164 	movw	r0, #49508	@ 0xc164
   1d694:	e3400003 	movt	r0, #3
   1d698:	e3a020a8 	mov	r2, #168	@ 0xa8
   1d69c:	eb0039ce 	bl	2bddc <assertion_failed>

0001d6a0 <CUSBConfigurationParser::GetCurrentDescriptor()>:
   1d6a0:	e5d03008 	ldrb	r3, [r0, #8]
   1d6a4:	e92d4010 	push	{r4, lr}
   1d6a8:	e3530000 	cmp	r3, #0
   1d6ac:	0a000008 	beq	1d6d4 <CUSBConfigurationParser::GetCurrentDescriptor()+0x34>
   1d6b0:	e5900014 	ldr	r0, [r0, #20]
   1d6b4:	e3500000 	cmp	r0, #0
   1d6b8:	18bd8010 	popne	{r4, pc}
   1d6bc:	e30c157c 	movw	r1, #50556	@ 0xc57c
   1d6c0:	e3401003 	movt	r1, #3
   1d6c4:	e30c05cc 	movw	r0, #50636	@ 0xc5cc
   1d6c8:	e3400003 	movt	r0, #3
   1d6cc:	e3a020d1 	mov	r2, #209	@ 0xd1
   1d6d0:	eb0039c1 	bl	2bddc <assertion_failed>
   1d6d4:	e30c157c 	movw	r1, #50556	@ 0xc57c
   1d6d8:	e3401003 	movt	r1, #3
   1d6dc:	e30c0164 	movw	r0, #49508	@ 0xc164
   1d6e0:	e3400003 	movt	r0, #3
   1d6e4:	e3a020d0 	mov	r2, #208	@ 0xd0
   1d6e8:	eb0039bb 	bl	2bddc <assertion_failed>

0001d6ec <CUSBConfigurationParser::Error(char const*) const>:
   1d6ec:	e92d4030 	push	{r4, r5, lr}
   1d6f0:	e2515000 	subs	r5, r1, #0
   1d6f4:	e24dd00c 	sub	sp, sp, #12
   1d6f8:	0a00000f 	beq	1d73c <CUSBConfigurationParser::Error(char const*) const+0x50>
   1d6fc:	e1a04000 	mov	r4, r0
   1d700:	eb004430 	bl	2e7c8 <CLogger::Get()>
   1d704:	e1a01005 	mov	r1, r5
   1d708:	e5942000 	ldr	r2, [r4]
   1d70c:	e5943018 	ldr	r3, [r4, #24]
   1d710:	e0433002 	sub	r3, r3, r2
   1d714:	e3a02001 	mov	r2, #1
   1d718:	e58d3000 	str	r3, [sp]
   1d71c:	e30c35e8 	movw	r3, #50664	@ 0xc5e8
   1d720:	e3403003 	movt	r3, #3
   1d724:	eb0045f0 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d728:	e1a02005 	mov	r2, r5
   1d72c:	e1c400d0 	ldrd	r0, [r4]
   1d730:	e28dd00c 	add	sp, sp, #12
   1d734:	e8bd4030 	pop	{r4, r5, lr}
   1d738:	ea003b60 	b	2c4c0 <debug_hexdump(void const*, unsigned int, char const*)>
   1d73c:	e30c157c 	movw	r1, #50556	@ 0xc57c
   1d740:	e3401003 	movt	r1, #3
   1d744:	e30b0114 	movw	r0, #45332	@ 0xb114
   1d748:	e3400003 	movt	r0, #3
   1d74c:	e3a020d8 	mov	r2, #216	@ 0xd8
   1d750:	eb0039a1 	bl	2bddc <assertion_failed>

0001d754 <CUSBGamePadDevice::GetInitialState()>:
   1d754:	e2800024 	add	r0, r0, #36	@ 0x24
   1d758:	e12fff1e 	bx	lr

0001d75c <CUSBGamePadDevice::Configure()>:
   1d75c:	e2803f4a 	add	r3, r0, #296	@ 0x128
   1d760:	e92d4070 	push	{r4, r5, r6, lr}
   1d764:	e24dd008 	sub	sp, sp, #8
   1d768:	e1d310b0 	ldrh	r1, [r3]
   1d76c:	e3510000 	cmp	r1, #0
   1d770:	0a000020 	beq	1d7f8 <CUSBGamePadDevice::Configure()+0x9c>
   1d774:	e1a04000 	mov	r4, r0
   1d778:	ebffd68f 	bl	131bc <CUSBHIDDevice::ConfigureHID(unsigned int)>
   1d77c:	e2505000 	subs	r5, r0, #0
   1d780:	0a000012 	beq	1d7d0 <CUSBGamePadDevice::Configure()+0x74>
   1d784:	e594612c 	ldr	r6, [r4, #300]	@ 0x12c
   1d788:	e3560000 	cmp	r6, #0
   1d78c:	1a00001f 	bne	1d810 <CUSBGamePadDevice::Configure()+0xb4>
   1d790:	e3a01001 	mov	r1, #1
   1d794:	e30f29a8 	movw	r2, #63912	@ 0xf9a8
   1d798:	e3402003 	movt	r2, #3
   1d79c:	e30400e8 	movw	r0, #16616	@ 0x40e8
   1d7a0:	e3400004 	movt	r0, #4
   1d7a4:	eb0063ac 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   1d7a8:	e584012c 	str	r0, [r4, #300]	@ 0x12c
   1d7ac:	eb003d1e 	bl	2cc2c <CDeviceNameService::Get()>
   1d7b0:	e594212c 	ldr	r2, [r4, #300]	@ 0x12c
   1d7b4:	e59f106c 	ldr	r1, [pc, #108]	@ 1d828 <CUSBGamePadDevice::Configure()+0xcc>
   1d7b8:	e1a03004 	mov	r3, r4
   1d7bc:	e58d6000 	str	r6, [sp]
   1d7c0:	eb003d25 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1d7c4:	e1a00005 	mov	r0, r5
   1d7c8:	e28dd008 	add	sp, sp, #8
   1d7cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d7d0:	eb0043fc 	bl	2e7c8 <CLogger::Get()>
   1d7d4:	e3a02001 	mov	r2, #1
   1d7d8:	e30b3558 	movw	r3, #46424	@ 0xb558
   1d7dc:	e3403003 	movt	r3, #3
   1d7e0:	e30f19a8 	movw	r1, #63912	@ 0xf9a8
   1d7e4:	e3401003 	movt	r1, #3
   1d7e8:	eb0045bf 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1d7ec:	e1a00005 	mov	r0, r5
   1d7f0:	e28dd008 	add	sp, sp, #8
   1d7f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d7f8:	e30c1618 	movw	r1, #50712	@ 0xc618
   1d7fc:	e3401003 	movt	r1, #3
   1d800:	e30b023c 	movw	r0, #45628	@ 0xb23c
   1d804:	e3400003 	movt	r0, #3
   1d808:	e3a0203a 	mov	r2, #58	@ 0x3a
   1d80c:	eb003972 	bl	2bddc <assertion_failed>
   1d810:	e30c1618 	movw	r1, #50712	@ 0xc618
   1d814:	e3401003 	movt	r1, #3
   1d818:	e30b0724 	movw	r0, #46884	@ 0xb724
   1d81c:	e3400003 	movt	r0, #3
   1d820:	e3a02042 	mov	r2, #66	@ 0x42
   1d824:	eb00396c 	bl	2bddc <assertion_failed>
   1d828:	0003f9b0 	.word	0x0003f9b0

0001d82c <CUSBGamePadDevice::ReportHandler(unsigned char const*, unsigned int)>:
   1d82c:	e3510000 	cmp	r1, #0
   1d830:	012fff1e 	bxeq	lr
   1d834:	e2803f4a 	add	r3, r0, #296	@ 0x128
   1d838:	e92d4070 	push	{r4, r5, r6, lr}
   1d83c:	e1a04000 	mov	r4, r0
   1d840:	e1d330b0 	ldrh	r3, [r3]
   1d844:	e1530002 	cmp	r3, r2
   1d848:	18bd8070 	popne	{r4, r5, r6, pc}
   1d84c:	e5903124 	ldr	r3, [r0, #292]	@ 0x124
   1d850:	e3530000 	cmp	r3, #0
   1d854:	08bd8070 	popeq	{r4, r5, r6, pc}
   1d858:	e1a05000 	mov	r5, r0
   1d85c:	e4953024 	ldr	r3, [r5], #36	@ 0x24
   1d860:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   1d864:	e12fff33 	blx	r3
   1d868:	e594012c 	ldr	r0, [r4, #300]	@ 0x12c
   1d86c:	e5943124 	ldr	r3, [r4, #292]	@ 0x124
   1d870:	e1a01005 	mov	r1, r5
   1d874:	e2400001 	sub	r0, r0, #1
   1d878:	e8bd4070 	pop	{r4, r5, r6, lr}
   1d87c:	e12fff13 	bx	r3

0001d880 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))>:
   1d880:	e5903124 	ldr	r3, [r0, #292]	@ 0x124
   1d884:	e92d4010 	push	{r4, lr}
   1d888:	e3530000 	cmp	r3, #0
   1d88c:	1a000008 	bne	1d8b4 <CUSBGamePadDevice::RegisterStatusHandler(void (*)(unsigned int, TGamePadState const*))+0x34>
   1d890:	e3510000 	cmp	r1, #0
   1d894:	e5801124 	str	r1, [r0, #292]	@ 0x124
   1d898:	18bd8010 	popne	{r4, pc}
   1d89c:	e30c1618 	movw	r1, #50712	@ 0xc618
   1d8a0:	e3401003 	movt	r1, #3
   1d8a4:	e30c0640 	movw	r0, #50752	@ 0xc640
   1d8a8:	e3400003 	movt	r0, #3
   1d8ac:	e3a02053 	mov	r2, #83	@ 0x53
   1d8b0:	eb003949 	bl	2bddc <assertion_failed>
   1d8b4:	e30c1618 	movw	r1, #50712	@ 0xc618
   1d8b8:	e3401003 	movt	r1, #3
   1d8bc:	e30c0628 	movw	r0, #50728	@ 0xc628
   1d8c0:	e3400003 	movt	r0, #3
   1d8c4:	e3a02051 	mov	r2, #81	@ 0x51
   1d8c8:	eb003943 	bl	2bddc <assertion_failed>

0001d8cc <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)>:
   1d8cc:	e92d4010 	push	{r4, lr}
   1d8d0:	e3a02000 	mov	r2, #0
   1d8d4:	e1a04000 	mov	r4, r0
   1d8d8:	ebffd5f6 	bl	130b8 <CUSBHIDDevice::CUSBHIDDevice(CUSBFunction*, unsigned int)>
   1d8dc:	e2843f4a 	add	r3, r4, #296	@ 0x128
   1d8e0:	e59f2024 	ldr	r2, [pc, #36]	@ 1d90c <CUSBGamePadDevice::CUSBGamePadDevice(CUSBFunction*)+0x40>
   1d8e4:	e3a01000 	mov	r1, #0
   1d8e8:	e5842000 	str	r2, [r4]
   1d8ec:	e2840024 	add	r0, r4, #36	@ 0x24
   1d8f0:	e5841124 	str	r1, [r4, #292]	@ 0x124
   1d8f4:	e3a02c01 	mov	r2, #256	@ 0x100
   1d8f8:	e1c310b0 	strh	r1, [r3]
   1d8fc:	e584112c 	str	r1, [r4, #300]	@ 0x12c
   1d900:	eb005fe8 	bl	358a8 <memset>
   1d904:	e1a00004 	mov	r0, r4
   1d908:	e8bd8010 	pop	{r4, pc}
   1d90c:	0003f9c0 	.word	0x0003f9c0

0001d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1d910:	e590312c 	ldr	r3, [r0, #300]	@ 0x12c
   1d914:	e92d4070 	push	{r4, r5, r6, lr}
   1d918:	e3a06000 	mov	r6, #0
   1d91c:	e59f5048 	ldr	r5, [pc, #72]	@ 1d96c <CUSBGamePadDevice::~CUSBGamePadDevice()+0x5c>
   1d920:	e1a04000 	mov	r4, r0
   1d924:	e1530006 	cmp	r3, r6
   1d928:	e5805000 	str	r5, [r0]
   1d92c:	e5806124 	str	r6, [r0, #292]	@ 0x124
   1d930:	1a000003 	bne	1d944 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x34>
   1d934:	e1a00004 	mov	r0, r4
   1d938:	ebffd5f4 	bl	13110 <CUSBHIDDevice::~CUSBHIDDevice()>
   1d93c:	e1a00004 	mov	r0, r4
   1d940:	e8bd8070 	pop	{r4, r5, r6, pc}
   1d944:	eb003cb8 	bl	2cc2c <CDeviceNameService::Get()>
   1d948:	e2451010 	sub	r1, r5, #16
   1d94c:	e594212c 	ldr	r2, [r4, #300]	@ 0x12c
   1d950:	e1a03006 	mov	r3, r6
   1d954:	eb003cda 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1d958:	e594112c 	ldr	r1, [r4, #300]	@ 0x12c
   1d95c:	e30400e8 	movw	r0, #16616	@ 0x40e8
   1d960:	e3400004 	movt	r0, #4
   1d964:	eb00636e 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   1d968:	eafffff1 	b	1d934 <CUSBGamePadDevice::~CUSBGamePadDevice()+0x24>
   1d96c:	0003f9c0 	.word	0x0003f9c0

0001d970 <CUSBGamePadDevice::~CUSBGamePadDevice()>:
   1d970:	e92d4010 	push	{r4, lr}
   1d974:	e1a04000 	mov	r4, r0
   1d978:	ebffffe4 	bl	1d910 <CUSBGamePadDevice::~CUSBGamePadDevice()>
   1d97c:	e1a00004 	mov	r0, r4
   1d980:	e3a01e13 	mov	r1, #304	@ 0x130
   1d984:	eb0061fe 	bl	36184 <operator delete(void*, unsigned int)>
   1d988:	e1a00004 	mov	r0, r4
   1d98c:	e8bd8010 	pop	{r4, pc}

0001d990 <_GLOBAL__sub_I__ZN17CUSBGamePadDevice18s_DeviceNumberPoolE>:
   1d990:	e92d4010 	push	{r4, lr}
   1d994:	e30440e8 	movw	r4, #16616	@ 0x40e8
   1d998:	e3404004 	movt	r4, #4
   1d99c:	e3a0203f 	mov	r2, #63	@ 0x3f
   1d9a0:	e3a01001 	mov	r1, #1
   1d9a4:	e1a00004 	mov	r0, r4
   1d9a8:	eb006316 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1d9ac:	e1a00004 	mov	r0, r4
   1d9b0:	e3042180 	movw	r2, #16768	@ 0x4180
   1d9b4:	e3402004 	movt	r2, #4
   1d9b8:	e3061658 	movw	r1, #26200	@ 0x6658
   1d9bc:	e3401003 	movt	r1, #3
   1d9c0:	e8bd4010 	pop	{r4, lr}
   1d9c4:	ea0059e2 	b	34154 <__aeabi_atexit>

0001d9c8 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   1d9c8:	e92d4070 	push	{r4, r5, r6, lr}
   1d9cc:	e1a04000 	mov	r4, r0
   1d9d0:	e30f5a10 	movw	r5, #64016	@ 0xfa10
   1d9d4:	e3405003 	movt	r5, #3
   1d9d8:	e2853008 	add	r3, r5, #8
   1d9dc:	e5803000 	str	r3, [r0]
   1d9e0:	eb003c91 	bl	2cc2c <CDeviceNameService::Get()>
   1d9e4:	e594201c 	ldr	r2, [r4, #28]
   1d9e8:	e3a03000 	mov	r3, #0
   1d9ec:	e2851028 	add	r1, r5, #40	@ 0x28
   1d9f0:	eb003cb3 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1d9f4:	e594101c 	ldr	r1, [r4, #28]
   1d9f8:	e30400f8 	movw	r0, #16632	@ 0x40f8
   1d9fc:	e3400004 	movt	r0, #4
   1da00:	eb006347 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   1da04:	e1a00004 	mov	r0, r4
   1da08:	eb003b1f 	bl	2c68c <CDevice::~CDevice()>
   1da0c:	e1a00004 	mov	r0, r4
   1da10:	e8bd8070 	pop	{r4, r5, r6, pc}

0001da14 <ProxyHandler(unsigned int, unsigned char*, unsigned int, unsigned int, void*)>:
   1da14:	e92d4010 	push	{r4, lr}
   1da18:	e59d3008 	ldr	r3, [sp, #8]
   1da1c:	e3530000 	cmp	r3, #0
   1da20:	0a000001 	beq	1da2c <ProxyHandler(unsigned int, unsigned char*, unsigned int, unsigned int, void*)+0x18>
   1da24:	e8bd4010 	pop	{r4, lr}
   1da28:	e12fff13 	bx	r3
   1da2c:	e30c1658 	movw	r1, #50776	@ 0xc658
   1da30:	e3401003 	movt	r1, #3
   1da34:	e30c0664 	movw	r0, #50788	@ 0xc664
   1da38:	e3400003 	movt	r0, #3
   1da3c:	e3a0203e 	mov	r2, #62	@ 0x3e
   1da40:	eb0038e5 	bl	2bddc <assertion_failed>

0001da44 <CUSBMIDIDevice::~CUSBMIDIDevice()>:
   1da44:	e92d4070 	push	{r4, r5, r6, lr}
   1da48:	e1a04000 	mov	r4, r0
   1da4c:	e30f5a10 	movw	r5, #64016	@ 0xfa10
   1da50:	e3405003 	movt	r5, #3
   1da54:	e2853008 	add	r3, r5, #8
   1da58:	e5803000 	str	r3, [r0]
   1da5c:	eb003c72 	bl	2cc2c <CDeviceNameService::Get()>
   1da60:	e594201c 	ldr	r2, [r4, #28]
   1da64:	e3a03000 	mov	r3, #0
   1da68:	e2851028 	add	r1, r5, #40	@ 0x28
   1da6c:	eb003c94 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1da70:	e594101c 	ldr	r1, [r4, #28]
   1da74:	e30400f8 	movw	r0, #16632	@ 0x40f8
   1da78:	e3400004 	movt	r0, #4
   1da7c:	eb006328 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   1da80:	e1a00004 	mov	r0, r4
   1da84:	eb003b00 	bl	2c68c <CDevice::~CDevice()>
   1da88:	e1a00004 	mov	r0, r4
   1da8c:	e3a01020 	mov	r1, #32
   1da90:	eb0061bb 	bl	36184 <operator delete(void*, unsigned int)>
   1da94:	e1a00004 	mov	r0, r4
   1da98:	e8bd8070 	pop	{r4, r5, r6, pc}

0001da9c <CUSBMIDIDevice::CUSBMIDIDevice()>:
   1da9c:	e92d4070 	push	{r4, r5, r6, lr}
   1daa0:	e1a04000 	mov	r4, r0
   1daa4:	e30f5a10 	movw	r5, #64016	@ 0xfa10
   1daa8:	e3405003 	movt	r5, #3
   1daac:	e24dd008 	sub	sp, sp, #8
   1dab0:	eb003b22 	bl	2c740 <CDevice::CDevice()>
   1dab4:	e3a06000 	mov	r6, #0
   1dab8:	e2853008 	add	r3, r5, #8
   1dabc:	e2852030 	add	r2, r5, #48	@ 0x30
   1dac0:	e5843000 	str	r3, [r4]
   1dac4:	e3a01001 	mov	r1, #1
   1dac8:	e5846008 	str	r6, [r4, #8]
   1dacc:	e30400f8 	movw	r0, #16632	@ 0x40f8
   1dad0:	e3400004 	movt	r0, #4
   1dad4:	e5846010 	str	r6, [r4, #16]
   1dad8:	e5c46018 	strb	r6, [r4, #24]
   1dadc:	eb0062de 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   1dae0:	e584001c 	str	r0, [r4, #28]
   1dae4:	eb003c50 	bl	2cc2c <CDeviceNameService::Get()>
   1dae8:	e594201c 	ldr	r2, [r4, #28]
   1daec:	e1a03004 	mov	r3, r4
   1daf0:	e2851028 	add	r1, r5, #40	@ 0x28
   1daf4:	e58d6000 	str	r6, [sp]
   1daf8:	eb003c57 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1dafc:	e1a00004 	mov	r0, r4
   1db00:	e28dd008 	add	sp, sp, #8
   1db04:	e8bd8070 	pop	{r4, r5, r6, pc}

0001db08 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))>:
   1db08:	e3510000 	cmp	r1, #0
   1db0c:	e92d4010 	push	{r4, lr}
   1db10:	0a000007 	beq	1db34 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x2c>
   1db14:	e5903008 	ldr	r3, [r0, #8]
   1db18:	e580100c 	str	r1, [r0, #12]
   1db1c:	e3530000 	cmp	r3, #0
   1db20:	1a000009 	bne	1db4c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int))+0x44>
   1db24:	e30d3a14 	movw	r3, #55828	@ 0xda14
   1db28:	e3403001 	movt	r3, #1
   1db2c:	e5803008 	str	r3, [r0, #8]
   1db30:	e8bd8010 	pop	{r4, pc}
   1db34:	e30c1658 	movw	r1, #50776	@ 0xc658
   1db38:	e3401003 	movt	r1, #3
   1db3c:	e30c066c 	movw	r0, #50796	@ 0xc66c
   1db40:	e3400003 	movt	r0, #3
   1db44:	e3a02044 	mov	r2, #68	@ 0x44
   1db48:	eb0038a3 	bl	2bddc <assertion_failed>
   1db4c:	e30c1658 	movw	r1, #50776	@ 0xc658
   1db50:	e3401003 	movt	r1, #3
   1db54:	e30c067c 	movw	r0, #50812	@ 0xc67c
   1db58:	e3400003 	movt	r0, #3
   1db5c:	e3a0204c 	mov	r2, #76	@ 0x4c
   1db60:	eb00389d 	bl	2bddc <assertion_failed>

0001db64 <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)>:
   1db64:	e5903008 	ldr	r3, [r0, #8]
   1db68:	e92d4010 	push	{r4, lr}
   1db6c:	e3530000 	cmp	r3, #0
   1db70:	e580200c 	str	r2, [r0, #12]
   1db74:	1a000008 	bne	1db9c <CUSBMIDIDevice::RegisterPacketHandler(void (*)(unsigned int, unsigned char*, unsigned int, unsigned int, void*), void*)+0x38>
   1db78:	e3510000 	cmp	r1, #0
   1db7c:	e5801008 	str	r1, [r0, #8]
   1db80:	18bd8010 	popne	{r4, pc}
   1db84:	e30c1658 	movw	r1, #50776	@ 0xc658
   1db88:	e3401003 	movt	r1, #3
   1db8c:	e30c0694 	movw	r0, #50836	@ 0xc694
   1db90:	e3400003 	movt	r0, #3
   1db94:	e3a0204e 	mov	r2, #78	@ 0x4e
   1db98:	eb00388f 	bl	2bddc <assertion_failed>
   1db9c:	e30c1658 	movw	r1, #50776	@ 0xc658
   1dba0:	e3401003 	movt	r1, #3
   1dba4:	e30c067c 	movw	r0, #50812	@ 0xc67c
   1dba8:	e3400003 	movt	r0, #3
   1dbac:	e3a0204c 	mov	r2, #76	@ 0x4c
   1dbb0:	eb003889 	bl	2bddc <assertion_failed>

0001dbb4 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)>:
   1dbb4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1dbb8:	e1a03000 	mov	r3, r0
   1dbbc:	e590e010 	ldr	lr, [r0, #16]
   1dbc0:	e35e0000 	cmp	lr, #0
   1dbc4:	0a000005 	beq	1dbe0 <CUSBMIDIDevice::SendEventPackets(unsigned char const*, unsigned int)+0x2c>
   1dbc8:	e1a00001 	mov	r0, r1
   1dbcc:	e1a01002 	mov	r1, r2
   1dbd0:	e5932014 	ldr	r2, [r3, #20]
   1dbd4:	e1a0300e 	mov	r3, lr
   1dbd8:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
   1dbdc:	e12fff13 	bx	r3
   1dbe0:	e1a0000e 	mov	r0, lr
   1dbe4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0001dbe8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)>:
   1dbe8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dbec:	e351000f 	cmp	r1, #15
   1dbf0:	e28db020 	add	fp, sp, #32
   1dbf4:	e24dd01c 	sub	sp, sp, #28
   1dbf8:	8a0000ae 	bhi	1deb8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2d0>
   1dbfc:	e3520000 	cmp	r2, #0
   1dc00:	0a0000ba 	beq	1def0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x308>
   1dc04:	e3530000 	cmp	r3, #0
   1dc08:	0a0000be 	beq	1df08 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x320>
   1dc0c:	e1a09000 	mov	r9, r0
   1dc10:	e1a00103 	lsl	r0, r3, #2
   1dc14:	e2800007 	add	r0, r0, #7
   1dc18:	e1a01201 	lsl	r1, r1, #4
   1dc1c:	e0825003 	add	r5, r2, r3
   1dc20:	e3c03007 	bic	r3, r0, #7
   1dc24:	e04dd003 	sub	sp, sp, r3
   1dc28:	e3a08000 	mov	r8, #0
   1dc2c:	e6ef7071 	uxtb	r7, r1
   1dc30:	e28de008 	add	lr, sp, #8
   1dc34:	e30faa10 	movw	sl, #64016	@ 0xfa10
   1dc38:	e340a003 	movt	sl, #3
   1dc3c:	e3873004 	orr	r3, r7, #4
   1dc40:	e1a0400a 	mov	r4, sl
   1dc44:	e50b3028 	str	r3, [fp, #-40]	@ 0xffffffd8
   1dc48:	e1a0c008 	mov	ip, r8
   1dc4c:	e1a0300e 	mov	r3, lr
   1dc50:	e1a00008 	mov	r0, r8
   1dc54:	e1a01008 	mov	r1, r8
   1dc58:	e1a06008 	mov	r6, r8
   1dc5c:	e1a0a009 	mov	sl, r9
   1dc60:	e50be02c 	str	lr, [fp, #-44]	@ 0xffffffd4
   1dc64:	ea00000e 	b	1dca4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xbc>
   1dc68:	e35900ef 	cmp	r9, #239	@ 0xef
   1dc6c:	8a000028 	bhi	1dd14 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x12c>
   1dc70:	e1a00229 	lsr	r0, r9, #4
   1dc74:	e2811001 	add	r1, r1, #1
   1dc78:	e187c000 	orr	ip, r7, r0
   1dc7c:	e4c3c001 	strb	ip, [r3], #1
   1dc80:	e0840100 	add	r0, r4, r0, lsl #2
   1dc84:	e590c038 	ldr	ip, [r0, #56]	@ 0x38
   1dc88:	e25cc001 	subs	ip, ip, #1
   1dc8c:	e2811001 	add	r1, r1, #1
   1dc90:	13a00001 	movne	r0, #1
   1dc94:	e4c39001 	strb	r9, [r3], #1
   1dc98:	0a000034 	beq	1dd70 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x188>
   1dc9c:	e1550002 	cmp	r5, r2
   1dca0:	0a000010 	beq	1dce8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x100>
   1dca4:	e4d29001 	ldrb	r9, [r2], #1
   1dca8:	e3500001 	cmp	r0, #1
   1dcac:	0afffff5 	beq	1dc88 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xa0>
   1dcb0:	e3500002 	cmp	r0, #2
   1dcb4:	1affffeb 	bne	1dc68 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x80>
   1dcb8:	e35c0003 	cmp	ip, #3
   1dcbc:	0a000036 	beq	1dd9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1b4>
   1dcc0:	e1a0e003 	mov	lr, r3
   1dcc4:	e35900f7 	cmp	r9, #247	@ 0xf7
   1dcc8:	e2811001 	add	r1, r1, #1
   1dccc:	e4ce9001 	strb	r9, [lr], #1
   1dcd0:	e28c9001 	add	r9, ip, #1
   1dcd4:	0a000044 	beq	1ddec <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x204>
   1dcd8:	e1a0c009 	mov	ip, r9
   1dcdc:	e1a0300e 	mov	r3, lr
   1dce0:	e1550002 	cmp	r5, r2
   1dce4:	1affffee 	bne	1dca4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xbc>
   1dce8:	e51be02c 	ldr	lr, [fp, #-44]	@ 0xffffffd4
   1dcec:	e3500000 	cmp	r0, #0
   1dcf0:	1a000076 	bne	1ded0 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2e8>
   1dcf4:	e59a3010 	ldr	r3, [sl, #16]
   1dcf8:	e3530000 	cmp	r3, #0
   1dcfc:	0a000079 	beq	1dee8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x300>
   1dd00:	e59a2014 	ldr	r2, [sl, #20]
   1dd04:	e1a0000e 	mov	r0, lr
   1dd08:	e12fff33 	blx	r3
   1dd0c:	e24bd020 	sub	sp, fp, #32
   1dd10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd14:	e35900f0 	cmp	r9, #240	@ 0xf0
   1dd18:	0a00004c 	beq	1de50 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x268>
   1dd1c:	e289000f 	add	r0, r9, #15
   1dd20:	e3a0c001 	mov	ip, #1
   1dd24:	e6ef0070 	uxtb	r0, r0
   1dd28:	e1a0001c 	lsl	r0, ip, r0
   1dd2c:	e306cea0 	movw	ip, #28320	@ 0x6ea0
   1dd30:	e110000c 	tst	r0, ip
   1dd34:	1a000050 	bne	1de7c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x294>
   1dd38:	e3100005 	tst	r0, #5
   1dd3c:	1a000021 	bne	1ddc8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1e0>
   1dd40:	e35900f2 	cmp	r9, #242	@ 0xf2
   1dd44:	1a000075 	bne	1df20 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x338>
   1dd48:	e1a00003 	mov	r0, r3
   1dd4c:	e387c003 	orr	ip, r7, #3
   1dd50:	e2811002 	add	r1, r1, #2
   1dd54:	e4c0c002 	strb	ip, [r0], #2
   1dd58:	e3e0c00d 	mvn	ip, #13
   1dd5c:	e5c3c001 	strb	ip, [r3, #1]
   1dd60:	e3a0c002 	mov	ip, #2
   1dd64:	e1a03000 	mov	r3, r0
   1dd68:	e3a00001 	mov	r0, #1
   1dd6c:	eaffffca 	b	1dc9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1dd70:	e1a0c003 	mov	ip, r3
   1dd74:	e2110003 	ands	r0, r1, #3
   1dd78:	e1a0300c 	mov	r3, ip
   1dd7c:	1041c00c 	subne	ip, r1, ip
   1dd80:	0a000003 	beq	1dd94 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x1ac>
   1dd84:	e4c36001 	strb	r6, [r3], #1
   1dd88:	e083100c 	add	r1, r3, ip
   1dd8c:	e2110003 	ands	r0, r1, #3
   1dd90:	1afffffb 	bne	1dd84 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x19c>
   1dd94:	e1a0c000 	mov	ip, r0
   1dd98:	eaffffbf 	b	1dc9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1dd9c:	e1a0e003 	mov	lr, r3
   1dda0:	e51bc028 	ldr	ip, [fp, #-40]	@ 0xffffffd8
   1dda4:	e2811002 	add	r1, r1, #2
   1dda8:	e35900f7 	cmp	r9, #247	@ 0xf7
   1ddac:	e1a08003 	mov	r8, r3
   1ddb0:	e4cec002 	strb	ip, [lr], #2
   1ddb4:	e5c39001 	strb	r9, [r3, #1]
   1ddb8:	0a000039 	beq	1dea4 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2bc>
   1ddbc:	e1a0300e 	mov	r3, lr
   1ddc0:	e3a0c001 	mov	ip, #1
   1ddc4:	eaffffb4 	b	1dc9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1ddc8:	e1a00003 	mov	r0, r3
   1ddcc:	e387c002 	orr	ip, r7, #2
   1ddd0:	e2811002 	add	r1, r1, #2
   1ddd4:	e4c0c002 	strb	ip, [r0], #2
   1ddd8:	e3a0c001 	mov	ip, #1
   1dddc:	e5c39001 	strb	r9, [r3, #1]
   1dde0:	e1a03000 	mov	r3, r0
   1dde4:	e1a0000c 	mov	r0, ip
   1dde8:	eaffffab 	b	1dc9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1ddec:	e28c0005 	add	r0, ip, #5
   1ddf0:	e3590002 	cmp	r9, #2
   1ddf4:	e1870000 	orr	r0, r7, r0
   1ddf8:	e5c80000 	strb	r0, [r8]
   1ddfc:	e28c0002 	add	r0, ip, #2
   1de00:	8a000023 	bhi	1de94 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x2ac>
   1de04:	e50be030 	str	lr, [fp, #-48]	@ 0xffffffd0
   1de08:	e04c3003 	sub	r3, ip, r3
   1de0c:	e3a09000 	mov	r9, #0
   1de10:	e50b5034 	str	r5, [fp, #-52]	@ 0xffffffcc
   1de14:	e4ce9001 	strb	r9, [lr], #1
   1de18:	e08e5003 	add	r5, lr, r3
   1de1c:	e3550002 	cmp	r5, #2
   1de20:	9afffffb 	bls	1de14 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x22c>
   1de24:	e26ce001 	rsb	lr, ip, #1
   1de28:	e26c3002 	rsb	r3, ip, #2
   1de2c:	e51bc030 	ldr	ip, [fp, #-48]	@ 0xffffffd0
   1de30:	e2800001 	add	r0, r0, #1
   1de34:	e2811001 	add	r1, r1, #1
   1de38:	e51b5034 	ldr	r5, [fp, #-52]	@ 0xffffffcc
   1de3c:	e08c3003 	add	r3, ip, r3
   1de40:	e08e1001 	add	r1, lr, r1
   1de44:	e08ec000 	add	ip, lr, r0
   1de48:	e3a00000 	mov	r0, #0
   1de4c:	eaffff92 	b	1dc9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1de50:	e1a00003 	mov	r0, r3
   1de54:	e51bc028 	ldr	ip, [fp, #-40]	@ 0xffffffd8
   1de58:	e1a08003 	mov	r8, r3
   1de5c:	e2811002 	add	r1, r1, #2
   1de60:	e4c0c002 	strb	ip, [r0], #2
   1de64:	e3e0c00f 	mvn	ip, #15
   1de68:	e5c3c001 	strb	ip, [r3, #1]
   1de6c:	e3a0c001 	mov	ip, #1
   1de70:	e1a03000 	mov	r3, r0
   1de74:	e3a00002 	mov	r0, #2
   1de78:	eaffff87 	b	1dc9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1de7c:	e1a0c003 	mov	ip, r3
   1de80:	e3870005 	orr	r0, r7, #5
   1de84:	e2811002 	add	r1, r1, #2
   1de88:	e4cc0002 	strb	r0, [ip], #2
   1de8c:	e5c39001 	strb	r9, [r3, #1]
   1de90:	eaffffb7 	b	1dd74 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x18c>
   1de94:	e1a0c000 	mov	ip, r0
   1de98:	e1a0300e 	mov	r3, lr
   1de9c:	e3a00000 	mov	r0, #0
   1dea0:	eaffff7d 	b	1dc9c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0xb4>
   1dea4:	e387c005 	orr	ip, r7, #5
   1dea8:	e50be030 	str	lr, [fp, #-48]	@ 0xffffffd0
   1deac:	e4c3c001 	strb	ip, [r3], #1
   1deb0:	e3a0c000 	mov	ip, #0
   1deb4:	eaffffd3 	b	1de08 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x220>
   1deb8:	e30c1658 	movw	r1, #50776	@ 0xc658
   1debc:	e3401003 	movt	r1, #3
   1dec0:	e30c06ac 	movw	r0, #50860	@ 0xc6ac
   1dec4:	e3400003 	movt	r0, #3
   1dec8:	e3a0205d 	mov	r2, #93	@ 0x5d
   1decc:	eb0037c2 	bl	2bddc <assertion_failed>
   1ded0:	eb00423c 	bl	2e7c8 <CLogger::Get()>
   1ded4:	e30c36e0 	movw	r3, #50912	@ 0xc6e0
   1ded8:	e3403003 	movt	r3, #3
   1dedc:	e59f105c 	ldr	r1, [pc, #92]	@ 1df40 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x358>
   1dee0:	e3a02002 	mov	r2, #2
   1dee4:	eb004400 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1dee8:	e3a00000 	mov	r0, #0
   1deec:	eaffff86 	b	1dd0c <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x124>
   1def0:	e30c1658 	movw	r1, #50776	@ 0xc658
   1def4:	e3401003 	movt	r1, #3
   1def8:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   1defc:	e3400003 	movt	r0, #3
   1df00:	e3a0205e 	mov	r2, #94	@ 0x5e
   1df04:	eb0037b4 	bl	2bddc <assertion_failed>
   1df08:	e30c1658 	movw	r1, #50776	@ 0xc658
   1df0c:	e3401003 	movt	r1, #3
   1df10:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   1df14:	e3400003 	movt	r0, #3
   1df18:	e3a0205f 	mov	r2, #95	@ 0x5f
   1df1c:	eb0037ae 	bl	2bddc <assertion_failed>
   1df20:	eb004228 	bl	2e7c8 <CLogger::Get()>
   1df24:	e59f1014 	ldr	r1, [pc, #20]	@ 1df40 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x358>
   1df28:	e3a02002 	mov	r2, #2
   1df2c:	e30c36bc 	movw	r3, #50876	@ 0xc6bc
   1df30:	e3403003 	movt	r3, #3
   1df34:	e58d9000 	str	r9, [sp]
   1df38:	eb0043eb 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1df3c:	eaffffe9 	b	1dee8 <CUSBMIDIDevice::SendPlainMIDI(unsigned int, unsigned char const*, unsigned int)+0x300>
   1df40:	0003fa40 	.word	0x0003fa40

0001df44 <CUSBMIDIDevice::SetAllSoundOffOnUSBError(bool)>:
   1df44:	e5c01018 	strb	r1, [r0, #24]
   1df48:	e12fff1e 	bx	lr

0001df4c <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)>:
   1df4c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1df50:	e2514000 	subs	r4, r1, #0
   1df54:	e24dd008 	sub	sp, sp, #8
   1df58:	0a00001e 	beq	1dfd8 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x8c>
   1df5c:	e1a06000 	mov	r6, r0
   1df60:	e2120003 	ands	r0, r2, #3
   1df64:	1a000021 	bne	1dff0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0xa4>
   1df68:	e0845002 	add	r5, r4, r2
   1df6c:	e1540005 	cmp	r4, r5
   1df70:	2a000016 	bcs	1dfd0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x84>
   1df74:	e30f7a10 	movw	r7, #64016	@ 0xfa10
   1df78:	e3407003 	movt	r7, #3
   1df7c:	e2844001 	add	r4, r4, #1
   1df80:	e5542001 	ldrb	r2, [r4, #-1]
   1df84:	e3520000 	cmp	r2, #0
   1df88:	0a00000c 	beq	1dfc0 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x74>
   1df8c:	e5968008 	ldr	r8, [r6, #8]
   1df90:	e3580000 	cmp	r8, #0
   1df94:	0a000008 	beq	1dfbc <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x70>
   1df98:	e202100f 	and	r1, r2, #15
   1df9c:	e596c00c 	ldr	ip, [r6, #12]
   1dfa0:	e596301c 	ldr	r3, [r6, #28]
   1dfa4:	e1a00222 	lsr	r0, r2, #4
   1dfa8:	e0871101 	add	r1, r7, r1, lsl #2
   1dfac:	e58dc000 	str	ip, [sp]
   1dfb0:	e5912038 	ldr	r2, [r1, #56]	@ 0x38
   1dfb4:	e1a01004 	mov	r1, r4
   1dfb8:	e12fff38 	blx	r8
   1dfbc:	e3a00001 	mov	r0, #1
   1dfc0:	e2843003 	add	r3, r4, #3
   1dfc4:	e2844004 	add	r4, r4, #4
   1dfc8:	e1550003 	cmp	r5, r3
   1dfcc:	8affffeb 	bhi	1df80 <CUSBMIDIDevice::CallPacketHandler(unsigned char*, unsigned int)+0x34>
   1dfd0:	e28dd008 	add	sp, sp, #8
   1dfd4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1dfd8:	e30c1658 	movw	r1, #50776	@ 0xc658
   1dfdc:	e3401003 	movt	r1, #3
   1dfe0:	e30c06f8 	movw	r0, #50936	@ 0xc6f8
   1dfe4:	e3400003 	movt	r0, #3
   1dfe8:	e3a020eb 	mov	r2, #235	@ 0xeb
   1dfec:	eb00377a 	bl	2bddc <assertion_failed>
   1dff0:	e30c1658 	movw	r1, #50776	@ 0xc658
   1dff4:	e3401003 	movt	r1, #3
   1dff8:	e30c0700 	movw	r0, #50944	@ 0xc700
   1dffc:	e3400003 	movt	r0, #3
   1e000:	e3a020ec 	mov	r2, #236	@ 0xec
   1e004:	eb003774 	bl	2bddc <assertion_failed>

0001e008 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)>:
   1e008:	e5903010 	ldr	r3, [r0, #16]
   1e00c:	e92d4010 	push	{r4, lr}
   1e010:	e3530000 	cmp	r3, #0
   1e014:	e5802014 	str	r2, [r0, #20]
   1e018:	1a000008 	bne	1e040 <CUSBMIDIDevice::RegisterSendEventsHandler(bool (*)(unsigned char const*, unsigned int, void*), void*)+0x38>
   1e01c:	e3510000 	cmp	r1, #0
   1e020:	e5801010 	str	r1, [r0, #16]
   1e024:	18bd8010 	popne	{r4, pc}
   1e028:	e30c1658 	movw	r1, #50776	@ 0xc658
   1e02c:	e3401003 	movt	r1, #3
   1e030:	e30c0738 	movw	r0, #51000	@ 0xc738
   1e034:	e3400003 	movt	r0, #3
   1e038:	e300210d 	movw	r2, #269	@ 0x10d
   1e03c:	eb003766 	bl	2bddc <assertion_failed>
   1e040:	e30c1658 	movw	r1, #50776	@ 0xc658
   1e044:	e3401003 	movt	r1, #3
   1e048:	e30c0720 	movw	r0, #50976	@ 0xc720
   1e04c:	e3400003 	movt	r0, #3
   1e050:	e300210b 	movw	r2, #267	@ 0x10b
   1e054:	eb003760 	bl	2bddc <assertion_failed>

0001e058 <CUSBMIDIDevice::GetAllSoundOffOnUSBError() const>:
   1e058:	e5d00018 	ldrb	r0, [r0, #24]
   1e05c:	e12fff1e 	bx	lr

0001e060 <_GLOBAL__sub_I__ZN14CUSBMIDIDevice18s_DeviceNumberPoolE>:
   1e060:	e92d4010 	push	{r4, lr}
   1e064:	e30440f8 	movw	r4, #16632	@ 0x40f8
   1e068:	e3404004 	movt	r4, #4
   1e06c:	e3a0203f 	mov	r2, #63	@ 0x3f
   1e070:	e3a01001 	mov	r1, #1
   1e074:	e1a00004 	mov	r0, r4
   1e078:	eb006162 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1e07c:	e1a00004 	mov	r0, r4
   1e080:	e3042180 	movw	r2, #16768	@ 0x4180
   1e084:	e3402004 	movt	r2, #4
   1e088:	e3061658 	movw	r1, #26200	@ 0x6658
   1e08c:	e3401003 	movt	r1, #3
   1e090:	e8bd4010 	pop	{r4, lr}
   1e094:	ea00582e 	b	34154 <__aeabi_atexit>

0001e098 <CUSBSerialDevice::SetBaudRate(unsigned int)>:
   1e098:	e3a00001 	mov	r0, #1
   1e09c:	e12fff1e 	bx	lr

0001e0a0 <CUSBSerialDevice::SetLineProperties(TUSBSerialDataBits, TUSBSerialParity, TUSBSerialStopBits)>:
   1e0a0:	e3a00001 	mov	r0, #1
   1e0a4:	e12fff1e 	bx	lr

0001e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>:
   1e0a8:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   1e0ac:	e92d4070 	push	{r4, r5, r6, lr}
   1e0b0:	e1a04000 	mov	r4, r0
   1e0b4:	e59f50ac 	ldr	r5, [pc, #172]	@ 1e168 <CUSBSerialDevice::~CUSBSerialDevice()+0xc0>
   1e0b8:	e3530000 	cmp	r3, #0
   1e0bc:	e5805000 	str	r5, [r0]
   1e0c0:	1a00001e 	bne	1e140 <CUSBSerialDevice::~CUSBSerialDevice()+0x98>
   1e0c4:	e5945024 	ldr	r5, [r4, #36]	@ 0x24
   1e0c8:	e3550000 	cmp	r5, #0
   1e0cc:	0a000004 	beq	1e0e4 <CUSBSerialDevice::~CUSBSerialDevice()+0x3c>
   1e0d0:	e1a00005 	mov	r0, r5
   1e0d4:	ebffc7c5 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1e0d8:	e3a01014 	mov	r1, #20
   1e0dc:	e1a00005 	mov	r0, r5
   1e0e0:	eb006027 	bl	36184 <operator delete(void*, unsigned int)>
   1e0e4:	e5945020 	ldr	r5, [r4, #32]
   1e0e8:	e3a03000 	mov	r3, #0
   1e0ec:	e5843024 	str	r3, [r4, #36]	@ 0x24
   1e0f0:	e1550003 	cmp	r5, r3
   1e0f4:	0a000004 	beq	1e10c <CUSBSerialDevice::~CUSBSerialDevice()+0x64>
   1e0f8:	e1a00005 	mov	r0, r5
   1e0fc:	ebffc7bb 	bl	fff0 <CUSBEndpoint::~CUSBEndpoint()>
   1e100:	e3a01014 	mov	r1, #20
   1e104:	e1a00005 	mov	r0, r5
   1e108:	eb00601d 	bl	36184 <operator delete(void*, unsigned int)>
   1e10c:	e5940028 	ldr	r0, [r4, #40]	@ 0x28
   1e110:	e3a03000 	mov	r3, #0
   1e114:	e5843020 	str	r3, [r4, #32]
   1e118:	e1500003 	cmp	r0, r3
   1e11c:	0a000000 	beq	1e124 <CUSBSerialDevice::~CUSBSerialDevice()+0x7c>
   1e120:	eb006011 	bl	3616c <operator delete[](void*)>
   1e124:	e3a03000 	mov	r3, #0
   1e128:	e1a00004 	mov	r0, r4
   1e12c:	e5843028 	str	r3, [r4, #40]	@ 0x28
   1e130:	e584302c 	str	r3, [r4, #44]	@ 0x2c
   1e134:	ebffc818 	bl	1019c <CUSBFunction::~CUSBFunction()>
   1e138:	e1a00004 	mov	r0, r4
   1e13c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e140:	eb003ab9 	bl	2cc2c <CDeviceNameService::Get()>
   1e144:	e2851034 	add	r1, r5, #52	@ 0x34
   1e148:	e594203c 	ldr	r2, [r4, #60]	@ 0x3c
   1e14c:	e3a03000 	mov	r3, #0
   1e150:	eb003adb 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1e154:	e594103c 	ldr	r1, [r4, #60]	@ 0x3c
   1e158:	e3040108 	movw	r0, #16648	@ 0x4108
   1e15c:	e3400004 	movt	r0, #4
   1e160:	eb00616f 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   1e164:	eaffffd6 	b	1e0c4 <CUSBSerialDevice::~CUSBSerialDevice()+0x1c>
   1e168:	0003fa90 	.word	0x0003fa90

0001e16c <CUSBSerialDevice::~CUSBSerialDevice()>:
   1e16c:	e92d4010 	push	{r4, lr}
   1e170:	e1a04000 	mov	r4, r0
   1e174:	ebffffcb 	bl	1e0a8 <CUSBSerialDevice::~CUSBSerialDevice()>
   1e178:	e1a00004 	mov	r0, r4
   1e17c:	e3a01040 	mov	r1, #64	@ 0x40
   1e180:	eb005fff 	bl	36184 <operator delete(void*, unsigned int)>
   1e184:	e1a00004 	mov	r0, r4
   1e188:	e8bd8010 	pop	{r4, pc}

0001e18c <CUSBSerialDevice::Write(void const*, unsigned int)>:
   1e18c:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   1e190:	e2518000 	subs	r8, r1, #0
   1e194:	e28db018 	add	fp, sp, #24
   1e198:	e24dd00c 	sub	sp, sp, #12
   1e19c:	0a00002c 	beq	1e254 <CUSBSerialDevice::Write(void const*, unsigned int)+0xc8>
   1e1a0:	e1a05000 	mov	r5, r0
   1e1a4:	e1a07002 	mov	r7, r2
   1e1a8:	e3520000 	cmp	r2, #0
   1e1ac:	0a00002e 	beq	1e26c <CUSBSerialDevice::Write(void const*, unsigned int)+0xe0>
   1e1b0:	f57ff05f 	dmb	sy
   1e1b4:	e5d5c038 	ldrb	ip, [r5, #56]	@ 0x38
   1e1b8:	e21c40ff 	ands	r4, ip, #255	@ 0xff
   1e1bc:	1afffffb 	bne	1e1b0 <CUSBSerialDevice::Write(void const*, unsigned int)+0x24>
   1e1c0:	e1a00005 	mov	r0, r5
   1e1c4:	ebffc916 	bl	10624 <CUSBFunction::GetHost() const>
   1e1c8:	e2506000 	subs	r6, r0, #0
   1e1cc:	0a00002c 	beq	1e284 <CUSBSerialDevice::Write(void const*, unsigned int)+0xf8>
   1e1d0:	e247c001 	sub	ip, r7, #1
   1e1d4:	e1a01008 	mov	r1, r8
   1e1d8:	e38cc03f 	orr	ip, ip, #63	@ 0x3f
   1e1dc:	e1a02007 	mov	r2, r7
   1e1e0:	e28cc040 	add	ip, ip, #64	@ 0x40
   1e1e4:	e3ccc007 	bic	ip, ip, #7
   1e1e8:	e04dd00c 	sub	sp, sp, ip
   1e1ec:	e28d8047 	add	r8, sp, #71	@ 0x47
   1e1f0:	e3c8803f 	bic	r8, r8, #63	@ 0x3f
   1e1f4:	e1a00008 	mov	r0, r8
   1e1f8:	eb005dc1 	bl	35904 <memcpy>
   1e1fc:	e5951024 	ldr	r1, [r5, #36]	@ 0x24
   1e200:	e3510000 	cmp	r1, #0
   1e204:	0a000024 	beq	1e29c <CUSBSerialDevice::Write(void const*, unsigned int)+0x110>
   1e208:	e58d4000 	str	r4, [sp]
   1e20c:	e1a03007 	mov	r3, r7
   1e210:	e1a02008 	mov	r2, r8
   1e214:	e1a00006 	mov	r0, r6
   1e218:	ebffd667 	bl	13bbc <CUSBHostController::Transfer(CUSBEndpoint*, void*, unsigned int, unsigned int)>
   1e21c:	e2504000 	subs	r4, r0, #0
   1e220:	ba000002 	blt	1e230 <CUSBSerialDevice::Write(void const*, unsigned int)+0xa4>
   1e224:	e1a00004 	mov	r0, r4
   1e228:	e24bd018 	sub	sp, fp, #24
   1e22c:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1e230:	eb004164 	bl	2e7c8 <CLogger::Get()>
   1e234:	e59f1078 	ldr	r1, [pc, #120]	@ 1e2b4 <CUSBSerialDevice::Write(void const*, unsigned int)+0x128>
   1e238:	e3a02002 	mov	r2, #2
   1e23c:	e30c3774 	movw	r3, #51060	@ 0xc774
   1e240:	e3403003 	movt	r3, #3
   1e244:	eb004328 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e248:	e1a00004 	mov	r0, r4
   1e24c:	e24bd018 	sub	sp, fp, #24
   1e250:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   1e254:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e258:	e3401003 	movt	r1, #3
   1e25c:	e30b0400 	movw	r0, #46080	@ 0xb400
   1e260:	e3400003 	movt	r0, #3
   1e264:	e3a02085 	mov	r2, #133	@ 0x85
   1e268:	eb0036db 	bl	2bddc <assertion_failed>
   1e26c:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e270:	e3401003 	movt	r1, #3
   1e274:	e30b06ec 	movw	r0, #46828	@ 0xb6ec
   1e278:	e3400003 	movt	r0, #3
   1e27c:	e3a02086 	mov	r2, #134	@ 0x86
   1e280:	eb0036d5 	bl	2bddc <assertion_failed>
   1e284:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e288:	e3401003 	movt	r1, #3
   1e28c:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   1e290:	e3400003 	movt	r0, #3
   1e294:	e3a02093 	mov	r2, #147	@ 0x93
   1e298:	eb0036cf 	bl	2bddc <assertion_failed>
   1e29c:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e2a0:	e3401003 	movt	r1, #3
   1e2a4:	e30c0760 	movw	r0, #51040	@ 0xc760
   1e2a8:	e3400003 	movt	r0, #3
   1e2ac:	e3a02098 	mov	r2, #152	@ 0x98
   1e2b0:	eb0036c9 	bl	2bddc <assertion_failed>
   1e2b4:	0003facc 	.word	0x0003facc

0001e2b8 <CUSBSerialDevice::Read(void*, unsigned int)>:
   1e2b8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1e2bc:	e2513000 	subs	r3, r1, #0
   1e2c0:	e24dd00c 	sub	sp, sp, #12
   1e2c4:	0a00004a 	beq	1e3f4 <CUSBSerialDevice::Read(void*, unsigned int)+0x13c>
   1e2c8:	e3520000 	cmp	r2, #0
   1e2cc:	0a00004e 	beq	1e40c <CUSBSerialDevice::Read(void*, unsigned int)+0x154>
   1e2d0:	e1a04000 	mov	r4, r0
   1e2d4:	f57ff05f 	dmb	sy
   1e2d8:	e5d01038 	ldrb	r1, [r0, #56]	@ 0x38
   1e2dc:	e3510000 	cmp	r1, #0
   1e2e0:	1a00003a 	bne	1e3d0 <CUSBSerialDevice::Read(void*, unsigned int)+0x118>
   1e2e4:	e5901028 	ldr	r1, [r0, #40]	@ 0x28
   1e2e8:	e3510000 	cmp	r1, #0
   1e2ec:	0a00003a 	beq	1e3dc <CUSBSerialDevice::Read(void*, unsigned int)+0x124>
   1e2f0:	e590e02c 	ldr	lr, [r0, #44]	@ 0x2c
   1e2f4:	e35e0000 	cmp	lr, #0
   1e2f8:	0a000057 	beq	1e45c <CUSBSerialDevice::Read(void*, unsigned int)+0x1a4>
   1e2fc:	e590c030 	ldr	ip, [r0, #48]	@ 0x30
   1e300:	e15e000c 	cmp	lr, ip
   1e304:	3a00005a 	bcc	1e474 <CUSBSerialDevice::Read(void*, unsigned int)+0x1bc>
   1e308:	e590e034 	ldr	lr, [r0, #52]	@ 0x34
   1e30c:	e15c000e 	cmp	ip, lr
   1e310:	3a00005d 	bcc	1e48c <CUSBSerialDevice::Read(void*, unsigned int)+0x1d4>
   1e314:	0a00000d 	beq	1e350 <CUSBSerialDevice::Read(void*, unsigned int)+0x98>
   1e318:	e04cc00e 	sub	ip, ip, lr
   1e31c:	e1a00003 	mov	r0, r3
   1e320:	e15c0002 	cmp	ip, r2
   1e324:	e081100e 	add	r1, r1, lr
   1e328:	31a0500c 	movcc	r5, ip
   1e32c:	21a05002 	movcs	r5, r2
   1e330:	e1a02005 	mov	r2, r5
   1e334:	eb005d72 	bl	35904 <memcpy>
   1e338:	e5943034 	ldr	r3, [r4, #52]	@ 0x34
   1e33c:	e1a00005 	mov	r0, r5
   1e340:	e0833005 	add	r3, r3, r5
   1e344:	e5843034 	str	r3, [r4, #52]	@ 0x34
   1e348:	e28dd00c 	add	sp, sp, #12
   1e34c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e350:	ebffc8b3 	bl	10624 <CUSBFunction::GetHost() const>
   1e354:	e2505000 	subs	r5, r0, #0
   1e358:	0a000051 	beq	1e4a4 <CUSBSerialDevice::Read(void*, unsigned int)+0x1ec>
   1e35c:	e5943020 	ldr	r3, [r4, #32]
   1e360:	e3530000 	cmp	r3, #0
   1e364:	0a000054 	beq	1e4bc <CUSBSerialDevice::Read(void*, unsigned int)+0x204>
   1e368:	e3a00070 	mov	r0, #112	@ 0x70
   1e36c:	e3a07000 	mov	r7, #0
   1e370:	ebffe0e3 	bl	16704 <CUSBRequest::operator new(unsigned int)>
   1e374:	e58d7000 	str	r7, [sp]
   1e378:	e1a06000 	mov	r6, r0
   1e37c:	e1c422d8 	ldrd	r2, [r4, #40]	@ 0x28
   1e380:	e5941020 	ldr	r1, [r4, #32]
   1e384:	ebffe014 	bl	163dc <CUSBRequest::CUSBRequest(CUSBEndpoint*, void*, unsigned int, TSetupData*)>
   1e388:	e1a00006 	mov	r0, r6
   1e38c:	ebffe0d7 	bl	166f0 <CUSBRequest::SetCompleteOnNAK()>
   1e390:	e1a03004 	mov	r3, r4
   1e394:	e1a02007 	mov	r2, r7
   1e398:	e1a00006 	mov	r0, r6
   1e39c:	e30e163c 	movw	r1, #58940	@ 0xe63c
   1e3a0:	e3401001 	movt	r1, #1
   1e3a4:	ebffe0b7 	bl	16688 <CUSBRequest::SetCompletionRoutine(void (*)(CUSBRequest*, void*, void*), void*, void*)>
   1e3a8:	e3a03001 	mov	r3, #1
   1e3ac:	e5c43038 	strb	r3, [r4, #56]	@ 0x38
   1e3b0:	e1a00005 	mov	r0, r5
   1e3b4:	e5953000 	ldr	r3, [r5]
   1e3b8:	e1a02007 	mov	r2, r7
   1e3bc:	e1a01006 	mov	r1, r6
   1e3c0:	e5933014 	ldr	r3, [r3, #20]
   1e3c4:	e12fff33 	blx	r3
   1e3c8:	e2505000 	subs	r5, r0, #0
   1e3cc:	0a000014 	beq	1e424 <CUSBSerialDevice::Read(void*, unsigned int)+0x16c>
   1e3d0:	e3a00000 	mov	r0, #0
   1e3d4:	e28dd00c 	add	sp, sp, #12
   1e3d8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1e3dc:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e3e0:	e3401003 	movt	r1, #3
   1e3e4:	e30c0788 	movw	r0, #51080	@ 0xc788
   1e3e8:	e3400003 	movt	r0, #3
   1e3ec:	e3a020ae 	mov	r2, #174	@ 0xae
   1e3f0:	eb003679 	bl	2bddc <assertion_failed>
   1e3f4:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e3f8:	e3401003 	movt	r1, #3
   1e3fc:	e30b0400 	movw	r0, #46080	@ 0xb400
   1e400:	e3400003 	movt	r0, #3
   1e404:	e3a020a4 	mov	r2, #164	@ 0xa4
   1e408:	eb003673 	bl	2bddc <assertion_failed>
   1e40c:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e410:	e3401003 	movt	r1, #3
   1e414:	e30b06ec 	movw	r0, #46828	@ 0xb6ec
   1e418:	e3400003 	movt	r0, #3
   1e41c:	e3a020a5 	mov	r2, #165	@ 0xa5
   1e420:	eb00366d 	bl	2bddc <assertion_failed>
   1e424:	eb0040e7 	bl	2e7c8 <CLogger::Get()>
   1e428:	e59f10a4 	ldr	r1, [pc, #164]	@ 1e4d4 <CUSBSerialDevice::Read(void*, unsigned int)+0x21c>
   1e42c:	e3a02002 	mov	r2, #2
   1e430:	e30c37f8 	movw	r3, #51192	@ 0xc7f8
   1e434:	e3403003 	movt	r3, #3
   1e438:	eb0042ab 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e43c:	e1a00006 	mov	r0, r6
   1e440:	e5c45038 	strb	r5, [r4, #56]	@ 0x38
   1e444:	ebffe008 	bl	1646c <CUSBRequest::~CUSBRequest()>
   1e448:	e1a00006 	mov	r0, r6
   1e44c:	e3a01070 	mov	r1, #112	@ 0x70
   1e450:	ebffe0c1 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   1e454:	e3e00000 	mvn	r0, #0
   1e458:	eaffffba 	b	1e348 <CUSBSerialDevice::Read(void*, unsigned int)+0x90>
   1e45c:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e460:	e3401003 	movt	r1, #3
   1e464:	e30c079c 	movw	r0, #51100	@ 0xc79c
   1e468:	e3400003 	movt	r0, #3
   1e46c:	e3a020af 	mov	r2, #175	@ 0xaf
   1e470:	eb003659 	bl	2bddc <assertion_failed>
   1e474:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e478:	e3401003 	movt	r1, #3
   1e47c:	e30c07b0 	movw	r0, #51120	@ 0xc7b0
   1e480:	e3400003 	movt	r0, #3
   1e484:	e3a020b0 	mov	r2, #176	@ 0xb0
   1e488:	eb003653 	bl	2bddc <assertion_failed>
   1e48c:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e490:	e3401003 	movt	r1, #3
   1e494:	e30c07d4 	movw	r0, #51156	@ 0xc7d4
   1e498:	e3400003 	movt	r0, #3
   1e49c:	e3a020b1 	mov	r2, #177	@ 0xb1
   1e4a0:	eb00364d 	bl	2bddc <assertion_failed>
   1e4a4:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e4a8:	e3401003 	movt	r1, #3
   1e4ac:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   1e4b0:	e3400003 	movt	r0, #3
   1e4b4:	e3a020b6 	mov	r2, #182	@ 0xb6
   1e4b8:	eb003647 	bl	2bddc <assertion_failed>
   1e4bc:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e4c0:	e3401003 	movt	r1, #3
   1e4c4:	e30b05d0 	movw	r0, #46544	@ 0xb5d0
   1e4c8:	e3400003 	movt	r0, #3
   1e4cc:	e3a020b8 	mov	r2, #184	@ 0xb8
   1e4d0:	eb003641 	bl	2bddc <assertion_failed>
   1e4d4:	0003facc 	.word	0x0003facc

0001e4d8 <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)>:
   1e4d8:	e92d4070 	push	{r4, r5, r6, lr}
   1e4dc:	e1a04000 	mov	r4, r0
   1e4e0:	e1a05002 	mov	r5, r2
   1e4e4:	ebffc7d5 	bl	10440 <CUSBFunction::CUSBFunction(CUSBFunction*)>
   1e4e8:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   1e4ec:	e2841020 	add	r1, r4, #32
   1e4f0:	e284202c 	add	r2, r4, #44	@ 0x2c
   1e4f4:	e59f0040 	ldr	r0, [pc, #64]	@ 1e53c <CUSBSerialDevice::CUSBSerialDevice(CUSBFunction*, unsigned int)+0x64>
   1e4f8:	e3a03000 	mov	r3, #0
   1e4fc:	e5840000 	str	r0, [r4]
   1e500:	e3a00d96 	mov	r0, #9600	@ 0x2580
   1e504:	e584501c 	str	r5, [r4, #28]
   1e508:	e5840014 	str	r0, [r4, #20]
   1e50c:	e3a00008 	mov	r0, #8
   1e510:	e1c401b8 	strh	r0, [r4, #24]
   1e514:	e3a00001 	mov	r0, #1
   1e518:	e5c4001a 	strb	r0, [r4, #26]
   1e51c:	e1a00004 	mov	r0, r4
   1e520:	f441078f 	vst1.32	{d16}, [r1]
   1e524:	e5843028 	str	r3, [r4, #40]	@ 0x28
   1e528:	f442078f 	vst1.32	{d16}, [r2]
   1e52c:	e5843034 	str	r3, [r4, #52]	@ 0x34
   1e530:	e5c43038 	strb	r3, [r4, #56]	@ 0x38
   1e534:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   1e538:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e53c:	0003fa90 	.word	0x0003fa90

0001e540 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)>:
   1e540:	e92d4070 	push	{r4, r5, r6, lr}
   1e544:	e2515000 	subs	r5, r1, #0
   1e548:	0a000028 	beq	1e5f0 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xb0>
   1e54c:	e5d03038 	ldrb	r3, [r0, #56]	@ 0x38
   1e550:	e1a04000 	mov	r4, r0
   1e554:	e3530000 	cmp	r3, #0
   1e558:	0a00002a 	beq	1e608 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xc8>
   1e55c:	e1c023d0 	ldrd	r2, [r0, #48]	@ 0x30
   1e560:	e1520003 	cmp	r2, r3
   1e564:	1a00002d 	bne	1e620 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xe0>
   1e568:	e1a00005 	mov	r0, r5
   1e56c:	ebffdfcf 	bl	164b0 <CUSBRequest::GetStatus() const>
   1e570:	e3500000 	cmp	r0, #0
   1e574:	1a000008 	bne	1e59c <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x5c>
   1e578:	e1a00005 	mov	r0, r5
   1e57c:	ebffdfba 	bl	1646c <CUSBRequest::~CUSBRequest()>
   1e580:	e3a01070 	mov	r1, #112	@ 0x70
   1e584:	e1a00005 	mov	r0, r5
   1e588:	ebffe073 	bl	1675c <CUSBRequest::operator delete(void*, unsigned int)>
   1e58c:	e3a03000 	mov	r3, #0
   1e590:	e5c43038 	strb	r3, [r4, #56]	@ 0x38
   1e594:	f57ff04f 	dsb	sy
   1e598:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e59c:	e1a00005 	mov	r0, r5
   1e5a0:	ebffdfc4 	bl	164b8 <CUSBRequest::GetResultLength() const>
   1e5a4:	e594301c 	ldr	r3, [r4, #28]
   1e5a8:	e5843034 	str	r3, [r4, #52]	@ 0x34
   1e5ac:	e3500000 	cmp	r0, #0
   1e5b0:	11500003 	cmpne	r0, r3
   1e5b4:	e5840030 	str	r0, [r4, #48]	@ 0x30
   1e5b8:	1a000003 	bne	1e5cc <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x8c>
   1e5bc:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   1e5c0:	e2843030 	add	r3, r4, #48	@ 0x30
   1e5c4:	f443078f 	vst1.32	{d16}, [r3]
   1e5c8:	eaffffea 	b	1e578 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x38>
   1e5cc:	e1500003 	cmp	r0, r3
   1e5d0:	2affffe8 	bcs	1e578 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x38>
   1e5d4:	eb00407b 	bl	2e7c8 <CLogger::Get()>
   1e5d8:	e59f1058 	ldr	r1, [pc, #88]	@ 1e638 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0xf8>
   1e5dc:	e3a02002 	mov	r2, #2
   1e5e0:	e30c3840 	movw	r3, #51264	@ 0xc840
   1e5e4:	e3403003 	movt	r3, #3
   1e5e8:	eb00423f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e5ec:	eafffff2 	b	1e5bc <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)+0x7c>
   1e5f0:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e5f4:	e3401003 	movt	r1, #3
   1e5f8:	e3090e38 	movw	r0, #40504	@ 0x9e38
   1e5fc:	e3400003 	movt	r0, #3
   1e600:	e3a020ef 	mov	r2, #239	@ 0xef
   1e604:	eb0035f4 	bl	2bddc <assertion_failed>
   1e608:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e60c:	e3401003 	movt	r1, #3
   1e610:	e30c0808 	movw	r0, #51208	@ 0xc808
   1e614:	e3400003 	movt	r0, #3
   1e618:	e3a020f0 	mov	r2, #240	@ 0xf0
   1e61c:	eb0035ee 	bl	2bddc <assertion_failed>
   1e620:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e624:	e3401003 	movt	r1, #3
   1e628:	e30c081c 	movw	r0, #51228	@ 0xc81c
   1e62c:	e3400003 	movt	r0, #3
   1e630:	e3a020f1 	mov	r2, #241	@ 0xf1
   1e634:	eb0035e8 	bl	2bddc <assertion_failed>
   1e638:	0003facc 	.word	0x0003facc

0001e63c <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)>:
   1e63c:	e1a01000 	mov	r1, r0
   1e640:	e2520000 	subs	r0, r2, #0
   1e644:	0a000000 	beq	1e64c <CUSBSerialDevice::CompletionStub(CUSBRequest*, void*, void*)+0x10>
   1e648:	eaffffbc 	b	1e540 <CUSBSerialDevice::CompletionRoutine(CUSBRequest*)>
   1e64c:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e650:	e3401003 	movt	r1, #3
   1e654:	e3090d50 	movw	r0, #40272	@ 0x9d50
   1e658:	e3400003 	movt	r0, #3
   1e65c:	e3a02e11 	mov	r2, #272	@ 0x110
   1e660:	e92d4010 	push	{r4, lr}
   1e664:	eb0035dc 	bl	2bddc <assertion_failed>

0001e668 <CUSBSerialDevice::Configure()>:
   1e668:	e92d4070 	push	{r4, r5, r6, lr}
   1e66c:	e1a05000 	mov	r5, r0
   1e670:	e24dd008 	sub	sp, sp, #8
   1e674:	ea000003 	b	1e688 <CUSBSerialDevice::Configure()+0x20>
   1e678:	e5d43003 	ldrb	r3, [r4, #3]
   1e67c:	e203303f 	and	r3, r3, #63	@ 0x3f
   1e680:	e3530002 	cmp	r3, #2
   1e684:	0a000025 	beq	1e720 <CUSBSerialDevice::Configure()+0xb8>
   1e688:	e3a01005 	mov	r1, #5
   1e68c:	e1a00005 	mov	r0, r5
   1e690:	ebffc7ee 	bl	10650 <CUSBFunction::GetDescriptor(unsigned char)>
   1e694:	e2504000 	subs	r4, r0, #0
   1e698:	1afffff6 	bne	1e678 <CUSBSerialDevice::Configure()+0x10>
   1e69c:	e5950020 	ldr	r0, [r5, #32]
   1e6a0:	e3500000 	cmp	r0, #0
   1e6a4:	0a00002e 	beq	1e764 <CUSBSerialDevice::Configure()+0xfc>
   1e6a8:	e5953024 	ldr	r3, [r5, #36]	@ 0x24
   1e6ac:	e3530000 	cmp	r3, #0
   1e6b0:	0a00002b 	beq	1e764 <CUSBSerialDevice::Configure()+0xfc>
   1e6b4:	ebffc662 	bl	10044 <CUSBEndpoint::GetMaxPacketSize() const>
   1e6b8:	e585002c 	str	r0, [r5, #44]	@ 0x2c
   1e6bc:	eb005e9e 	bl	3613c <operator new[](unsigned int)>
   1e6c0:	e1a03000 	mov	r3, r0
   1e6c4:	e1a00005 	mov	r0, r5
   1e6c8:	e5853028 	str	r3, [r5, #40]	@ 0x28
   1e6cc:	ebffc6ec 	bl	10284 <CUSBFunction::Configure()>
   1e6d0:	e2504000 	subs	r4, r0, #0
   1e6d4:	0a000035 	beq	1e7b0 <CUSBSerialDevice::Configure()+0x148>
   1e6d8:	e595603c 	ldr	r6, [r5, #60]	@ 0x3c
   1e6dc:	e3560000 	cmp	r6, #0
   1e6e0:	1a000039 	bne	1e7cc <CUSBSerialDevice::Configure()+0x164>
   1e6e4:	e59f20f8 	ldr	r2, [pc, #248]	@ 1e7e4 <CUSBSerialDevice::Configure()+0x17c>
   1e6e8:	e3a01001 	mov	r1, #1
   1e6ec:	e3040108 	movw	r0, #16648	@ 0x4108
   1e6f0:	e3400004 	movt	r0, #4
   1e6f4:	eb005fd8 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   1e6f8:	e585003c 	str	r0, [r5, #60]	@ 0x3c
   1e6fc:	eb00394a 	bl	2cc2c <CDeviceNameService::Get()>
   1e700:	e595203c 	ldr	r2, [r5, #60]	@ 0x3c
   1e704:	e59f10dc 	ldr	r1, [pc, #220]	@ 1e7e8 <CUSBSerialDevice::Configure()+0x180>
   1e708:	e1a03005 	mov	r3, r5
   1e70c:	e58d6000 	str	r6, [sp]
   1e710:	eb003951 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1e714:	e1a00004 	mov	r0, r4
   1e718:	e28dd008 	add	sp, sp, #8
   1e71c:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e720:	e1d430d2 	ldrsb	r3, [r4, #2]
   1e724:	e3530000 	cmp	r3, #0
   1e728:	ba000012 	blt	1e778 <CUSBSerialDevice::Configure()+0x110>
   1e72c:	e5953024 	ldr	r3, [r5, #36]	@ 0x24
   1e730:	e3530000 	cmp	r3, #0
   1e734:	1a00000a 	bne	1e764 <CUSBSerialDevice::Configure()+0xfc>
   1e738:	e3a00014 	mov	r0, #20
   1e73c:	eb005e78 	bl	36124 <operator new(unsigned int)>
   1e740:	e1a06000 	mov	r6, r0
   1e744:	e1a00005 	mov	r0, r5
   1e748:	ebffc7a0 	bl	105d0 <CUSBFunction::GetDevice() const>
   1e74c:	e1a02004 	mov	r2, r4
   1e750:	e1a01000 	mov	r1, r0
   1e754:	e1a00006 	mov	r0, r6
   1e758:	ebffc5aa 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1e75c:	e5856024 	str	r6, [r5, #36]	@ 0x24
   1e760:	eaffffc8 	b	1e688 <CUSBSerialDevice::Configure()+0x20>
   1e764:	e59f1078 	ldr	r1, [pc, #120]	@ 1e7e4 <CUSBSerialDevice::Configure()+0x17c>
   1e768:	e1a00005 	mov	r0, r5
   1e76c:	ebffc7c2 	bl	1067c <CUSBFunction::ConfigurationError(char const*) const>
   1e770:	e3a04000 	mov	r4, #0
   1e774:	eaffffe6 	b	1e714 <CUSBSerialDevice::Configure()+0xac>
   1e778:	e5953020 	ldr	r3, [r5, #32]
   1e77c:	e3530000 	cmp	r3, #0
   1e780:	1afffff7 	bne	1e764 <CUSBSerialDevice::Configure()+0xfc>
   1e784:	e3a00014 	mov	r0, #20
   1e788:	eb005e65 	bl	36124 <operator new(unsigned int)>
   1e78c:	e1a06000 	mov	r6, r0
   1e790:	e1a00005 	mov	r0, r5
   1e794:	ebffc78d 	bl	105d0 <CUSBFunction::GetDevice() const>
   1e798:	e1a02004 	mov	r2, r4
   1e79c:	e1a01000 	mov	r1, r0
   1e7a0:	e1a00006 	mov	r0, r6
   1e7a4:	ebffc597 	bl	fe08 <CUSBEndpoint::CUSBEndpoint(CUSBDevice*, TUSBEndpointDescriptor const*)>
   1e7a8:	e5856020 	str	r6, [r5, #32]
   1e7ac:	eaffffb5 	b	1e688 <CUSBSerialDevice::Configure()+0x20>
   1e7b0:	eb004004 	bl	2e7c8 <CLogger::Get()>
   1e7b4:	e59f1028 	ldr	r1, [pc, #40]	@ 1e7e4 <CUSBSerialDevice::Configure()+0x17c>
   1e7b8:	e3a02001 	mov	r2, #1
   1e7bc:	e30b30ac 	movw	r3, #45228	@ 0xb0ac
   1e7c0:	e3403003 	movt	r3, #3
   1e7c4:	eb0041c8 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1e7c8:	eaffffe8 	b	1e770 <CUSBSerialDevice::Configure()+0x108>
   1e7cc:	e30c1750 	movw	r1, #51024	@ 0xc750
   1e7d0:	e3401003 	movt	r1, #3
   1e7d4:	e30b0724 	movw	r0, #46884	@ 0xb724
   1e7d8:	e3400003 	movt	r0, #3
   1e7dc:	e3a0207b 	mov	r2, #123	@ 0x7b
   1e7e0:	eb00357d 	bl	2bddc <assertion_failed>
   1e7e4:	0003facc 	.word	0x0003facc
   1e7e8:	0003fac4 	.word	0x0003fac4

0001e7ec <_GLOBAL__sub_I__ZN16CUSBSerialDevice18s_DeviceNumberPoolE>:
   1e7ec:	e92d4010 	push	{r4, lr}
   1e7f0:	e3044108 	movw	r4, #16648	@ 0x4108
   1e7f4:	e3404004 	movt	r4, #4
   1e7f8:	e3a0203f 	mov	r2, #63	@ 0x3f
   1e7fc:	e3a01001 	mov	r1, #1
   1e800:	e1a00004 	mov	r0, r4
   1e804:	eb005f7f 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1e808:	e1a00004 	mov	r0, r4
   1e80c:	e3042180 	movw	r2, #16768	@ 0x4180
   1e810:	e3402004 	movt	r2, #4
   1e814:	e3061658 	movw	r1, #26200	@ 0x6658
   1e818:	e3401003 	movt	r1, #3
   1e81c:	e8bd4010 	pop	{r4, lr}
   1e820:	ea00564b 	b	34154 <__aeabi_atexit>

0001e824 <CKeyboardBehaviour::CKeyboardBehaviour()>:
   1e824:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   1e828:	e92d4010 	push	{r4, lr}
   1e82c:	e1a04000 	mov	r4, r0
   1e830:	e3a03000 	mov	r3, #0
   1e834:	e2800014 	add	r0, r0, #20
   1e838:	e5843008 	str	r3, [r4, #8]
   1e83c:	e1c430bc 	strh	r3, [r4, #12]
   1e840:	e5843010 	str	r3, [r4, #16]
   1e844:	f444078f 	vst1.32	{d16}, [r4]
   1e848:	eb0000d7 	bl	1ebac <CKeyMap::CKeyMap()>
   1e84c:	e1a00004 	mov	r0, r4
   1e850:	e8bd8010 	pop	{r4, pc}

0001e854 <CKeyboardBehaviour::~CKeyboardBehaviour()>:
   1e854:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   1e858:	e92d4010 	push	{r4, lr}
   1e85c:	e1a04000 	mov	r4, r0
   1e860:	e3a03000 	mov	r3, #0
   1e864:	e2800014 	add	r0, r0, #20
   1e868:	e5843008 	str	r3, [r4, #8]
   1e86c:	f444078f 	vst1.32	{d16}, [r4]
   1e870:	eb00010d 	bl	1ecac <CKeyMap::~CKeyMap()>
   1e874:	e1a00004 	mov	r0, r4
   1e878:	e8bd8010 	pop	{r4, pc}

0001e87c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))>:
   1e87c:	e3510000 	cmp	r1, #0
   1e880:	0a000001 	beq	1e88c <CKeyboardBehaviour::RegisterKeyPressedHandler(void (*)(char const*))+0x10>
   1e884:	e5801000 	str	r1, [r0]
   1e888:	e12fff1e 	bx	lr
   1e88c:	e30c1854 	movw	r1, #51284	@ 0xc854
   1e890:	e3401003 	movt	r1, #3
   1e894:	e30c086c 	movw	r0, #51308	@ 0xc86c
   1e898:	e3400003 	movt	r0, #3
   1e89c:	e3a0202f 	mov	r2, #47	@ 0x2f
   1e8a0:	e92d4010 	push	{r4, lr}
   1e8a4:	eb00354c 	bl	2bddc <assertion_failed>

0001e8a8 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))>:
   1e8a8:	e3510000 	cmp	r1, #0
   1e8ac:	0a000001 	beq	1e8b8 <CKeyboardBehaviour::RegisterSelectConsoleHandler(void (*)(unsigned int))+0x10>
   1e8b0:	e5801004 	str	r1, [r0, #4]
   1e8b4:	e12fff1e 	bx	lr
   1e8b8:	e30c1854 	movw	r1, #51284	@ 0xc854
   1e8bc:	e3401003 	movt	r1, #3
   1e8c0:	e30c0884 	movw	r0, #51332	@ 0xc884
   1e8c4:	e3400003 	movt	r0, #3
   1e8c8:	e3a02035 	mov	r2, #53	@ 0x35
   1e8cc:	e92d4010 	push	{r4, lr}
   1e8d0:	eb003541 	bl	2bddc <assertion_failed>

0001e8d4 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())>:
   1e8d4:	e3510000 	cmp	r1, #0
   1e8d8:	0a000001 	beq	1e8e4 <CKeyboardBehaviour::RegisterShutdownHandler(void (*)())+0x10>
   1e8dc:	e5801008 	str	r1, [r0, #8]
   1e8e0:	e12fff1e 	bx	lr
   1e8e4:	e30c1854 	movw	r1, #51284	@ 0xc854
   1e8e8:	e3401003 	movt	r1, #3
   1e8ec:	e30c08a0 	movw	r0, #51360	@ 0xc8a0
   1e8f0:	e3400003 	movt	r0, #3
   1e8f4:	e3a0203b 	mov	r2, #59	@ 0x3b
   1e8f8:	e92d4010 	push	{r4, lr}
   1e8fc:	eb003536 	bl	2bddc <assertion_failed>

0001e900 <CKeyboardBehaviour::GetLEDStatus() const>:
   1e900:	e2800014 	add	r0, r0, #20
   1e904:	ea000193 	b	1ef58 <CKeyMap::GetLEDStatus() const>

0001e908 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>:
   1e908:	e92d4070 	push	{r4, r5, r6, lr}
   1e90c:	e1a04000 	mov	r4, r0
   1e910:	e2806014 	add	r6, r0, #20
   1e914:	e24dd008 	sub	sp, sp, #8
   1e918:	e1a00006 	mov	r0, r6
   1e91c:	e5d4500c 	ldrb	r5, [r4, #12]
   1e920:	e1a02005 	mov	r2, r5
   1e924:	eb000103 	bl	1ed38 <CKeyMap::Translate(unsigned char, unsigned char)>
   1e928:	e3003149 	movw	r3, #329	@ 0x149
   1e92c:	e1500003 	cmp	r0, r3
   1e930:	8a000011 	bhi	1e97c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x74>
   1e934:	e300313d 	movw	r3, #317	@ 0x13d
   1e938:	e1500003 	cmp	r0, r3
   1e93c:	8a000006 	bhi	1e95c <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x54>
   1e940:	e2403f4e 	sub	r3, r0, #312	@ 0x138
   1e944:	e2433003 	sub	r3, r3, #3
   1e948:	e6ff3073 	uxth	r3, r3
   1e94c:	e3530002 	cmp	r3, #2
   1e950:	8a000012 	bhi	1e9a0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x98>
   1e954:	e28dd008 	add	sp, sp, #8
   1e958:	e8bd8070 	pop	{r4, r5, r6, pc}
   1e95c:	e5943004 	ldr	r3, [r4, #4]
   1e960:	e3530000 	cmp	r3, #0
   1e964:	0afffffa 	beq	1e954 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   1e968:	e2400f4f 	sub	r0, r0, #316	@ 0x13c
   1e96c:	e2400002 	sub	r0, r0, #2
   1e970:	e28dd008 	add	sp, sp, #8
   1e974:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e978:	e12fff13 	bx	r3
   1e97c:	e300314a 	movw	r3, #330	@ 0x14a
   1e980:	e1500003 	cmp	r0, r3
   1e984:	1a000005 	bne	1e9a0 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x98>
   1e988:	e5943008 	ldr	r3, [r4, #8]
   1e98c:	e3530000 	cmp	r3, #0
   1e990:	0affffef 	beq	1e954 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   1e994:	e28dd008 	add	sp, sp, #8
   1e998:	e8bd4070 	pop	{r4, r5, r6, lr}
   1e99c:	e12fff13 	bx	r3
   1e9a0:	e1a01000 	mov	r1, r0
   1e9a4:	e28d3004 	add	r3, sp, #4
   1e9a8:	e1a02005 	mov	r2, r5
   1e9ac:	e1a00006 	mov	r0, r6
   1e9b0:	eb000137 	bl	1ee94 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>
   1e9b4:	e3500000 	cmp	r0, #0
   1e9b8:	0affffe5 	beq	1e954 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   1e9bc:	e5943000 	ldr	r3, [r4]
   1e9c0:	e3530000 	cmp	r3, #0
   1e9c4:	0affffe2 	beq	1e954 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)+0x4c>
   1e9c8:	e12fff33 	blx	r3
   1e9cc:	e28dd008 	add	sp, sp, #8
   1e9d0:	e8bd8070 	pop	{r4, r5, r6, pc}

0001e9d4 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)>:
   1e9d4:	e92d4010 	push	{r4, lr}
   1e9d8:	e2524000 	subs	r4, r2, #0
   1e9dc:	e24dd008 	sub	sp, sp, #8
   1e9e0:	0a000019 	beq	1ea4c <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x78>
   1e9e4:	e5943010 	ldr	r3, [r4, #16]
   1e9e8:	e1500003 	cmp	r0, r3
   1e9ec:	1a00001c 	bne	1ea64 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x90>
   1e9f0:	e5d4100d 	ldrb	r1, [r4, #13]
   1e9f4:	e3510000 	cmp	r1, #0
   1e9f8:	1a000001 	bne	1ea04 <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x30>
   1e9fc:	e28dd008 	add	sp, sp, #8
   1ea00:	e8bd8010 	pop	{r4, pc}
   1ea04:	e1a00004 	mov	r0, r4
   1ea08:	ebffffbe 	bl	1e908 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   1ea0c:	eb005989 	bl	35038 <CTimer::Get()>
   1ea10:	e3a03000 	mov	r3, #0
   1ea14:	e3a01008 	mov	r1, #8
   1ea18:	e58d4000 	str	r4, [sp]
   1ea1c:	e30e29d4 	movw	r2, #59860	@ 0xe9d4
   1ea20:	e3402001 	movt	r2, #1
   1ea24:	eb005798 	bl	3488c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1ea28:	e3500000 	cmp	r0, #0
   1ea2c:	e5840010 	str	r0, [r4, #16]
   1ea30:	1afffff1 	bne	1e9fc <CKeyboardBehaviour::TimerStub(unsigned int, void*, void*)+0x28>
   1ea34:	e30c1854 	movw	r1, #51284	@ 0xc854
   1ea38:	e3401003 	movt	r1, #3
   1ea3c:	e30b0648 	movw	r0, #46664	@ 0xb648
   1ea40:	e3400003 	movt	r0, #3
   1ea44:	e3a020b7 	mov	r2, #183	@ 0xb7
   1ea48:	eb0034e3 	bl	2bddc <assertion_failed>
   1ea4c:	e30c1854 	movw	r1, #51284	@ 0xc854
   1ea50:	e3401003 	movt	r1, #3
   1ea54:	e3090d50 	movw	r0, #40272	@ 0x9d50
   1ea58:	e3400003 	movt	r0, #3
   1ea5c:	e3a020be 	mov	r2, #190	@ 0xbe
   1ea60:	eb0034dd 	bl	2bddc <assertion_failed>
   1ea64:	e30c1854 	movw	r1, #51284	@ 0xc854
   1ea68:	e3401003 	movt	r1, #3
   1ea6c:	e30c08b8 	movw	r0, #51384	@ 0xc8b8
   1ea70:	e3400003 	movt	r0, #3
   1ea74:	e3a020b0 	mov	r2, #176	@ 0xb0
   1ea78:	eb0034d7 	bl	2bddc <assertion_failed>

0001ea7c <CKeyboardBehaviour::KeyPressed(unsigned char)>:
   1ea7c:	e221c080 	eor	ip, r1, #128	@ 0x80
   1ea80:	e1a02000 	mov	r2, r0
   1ea84:	e35c0007 	cmp	ip, #7
   1ea88:	8a000006 	bhi	1eaa8 <CKeyboardBehaviour::KeyPressed(unsigned char)+0x2c>
   1ea8c:	e5d0300c 	ldrb	r3, [r0, #12]
   1ea90:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1ea94:	e241e080 	sub	lr, r1, #128	@ 0x80
   1ea98:	e3a01001 	mov	r1, #1
   1ea9c:	e1833e11 	orr	r3, r3, r1, lsl lr
   1eaa0:	e5c0300c 	strb	r3, [r0, #12]
   1eaa4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1eaa8:	e5d0c00d 	ldrb	ip, [r0, #13]
   1eaac:	e15c0001 	cmp	ip, r1
   1eab0:	012fff1e 	bxeq	lr
   1eab4:	e5c2100d 	strb	r1, [r2, #13]
   1eab8:	eaffff92 	b	1e908 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>

0001eabc <CKeyboardBehaviour::KeyReleased(unsigned char)>:
   1eabc:	e2213080 	eor	r3, r1, #128	@ 0x80
   1eac0:	e92d4010 	push	{r4, lr}
   1eac4:	e3530007 	cmp	r3, #7
   1eac8:	e1a04000 	mov	r4, r0
   1eacc:	8a000005 	bhi	1eae8 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x2c>
   1ead0:	e5d0300c 	ldrb	r3, [r0, #12]
   1ead4:	e2412080 	sub	r2, r1, #128	@ 0x80
   1ead8:	e3a01001 	mov	r1, #1
   1eadc:	e1c33211 	bic	r3, r3, r1, lsl r2
   1eae0:	e5c0300c 	strb	r3, [r0, #12]
   1eae4:	e8bd8010 	pop	{r4, pc}
   1eae8:	e5d0300d 	ldrb	r3, [r0, #13]
   1eaec:	e1530001 	cmp	r3, r1
   1eaf0:	18bd8010 	popne	{r4, pc}
   1eaf4:	e5903010 	ldr	r3, [r0, #16]
   1eaf8:	e3530000 	cmp	r3, #0
   1eafc:	1a000002 	bne	1eb0c <CKeyboardBehaviour::KeyReleased(unsigned char)+0x50>
   1eb00:	e3a03000 	mov	r3, #0
   1eb04:	e5c4300d 	strb	r3, [r4, #13]
   1eb08:	e8bd8010 	pop	{r4, pc}
   1eb0c:	eb005949 	bl	35038 <CTimer::Get()>
   1eb10:	e5941010 	ldr	r1, [r4, #16]
   1eb14:	eb0057b1 	bl	349e0 <CTimer::CancelKernelTimer(unsigned int)>
   1eb18:	e3a03000 	mov	r3, #0
   1eb1c:	e5843010 	str	r3, [r4, #16]
   1eb20:	eafffff6 	b	1eb00 <CKeyboardBehaviour::KeyReleased(unsigned char)+0x44>

0001eb24 <CKeyboardBehaviour::TimerHandler(unsigned int)>:
   1eb24:	e5903010 	ldr	r3, [r0, #16]
   1eb28:	e92d4010 	push	{r4, lr}
   1eb2c:	e1530001 	cmp	r3, r1
   1eb30:	e24dd008 	sub	sp, sp, #8
   1eb34:	1a000016 	bne	1eb94 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x70>
   1eb38:	e5d0100d 	ldrb	r1, [r0, #13]
   1eb3c:	e1a04000 	mov	r4, r0
   1eb40:	e3510000 	cmp	r1, #0
   1eb44:	1a000001 	bne	1eb50 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x2c>
   1eb48:	e28dd008 	add	sp, sp, #8
   1eb4c:	e8bd8010 	pop	{r4, pc}
   1eb50:	ebffff6c 	bl	1e908 <CKeyboardBehaviour::GenerateKeyEvent(unsigned char)>
   1eb54:	eb005937 	bl	35038 <CTimer::Get()>
   1eb58:	e3a03000 	mov	r3, #0
   1eb5c:	e3a01008 	mov	r1, #8
   1eb60:	e58d4000 	str	r4, [sp]
   1eb64:	e30e29d4 	movw	r2, #59860	@ 0xe9d4
   1eb68:	e3402001 	movt	r2, #1
   1eb6c:	eb005746 	bl	3488c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   1eb70:	e3500000 	cmp	r0, #0
   1eb74:	e5840010 	str	r0, [r4, #16]
   1eb78:	1afffff2 	bne	1eb48 <CKeyboardBehaviour::TimerHandler(unsigned int)+0x24>
   1eb7c:	e30c1854 	movw	r1, #51284	@ 0xc854
   1eb80:	e3401003 	movt	r1, #3
   1eb84:	e30b0648 	movw	r0, #46664	@ 0xb648
   1eb88:	e3400003 	movt	r0, #3
   1eb8c:	e3a020b7 	mov	r2, #183	@ 0xb7
   1eb90:	eb003491 	bl	2bddc <assertion_failed>
   1eb94:	e30c1854 	movw	r1, #51284	@ 0xc854
   1eb98:	e3401003 	movt	r1, #3
   1eb9c:	e30c08b8 	movw	r0, #51384	@ 0xc8b8
   1eba0:	e3400003 	movt	r0, #3
   1eba4:	e3a020b0 	mov	r2, #176	@ 0xb0
   1eba8:	eb00348b 	bl	2bddc <assertion_failed>

0001ebac <CKeyMap::CKeyMap()>:
   1ebac:	e2803c05 	add	r3, r0, #1280	@ 0x500
   1ebb0:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ebb4:	e3a04000 	mov	r4, #0
   1ebb8:	e1a07000 	mov	r7, r0
   1ebbc:	e1c340b0 	strh	r4, [r3]
   1ebc0:	e5c04502 	strb	r4, [r0, #1282]	@ 0x502
   1ebc4:	eb003cf1 	bl	2df90 <CKernelOptions::Get()>
   1ebc8:	eb003cc0 	bl	2ded0 <CKernelOptions::GetKeyMap() const>
   1ebcc:	e2506000 	subs	r6, r0, #0
   1ebd0:	0a000029 	beq	1ec7c <CKeyMap::CKeyMap()+0xd0>
   1ebd4:	e3039e90 	movw	r9, #16016	@ 0x3e90
   1ebd8:	e3409004 	movt	r9, #4
   1ebdc:	e5990000 	ldr	r0, [r9]
   1ebe0:	e1500004 	cmp	r0, r4
   1ebe4:	11a08009 	movne	r8, r9
   1ebe8:	11a05009 	movne	r5, r9
   1ebec:	1a000004 	bne	1ec04 <CKeyMap::CKeyMap()+0x58>
   1ebf0:	ea000027 	b	1ec94 <CKeyMap::CKeyMap()+0xe8>
   1ebf4:	e5b50004 	ldr	r0, [r5, #4]!
   1ebf8:	e2844001 	add	r4, r4, #1
   1ebfc:	e3500000 	cmp	r0, #0
   1ec00:	0a00000c 	beq	1ec38 <CKeyMap::CKeyMap()+0x8c>
   1ec04:	e1a01006 	mov	r1, r6
   1ec08:	eb005943 	bl	3511c <strcmp>
   1ec0c:	e3500000 	cmp	r0, #0
   1ec10:	1afffff7 	bne	1ebf4 <CKeyMap::CKeyMap()+0x48>
   1ec14:	e3a03c05 	mov	r3, #1280	@ 0x500
   1ec18:	e30f1ad8 	movw	r1, #64216	@ 0xfad8
   1ec1c:	e3401003 	movt	r1, #3
   1ec20:	e3a02c05 	mov	r2, #1280	@ 0x500
   1ec24:	e1a00007 	mov	r0, r7
   1ec28:	e0211493 	mla	r1, r3, r4, r1
   1ec2c:	eb005b34 	bl	35904 <memcpy>
   1ec30:	e1a00007 	mov	r0, r7
   1ec34:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ec38:	e5993000 	ldr	r3, [r9]
   1ec3c:	e3530000 	cmp	r3, #0
   1ec40:	0a000013 	beq	1ec94 <CKeyMap::CKeyMap()+0xe8>
   1ec44:	e30c58e8 	movw	r5, #51432	@ 0xc8e8
   1ec48:	e3405003 	movt	r5, #3
   1ec4c:	e1a04000 	mov	r4, r0
   1ec50:	ea000003 	b	1ec64 <CKeyMap::CKeyMap()+0xb8>
   1ec54:	e5b83004 	ldr	r3, [r8, #4]!
   1ec58:	e2844001 	add	r4, r4, #1
   1ec5c:	e3530000 	cmp	r3, #0
   1ec60:	0a00000b 	beq	1ec94 <CKeyMap::CKeyMap()+0xe8>
   1ec64:	e1a00003 	mov	r0, r3
   1ec68:	e1a01005 	mov	r1, r5
   1ec6c:	eb00592a 	bl	3511c <strcmp>
   1ec70:	e3500000 	cmp	r0, #0
   1ec74:	1afffff6 	bne	1ec54 <CKeyMap::CKeyMap()+0xa8>
   1ec78:	eaffffe5 	b	1ec14 <CKeyMap::CKeyMap()+0x68>
   1ec7c:	e30c18cc 	movw	r1, #51404	@ 0xc8cc
   1ec80:	e3401003 	movt	r1, #3
   1ec84:	e30c08d8 	movw	r0, #51416	@ 0xc8d8
   1ec88:	e3400003 	movt	r0, #3
   1ec8c:	e3a02087 	mov	r2, #135	@ 0x87
   1ec90:	eb003451 	bl	2bddc <assertion_failed>
   1ec94:	e30c18cc 	movw	r1, #51404	@ 0xc8cc
   1ec98:	e3401003 	movt	r1, #3
   1ec9c:	e30c08ec 	movw	r0, #51436	@ 0xc8ec
   1eca0:	e3400003 	movt	r0, #3
   1eca4:	e3a0208d 	mov	r2, #141	@ 0x8d
   1eca8:	eb00344b 	bl	2bddc <assertion_failed>

0001ecac <CKeyMap::~CKeyMap()>:
   1ecac:	e12fff1e 	bx	lr

0001ecb0 <CKeyMap::ClearTable(unsigned char)>:
   1ecb0:	e3510004 	cmp	r1, #4
   1ecb4:	8a000009 	bhi	1ece0 <CKeyMap::ClearTable(unsigned char)+0x30>
   1ecb8:	e1a01081 	lsl	r1, r1, #1
   1ecbc:	e2802c05 	add	r2, r0, #1280	@ 0x500
   1ecc0:	e0803001 	add	r3, r0, r1
   1ecc4:	e0822001 	add	r2, r2, r1
   1ecc8:	e3a01000 	mov	r1, #0
   1eccc:	e0c310ba 	strh	r1, [r3], #10
   1ecd0:	e1530002 	cmp	r3, r2
   1ecd4:	1afffffc 	bne	1eccc <CKeyMap::ClearTable(unsigned char)+0x1c>
   1ecd8:	e3a00001 	mov	r0, #1
   1ecdc:	e12fff1e 	bx	lr
   1ece0:	e3a00000 	mov	r0, #0
   1ece4:	e12fff1e 	bx	lr

0001ece8 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)>:
   1ece8:	e6afc072 	sxtb	ip, r2
   1ecec:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1ecf0:	e35c0000 	cmp	ip, #0
   1ecf4:	e1a0e000 	mov	lr, r0
   1ecf8:	c3a00000 	movgt	r0, #0
   1ecfc:	d3a00001 	movle	r0, #1
   1ed00:	e3510004 	cmp	r1, #4
   1ed04:	83800001 	orrhi	r0, r0, #1
   1ed08:	e3500000 	cmp	r0, #0
   1ed0c:	1a000007 	bne	1ed30 <CKeyMap::SetEntry(unsigned char, unsigned char, unsigned short)+0x48>
   1ed10:	e300c13a 	movw	ip, #314	@ 0x13a
   1ed14:	e153000c 	cmp	r3, ip
   1ed18:	90822102 	addls	r2, r2, r2, lsl #2
   1ed1c:	93a00001 	movls	r0, #1
   1ed20:	90822001 	addls	r2, r2, r1
   1ed24:	91a02012 	lslls	r2, r2, r0
   1ed28:	918e30b2 	strhls	r3, [lr, r2]
   1ed2c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1ed30:	e3a00000 	mov	r0, #0
   1ed34:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0001ed38 <CKeyMap::Translate(unsigned char, unsigned char)>:
   1ed38:	e6af3071 	sxtb	r3, r1
   1ed3c:	e3530000 	cmp	r3, #0
   1ed40:	da00002b 	ble	1edf4 <CKeyMap::Translate(unsigned char, unsigned char)+0xbc>
   1ed44:	e3a0300a 	mov	r3, #10
   1ed48:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1ed4c:	e1a0e000 	mov	lr, r0
   1ed50:	e300c10a 	movw	ip, #266	@ 0x10a
   1ed54:	e0030193 	mul	r3, r3, r1
   1ed58:	e19000b3 	ldrh	r0, [r0, r3]
   1ed5c:	e150000c 	cmp	r0, ip
   1ed60:	0a00001d 	beq	1eddc <CKeyMap::Translate(unsigned char, unsigned char)+0xa4>
   1ed64:	e2403f45 	sub	r3, r0, #276	@ 0x114
   1ed68:	e2433003 	sub	r3, r3, #3
   1ed6c:	e353000b 	cmp	r3, #11
   1ed70:	8a000001 	bhi	1ed7c <CKeyMap::Translate(unsigned char, unsigned char)+0x44>
   1ed74:	e3120004 	tst	r2, #4
   1ed78:	1a000027 	bne	1ee1c <CKeyMap::Translate(unsigned char, unsigned char)+0xe4>
   1ed7c:	e312008c 	tst	r2, #140	@ 0x8c
   1ed80:	1a00001d 	bne	1edfc <CKeyMap::Translate(unsigned char, unsigned char)+0xc4>
   1ed84:	e2413053 	sub	r3, r1, #83	@ 0x53
   1ed88:	e3530010 	cmp	r3, #16
   1ed8c:	9a00001c 	bls	1ee04 <CKeyMap::Translate(unsigned char, unsigned char)+0xcc>
   1ed90:	e2023022 	and	r3, r2, #34	@ 0x22
   1ed94:	e3120040 	tst	r2, #64	@ 0x40
   1ed98:	0a00002c 	beq	1ee50 <CKeyMap::Translate(unsigned char, unsigned char)+0x118>
   1ed9c:	e3530000 	cmp	r3, #0
   1eda0:	e3a0300a 	mov	r3, #10
   1eda4:	e023e193 	mla	r3, r3, r1, lr
   1eda8:	11d300b6 	ldrhne	r0, [r3, #6]
   1edac:	01d300b4 	ldrheq	r0, [r3, #4]
   1edb0:	e3003126 	movw	r3, #294	@ 0x126
   1edb4:	e1500003 	cmp	r0, r3
   1edb8:	0a00001f 	beq	1ee3c <CKeyMap::Translate(unsigned char, unsigned char)+0x104>
   1edbc:	e3500f4a 	cmp	r0, #296	@ 0x128
   1edc0:	0a000018 	beq	1ee28 <CKeyMap::Translate(unsigned char, unsigned char)+0xf0>
   1edc4:	e3500f49 	cmp	r0, #292	@ 0x124
   1edc8:	0300013b 	movweq	r0, #315	@ 0x13b
   1edcc:	05de3500 	ldrbeq	r3, [lr, #1280]	@ 0x500
   1edd0:	02233001 	eoreq	r3, r3, #1
   1edd4:	05ce3500 	strbeq	r3, [lr, #1280]	@ 0x500
   1edd8:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1eddc:	e3120011 	tst	r2, #17
   1ede0:	0affffe5 	beq	1ed7c <CKeyMap::Translate(unsigned char, unsigned char)+0x44>
   1ede4:	e3120004 	tst	r2, #4
   1ede8:	0affffe3 	beq	1ed7c <CKeyMap::Translate(unsigned char, unsigned char)+0x44>
   1edec:	e300014a 	movw	r0, #330	@ 0x14a
   1edf0:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1edf4:	e3a00000 	mov	r0, #0
   1edf8:	e12fff1e 	bx	lr
   1edfc:	e3a00000 	mov	r0, #0
   1ee00:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1ee04:	e5de3501 	ldrb	r3, [lr, #1281]	@ 0x501
   1ee08:	e0811101 	add	r1, r1, r1, lsl #2
   1ee0c:	e0811003 	add	r1, r1, r3
   1ee10:	e1a01081 	lsl	r1, r1, #1
   1ee14:	e19e00b1 	ldrh	r0, [lr, r1]
   1ee18:	eaffffe4 	b	1edb0 <CKeyMap::Translate(unsigned char, unsigned char)+0x78>
   1ee1c:	e2800027 	add	r0, r0, #39	@ 0x27
   1ee20:	e6ff0070 	uxth	r0, r0
   1ee24:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1ee28:	e5de3501 	ldrb	r3, [lr, #1281]	@ 0x501
   1ee2c:	e3a00f4f 	mov	r0, #316	@ 0x13c
   1ee30:	e2233001 	eor	r3, r3, #1
   1ee34:	e5ce3501 	strb	r3, [lr, #1281]	@ 0x501
   1ee38:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1ee3c:	e5de3502 	ldrb	r3, [lr, #1282]	@ 0x502
   1ee40:	e300013d 	movw	r0, #317	@ 0x13d
   1ee44:	e2233001 	eor	r3, r3, #1
   1ee48:	e5ce3502 	strb	r3, [lr, #1282]	@ 0x502
   1ee4c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1ee50:	e3530000 	cmp	r3, #0
   1ee54:	1a00000a 	bne	1ee84 <CKeyMap::Translate(unsigned char, unsigned char)+0x14c>
   1ee58:	e3120011 	tst	r2, #17
   1ee5c:	0affffd3 	beq	1edb0 <CKeyMap::Translate(unsigned char, unsigned char)+0x78>
   1ee60:	e2412004 	sub	r2, r1, #4
   1ee64:	e0813101 	add	r3, r1, r1, lsl #2
   1ee68:	e3520019 	cmp	r2, #25
   1ee6c:	93a02000 	movls	r2, #0
   1ee70:	83a02001 	movhi	r2, #1
   1ee74:	e0833102 	add	r3, r3, r2, lsl #2
   1ee78:	e1a03083 	lsl	r3, r3, #1
   1ee7c:	e19e00b3 	ldrh	r0, [lr, r3]
   1ee80:	eaffffca 	b	1edb0 <CKeyMap::Translate(unsigned char, unsigned char)+0x78>
   1ee84:	e3a0300a 	mov	r3, #10
   1ee88:	e023e193 	mla	r3, r3, r1, lr
   1ee8c:	e1d300b2 	ldrh	r0, [r3, #2]
   1ee90:	eaffffc6 	b	1edb0 <CKeyMap::Translate(unsigned char, unsigned char)+0x78>

0001ee94 <CKeyMap::GetString(unsigned short, unsigned char, char*) const>:
   1ee94:	e241c021 	sub	ip, r1, #33	@ 0x21
   1ee98:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   1ee9c:	e300e119 	movw	lr, #281	@ 0x119
   1eea0:	e6ffc07c 	uxth	ip, ip
   1eea4:	e15c000e 	cmp	ip, lr
   1eea8:	8a00001e 	bhi	1ef28 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   1eeac:	e241cc01 	sub	ip, r1, #256	@ 0x100
   1eeb0:	e6ffe07c 	uxth	lr, ip
   1eeb4:	e35e003a 	cmp	lr, #58	@ 0x3a
   1eeb8:	9a00001c 	bls	1ef30 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x9c>
   1eebc:	e6afc071 	sxtb	ip, r1
   1eec0:	e3120011 	tst	r2, #17
   1eec4:	0a000009 	beq	1eef0 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x5c>
   1eec8:	e6ef1071 	uxtb	r1, r1
   1eecc:	e2412061 	sub	r2, r1, #97	@ 0x61
   1eed0:	e3520019 	cmp	r2, #25
   1eed4:	8a000013 	bhi	1ef28 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x94>
   1eed8:	e2411060 	sub	r1, r1, #96	@ 0x60
   1eedc:	e3a02000 	mov	r2, #0
   1eee0:	e1a00003 	mov	r0, r3
   1eee4:	e5c31000 	strb	r1, [r3]
   1eee8:	e5c32001 	strb	r2, [r3, #1]
   1eeec:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1eef0:	e5d02500 	ldrb	r2, [r0, #1280]	@ 0x500
   1eef4:	e3520000 	cmp	r2, #0
   1eef8:	0a000005 	beq	1ef14 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x80>
   1eefc:	e6ef1071 	uxtb	r1, r1
   1ef00:	e2412041 	sub	r2, r1, #65	@ 0x41
   1ef04:	e3520019 	cmp	r2, #25
   1ef08:	8a00000d 	bhi	1ef44 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0xb0>
   1ef0c:	e2811020 	add	r1, r1, #32
   1ef10:	e6afc071 	sxtb	ip, r1
   1ef14:	e3a02000 	mov	r2, #0
   1ef18:	e1a00003 	mov	r0, r3
   1ef1c:	e5c3c000 	strb	ip, [r3]
   1ef20:	e5c32001 	strb	r2, [r3, #1]
   1ef24:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1ef28:	e3a00000 	mov	r0, #0
   1ef2c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1ef30:	e3033e90 	movw	r3, #16016	@ 0x3e90
   1ef34:	e3403004 	movt	r3, #4
   1ef38:	e083310c 	add	r3, r3, ip, lsl #2
   1ef3c:	e5930020 	ldr	r0, [r3, #32]
   1ef40:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   1ef44:	e2412061 	sub	r2, r1, #97	@ 0x61
   1ef48:	e3520019 	cmp	r2, #25
   1ef4c:	92411020 	subls	r1, r1, #32
   1ef50:	96afc071 	sxtbls	ip, r1
   1ef54:	eaffffee 	b	1ef14 <CKeyMap::GetString(unsigned short, unsigned char, char*) const+0x80>

0001ef58 <CKeyMap::GetLEDStatus() const>:
   1ef58:	e5d03501 	ldrb	r3, [r0, #1281]	@ 0x501
   1ef5c:	e5d02502 	ldrb	r2, [r0, #1282]	@ 0x502
   1ef60:	e5d01500 	ldrb	r1, [r0, #1280]	@ 0x500
   1ef64:	e2622000 	rsb	r2, r2, #0
   1ef68:	e1830081 	orr	r0, r3, r1, lsl #1
   1ef6c:	e2023004 	and	r3, r2, #4
   1ef70:	e1800003 	orr	r0, r0, r3
   1ef74:	e6ef0070 	uxtb	r0, r0
   1ef78:	e12fff1e 	bx	lr

0001ef7c <CKeyMap::LookupDefaultMap(char const*)>:
   1ef7c:	e92d4070 	push	{r4, r5, r6, lr}
   1ef80:	e3034e90 	movw	r4, #16016	@ 0x3e90
   1ef84:	e3404004 	movt	r4, #4
   1ef88:	e1a06000 	mov	r6, r0
   1ef8c:	e5940000 	ldr	r0, [r4]
   1ef90:	e3500000 	cmp	r0, #0
   1ef94:	0a000016 	beq	1eff4 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   1ef98:	e3560000 	cmp	r6, #0
   1ef9c:	13a05000 	movne	r5, #0
   1efa0:	1a000004 	bne	1efb8 <CKeyMap::LookupDefaultMap(char const*)+0x3c>
   1efa4:	ea00000c 	b	1efdc <CKeyMap::LookupDefaultMap(char const*)+0x60>
   1efa8:	e5b40004 	ldr	r0, [r4, #4]!
   1efac:	e2855001 	add	r5, r5, #1
   1efb0:	e3500000 	cmp	r0, #0
   1efb4:	0a00000e 	beq	1eff4 <CKeyMap::LookupDefaultMap(char const*)+0x78>
   1efb8:	e1a01006 	mov	r1, r6
   1efbc:	eb005856 	bl	3511c <strcmp>
   1efc0:	e3500000 	cmp	r0, #0
   1efc4:	1afffff7 	bne	1efa8 <CKeyMap::LookupDefaultMap(char const*)+0x2c>
   1efc8:	e3a03c05 	mov	r3, #1280	@ 0x500
   1efcc:	e30f0ad8 	movw	r0, #64216	@ 0xfad8
   1efd0:	e3400003 	movt	r0, #3
   1efd4:	e0200593 	mla	r0, r3, r5, r0
   1efd8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1efdc:	e30c18cc 	movw	r1, #51404	@ 0xc8cc
   1efe0:	e3401003 	movt	r1, #3
   1efe4:	e30c08d8 	movw	r0, #51416	@ 0xc8d8
   1efe8:	e3400003 	movt	r0, #3
   1efec:	e3002155 	movw	r2, #341	@ 0x155
   1eff0:	eb003379 	bl	2bddc <assertion_failed>
   1eff4:	e3a00000 	mov	r0, #0
   1eff8:	e8bd8070 	pop	{r4, r5, r6, pc}

0001effc <proxy_handler(unsigned int, int, int, int, void*)>:
   1effc:	e59dc000 	ldr	ip, [sp]
   1f000:	e12fff1c 	bx	ip

0001f004 <CMouseDevice::~CMouseDevice()>:
   1f004:	e92d4070 	push	{r4, r5, r6, lr}
   1f008:	e1a04000 	mov	r4, r0
   1f00c:	e30158d8 	movw	r5, #6360	@ 0x18d8
   1f010:	e3405004 	movt	r5, #4
   1f014:	e3a06000 	mov	r6, #0
   1f018:	e2853008 	add	r3, r5, #8
   1f01c:	e5806024 	str	r6, [r0, #36]	@ 0x24
   1f020:	e5803000 	str	r3, [r0]
   1f024:	e5806028 	str	r6, [r0, #40]	@ 0x28
   1f028:	eb0036ff 	bl	2cc2c <CDeviceNameService::Get()>
   1f02c:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   1f030:	e1a03006 	mov	r3, r6
   1f034:	e2851028 	add	r1, r5, #40	@ 0x28
   1f038:	eb003721 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1f03c:	e594102c 	ldr	r1, [r4, #44]	@ 0x2c
   1f040:	e3040118 	movw	r0, #16664	@ 0x4118
   1f044:	e3400004 	movt	r0, #4
   1f048:	eb005db5 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   1f04c:	e2840008 	add	r0, r4, #8
   1f050:	eb000249 	bl	1f97c <CMouseBehaviour::~CMouseBehaviour()>
   1f054:	e1a00004 	mov	r0, r4
   1f058:	eb00358b 	bl	2c68c <CDevice::~CDevice()>
   1f05c:	e1a00004 	mov	r0, r4
   1f060:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f064 <CMouseDevice::~CMouseDevice()>:
   1f064:	e92d4010 	push	{r4, lr}
   1f068:	e1a04000 	mov	r4, r0
   1f06c:	ebffffe4 	bl	1f004 <CMouseDevice::~CMouseDevice()>
   1f070:	e1a00004 	mov	r0, r4
   1f074:	e3a01038 	mov	r1, #56	@ 0x38
   1f078:	eb005c41 	bl	36184 <operator delete(void*, unsigned int)>
   1f07c:	e1a00004 	mov	r0, r4
   1f080:	e8bd8010 	pop	{r4, pc}

0001f084 <CMouseDevice::CMouseDevice(unsigned int, bool)>:
   1f084:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f088:	e1a04000 	mov	r4, r0
   1f08c:	e1a08001 	mov	r8, r1
   1f090:	e24dd008 	sub	sp, sp, #8
   1f094:	e1a07002 	mov	r7, r2
   1f098:	eb0035a8 	bl	2c740 <CDevice::CDevice()>
   1f09c:	e1a00004 	mov	r0, r4
   1f0a0:	e30158d8 	movw	r5, #6360	@ 0x18d8
   1f0a4:	e3405004 	movt	r5, #4
   1f0a8:	e2853008 	add	r3, r5, #8
   1f0ac:	e3a06000 	mov	r6, #0
   1f0b0:	e4803008 	str	r3, [r0], #8
   1f0b4:	eb000142 	bl	1f5c4 <CMouseBehaviour::CMouseBehaviour()>
   1f0b8:	e2852030 	add	r2, r5, #48	@ 0x30
   1f0bc:	e3a01001 	mov	r1, #1
   1f0c0:	e5846024 	str	r6, [r4, #36]	@ 0x24
   1f0c4:	e5846028 	str	r6, [r4, #40]	@ 0x28
   1f0c8:	e3040118 	movw	r0, #16664	@ 0x4118
   1f0cc:	e3400004 	movt	r0, #4
   1f0d0:	eb005d61 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   1f0d4:	e5848030 	str	r8, [r4, #48]	@ 0x30
   1f0d8:	e584002c 	str	r0, [r4, #44]	@ 0x2c
   1f0dc:	e5c47034 	strb	r7, [r4, #52]	@ 0x34
   1f0e0:	eb0036d1 	bl	2cc2c <CDeviceNameService::Get()>
   1f0e4:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   1f0e8:	e1a03004 	mov	r3, r4
   1f0ec:	e2851028 	add	r1, r5, #40	@ 0x28
   1f0f0:	e58d6000 	str	r6, [sp]
   1f0f4:	eb0036d8 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1f0f8:	e1a00004 	mov	r0, r4
   1f0fc:	e28dd008 	add	sp, sp, #8
   1f100:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001f104 <CMouseDevice::Setup(unsigned int, unsigned int)>:
   1f104:	e2800008 	add	r0, r0, #8
   1f108:	ea000134 	b	1f5e0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>

0001f10c <CMouseDevice::Release()>:
   1f10c:	e2800008 	add	r0, r0, #8
   1f110:	ea000227 	b	1f9b4 <CMouseBehaviour::Release()>

0001f114 <CMouseDevice::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   1f114:	e2800008 	add	r0, r0, #8
   1f118:	ea00017a 	b	1f708 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>

0001f11c <CMouseDevice::SetCursor(unsigned int, unsigned int)>:
   1f11c:	e2800008 	add	r0, r0, #8
   1f120:	ea000239 	b	1fa0c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>

0001f124 <CMouseDevice::ShowCursor(bool)>:
   1f124:	e2800008 	add	r0, r0, #8
   1f128:	ea00025b 	b	1fa9c <CMouseBehaviour::ShowCursor(bool)>

0001f12c <CMouseDevice::UpdateCursor()>:
   1f12c:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   1f130:	e3530000 	cmp	r3, #0
   1f134:	112fff1e 	bxne	lr
   1f138:	e2800008 	add	r0, r0, #8
   1f13c:	ea000272 	b	1fb0c <CMouseBehaviour::UpdateCursor()>

0001f140 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)>:
   1f140:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   1f144:	e92d4010 	push	{r4, lr}
   1f148:	e3530000 	cmp	r3, #0
   1f14c:	1a000009 	bne	1f178 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int, void*), void*)+0x38>
   1f150:	e3510000 	cmp	r1, #0
   1f154:	e5801024 	str	r1, [r0, #36]	@ 0x24
   1f158:	e5802028 	str	r2, [r0, #40]	@ 0x28
   1f15c:	18bd8010 	popne	{r4, pc}
   1f160:	e30c1a18 	movw	r1, #51736	@ 0xca18
   1f164:	e3401003 	movt	r1, #3
   1f168:	e30c0640 	movw	r0, #50752	@ 0xc640
   1f16c:	e3400003 	movt	r0, #3
   1f170:	e3a02057 	mov	r2, #87	@ 0x57
   1f174:	eb003318 	bl	2bddc <assertion_failed>
   1f178:	e30c1a18 	movw	r1, #51736	@ 0xca18
   1f17c:	e3401003 	movt	r1, #3
   1f180:	e30c0628 	movw	r0, #50728	@ 0xc628
   1f184:	e3400003 	movt	r0, #3
   1f188:	e3a02054 	mov	r2, #84	@ 0x54
   1f18c:	eb003312 	bl	2bddc <assertion_failed>

0001f190 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))>:
   1f190:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   1f194:	e3530000 	cmp	r3, #0
   1f198:	1a000004 	bne	1f1b0 <CMouseDevice::RegisterStatusHandler(void (*)(unsigned int, int, int, int))+0x20>
   1f19c:	e30e3ffc 	movw	r3, #61436	@ 0xeffc
   1f1a0:	e3403001 	movt	r3, #1
   1f1a4:	e5801028 	str	r1, [r0, #40]	@ 0x28
   1f1a8:	e5803024 	str	r3, [r0, #36]	@ 0x24
   1f1ac:	e12fff1e 	bx	lr
   1f1b0:	e30c1a18 	movw	r1, #51736	@ 0xca18
   1f1b4:	e3401003 	movt	r1, #3
   1f1b8:	e30c0628 	movw	r0, #50728	@ 0xc628
   1f1bc:	e3400003 	movt	r0, #3
   1f1c0:	e3a02054 	mov	r2, #84	@ 0x54
   1f1c4:	e92d4010 	push	{r4, lr}
   1f1c8:	eb003303 	bl	2bddc <assertion_failed>

0001f1cc <CMouseDevice::ReportHandler(unsigned int, int, int, int)>:
   1f1cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   1f1d0:	e1a04000 	mov	r4, r0
   1f1d4:	e2800008 	add	r0, r0, #8
   1f1d8:	e24dd008 	sub	sp, sp, #8
   1f1dc:	e1a07001 	mov	r7, r1
   1f1e0:	e1a05002 	mov	r5, r2
   1f1e4:	e1a06003 	mov	r6, r3
   1f1e8:	e59d8020 	ldr	r8, [sp, #32]
   1f1ec:	e58d8000 	str	r8, [sp]
   1f1f0:	eb000157 	bl	1f754 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>
   1f1f4:	e594e024 	ldr	lr, [r4, #36]	@ 0x24
   1f1f8:	e35e0000 	cmp	lr, #0
   1f1fc:	0a000009 	beq	1f228 <CMouseDevice::ReportHandler(unsigned int, int, int, int)+0x5c>
   1f200:	e5943028 	ldr	r3, [r4, #40]	@ 0x28
   1f204:	e1a02006 	mov	r2, r6
   1f208:	e58d3020 	str	r3, [sp, #32]
   1f20c:	e1a01005 	mov	r1, r5
   1f210:	e1a03008 	mov	r3, r8
   1f214:	e1a00007 	mov	r0, r7
   1f218:	e1a0c00e 	mov	ip, lr
   1f21c:	e28dd008 	add	sp, sp, #8
   1f220:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   1f224:	e12fff1c 	bx	ip
   1f228:	e28dd008 	add	sp, sp, #8
   1f22c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0001f230 <CMouseDevice::GetButtonCount() const>:
   1f230:	e5900030 	ldr	r0, [r0, #48]	@ 0x30
   1f234:	e12fff1e 	bx	lr

0001f238 <CMouseDevice::HasWheel() const>:
   1f238:	e5d00034 	ldrb	r0, [r0, #52]	@ 0x34
   1f23c:	e12fff1e 	bx	lr

0001f240 <_GLOBAL__sub_I__ZN12CMouseDevice18s_DeviceNumberPoolE>:
   1f240:	e92d4010 	push	{r4, lr}
   1f244:	e3044118 	movw	r4, #16664	@ 0x4118
   1f248:	e3404004 	movt	r4, #4
   1f24c:	e3a0203f 	mov	r2, #63	@ 0x3f
   1f250:	e3a01001 	mov	r1, #1
   1f254:	e1a00004 	mov	r0, r4
   1f258:	eb005cea 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1f25c:	e1a00004 	mov	r0, r4
   1f260:	e3042180 	movw	r2, #16768	@ 0x4180
   1f264:	e3402004 	movt	r2, #4
   1f268:	e3061658 	movw	r1, #26200	@ 0x6658
   1f26c:	e3401003 	movt	r1, #3
   1f270:	e8bd4010 	pop	{r4, lr}
   1f274:	ea0053b6 	b	34154 <__aeabi_atexit>

0001f278 <CTouchScreenDevice::~CTouchScreenDevice()>:
   1f278:	e92d4070 	push	{r4, r5, r6, lr}
   1f27c:	e1a04000 	mov	r4, r0
   1f280:	e3015910 	movw	r5, #6416	@ 0x1910
   1f284:	e3405004 	movt	r5, #4
   1f288:	e3a06000 	mov	r6, #0
   1f28c:	e2853008 	add	r3, r5, #8
   1f290:	e5806008 	str	r6, [r0, #8]
   1f294:	e5803000 	str	r3, [r0]
   1f298:	e5806010 	str	r6, [r0, #16]
   1f29c:	eb003662 	bl	2cc2c <CDeviceNameService::Get()>
   1f2a0:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   1f2a4:	e1a03006 	mov	r3, r6
   1f2a8:	e2851028 	add	r1, r5, #40	@ 0x28
   1f2ac:	eb003684 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1f2b0:	e594102c 	ldr	r1, [r4, #44]	@ 0x2c
   1f2b4:	e3040128 	movw	r0, #16680	@ 0x4128
   1f2b8:	e3400004 	movt	r0, #4
   1f2bc:	eb005d18 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   1f2c0:	e1a00004 	mov	r0, r4
   1f2c4:	eb0034f0 	bl	2c68c <CDevice::~CDevice()>
   1f2c8:	e1a00004 	mov	r0, r4
   1f2cc:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f2d0 <CTouchScreenDevice::~CTouchScreenDevice()>:
   1f2d0:	e92d4070 	push	{r4, r5, r6, lr}
   1f2d4:	e1a04000 	mov	r4, r0
   1f2d8:	e3015910 	movw	r5, #6416	@ 0x1910
   1f2dc:	e3405004 	movt	r5, #4
   1f2e0:	e3a06000 	mov	r6, #0
   1f2e4:	e2853008 	add	r3, r5, #8
   1f2e8:	e5806008 	str	r6, [r0, #8]
   1f2ec:	e5803000 	str	r3, [r0]
   1f2f0:	e5806010 	str	r6, [r0, #16]
   1f2f4:	eb00364c 	bl	2cc2c <CDeviceNameService::Get()>
   1f2f8:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   1f2fc:	e1a03006 	mov	r3, r6
   1f300:	e2851028 	add	r1, r5, #40	@ 0x28
   1f304:	eb00366e 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   1f308:	e594102c 	ldr	r1, [r4, #44]	@ 0x2c
   1f30c:	e3040128 	movw	r0, #16680	@ 0x4128
   1f310:	e3400004 	movt	r0, #4
   1f314:	eb005d02 	bl	36724 <CNumberPool::FreeNumber(unsigned int)>
   1f318:	e1a00004 	mov	r0, r4
   1f31c:	eb0034da 	bl	2c68c <CDevice::~CDevice()>
   1f320:	e1a00004 	mov	r0, r4
   1f324:	e3a01030 	mov	r1, #48	@ 0x30
   1f328:	eb005b95 	bl	36184 <operator delete(void*, unsigned int)>
   1f32c:	e1a00004 	mov	r0, r4
   1f330:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f334 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)>:
   1f334:	e92d4070 	push	{r4, r5, r6, lr}
   1f338:	e1a04000 	mov	r4, r0
   1f33c:	e1a06001 	mov	r6, r1
   1f340:	e24dd008 	sub	sp, sp, #8
   1f344:	e1a05002 	mov	r5, r2
   1f348:	eb0034fc 	bl	2c740 <CDevice::CDevice()>
   1f34c:	e3020710 	movw	r0, #10000	@ 0x2710
   1f350:	eddf2b1e 	vldr	d18, [pc, #120]	@ 1f3d0 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)+0x9c>
   1f354:	eddf3b1f 	vldr	d19, [pc, #124]	@ 1f3d8 <CTouchScreenDevice::CTouchScreenDevice(void (*)(void*), void*)+0xa4>
   1f358:	ee800b90 	vdup.32	d16, r0
   1f35c:	e2841014 	add	r1, r4, #20
   1f360:	e2842024 	add	r2, r4, #36	@ 0x24
   1f364:	e3013910 	movw	r3, #6416	@ 0x1910
   1f368:	e3403004 	movt	r3, #4
   1f36c:	e5846008 	str	r6, [r4, #8]
   1f370:	e2836028 	add	r6, r3, #40	@ 0x28
   1f374:	e584500c 	str	r5, [r4, #12]
   1f378:	e2833008 	add	r3, r3, #8
   1f37c:	e3a05000 	mov	r5, #0
   1f380:	e5843000 	str	r3, [r4]
   1f384:	e5845010 	str	r5, [r4, #16]
   1f388:	e3040128 	movw	r0, #16680	@ 0x4128
   1f38c:	e3400004 	movt	r0, #4
   1f390:	f4412a8f 	vst1.32	{d18-d19}, [r1]
   1f394:	e3a01001 	mov	r1, #1
   1f398:	f442078f 	vst1.32	{d16}, [r2]
   1f39c:	e1a02006 	mov	r2, r6
   1f3a0:	eb005cad 	bl	3665c <CNumberPool::AllocateNumber(bool, char const*)>
   1f3a4:	e584002c 	str	r0, [r4, #44]	@ 0x2c
   1f3a8:	eb00361f 	bl	2cc2c <CDeviceNameService::Get()>
   1f3ac:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   1f3b0:	e1a03004 	mov	r3, r4
   1f3b4:	e1a01006 	mov	r1, r6
   1f3b8:	e58d5000 	str	r5, [sp]
   1f3bc:	eb003626 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   1f3c0:	e1a00004 	mov	r0, r4
   1f3c4:	e28dd008 	add	sp, sp, #8
   1f3c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   1f3cc:	e320f000 	nop	{0}
   1f3d0:	000003e8 	.word	0x000003e8
   1f3d4:	000003e8 	.word	0x000003e8
	...

0001f3e0 <CTouchScreenDevice::Update()>:
   1f3e0:	e5903008 	ldr	r3, [r0, #8]
   1f3e4:	e3530000 	cmp	r3, #0
   1f3e8:	012fff1e 	bxeq	lr
   1f3ec:	e590000c 	ldr	r0, [r0, #12]
   1f3f0:	e12fff13 	bx	r3

0001f3f4 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))>:
   1f3f4:	e5903010 	ldr	r3, [r0, #16]
   1f3f8:	e92d4010 	push	{r4, lr}
   1f3fc:	e3530000 	cmp	r3, #0
   1f400:	1a000008 	bne	1f428 <CTouchScreenDevice::RegisterEventHandler(void (*)(TTouchScreenEvent, unsigned int, unsigned int, unsigned int))+0x34>
   1f404:	e3510000 	cmp	r1, #0
   1f408:	e5801010 	str	r1, [r0, #16]
   1f40c:	18bd8010 	popne	{r4, pc}
   1f410:	e30c1a24 	movw	r1, #51748	@ 0xca24
   1f414:	e3401003 	movt	r1, #3
   1f418:	e30c04ec 	movw	r0, #50412	@ 0xc4ec
   1f41c:	e3400003 	movt	r0, #3
   1f420:	e3a02041 	mov	r2, #65	@ 0x41
   1f424:	eb00326c 	bl	2bddc <assertion_failed>
   1f428:	e30c1a24 	movw	r1, #51748	@ 0xca24
   1f42c:	e3401003 	movt	r1, #3
   1f430:	e30c0a34 	movw	r0, #51764	@ 0xca34
   1f434:	e3400003 	movt	r0, #3
   1f438:	e3a0203f 	mov	r2, #63	@ 0x3f
   1f43c:	eb003266 	bl	2bddc <assertion_failed>

0001f440 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)>:
   1f440:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1f444:	e8914020 	ldm	r1, {r5, lr}
   1f448:	e155000e 	cmp	r5, lr
   1f44c:	2a000028 	bcs	1f4f4 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xb4>
   1f450:	e5916008 	ldr	r6, [r1, #8]
   1f454:	e591400c 	ldr	r4, [r1, #12]
   1f458:	e1560004 	cmp	r6, r4
   1f45c:	2a000024 	bcs	1f4f4 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xb4>
   1f460:	e3530000 	cmp	r3, #0
   1f464:	13520000 	cmpne	r2, #0
   1f468:	e1a0c000 	mov	ip, r0
   1f46c:	03a00001 	moveq	r0, #1
   1f470:	13a00000 	movne	r0, #0
   1f474:	0a00001e 	beq	1f4f4 <CTouchScreenDevice::SetCalibration(unsigned int const*, unsigned int, unsigned int)+0xb4>
   1f478:	e28ee001 	add	lr, lr, #1
   1f47c:	e2844001 	add	r4, r4, #1
   1f480:	e05ee005 	subs	lr, lr, r5
   1f484:	03a05001 	moveq	r5, #1
   1f488:	13a05000 	movne	r5, #0
   1f48c:	e0544006 	subs	r4, r4, r6
   1f490:	03855001 	orreq	r5, r5, #1
   1f494:	e3550000 	cmp	r5, #0
   1f498:	18bd80f0 	popne	{r4, r5, r6, r7, pc}
   1f49c:	e3a05ffa 	mov	r5, #1000	@ 0x3e8
   1f4a0:	e3047dd3 	movw	r7, #19923	@ 0x4dd3
   1f4a4:	e3417062 	movt	r7, #4194	@ 0x1062
   1f4a8:	e3a00001 	mov	r0, #1
   1f4ac:	e0060295 	mul	r6, r5, r2
   1f4b0:	e736fe16 	udiv	r6, r6, lr
   1f4b4:	e00e0395 	mul	lr, r5, r3
   1f4b8:	e73ef41e 	udiv	lr, lr, r4
   1f4bc:	e58c6014 	str	r6, [ip, #20]
   1f4c0:	e5914000 	ldr	r4, [r1]
   1f4c4:	e58ce018 	str	lr, [ip, #24]
   1f4c8:	e0060694 	mul	r6, r4, r6
   1f4cc:	e0864697 	umull	r4, r6, r7, r6
   1f4d0:	e1a06326 	lsr	r6, r6, #6
   1f4d4:	e58c601c 	str	r6, [ip, #28]
   1f4d8:	e5911008 	ldr	r1, [r1, #8]
   1f4dc:	e1cc22f4 	strd	r2, [ip, #36]	@ 0x24
   1f4e0:	e00e0e91 	mul	lr, r1, lr
   1f4e4:	e08e7e97 	umull	r7, lr, r7, lr
   1f4e8:	e1a0e32e 	lsr	lr, lr, #6
   1f4ec:	e58ce020 	str	lr, [ip, #32]
   1f4f0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   1f4f4:	e3a00000 	mov	r0, #0
   1f4f8:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0001f4fc <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)>:
   1f4fc:	e92d4030 	push	{r4, r5, lr}
   1f500:	e1a0c000 	mov	ip, r0
   1f504:	e5904010 	ldr	r4, [r0, #16]
   1f508:	e59de00c 	ldr	lr, [sp, #12]
   1f50c:	e3540000 	cmp	r4, #0
   1f510:	08bd8030 	popeq	{r4, r5, pc}
   1f514:	e1a00001 	mov	r0, r1
   1f518:	e1a01002 	mov	r1, r2
   1f51c:	e3500001 	cmp	r0, #1
   1f520:	0a000014 	beq	1f578 <CTouchScreenDevice::ReportHandler(TTouchScreenEvent, unsigned int, unsigned int, unsigned int)+0x7c>
   1f524:	e59c2014 	ldr	r2, [ip, #20]
   1f528:	e3045dd3 	movw	r5, #19923	@ 0x4dd3
   1f52c:	e3415062 	movt	r5, #4194	@ 0x1062
   1f530:	e0030392 	mul	r3, r2, r3
   1f534:	e0832395 	umull	r2, r3, r5, r3
   1f538:	e59c201c 	ldr	r2, [ip, #28]
   1f53c:	e0622323 	rsb	r2, r2, r3, lsr #6
   1f540:	e59c3024 	ldr	r3, [ip, #36]	@ 0x24
   1f544:	e1530002 	cmp	r3, r2
   1f548:	98bd8030 	popls	{r4, r5, pc}
   1f54c:	e59c3018 	ldr	r3, [ip, #24]
   1f550:	e00e0e93 	mul	lr, r3, lr
   1f554:	e59c3020 	ldr	r3, [ip, #32]
   1f558:	e59cc028 	ldr	ip, [ip, #40]	@ 0x28
   1f55c:	e08e5e95 	umull	r5, lr, r5, lr
   1f560:	e063332e 	rsb	r3, r3, lr, lsr #6
   1f564:	e15c0003 	cmp	ip, r3
   1f568:	98bd8030 	popls	{r4, r5, pc}
   1f56c:	e1a0c004 	mov	ip, r4
   1f570:	e8bd4030 	pop	{r4, r5, lr}
   1f574:	e12fff1c 	bx	ip
   1f578:	e3a03000 	mov	r3, #0
   1f57c:	e1a0c004 	mov	ip, r4
   1f580:	e1a02003 	mov	r2, r3
   1f584:	e8bd4030 	pop	{r4, r5, lr}
   1f588:	e12fff1c 	bx	ip

0001f58c <_GLOBAL__sub_I__ZN18CTouchScreenDevice18s_DeviceNumberPoolE>:
   1f58c:	e92d4010 	push	{r4, lr}
   1f590:	e3044128 	movw	r4, #16680	@ 0x4128
   1f594:	e3404004 	movt	r4, #4
   1f598:	e3a0203f 	mov	r2, #63	@ 0x3f
   1f59c:	e3a01001 	mov	r1, #1
   1f5a0:	e1a00004 	mov	r0, r4
   1f5a4:	eb005c17 	bl	36608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>
   1f5a8:	e1a00004 	mov	r0, r4
   1f5ac:	e3042180 	movw	r2, #16768	@ 0x4180
   1f5b0:	e3402004 	movt	r2, #4
   1f5b4:	e3061658 	movw	r1, #26200	@ 0x6658
   1f5b8:	e3401003 	movt	r1, #3
   1f5bc:	e8bd4010 	pop	{r4, lr}
   1f5c0:	ea0052e3 	b	34154 <__aeabi_atexit>

0001f5c4 <CMouseBehaviour::CMouseBehaviour()>:
   1f5c4:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   1f5c8:	e3a02000 	mov	r2, #0
   1f5cc:	e1c021b0 	strh	r2, [r0, #16]
   1f5d0:	e5802014 	str	r2, [r0, #20]
   1f5d4:	e5802018 	str	r2, [r0, #24]
   1f5d8:	f4400a8f 	vst1.32	{d16-d17}, [r0]
   1f5dc:	e12fff1e 	bx	lr

0001f5e0 <CMouseBehaviour::Setup(unsigned int, unsigned int)>:
   1f5e0:	e1a03001 	mov	r3, r1
   1f5e4:	e92d4010 	push	{r4, lr}
   1f5e8:	e5901000 	ldr	r1, [r0]
   1f5ec:	e24dd038 	sub	sp, sp, #56	@ 0x38
   1f5f0:	e3510000 	cmp	r1, #0
   1f5f4:	1a00002b 	bne	1f6a8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xc8>
   1f5f8:	e3530000 	cmp	r3, #0
   1f5fc:	e5803000 	str	r3, [r0]
   1f600:	0a00002e 	beq	1f6c0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xe0>
   1f604:	e5904004 	ldr	r4, [r0, #4]
   1f608:	e3540000 	cmp	r4, #0
   1f60c:	1a000031 	bne	1f6d8 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0xf8>
   1f610:	e3520000 	cmp	r2, #0
   1f614:	e5802004 	str	r2, [r0, #4]
   1f618:	0a000034 	beq	1f6f0 <CMouseBehaviour::Setup(unsigned int, unsigned int)+0x110>
   1f61c:	e2833001 	add	r3, r3, #1
   1f620:	e2822001 	add	r2, r2, #1
   1f624:	e1a01004 	mov	r1, r4
   1f628:	e1a030a3 	lsr	r3, r3, #1
   1f62c:	e1a020a2 	lsr	r2, r2, #1
   1f630:	e5803008 	str	r3, [r0, #8]
   1f634:	e580200c 	str	r2, [r0, #12]
   1f638:	e28d0008 	add	r0, sp, #8
   1f63c:	eb003207 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1f640:	f2c10010 	vmov.i32	d16, #16	@ 0x00000010
   1f644:	e28d001c 	add	r0, sp, #28
   1f648:	e3012940 	movw	r2, #6464	@ 0x1940
   1f64c:	e3402004 	movt	r2, #4
   1f650:	e3a03024 	mov	r3, #36	@ 0x24
   1f654:	e3a01018 	mov	r1, #24
   1f658:	e3822103 	orr	r2, r2, #-1073741824	@ 0xc0000000
   1f65c:	e58d1000 	str	r1, [sp]
   1f660:	e3081010 	movw	r1, #32784	@ 0x8010
   1f664:	f440078f 	vst1.32	{d16}, [r0]
   1f668:	e28d0008 	add	r0, sp, #8
   1f66c:	e58d2028 	str	r2, [sp, #40]	@ 0x28
   1f670:	e28d2010 	add	r2, sp, #16
   1f674:	e58d4024 	str	r4, [sp, #36]	@ 0x24
   1f678:	e58d402c 	str	r4, [sp, #44]	@ 0x2c
   1f67c:	e58d4030 	str	r4, [sp, #48]	@ 0x30
   1f680:	eb003248 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1f684:	e2504000 	subs	r4, r0, #0
   1f688:	e28d0008 	add	r0, sp, #8
   1f68c:	159d401c 	ldrne	r4, [sp, #28]
   1f690:	116f4f14 	clzne	r4, r4
   1f694:	11a042a4 	lsrne	r4, r4, #5
   1f698:	eb0031f7 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   1f69c:	e1a00004 	mov	r0, r4
   1f6a0:	e28dd038 	add	sp, sp, #56	@ 0x38
   1f6a4:	e8bd8010 	pop	{r4, pc}
   1f6a8:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1f6ac:	e3401003 	movt	r1, #3
   1f6b0:	e30c0a60 	movw	r0, #51808	@ 0xca60
   1f6b4:	e3400003 	movt	r0, #3
   1f6b8:	e3a02051 	mov	r2, #81	@ 0x51
   1f6bc:	eb0031c6 	bl	2bddc <assertion_failed>
   1f6c0:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1f6c4:	e3401003 	movt	r1, #3
   1f6c8:	e30c0a74 	movw	r0, #51828	@ 0xca74
   1f6cc:	e3400003 	movt	r0, #3
   1f6d0:	e3a02053 	mov	r2, #83	@ 0x53
   1f6d4:	eb0031c0 	bl	2bddc <assertion_failed>
   1f6d8:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1f6dc:	e3401003 	movt	r1, #3
   1f6e0:	e30c0a88 	movw	r0, #51848	@ 0xca88
   1f6e4:	e3400003 	movt	r0, #3
   1f6e8:	e3a02055 	mov	r2, #85	@ 0x55
   1f6ec:	eb0031ba 	bl	2bddc <assertion_failed>
   1f6f0:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1f6f4:	e3401003 	movt	r1, #3
   1f6f8:	e30c0aa0 	movw	r0, #51872	@ 0xcaa0
   1f6fc:	e3400003 	movt	r0, #3
   1f700:	e3a02057 	mov	r2, #87	@ 0x57
   1f704:	eb0031b4 	bl	2bddc <assertion_failed>

0001f708 <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))>:
   1f708:	e5903018 	ldr	r3, [r0, #24]
   1f70c:	e92d4010 	push	{r4, lr}
   1f710:	e3530000 	cmp	r3, #0
   1f714:	1a000008 	bne	1f73c <CMouseBehaviour::RegisterEventHandler(void (*)(TMouseEvent, unsigned int, unsigned int, unsigned int, int))+0x34>
   1f718:	e3510000 	cmp	r1, #0
   1f71c:	e5801018 	str	r1, [r0, #24]
   1f720:	18bd8010 	popne	{r4, pc}
   1f724:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1f728:	e3401003 	movt	r1, #3
   1f72c:	e30c04ec 	movw	r0, #50412	@ 0xc4ec
   1f730:	e3400003 	movt	r0, #3
   1f734:	e3a0208b 	mov	r2, #139	@ 0x8b
   1f738:	eb0031a7 	bl	2bddc <assertion_failed>
   1f73c:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1f740:	e3401003 	movt	r1, #3
   1f744:	e30c0a34 	movw	r0, #51764	@ 0xca34
   1f748:	e3400003 	movt	r0, #3
   1f74c:	e3a02089 	mov	r2, #137	@ 0x89
   1f750:	eb0031a1 	bl	2bddc <assertion_failed>

0001f754 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)>:
   1f754:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   1f758:	e1a05001 	mov	r5, r1
   1f75c:	e5901000 	ldr	r1, [r0]
   1f760:	e24dd00c 	sub	sp, sp, #12
   1f764:	e3510000 	cmp	r1, #0
   1f768:	e59d6028 	ldr	r6, [sp, #40]	@ 0x28
   1f76c:	0a00004f 	beq	1f8b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x15c>
   1f770:	e590c004 	ldr	ip, [r0, #4]
   1f774:	e1a04000 	mov	r4, r0
   1f778:	e35c0000 	cmp	ip, #0
   1f77c:	0a00004b 	beq	1f8b0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x15c>
   1f780:	e3a00012 	mov	r0, #18
   1f784:	e3068667 	movw	r8, #26215	@ 0x6667
   1f788:	e3468666 	movt	r8, #26214	@ 0x6666
   1f78c:	e594e008 	ldr	lr, [r4, #8]
   1f790:	e0020290 	mul	r2, r0, r2
   1f794:	e0000390 	mul	r0, r0, r3
   1f798:	e594300c 	ldr	r3, [r4, #12]
   1f79c:	e1a07fc2 	asr	r7, r2, #31
   1f7a0:	e0c29298 	smull	r9, r2, r8, r2
   1f7a4:	e0672142 	rsb	r2, r7, r2, asr #2
   1f7a8:	e0c87098 	smull	r7, r8, r8, r0
   1f7ac:	e1a00fc0 	asr	r0, r0, #31
   1f7b0:	e082200e 	add	r2, r2, lr
   1f7b4:	e1510002 	cmp	r1, r2
   1f7b8:	e0600148 	rsb	r0, r0, r8, asr #2
   1f7bc:	e0830000 	add	r0, r3, r0
   1f7c0:	9a00003c 	bls	1f8b8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x164>
   1f7c4:	e15c0000 	cmp	ip, r0
   1f7c8:	e5842008 	str	r2, [r4, #8]
   1f7cc:	8a000049 	bhi	1f8f8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x1a4>
   1f7d0:	e152000e 	cmp	r2, lr
   1f7d4:	e584300c 	str	r3, [r4, #12]
   1f7d8:	0a000008 	beq	1f800 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xac>
   1f7dc:	e5947018 	ldr	r7, [r4, #24]
   1f7e0:	e3a01001 	mov	r1, #1
   1f7e4:	e5c41010 	strb	r1, [r4, #16]
   1f7e8:	e3570000 	cmp	r7, #0
   1f7ec:	0a000003 	beq	1f800 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xac>
   1f7f0:	e1a01005 	mov	r1, r5
   1f7f4:	e3a00000 	mov	r0, #0
   1f7f8:	e58d6000 	str	r6, [sp]
   1f7fc:	e12fff37 	blx	r7
   1f800:	e5943014 	ldr	r3, [r4, #20]
   1f804:	e1530005 	cmp	r3, r5
   1f808:	0a00001c 	beq	1f880 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x12c>
   1f80c:	e5942018 	ldr	r2, [r4, #24]
   1f810:	e3520000 	cmp	r2, #0
   1f814:	0a000024 	beq	1f8ac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x158>
   1f818:	e3a07000 	mov	r7, #0
   1f81c:	e3a08001 	mov	r8, #1
   1f820:	e1a01718 	lsl	r1, r8, r7
   1f824:	e1130001 	tst	r3, r1
   1f828:	e0053001 	and	r3, r5, r1
   1f82c:	0a000009 	beq	1f858 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x104>
   1f830:	e3530000 	cmp	r3, #0
   1f834:	0a000029 	beq	1f8e0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x18c>
   1f838:	e2877001 	add	r7, r7, #1
   1f83c:	e3570005 	cmp	r7, #5
   1f840:	0a00000e 	beq	1f880 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x12c>
   1f844:	e5943014 	ldr	r3, [r4, #20]
   1f848:	e1a01718 	lsl	r1, r8, r7
   1f84c:	e1130001 	tst	r3, r1
   1f850:	e0053001 	and	r3, r5, r1
   1f854:	1afffff5 	bne	1f830 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xdc>
   1f858:	e3530000 	cmp	r3, #0
   1f85c:	0afffff5 	beq	1f838 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xe4>
   1f860:	e58d6000 	str	r6, [sp]
   1f864:	e3a00001 	mov	r0, #1
   1f868:	e2877001 	add	r7, r7, #1
   1f86c:	e1c420d8 	ldrd	r2, [r4, #8]
   1f870:	e594c018 	ldr	ip, [r4, #24]
   1f874:	e12fff3c 	blx	ip
   1f878:	e3570005 	cmp	r7, #5
   1f87c:	1afffff0 	bne	1f844 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xf0>
   1f880:	e3560000 	cmp	r6, #0
   1f884:	0a000008 	beq	1f8ac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x158>
   1f888:	e5947018 	ldr	r7, [r4, #24]
   1f88c:	e3570000 	cmp	r7, #0
   1f890:	0a000005 	beq	1f8ac <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x158>
   1f894:	e594300c 	ldr	r3, [r4, #12]
   1f898:	e1a01005 	mov	r1, r5
   1f89c:	e58d6000 	str	r6, [sp]
   1f8a0:	e3a00003 	mov	r0, #3
   1f8a4:	e5942008 	ldr	r2, [r4, #8]
   1f8a8:	e12fff37 	blx	r7
   1f8ac:	e5845014 	str	r5, [r4, #20]
   1f8b0:	e28dd00c 	add	sp, sp, #12
   1f8b4:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f8b8:	e15c0000 	cmp	ip, r0
   1f8bc:	e584e008 	str	lr, [r4, #8]
   1f8c0:	9584300c 	strls	r3, [r4, #12]
   1f8c4:	9affffcd 	bls	1f800 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xac>
   1f8c8:	e1a0200e 	mov	r2, lr
   1f8cc:	e584000c 	str	r0, [r4, #12]
   1f8d0:	e1500003 	cmp	r0, r3
   1f8d4:	0affffc9 	beq	1f800 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xac>
   1f8d8:	e1a03000 	mov	r3, r0
   1f8dc:	eaffffbe 	b	1f7dc <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x88>
   1f8e0:	e58d6000 	str	r6, [sp]
   1f8e4:	e3a00002 	mov	r0, #2
   1f8e8:	e5949018 	ldr	r9, [r4, #24]
   1f8ec:	e1c420d8 	ldrd	r2, [r4, #8]
   1f8f0:	e12fff39 	blx	r9
   1f8f4:	eaffffcf 	b	1f838 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0xe4>
   1f8f8:	e152000e 	cmp	r2, lr
   1f8fc:	e584000c 	str	r0, [r4, #12]
   1f900:	1afffff4 	bne	1f8d8 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x184>
   1f904:	eafffff1 	b	1f8d0 <CMouseBehaviour::MouseStatusChanged(unsigned int, int, int, int)+0x17c>

0001f908 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>:
   1f908:	e92d4070 	push	{r4, r5, r6, lr}
   1f90c:	e1a04001 	mov	r4, r1
   1f910:	e1a05000 	mov	r5, r0
   1f914:	e24dd030 	sub	sp, sp, #48	@ 0x30
   1f918:	e3a01000 	mov	r1, #0
   1f91c:	e28d000c 	add	r0, sp, #12
   1f920:	e1a06002 	mov	r6, r2
   1f924:	eb00314d 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   1f928:	e3081011 	movw	r1, #32785	@ 0x8011
   1f92c:	e3a03010 	mov	r3, #16
   1f930:	e3a02001 	mov	r2, #1
   1f934:	e58d3000 	str	r3, [sp]
   1f938:	e28d000c 	add	r0, sp, #12
   1f93c:	e3a0301c 	mov	r3, #28
   1f940:	e58d202c 	str	r2, [sp, #44]	@ 0x2c
   1f944:	e28d2014 	add	r2, sp, #20
   1f948:	e58d4028 	str	r4, [sp, #40]	@ 0x28
   1f94c:	e58d6020 	str	r6, [sp, #32]
   1f950:	e58d5024 	str	r5, [sp, #36]	@ 0x24
   1f954:	eb003193 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   1f958:	e2504000 	subs	r4, r0, #0
   1f95c:	e28d000c 	add	r0, sp, #12
   1f960:	159d4020 	ldrne	r4, [sp, #32]
   1f964:	116f4f14 	clzne	r4, r4
   1f968:	11a042a4 	lsrne	r4, r4, #5
   1f96c:	eb003142 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   1f970:	e1a00004 	mov	r0, r4
   1f974:	e28dd030 	add	sp, sp, #48	@ 0x30
   1f978:	e8bd8070 	pop	{r4, r5, r6, pc}

0001f97c <CMouseBehaviour::~CMouseBehaviour()>:
   1f97c:	e5d03011 	ldrb	r3, [r0, #17]
   1f980:	e3a02000 	mov	r2, #0
   1f984:	e92d4010 	push	{r4, lr}
   1f988:	e1a04000 	mov	r4, r0
   1f98c:	e1530002 	cmp	r3, r2
   1f990:	e5802018 	str	r2, [r0, #24]
   1f994:	1a000001 	bne	1f9a0 <CMouseBehaviour::~CMouseBehaviour()+0x24>
   1f998:	e1a00004 	mov	r0, r4
   1f99c:	e8bd8010 	pop	{r4, pc}
   1f9a0:	e1a01002 	mov	r1, r2
   1f9a4:	e1a00002 	mov	r0, r2
   1f9a8:	ebffffd6 	bl	1f908 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1f9ac:	e1a00004 	mov	r0, r4
   1f9b0:	e8bd8010 	pop	{r4, pc}

0001f9b4 <CMouseBehaviour::Release()>:
   1f9b4:	e5903000 	ldr	r3, [r0]
   1f9b8:	e3530000 	cmp	r3, #0
   1f9bc:	012fff1e 	bxeq	lr
   1f9c0:	e5903004 	ldr	r3, [r0, #4]
   1f9c4:	e92d4010 	push	{r4, lr}
   1f9c8:	e1a04000 	mov	r4, r0
   1f9cc:	e3530000 	cmp	r3, #0
   1f9d0:	08bd8010 	popeq	{r4, pc}
   1f9d4:	e5d03011 	ldrb	r3, [r0, #17]
   1f9d8:	e3530000 	cmp	r3, #0
   1f9dc:	1a000005 	bne	1f9f8 <CMouseBehaviour::Release()+0x44>
   1f9e0:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   1f9e4:	e3a03000 	mov	r3, #0
   1f9e8:	e1c431b0 	strh	r3, [r4, #16]
   1f9ec:	e5843014 	str	r3, [r4, #20]
   1f9f0:	f4440a8f 	vst1.32	{d16-d17}, [r4]
   1f9f4:	e8bd8010 	pop	{r4, pc}
   1f9f8:	e3a02000 	mov	r2, #0
   1f9fc:	e1a01002 	mov	r1, r2
   1fa00:	e1a00002 	mov	r0, r2
   1fa04:	ebffffbf 	bl	1f908 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1fa08:	eafffff4 	b	1f9e0 <CMouseBehaviour::Release()+0x2c>

0001fa0c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)>:
   1fa0c:	e1a03000 	mov	r3, r0
   1fa10:	e1a00001 	mov	r0, r1
   1fa14:	e1a01002 	mov	r1, r2
   1fa18:	e92d4010 	push	{r4, lr}
   1fa1c:	e5932000 	ldr	r2, [r3]
   1fa20:	e3520000 	cmp	r2, #0
   1fa24:	0a000010 	beq	1fa6c <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x60>
   1fa28:	e593c004 	ldr	ip, [r3, #4]
   1fa2c:	e35c0000 	cmp	ip, #0
   1fa30:	0a000013 	beq	1fa84 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x78>
   1fa34:	e1520000 	cmp	r2, r0
   1fa38:	815c0001 	cmphi	ip, r1
   1fa3c:	8a000001 	bhi	1fa48 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x3c>
   1fa40:	e3a00000 	mov	r0, #0
   1fa44:	e8bd8010 	pop	{r4, pc}
   1fa48:	e5d32011 	ldrb	r2, [r3, #17]
   1fa4c:	e1c300f8 	strd	r0, [r3, #8]
   1fa50:	e3520000 	cmp	r2, #0
   1fa54:	1a000001 	bne	1fa60 <CMouseBehaviour::SetCursor(unsigned int, unsigned int)+0x54>
   1fa58:	e3a00001 	mov	r0, #1
   1fa5c:	e8bd8010 	pop	{r4, pc}
   1fa60:	e8bd4010 	pop	{r4, lr}
   1fa64:	e3a02001 	mov	r2, #1
   1fa68:	eaffffa6 	b	1f908 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1fa6c:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1fa70:	e3401003 	movt	r1, #3
   1fa74:	e30c0a74 	movw	r0, #51828	@ 0xca74
   1fa78:	e3400003 	movt	r0, #3
   1fa7c:	e3a02090 	mov	r2, #144	@ 0x90
   1fa80:	eb0030d5 	bl	2bddc <assertion_failed>
   1fa84:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1fa88:	e3401003 	movt	r1, #3
   1fa8c:	e30c0aa0 	movw	r0, #51872	@ 0xcaa0
   1fa90:	e3400003 	movt	r0, #3
   1fa94:	e3a02091 	mov	r2, #145	@ 0x91
   1fa98:	eb0030cf 	bl	2bddc <assertion_failed>

0001fa9c <CMouseBehaviour::ShowCursor(bool)>:
   1fa9c:	e1a03000 	mov	r3, r0
   1faa0:	e1a02001 	mov	r2, r1
   1faa4:	e5900008 	ldr	r0, [r0, #8]
   1faa8:	e92d4010 	push	{r4, lr}
   1faac:	e5931000 	ldr	r1, [r3]
   1fab0:	e5d34011 	ldrb	r4, [r3, #17]
   1fab4:	e1500001 	cmp	r0, r1
   1fab8:	e5c32011 	strb	r2, [r3, #17]
   1fabc:	2a000006 	bcs	1fadc <CMouseBehaviour::ShowCursor(bool)+0x40>
   1fac0:	e593100c 	ldr	r1, [r3, #12]
   1fac4:	e5933004 	ldr	r3, [r3, #4]
   1fac8:	e1510003 	cmp	r1, r3
   1facc:	2a000008 	bcs	1faf4 <CMouseBehaviour::ShowCursor(bool)+0x58>
   1fad0:	ebffff8c 	bl	1f908 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>
   1fad4:	e1a00004 	mov	r0, r4
   1fad8:	e8bd8010 	pop	{r4, pc}
   1fadc:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1fae0:	e3401003 	movt	r1, #3
   1fae4:	e30c0ab4 	movw	r0, #51892	@ 0xcab4
   1fae8:	e3400003 	movt	r0, #3
   1faec:	e3a020a8 	mov	r2, #168	@ 0xa8
   1faf0:	eb0030b9 	bl	2bddc <assertion_failed>
   1faf4:	e30c1a4c 	movw	r1, #51788	@ 0xca4c
   1faf8:	e3401003 	movt	r1, #3
   1fafc:	e30c0ad0 	movw	r0, #51920	@ 0xcad0
   1fb00:	e3400003 	movt	r0, #3
   1fb04:	e3a020a9 	mov	r2, #169	@ 0xa9
   1fb08:	eb0030b3 	bl	2bddc <assertion_failed>

0001fb0c <CMouseBehaviour::UpdateCursor()>:
   1fb0c:	e5d02011 	ldrb	r2, [r0, #17]
   1fb10:	e1a03000 	mov	r3, r0
   1fb14:	e3520000 	cmp	r2, #0
   1fb18:	012fff1e 	bxeq	lr
   1fb1c:	e5d02010 	ldrb	r2, [r0, #16]
   1fb20:	e3520000 	cmp	r2, #0
   1fb24:	012fff1e 	bxeq	lr
   1fb28:	e1c000d8 	ldrd	r0, [r0, #8]
   1fb2c:	e3a0c000 	mov	ip, #0
   1fb30:	e3a02001 	mov	r2, #1
   1fb34:	e5c3c010 	strb	ip, [r3, #16]
   1fb38:	eaffff72 	b	1f908 <CMouseBehaviour::SetCursorState(unsigned int, unsigned int, bool)>

0001fb3c <CPartitionManager::CPartitionManager(CDevice*, char const*)>:
   1fb3c:	e1a03001 	mov	r3, r1
   1fb40:	e92d4010 	push	{r4, lr}
   1fb44:	e1a01002 	mov	r1, r2
   1fb48:	e1a04000 	mov	r4, r0
   1fb4c:	e4803004 	str	r3, [r0], #4
   1fb50:	eb004bc1 	bl	32a5c <CString::CString(char const*)>
   1fb54:	e2843014 	add	r3, r4, #20
   1fb58:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   1fb5c:	e1a00004 	mov	r0, r4
   1fb60:	f4430a8f 	vst1.32	{d16-d17}, [r3]
   1fb64:	e8bd8010 	pop	{r4, pc}

0001fb68 <CPartitionManager::~CPartitionManager()>:
   1fb68:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fb6c:	e30c8aec 	movw	r8, #51948	@ 0xcaec
   1fb70:	e3408003 	movt	r8, #3
   1fb74:	e24dd010 	sub	sp, sp, #16
   1fb78:	e3a07000 	mov	r7, #0
   1fb7c:	e1a06000 	mov	r6, r0
   1fb80:	e2804010 	add	r4, r0, #16
   1fb84:	e2809020 	add	r9, r0, #32
   1fb88:	e280a004 	add	sl, r0, #4
   1fb8c:	e5b43004 	ldr	r3, [r4, #4]!
   1fb90:	e1a0000d 	mov	r0, sp
   1fb94:	e3530000 	cmp	r3, #0
   1fb98:	0a00001a 	beq	1fc08 <CPartitionManager::~CPartitionManager()+0xa0>
   1fb9c:	eb004ba8 	bl	32a44 <CString::CString()>
   1fba0:	e2877001 	add	r7, r7, #1
   1fba4:	e1a0000a 	mov	r0, sl
   1fba8:	eb004bdd 	bl	32b24 <CString::operator char const*() const>
   1fbac:	e1a03007 	mov	r3, r7
   1fbb0:	e1a02000 	mov	r2, r0
   1fbb4:	e1a01008 	mov	r1, r8
   1fbb8:	e1a0000d 	mov	r0, sp
   1fbbc:	eb005159 	bl	34128 <CString::Format(char const*, ...)>
   1fbc0:	eb003419 	bl	2cc2c <CDeviceNameService::Get()>
   1fbc4:	e1a05000 	mov	r5, r0
   1fbc8:	e1a0000d 	mov	r0, sp
   1fbcc:	eb004bd4 	bl	32b24 <CString::operator char const*() const>
   1fbd0:	e3a02001 	mov	r2, #1
   1fbd4:	e1a01000 	mov	r1, r0
   1fbd8:	e1a00005 	mov	r0, r5
   1fbdc:	eb00336a 	bl	2c98c <CDeviceNameService::RemoveDevice(char const*, bool)>
   1fbe0:	e5943000 	ldr	r3, [r4]
   1fbe4:	e2530000 	subs	r0, r3, #0
   1fbe8:	0a000002 	beq	1fbf8 <CPartitionManager::~CPartitionManager()+0x90>
   1fbec:	e5933000 	ldr	r3, [r3]
   1fbf0:	e5933004 	ldr	r3, [r3, #4]
   1fbf4:	e12fff33 	blx	r3
   1fbf8:	e3a03000 	mov	r3, #0
   1fbfc:	e1a0000d 	mov	r0, sp
   1fc00:	e5843000 	str	r3, [r4]
   1fc04:	eb004b5b 	bl	32978 <CString::~CString()>
   1fc08:	e1540009 	cmp	r4, r9
   1fc0c:	1affffde 	bne	1fb8c <CPartitionManager::~CPartitionManager()+0x24>
   1fc10:	e3a03000 	mov	r3, #0
   1fc14:	e1a0000a 	mov	r0, sl
   1fc18:	e5863000 	str	r3, [r6]
   1fc1c:	eb004b55 	bl	32978 <CString::~CString()>
   1fc20:	e1a00006 	mov	r0, r6
   1fc24:	e28dd010 	add	sp, sp, #16
   1fc28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001fc2c <CPartitionManager::Initialize()>:
   1fc2c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc30:	e1a04000 	mov	r4, r0
   1fc34:	e5900000 	ldr	r0, [r0]
   1fc38:	e24ddf85 	sub	sp, sp, #532	@ 0x214
   1fc3c:	e3a02000 	mov	r2, #0
   1fc40:	e3a03000 	mov	r3, #0
   1fc44:	e5901000 	ldr	r1, [r0]
   1fc48:	e5911010 	ldr	r1, [r1, #16]
   1fc4c:	e12fff31 	blx	r1
   1fc50:	e1900001 	orrs	r0, r0, r1
   1fc54:	1a000027 	bne	1fcf8 <CPartitionManager::Initialize()+0xcc>
   1fc58:	e5940000 	ldr	r0, [r4]
   1fc5c:	e3a02c02 	mov	r2, #512	@ 0x200
   1fc60:	e28d1010 	add	r1, sp, #16
   1fc64:	e5903000 	ldr	r3, [r0]
   1fc68:	e5933008 	ldr	r3, [r3, #8]
   1fc6c:	e12fff33 	blx	r3
   1fc70:	e3500c02 	cmp	r0, #512	@ 0x200
   1fc74:	1a00001f 	bne	1fcf8 <CPartitionManager::Initialize()+0xcc>
   1fc78:	e28d3f83 	add	r3, sp, #524	@ 0x20c
   1fc7c:	e2833002 	add	r3, r3, #2
   1fc80:	e1d320b0 	ldrh	r2, [r3]
   1fc84:	e30a3a55 	movw	r3, #43605	@ 0xaa55
   1fc88:	e1520003 	cmp	r2, r3
   1fc8c:	1a000055 	bne	1fde8 <CPartitionManager::Initialize()+0x1bc>
   1fc90:	e3a05000 	mov	r5, #0
   1fc94:	e2847014 	add	r7, r4, #20
   1fc98:	e1a08005 	mov	r8, r5
   1fc9c:	e3089021 	movw	r9, #32801	@ 0x8021
   1fca0:	e28d3010 	add	r3, sp, #16
   1fca4:	e0833205 	add	r3, r3, r5, lsl #4
   1fca8:	e5d331c2 	ldrb	r3, [r3, #450]	@ 0x1c2
   1fcac:	e353000f 	cmp	r3, #15
   1fcb0:	8a00001a 	bhi	1fd20 <CPartitionManager::Initialize()+0xf4>
   1fcb4:	e1a03339 	lsr	r3, r9, r3
   1fcb8:	e3130001 	tst	r3, #1
   1fcbc:	0a000019 	beq	1fd28 <CPartitionManager::Initialize()+0xfc>
   1fcc0:	e2855001 	add	r5, r5, #1
   1fcc4:	e2877004 	add	r7, r7, #4
   1fcc8:	e3550004 	cmp	r5, #4
   1fccc:	1afffff3 	bne	1fca0 <CPartitionManager::Initialize()+0x74>
   1fcd0:	e3580000 	cmp	r8, #0
   1fcd4:	1a00004a 	bne	1fe04 <CPartitionManager::Initialize()+0x1d8>
   1fcd8:	eb003aba 	bl	2e7c8 <CLogger::Get()>
   1fcdc:	e3a02002 	mov	r2, #2
   1fce0:	e30c3b48 	movw	r3, #52040	@ 0xcb48
   1fce4:	e3403003 	movt	r3, #3
   1fce8:	e3011d40 	movw	r1, #7488	@ 0x1d40
   1fcec:	e3401004 	movt	r1, #4
   1fcf0:	eb003c7d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fcf4:	ea000042 	b	1fe04 <CPartitionManager::Initialize()+0x1d8>
   1fcf8:	eb003ab2 	bl	2e7c8 <CLogger::Get()>
   1fcfc:	e3a02001 	mov	r2, #1
   1fd00:	e30c3af4 	movw	r3, #51956	@ 0xcaf4
   1fd04:	e3403003 	movt	r3, #3
   1fd08:	e3011d40 	movw	r1, #7488	@ 0x1d40
   1fd0c:	e3401004 	movt	r1, #4
   1fd10:	eb003c75 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fd14:	e3a00000 	mov	r0, #0
   1fd18:	e28ddf85 	add	sp, sp, #532	@ 0x214
   1fd1c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd20:	e35300ef 	cmp	r3, #239	@ 0xef
   1fd24:	0affffe5 	beq	1fcc0 <CPartitionManager::Initialize()+0x94>
   1fd28:	e285601c 	add	r6, r5, #28
   1fd2c:	e28d3e21 	add	r3, sp, #528	@ 0x210
   1fd30:	e0836206 	add	r6, r3, r6, lsl #4
   1fd34:	e51631fa 	ldr	r3, [r6, #-506]	@ 0xfffffe06
   1fd38:	e3530000 	cmp	r3, #0
   1fd3c:	0affffdf 	beq	1fcc0 <CPartitionManager::Initialize()+0x94>
   1fd40:	e51631f6 	ldr	r3, [r6, #-502]	@ 0xfffffe0a
   1fd44:	e3530000 	cmp	r3, #0
   1fd48:	0affffdc 	beq	1fcc0 <CPartitionManager::Initialize()+0x94>
   1fd4c:	e5973000 	ldr	r3, [r7]
   1fd50:	e3530000 	cmp	r3, #0
   1fd54:	1a00002c 	bne	1fe0c <CPartitionManager::Initialize()+0x1e0>
   1fd58:	e1a0a004 	mov	sl, r4
   1fd5c:	e3a00028 	mov	r0, #40	@ 0x28
   1fd60:	eb0058ef 	bl	36124 <operator new(unsigned int)>
   1fd64:	e51631f6 	ldr	r3, [r6, #-502]	@ 0xfffffe0a
   1fd68:	e51621fa 	ldr	r2, [r6, #-506]	@ 0xfffffe06
   1fd6c:	e1a0b000 	mov	fp, r0
   1fd70:	e49a1004 	ldr	r1, [sl], #4
   1fd74:	e2888001 	add	r8, r8, #1
   1fd78:	eb0000b0 	bl	20040 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>
   1fd7c:	e587b000 	str	fp, [r7]
   1fd80:	e1a0000d 	mov	r0, sp
   1fd84:	e2855001 	add	r5, r5, #1
   1fd88:	eb004b2d 	bl	32a44 <CString::CString()>
   1fd8c:	e1a0000a 	mov	r0, sl
   1fd90:	eb004b63 	bl	32b24 <CString::operator char const*() const>
   1fd94:	e1a03008 	mov	r3, r8
   1fd98:	e1a02000 	mov	r2, r0
   1fd9c:	e30c1aec 	movw	r1, #51948	@ 0xcaec
   1fda0:	e3401003 	movt	r1, #3
   1fda4:	e1a0000d 	mov	r0, sp
   1fda8:	eb0050de 	bl	34128 <CString::Format(char const*, ...)>
   1fdac:	e2877004 	add	r7, r7, #4
   1fdb0:	eb00339d 	bl	2cc2c <CDeviceNameService::Get()>
   1fdb4:	e1a06000 	mov	r6, r0
   1fdb8:	e1a0000d 	mov	r0, sp
   1fdbc:	eb004b58 	bl	32b24 <CString::operator char const*() const>
   1fdc0:	e5172004 	ldr	r2, [r7, #-4]
   1fdc4:	e1a01000 	mov	r1, r0
   1fdc8:	e3a03001 	mov	r3, #1
   1fdcc:	e1a00006 	mov	r0, r6
   1fdd0:	eb0032c0 	bl	2c8d8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   1fdd4:	e1a0000d 	mov	r0, sp
   1fdd8:	eb004ae6 	bl	32978 <CString::~CString()>
   1fddc:	e3550004 	cmp	r5, #4
   1fde0:	1affffae 	bne	1fca0 <CPartitionManager::Initialize()+0x74>
   1fde4:	eaffffb9 	b	1fcd0 <CPartitionManager::Initialize()+0xa4>
   1fde8:	eb003a76 	bl	2e7c8 <CLogger::Get()>
   1fdec:	e30c3b04 	movw	r3, #51972	@ 0xcb04
   1fdf0:	e3403003 	movt	r3, #3
   1fdf4:	e3011d40 	movw	r1, #7488	@ 0x1d40
   1fdf8:	e3401004 	movt	r1, #4
   1fdfc:	e3a02002 	mov	r2, #2
   1fe00:	eb003c39 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1fe04:	e3a00001 	mov	r0, #1
   1fe08:	eaffffc2 	b	1fd18 <CPartitionManager::Initialize()+0xec>
   1fe0c:	e30c1b18 	movw	r1, #51992	@ 0xcb18
   1fe10:	e3401003 	movt	r1, #3
   1fe14:	e30c0b30 	movw	r0, #52016	@ 0xcb30
   1fe18:	e3400003 	movt	r0, #3
   1fe1c:	e3a02078 	mov	r2, #120	@ 0x78
   1fe20:	eb002fed 	bl	2bddc <assertion_failed>

0001fe24 <CPartition::Read(void*, unsigned int)>:
   1fe24:	e92d4010 	push	{r4, lr}
   1fe28:	e5d0e020 	ldrb	lr, [r0, #32]
   1fe2c:	e35e0000 	cmp	lr, #0
   1fe30:	1a00001a 	bne	1fea0 <CPartition::Read(void*, unsigned int)+0x7c>
   1fe34:	e5904018 	ldr	r4, [r0, #24]
   1fe38:	e300c1ff 	movw	ip, #511	@ 0x1ff
   1fe3c:	e092300c 	adds	r3, r2, ip
   1fe40:	e0aec00e 	adc	ip, lr, lr
   1fe44:	e0933004 	adds	r3, r3, r4
   1fe48:	e590401c 	ldr	r4, [r0, #28]
   1fe4c:	e1a034a3 	lsr	r3, r3, #9
   1fe50:	e0acc004 	adc	ip, ip, r4
   1fe54:	e5904010 	ldr	r4, [r0, #16]
   1fe58:	e1833b8c 	orr	r3, r3, ip, lsl #23
   1fe5c:	e1a0c4ac 	lsr	ip, ip, #9
   1fe60:	e1540003 	cmp	r4, r3
   1fe64:	e0dec00c 	sbcs	ip, lr, ip
   1fe68:	3a00000c 	bcc	1fea0 <CPartition::Read(void*, unsigned int)+0x7c>
   1fe6c:	e5900008 	ldr	r0, [r0, #8]
   1fe70:	e3500000 	cmp	r0, #0
   1fe74:	0a000003 	beq	1fe88 <CPartition::Read(void*, unsigned int)+0x64>
   1fe78:	e5903000 	ldr	r3, [r0]
   1fe7c:	e8bd4010 	pop	{r4, lr}
   1fe80:	e5933008 	ldr	r3, [r3, #8]
   1fe84:	e12fff13 	bx	r3
   1fe88:	e30c1b6c 	movw	r1, #52076	@ 0xcb6c
   1fe8c:	e3401003 	movt	r1, #3
   1fe90:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   1fe94:	e3400003 	movt	r0, #3
   1fe98:	e3a02035 	mov	r2, #53	@ 0x35
   1fe9c:	eb002fce 	bl	2bddc <assertion_failed>
   1fea0:	e3e00000 	mvn	r0, #0
   1fea4:	e8bd8010 	pop	{r4, pc}

0001fea8 <CPartition::Write(void const*, unsigned int)>:
   1fea8:	e92d4010 	push	{r4, lr}
   1feac:	e5d0e020 	ldrb	lr, [r0, #32]
   1feb0:	e35e0000 	cmp	lr, #0
   1feb4:	1a00001a 	bne	1ff24 <CPartition::Write(void const*, unsigned int)+0x7c>
   1feb8:	e5904018 	ldr	r4, [r0, #24]
   1febc:	e300c1ff 	movw	ip, #511	@ 0x1ff
   1fec0:	e092300c 	adds	r3, r2, ip
   1fec4:	e0aec00e 	adc	ip, lr, lr
   1fec8:	e0933004 	adds	r3, r3, r4
   1fecc:	e590401c 	ldr	r4, [r0, #28]
   1fed0:	e1a034a3 	lsr	r3, r3, #9
   1fed4:	e0acc004 	adc	ip, ip, r4
   1fed8:	e5904010 	ldr	r4, [r0, #16]
   1fedc:	e1833b8c 	orr	r3, r3, ip, lsl #23
   1fee0:	e1a0c4ac 	lsr	ip, ip, #9
   1fee4:	e1540003 	cmp	r4, r3
   1fee8:	e0dec00c 	sbcs	ip, lr, ip
   1feec:	3a00000c 	bcc	1ff24 <CPartition::Write(void const*, unsigned int)+0x7c>
   1fef0:	e5900008 	ldr	r0, [r0, #8]
   1fef4:	e3500000 	cmp	r0, #0
   1fef8:	0a000003 	beq	1ff0c <CPartition::Write(void const*, unsigned int)+0x64>
   1fefc:	e5903000 	ldr	r3, [r0]
   1ff00:	e8bd4010 	pop	{r4, lr}
   1ff04:	e593300c 	ldr	r3, [r3, #12]
   1ff08:	e12fff13 	bx	r3
   1ff0c:	e30c1b6c 	movw	r1, #52076	@ 0xcb6c
   1ff10:	e3401003 	movt	r1, #3
   1ff14:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   1ff18:	e3400003 	movt	r0, #3
   1ff1c:	e3a02047 	mov	r2, #71	@ 0x47
   1ff20:	eb002fad 	bl	2bddc <assertion_failed>
   1ff24:	e3e00000 	mvn	r0, #0
   1ff28:	e8bd8010 	pop	{r4, pc}

0001ff2c <CPartition::Seek(unsigned long long)>:
   1ff2c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ff30:	e1a05002 	mov	r5, r2
   1ff34:	e1a04003 	mov	r4, r3
   1ff38:	e7e87055 	ubfx	r7, r5, #0, #9
   1ff3c:	e3a02001 	mov	r2, #1
   1ff40:	e3973000 	orrs	r3, r7, #0
   1ff44:	e5c02020 	strb	r2, [r0, #32]
   1ff48:	1a00001c 	bne	1ffc0 <CPartition::Seek(unsigned long long)+0x94>
   1ff4c:	e5902010 	ldr	r2, [r0, #16]
   1ff50:	e1a034a5 	lsr	r3, r5, #9
   1ff54:	e1833b84 	orr	r3, r3, r4, lsl #23
   1ff58:	e1a06000 	mov	r6, r0
   1ff5c:	e1530002 	cmp	r3, r2
   1ff60:	e1a034a4 	lsr	r3, r4, #9
   1ff64:	e2d33000 	sbcs	r3, r3, #0
   1ff68:	2a000014 	bcs	1ffc0 <CPartition::Seek(unsigned long long)+0x94>
   1ff6c:	e590300c 	ldr	r3, [r0, #12]
   1ff70:	e5900008 	ldr	r0, [r0, #8]
   1ff74:	e1a02483 	lsl	r2, r3, #9
   1ff78:	e0959002 	adds	r9, r5, r2
   1ff7c:	e0a48ba3 	adc	r8, r4, r3, lsr #23
   1ff80:	e3500000 	cmp	r0, #0
   1ff84:	0a000010 	beq	1ffcc <CPartition::Seek(unsigned long long)+0xa0>
   1ff88:	e5903000 	ldr	r3, [r0]
   1ff8c:	e1a02009 	mov	r2, r9
   1ff90:	e5931010 	ldr	r1, [r3, #16]
   1ff94:	e1a03008 	mov	r3, r8
   1ff98:	e12fff31 	blx	r1
   1ff9c:	e1510008 	cmp	r1, r8
   1ffa0:	01500009 	cmpeq	r0, r9
   1ffa4:	1a000005 	bne	1ffc0 <CPartition::Seek(unsigned long long)+0x94>
   1ffa8:	e1a00005 	mov	r0, r5
   1ffac:	e1a01004 	mov	r1, r4
   1ffb0:	e5865018 	str	r5, [r6, #24]
   1ffb4:	e586401c 	str	r4, [r6, #28]
   1ffb8:	e5c67020 	strb	r7, [r6, #32]
   1ffbc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ffc0:	e3e00000 	mvn	r0, #0
   1ffc4:	e1a01000 	mov	r1, r0
   1ffc8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ffcc:	e30c1b6c 	movw	r1, #52076	@ 0xcb6c
   1ffd0:	e3401003 	movt	r1, #3
   1ffd4:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   1ffd8:	e3400003 	movt	r0, #3
   1ffdc:	e3a02059 	mov	r2, #89	@ 0x59
   1ffe0:	eb002f7d 	bl	2bddc <assertion_failed>

0001ffe4 <CPartition::~CPartition()>:
   1ffe4:	e59f201c 	ldr	r2, [pc, #28]	@ 20008 <CPartition::~CPartition()+0x24>
   1ffe8:	e3a03000 	mov	r3, #0
   1ffec:	e92d4010 	push	{r4, lr}
   1fff0:	e1a04000 	mov	r4, r0
   1fff4:	e5802000 	str	r2, [r0]
   1fff8:	e5803008 	str	r3, [r0, #8]
   1fffc:	eb0031a2 	bl	2c68c <CDevice::~CDevice()>
   20000:	e1a00004 	mov	r0, r4
   20004:	e8bd8010 	pop	{r4, pc}
   20008:	00041d50 	.word	0x00041d50

0002000c <CPartition::~CPartition()>:
   2000c:	e59f2028 	ldr	r2, [pc, #40]	@ 2003c <CPartition::~CPartition()+0x30>
   20010:	e3a03000 	mov	r3, #0
   20014:	e92d4010 	push	{r4, lr}
   20018:	e1a04000 	mov	r4, r0
   2001c:	e5802000 	str	r2, [r0]
   20020:	e5803008 	str	r3, [r0, #8]
   20024:	eb003198 	bl	2c68c <CDevice::~CDevice()>
   20028:	e1a00004 	mov	r0, r4
   2002c:	e3a01028 	mov	r1, #40	@ 0x28
   20030:	eb005853 	bl	36184 <operator delete(void*, unsigned int)>
   20034:	e1a00004 	mov	r0, r4
   20038:	e8bd8010 	pop	{r4, pc}
   2003c:	00041d50 	.word	0x00041d50

00020040 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)>:
   20040:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20044:	e1a04000 	mov	r4, r0
   20048:	e1a05001 	mov	r5, r1
   2004c:	e1a06003 	mov	r6, r3
   20050:	e1a07002 	mov	r7, r2
   20054:	eb0031b9 	bl	2c740 <CDevice::CDevice()>
   20058:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   2005c:	e59f3040 	ldr	r3, [pc, #64]	@ 200a4 <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x64>
   20060:	e3550000 	cmp	r5, #0
   20064:	e5843000 	str	r3, [r4]
   20068:	e3a03001 	mov	r3, #1
   2006c:	e5845008 	str	r5, [r4, #8]
   20070:	e584700c 	str	r7, [r4, #12]
   20074:	e5846010 	str	r6, [r4, #16]
   20078:	e5c43020 	strb	r3, [r4, #32]
   2007c:	edc40b06 	vstr	d16, [r4, #24]
   20080:	0a000001 	beq	2008c <CPartition::CPartition(CDevice*, unsigned int, unsigned int)+0x4c>
   20084:	e1a00004 	mov	r0, r4
   20088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2008c:	e30c1b6c 	movw	r1, #52076	@ 0xcb6c
   20090:	e3401003 	movt	r1, #3
   20094:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   20098:	e3400003 	movt	r0, #3
   2009c:	e3a0201f 	mov	r2, #31
   200a0:	eb002f4d 	bl	2bddc <assertion_failed>
   200a4:	00041d50 	.word	0x00041d50

000200a8 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)>:
   200a8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   200ac:	e1a07003 	mov	r7, r3
   200b0:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   200b4:	e1a04000 	mov	r4, r0
   200b8:	e5dd9028 	ldrb	r9, [sp, #40]	@ 0x28
   200bc:	e3530000 	cmp	r3, #0
   200c0:	e2845010 	add	r5, r4, #16
   200c4:	e1a06001 	mov	r6, r1
   200c8:	e30d1e48 	movw	r1, #56904	@ 0xde48
   200cc:	e3401003 	movt	r1, #3
   200d0:	11a01003 	movne	r1, r3
   200d4:	e1a08002 	mov	r8, r2
   200d8:	eb004a5f 	bl	32a5c <CString::CString(char const*)>
   200dc:	e1a00005 	mov	r0, r5
   200e0:	eb00200f 	bl	28124 <CNetConfig::CNetConfig()>
   200e4:	e1a02009 	mov	r2, r9
   200e8:	e284903c 	add	r9, r4, #60	@ 0x3c
   200ec:	e1a01005 	mov	r1, r5
   200f0:	e1a00009 	mov	r0, r9
   200f4:	eb000ba0 	bl	22f7c <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>
   200f8:	e1a02009 	mov	r2, r9
   200fc:	e2849060 	add	r9, r4, #96	@ 0x60
   20100:	e1a01005 	mov	r1, r5
   20104:	e1a00009 	mov	r0, r9
   20108:	eb0009be 	bl	22808 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>
   2010c:	e1a02009 	mov	r2, r9
   20110:	e2849098 	add	r9, r4, #152	@ 0x98
   20114:	e1a01005 	mov	r1, r5
   20118:	e1a00009 	mov	r0, r9
   2011c:	eb00077f 	bl	21f20 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>
   20120:	e1a01005 	mov	r1, r5
   20124:	e1a02009 	mov	r2, r9
   20128:	e28400d8 	add	r0, r4, #216	@ 0xd8
   2012c:	eb000376 	bl	20f0c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>
   20130:	e3040138 	movw	r0, #16696	@ 0x4138
   20134:	e3400004 	movt	r0, #4
   20138:	e16f1f16 	clz	r1, r6
   2013c:	e1a012a1 	lsr	r1, r1, #5
   20140:	e5c41124 	strb	r1, [r4, #292]	@ 0x124
   20144:	e5903000 	ldr	r3, [r0]
   20148:	e3530000 	cmp	r3, #0
   2014c:	e3a03000 	mov	r3, #0
   20150:	e5843128 	str	r3, [r4, #296]	@ 0x128
   20154:	1a00001a 	bne	201c4 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0x11c>
   20158:	e5804000 	str	r4, [r0]
   2015c:	e1a00005 	mov	r0, r5
   20160:	eb00204d 	bl	2829c <CNetConfig::SetDHCP(bool)>
   20164:	e5d43124 	ldrb	r3, [r4, #292]	@ 0x124
   20168:	e3530000 	cmp	r3, #0
   2016c:	0a000001 	beq	20178 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xd0>
   20170:	e1a00004 	mov	r0, r4
   20174:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20178:	e1a01006 	mov	r1, r6
   2017c:	e1a00005 	mov	r0, r5
   20180:	eb002071 	bl	2834c <CNetConfig::SetIPAddress(unsigned char const*)>
   20184:	e1a01008 	mov	r1, r8
   20188:	e1a00005 	mov	r0, r5
   2018c:	eb002081 	bl	28398 <CNetConfig::SetNetMask(unsigned char const*)>
   20190:	e3570000 	cmp	r7, #0
   20194:	0a000002 	beq	201a4 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xfc>
   20198:	e1a01007 	mov	r1, r7
   2019c:	e1a00005 	mov	r0, r5
   201a0:	eb00208f 	bl	283e4 <CNetConfig::SetDefaultGateway(unsigned char const*)>
   201a4:	e59d3020 	ldr	r3, [sp, #32]
   201a8:	e3530000 	cmp	r3, #0
   201ac:	0affffef 	beq	20170 <CNetSubSystem::CNetSubSystem(unsigned char const*, unsigned char const*, unsigned char const*, unsigned char const*, char const*, TNetDeviceType)+0xc8>
   201b0:	e1a00005 	mov	r0, r5
   201b4:	e1a01003 	mov	r1, r3
   201b8:	eb00208b 	bl	283ec <CNetConfig::SetDNSServer(unsigned char const*)>
   201bc:	e1a00004 	mov	r0, r4
   201c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   201c4:	e30c1b7c 	movw	r1, #52092	@ 0xcb7c
   201c8:	e3401003 	movt	r1, #3
   201cc:	e30c0b90 	movw	r0, #52112	@ 0xcb90
   201d0:	e3400003 	movt	r0, #3
   201d4:	e3a02026 	mov	r2, #38	@ 0x26
   201d8:	eb002eff 	bl	2bddc <assertion_failed>

000201dc <CNetSubSystem::Initialize(bool)>:
   201dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   201e0:	e1a04000 	mov	r4, r0
   201e4:	e2806010 	add	r6, r0, #16
   201e8:	e1a00006 	mov	r0, r6
   201ec:	e1a05001 	mov	r5, r1
   201f0:	eb00207f 	bl	283f4 <CNetConfig::GetIPAddress() const>
   201f4:	e284703c 	add	r7, r4, #60	@ 0x3c
   201f8:	eb00219b 	bl	2886c <CIPAddress::IsNull() const>
   201fc:	e1a01000 	mov	r1, r0
   20200:	e1a00006 	mov	r0, r6
   20204:	e5c41124 	strb	r1, [r4, #292]	@ 0x124
   20208:	eb002023 	bl	2829c <CNetConfig::SetDHCP(bool)>
   2020c:	e1a01005 	mov	r1, r5
   20210:	e1a00007 	mov	r0, r7
   20214:	eb000b6e 	bl	22fd4 <CNetDeviceLayer::Initialize(bool)>
   20218:	e3500000 	cmp	r0, #0
   2021c:	1a000002 	bne	2022c <CNetSubSystem::Initialize(bool)+0x50>
   20220:	e3a06000 	mov	r6, #0
   20224:	e1a00006 	mov	r0, r6
   20228:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2022c:	e2846060 	add	r6, r4, #96	@ 0x60
   20230:	e1a00006 	mov	r0, r6
   20234:	eb0009a9 	bl	228e0 <CLinkLayer::Initialize()>
   20238:	e3500000 	cmp	r0, #0
   2023c:	0afffff7 	beq	20220 <CNetSubSystem::Initialize(bool)+0x44>
   20240:	e2848098 	add	r8, r4, #152	@ 0x98
   20244:	e1a00008 	mov	r0, r8
   20248:	eb00076c 	bl	22000 <CNetworkLayer::Initialize()>
   2024c:	e3500000 	cmp	r0, #0
   20250:	0afffff2 	beq	20220 <CNetSubSystem::Initialize(bool)+0x44>
   20254:	e1a00006 	mov	r0, r6
   20258:	e1a01008 	mov	r1, r8
   2025c:	eb0009b8 	bl	22944 <CLinkLayer::AttachLayer(CNetworkLayer*)>
   20260:	e28400d8 	add	r0, r4, #216	@ 0xd8
   20264:	eb00034e 	bl	20fa4 <CTransportLayer::Initialize()>
   20268:	e2506000 	subs	r6, r0, #0
   2026c:	0affffeb 	beq	20220 <CNetSubSystem::Initialize(bool)+0x44>
   20270:	e3a000f8 	mov	r0, #248	@ 0xf8
   20274:	eb0057aa 	bl	36124 <operator new(unsigned int)>
   20278:	e1a01004 	mov	r1, r4
   2027c:	eb0000ad 	bl	20538 <CNetTask::CNetTask(CNetSubSystem*)>
   20280:	e3550000 	cmp	r5, #0
   20284:	0affffe6 	beq	20224 <CNetSubSystem::Initialize(bool)+0x48>
   20288:	e5d43124 	ldrb	r3, [r4, #292]	@ 0x124
   2028c:	e3530000 	cmp	r3, #0
   20290:	0a000015 	beq	202ec <CNetSubSystem::Initialize(bool)+0x110>
   20294:	e5943128 	ldr	r3, [r4, #296]	@ 0x128
   20298:	e3530000 	cmp	r3, #0
   2029c:	1a00001a 	bne	2030c <CNetSubSystem::Initialize(bool)+0x130>
   202a0:	e3a00f7e 	mov	r0, #504	@ 0x1f8
   202a4:	eb00579e 	bl	36124 <operator new(unsigned int)>
   202a8:	e1a05000 	mov	r5, r0
   202ac:	e1a00004 	mov	r0, r4
   202b0:	eb004a1b 	bl	32b24 <CString::operator char const*() const>
   202b4:	e1a01004 	mov	r1, r4
   202b8:	e1a02000 	mov	r2, r0
   202bc:	e1a00005 	mov	r0, r5
   202c0:	eb002348 	bl	28fe8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   202c4:	e5845128 	str	r5, [r4, #296]	@ 0x128
   202c8:	ea000007 	b	202ec <CNetSubSystem::Initialize(bool)+0x110>
   202cc:	e5940128 	ldr	r0, [r4, #296]	@ 0x128
   202d0:	e3500000 	cmp	r0, #0
   202d4:	0a000002 	beq	202e4 <CNetSubSystem::Initialize(bool)+0x108>
   202d8:	eb00237e 	bl	290d8 <CDHCPClient::IsBound() const>
   202dc:	e3500000 	cmp	r0, #0
   202e0:	1affffcf 	bne	20224 <CNetSubSystem::Initialize(bool)+0x48>
   202e4:	eb002d94 	bl	2b93c <CScheduler::Get()>
   202e8:	eb002c94 	bl	2b540 <CScheduler::Yield()>
   202ec:	e1a00007 	mov	r0, r7
   202f0:	eb000c00 	bl	232f8 <CNetDeviceLayer::IsRunning() const>
   202f4:	e3500000 	cmp	r0, #0
   202f8:	0afffff9 	beq	202e4 <CNetSubSystem::Initialize(bool)+0x108>
   202fc:	e5d43124 	ldrb	r3, [r4, #292]	@ 0x124
   20300:	e3530000 	cmp	r3, #0
   20304:	1afffff0 	bne	202cc <CNetSubSystem::Initialize(bool)+0xf0>
   20308:	eaffffc5 	b	20224 <CNetSubSystem::Initialize(bool)+0x48>
   2030c:	e30c1b7c 	movw	r1, #52092	@ 0xcb7c
   20310:	e3401003 	movt	r1, #3
   20314:	e30c0ba0 	movw	r0, #52128	@ 0xcba0
   20318:	e3400003 	movt	r0, #3
   2031c:	e3a02065 	mov	r2, #101	@ 0x65
   20320:	eb002ead 	bl	2bddc <assertion_failed>

00020324 <CNetSubSystem::Process()>:
   20324:	e3043138 	movw	r3, #16696	@ 0x4138
   20328:	e3403004 	movt	r3, #4
   2032c:	e5933000 	ldr	r3, [r3]
   20330:	e3530000 	cmp	r3, #0
   20334:	012fff1e 	bxeq	lr
   20338:	e5d03124 	ldrb	r3, [r0, #292]	@ 0x124
   2033c:	e92d4070 	push	{r4, r5, r6, lr}
   20340:	e1a04000 	mov	r4, r0
   20344:	e3530000 	cmp	r3, #0
   20348:	0280503c 	addeq	r5, r0, #60	@ 0x3c
   2034c:	1a000008 	bne	20374 <CNetSubSystem::Process()+0x50>
   20350:	e1a00005 	mov	r0, r5
   20354:	eb000b79 	bl	23140 <CNetDeviceLayer::Process()>
   20358:	e2840060 	add	r0, r4, #96	@ 0x60
   2035c:	eb00098b 	bl	22990 <CLinkLayer::Process()>
   20360:	e2840098 	add	r0, r4, #152	@ 0x98
   20364:	eb00073e 	bl	22064 <CNetworkLayer::Process()>
   20368:	e28400d8 	add	r0, r4, #216	@ 0xd8
   2036c:	e8bd4070 	pop	{r4, r5, r6, lr}
   20370:	ea00060a 	b	21ba0 <CTransportLayer::Process()>
   20374:	e5903128 	ldr	r3, [r0, #296]	@ 0x128
   20378:	e280503c 	add	r5, r0, #60	@ 0x3c
   2037c:	e3530000 	cmp	r3, #0
   20380:	1afffff2 	bne	20350 <CNetSubSystem::Process()+0x2c>
   20384:	e1a00005 	mov	r0, r5
   20388:	eb000bda 	bl	232f8 <CNetDeviceLayer::IsRunning() const>
   2038c:	e3500000 	cmp	r0, #0
   20390:	0affffee 	beq	20350 <CNetSubSystem::Process()+0x2c>
   20394:	e3a00f7e 	mov	r0, #504	@ 0x1f8
   20398:	eb005761 	bl	36124 <operator new(unsigned int)>
   2039c:	e1a06000 	mov	r6, r0
   203a0:	e1a00004 	mov	r0, r4
   203a4:	eb0049de 	bl	32b24 <CString::operator char const*() const>
   203a8:	e1a01004 	mov	r1, r4
   203ac:	e1a02000 	mov	r2, r0
   203b0:	e1a00006 	mov	r0, r6
   203b4:	eb00230b 	bl	28fe8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>
   203b8:	e5846128 	str	r6, [r4, #296]	@ 0x128
   203bc:	eaffffe3 	b	20350 <CNetSubSystem::Process()+0x2c>

000203c0 <CNetSubSystem::GetConfig()>:
   203c0:	e2800010 	add	r0, r0, #16
   203c4:	e12fff1e 	bx	lr

000203c8 <CNetSubSystem::GetNetDeviceLayer()>:
   203c8:	e280003c 	add	r0, r0, #60	@ 0x3c
   203cc:	e12fff1e 	bx	lr

000203d0 <CNetSubSystem::GetLinkLayer()>:
   203d0:	e2800060 	add	r0, r0, #96	@ 0x60
   203d4:	e12fff1e 	bx	lr

000203d8 <CNetSubSystem::GetTransportLayer()>:
   203d8:	e28000d8 	add	r0, r0, #216	@ 0xd8
   203dc:	e12fff1e 	bx	lr

000203e0 <CNetSubSystem::IsRunning() const>:
   203e0:	e92d4010 	push	{r4, lr}
   203e4:	e1a04000 	mov	r4, r0
   203e8:	e280003c 	add	r0, r0, #60	@ 0x3c
   203ec:	eb000bc1 	bl	232f8 <CNetDeviceLayer::IsRunning() const>
   203f0:	e3500000 	cmp	r0, #0
   203f4:	08bd8010 	popeq	{r4, pc}
   203f8:	e5d43124 	ldrb	r3, [r4, #292]	@ 0x124
   203fc:	e3530000 	cmp	r3, #0
   20400:	08bd8010 	popeq	{r4, pc}
   20404:	e5940128 	ldr	r0, [r4, #296]	@ 0x128
   20408:	e3500000 	cmp	r0, #0
   2040c:	08bd8010 	popeq	{r4, pc}
   20410:	e8bd4010 	pop	{r4, lr}
   20414:	ea00232f 	b	290d8 <CDHCPClient::IsBound() const>

00020418 <CNetSubSystem::Get()>:
   20418:	e3043138 	movw	r3, #16696	@ 0x4138
   2041c:	e3403004 	movt	r3, #4
   20420:	e5930000 	ldr	r0, [r3]
   20424:	e3500000 	cmp	r0, #0
   20428:	112fff1e 	bxne	lr
   2042c:	e30c1b7c 	movw	r1, #52092	@ 0xcb7c
   20430:	e3401003 	movt	r1, #3
   20434:	e30b051c 	movw	r0, #46364	@ 0xb51c
   20438:	e3400003 	movt	r0, #3
   2043c:	e3a020b4 	mov	r2, #180	@ 0xb4
   20440:	e92d4010 	push	{r4, lr}
   20444:	eb002e64 	bl	2bddc <assertion_failed>

00020448 <CNetSubSystem::~CNetSubSystem()>:
   20448:	e3043138 	movw	r3, #16696	@ 0x4138
   2044c:	e3403004 	movt	r3, #4
   20450:	e92d4010 	push	{r4, lr}
   20454:	e1a04000 	mov	r4, r0
   20458:	e28000d8 	add	r0, r0, #216	@ 0xd8
   2045c:	e3a02000 	mov	r2, #0
   20460:	e5832000 	str	r2, [r3]
   20464:	eb0005c3 	bl	21b78 <CTransportLayer::~CTransportLayer()>
   20468:	e2840098 	add	r0, r4, #152	@ 0x98
   2046c:	eb0006cb 	bl	21fa0 <CNetworkLayer::~CNetworkLayer()>
   20470:	e2840060 	add	r0, r4, #96	@ 0x60
   20474:	eb000905 	bl	22890 <CLinkLayer::~CLinkLayer()>
   20478:	e284003c 	add	r0, r4, #60	@ 0x3c
   2047c:	eb000ac9 	bl	22fa8 <CNetDeviceLayer::~CNetDeviceLayer()>
   20480:	e2840010 	add	r0, r4, #16
   20484:	eb001f56 	bl	281e4 <CNetConfig::~CNetConfig()>
   20488:	e1a00004 	mov	r0, r4
   2048c:	eb004939 	bl	32978 <CString::~CString()>
   20490:	e1a00004 	mov	r0, r4
   20494:	e8bd8010 	pop	{r4, pc}

00020498 <CNetTask::~CNetTask()>:
   20498:	e59f201c 	ldr	r2, [pc, #28]	@ 204bc <CNetTask::~CNetTask()+0x24>
   2049c:	e3a03000 	mov	r3, #0
   204a0:	e92d4010 	push	{r4, lr}
   204a4:	e1a04000 	mov	r4, r0
   204a8:	e5802000 	str	r2, [r0]
   204ac:	e58030f4 	str	r3, [r0, #244]	@ 0xf4
   204b0:	eb002a88 	bl	2aed8 <CTask::~CTask()>
   204b4:	e1a00004 	mov	r0, r4
   204b8:	e8bd8010 	pop	{r4, pc}
   204bc:	00041d78 	.word	0x00041d78

000204c0 <CNetTask::~CNetTask()>:
   204c0:	e59f2028 	ldr	r2, [pc, #40]	@ 204f0 <CNetTask::~CNetTask()+0x30>
   204c4:	e3a03000 	mov	r3, #0
   204c8:	e92d4010 	push	{r4, lr}
   204cc:	e1a04000 	mov	r4, r0
   204d0:	e5802000 	str	r2, [r0]
   204d4:	e58030f4 	str	r3, [r0, #244]	@ 0xf4
   204d8:	eb002a7e 	bl	2aed8 <CTask::~CTask()>
   204dc:	e1a00004 	mov	r0, r4
   204e0:	e3a010f8 	mov	r1, #248	@ 0xf8
   204e4:	eb005726 	bl	36184 <operator delete(void*, unsigned int)>
   204e8:	e1a00004 	mov	r0, r4
   204ec:	e8bd8010 	pop	{r4, pc}
   204f0:	00041d78 	.word	0x00041d78

000204f4 <CNetTask::Run()>:
   204f4:	e92d4010 	push	{r4, lr}
   204f8:	e1a04000 	mov	r4, r0
   204fc:	e59000f4 	ldr	r0, [r0, #244]	@ 0xf4
   20500:	e3500000 	cmp	r0, #0
   20504:	0a000005 	beq	20520 <CNetTask::Run()+0x2c>
   20508:	ebffff85 	bl	20324 <CNetSubSystem::Process()>
   2050c:	eb002d0a 	bl	2b93c <CScheduler::Get()>
   20510:	eb002c0a 	bl	2b540 <CScheduler::Yield()>
   20514:	e59400f4 	ldr	r0, [r4, #244]	@ 0xf4
   20518:	e3500000 	cmp	r0, #0
   2051c:	1afffff9 	bne	20508 <CNetTask::Run()+0x14>
   20520:	e30c1bb4 	movw	r1, #52148	@ 0xcbb4
   20524:	e3401003 	movt	r1, #3
   20528:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   2052c:	e3400003 	movt	r0, #3
   20530:	e3a02027 	mov	r2, #39	@ 0x27
   20534:	eb002e28 	bl	2bddc <assertion_failed>

00020538 <CNetTask::CNetTask(CNetSubSystem*)>:
   20538:	e92d4070 	push	{r4, r5, r6, lr}
   2053c:	e1a04000 	mov	r4, r0
   20540:	e1a05001 	mov	r5, r1
   20544:	e3a02000 	mov	r2, #0
   20548:	e3a01902 	mov	r1, #32768	@ 0x8000
   2054c:	eb0029ac 	bl	2ac04 <CTask::CTask(unsigned int, bool)>
   20550:	e59f301c 	ldr	r3, [pc, #28]	@ 20574 <CNetTask::CNetTask(CNetSubSystem*)+0x3c>
   20554:	e1a00004 	mov	r0, r4
   20558:	e5843000 	str	r3, [r4]
   2055c:	e58450f4 	str	r5, [r4, #244]	@ 0xf4
   20560:	e30c1bd8 	movw	r1, #52184	@ 0xcbd8
   20564:	e3401003 	movt	r1, #3
   20568:	eb002a34 	bl	2ae40 <CTask::SetName(char const*)>
   2056c:	e1a00004 	mov	r0, r4
   20570:	e8bd8070 	pop	{r4, r5, r6, pc}
   20574:	00041d78 	.word	0x00041d78

00020578 <CSocket::~CSocket()>:
   20578:	e92d4070 	push	{r4, r5, r6, lr}
   2057c:	e1a04000 	mov	r4, r0
   20580:	e590000c 	ldr	r0, [r0, #12]
   20584:	e59f30ac 	ldr	r3, [pc, #172]	@ 20638 <CSocket::~CSocket()+0xc0>
   20588:	e3500000 	cmp	r0, #0
   2058c:	e5843000 	str	r3, [r4]
   20590:	0a000022 	beq	20620 <CSocket::~CSocket()+0xa8>
   20594:	e5941018 	ldr	r1, [r4, #24]
   20598:	e594301c 	ldr	r3, [r4, #28]
   2059c:	e3510000 	cmp	r1, #0
   205a0:	ba00000b 	blt	205d4 <CSocket::~CSocket()+0x5c>
   205a4:	e3530000 	cmp	r3, #0
   205a8:	1a000016 	bne	20608 <CSocket::~CSocket()+0x90>
   205ac:	eb000416 	bl	2160c <CTransportLayer::Disconnect(int)>
   205b0:	e3e03000 	mvn	r3, #0
   205b4:	e5843018 	str	r3, [r4, #24]
   205b8:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   205bc:	e2843008 	add	r3, r4, #8
   205c0:	e1a00004 	mov	r0, r4
   205c4:	f443078f 	vst1.32	{d16}, [r3]
   205c8:	eb0027f5 	bl	2a5a4 <CNetSocket::~CNetSocket()>
   205cc:	e1a00004 	mov	r0, r4
   205d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   205d4:	e3530000 	cmp	r3, #0
   205d8:	0afffff6 	beq	205b8 <CSocket::~CSocket()+0x40>
   205dc:	e284601c 	add	r6, r4, #28
   205e0:	e3a05000 	mov	r5, #0
   205e4:	ea000000 	b	205ec <CSocket::~CSocket()+0x74>
   205e8:	e594000c 	ldr	r0, [r4, #12]
   205ec:	e5b61004 	ldr	r1, [r6, #4]!
   205f0:	e2855001 	add	r5, r5, #1
   205f4:	eb000404 	bl	2160c <CTransportLayer::Disconnect(int)>
   205f8:	e594301c 	ldr	r3, [r4, #28]
   205fc:	e1530005 	cmp	r3, r5
   20600:	8afffff8 	bhi	205e8 <CSocket::~CSocket()+0x70>
   20604:	eaffffeb 	b	205b8 <CSocket::~CSocket()+0x40>
   20608:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   2060c:	e3401003 	movt	r1, #3
   20610:	e30c0c00 	movw	r0, #52224	@ 0xcc00
   20614:	e3400003 	movt	r0, #3
   20618:	e3a0203a 	mov	r2, #58	@ 0x3a
   2061c:	eb002dee 	bl	2bddc <assertion_failed>
   20620:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20624:	e3401003 	movt	r1, #3
   20628:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   2062c:	e3400003 	movt	r0, #3
   20630:	e3a02036 	mov	r2, #54	@ 0x36
   20634:	eb002de8 	bl	2bddc <assertion_failed>
   20638:	00041d8c 	.word	0x00041d8c

0002063c <CSocket::~CSocket()>:
   2063c:	e92d4010 	push	{r4, lr}
   20640:	e1a04000 	mov	r4, r0
   20644:	ebffffcb 	bl	20578 <CSocket::~CSocket()>
   20648:	e1a00004 	mov	r0, r4
   2064c:	e3a010a0 	mov	r1, #160	@ 0xa0
   20650:	eb0056cb 	bl	36184 <operator delete(void*, unsigned int)>
   20654:	e1a00004 	mov	r0, r4
   20658:	e8bd8010 	pop	{r4, pc}

0002065c <CSocket::Bind(unsigned short)>:
   2065c:	e2513000 	subs	r3, r1, #0
   20660:	0a000012 	beq	206b0 <CSocket::Bind(unsigned short)+0x54>
   20664:	e92d4010 	push	{r4, lr}
   20668:	e1a04000 	mov	r4, r0
   2066c:	e1d001b4 	ldrh	r0, [r0, #20]
   20670:	e3500000 	cmp	r0, #0
   20674:	1a00000b 	bne	206a8 <CSocket::Bind(unsigned short)+0x4c>
   20678:	e5942018 	ldr	r2, [r4, #24]
   2067c:	e3520000 	cmp	r2, #0
   20680:	aa000008 	bge	206a8 <CSocket::Bind(unsigned short)+0x4c>
   20684:	e5942010 	ldr	r2, [r4, #16]
   20688:	e1c431b4 	strh	r3, [r4, #20]
   2068c:	e3520011 	cmp	r2, #17
   20690:	18bd8010 	popne	{r4, pc}
   20694:	e594000c 	ldr	r0, [r4, #12]
   20698:	eb000243 	bl	20fac <CTransportLayer::Bind(unsigned short, int)>
   2069c:	e5840018 	str	r0, [r4, #24]
   206a0:	e0000fc0 	and	r0, r0, r0, asr #31
   206a4:	e8bd8010 	pop	{r4, pc}
   206a8:	e3e00000 	mvn	r0, #0
   206ac:	e8bd8010 	pop	{r4, pc}
   206b0:	e3e00000 	mvn	r0, #0
   206b4:	e12fff1e 	bx	lr

000206b8 <CSocket::Connect(CIPAddress&, unsigned short)>:
   206b8:	e92d4070 	push	{r4, r5, r6, lr}
   206bc:	e2525000 	subs	r5, r2, #0
   206c0:	e24dd008 	sub	sp, sp, #8
   206c4:	0a000026 	beq	20764 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   206c8:	e1a04000 	mov	r4, r0
   206cc:	e590000c 	ldr	r0, [r0, #12]
   206d0:	e3500000 	cmp	r0, #0
   206d4:	0a000024 	beq	2076c <CSocket::Connect(CIPAddress&, unsigned short)+0xb4>
   206d8:	e1a06001 	mov	r6, r1
   206dc:	e5941018 	ldr	r1, [r4, #24]
   206e0:	e3510000 	cmp	r1, #0
   206e4:	ba000005 	blt	20700 <CSocket::Connect(CIPAddress&, unsigned short)+0x48>
   206e8:	e5943010 	ldr	r3, [r4, #16]
   206ec:	e3530011 	cmp	r3, #17
   206f0:	1a00001b 	bne	20764 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   206f4:	eb0003c4 	bl	2160c <CTransportLayer::Disconnect(int)>
   206f8:	e3e03000 	mvn	r3, #0
   206fc:	e5843018 	str	r3, [r4, #24]
   20700:	e5940008 	ldr	r0, [r4, #8]
   20704:	e3500000 	cmp	r0, #0
   20708:	0a00001d 	beq	20784 <CSocket::Connect(CIPAddress&, unsigned short)+0xcc>
   2070c:	eb001f38 	bl	283f4 <CNetConfig::GetIPAddress() const>
   20710:	eb002055 	bl	2886c <CIPAddress::IsNull() const>
   20714:	e3500000 	cmp	r0, #0
   20718:	0a000006 	beq	20738 <CSocket::Connect(CIPAddress&, unsigned short)+0x80>
   2071c:	e5943010 	ldr	r3, [r4, #16]
   20720:	e3530011 	cmp	r3, #17
   20724:	1a00000e 	bne	20764 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   20728:	e1a00006 	mov	r0, r6
   2072c:	eb00205c 	bl	288a4 <CIPAddress::IsBroadcast() const>
   20730:	e3500000 	cmp	r0, #0
   20734:	0a00000a 	beq	20764 <CSocket::Connect(CIPAddress&, unsigned short)+0xac>
   20738:	e5940010 	ldr	r0, [r4, #16]
   2073c:	e1a02005 	mov	r2, r5
   20740:	e1d431b4 	ldrh	r3, [r4, #20]
   20744:	e1a01006 	mov	r1, r6
   20748:	e58d0000 	str	r0, [sp]
   2074c:	e594000c 	ldr	r0, [r4, #12]
   20750:	eb000272 	bl	21120 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>
   20754:	e5840018 	str	r0, [r4, #24]
   20758:	e0000fc0 	and	r0, r0, r0, asr #31
   2075c:	e28dd008 	add	sp, sp, #8
   20760:	e8bd8070 	pop	{r4, r5, r6, pc}
   20764:	e3e00000 	mvn	r0, #0
   20768:	eafffffb 	b	2075c <CSocket::Connect(CIPAddress&, unsigned short)+0xa4>
   2076c:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20770:	e3401003 	movt	r1, #3
   20774:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20778:	e3400003 	movt	r0, #3
   2077c:	e3a02070 	mov	r2, #112	@ 0x70
   20780:	eb002d95 	bl	2bddc <assertion_failed>
   20784:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20788:	e3401003 	movt	r1, #3
   2078c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   20790:	e3400003 	movt	r0, #3
   20794:	e3a0207d 	mov	r2, #125	@ 0x7d
   20798:	eb002d8f 	bl	2bddc <assertion_failed>

0002079c <CSocket::Listen(unsigned int)>:
   2079c:	e5902010 	ldr	r2, [r0, #16]
   207a0:	e3520006 	cmp	r2, #6
   207a4:	1a000035 	bne	20880 <CSocket::Listen(unsigned int)+0xe4>
   207a8:	e1a03001 	mov	r3, r1
   207ac:	e1d011b4 	ldrh	r1, [r0, #20]
   207b0:	e92d4070 	push	{r4, r5, r6, lr}
   207b4:	e1a04000 	mov	r4, r0
   207b8:	e3510000 	cmp	r1, #0
   207bc:	0a00002d 	beq	20878 <CSocket::Listen(unsigned int)+0xdc>
   207c0:	e5900018 	ldr	r0, [r0, #24]
   207c4:	e3500000 	cmp	r0, #0
   207c8:	aa00002a 	bge	20878 <CSocket::Listen(unsigned int)+0xdc>
   207cc:	e2430001 	sub	r0, r3, #1
   207d0:	e350001f 	cmp	r0, #31
   207d4:	8a000027 	bhi	20878 <CSocket::Listen(unsigned int)+0xdc>
   207d8:	e594501c 	ldr	r5, [r4, #28]
   207dc:	e3550000 	cmp	r5, #0
   207e0:	1a000018 	bne	20848 <CSocket::Listen(unsigned int)+0xac>
   207e4:	e594000c 	ldr	r0, [r4, #12]
   207e8:	e584301c 	str	r3, [r4, #28]
   207ec:	e3500000 	cmp	r0, #0
   207f0:	0a00001a 	beq	20860 <CSocket::Listen(unsigned int)+0xc4>
   207f4:	e284601c 	add	r6, r4, #28
   207f8:	ea000006 	b	20818 <CSocket::Listen(unsigned int)+0x7c>
   207fc:	e594301c 	ldr	r3, [r4, #28]
   20800:	e2855001 	add	r5, r5, #1
   20804:	e1530005 	cmp	r3, r5
   20808:	9a00000c 	bls	20840 <CSocket::Listen(unsigned int)+0xa4>
   2080c:	e594000c 	ldr	r0, [r4, #12]
   20810:	e1d411b4 	ldrh	r1, [r4, #20]
   20814:	e5942010 	ldr	r2, [r4, #16]
   20818:	eb0002e8 	bl	213c0 <CTransportLayer::Listen(unsigned short, int)>
   2081c:	e3500000 	cmp	r0, #0
   20820:	e5a60004 	str	r0, [r6, #4]!
   20824:	aafffff4 	bge	207fc <CSocket::Listen(unsigned int)+0x60>
   20828:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   2082c:	e3401003 	movt	r1, #3
   20830:	e30c0c24 	movw	r0, #52260	@ 0xcc24
   20834:	e3400003 	movt	r0, #3
   20838:	e3a020a5 	mov	r2, #165	@ 0xa5
   2083c:	eb002d66 	bl	2bddc <assertion_failed>
   20840:	e3a00000 	mov	r0, #0
   20844:	e8bd8070 	pop	{r4, r5, r6, pc}
   20848:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   2084c:	e3401003 	movt	r1, #3
   20850:	e30c0c00 	movw	r0, #52224	@ 0xcc00
   20854:	e3400003 	movt	r0, #3
   20858:	e3a0209d 	mov	r2, #157	@ 0x9d
   2085c:	eb002d5e 	bl	2bddc <assertion_failed>
   20860:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20864:	e3401003 	movt	r1, #3
   20868:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   2086c:	e3400003 	movt	r0, #3
   20870:	e3a020a0 	mov	r2, #160	@ 0xa0
   20874:	eb002d58 	bl	2bddc <assertion_failed>
   20878:	e3e00000 	mvn	r0, #0
   2087c:	e8bd8070 	pop	{r4, r5, r6, pc}
   20880:	e3e00000 	mvn	r0, #0
   20884:	e12fff1e 	bx	lr

00020888 <CSocket::Send(void const*, unsigned int, int)>:
   20888:	e92d4010 	push	{r4, lr}
   2088c:	e16fcf12 	clz	ip, r2
   20890:	e5904018 	ldr	r4, [r0, #24]
   20894:	e1a0c2ac 	lsr	ip, ip, #5
   20898:	e24dd008 	sub	sp, sp, #8
   2089c:	e19ccfa4 	orrs	ip, ip, r4, lsr #31
   208a0:	1a000014 	bne	208f8 <CSocket::Send(void const*, unsigned int, int)+0x70>
   208a4:	e590000c 	ldr	r0, [r0, #12]
   208a8:	e3500000 	cmp	r0, #0
   208ac:	0a000005 	beq	208c8 <CSocket::Send(void const*, unsigned int, int)+0x40>
   208b0:	e3510000 	cmp	r1, #0
   208b4:	0a000009 	beq	208e0 <CSocket::Send(void const*, unsigned int, int)+0x58>
   208b8:	e58d4000 	str	r4, [sp]
   208bc:	eb000374 	bl	21694 <CTransportLayer::Send(void const*, unsigned int, int, int)>
   208c0:	e28dd008 	add	sp, sp, #8
   208c4:	e8bd8010 	pop	{r4, pc}
   208c8:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   208cc:	e3401003 	movt	r1, #3
   208d0:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   208d4:	e3400003 	movt	r0, #3
   208d8:	e3a020ed 	mov	r2, #237	@ 0xed
   208dc:	eb002d3e 	bl	2bddc <assertion_failed>
   208e0:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   208e4:	e3401003 	movt	r1, #3
   208e8:	e30b0400 	movw	r0, #46080	@ 0xb400
   208ec:	e3400003 	movt	r0, #3
   208f0:	e3a020ee 	mov	r2, #238	@ 0xee
   208f4:	eb002d38 	bl	2bddc <assertion_failed>
   208f8:	e3e00000 	mvn	r0, #0
   208fc:	eaffffef 	b	208c0 <CSocket::Send(void const*, unsigned int, int)+0x38>

00020900 <CSocket::Receive(void*, unsigned int, int)>:
   20900:	e92d4070 	push	{r4, r5, r6, lr}
   20904:	e16fcf12 	clz	ip, r2
   20908:	e1a05001 	mov	r5, r1
   2090c:	e1a01003 	mov	r1, r3
   20910:	e5903018 	ldr	r3, [r0, #24]
   20914:	e1a0c2ac 	lsr	ip, ip, #5
   20918:	e24ddd19 	sub	sp, sp, #1600	@ 0x640
   2091c:	e19ccfa3 	orrs	ip, ip, r3, lsr #31
   20920:	1a00001f 	bne	209a4 <CSocket::Receive(void*, unsigned int, int)+0xa4>
   20924:	e590000c 	ldr	r0, [r0, #12]
   20928:	e3500000 	cmp	r0, #0
   2092c:	0a000010 	beq	20974 <CSocket::Receive(void*, unsigned int, int)+0x74>
   20930:	e1a06002 	mov	r6, r2
   20934:	e1a02001 	mov	r2, r1
   20938:	e1a0100d 	mov	r1, sp
   2093c:	eb00038e 	bl	2177c <CTransportLayer::Receive(void*, int, int)>
   20940:	e2504000 	subs	r4, r0, #0
   20944:	ba000007 	blt	20968 <CSocket::Receive(void*, unsigned int, int)+0x68>
   20948:	e1540006 	cmp	r4, r6
   2094c:	21a04006 	movcs	r4, r6
   20950:	e3550000 	cmp	r5, #0
   20954:	0a00000c 	beq	2098c <CSocket::Receive(void*, unsigned int, int)+0x8c>
   20958:	e1a02004 	mov	r2, r4
   2095c:	e1a0100d 	mov	r1, sp
   20960:	e1a00005 	mov	r0, r5
   20964:	eb0053e6 	bl	35904 <memcpy>
   20968:	e1a00004 	mov	r0, r4
   2096c:	e28ddd19 	add	sp, sp, #1600	@ 0x640
   20970:	e8bd8070 	pop	{r4, r5, r6, pc}
   20974:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20978:	e3401003 	movt	r1, #3
   2097c:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20980:	e3400003 	movt	r0, #3
   20984:	e3a020fe 	mov	r2, #254	@ 0xfe
   20988:	eb002d13 	bl	2bddc <assertion_failed>
   2098c:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20990:	e3401003 	movt	r1, #3
   20994:	e30b0400 	movw	r0, #46080	@ 0xb400
   20998:	e3400003 	movt	r0, #3
   2099c:	e300210b 	movw	r2, #267	@ 0x10b
   209a0:	eb002d0d 	bl	2bddc <assertion_failed>
   209a4:	e3e04000 	mvn	r4, #0
   209a8:	eaffffee 	b	20968 <CSocket::Receive(void*, unsigned int, int)+0x68>

000209ac <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   209ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   209b0:	e1a04000 	mov	r4, r0
   209b4:	e1a06003 	mov	r6, r3
   209b8:	e24dd010 	sub	sp, sp, #16
   209bc:	e5903018 	ldr	r3, [r0, #24]
   209c0:	e16f0f12 	clz	r0, r2
   209c4:	e1a002a0 	lsr	r0, r0, #5
   209c8:	e1dd82bc 	ldrh	r8, [sp, #44]	@ 0x2c
   209cc:	e1900fa3 	orrs	r0, r0, r3, lsr #31
   209d0:	1a00002d 	bne	20a8c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   209d4:	e5940008 	ldr	r0, [r4, #8]
   209d8:	e3500000 	cmp	r0, #0
   209dc:	0a000018 	beq	20a44 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x98>
   209e0:	e1a05001 	mov	r5, r1
   209e4:	e1a07002 	mov	r7, r2
   209e8:	eb001e81 	bl	283f4 <CNetConfig::GetIPAddress() const>
   209ec:	eb001f9e 	bl	2886c <CIPAddress::IsNull() const>
   209f0:	e3580000 	cmp	r8, #0
   209f4:	03800001 	orreq	r0, r0, #1
   209f8:	e6ef0070 	uxtb	r0, r0
   209fc:	e3500000 	cmp	r0, #0
   20a00:	1a000021 	bne	20a8c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xe0>
   20a04:	e594000c 	ldr	r0, [r4, #12]
   20a08:	e3500000 	cmp	r0, #0
   20a0c:	0a000012 	beq	20a5c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xb0>
   20a10:	e3550000 	cmp	r5, #0
   20a14:	0a000016 	beq	20a74 <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0xc8>
   20a18:	e58d8004 	str	r8, [sp, #4]
   20a1c:	e1a02007 	mov	r2, r7
   20a20:	e59dc028 	ldr	ip, [sp, #40]	@ 0x28
   20a24:	e1a01005 	mov	r1, r5
   20a28:	e5943018 	ldr	r3, [r4, #24]
   20a2c:	e58d3008 	str	r3, [sp, #8]
   20a30:	e1a03006 	mov	r3, r6
   20a34:	e58dc000 	str	ip, [sp]
   20a38:	eb00037e 	bl	21838 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>
   20a3c:	e28dd010 	add	sp, sp, #16
   20a40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   20a44:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20a48:	e3401003 	movt	r1, #3
   20a4c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   20a50:	e3400003 	movt	r0, #3
   20a54:	e300211e 	movw	r2, #286	@ 0x11e
   20a58:	eb002cdf 	bl	2bddc <assertion_failed>
   20a5c:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20a60:	e3401003 	movt	r1, #3
   20a64:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20a68:	e3400003 	movt	r0, #3
   20a6c:	e3002129 	movw	r2, #297	@ 0x129
   20a70:	eb002cd9 	bl	2bddc <assertion_failed>
   20a74:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20a78:	e3401003 	movt	r1, #3
   20a7c:	e30b0400 	movw	r0, #46080	@ 0xb400
   20a80:	e3400003 	movt	r0, #3
   20a84:	e300212a 	movw	r2, #298	@ 0x12a
   20a88:	eb002cd3 	bl	2bddc <assertion_failed>
   20a8c:	e3e00000 	mvn	r0, #0
   20a90:	eaffffe9 	b	20a3c <CSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x90>

00020a94 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   20a94:	e92d4070 	push	{r4, r5, r6, lr}
   20a98:	e16fcf12 	clz	ip, r2
   20a9c:	e590e018 	ldr	lr, [r0, #24]
   20aa0:	e24ddd19 	sub	sp, sp, #1600	@ 0x640
   20aa4:	e1a0c2ac 	lsr	ip, ip, #5
   20aa8:	e24dd008 	sub	sp, sp, #8
   20aac:	e19ccfae 	orrs	ip, ip, lr, lsr #31
   20ab0:	1a000026 	bne	20b50 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xbc>
   20ab4:	e590000c 	ldr	r0, [r0, #12]
   20ab8:	e3500000 	cmp	r0, #0
   20abc:	0a000017 	beq	20b20 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x8c>
   20ac0:	e1a05001 	mov	r5, r1
   20ac4:	e1a01003 	mov	r1, r3
   20ac8:	e1a06002 	mov	r6, r2
   20acc:	e1a02001 	mov	r2, r1
   20ad0:	e59d165c 	ldr	r1, [sp, #1628]	@ 0x65c
   20ad4:	e58d1000 	str	r1, [sp]
   20ad8:	e28d1008 	add	r1, sp, #8
   20adc:	e59d3658 	ldr	r3, [sp, #1624]	@ 0x658
   20ae0:	e58de004 	str	lr, [sp, #4]
   20ae4:	eb000391 	bl	21930 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>
   20ae8:	e2504000 	subs	r4, r0, #0
   20aec:	ba000007 	blt	20b10 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>
   20af0:	e1540006 	cmp	r4, r6
   20af4:	21a04006 	movcs	r4, r6
   20af8:	e3550000 	cmp	r5, #0
   20afc:	0a00000d 	beq	20b38 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0xa4>
   20b00:	e1a02004 	mov	r2, r4
   20b04:	e28d1008 	add	r1, sp, #8
   20b08:	e1a00005 	mov	r0, r5
   20b0c:	eb00537c 	bl	35904 <memcpy>
   20b10:	e1a00004 	mov	r0, r4
   20b14:	e28ddd19 	add	sp, sp, #1600	@ 0x640
   20b18:	e28dd008 	add	sp, sp, #8
   20b1c:	e8bd8070 	pop	{r4, r5, r6, pc}
   20b20:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20b24:	e3401003 	movt	r1, #3
   20b28:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20b2c:	e3400003 	movt	r0, #3
   20b30:	e300213b 	movw	r2, #315	@ 0x13b
   20b34:	eb002ca8 	bl	2bddc <assertion_failed>
   20b38:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20b3c:	e3401003 	movt	r1, #3
   20b40:	e30b0400 	movw	r0, #46080	@ 0xb400
   20b44:	e3400003 	movt	r0, #3
   20b48:	e3002149 	movw	r2, #329	@ 0x149
   20b4c:	eb002ca2 	bl	2bddc <assertion_failed>
   20b50:	e3e04000 	mvn	r4, #0
   20b54:	eaffffed 	b	20b10 <CSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)+0x7c>

00020b58 <CSocket::SetOptionBroadcast(bool)>:
   20b58:	e5902018 	ldr	r2, [r0, #24]
   20b5c:	e3520000 	cmp	r2, #0
   20b60:	ba00000f 	blt	20ba4 <CSocket::SetOptionBroadcast(bool)+0x4c>
   20b64:	e5903010 	ldr	r3, [r0, #16]
   20b68:	e3530011 	cmp	r3, #17
   20b6c:	1a000003 	bne	20b80 <CSocket::SetOptionBroadcast(bool)+0x28>
   20b70:	e590000c 	ldr	r0, [r0, #12]
   20b74:	e3500000 	cmp	r0, #0
   20b78:	0a000002 	beq	20b88 <CSocket::SetOptionBroadcast(bool)+0x30>
   20b7c:	ea00039f 	b	21a00 <CTransportLayer::SetOptionBroadcast(bool, int)>
   20b80:	e3a00000 	mov	r0, #0
   20b84:	e12fff1e 	bx	lr
   20b88:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20b8c:	e3401003 	movt	r1, #3
   20b90:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20b94:	e3400003 	movt	r0, #3
   20b98:	e92d4010 	push	{r4, lr}
   20b9c:	e300215b 	movw	r2, #347	@ 0x15b
   20ba0:	eb002c8d 	bl	2bddc <assertion_failed>
   20ba4:	e3e00000 	mvn	r0, #0
   20ba8:	e12fff1e 	bx	lr

00020bac <CSocket::GetForeignIP() const>:
   20bac:	e5901018 	ldr	r1, [r0, #24]
   20bb0:	e3510000 	cmp	r1, #0
   20bb4:	ba000003 	blt	20bc8 <CSocket::GetForeignIP() const+0x1c>
   20bb8:	e590000c 	ldr	r0, [r0, #12]
   20bbc:	e3500000 	cmp	r0, #0
   20bc0:	0a000002 	beq	20bd0 <CSocket::GetForeignIP() const+0x24>
   20bc4:	ea0003d1 	b	21b10 <CTransportLayer::GetForeignIP(int) const>
   20bc8:	e3a00000 	mov	r0, #0
   20bcc:	e12fff1e 	bx	lr
   20bd0:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20bd4:	e3401003 	movt	r1, #3
   20bd8:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20bdc:	e3400003 	movt	r0, #3
   20be0:	e92d4010 	push	{r4, lr}
   20be4:	e3002166 	movw	r2, #358	@ 0x166
   20be8:	eb002c7b 	bl	2bddc <assertion_failed>

00020bec <CSocket::CSocket(CNetSubSystem*, int)>:
   20bec:	e92d4070 	push	{r4, r5, r6, lr}
   20bf0:	e1a04000 	mov	r4, r0
   20bf4:	e1a05001 	mov	r5, r1
   20bf8:	e1a06002 	mov	r6, r2
   20bfc:	eb00265b 	bl	2a570 <CNetSocket::CNetSocket(CNetSubSystem*)>
   20c00:	e59f3080 	ldr	r3, [pc, #128]	@ 20c88 <CSocket::CSocket(CNetSubSystem*, int)+0x9c>
   20c04:	e1a00005 	mov	r0, r5
   20c08:	e5843000 	str	r3, [r4]
   20c0c:	ebfffdeb 	bl	203c0 <CNetSubSystem::GetConfig()>
   20c10:	e1a03000 	mov	r3, r0
   20c14:	e1a00005 	mov	r0, r5
   20c18:	e5843008 	str	r3, [r4, #8]
   20c1c:	ebfffded 	bl	203d8 <CNetSubSystem::GetTransportLayer()>
   20c20:	e5942008 	ldr	r2, [r4, #8]
   20c24:	e3a03000 	mov	r3, #0
   20c28:	e5846010 	str	r6, [r4, #16]
   20c2c:	e1520003 	cmp	r2, r3
   20c30:	e1c431b4 	strh	r3, [r4, #20]
   20c34:	e584301c 	str	r3, [r4, #28]
   20c38:	e3e03000 	mvn	r3, #0
   20c3c:	e584000c 	str	r0, [r4, #12]
   20c40:	e5843018 	str	r3, [r4, #24]
   20c44:	0a000003 	beq	20c58 <CSocket::CSocket(CNetSubSystem*, int)+0x6c>
   20c48:	e3500000 	cmp	r0, #0
   20c4c:	0a000007 	beq	20c70 <CSocket::CSocket(CNetSubSystem*, int)+0x84>
   20c50:	e1a00004 	mov	r0, r4
   20c54:	e8bd8070 	pop	{r4, r5, r6, pc}
   20c58:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20c5c:	e3401003 	movt	r1, #3
   20c60:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   20c64:	e3400003 	movt	r0, #3
   20c68:	e3a02023 	mov	r2, #35	@ 0x23
   20c6c:	eb002c5a 	bl	2bddc <assertion_failed>
   20c70:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20c74:	e3401003 	movt	r1, #3
   20c78:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20c7c:	e3400003 	movt	r0, #3
   20c80:	e3a02024 	mov	r2, #36	@ 0x24
   20c84:	eb002c54 	bl	2bddc <assertion_failed>
   20c88:	00041d8c 	.word	0x00041d8c

00020c8c <CSocket::CSocket(CSocket&, int)>:
   20c8c:	e92d4070 	push	{r4, r5, r6, lr}
   20c90:	e1a04000 	mov	r4, r0
   20c94:	e1a00001 	mov	r0, r1
   20c98:	e1a05001 	mov	r5, r1
   20c9c:	e1a06002 	mov	r6, r2
   20ca0:	eb002646 	bl	2a5c0 <CNetSocket::GetNetSubSystem()>
   20ca4:	e1a01000 	mov	r1, r0
   20ca8:	e1a00004 	mov	r0, r4
   20cac:	eb00262f 	bl	2a570 <CNetSocket::CNetSocket(CNetSubSystem*)>
   20cb0:	e2852008 	add	r2, r5, #8
   20cb4:	e1a03004 	mov	r3, r4
   20cb8:	e59f1074 	ldr	r1, [pc, #116]	@ 20d34 <CSocket::CSocket(CSocket&, int)+0xa8>
   20cbc:	f422778f 	vld1.32	{d7}, [r2]
   20cc0:	e4831008 	str	r1, [r3], #8
   20cc4:	e3a01000 	mov	r1, #0
   20cc8:	e5952010 	ldr	r2, [r5, #16]
   20ccc:	ee170a10 	vmov	r0, s14
   20cd0:	f403778f 	vst1.32	{d7}, [r3]
   20cd4:	e1d531b4 	ldrh	r3, [r5, #20]
   20cd8:	e584101c 	str	r1, [r4, #28]
   20cdc:	e5842010 	str	r2, [r4, #16]
   20ce0:	e1500001 	cmp	r0, r1
   20ce4:	e1c431b4 	strh	r3, [r4, #20]
   20ce8:	ee371b10 	vmov.32	r1, d7[1]
   20cec:	e5846018 	str	r6, [r4, #24]
   20cf0:	0a000003 	beq	20d04 <CSocket::CSocket(CSocket&, int)+0x78>
   20cf4:	e3510000 	cmp	r1, #0
   20cf8:	0a000007 	beq	20d1c <CSocket::CSocket(CSocket&, int)+0x90>
   20cfc:	e1a00004 	mov	r0, r4
   20d00:	e8bd8070 	pop	{r4, r5, r6, pc}
   20d04:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20d08:	e3401003 	movt	r1, #3
   20d0c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   20d10:	e3400003 	movt	r0, #3
   20d14:	e3a02030 	mov	r2, #48	@ 0x30
   20d18:	eb002c2f 	bl	2bddc <assertion_failed>
   20d1c:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20d20:	e3401003 	movt	r1, #3
   20d24:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20d28:	e3400003 	movt	r0, #3
   20d2c:	e3a02031 	mov	r2, #49	@ 0x31
   20d30:	eb002c29 	bl	2bddc <assertion_failed>
   20d34:	00041d8c 	.word	0x00041d8c

00020d38 <CSocket::Accept(CIPAddress*, unsigned short*)>:
   20d38:	e590301c 	ldr	r3, [r0, #28]
   20d3c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20d40:	e3530000 	cmp	r3, #0
   20d44:	0a000046 	beq	20e64 <CSocket::Accept(CIPAddress*, unsigned short*)+0x12c>
   20d48:	e1a0a002 	mov	sl, r2
   20d4c:	e1d021b4 	ldrh	r2, [r0, #20]
   20d50:	e1a05000 	mov	r5, r0
   20d54:	e3520000 	cmp	r2, #0
   20d58:	0a000044 	beq	20e70 <CSocket::Accept(CIPAddress*, unsigned short*)+0x138>
   20d5c:	e590000c 	ldr	r0, [r0, #12]
   20d60:	e3500000 	cmp	r0, #0
   20d64:	0a000044 	beq	20e7c <CSocket::Accept(CIPAddress*, unsigned short*)+0x144>
   20d68:	e3530020 	cmp	r3, #32
   20d6c:	8a000048 	bhi	20e94 <CSocket::Accept(CIPAddress*, unsigned short*)+0x15c>
   20d70:	e1a09001 	mov	r9, r1
   20d74:	e285701c 	add	r7, r5, #28
   20d78:	e3a04000 	mov	r4, #0
   20d7c:	e3a08020 	mov	r8, #32
   20d80:	e3e06102 	mvn	r6, #-2147483648	@ 0x80000000
   20d84:	ea000008 	b	20dac <CSocket::Accept(CIPAddress*, unsigned short*)+0x74>
   20d88:	e5973000 	ldr	r3, [r7]
   20d8c:	e595201c 	ldr	r2, [r5, #28]
   20d90:	e1560003 	cmp	r6, r3
   20d94:	c1a08004 	movgt	r8, r4
   20d98:	e2844001 	add	r4, r4, #1
   20d9c:	c1a06003 	movgt	r6, r3
   20da0:	e1520004 	cmp	r2, r4
   20da4:	9a000007 	bls	20dc8 <CSocket::Accept(CIPAddress*, unsigned short*)+0x90>
   20da8:	e595000c 	ldr	r0, [r5, #12]
   20dac:	e5b71004 	ldr	r1, [r7, #4]!
   20db0:	eb000336 	bl	21a90 <CTransportLayer::IsConnected(int) const>
   20db4:	e3500000 	cmp	r0, #0
   20db8:	0afffff2 	beq	20d88 <CSocket::Accept(CIPAddress*, unsigned short*)+0x50>
   20dbc:	e2843008 	add	r3, r4, #8
   20dc0:	e1a08004 	mov	r8, r4
   20dc4:	e7956103 	ldr	r6, [r5, r3, lsl #2]
   20dc8:	e376010a 	cmn	r6, #-2147483646	@ 0x80000002
   20dcc:	8a00001e 	bhi	20e4c <CSocket::Accept(CIPAddress*, unsigned short*)+0x114>
   20dd0:	e595301c 	ldr	r3, [r5, #28]
   20dd4:	e1530008 	cmp	r3, r8
   20dd8:	9a000033 	bls	20eac <CSocket::Accept(CIPAddress*, unsigned short*)+0x174>
   20ddc:	e3590000 	cmp	r9, #0
   20de0:	0a000037 	beq	20ec4 <CSocket::Accept(CIPAddress*, unsigned short*)+0x18c>
   20de4:	e35a0000 	cmp	sl, #0
   20de8:	0a00003b 	beq	20edc <CSocket::Accept(CIPAddress*, unsigned short*)+0x1a4>
   20dec:	e595000c 	ldr	r0, [r5, #12]
   20df0:	e1a0200a 	mov	r2, sl
   20df4:	e1a01009 	mov	r1, r9
   20df8:	e1a03006 	mov	r3, r6
   20dfc:	eb0001cb 	bl	21530 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>
   20e00:	e3500000 	cmp	r0, #0
   20e04:	b3a04000 	movlt	r4, #0
   20e08:	ba000005 	blt	20e24 <CSocket::Accept(CIPAddress*, unsigned short*)+0xec>
   20e0c:	e3a000a0 	mov	r0, #160	@ 0xa0
   20e10:	eb0054c3 	bl	36124 <operator new(unsigned int)>
   20e14:	e1a02006 	mov	r2, r6
   20e18:	e1a01005 	mov	r1, r5
   20e1c:	e1a04000 	mov	r4, r0
   20e20:	ebffff99 	bl	20c8c <CSocket::CSocket(CSocket&, int)>
   20e24:	e2888008 	add	r8, r8, #8
   20e28:	e5952010 	ldr	r2, [r5, #16]
   20e2c:	e1d511b4 	ldrh	r1, [r5, #20]
   20e30:	e595000c 	ldr	r0, [r5, #12]
   20e34:	eb000161 	bl	213c0 <CTransportLayer::Listen(unsigned short, int)>
   20e38:	e3500000 	cmp	r0, #0
   20e3c:	e7850108 	str	r0, [r5, r8, lsl #2]
   20e40:	ba00002b 	blt	20ef4 <CSocket::Accept(CIPAddress*, unsigned short*)+0x1bc>
   20e44:	e1a00004 	mov	r0, r4
   20e48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20e4c:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20e50:	e3401003 	movt	r1, #3
   20e54:	e30c0c68 	movw	r0, #52328	@ 0xcc68
   20e58:	e3400003 	movt	r0, #3
   20e5c:	e3a020cb 	mov	r2, #203	@ 0xcb
   20e60:	eb002bdd 	bl	2bddc <assertion_failed>
   20e64:	e1a04003 	mov	r4, r3
   20e68:	e1a00004 	mov	r0, r4
   20e6c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20e70:	e1a04002 	mov	r4, r2
   20e74:	e1a00004 	mov	r0, r4
   20e78:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20e7c:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20e80:	e3401003 	movt	r1, #3
   20e84:	e30c0be8 	movw	r0, #52200	@ 0xcbe8
   20e88:	e3400003 	movt	r0, #3
   20e8c:	e3a020b3 	mov	r2, #179	@ 0xb3
   20e90:	eb002bd1 	bl	2bddc <assertion_failed>
   20e94:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20e98:	e3401003 	movt	r1, #3
   20e9c:	e30c0c40 	movw	r0, #52288	@ 0xcc40
   20ea0:	e3400003 	movt	r0, #3
   20ea4:	e3a020b4 	mov	r2, #180	@ 0xb4
   20ea8:	eb002bcb 	bl	2bddc <assertion_failed>
   20eac:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20eb0:	e3401003 	movt	r1, #3
   20eb4:	e30c0c94 	movw	r0, #52372	@ 0xcc94
   20eb8:	e3400003 	movt	r0, #3
   20ebc:	e3a020cc 	mov	r2, #204	@ 0xcc
   20ec0:	eb002bc5 	bl	2bddc <assertion_failed>
   20ec4:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20ec8:	e3401003 	movt	r1, #3
   20ecc:	e30c0ca8 	movw	r0, #52392	@ 0xcca8
   20ed0:	e3400003 	movt	r0, #3
   20ed4:	e3a020d0 	mov	r2, #208	@ 0xd0
   20ed8:	eb002bbf 	bl	2bddc <assertion_failed>
   20edc:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20ee0:	e3401003 	movt	r1, #3
   20ee4:	e30c0cb8 	movw	r0, #52408	@ 0xccb8
   20ee8:	e3400003 	movt	r0, #3
   20eec:	e3a020d1 	mov	r2, #209	@ 0xd1
   20ef0:	eb002bb9 	bl	2bddc <assertion_failed>
   20ef4:	e30c1bdc 	movw	r1, #52188	@ 0xcbdc
   20ef8:	e3401003 	movt	r1, #3
   20efc:	e30c0ccc 	movw	r0, #52428	@ 0xcccc
   20f00:	e3400003 	movt	r0, #3
   20f04:	e3a020dc 	mov	r2, #220	@ 0xdc
   20f08:	eb002bb3 	bl	2bddc <assertion_failed>

00020f0c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)>:
   20f0c:	e92d4070 	push	{r4, r5, r6, lr}
   20f10:	e1a04000 	mov	r4, r0
   20f14:	e1a06002 	mov	r6, r2
   20f18:	e3a02064 	mov	r2, #100	@ 0x64
   20f1c:	e1a05001 	mov	r5, r1
   20f20:	e1a01002 	mov	r1, r2
   20f24:	e8800060 	stm	r0, {r5, r6}
   20f28:	e2800008 	add	r0, r0, #8
   20f2c:	eb003a40 	bl	2f834 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   20f30:	e3a0c000 	mov	ip, #0
   20f34:	e1a02006 	mov	r2, r6
   20f38:	e1a01005 	mov	r1, r5
   20f3c:	e2840020 	add	r0, r4, #32
   20f40:	e30e3a60 	movw	r3, #60000	@ 0xea60
   20f44:	e34f3fff 	movt	r3, #65535	@ 0xffff
   20f48:	e584c01c 	str	ip, [r4, #28]
   20f4c:	e1c431b8 	strh	r3, [r4, #24]
   20f50:	eb001bdf 	bl	27ed4 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>
   20f54:	e5943000 	ldr	r3, [r4]
   20f58:	e3530000 	cmp	r3, #0
   20f5c:	0a000004 	beq	20f74 <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x68>
   20f60:	e5943004 	ldr	r3, [r4, #4]
   20f64:	e3530000 	cmp	r3, #0
   20f68:	0a000007 	beq	20f8c <CTransportLayer::CTransportLayer(CNetConfig*, CNetworkLayer*)+0x80>
   20f6c:	e1a00004 	mov	r0, r4
   20f70:	e8bd8070 	pop	{r4, r5, r6, pc}
   20f74:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   20f78:	e3401003 	movt	r1, #3
   20f7c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   20f80:	e3400003 	movt	r0, #3
   20f84:	e3a02025 	mov	r2, #37	@ 0x25
   20f88:	eb002b93 	bl	2bddc <assertion_failed>
   20f8c:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   20f90:	e3401003 	movt	r1, #3
   20f94:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   20f98:	e3400003 	movt	r0, #3
   20f9c:	e3a02026 	mov	r2, #38	@ 0x26
   20fa0:	eb002b8d 	bl	2bddc <assertion_failed>

00020fa4 <CTransportLayer::Initialize()>:
   20fa4:	e3a00001 	mov	r0, #1
   20fa8:	e12fff1e 	bx	lr

00020fac <CTransportLayer::Bind(unsigned short, int)>:
   20fac:	e3520011 	cmp	r2, #17
   20fb0:	1a000058 	bne	21118 <CTransportLayer::Bind(unsigned short, int)+0x16c>
   20fb4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   20fb8:	e1a06000 	mov	r6, r0
   20fbc:	e590001c 	ldr	r0, [r0, #28]
   20fc0:	e1a07001 	mov	r7, r1
   20fc4:	e3500000 	cmp	r0, #0
   20fc8:	1a000037 	bne	210ac <CTransportLayer::Bind(unsigned short, int)+0x100>
   20fcc:	e3a04000 	mov	r4, #0
   20fd0:	e2865008 	add	r5, r6, #8
   20fd4:	ea000006 	b	20ff4 <CTransportLayer::Bind(unsigned short, int)+0x48>
   20fd8:	e1a01004 	mov	r1, r4
   20fdc:	e1a00005 	mov	r0, r5
   20fe0:	eb003a3d 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   20fe4:	e5902000 	ldr	r2, [r0]
   20fe8:	e3520000 	cmp	r2, #0
   20fec:	0a000004 	beq	21004 <CTransportLayer::Bind(unsigned short, int)+0x58>
   20ff0:	e2844001 	add	r4, r4, #1
   20ff4:	e1a00005 	mov	r0, r5
   20ff8:	eb003a35 	bl	2f8d4 <CPtrArray::GetCount() const>
   20ffc:	e1500004 	cmp	r0, r4
   21000:	8afffff4 	bhi	20fd8 <CTransportLayer::Bind(unsigned short, int)+0x2c>
   21004:	e1a00005 	mov	r0, r5
   21008:	eb003a31 	bl	2f8d4 <CPtrArray::GetCount() const>
   2100c:	e1500004 	cmp	r0, r4
   21010:	9a000020 	bls	21098 <CTransportLayer::Bind(unsigned short, int)+0xec>
   21014:	e3570000 	cmp	r7, #0
   21018:	0a000037 	beq	210fc <CTransportLayer::Bind(unsigned short, int)+0x150>
   2101c:	e5963000 	ldr	r3, [r6]
   21020:	e3530000 	cmp	r3, #0
   21024:	0a000022 	beq	210b4 <CTransportLayer::Bind(unsigned short, int)+0x108>
   21028:	e5963004 	ldr	r3, [r6, #4]
   2102c:	e3530000 	cmp	r3, #0
   21030:	0a000025 	beq	210cc <CTransportLayer::Bind(unsigned short, int)+0x120>
   21034:	e3a00048 	mov	r0, #72	@ 0x48
   21038:	eb005439 	bl	36124 <operator new(unsigned int)>
   2103c:	e1a03007 	mov	r3, r7
   21040:	e8960006 	ldm	r6, {r1, r2}
   21044:	e1a07000 	mov	r7, r0
   21048:	eb001136 	bl	25528 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   2104c:	e1a01004 	mov	r1, r4
   21050:	e1a00005 	mov	r0, r5
   21054:	eb003a20 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21058:	e1a03000 	mov	r3, r0
   2105c:	e1a01004 	mov	r1, r4
   21060:	e1a00005 	mov	r0, r5
   21064:	e5837000 	str	r7, [r3]
   21068:	eb003a1b 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   2106c:	e5903000 	ldr	r3, [r0]
   21070:	e3530000 	cmp	r3, #0
   21074:	0a00001a 	beq	210e4 <CTransportLayer::Bind(unsigned short, int)+0x138>
   21078:	e596301c 	ldr	r3, [r6, #28]
   2107c:	e3530000 	cmp	r3, #0
   21080:	1a000001 	bne	2108c <CTransportLayer::Bind(unsigned short, int)+0xe0>
   21084:	e1a00004 	mov	r0, r4
   21088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2108c:	eb005a66 	bl	37a2c <LeaveCritical>
   21090:	e1a00004 	mov	r0, r4
   21094:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21098:	e3a01000 	mov	r1, #0
   2109c:	e1a00005 	mov	r0, r5
   210a0:	eb003a49 	bl	2f9cc <CPtrArray::Append(void*)>
   210a4:	e1a04000 	mov	r4, r0
   210a8:	eaffffd9 	b	21014 <CTransportLayer::Bind(unsigned short, int)+0x68>
   210ac:	eb005a33 	bl	37980 <EnterCritical>
   210b0:	eaffffc5 	b	20fcc <CTransportLayer::Bind(unsigned short, int)+0x20>
   210b4:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   210b8:	e3401003 	movt	r1, #3
   210bc:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   210c0:	e3400003 	movt	r0, #3
   210c4:	e3a020ad 	mov	r2, #173	@ 0xad
   210c8:	eb002b43 	bl	2bddc <assertion_failed>
   210cc:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   210d0:	e3401003 	movt	r1, #3
   210d4:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   210d8:	e3400003 	movt	r0, #3
   210dc:	e3a020ae 	mov	r2, #174	@ 0xae
   210e0:	eb002b3d 	bl	2bddc <assertion_failed>
   210e4:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   210e8:	e3401003 	movt	r1, #3
   210ec:	e30c0d1c 	movw	r0, #52508	@ 0xcd1c
   210f0:	e3400003 	movt	r0, #3
   210f4:	e3a020b0 	mov	r2, #176	@ 0xb0
   210f8:	eb002b37 	bl	2bddc <assertion_failed>
   210fc:	e596301c 	ldr	r3, [r6, #28]
   21100:	e3530000 	cmp	r3, #0
   21104:	1a000001 	bne	21110 <CTransportLayer::Bind(unsigned short, int)+0x164>
   21108:	e3e00000 	mvn	r0, #0
   2110c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21110:	eb005a45 	bl	37a2c <LeaveCritical>
   21114:	eafffffb 	b	21108 <CTransportLayer::Bind(unsigned short, int)+0x15c>
   21118:	e3e00000 	mvn	r0, #0
   2111c:	e12fff1e 	bx	lr

00021120 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)>:
   21120:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21124:	e1a08000 	mov	r8, r0
   21128:	e590001c 	ldr	r0, [r0, #28]
   2112c:	e24dd014 	sub	sp, sp, #20
   21130:	e1a06003 	mov	r6, r3
   21134:	e3500000 	cmp	r0, #0
   21138:	e59d9038 	ldr	r9, [sp, #56]	@ 0x38
   2113c:	e58d1008 	str	r1, [sp, #8]
   21140:	e58d200c 	str	r2, [sp, #12]
   21144:	1a000071 	bne	21310 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f0>
   21148:	e3a07000 	mov	r7, #0
   2114c:	e2885008 	add	r5, r8, #8
   21150:	ea000006 	b	21170 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x50>
   21154:	e1a01007 	mov	r1, r7
   21158:	e1a00005 	mov	r0, r5
   2115c:	eb0039de 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21160:	e5903000 	ldr	r3, [r0]
   21164:	e3530000 	cmp	r3, #0
   21168:	0a000004 	beq	21180 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x60>
   2116c:	e2877001 	add	r7, r7, #1
   21170:	e1a00005 	mov	r0, r5
   21174:	eb0039d6 	bl	2f8d4 <CPtrArray::GetCount() const>
   21178:	e1500007 	cmp	r0, r7
   2117c:	8afffff4 	bhi	21154 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x34>
   21180:	e1a00005 	mov	r0, r5
   21184:	eb0039d2 	bl	2f8d4 <CPtrArray::GetCount() const>
   21188:	e1500007 	cmp	r0, r7
   2118c:	9a00005a 	bls	212fc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1dc>
   21190:	e3560000 	cmp	r6, #0
   21194:	1a000026 	bne	21234 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x114>
   21198:	e30ebe47 	movw	fp, #60999	@ 0xee47
   2119c:	e30eaa60 	movw	sl, #60000	@ 0xea60
   211a0:	e1d861b8 	ldrh	r6, [r8, #24]
   211a4:	e3a04000 	mov	r4, #0
   211a8:	e2863001 	add	r3, r6, #1
   211ac:	e6ff3073 	uxth	r3, r3
   211b0:	e153000b 	cmp	r3, fp
   211b4:	81a0300a 	movhi	r3, sl
   211b8:	e1c831b8 	strh	r3, [r8, #24]
   211bc:	ea000000 	b	211c4 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa4>
   211c0:	e2844001 	add	r4, r4, #1
   211c4:	e1a00005 	mov	r0, r5
   211c8:	eb0039c1 	bl	2f8d4 <CPtrArray::GetCount() const>
   211cc:	e1500004 	cmp	r0, r4
   211d0:	9a000013 	bls	21224 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x104>
   211d4:	e1a01004 	mov	r1, r4
   211d8:	e1a00005 	mov	r0, r5
   211dc:	eb0039be 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   211e0:	e5903000 	ldr	r3, [r0]
   211e4:	e3530000 	cmp	r3, #0
   211e8:	0afffff4 	beq	211c0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   211ec:	e1a01004 	mov	r1, r4
   211f0:	e1a00005 	mov	r0, r5
   211f4:	eb0039b8 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   211f8:	e5900000 	ldr	r0, [r0]
   211fc:	eb000e61 	bl	24b88 <CNetConnection::GetOwnPort() const>
   21200:	e1500006 	cmp	r0, r6
   21204:	1affffed 	bne	211c0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   21208:	e1a01004 	mov	r1, r4
   2120c:	e1a00005 	mov	r0, r5
   21210:	eb0039b1 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21214:	e5900000 	ldr	r0, [r0]
   21218:	eb000e64 	bl	24bb0 <CNetConnection::GetProtocol() const>
   2121c:	e1500009 	cmp	r0, r9
   21220:	1affffe6 	bne	211c0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   21224:	e1a00005 	mov	r0, r5
   21228:	eb0039a9 	bl	2f8d4 <CPtrArray::GetCount() const>
   2122c:	e1500004 	cmp	r0, r4
   21230:	8affffda 	bhi	211a0 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x80>
   21234:	e5983000 	ldr	r3, [r8]
   21238:	e3530000 	cmp	r3, #0
   2123c:	0a00004d 	beq	21378 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x258>
   21240:	e5983004 	ldr	r3, [r8, #4]
   21244:	e3530000 	cmp	r3, #0
   21248:	0a000050 	beq	21390 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x270>
   2124c:	e3590006 	cmp	r9, #6
   21250:	0a000030 	beq	21318 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1f8>
   21254:	e3590011 	cmp	r9, #17
   21258:	1a000022 	bne	212e8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1c8>
   2125c:	e3a00048 	mov	r0, #72	@ 0x48
   21260:	eb0053af 	bl	36124 <operator new(unsigned int)>
   21264:	e59d300c 	ldr	r3, [sp, #12]
   21268:	e58d3000 	str	r3, [sp]
   2126c:	e1a04000 	mov	r4, r0
   21270:	e58d6004 	str	r6, [sp, #4]
   21274:	e59d3008 	ldr	r3, [sp, #8]
   21278:	e8980006 	ldm	r8, {r1, r2}
   2127c:	eb00108f 	bl	254c0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   21280:	e1a01007 	mov	r1, r7
   21284:	e1a00005 	mov	r0, r5
   21288:	eb003993 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   2128c:	e598301c 	ldr	r3, [r8, #28]
   21290:	e5804000 	str	r4, [r0]
   21294:	e3530000 	cmp	r3, #0
   21298:	1a00002e 	bne	21358 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x238>
   2129c:	e1a01007 	mov	r1, r7
   212a0:	e1a00005 	mov	r0, r5
   212a4:	eb00398c 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   212a8:	e5903000 	ldr	r3, [r0]
   212ac:	e3530000 	cmp	r3, #0
   212b0:	0a00003c 	beq	213a8 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x288>
   212b4:	e1a01007 	mov	r1, r7
   212b8:	e1a00005 	mov	r0, r5
   212bc:	eb003986 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   212c0:	e5900000 	ldr	r0, [r0]
   212c4:	e3013ec4 	movw	r3, #7876	@ 0x1ec4
   212c8:	e3403002 	movt	r3, #2
   212cc:	e5902000 	ldr	r2, [r0]
   212d0:	e5922008 	ldr	r2, [r2, #8]
   212d4:	e1520003 	cmp	r2, r3
   212d8:	1a000020 	bne	21360 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x240>
   212dc:	e3e00000 	mvn	r0, #0
   212e0:	e28dd014 	add	sp, sp, #20
   212e4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212e8:	e598301c 	ldr	r3, [r8, #28]
   212ec:	e3530000 	cmp	r3, #0
   212f0:	0afffff9 	beq	212dc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1bc>
   212f4:	eb0059cc 	bl	37a2c <LeaveCritical>
   212f8:	eafffff7 	b	212dc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1bc>
   212fc:	e3a01000 	mov	r1, #0
   21300:	e1a00005 	mov	r0, r5
   21304:	eb0039b0 	bl	2f9cc <CPtrArray::Append(void*)>
   21308:	e1a07000 	mov	r7, r0
   2130c:	eaffff9f 	b	21190 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x70>
   21310:	eb00599a 	bl	37980 <EnterCritical>
   21314:	eaffff8b 	b	21148 <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x28>
   21318:	e3a000e0 	mov	r0, #224	@ 0xe0
   2131c:	eb005380 	bl	36124 <operator new(unsigned int)>
   21320:	e59d300c 	ldr	r3, [sp, #12]
   21324:	e58d3000 	str	r3, [sp]
   21328:	e1a04000 	mov	r4, r0
   2132c:	e58d6004 	str	r6, [sp, #4]
   21330:	e59d3008 	ldr	r3, [sp, #8]
   21334:	e8980006 	ldm	r8, {r1, r2}
   21338:	eb0012a0 	bl	25dc0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>
   2133c:	e1a01007 	mov	r1, r7
   21340:	e1a00005 	mov	r0, r5
   21344:	eb003964 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21348:	e598301c 	ldr	r3, [r8, #28]
   2134c:	e5804000 	str	r4, [r0]
   21350:	e3530000 	cmp	r3, #0
   21354:	0affffd0 	beq	2129c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   21358:	eb0059b3 	bl	37a2c <LeaveCritical>
   2135c:	eaffffce 	b	2129c <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x17c>
   21360:	e12fff32 	blx	r2
   21364:	e3500000 	cmp	r0, #0
   21368:	baffffdb 	blt	212dc <CTransportLayer::Connect(CIPAddress&, unsigned short, unsigned short, int)+0x1bc>
   2136c:	e1a00007 	mov	r0, r7
   21370:	e28dd014 	add	sp, sp, #20
   21374:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21378:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   2137c:	e3401003 	movt	r1, #3
   21380:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   21384:	e3400003 	movt	r0, #3
   21388:	e3a020e1 	mov	r2, #225	@ 0xe1
   2138c:	eb002a92 	bl	2bddc <assertion_failed>
   21390:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21394:	e3401003 	movt	r1, #3
   21398:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   2139c:	e3400003 	movt	r0, #3
   213a0:	e3a020e2 	mov	r2, #226	@ 0xe2
   213a4:	eb002a8c 	bl	2bddc <assertion_failed>
   213a8:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   213ac:	e3401003 	movt	r1, #3
   213b0:	e30c0d1c 	movw	r0, #52508	@ 0xcd1c
   213b4:	e3400003 	movt	r0, #3
   213b8:	e3a020f4 	mov	r2, #244	@ 0xf4
   213bc:	eb002a86 	bl	2bddc <assertion_failed>

000213c0 <CTransportLayer::Listen(unsigned short, int)>:
   213c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   213c4:	e1a06000 	mov	r6, r0
   213c8:	e590001c 	ldr	r0, [r0, #28]
   213cc:	e1a07001 	mov	r7, r1
   213d0:	e1a08002 	mov	r8, r2
   213d4:	e3500000 	cmp	r0, #0
   213d8:	1a000039 	bne	214c4 <CTransportLayer::Listen(unsigned short, int)+0x104>
   213dc:	e3a04000 	mov	r4, #0
   213e0:	e2865008 	add	r5, r6, #8
   213e4:	ea000006 	b	21404 <CTransportLayer::Listen(unsigned short, int)+0x44>
   213e8:	e1a01004 	mov	r1, r4
   213ec:	e1a00005 	mov	r0, r5
   213f0:	eb003939 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   213f4:	e590c000 	ldr	ip, [r0]
   213f8:	e35c0000 	cmp	ip, #0
   213fc:	0a000004 	beq	21414 <CTransportLayer::Listen(unsigned short, int)+0x54>
   21400:	e2844001 	add	r4, r4, #1
   21404:	e1a00005 	mov	r0, r5
   21408:	eb003931 	bl	2f8d4 <CPtrArray::GetCount() const>
   2140c:	e1500004 	cmp	r0, r4
   21410:	8afffff4 	bhi	213e8 <CTransportLayer::Listen(unsigned short, int)+0x28>
   21414:	e1a00005 	mov	r0, r5
   21418:	eb00392d 	bl	2f8d4 <CPtrArray::GetCount() const>
   2141c:	e1500004 	cmp	r0, r4
   21420:	9a000022 	bls	214b0 <CTransportLayer::Listen(unsigned short, int)+0xf0>
   21424:	e3570000 	cmp	r7, #0
   21428:	0a000039 	beq	21514 <CTransportLayer::Listen(unsigned short, int)+0x154>
   2142c:	e3580006 	cmp	r8, #6
   21430:	1a000037 	bne	21514 <CTransportLayer::Listen(unsigned short, int)+0x154>
   21434:	e5963000 	ldr	r3, [r6]
   21438:	e3530000 	cmp	r3, #0
   2143c:	0a000022 	beq	214cc <CTransportLayer::Listen(unsigned short, int)+0x10c>
   21440:	e5963004 	ldr	r3, [r6, #4]
   21444:	e3530000 	cmp	r3, #0
   21448:	0a000025 	beq	214e4 <CTransportLayer::Listen(unsigned short, int)+0x124>
   2144c:	e3a000e0 	mov	r0, #224	@ 0xe0
   21450:	eb005333 	bl	36124 <operator new(unsigned int)>
   21454:	e1a03007 	mov	r3, r7
   21458:	e8960006 	ldm	r6, {r1, r2}
   2145c:	e1a07000 	mov	r7, r0
   21460:	eb0010df 	bl	257e4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>
   21464:	e1a01004 	mov	r1, r4
   21468:	e1a00005 	mov	r0, r5
   2146c:	eb00391a 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21470:	e1a03000 	mov	r3, r0
   21474:	e1a01004 	mov	r1, r4
   21478:	e1a00005 	mov	r0, r5
   2147c:	e5837000 	str	r7, [r3]
   21480:	eb003915 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21484:	e5903000 	ldr	r3, [r0]
   21488:	e3530000 	cmp	r3, #0
   2148c:	0a00001a 	beq	214fc <CTransportLayer::Listen(unsigned short, int)+0x13c>
   21490:	e596301c 	ldr	r3, [r6, #28]
   21494:	e3530000 	cmp	r3, #0
   21498:	1a000001 	bne	214a4 <CTransportLayer::Listen(unsigned short, int)+0xe4>
   2149c:	e1a00004 	mov	r0, r4
   214a0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   214a4:	eb005960 	bl	37a2c <LeaveCritical>
   214a8:	e1a00004 	mov	r0, r4
   214ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   214b0:	e3a01000 	mov	r1, #0
   214b4:	e1a00005 	mov	r0, r5
   214b8:	eb003943 	bl	2f9cc <CPtrArray::Append(void*)>
   214bc:	e1a04000 	mov	r4, r0
   214c0:	eaffffd7 	b	21424 <CTransportLayer::Listen(unsigned short, int)+0x64>
   214c4:	eb00592d 	bl	37980 <EnterCritical>
   214c8:	eaffffc3 	b	213dc <CTransportLayer::Listen(unsigned short, int)+0x1c>
   214cc:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   214d0:	e3401003 	movt	r1, #3
   214d4:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   214d8:	e3400003 	movt	r0, #3
   214dc:	e300211e 	movw	r2, #286	@ 0x11e
   214e0:	eb002a3d 	bl	2bddc <assertion_failed>
   214e4:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   214e8:	e3401003 	movt	r1, #3
   214ec:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   214f0:	e3400003 	movt	r0, #3
   214f4:	e300211f 	movw	r2, #287	@ 0x11f
   214f8:	eb002a37 	bl	2bddc <assertion_failed>
   214fc:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21500:	e3401003 	movt	r1, #3
   21504:	e30c0d1c 	movw	r0, #52508	@ 0xcd1c
   21508:	e3400003 	movt	r0, #3
   2150c:	e3002121 	movw	r2, #289	@ 0x121
   21510:	eb002a31 	bl	2bddc <assertion_failed>
   21514:	e596301c 	ldr	r3, [r6, #28]
   21518:	e3530000 	cmp	r3, #0
   2151c:	1a000001 	bne	21528 <CTransportLayer::Listen(unsigned short, int)+0x168>
   21520:	e3e00000 	mvn	r0, #0
   21524:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   21528:	eb00593f 	bl	37a2c <LeaveCritical>
   2152c:	eafffffb 	b	21520 <CTransportLayer::Listen(unsigned short, int)+0x160>

00021530 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)>:
   21530:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21534:	e2535000 	subs	r5, r3, #0
   21538:	ba000021 	blt	215c4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x94>
   2153c:	e2804008 	add	r4, r0, #8
   21540:	e1a06001 	mov	r6, r1
   21544:	e1a00004 	mov	r0, r4
   21548:	e1a07002 	mov	r7, r2
   2154c:	eb0038e0 	bl	2f8d4 <CPtrArray::GetCount() const>
   21550:	e1500005 	cmp	r0, r5
   21554:	da000013 	ble	215a8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x78>
   21558:	e1a01005 	mov	r1, r5
   2155c:	e1a00004 	mov	r0, r4
   21560:	eb0038dd 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21564:	e5903000 	ldr	r3, [r0]
   21568:	e3530000 	cmp	r3, #0
   2156c:	0a00000d 	beq	215a8 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x78>
   21570:	e3560000 	cmp	r6, #0
   21574:	0a000018 	beq	215dc <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xac>
   21578:	e3570000 	cmp	r7, #0
   2157c:	0a00001c 	beq	215f4 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0xc4>
   21580:	e1a01005 	mov	r1, r5
   21584:	e1a00004 	mov	r0, r4
   21588:	eb0038d3 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   2158c:	e5900000 	ldr	r0, [r0]
   21590:	e3013ecc 	movw	r3, #7884	@ 0x1ecc
   21594:	e3403002 	movt	r3, #2
   21598:	e5902000 	ldr	r2, [r0]
   2159c:	e592e00c 	ldr	lr, [r2, #12]
   215a0:	e15e0003 	cmp	lr, r3
   215a4:	1a000001 	bne	215b0 <CTransportLayer::Accept(CIPAddress*, unsigned short*, int)+0x80>
   215a8:	e3e00000 	mvn	r0, #0
   215ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   215b0:	e1a02007 	mov	r2, r7
   215b4:	e1a01006 	mov	r1, r6
   215b8:	e1a0300e 	mov	r3, lr
   215bc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   215c0:	e12fff13 	bx	r3
   215c4:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   215c8:	e3401003 	movt	r1, #3
   215cc:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   215d0:	e3400003 	movt	r0, #3
   215d4:	e300212a 	movw	r2, #298	@ 0x12a
   215d8:	eb0029ff 	bl	2bddc <assertion_failed>
   215dc:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   215e0:	e3401003 	movt	r1, #3
   215e4:	e30c0ca8 	movw	r0, #52392	@ 0xcca8
   215e8:	e3400003 	movt	r0, #3
   215ec:	e3002131 	movw	r2, #305	@ 0x131
   215f0:	eb0029f9 	bl	2bddc <assertion_failed>
   215f4:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   215f8:	e3401003 	movt	r1, #3
   215fc:	e30c0cb8 	movw	r0, #52408	@ 0xccb8
   21600:	e3400003 	movt	r0, #3
   21604:	e3002132 	movw	r2, #306	@ 0x132
   21608:	eb0029f3 	bl	2bddc <assertion_failed>

0002160c <CTransportLayer::Disconnect(int)>:
   2160c:	e92d4070 	push	{r4, r5, r6, lr}
   21610:	e2515000 	subs	r5, r1, #0
   21614:	ba000018 	blt	2167c <CTransportLayer::Disconnect(int)+0x70>
   21618:	e2804008 	add	r4, r0, #8
   2161c:	e1a00004 	mov	r0, r4
   21620:	eb0038ab 	bl	2f8d4 <CPtrArray::GetCount() const>
   21624:	e1500005 	cmp	r0, r5
   21628:	da00000f 	ble	2166c <CTransportLayer::Disconnect(int)+0x60>
   2162c:	e1a01005 	mov	r1, r5
   21630:	e1a00004 	mov	r0, r4
   21634:	eb0038a8 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21638:	e5903000 	ldr	r3, [r0]
   2163c:	e3530000 	cmp	r3, #0
   21640:	0a000009 	beq	2166c <CTransportLayer::Disconnect(int)+0x60>
   21644:	e1a01005 	mov	r1, r5
   21648:	e1a00004 	mov	r0, r4
   2164c:	eb0038a2 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21650:	e5900000 	ldr	r0, [r0]
   21654:	e3013ed4 	movw	r3, #7892	@ 0x1ed4
   21658:	e3403002 	movt	r3, #2
   2165c:	e5902000 	ldr	r2, [r0]
   21660:	e5922010 	ldr	r2, [r2, #16]
   21664:	e1520003 	cmp	r2, r3
   21668:	1a000001 	bne	21674 <CTransportLayer::Disconnect(int)+0x68>
   2166c:	e3e00000 	mvn	r0, #0
   21670:	e8bd8070 	pop	{r4, r5, r6, pc}
   21674:	e8bd4070 	pop	{r4, r5, r6, lr}
   21678:	e12fff12 	bx	r2
   2167c:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21680:	e3401003 	movt	r1, #3
   21684:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   21688:	e3400003 	movt	r0, #3
   2168c:	e3a02f4e 	mov	r2, #312	@ 0x138
   21690:	eb0029d1 	bl	2bddc <assertion_failed>

00021694 <CTransportLayer::Send(void const*, unsigned int, int, int)>:
   21694:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21698:	e59d5018 	ldr	r5, [sp, #24]
   2169c:	e3550000 	cmp	r5, #0
   216a0:	ba000023 	blt	21734 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xa0>
   216a4:	e2804008 	add	r4, r0, #8
   216a8:	e1a06001 	mov	r6, r1
   216ac:	e1a00004 	mov	r0, r4
   216b0:	e1a08002 	mov	r8, r2
   216b4:	e1a07003 	mov	r7, r3
   216b8:	eb003885 	bl	2f8d4 <CPtrArray::GetCount() const>
   216bc:	e1500005 	cmp	r0, r5
   216c0:	da000013 	ble	21714 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x80>
   216c4:	e1a01005 	mov	r1, r5
   216c8:	e1a00004 	mov	r0, r4
   216cc:	eb003882 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   216d0:	e5903000 	ldr	r3, [r0]
   216d4:	e3530000 	cmp	r3, #0
   216d8:	0a00000d 	beq	21714 <CTransportLayer::Send(void const*, unsigned int, int, int)+0x80>
   216dc:	e3560000 	cmp	r6, #0
   216e0:	0a000019 	beq	2174c <CTransportLayer::Send(void const*, unsigned int, int, int)+0xb8>
   216e4:	e3580000 	cmp	r8, #0
   216e8:	0a00001d 	beq	21764 <CTransportLayer::Send(void const*, unsigned int, int, int)+0xd0>
   216ec:	e1a01005 	mov	r1, r5
   216f0:	e1a00004 	mov	r0, r4
   216f4:	eb003878 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   216f8:	e5900000 	ldr	r0, [r0]
   216fc:	e3011edc 	movw	r1, #7900	@ 0x1edc
   21700:	e3401002 	movt	r1, #2
   21704:	e5903000 	ldr	r3, [r0]
   21708:	e593e014 	ldr	lr, [r3, #20]
   2170c:	e15e0001 	cmp	lr, r1
   21710:	1a000001 	bne	2171c <CTransportLayer::Send(void const*, unsigned int, int, int)+0x88>
   21714:	e3e00000 	mvn	r0, #0
   21718:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2171c:	e1a03007 	mov	r3, r7
   21720:	e1a02008 	mov	r2, r8
   21724:	e1a01006 	mov	r1, r6
   21728:	e1a0c00e 	mov	ip, lr
   2172c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21730:	e12fff1c 	bx	ip
   21734:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21738:	e3401003 	movt	r1, #3
   2173c:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   21740:	e3400003 	movt	r0, #3
   21744:	e3a02f51 	mov	r2, #324	@ 0x144
   21748:	eb0029a3 	bl	2bddc <assertion_failed>
   2174c:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21750:	e3401003 	movt	r1, #3
   21754:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   21758:	e3400003 	movt	r0, #3
   2175c:	e300214b 	movw	r2, #331	@ 0x14b
   21760:	eb00299d 	bl	2bddc <assertion_failed>
   21764:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21768:	e3401003 	movt	r1, #3
   2176c:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   21770:	e3400003 	movt	r0, #3
   21774:	e3a02f53 	mov	r2, #332	@ 0x14c
   21778:	eb002997 	bl	2bddc <assertion_failed>

0002177c <CTransportLayer::Receive(void*, int, int)>:
   2177c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   21780:	e2535000 	subs	r5, r3, #0
   21784:	ba00001f 	blt	21808 <CTransportLayer::Receive(void*, int, int)+0x8c>
   21788:	e2804008 	add	r4, r0, #8
   2178c:	e1a06001 	mov	r6, r1
   21790:	e1a00004 	mov	r0, r4
   21794:	e1a07002 	mov	r7, r2
   21798:	eb00384d 	bl	2f8d4 <CPtrArray::GetCount() const>
   2179c:	e1500005 	cmp	r0, r5
   217a0:	da000011 	ble	217ec <CTransportLayer::Receive(void*, int, int)+0x70>
   217a4:	e1a01005 	mov	r1, r5
   217a8:	e1a00004 	mov	r0, r4
   217ac:	eb00384a 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   217b0:	e5903000 	ldr	r3, [r0]
   217b4:	e3530000 	cmp	r3, #0
   217b8:	0a00000b 	beq	217ec <CTransportLayer::Receive(void*, int, int)+0x70>
   217bc:	e3560000 	cmp	r6, #0
   217c0:	0a000016 	beq	21820 <CTransportLayer::Receive(void*, int, int)+0xa4>
   217c4:	e1a01005 	mov	r1, r5
   217c8:	e1a00004 	mov	r0, r4
   217cc:	eb003842 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   217d0:	e5900000 	ldr	r0, [r0]
   217d4:	e3013ee4 	movw	r3, #7908	@ 0x1ee4
   217d8:	e3403002 	movt	r3, #2
   217dc:	e5902000 	ldr	r2, [r0]
   217e0:	e592e018 	ldr	lr, [r2, #24]
   217e4:	e15e0003 	cmp	lr, r3
   217e8:	1a000001 	bne	217f4 <CTransportLayer::Receive(void*, int, int)+0x78>
   217ec:	e3e00000 	mvn	r0, #0
   217f0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   217f4:	e1a02007 	mov	r2, r7
   217f8:	e1a01006 	mov	r1, r6
   217fc:	e1a0300e 	mov	r3, lr
   21800:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   21804:	e12fff13 	bx	r3
   21808:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   2180c:	e3401003 	movt	r1, #3
   21810:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   21814:	e3400003 	movt	r0, #3
   21818:	e3002152 	movw	r2, #338	@ 0x152
   2181c:	eb00296e 	bl	2bddc <assertion_failed>
   21820:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21824:	e3401003 	movt	r1, #3
   21828:	e30b0400 	movw	r0, #46080	@ 0xb400
   2182c:	e3400003 	movt	r0, #3
   21830:	e3002159 	movw	r2, #345	@ 0x159
   21834:	eb002968 	bl	2bddc <assertion_failed>

00021838 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)>:
   21838:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2183c:	e59d5028 	ldr	r5, [sp, #40]	@ 0x28
   21840:	e59d9020 	ldr	r9, [sp, #32]
   21844:	e1dda2b4 	ldrh	sl, [sp, #36]	@ 0x24
   21848:	e3550000 	cmp	r5, #0
   2184c:	ba000025 	blt	218e8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xb0>
   21850:	e2804008 	add	r4, r0, #8
   21854:	e1a06001 	mov	r6, r1
   21858:	e1a00004 	mov	r0, r4
   2185c:	e1a07002 	mov	r7, r2
   21860:	e1a08003 	mov	r8, r3
   21864:	eb00381a 	bl	2f8d4 <CPtrArray::GetCount() const>
   21868:	e1500005 	cmp	r0, r5
   2186c:	da000013 	ble	218c0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x88>
   21870:	e1a01005 	mov	r1, r5
   21874:	e1a00004 	mov	r0, r4
   21878:	eb003817 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   2187c:	e5903000 	ldr	r3, [r0]
   21880:	e3530000 	cmp	r3, #0
   21884:	0a00000d 	beq	218c0 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x88>
   21888:	e3560000 	cmp	r6, #0
   2188c:	0a00001b 	beq	21900 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xc8>
   21890:	e3570000 	cmp	r7, #0
   21894:	0a00001f 	beq	21918 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0xe0>
   21898:	e1a01005 	mov	r1, r5
   2189c:	e1a00004 	mov	r0, r4
   218a0:	eb00380d 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   218a4:	e5900000 	ldr	r0, [r0]
   218a8:	e3013eec 	movw	r3, #7916	@ 0x1eec
   218ac:	e3403002 	movt	r3, #2
   218b0:	e5902000 	ldr	r2, [r0]
   218b4:	e592e01c 	ldr	lr, [r2, #28]
   218b8:	e15e0003 	cmp	lr, r3
   218bc:	1a000001 	bne	218c8 <CTransportLayer::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short, int)+0x90>
   218c0:	e3e00000 	mvn	r0, #0
   218c4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   218c8:	e1a03008 	mov	r3, r8
   218cc:	e1a02007 	mov	r2, r7
   218d0:	e1a01006 	mov	r1, r6
   218d4:	e1a0c00e 	mov	ip, lr
   218d8:	e58da024 	str	sl, [sp, #36]	@ 0x24
   218dc:	e58d9020 	str	r9, [sp, #32]
   218e0:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   218e4:	e12fff1c 	bx	ip
   218e8:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   218ec:	e3401003 	movt	r1, #3
   218f0:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   218f4:	e3400003 	movt	r0, #3
   218f8:	e3a02e16 	mov	r2, #352	@ 0x160
   218fc:	eb002936 	bl	2bddc <assertion_failed>
   21900:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21904:	e3401003 	movt	r1, #3
   21908:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   2190c:	e3400003 	movt	r0, #3
   21910:	e3002167 	movw	r2, #359	@ 0x167
   21914:	eb002930 	bl	2bddc <assertion_failed>
   21918:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   2191c:	e3401003 	movt	r1, #3
   21920:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   21924:	e3400003 	movt	r0, #3
   21928:	e3a02f5a 	mov	r2, #360	@ 0x168
   2192c:	eb00292a 	bl	2bddc <assertion_failed>

00021930 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)>:
   21930:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21934:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
   21938:	e59d8020 	ldr	r8, [sp, #32]
   2193c:	e3550000 	cmp	r5, #0
   21940:	ba000022 	blt	219d0 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xa0>
   21944:	e2804008 	add	r4, r0, #8
   21948:	e1a06001 	mov	r6, r1
   2194c:	e1a00004 	mov	r0, r4
   21950:	e1a07002 	mov	r7, r2
   21954:	e1a09003 	mov	r9, r3
   21958:	eb0037dd 	bl	2f8d4 <CPtrArray::GetCount() const>
   2195c:	e1500005 	cmp	r0, r5
   21960:	da000011 	ble	219ac <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x7c>
   21964:	e1a01005 	mov	r1, r5
   21968:	e1a00004 	mov	r0, r4
   2196c:	eb0037da 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21970:	e5903000 	ldr	r3, [r0]
   21974:	e3530000 	cmp	r3, #0
   21978:	0a00000b 	beq	219ac <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x7c>
   2197c:	e3560000 	cmp	r6, #0
   21980:	0a000018 	beq	219e8 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0xb8>
   21984:	e1a01005 	mov	r1, r5
   21988:	e1a00004 	mov	r0, r4
   2198c:	eb0037d2 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21990:	e5900000 	ldr	r0, [r0]
   21994:	e3012ef4 	movw	r2, #7924	@ 0x1ef4
   21998:	e3402002 	movt	r2, #2
   2199c:	e5903000 	ldr	r3, [r0]
   219a0:	e593e020 	ldr	lr, [r3, #32]
   219a4:	e15e0002 	cmp	lr, r2
   219a8:	1a000001 	bne	219b4 <CTransportLayer::ReceiveFrom(void*, int, CIPAddress*, unsigned short*, int)+0x84>
   219ac:	e3e00000 	mvn	r0, #0
   219b0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   219b4:	e1a03009 	mov	r3, r9
   219b8:	e1a02007 	mov	r2, r7
   219bc:	e1a01006 	mov	r1, r6
   219c0:	e1a0c00e 	mov	ip, lr
   219c4:	e58d8020 	str	r8, [sp, #32]
   219c8:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   219cc:	e12fff1c 	bx	ip
   219d0:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   219d4:	e3401003 	movt	r1, #3
   219d8:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   219dc:	e3400003 	movt	r0, #3
   219e0:	e3a02e17 	mov	r2, #368	@ 0x170
   219e4:	eb0028fc 	bl	2bddc <assertion_failed>
   219e8:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   219ec:	e3401003 	movt	r1, #3
   219f0:	e30b0400 	movw	r0, #46080	@ 0xb400
   219f4:	e3400003 	movt	r0, #3
   219f8:	e3002177 	movw	r2, #375	@ 0x177
   219fc:	eb0028f6 	bl	2bddc <assertion_failed>

00021a00 <CTransportLayer::SetOptionBroadcast(bool, int)>:
   21a00:	e92d4070 	push	{r4, r5, r6, lr}
   21a04:	e2525000 	subs	r5, r2, #0
   21a08:	ba00001a 	blt	21a78 <CTransportLayer::SetOptionBroadcast(bool, int)+0x78>
   21a0c:	e2804008 	add	r4, r0, #8
   21a10:	e1a06001 	mov	r6, r1
   21a14:	e1a00004 	mov	r0, r4
   21a18:	eb0037ad 	bl	2f8d4 <CPtrArray::GetCount() const>
   21a1c:	e1500005 	cmp	r0, r5
   21a20:	da00000f 	ble	21a64 <CTransportLayer::SetOptionBroadcast(bool, int)+0x64>
   21a24:	e1a01005 	mov	r1, r5
   21a28:	e1a00004 	mov	r0, r4
   21a2c:	eb0037aa 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21a30:	e5903000 	ldr	r3, [r0]
   21a34:	e3530000 	cmp	r3, #0
   21a38:	0a000009 	beq	21a64 <CTransportLayer::SetOptionBroadcast(bool, int)+0x64>
   21a3c:	e1a01005 	mov	r1, r5
   21a40:	e1a00004 	mov	r0, r4
   21a44:	eb0037a4 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21a48:	e5900000 	ldr	r0, [r0]
   21a4c:	e3013efc 	movw	r3, #7932	@ 0x1efc
   21a50:	e3403002 	movt	r3, #2
   21a54:	e5902000 	ldr	r2, [r0]
   21a58:	e5922024 	ldr	r2, [r2, #36]	@ 0x24
   21a5c:	e1520003 	cmp	r2, r3
   21a60:	1a000001 	bne	21a6c <CTransportLayer::SetOptionBroadcast(bool, int)+0x6c>
   21a64:	e3e00000 	mvn	r0, #0
   21a68:	e8bd8070 	pop	{r4, r5, r6, pc}
   21a6c:	e1a01006 	mov	r1, r6
   21a70:	e8bd4070 	pop	{r4, r5, r6, lr}
   21a74:	e12fff12 	bx	r2
   21a78:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21a7c:	e3401003 	movt	r1, #3
   21a80:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   21a84:	e3400003 	movt	r0, #3
   21a88:	e300217e 	movw	r2, #382	@ 0x17e
   21a8c:	eb0028d2 	bl	2bddc <assertion_failed>

00021a90 <CTransportLayer::IsConnected(int) const>:
   21a90:	e92d4070 	push	{r4, r5, r6, lr}
   21a94:	e2515000 	subs	r5, r1, #0
   21a98:	ba000016 	blt	21af8 <CTransportLayer::IsConnected(int) const+0x68>
   21a9c:	e2804008 	add	r4, r0, #8
   21aa0:	e1a00004 	mov	r0, r4
   21aa4:	eb00378a 	bl	2f8d4 <CPtrArray::GetCount() const>
   21aa8:	e1500005 	cmp	r0, r5
   21aac:	ca000001 	bgt	21ab8 <CTransportLayer::IsConnected(int) const+0x28>
   21ab0:	e3a00000 	mov	r0, #0
   21ab4:	e8bd8070 	pop	{r4, r5, r6, pc}
   21ab8:	e1a01005 	mov	r1, r5
   21abc:	e1a00004 	mov	r0, r4
   21ac0:	eb0037a3 	bl	2f954 <CPtrArray::operator[](unsigned int) const>
   21ac4:	e3500000 	cmp	r0, #0
   21ac8:	0afffff8 	beq	21ab0 <CTransportLayer::IsConnected(int) const+0x20>
   21acc:	e1a01005 	mov	r1, r5
   21ad0:	e1a00004 	mov	r0, r4
   21ad4:	eb00379e 	bl	2f954 <CPtrArray::operator[](unsigned int) const>
   21ad8:	e5902000 	ldr	r2, [r0]
   21adc:	e3013f04 	movw	r3, #7940	@ 0x1f04
   21ae0:	e3403002 	movt	r3, #2
   21ae4:	e5922028 	ldr	r2, [r2, #40]	@ 0x28
   21ae8:	e1520003 	cmp	r2, r3
   21aec:	0affffef 	beq	21ab0 <CTransportLayer::IsConnected(int) const+0x20>
   21af0:	e8bd4070 	pop	{r4, r5, r6, lr}
   21af4:	e12fff12 	bx	r2
   21af8:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21afc:	e3401003 	movt	r1, #3
   21b00:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   21b04:	e3400003 	movt	r0, #3
   21b08:	e300218a 	movw	r2, #394	@ 0x18a
   21b0c:	eb0028b2 	bl	2bddc <assertion_failed>

00021b10 <CTransportLayer::GetForeignIP(int) const>:
   21b10:	e92d4070 	push	{r4, r5, r6, lr}
   21b14:	e2515000 	subs	r5, r1, #0
   21b18:	ba000010 	blt	21b60 <CTransportLayer::GetForeignIP(int) const+0x50>
   21b1c:	e2804008 	add	r4, r0, #8
   21b20:	e1a00004 	mov	r0, r4
   21b24:	eb00376a 	bl	2f8d4 <CPtrArray::GetCount() const>
   21b28:	e1500005 	cmp	r0, r5
   21b2c:	da000009 	ble	21b58 <CTransportLayer::GetForeignIP(int) const+0x48>
   21b30:	e1a01005 	mov	r1, r5
   21b34:	e1a00004 	mov	r0, r4
   21b38:	eb003785 	bl	2f954 <CPtrArray::operator[](unsigned int) const>
   21b3c:	e3500000 	cmp	r0, #0
   21b40:	0a000004 	beq	21b58 <CTransportLayer::GetForeignIP(int) const+0x48>
   21b44:	e1a01005 	mov	r1, r5
   21b48:	e1a00004 	mov	r0, r4
   21b4c:	eb003780 	bl	2f954 <CPtrArray::operator[](unsigned int) const>
   21b50:	e8bd4070 	pop	{r4, r5, r6, lr}
   21b54:	ea000c09 	b	24b80 <CNetConnection::GetForeignIP() const>
   21b58:	e3a00000 	mov	r0, #0
   21b5c:	e8bd8070 	pop	{r4, r5, r6, pc}
   21b60:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21b64:	e3401003 	movt	r1, #3
   21b68:	e30c0d34 	movw	r0, #52532	@ 0xcd34
   21b6c:	e3400003 	movt	r0, #3
   21b70:	e3002196 	movw	r2, #406	@ 0x196
   21b74:	eb002898 	bl	2bddc <assertion_failed>

00021b78 <CTransportLayer::~CTransportLayer()>:
   21b78:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   21b7c:	e92d4010 	push	{r4, lr}
   21b80:	e1a04000 	mov	r4, r0
   21b84:	e2800020 	add	r0, r0, #32
   21b88:	f444078f 	vst1.32	{d16}, [r4]
   21b8c:	eb0018bd 	bl	27e88 <CTCPRejector::~CTCPRejector()>
   21b90:	e2840008 	add	r0, r4, #8
   21b94:	eb003743 	bl	2f8a8 <CPtrArray::~CPtrArray()>
   21b98:	e1a00004 	mov	r0, r4
   21b9c:	e8bd8010 	pop	{r4, pc}

00021ba0 <CTransportLayer::Process()>:
   21ba0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ba4:	e1a09000 	mov	r9, r0
   21ba8:	e24dde67 	sub	sp, sp, #1648	@ 0x670
   21bac:	e24dd004 	sub	sp, sp, #4
   21bb0:	e28d0020 	add	r0, sp, #32
   21bb4:	e28d7028 	add	r7, sp, #40	@ 0x28
   21bb8:	eb001a29 	bl	28464 <CIPAddress::CIPAddress()>
   21bbc:	e1a00007 	mov	r0, r7
   21bc0:	eb001a27 	bl	28464 <CIPAddress::CIPAddress()>
   21bc4:	e5990004 	ldr	r0, [r9, #4]
   21bc8:	e3500000 	cmp	r0, #0
   21bcc:	0a0000b6 	beq	21eac <CTransportLayer::Process()+0x30c>
   21bd0:	e2894008 	add	r4, r9, #8
   21bd4:	e28da01c 	add	sl, sp, #28
   21bd8:	e28d3020 	add	r3, sp, #32
   21bdc:	e28d2018 	add	r2, sp, #24
   21be0:	e28d1030 	add	r1, sp, #48	@ 0x30
   21be4:	e88d0480 	stm	sp, {r7, sl}
   21be8:	eb00023a 	bl	224d8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>
   21bec:	e3500000 	cmp	r0, #0
   21bf0:	0a000020 	beq	21c78 <CTransportLayer::Process()+0xd8>
   21bf4:	e3a05000 	mov	r5, #0
   21bf8:	ea000014 	b	21c50 <CTransportLayer::Process()+0xb0>
   21bfc:	e1a01005 	mov	r1, r5
   21c00:	e1a00004 	mov	r0, r4
   21c04:	eb003734 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21c08:	e5903000 	ldr	r3, [r0]
   21c0c:	e3530000 	cmp	r3, #0
   21c10:	0a00000d 	beq	21c4c <CTransportLayer::Process()+0xac>
   21c14:	e1a01005 	mov	r1, r5
   21c18:	e1a00004 	mov	r0, r4
   21c1c:	eb00372e 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21c20:	e5900000 	ldr	r0, [r0]
   21c24:	e59de01c 	ldr	lr, [sp, #28]
   21c28:	e28d3020 	add	r3, sp, #32
   21c2c:	e59d2018 	ldr	r2, [sp, #24]
   21c30:	e28d1030 	add	r1, sp, #48	@ 0x30
   21c34:	e590c000 	ldr	ip, [r0]
   21c38:	e88d4080 	stm	sp, {r7, lr}
   21c3c:	e59c6034 	ldr	r6, [ip, #52]	@ 0x34
   21c40:	e12fff36 	blx	r6
   21c44:	e3500000 	cmp	r0, #0
   21c48:	1a000004 	bne	21c60 <CTransportLayer::Process()+0xc0>
   21c4c:	e2855001 	add	r5, r5, #1
   21c50:	e1a00004 	mov	r0, r4
   21c54:	eb00371e 	bl	2f8d4 <CPtrArray::GetCount() const>
   21c58:	e1500005 	cmp	r0, r5
   21c5c:	8affffe6 	bhi	21bfc <CTransportLayer::Process()+0x5c>
   21c60:	e1a00004 	mov	r0, r4
   21c64:	eb00371a 	bl	2f8d4 <CPtrArray::GetCount() const>
   21c68:	e1500005 	cmp	r0, r5
   21c6c:	9a00006e 	bls	21e2c <CTransportLayer::Process()+0x28c>
   21c70:	e5990004 	ldr	r0, [r9, #4]
   21c74:	eaffffd7 	b	21bd8 <CTransportLayer::Process()+0x38>
   21c78:	e3018f18 	movw	r8, #7960	@ 0x1f18
   21c7c:	e3408002 	movt	r8, #2
   21c80:	e28db016 	add	fp, sp, #22
   21c84:	e5990004 	ldr	r0, [r9, #4]
   21c88:	e28dc014 	add	ip, sp, #20
   21c8c:	e1a03007 	mov	r3, r7
   21c90:	e28d2020 	add	r2, sp, #32
   21c94:	e28d1013 	add	r1, sp, #19
   21c98:	e58da008 	str	sl, [sp, #8]
   21c9c:	e58db004 	str	fp, [sp, #4]
   21ca0:	e58dc000 	str	ip, [sp]
   21ca4:	eb000257 	bl	22608 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>
   21ca8:	e3500000 	cmp	r0, #0
   21cac:	0a00001f 	beq	21d30 <CTransportLayer::Process()+0x190>
   21cb0:	e3a05000 	mov	r5, #0
   21cb4:	ea000000 	b	21cbc <CTransportLayer::Process()+0x11c>
   21cb8:	e2855001 	add	r5, r5, #1
   21cbc:	e1a00004 	mov	r0, r4
   21cc0:	eb003703 	bl	2f8d4 <CPtrArray::GetCount() const>
   21cc4:	e1500005 	cmp	r0, r5
   21cc8:	9affffed 	bls	21c84 <CTransportLayer::Process()+0xe4>
   21ccc:	e1a01005 	mov	r1, r5
   21cd0:	e1a00004 	mov	r0, r4
   21cd4:	eb003700 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21cd8:	e5903000 	ldr	r3, [r0]
   21cdc:	e3530000 	cmp	r3, #0
   21ce0:	0afffff4 	beq	21cb8 <CTransportLayer::Process()+0x118>
   21ce4:	e1a01005 	mov	r1, r5
   21ce8:	e1a00004 	mov	r0, r4
   21cec:	eb0036fa 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21cf0:	e5900000 	ldr	r0, [r0]
   21cf4:	e5dd1013 	ldrb	r1, [sp, #19]
   21cf8:	e1dd21b4 	ldrh	r2, [sp, #20]
   21cfc:	e5903000 	ldr	r3, [r0]
   21d00:	e59dc01c 	ldr	ip, [sp, #28]
   21d04:	e5936038 	ldr	r6, [r3, #56]	@ 0x38
   21d08:	e1dd31b6 	ldrh	r3, [sp, #22]
   21d0c:	e1560008 	cmp	r6, r8
   21d10:	0affffe8 	beq	21cb8 <CTransportLayer::Process()+0x118>
   21d14:	e88d100c 	stm	sp, {r2, r3, ip}
   21d18:	e1a03007 	mov	r3, r7
   21d1c:	e28d2020 	add	r2, sp, #32
   21d20:	e12fff36 	blx	r6
   21d24:	e3500000 	cmp	r0, #0
   21d28:	0affffe2 	beq	21cb8 <CTransportLayer::Process()+0x118>
   21d2c:	eaffffd4 	b	21c84 <CTransportLayer::Process()+0xe4>
   21d30:	e3018f0c 	movw	r8, #7948	@ 0x1f0c
   21d34:	e3408002 	movt	r8, #2
   21d38:	e301af14 	movw	sl, #7956	@ 0x1f14
   21d3c:	e340a002 	movt	sl, #2
   21d40:	e1a05000 	mov	r5, r0
   21d44:	e1a06000 	mov	r6, r0
   21d48:	ea000016 	b	21da8 <CTransportLayer::Process()+0x208>
   21d4c:	e1a01005 	mov	r1, r5
   21d50:	e1a00004 	mov	r0, r4
   21d54:	eb0036e0 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21d58:	e5903000 	ldr	r3, [r0]
   21d5c:	e3530000 	cmp	r3, #0
   21d60:	0a00000f 	beq	21da4 <CTransportLayer::Process()+0x204>
   21d64:	e1a01005 	mov	r1, r5
   21d68:	e1a00004 	mov	r0, r4
   21d6c:	eb0036da 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21d70:	e5900000 	ldr	r0, [r0]
   21d74:	e5903000 	ldr	r3, [r0]
   21d78:	e593302c 	ldr	r3, [r3, #44]	@ 0x2c
   21d7c:	e1530008 	cmp	r3, r8
   21d80:	1a000032 	bne	21e50 <CTransportLayer::Process()+0x2b0>
   21d84:	e1a01005 	mov	r1, r5
   21d88:	e1a00004 	mov	r0, r4
   21d8c:	eb0036d2 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21d90:	e5900000 	ldr	r0, [r0]
   21d94:	e5903000 	ldr	r3, [r0]
   21d98:	e5933030 	ldr	r3, [r3, #48]	@ 0x30
   21d9c:	e153000a 	cmp	r3, sl
   21da0:	1a00003b 	bne	21e94 <CTransportLayer::Process()+0x2f4>
   21da4:	e2855001 	add	r5, r5, #1
   21da8:	e1a00004 	mov	r0, r4
   21dac:	eb0036c8 	bl	2f8d4 <CPtrArray::GetCount() const>
   21db0:	e1500005 	cmp	r0, r5
   21db4:	8affffe4 	bhi	21d4c <CTransportLayer::Process()+0x1ac>
   21db8:	e599001c 	ldr	r0, [r9, #28]
   21dbc:	e3500000 	cmp	r0, #0
   21dc0:	1a000037 	bne	21ea4 <CTransportLayer::Process()+0x304>
   21dc4:	e1a00004 	mov	r0, r4
   21dc8:	eb0036c1 	bl	2f8d4 <CPtrArray::GetCount() const>
   21dcc:	e3500000 	cmp	r0, #0
   21dd0:	e2405001 	sub	r5, r0, #1
   21dd4:	1a000004 	bne	21dec <CTransportLayer::Process()+0x24c>
   21dd8:	ea000009 	b	21e04 <CTransportLayer::Process()+0x264>
   21ddc:	e1a00004 	mov	r0, r4
   21de0:	eb00373a 	bl	2fad0 <CPtrArray::RemoveLast()>
   21de4:	e2555001 	subs	r5, r5, #1
   21de8:	3a000005 	bcc	21e04 <CTransportLayer::Process()+0x264>
   21dec:	e1a01005 	mov	r1, r5
   21df0:	e1a00004 	mov	r0, r4
   21df4:	eb0036b8 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21df8:	e5903000 	ldr	r3, [r0]
   21dfc:	e3530000 	cmp	r3, #0
   21e00:	0afffff5 	beq	21ddc <CTransportLayer::Process()+0x23c>
   21e04:	e599301c 	ldr	r3, [r9, #28]
   21e08:	e3530000 	cmp	r3, #0
   21e0c:	1a000022 	bne	21e9c <CTransportLayer::Process()+0x2fc>
   21e10:	e1a00007 	mov	r0, r7
   21e14:	eb0019b9 	bl	28500 <CIPAddress::~CIPAddress()>
   21e18:	e28d0020 	add	r0, sp, #32
   21e1c:	eb0019b7 	bl	28500 <CIPAddress::~CIPAddress()>
   21e20:	e28dde67 	add	sp, sp, #1648	@ 0x670
   21e24:	e28dd004 	add	sp, sp, #4
   21e28:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e2c:	e59d301c 	ldr	r3, [sp, #28]
   21e30:	e28d1030 	add	r1, sp, #48	@ 0x30
   21e34:	e58d3004 	str	r3, [sp, #4]
   21e38:	e2890020 	add	r0, r9, #32
   21e3c:	e59d2018 	ldr	r2, [sp, #24]
   21e40:	e28d3020 	add	r3, sp, #32
   21e44:	e58d7000 	str	r7, [sp]
   21e48:	eb001862 	bl	27fd8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>
   21e4c:	eaffff87 	b	21c70 <CTransportLayer::Process()+0xd0>
   21e50:	e12fff33 	blx	r3
   21e54:	e3500000 	cmp	r0, #0
   21e58:	0affffc9 	beq	21d84 <CTransportLayer::Process()+0x1e4>
   21e5c:	e1a01005 	mov	r1, r5
   21e60:	e1a00004 	mov	r0, r4
   21e64:	eb00369c 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21e68:	e5900000 	ldr	r0, [r0]
   21e6c:	e3500000 	cmp	r0, #0
   21e70:	0a000002 	beq	21e80 <CTransportLayer::Process()+0x2e0>
   21e74:	e5903000 	ldr	r3, [r0]
   21e78:	e5933004 	ldr	r3, [r3, #4]
   21e7c:	e12fff33 	blx	r3
   21e80:	e1a01005 	mov	r1, r5
   21e84:	e1a00004 	mov	r0, r4
   21e88:	eb003693 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   21e8c:	e5806000 	str	r6, [r0]
   21e90:	eaffffc3 	b	21da4 <CTransportLayer::Process()+0x204>
   21e94:	e12fff33 	blx	r3
   21e98:	eaffffc1 	b	21da4 <CTransportLayer::Process()+0x204>
   21e9c:	eb0056e2 	bl	37a2c <LeaveCritical>
   21ea0:	eaffffda 	b	21e10 <CTransportLayer::Process()+0x270>
   21ea4:	eb0056b5 	bl	37980 <EnterCritical>
   21ea8:	eaffffc5 	b	21dc4 <CTransportLayer::Process()+0x224>
   21eac:	e30c1cf0 	movw	r1, #52464	@ 0xccf0
   21eb0:	e3401003 	movt	r1, #3
   21eb4:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   21eb8:	e3400003 	movt	r0, #3
   21ebc:	e3a0203a 	mov	r2, #58	@ 0x3a
   21ec0:	eb0027c5 	bl	2bddc <assertion_failed>

00021ec4 <CTCPRejector::Connect()>:
   21ec4:	e3e00000 	mvn	r0, #0
   21ec8:	e12fff1e 	bx	lr

00021ecc <CTCPRejector::Accept(CIPAddress*, unsigned short*)>:
   21ecc:	e3e00000 	mvn	r0, #0
   21ed0:	e12fff1e 	bx	lr

00021ed4 <CTCPRejector::Close()>:
   21ed4:	e3e00000 	mvn	r0, #0
   21ed8:	e12fff1e 	bx	lr

00021edc <CTCPRejector::Send(void const*, unsigned int, int)>:
   21edc:	e3e00000 	mvn	r0, #0
   21ee0:	e12fff1e 	bx	lr

00021ee4 <CTCPRejector::Receive(void*, int)>:
   21ee4:	e3e00000 	mvn	r0, #0
   21ee8:	e12fff1e 	bx	lr

00021eec <CTCPRejector::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   21eec:	e3e00000 	mvn	r0, #0
   21ef0:	e12fff1e 	bx	lr

00021ef4 <CTCPRejector::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   21ef4:	e3e00000 	mvn	r0, #0
   21ef8:	e12fff1e 	bx	lr

00021efc <CTCPRejector::SetOptionBroadcast(bool)>:
   21efc:	e3e00000 	mvn	r0, #0
   21f00:	e12fff1e 	bx	lr

00021f04 <CTCPRejector::IsConnected() const>:
   21f04:	e3a00000 	mov	r0, #0
   21f08:	e12fff1e 	bx	lr

00021f0c <CTCPRejector::IsTerminated() const>:
   21f0c:	e3a00000 	mov	r0, #0
   21f10:	e12fff1e 	bx	lr

00021f14 <CTCPRejector::Process()>:
   21f14:	e12fff1e 	bx	lr

00021f18 <CTCPRejector::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   21f18:	e3a00000 	mov	r0, #0
   21f1c:	e12fff1e 	bx	lr

00021f20 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)>:
   21f20:	e92d4010 	push	{r4, lr}
   21f24:	e1a04000 	mov	r4, r0
   21f28:	e3a03000 	mov	r3, #0
   21f2c:	e280000c 	add	r0, r0, #12
   21f30:	e884000e 	stm	r4, {r1, r2, r3}
   21f34:	eb001ab9 	bl	28a20 <CNetQueue::CNetQueue()>
   21f38:	e2840018 	add	r0, r4, #24
   21f3c:	eb001ab7 	bl	28a20 <CNetQueue::CNetQueue()>
   21f40:	e2840024 	add	r0, r4, #36	@ 0x24
   21f44:	eb001ab5 	bl	28a20 <CNetQueue::CNetQueue()>
   21f48:	e2840030 	add	r0, r4, #48	@ 0x30
   21f4c:	eb000a16 	bl	247ac <CRouteCache::CRouteCache()>
   21f50:	e5943000 	ldr	r3, [r4]
   21f54:	e3530000 	cmp	r3, #0
   21f58:	0a000004 	beq	21f70 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x50>
   21f5c:	e5943004 	ldr	r3, [r4, #4]
   21f60:	e3530000 	cmp	r3, #0
   21f64:	0a000007 	beq	21f88 <CNetworkLayer::CNetworkLayer(CNetConfig*, CLinkLayer*)+0x68>
   21f68:	e1a00004 	mov	r0, r4
   21f6c:	e8bd8010 	pop	{r4, pc}
   21f70:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   21f74:	e3401003 	movt	r1, #3
   21f78:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   21f7c:	e3400003 	movt	r0, #3
   21f80:	e3a0201f 	mov	r2, #31
   21f84:	eb002794 	bl	2bddc <assertion_failed>
   21f88:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   21f8c:	e3401003 	movt	r1, #3
   21f90:	e30c0d5c 	movw	r0, #52572	@ 0xcd5c
   21f94:	e3400003 	movt	r0, #3
   21f98:	e3a02020 	mov	r2, #32
   21f9c:	eb00278e 	bl	2bddc <assertion_failed>

00021fa0 <CNetworkLayer::~CNetworkLayer()>:
   21fa0:	e92d4070 	push	{r4, r5, r6, lr}
   21fa4:	e1a04000 	mov	r4, r0
   21fa8:	e5905008 	ldr	r5, [r0, #8]
   21fac:	e3550000 	cmp	r5, #0
   21fb0:	0a000004 	beq	21fc8 <CNetworkLayer::~CNetworkLayer()+0x28>
   21fb4:	e1a00005 	mov	r0, r5
   21fb8:	eb00085c 	bl	24130 <CICMPHandler::~CICMPHandler()>
   21fbc:	e3a01010 	mov	r1, #16
   21fc0:	e1a00005 	mov	r0, r5
   21fc4:	eb00506e 	bl	36184 <operator delete(void*, unsigned int)>
   21fc8:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   21fcc:	e3a03000 	mov	r3, #0
   21fd0:	e2840030 	add	r0, r4, #48	@ 0x30
   21fd4:	e5843008 	str	r3, [r4, #8]
   21fd8:	f444078f 	vst1.32	{d16}, [r4]
   21fdc:	eb000a0c 	bl	24814 <CRouteCache::~CRouteCache()>
   21fe0:	e2840024 	add	r0, r4, #36	@ 0x24
   21fe4:	eb001ac6 	bl	28b04 <CNetQueue::~CNetQueue()>
   21fe8:	e2840018 	add	r0, r4, #24
   21fec:	eb001ac4 	bl	28b04 <CNetQueue::~CNetQueue()>
   21ff0:	e284000c 	add	r0, r4, #12
   21ff4:	eb001ac2 	bl	28b04 <CNetQueue::~CNetQueue()>
   21ff8:	e1a00004 	mov	r0, r4
   21ffc:	e8bd8070 	pop	{r4, r5, r6, pc}

00022000 <CNetworkLayer::Initialize()>:
   22000:	e5903008 	ldr	r3, [r0, #8]
   22004:	e92d4030 	push	{r4, r5, lr}
   22008:	e3530000 	cmp	r3, #0
   2200c:	e24dd00c 	sub	sp, sp, #12
   22010:	1a00000d 	bne	2204c <CNetworkLayer::Initialize()+0x4c>
   22014:	e1a04000 	mov	r4, r0
   22018:	e3a00010 	mov	r0, #16
   2201c:	eb005040 	bl	36124 <operator new(unsigned int)>
   22020:	e1a03004 	mov	r3, r4
   22024:	e1a02004 	mov	r2, r4
   22028:	e1a05000 	mov	r5, r0
   2202c:	e4931024 	ldr	r1, [r3], #36	@ 0x24
   22030:	e58d3000 	str	r3, [sp]
   22034:	e2843018 	add	r3, r4, #24
   22038:	eb000812 	bl	24088 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>
   2203c:	e3a00001 	mov	r0, #1
   22040:	e5845008 	str	r5, [r4, #8]
   22044:	e28dd00c 	add	sp, sp, #12
   22048:	e8bd8030 	pop	{r4, r5, pc}
   2204c:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22050:	e3401003 	movt	r1, #3
   22054:	e30c0d70 	movw	r0, #52592	@ 0xcd70
   22058:	e3400003 	movt	r0, #3
   2205c:	e3a0202e 	mov	r2, #46	@ 0x2e
   22060:	eb00275d 	bl	2bddc <assertion_failed>

00022064 <CNetworkLayer::Process()>:
   22064:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   22068:	e1a05000 	mov	r5, r0
   2206c:	e5900000 	ldr	r0, [r0]
   22070:	e24dde65 	sub	sp, sp, #1616	@ 0x650
   22074:	e24dd004 	sub	sp, sp, #4
   22078:	e3500000 	cmp	r0, #0
   2207c:	0a000052 	beq	221cc <CNetworkLayer::Process()+0x168>
   22080:	eb0018db 	bl	283f4 <CNetConfig::GetIPAddress() const>
   22084:	e2506000 	subs	r6, r0, #0
   22088:	0a000055 	beq	221e4 <CNetworkLayer::Process()+0x180>
   2208c:	e5950004 	ldr	r0, [r5, #4]
   22090:	e3500000 	cmp	r0, #0
   22094:	1a000015 	bne	220f0 <CNetworkLayer::Process()+0x8c>
   22098:	ea000057 	b	221fc <CNetworkLayer::Process()+0x198>
   2209c:	e59d3004 	ldr	r3, [sp, #4]
   220a0:	e3530014 	cmp	r3, #20
   220a4:	9a000010 	bls	220ec <CNetworkLayer::Process()+0x88>
   220a8:	e5dd1010 	ldrb	r1, [sp, #16]
   220ac:	e201100f 	and	r1, r1, #15
   220b0:	e2412005 	sub	r2, r1, #5
   220b4:	e3520001 	cmp	r2, #1
   220b8:	8a00000b 	bhi	220ec <CNetworkLayer::Process()+0x88>
   220bc:	e1a04101 	lsl	r4, r1, #2
   220c0:	e1530004 	cmp	r3, r4
   220c4:	9a000008 	bls	220ec <CNetworkLayer::Process()+0x88>
   220c8:	e1a01004 	mov	r1, r4
   220cc:	e28d0010 	add	r0, sp, #16
   220d0:	eb001ba0 	bl	28f58 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   220d4:	e3500000 	cmp	r0, #0
   220d8:	1a000003 	bne	220ec <CNetworkLayer::Process()+0x88>
   220dc:	e5dd3010 	ldrb	r3, [sp, #16]
   220e0:	e1a03223 	lsr	r3, r3, #4
   220e4:	e3530004 	cmp	r3, #4
   220e8:	0a00000c 	beq	22120 <CNetworkLayer::Process()+0xbc>
   220ec:	e5950004 	ldr	r0, [r5, #4]
   220f0:	e28d2004 	add	r2, sp, #4
   220f4:	e28d1010 	add	r1, sp, #16
   220f8:	eb000306 	bl	22d18 <CLinkLayer::Receive(void*, unsigned int*)>
   220fc:	e3500000 	cmp	r0, #0
   22100:	1affffe5 	bne	2209c <CNetworkLayer::Process()+0x38>
   22104:	e5950008 	ldr	r0, [r5, #8]
   22108:	e3500000 	cmp	r0, #0
   2210c:	0a000040 	beq	22214 <CNetworkLayer::Process()+0x1b0>
   22110:	eb000844 	bl	24228 <CICMPHandler::Process()>
   22114:	e28dde65 	add	sp, sp, #1616	@ 0x650
   22118:	e28dd004 	add	sp, sp, #4
   2211c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   22120:	e28d1020 	add	r1, sp, #32
   22124:	e28d0008 	add	r0, sp, #8
   22128:	eb0018d4 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
   2212c:	e1a00006 	mov	r0, r6
   22130:	eb0019cd 	bl	2886c <CIPAddress::IsNull() const>
   22134:	e3500000 	cmp	r0, #0
   22138:	0a000013 	beq	2218c <CNetworkLayer::Process()+0x128>
   2213c:	e28d0008 	add	r0, sp, #8
   22140:	eb0019d7 	bl	288a4 <CIPAddress::IsBroadcast() const>
   22144:	e3500000 	cmp	r0, #0
   22148:	0a00000c 	beq	22180 <CNetworkLayer::Process()+0x11c>
   2214c:	e1dd31b6 	ldrh	r3, [sp, #22]
   22150:	e3130020 	tst	r3, #32
   22154:	1a000009 	bne	22180 <CNetworkLayer::Process()+0x11c>
   22158:	e6bf3fb3 	rev16	r3, r3
   2215c:	e2033c1f 	and	r3, r3, #7936	@ 0x1f00
   22160:	e3530000 	cmp	r3, #0
   22164:	1a000005 	bne	22180 <CNetworkLayer::Process()+0x11c>
   22168:	e1dd31b2 	ldrh	r3, [sp, #18]
   2216c:	e59d2004 	ldr	r2, [sp, #4]
   22170:	e6bf3fb3 	rev16	r3, r3
   22174:	e6ff3073 	uxth	r3, r3
   22178:	e1520003 	cmp	r2, r3
   2217c:	2a00002a 	bcs	2222c <CNetworkLayer::Process()+0x1c8>
   22180:	e28d0008 	add	r0, sp, #8
   22184:	eb0018dd 	bl	28500 <CIPAddress::~CIPAddress()>
   22188:	eaffffd7 	b	220ec <CNetworkLayer::Process()+0x88>
   2218c:	e28d1008 	add	r1, sp, #8
   22190:	e1a00006 	mov	r0, r6
   22194:	eb0018f3 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   22198:	e3500000 	cmp	r0, #0
   2219c:	0affffea 	beq	2214c <CNetworkLayer::Process()+0xe8>
   221a0:	e28d0008 	add	r0, sp, #8
   221a4:	eb0019be 	bl	288a4 <CIPAddress::IsBroadcast() const>
   221a8:	e3500000 	cmp	r0, #0
   221ac:	1affffe6 	bne	2214c <CNetworkLayer::Process()+0xe8>
   221b0:	e5950000 	ldr	r0, [r5]
   221b4:	eb001898 	bl	2841c <CNetConfig::GetBroadcastAddress() const>
   221b8:	e28d1008 	add	r1, sp, #8
   221bc:	eb0018e9 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   221c0:	e3500000 	cmp	r0, #0
   221c4:	0affffe0 	beq	2214c <CNetworkLayer::Process()+0xe8>
   221c8:	eaffffec 	b	22180 <CNetworkLayer::Process()+0x11c>
   221cc:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   221d0:	e3401003 	movt	r1, #3
   221d4:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   221d8:	e3400003 	movt	r0, #3
   221dc:	e3a02037 	mov	r2, #55	@ 0x37
   221e0:	eb0026fd 	bl	2bddc <assertion_failed>
   221e4:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   221e8:	e3401003 	movt	r1, #3
   221ec:	e30c0d84 	movw	r0, #52612	@ 0xcd84
   221f0:	e3400003 	movt	r0, #3
   221f4:	e3a02039 	mov	r2, #57	@ 0x39
   221f8:	eb0026f7 	bl	2bddc <assertion_failed>
   221fc:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22200:	e3401003 	movt	r1, #3
   22204:	e30c0d5c 	movw	r0, #52572	@ 0xcd5c
   22208:	e3400003 	movt	r0, #3
   2220c:	e3a0203d 	mov	r2, #61	@ 0x3d
   22210:	eb0026f1 	bl	2bddc <assertion_failed>
   22214:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22218:	e3401003 	movt	r1, #3
   2221c:	e30c0d98 	movw	r0, #52632	@ 0xcd98
   22220:	e3400003 	movt	r0, #3
   22224:	e3a0208a 	mov	r2, #138	@ 0x8a
   22228:	eb0026eb 	bl	2bddc <assertion_failed>
   2222c:	e3a00009 	mov	r0, #9
   22230:	e58d3004 	str	r3, [sp, #4]
   22234:	eb004fba 	bl	36124 <operator new(unsigned int)>
   22238:	e5dd3019 	ldrb	r3, [sp, #25]
   2223c:	e1a07000 	mov	r7, r0
   22240:	e28d101c 	add	r1, sp, #28
   22244:	e4c03001 	strb	r3, [r0], #1
   22248:	e3a02004 	mov	r2, #4
   2224c:	eb004dac 	bl	35904 <memcpy>
   22250:	e28d1020 	add	r1, sp, #32
   22254:	e3a02004 	mov	r2, #4
   22258:	e2870005 	add	r0, r7, #5
   2225c:	eb004da8 	bl	35904 <memcpy>
   22260:	e28d3010 	add	r3, sp, #16
   22264:	e0831004 	add	r1, r3, r4
   22268:	e5dd3019 	ldrb	r3, [sp, #25]
   2226c:	e59d2004 	ldr	r2, [sp, #4]
   22270:	e3530001 	cmp	r3, #1
   22274:	e1a03007 	mov	r3, r7
   22278:	e0422004 	sub	r2, r2, r4
   2227c:	02850018 	addeq	r0, r5, #24
   22280:	1285000c 	addne	r0, r5, #12
   22284:	e58d2004 	str	r2, [sp, #4]
   22288:	eb001a22 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   2228c:	eaffffbb 	b	22180 <CNetworkLayer::Process()+0x11c>

00022290 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>:
   22290:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22294:	e243c001 	sub	ip, r3, #1
   22298:	e1a04003 	mov	r4, r3
   2229c:	e28db020 	add	fp, sp, #32
   222a0:	e300362b 	movw	r3, #1579	@ 0x62b
   222a4:	e24dd014 	sub	sp, sp, #20
   222a8:	e15c0003 	cmp	ip, r3
   222ac:	8a00006d 	bhi	22468 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1d8>
   222b0:	e284301b 	add	r3, r4, #27
   222b4:	e1a06000 	mov	r6, r0
   222b8:	e3c33007 	bic	r3, r3, #7
   222bc:	e5900000 	ldr	r0, [r0]
   222c0:	e04dd003 	sub	sp, sp, r3
   222c4:	e2848014 	add	r8, r4, #20
   222c8:	e59b3004 	ldr	r3, [fp, #4]
   222cc:	e3a0a000 	mov	sl, #0
   222d0:	e1a07002 	mov	r7, r2
   222d4:	e3500000 	cmp	r0, #0
   222d8:	e3a02040 	mov	r2, #64	@ 0x40
   222dc:	e50bd030 	str	sp, [fp, #-48]	@ 0xffffffd0
   222e0:	e5cd2006 	strb	r2, [sp, #6]
   222e4:	e5cd2008 	strb	r2, [sp, #8]
   222e8:	e3a02045 	mov	r2, #69	@ 0x45
   222ec:	e5cd3009 	strb	r3, [sp, #9]
   222f0:	e1cd20b0 	strh	r2, [sp]
   222f4:	e6bf2fb8 	rev16	r2, r8
   222f8:	e5cda004 	strb	sl, [sp, #4]
   222fc:	e5cda005 	strb	sl, [sp, #5]
   22300:	e5cda007 	strb	sl, [sp, #7]
   22304:	e1cd20b2 	strh	r2, [sp, #2]
   22308:	0a000044 	beq	22420 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x190>
   2230c:	e1a05001 	mov	r5, r1
   22310:	eb001837 	bl	283f4 <CNetConfig::GetIPAddress() const>
   22314:	e2509000 	subs	r9, r0, #0
   22318:	0a000046 	beq	22438 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1a8>
   2231c:	e28d100c 	add	r1, sp, #12
   22320:	eb001939 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   22324:	e28d1010 	add	r1, sp, #16
   22328:	e1a00005 	mov	r0, r5
   2232c:	eb001936 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   22330:	e3a01014 	mov	r1, #20
   22334:	e1a0000d 	mov	r0, sp
   22338:	e5cda00a 	strb	sl, [sp, #10]
   2233c:	e5cda00b 	strb	sl, [sp, #11]
   22340:	eb001b04 	bl	28f58 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   22344:	e3570000 	cmp	r7, #0
   22348:	e1cd00ba 	strh	r0, [sp, #10]
   2234c:	0a000022 	beq	223dc <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x14c>
   22350:	e1a02004 	mov	r2, r4
   22354:	e1a01007 	mov	r1, r7
   22358:	e28d0014 	add	r0, sp, #20
   2235c:	eb004d68 	bl	35904 <memcpy>
   22360:	e1a00009 	mov	r0, r9
   22364:	eb001940 	bl	2886c <CIPAddress::IsNull() const>
   22368:	e3500000 	cmp	r0, #0
   2236c:	0a000003 	beq	22380 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0xf0>
   22370:	e1a00005 	mov	r0, r5
   22374:	eb00194a 	bl	288a4 <CIPAddress::IsBroadcast() const>
   22378:	e2501000 	subs	r1, r0, #0
   2237c:	0a000033 	beq	22450 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1c0>
   22380:	e24b002c 	sub	r0, fp, #44	@ 0x2c
   22384:	eb001836 	bl	28464 <CIPAddress::CIPAddress()>
   22388:	e5960000 	ldr	r0, [r6]
   2238c:	eb00181c 	bl	28404 <CNetConfig::GetNetMask() const>
   22390:	e1a01005 	mov	r1, r5
   22394:	e1a02000 	mov	r2, r0
   22398:	e1a00009 	mov	r0, r9
   2239c:	eb001971 	bl	28968 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   223a0:	e2504000 	subs	r4, r0, #0
   223a4:	0a000012 	beq	223f4 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x164>
   223a8:	e5960004 	ldr	r0, [r6, #4]
   223ac:	e3500000 	cmp	r0, #0
   223b0:	0a00003c 	beq	224a8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x218>
   223b4:	e51b2030 	ldr	r2, [fp, #-48]	@ 0xffffffd0
   223b8:	e1a03008 	mov	r3, r8
   223bc:	e1a01005 	mov	r1, r5
   223c0:	eb0001e7 	bl	22b64 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>
   223c4:	e1a04000 	mov	r4, r0
   223c8:	e24b002c 	sub	r0, fp, #44	@ 0x2c
   223cc:	eb00184b 	bl	28500 <CIPAddress::~CIPAddress()>
   223d0:	e1a00004 	mov	r0, r4
   223d4:	e24bd020 	sub	sp, fp, #32
   223d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223dc:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   223e0:	e3401003 	movt	r1, #3
   223e4:	e30c0dac 	movw	r0, #52652	@ 0xcdac
   223e8:	e3400003 	movt	r0, #3
   223ec:	e3a020ad 	mov	r2, #173	@ 0xad
   223f0:	eb002679 	bl	2bddc <assertion_failed>
   223f4:	e1a00005 	mov	r0, r5
   223f8:	eb0018f7 	bl	287dc <CIPAddress::Get() const>
   223fc:	e1a01000 	mov	r1, r0
   22400:	e2860030 	add	r0, r6, #48	@ 0x30
   22404:	eb000944 	bl	2491c <CRouteCache::GetRoute(unsigned char const*) const>
   22408:	e2501000 	subs	r1, r0, #0
   2240c:	0a000017 	beq	22470 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x1e0>
   22410:	e24b002c 	sub	r0, fp, #44	@ 0x2c
   22414:	e24b502c 	sub	r5, fp, #44	@ 0x2c
   22418:	eb0018bf 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   2241c:	eaffffe1 	b	223a8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x118>
   22420:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22424:	e3401003 	movt	r1, #3
   22428:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   2242c:	e3400003 	movt	r0, #3
   22430:	e3a020a2 	mov	r2, #162	@ 0xa2
   22434:	eb002668 	bl	2bddc <assertion_failed>
   22438:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   2243c:	e3401003 	movt	r1, #3
   22440:	e30c0d84 	movw	r0, #52612	@ 0xcd84
   22444:	e3400003 	movt	r0, #3
   22448:	e3a020a4 	mov	r2, #164	@ 0xa4
   2244c:	eb002662 	bl	2bddc <assertion_failed>
   22450:	e5960008 	ldr	r0, [r6, #8]
   22454:	e3500000 	cmp	r0, #0
   22458:	0a000018 	beq	224c0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x230>
   2245c:	e1a03008 	mov	r3, r8
   22460:	e1a0200d 	mov	r2, sp
   22464:	eb000865 	bl	24600 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   22468:	e3a04000 	mov	r4, #0
   2246c:	eaffffd7 	b	223d0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x140>
   22470:	e5960000 	ldr	r0, [r6]
   22474:	eb0017e4 	bl	2840c <CNetConfig::GetDefaultGateway() const>
   22478:	e1a05000 	mov	r5, r0
   2247c:	eb0018fa 	bl	2886c <CIPAddress::IsNull() const>
   22480:	e3500000 	cmp	r0, #0
   22484:	0affffc7 	beq	223a8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x118>
   22488:	e5960008 	ldr	r0, [r6, #8]
   2248c:	e3500000 	cmp	r0, #0
   22490:	0a00000a 	beq	224c0 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x230>
   22494:	e51b2030 	ldr	r2, [fp, #-48]	@ 0xffffffd0
   22498:	e1a03008 	mov	r3, r8
   2249c:	e1a01004 	mov	r1, r4
   224a0:	eb000856 	bl	24600 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   224a4:	eaffffc7 	b	223c8 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)+0x138>
   224a8:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   224ac:	e3401003 	movt	r1, #3
   224b0:	e30c0d5c 	movw	r0, #52572	@ 0xcd5c
   224b4:	e3400003 	movt	r0, #3
   224b8:	e3a020d0 	mov	r2, #208	@ 0xd0
   224bc:	eb002646 	bl	2bddc <assertion_failed>
   224c0:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   224c4:	e3401003 	movt	r1, #3
   224c8:	e30c0d98 	movw	r0, #52632	@ 0xcd98
   224cc:	e3400003 	movt	r0, #3
   224d0:	e300212b 	movw	r2, #299	@ 0x12b
   224d4:	eb002640 	bl	2bddc <assertion_failed>

000224d8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)>:
   224d8:	e92d4030 	push	{r4, r5, lr}
   224dc:	e3510000 	cmp	r1, #0
   224e0:	e24dd00c 	sub	sp, sp, #12
   224e4:	0a000029 	beq	22590 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xb8>
   224e8:	e1a04002 	mov	r4, r2
   224ec:	e3520000 	cmp	r2, #0
   224f0:	0a00002c 	beq	225a8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xd0>
   224f4:	e28d2004 	add	r2, sp, #4
   224f8:	e280000c 	add	r0, r0, #12
   224fc:	e1a05003 	mov	r5, r3
   22500:	eb0019ce 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   22504:	e3500000 	cmp	r0, #0
   22508:	e5840000 	str	r0, [r4]
   2250c:	0a000017 	beq	22570 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x98>
   22510:	e59d4004 	ldr	r4, [sp, #4]
   22514:	e3540000 	cmp	r4, #0
   22518:	0a000016 	beq	22578 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xa0>
   2251c:	e59d301c 	ldr	r3, [sp, #28]
   22520:	e3530000 	cmp	r3, #0
   22524:	0a000025 	beq	225c0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0xe8>
   22528:	e59d201c 	ldr	r2, [sp, #28]
   2252c:	e3550000 	cmp	r5, #0
   22530:	e5d43000 	ldrb	r3, [r4]
   22534:	e5823000 	str	r3, [r2]
   22538:	0a000026 	beq	225d8 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x100>
   2253c:	e2841001 	add	r1, r4, #1
   22540:	e1a00005 	mov	r0, r5
   22544:	eb001874 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   22548:	e59d3018 	ldr	r3, [sp, #24]
   2254c:	e3530000 	cmp	r3, #0
   22550:	0a000026 	beq	225f0 <CNetworkLayer::Receive(void*, unsigned int*, CIPAddress*, CIPAddress*, int*)+0x118>
   22554:	e59d0018 	ldr	r0, [sp, #24]
   22558:	e2841005 	add	r1, r4, #5
   2255c:	eb00186e 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   22560:	e1a00004 	mov	r0, r4
   22564:	e3a01009 	mov	r1, #9
   22568:	eb004f05 	bl	36184 <operator delete(void*, unsigned int)>
   2256c:	e3a00001 	mov	r0, #1
   22570:	e28dd00c 	add	sp, sp, #12
   22574:	e8bd8030 	pop	{r4, r5, pc}
   22578:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   2257c:	e3401003 	movt	r1, #3
   22580:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   22584:	e3400003 	movt	r0, #3
   22588:	e3a020e2 	mov	r2, #226	@ 0xe2
   2258c:	eb002612 	bl	2bddc <assertion_failed>
   22590:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22594:	e3401003 	movt	r1, #3
   22598:	e30b0400 	movw	r0, #46080	@ 0xb400
   2259c:	e3400003 	movt	r0, #3
   225a0:	e3a020d9 	mov	r2, #217	@ 0xd9
   225a4:	eb00260c 	bl	2bddc <assertion_failed>
   225a8:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   225ac:	e3401003 	movt	r1, #3
   225b0:	e30c0250 	movw	r0, #49744	@ 0xc250
   225b4:	e3400003 	movt	r0, #3
   225b8:	e3a020da 	mov	r2, #218	@ 0xda
   225bc:	eb002606 	bl	2bddc <assertion_failed>
   225c0:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   225c4:	e3401003 	movt	r1, #3
   225c8:	e30c0dbc 	movw	r0, #52668	@ 0xcdbc
   225cc:	e3400003 	movt	r0, #3
   225d0:	e3a020e4 	mov	r2, #228	@ 0xe4
   225d4:	eb002600 	bl	2bddc <assertion_failed>
   225d8:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   225dc:	e3401003 	movt	r1, #3
   225e0:	e30c0dcc 	movw	r0, #52684	@ 0xcdcc
   225e4:	e3400003 	movt	r0, #3
   225e8:	e3a020e7 	mov	r2, #231	@ 0xe7
   225ec:	eb0025fa 	bl	2bddc <assertion_failed>
   225f0:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   225f4:	e3401003 	movt	r1, #3
   225f8:	e30c0ddc 	movw	r0, #52700	@ 0xcddc
   225fc:	e3400003 	movt	r0, #3
   22600:	e3a020ea 	mov	r2, #234	@ 0xea
   22604:	eb0025f4 	bl	2bddc <assertion_failed>

00022608 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)>:
   22608:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2260c:	e2800024 	add	r0, r0, #36	@ 0x24
   22610:	e1a04001 	mov	r4, r1
   22614:	e24dd014 	sub	sp, sp, #20
   22618:	e1a07002 	mov	r7, r2
   2261c:	e1a0100d 	mov	r1, sp
   22620:	e3a02000 	mov	r2, #0
   22624:	e1a05003 	mov	r5, r3
   22628:	e59d6030 	ldr	r6, [sp, #48]	@ 0x30
   2262c:	eb001983 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   22630:	e3500000 	cmp	r0, #0
   22634:	0a000020 	beq	226bc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xb4>
   22638:	e350000e 	cmp	r0, #14
   2263c:	1a000026 	bne	226dc <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xd4>
   22640:	e3540000 	cmp	r4, #0
   22644:	0a00002a 	beq	226f4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xec>
   22648:	e5dd3000 	ldrb	r3, [sp]
   2264c:	e3560000 	cmp	r6, #0
   22650:	e5c43000 	strb	r3, [r4]
   22654:	0a00001a 	beq	226c4 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0xbc>
   22658:	e5dd3001 	ldrb	r3, [sp, #1]
   2265c:	e3570000 	cmp	r7, #0
   22660:	e5863000 	str	r3, [r6]
   22664:	0a000028 	beq	2270c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x104>
   22668:	e28d1002 	add	r1, sp, #2
   2266c:	e1a00007 	mov	r0, r7
   22670:	eb001829 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   22674:	e3550000 	cmp	r5, #0
   22678:	0a000029 	beq	22724 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x11c>
   2267c:	e28d1006 	add	r1, sp, #6
   22680:	e1a00005 	mov	r0, r5
   22684:	eb001824 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   22688:	e59d3028 	ldr	r3, [sp, #40]	@ 0x28
   2268c:	e3530000 	cmp	r3, #0
   22690:	0a000029 	beq	2273c <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x134>
   22694:	e59d202c 	ldr	r2, [sp, #44]	@ 0x2c
   22698:	e1dd30ba 	ldrh	r3, [sp, #10]
   2269c:	e3520000 	cmp	r2, #0
   226a0:	e59d2028 	ldr	r2, [sp, #40]	@ 0x28
   226a4:	e1c230b0 	strh	r3, [r2]
   226a8:	0a000029 	beq	22754 <CNetworkLayer::ReceiveNotification(TICMPNotificationType*, CIPAddress*, CIPAddress*, unsigned short*, unsigned short*, int*)+0x14c>
   226ac:	e59d202c 	ldr	r2, [sp, #44]	@ 0x2c
   226b0:	e3a00001 	mov	r0, #1
   226b4:	e1dd30bc 	ldrh	r3, [sp, #12]
   226b8:	e1c230b0 	strh	r3, [r2]
   226bc:	e28dd014 	add	sp, sp, #20
   226c0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   226c4:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   226c8:	e3401003 	movt	r1, #3
   226cc:	e30c0dbc 	movw	r0, #52668	@ 0xcdbc
   226d0:	e3400003 	movt	r0, #3
   226d4:	e3002103 	movw	r2, #259	@ 0x103
   226d8:	eb0025bf 	bl	2bddc <assertion_failed>
   226dc:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   226e0:	e3401003 	movt	r1, #3
   226e4:	e30c0dec 	movw	r0, #52716	@ 0xcdec
   226e8:	e3400003 	movt	r0, #3
   226ec:	e3a020fe 	mov	r2, #254	@ 0xfe
   226f0:	eb0025b9 	bl	2bddc <assertion_failed>
   226f4:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   226f8:	e3401003 	movt	r1, #3
   226fc:	e30c0e0c 	movw	r0, #52748	@ 0xce0c
   22700:	e3400003 	movt	r0, #3
   22704:	e3a02c01 	mov	r2, #256	@ 0x100
   22708:	eb0025b3 	bl	2bddc <assertion_failed>
   2270c:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22710:	e3401003 	movt	r1, #3
   22714:	e30c0dcc 	movw	r0, #52684	@ 0xcdcc
   22718:	e3400003 	movt	r0, #3
   2271c:	e3002106 	movw	r2, #262	@ 0x106
   22720:	eb0025ad 	bl	2bddc <assertion_failed>
   22724:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22728:	e3401003 	movt	r1, #3
   2272c:	e30c0ddc 	movw	r0, #52700	@ 0xcddc
   22730:	e3400003 	movt	r0, #3
   22734:	e3002109 	movw	r2, #265	@ 0x109
   22738:	eb0025a7 	bl	2bddc <assertion_failed>
   2273c:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22740:	e3401003 	movt	r1, #3
   22744:	e30c0e18 	movw	r0, #52760	@ 0xce18
   22748:	e3400003 	movt	r0, #3
   2274c:	e3a02f43 	mov	r2, #268	@ 0x10c
   22750:	eb0025a1 	bl	2bddc <assertion_failed>
   22754:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   22758:	e3401003 	movt	r1, #3
   2275c:	e30c0e28 	movw	r0, #52776	@ 0xce28
   22760:	e3400003 	movt	r0, #3
   22764:	e300210f 	movw	r2, #271	@ 0x10f
   22768:	eb00259b 	bl	2bddc <assertion_failed>

0002276c <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>:
   2276c:	e2800030 	add	r0, r0, #48	@ 0x30
   22770:	ea00082e 	b	24830 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>

00022774 <CNetworkLayer::GetGateway(unsigned char const*) const>:
   22774:	e92d4010 	push	{r4, lr}
   22778:	e1a04000 	mov	r4, r0
   2277c:	e2800030 	add	r0, r0, #48	@ 0x30
   22780:	eb000865 	bl	2491c <CRouteCache::GetRoute(unsigned char const*) const>
   22784:	e3500000 	cmp	r0, #0
   22788:	18bd8010 	popne	{r4, pc}
   2278c:	e5940000 	ldr	r0, [r4]
   22790:	e3500000 	cmp	r0, #0
   22794:	0a000004 	beq	227ac <CNetworkLayer::GetGateway(unsigned char const*) const+0x38>
   22798:	eb00171b 	bl	2840c <CNetConfig::GetDefaultGateway() const>
   2279c:	e3500000 	cmp	r0, #0
   227a0:	0a000007 	beq	227c4 <CNetworkLayer::GetGateway(unsigned char const*) const+0x50>
   227a4:	e8bd4010 	pop	{r4, lr}
   227a8:	ea00180b 	b	287dc <CIPAddress::Get() const>
   227ac:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   227b0:	e3401003 	movt	r1, #3
   227b4:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   227b8:	e3400003 	movt	r0, #3
   227bc:	e3002122 	movw	r2, #290	@ 0x122
   227c0:	eb002585 	bl	2bddc <assertion_failed>
   227c4:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   227c8:	e3401003 	movt	r1, #3
   227cc:	e30c0e3c 	movw	r0, #52796	@ 0xce3c
   227d0:	e3400003 	movt	r0, #3
   227d4:	e3a02f49 	mov	r2, #292	@ 0x124
   227d8:	eb00257f 	bl	2bddc <assertion_failed>

000227dc <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>:
   227dc:	e5900008 	ldr	r0, [r0, #8]
   227e0:	e3500000 	cmp	r0, #0
   227e4:	0a000000 	beq	227ec <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)+0x10>
   227e8:	ea000784 	b	24600 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>
   227ec:	e30c1d48 	movw	r1, #52552	@ 0xcd48
   227f0:	e3401003 	movt	r1, #3
   227f4:	e30c0d98 	movw	r0, #52632	@ 0xcd98
   227f8:	e3400003 	movt	r0, #3
   227fc:	e92d4010 	push	{r4, lr}
   22800:	e300212b 	movw	r2, #299	@ 0x12b
   22804:	eb002574 	bl	2bddc <assertion_failed>

00022808 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)>:
   22808:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   2280c:	e2803008 	add	r3, r0, #8
   22810:	e92d4010 	push	{r4, lr}
   22814:	e1a04000 	mov	r4, r0
   22818:	e2800010 	add	r0, r0, #16
   2281c:	e8840006 	stm	r4, {r1, r2}
   22820:	f443078f 	vst1.32	{d16}, [r3]
   22824:	eb00187d 	bl	28a20 <CNetQueue::CNetQueue()>
   22828:	e284001c 	add	r0, r4, #28
   2282c:	eb00187b 	bl	28a20 <CNetQueue::CNetQueue()>
   22830:	e2840028 	add	r0, r4, #40	@ 0x28
   22834:	eb001879 	bl	28a20 <CNetQueue::CNetQueue()>
   22838:	e5943000 	ldr	r3, [r4]
   2283c:	e3a02000 	mov	r2, #0
   22840:	e1c423b4 	strh	r2, [r4, #52]	@ 0x34
   22844:	e1530002 	cmp	r3, r2
   22848:	0a000004 	beq	22860 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x58>
   2284c:	e5943004 	ldr	r3, [r4, #4]
   22850:	e3530000 	cmp	r3, #0
   22854:	0a000007 	beq	22878 <CLinkLayer::CLinkLayer(CNetConfig*, CNetDeviceLayer*)+0x70>
   22858:	e1a00004 	mov	r0, r4
   2285c:	e8bd8010 	pop	{r4, pc}
   22860:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22864:	e3401003 	movt	r1, #3
   22868:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   2286c:	e3400003 	movt	r0, #3
   22870:	e3a02025 	mov	r2, #37	@ 0x25
   22874:	eb002558 	bl	2bddc <assertion_failed>
   22878:	e30c1e54 	movw	r1, #52820	@ 0xce54
   2287c:	e3401003 	movt	r1, #3
   22880:	e30c0e64 	movw	r0, #52836	@ 0xce64
   22884:	e3400003 	movt	r0, #3
   22888:	e3a02026 	mov	r2, #38	@ 0x26
   2288c:	eb002552 	bl	2bddc <assertion_failed>

00022890 <CLinkLayer::~CLinkLayer()>:
   22890:	e92d4070 	push	{r4, r5, r6, lr}
   22894:	e1a04000 	mov	r4, r0
   22898:	e590500c 	ldr	r5, [r0, #12]
   2289c:	e3550000 	cmp	r5, #0
   228a0:	0a000004 	beq	228b8 <CLinkLayer::~CLinkLayer()+0x28>
   228a4:	e1a00005 	mov	r0, r5
   228a8:	eb000332 	bl	23578 <CARPHandler::~CARPHandler()>
   228ac:	e3a01f93 	mov	r1, #588	@ 0x24c
   228b0:	e1a00005 	mov	r0, r5
   228b4:	eb004e32 	bl	36184 <operator delete(void*, unsigned int)>
   228b8:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
   228bc:	e2840028 	add	r0, r4, #40	@ 0x28
   228c0:	f4440a8f 	vst1.32	{d16-d17}, [r4]
   228c4:	eb00188e 	bl	28b04 <CNetQueue::~CNetQueue()>
   228c8:	e284001c 	add	r0, r4, #28
   228cc:	eb00188c 	bl	28b04 <CNetQueue::~CNetQueue()>
   228d0:	e2840010 	add	r0, r4, #16
   228d4:	eb00188a 	bl	28b04 <CNetQueue::~CNetQueue()>
   228d8:	e1a00004 	mov	r0, r4
   228dc:	e8bd8070 	pop	{r4, r5, r6, pc}

000228e0 <CLinkLayer::Initialize()>:
   228e0:	e5903000 	ldr	r3, [r0]
   228e4:	e92d4030 	push	{r4, r5, lr}
   228e8:	e3530000 	cmp	r3, #0
   228ec:	e24dd00c 	sub	sp, sp, #12
   228f0:	0a00000d 	beq	2292c <CLinkLayer::Initialize()+0x4c>
   228f4:	e1a04000 	mov	r4, r0
   228f8:	e3a00f93 	mov	r0, #588	@ 0x24c
   228fc:	eb004e08 	bl	36124 <operator new(unsigned int)>
   22900:	e1a03004 	mov	r3, r4
   22904:	e1a05000 	mov	r5, r0
   22908:	e4931010 	ldr	r1, [r3], #16
   2290c:	e58d3000 	str	r3, [sp]
   22910:	e1a03004 	mov	r3, r4
   22914:	e5942004 	ldr	r2, [r4, #4]
   22918:	eb0002e5 	bl	234b4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>
   2291c:	e3a00001 	mov	r0, #1
   22920:	e584500c 	str	r5, [r4, #12]
   22924:	e28dd00c 	add	sp, sp, #12
   22928:	e8bd8030 	pop	{r4, r5, pc}
   2292c:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22930:	e3401003 	movt	r1, #3
   22934:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   22938:	e3400003 	movt	r0, #3
   2293c:	e3a02035 	mov	r2, #53	@ 0x35
   22940:	eb002525 	bl	2bddc <assertion_failed>

00022944 <CLinkLayer::AttachLayer(CNetworkLayer*)>:
   22944:	e5903008 	ldr	r3, [r0, #8]
   22948:	e92d4010 	push	{r4, lr}
   2294c:	e3530000 	cmp	r3, #0
   22950:	1a000008 	bne	22978 <CLinkLayer::AttachLayer(CNetworkLayer*)+0x34>
   22954:	e3510000 	cmp	r1, #0
   22958:	e5801008 	str	r1, [r0, #8]
   2295c:	18bd8010 	popne	{r4, pc}
   22960:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22964:	e3401003 	movt	r1, #3
   22968:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   2296c:	e3400003 	movt	r0, #3
   22970:	e3a02040 	mov	r2, #64	@ 0x40
   22974:	eb002518 	bl	2bddc <assertion_failed>
   22978:	e30c1e54 	movw	r1, #52820	@ 0xce54
   2297c:	e3401003 	movt	r1, #3
   22980:	e30c0e78 	movw	r0, #52856	@ 0xce78
   22984:	e3400003 	movt	r0, #3
   22988:	e3a0203e 	mov	r2, #62	@ 0x3e
   2298c:	eb002512 	bl	2bddc <assertion_failed>

00022990 <CLinkLayer::Process()>:
   22990:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   22994:	e1a04000 	mov	r4, r0
   22998:	e5900004 	ldr	r0, [r0, #4]
   2299c:	e24dde65 	sub	sp, sp, #1616	@ 0x650
   229a0:	e3500000 	cmp	r0, #0
   229a4:	0a00005c 	beq	22b1c <CLinkLayer::Process()+0x18c>
   229a8:	eb000235 	bl	23284 <CNetDeviceLayer::GetMACAddress() const>
   229ac:	e2506000 	subs	r6, r0, #0
   229b0:	0a000044 	beq	22ac8 <CLinkLayer::Process()+0x138>
   229b4:	e5940004 	ldr	r0, [r4, #4]
   229b8:	e3500000 	cmp	r0, #0
   229bc:	0a00005c 	beq	22b34 <CLinkLayer::Process()+0x1a4>
   229c0:	e28d5008 	add	r5, sp, #8
   229c4:	e3007608 	movw	r7, #1544	@ 0x608
   229c8:	e28d2004 	add	r2, sp, #4
   229cc:	e28d1010 	add	r1, sp, #16
   229d0:	eb000234 	bl	232a8 <CNetDeviceLayer::Receive(void*, unsigned int*)>
   229d4:	e3500000 	cmp	r0, #0
   229d8:	0a000036 	beq	22ab8 <CLinkLayer::Process()+0x128>
   229dc:	e59d3004 	ldr	r3, [sp, #4]
   229e0:	e3530d19 	cmp	r3, #1600	@ 0x640
   229e4:	8a00002d 	bhi	22aa0 <CLinkLayer::Process()+0x110>
   229e8:	e353000e 	cmp	r3, #14
   229ec:	9a000016 	bls	22a4c <CLinkLayer::Process()+0xbc>
   229f0:	e28d1010 	add	r1, sp, #16
   229f4:	e1a00005 	mov	r0, r5
   229f8:	eb004cb4 	bl	35cd0 <CMACAddress::CMACAddress(unsigned char const*)>
   229fc:	e1a01006 	mov	r1, r6
   22a00:	e1a00005 	mov	r0, r5
   22a04:	eb004cdd 	bl	35d80 <CMACAddress::operator!=(CMACAddress const&) const>
   22a08:	e3500000 	cmp	r0, #0
   22a0c:	1a000010 	bne	22a54 <CLinkLayer::Process()+0xc4>
   22a10:	e59d2004 	ldr	r2, [sp, #4]
   22a14:	e242200e 	sub	r2, r2, #14
   22a18:	e58d2004 	str	r2, [sp, #4]
   22a1c:	e3520000 	cmp	r2, #0
   22a20:	0a000037 	beq	22b04 <CLinkLayer::Process()+0x174>
   22a24:	e1dd31bc 	ldrh	r3, [sp, #28]
   22a28:	e3530008 	cmp	r3, #8
   22a2c:	0a000014 	beq	22a84 <CLinkLayer::Process()+0xf4>
   22a30:	e1530007 	cmp	r3, r7
   22a34:	0a00000b 	beq	22a68 <CLinkLayer::Process()+0xd8>
   22a38:	e1d423b4 	ldrh	r2, [r4, #52]	@ 0x34
   22a3c:	e1520003 	cmp	r2, r3
   22a40:	0a000022 	beq	22ad0 <CLinkLayer::Process()+0x140>
   22a44:	e1a00005 	mov	r0, r5
   22a48:	eb004cb1 	bl	35d14 <CMACAddress::~CMACAddress()>
   22a4c:	e5940004 	ldr	r0, [r4, #4]
   22a50:	eaffffdc 	b	229c8 <CLinkLayer::Process()+0x38>
   22a54:	e1a00005 	mov	r0, r5
   22a58:	eb004d1f 	bl	35edc <CMACAddress::IsBroadcast() const>
   22a5c:	e3500000 	cmp	r0, #0
   22a60:	1affffea 	bne	22a10 <CLinkLayer::Process()+0x80>
   22a64:	eafffff6 	b	22a44 <CLinkLayer::Process()+0xb4>
   22a68:	e2840010 	add	r0, r4, #16
   22a6c:	e3a03000 	mov	r3, #0
   22a70:	e28d101e 	add	r1, sp, #30
   22a74:	eb001827 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   22a78:	e1a00005 	mov	r0, r5
   22a7c:	eb004ca4 	bl	35d14 <CMACAddress::~CMACAddress()>
   22a80:	eafffff1 	b	22a4c <CLinkLayer::Process()+0xbc>
   22a84:	e284001c 	add	r0, r4, #28
   22a88:	e3a03000 	mov	r3, #0
   22a8c:	e28d101e 	add	r1, sp, #30
   22a90:	eb001820 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   22a94:	e1a00005 	mov	r0, r5
   22a98:	eb004c9d 	bl	35d14 <CMACAddress::~CMACAddress()>
   22a9c:	eaffffea 	b	22a4c <CLinkLayer::Process()+0xbc>
   22aa0:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22aa4:	e3401003 	movt	r1, #3
   22aa8:	e30c054c 	movw	r0, #50508	@ 0xc54c
   22aac:	e3400003 	movt	r0, #3
   22ab0:	e3a02051 	mov	r2, #81	@ 0x51
   22ab4:	eb0024c8 	bl	2bddc <assertion_failed>
   22ab8:	e594000c 	ldr	r0, [r4, #12]
   22abc:	e3500000 	cmp	r0, #0
   22ac0:	0a000021 	beq	22b4c <CLinkLayer::Process()+0x1bc>
   22ac4:	eb00039a 	bl	23934 <CARPHandler::Process()>
   22ac8:	e28dde65 	add	sp, sp, #1616	@ 0x650
   22acc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   22ad0:	e3a00006 	mov	r0, #6
   22ad4:	eb004d92 	bl	36124 <operator new(unsigned int)>
   22ad8:	e28d3010 	add	r3, sp, #16
   22adc:	e3a02006 	mov	r2, #6
   22ae0:	e1a08000 	mov	r8, r0
   22ae4:	e0831002 	add	r1, r3, r2
   22ae8:	eb004b85 	bl	35904 <memcpy>
   22aec:	e59d2004 	ldr	r2, [sp, #4]
   22af0:	e1a03008 	mov	r3, r8
   22af4:	e28d101e 	add	r1, sp, #30
   22af8:	e2840028 	add	r0, r4, #40	@ 0x28
   22afc:	eb001805 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   22b00:	eaffffcf 	b	22a44 <CLinkLayer::Process()+0xb4>
   22b04:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22b08:	e3401003 	movt	r1, #3
   22b0c:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   22b10:	e3400003 	movt	r0, #3
   22b14:	e3a02060 	mov	r2, #96	@ 0x60
   22b18:	eb0024af 	bl	2bddc <assertion_failed>
   22b1c:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22b20:	e3401003 	movt	r1, #3
   22b24:	e30c0e64 	movw	r0, #52836	@ 0xce64
   22b28:	e3400003 	movt	r0, #3
   22b2c:	e3a02045 	mov	r2, #69	@ 0x45
   22b30:	eb0024a9 	bl	2bddc <assertion_failed>
   22b34:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22b38:	e3401003 	movt	r1, #3
   22b3c:	e30c0e64 	movw	r0, #52836	@ 0xce64
   22b40:	e3400003 	movt	r0, #3
   22b44:	e3a0204c 	mov	r2, #76	@ 0x4c
   22b48:	eb0024a3 	bl	2bddc <assertion_failed>
   22b4c:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22b50:	e3401003 	movt	r1, #3
   22b54:	e30c0e90 	movw	r0, #52880	@ 0xce90
   22b58:	e3400003 	movt	r0, #3
   22b5c:	e3a0207a 	mov	r2, #122	@ 0x7a
   22b60:	eb00249d 	bl	2bddc <assertion_failed>

00022b64 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)>:
   22b64:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   22b68:	e243c001 	sub	ip, r3, #1
   22b6c:	e1a04003 	mov	r4, r3
   22b70:	e28db01c 	add	fp, sp, #28
   22b74:	e3003631 	movw	r3, #1585	@ 0x631
   22b78:	e24dd010 	sub	sp, sp, #16
   22b7c:	e15c0003 	cmp	ip, r3
   22b80:	8a000033 	bhi	22c54 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xf0>
   22b84:	e2843015 	add	r3, r4, #21
   22b88:	e1a05000 	mov	r5, r0
   22b8c:	e3c33007 	bic	r3, r3, #7
   22b90:	e5900004 	ldr	r0, [r0, #4]
   22b94:	e04dd003 	sub	sp, sp, r3
   22b98:	e284900e 	add	r9, r4, #14
   22b9c:	e3500000 	cmp	r0, #0
   22ba0:	e28d8008 	add	r8, sp, #8
   22ba4:	0a000043 	beq	22cb8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x154>
   22ba8:	e1a07001 	mov	r7, r1
   22bac:	e1a06002 	mov	r6, r2
   22bb0:	eb0001b3 	bl	23284 <CNetDeviceLayer::GetMACAddress() const>
   22bb4:	e3500000 	cmp	r0, #0
   22bb8:	0a000044 	beq	22cd0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x16c>
   22bbc:	e28d100e 	add	r1, sp, #14
   22bc0:	eb004cad 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   22bc4:	e3a03000 	mov	r3, #0
   22bc8:	e3560000 	cmp	r6, #0
   22bcc:	e5c8300d 	strb	r3, [r8, #13]
   22bd0:	e3a03008 	mov	r3, #8
   22bd4:	e5c8300c 	strb	r3, [r8, #12]
   22bd8:	0a000030 	beq	22ca0 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x13c>
   22bdc:	e1a02004 	mov	r2, r4
   22be0:	e1a01006 	mov	r1, r6
   22be4:	e28d0016 	add	r0, sp, #22
   22be8:	eb004b45 	bl	35904 <memcpy>
   22bec:	e5953000 	ldr	r3, [r5]
   22bf0:	e3530000 	cmp	r3, #0
   22bf4:	0a00003b 	beq	22ce8 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x184>
   22bf8:	e595300c 	ldr	r3, [r5, #12]
   22bfc:	e3530000 	cmp	r3, #0
   22c00:	0a00003e 	beq	22d00 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0x19c>
   22c04:	e24b0024 	sub	r0, fp, #36	@ 0x24
   22c08:	eb004c2d 	bl	35cc4 <CMACAddress::CMACAddress()>
   22c0c:	e1a00007 	mov	r0, r7
   22c10:	eb001723 	bl	288a4 <CIPAddress::IsBroadcast() const>
   22c14:	e3500000 	cmp	r0, #0
   22c18:	0a000010 	beq	22c60 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xfc>
   22c1c:	e24b0024 	sub	r0, fp, #36	@ 0x24
   22c20:	eb004c80 	bl	35e28 <CMACAddress::SetBroadcast()>
   22c24:	e1a01008 	mov	r1, r8
   22c28:	e24b0024 	sub	r0, fp, #36	@ 0x24
   22c2c:	eb004c92 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   22c30:	e5950004 	ldr	r0, [r5, #4]
   22c34:	e1a02009 	mov	r2, r9
   22c38:	e1a01008 	mov	r1, r8
   22c3c:	eb000196 	bl	2329c <CNetDeviceLayer::Send(void const*, unsigned int)>
   22c40:	e24b0024 	sub	r0, fp, #36	@ 0x24
   22c44:	eb004c32 	bl	35d14 <CMACAddress::~CMACAddress()>
   22c48:	e3a00001 	mov	r0, #1
   22c4c:	e24bd01c 	sub	sp, fp, #28
   22c50:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22c54:	e3a00000 	mov	r0, #0
   22c58:	e24bd01c 	sub	sp, fp, #28
   22c5c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   22c60:	e5950000 	ldr	r0, [r5]
   22c64:	eb0015ec 	bl	2841c <CNetConfig::GetBroadcastAddress() const>
   22c68:	e1a01000 	mov	r1, r0
   22c6c:	e1a00007 	mov	r0, r7
   22c70:	eb001623 	bl	28504 <CIPAddress::operator==(CIPAddress const&) const>
   22c74:	e3500000 	cmp	r0, #0
   22c78:	1affffe7 	bne	22c1c <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xb8>
   22c7c:	e58d9000 	str	r9, [sp]
   22c80:	e1a03008 	mov	r3, r8
   22c84:	e1a01007 	mov	r1, r7
   22c88:	e24b2024 	sub	r2, fp, #36	@ 0x24
   22c8c:	e595000c 	ldr	r0, [r5, #12]
   22c90:	eb000427 	bl	23d34 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>
   22c94:	e3500000 	cmp	r0, #0
   22c98:	1affffe1 	bne	22c24 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xc0>
   22c9c:	eaffffe7 	b	22c40 <CLinkLayer::Send(CIPAddress const&, void const*, unsigned int)+0xdc>
   22ca0:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22ca4:	e3401003 	movt	r1, #3
   22ca8:	e30c0eb8 	movw	r0, #52920	@ 0xceb8
   22cac:	e3400003 	movt	r0, #3
   22cb0:	e3a02091 	mov	r2, #145	@ 0x91
   22cb4:	eb002448 	bl	2bddc <assertion_failed>
   22cb8:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22cbc:	e3401003 	movt	r1, #3
   22cc0:	e30c0e64 	movw	r0, #52836	@ 0xce64
   22cc4:	e3400003 	movt	r0, #3
   22cc8:	e3a0208a 	mov	r2, #138	@ 0x8a
   22ccc:	eb002442 	bl	2bddc <assertion_failed>
   22cd0:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22cd4:	e3401003 	movt	r1, #3
   22cd8:	e30c0ea4 	movw	r0, #52900	@ 0xcea4
   22cdc:	e3400003 	movt	r0, #3
   22ce0:	e3a0208c 	mov	r2, #140	@ 0x8c
   22ce4:	eb00243c 	bl	2bddc <assertion_failed>
   22ce8:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22cec:	e3401003 	movt	r1, #3
   22cf0:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   22cf4:	e3400003 	movt	r0, #3
   22cf8:	e3a02095 	mov	r2, #149	@ 0x95
   22cfc:	eb002436 	bl	2bddc <assertion_failed>
   22d00:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22d04:	e3401003 	movt	r1, #3
   22d08:	e30c0e90 	movw	r0, #52880	@ 0xce90
   22d0c:	e3400003 	movt	r0, #3
   22d10:	e3a02096 	mov	r2, #150	@ 0x96
   22d14:	eb002430 	bl	2bddc <assertion_failed>

00022d18 <CLinkLayer::Receive(void*, unsigned int*)>:
   22d18:	e3510000 	cmp	r1, #0
   22d1c:	e92d4010 	push	{r4, lr}
   22d20:	0a000009 	beq	22d4c <CLinkLayer::Receive(void*, unsigned int*)+0x34>
   22d24:	e1a04002 	mov	r4, r2
   22d28:	e3520000 	cmp	r2, #0
   22d2c:	0a00000c 	beq	22d64 <CLinkLayer::Receive(void*, unsigned int*)+0x4c>
   22d30:	e3a02000 	mov	r2, #0
   22d34:	e280001c 	add	r0, r0, #28
   22d38:	eb0017c0 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   22d3c:	e5840000 	str	r0, [r4]
   22d40:	e2500000 	subs	r0, r0, #0
   22d44:	13a00001 	movne	r0, #1
   22d48:	e8bd8010 	pop	{r4, pc}
   22d4c:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22d50:	e3401003 	movt	r1, #3
   22d54:	e30b0400 	movw	r0, #46080	@ 0xb400
   22d58:	e3400003 	movt	r0, #3
   22d5c:	e3a020ac 	mov	r2, #172	@ 0xac
   22d60:	eb00241d 	bl	2bddc <assertion_failed>
   22d64:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22d68:	e3401003 	movt	r1, #3
   22d6c:	e30c0250 	movw	r0, #49744	@ 0xc250
   22d70:	e3400003 	movt	r0, #3
   22d74:	e3a020ad 	mov	r2, #173	@ 0xad
   22d78:	eb002417 	bl	2bddc <assertion_failed>

00022d7c <CLinkLayer::SendRaw(void const*, unsigned int)>:
   22d7c:	e3510000 	cmp	r1, #0
   22d80:	e92d4010 	push	{r4, lr}
   22d84:	0a000007 	beq	22da8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x2c>
   22d88:	e3520000 	cmp	r2, #0
   22d8c:	0a00000b 	beq	22dc0 <CLinkLayer::SendRaw(void const*, unsigned int)+0x44>
   22d90:	e5900004 	ldr	r0, [r0, #4]
   22d94:	e3500000 	cmp	r0, #0
   22d98:	0a00000e 	beq	22dd8 <CLinkLayer::SendRaw(void const*, unsigned int)+0x5c>
   22d9c:	eb00013e 	bl	2329c <CNetDeviceLayer::Send(void const*, unsigned int)>
   22da0:	e3a00001 	mov	r0, #1
   22da4:	e8bd8010 	pop	{r4, pc}
   22da8:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22dac:	e3401003 	movt	r1, #3
   22db0:	e30c0ec8 	movw	r0, #52936	@ 0xcec8
   22db4:	e3400003 	movt	r0, #3
   22db8:	e3a020b5 	mov	r2, #181	@ 0xb5
   22dbc:	eb002406 	bl	2bddc <assertion_failed>
   22dc0:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22dc4:	e3401003 	movt	r1, #3
   22dc8:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   22dcc:	e3400003 	movt	r0, #3
   22dd0:	e3a020b6 	mov	r2, #182	@ 0xb6
   22dd4:	eb002400 	bl	2bddc <assertion_failed>
   22dd8:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22ddc:	e3401003 	movt	r1, #3
   22de0:	e30c0e64 	movw	r0, #52836	@ 0xce64
   22de4:	e3400003 	movt	r0, #3
   22de8:	e3a020b7 	mov	r2, #183	@ 0xb7
   22dec:	eb0023fa 	bl	2bddc <assertion_failed>

00022df0 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)>:
   22df0:	e92d4030 	push	{r4, r5, lr}
   22df4:	e3510000 	cmp	r1, #0
   22df8:	e24dd00c 	sub	sp, sp, #12
   22dfc:	0a00001a 	beq	22e6c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x7c>
   22e00:	e1a04002 	mov	r4, r2
   22e04:	e3520000 	cmp	r2, #0
   22e08:	0a00001d 	beq	22e84 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x94>
   22e0c:	e28d2004 	add	r2, sp, #4
   22e10:	e2800028 	add	r0, r0, #40	@ 0x28
   22e14:	e1a05003 	mov	r5, r3
   22e18:	eb001788 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   22e1c:	e3500000 	cmp	r0, #0
   22e20:	e5840000 	str	r0, [r4]
   22e24:	0a00000b 	beq	22e58 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x68>
   22e28:	e59d4004 	ldr	r4, [sp, #4]
   22e2c:	e3550000 	cmp	r5, #0
   22e30:	0a00000a 	beq	22e60 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x70>
   22e34:	e3540000 	cmp	r4, #0
   22e38:	0a000017 	beq	22e9c <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0xac>
   22e3c:	e1a01004 	mov	r1, r4
   22e40:	e1a00005 	mov	r0, r5
   22e44:	eb004be7 	bl	35de8 <CMACAddress::Set(unsigned char const*)>
   22e48:	e3a01006 	mov	r1, #6
   22e4c:	e1a00004 	mov	r0, r4
   22e50:	eb004ccb 	bl	36184 <operator delete(void*, unsigned int)>
   22e54:	e3a00001 	mov	r0, #1
   22e58:	e28dd00c 	add	sp, sp, #12
   22e5c:	e8bd8030 	pop	{r4, r5, pc}
   22e60:	e3540000 	cmp	r4, #0
   22e64:	0afffffa 	beq	22e54 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x64>
   22e68:	eafffff6 	b	22e48 <CLinkLayer::ReceiveRaw(void*, unsigned int*, CMACAddress*)+0x58>
   22e6c:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22e70:	e3401003 	movt	r1, #3
   22e74:	e30b0400 	movw	r0, #46080	@ 0xb400
   22e78:	e3400003 	movt	r0, #3
   22e7c:	e3a020c0 	mov	r2, #192	@ 0xc0
   22e80:	eb0023d5 	bl	2bddc <assertion_failed>
   22e84:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22e88:	e3401003 	movt	r1, #3
   22e8c:	e30c0250 	movw	r0, #49744	@ 0xc250
   22e90:	e3400003 	movt	r0, #3
   22e94:	e3a020c1 	mov	r2, #193	@ 0xc1
   22e98:	eb0023cf 	bl	2bddc <assertion_failed>
   22e9c:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22ea0:	e3401003 	movt	r1, #3
   22ea4:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   22ea8:	e3400003 	movt	r0, #3
   22eac:	e3a020cc 	mov	r2, #204	@ 0xcc
   22eb0:	eb0023c9 	bl	2bddc <assertion_failed>

00022eb4 <CLinkLayer::EnableReceiveRaw(unsigned short)>:
   22eb4:	e1d023b4 	ldrh	r2, [r0, #52]	@ 0x34
   22eb8:	e3520000 	cmp	r2, #0
   22ebc:	1a000006 	bne	22edc <CLinkLayer::EnableReceiveRaw(unsigned short)+0x28>
   22ec0:	e3510000 	cmp	r1, #0
   22ec4:	0a000006 	beq	22ee4 <CLinkLayer::EnableReceiveRaw(unsigned short)+0x30>
   22ec8:	e1a03000 	mov	r3, r0
   22ecc:	e6bf1fb1 	rev16	r1, r1
   22ed0:	e3a00001 	mov	r0, #1
   22ed4:	e1c313b4 	strh	r1, [r3, #52]	@ 0x34
   22ed8:	e12fff1e 	bx	lr
   22edc:	e3a00000 	mov	r0, #0
   22ee0:	e12fff1e 	bx	lr
   22ee4:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22ee8:	e3401003 	movt	r1, #3
   22eec:	e30c0ed4 	movw	r0, #52948	@ 0xced4
   22ef0:	e3400003 	movt	r0, #3
   22ef4:	e3a020dc 	mov	r2, #220	@ 0xdc
   22ef8:	e92d4010 	push	{r4, lr}
   22efc:	eb0023b6 	bl	2bddc <assertion_failed>

00022f00 <CLinkLayer::ResolveFailed(void const*, unsigned int)>:
   22f00:	e3510000 	cmp	r1, #0
   22f04:	e92d4010 	push	{r4, lr}
   22f08:	0a000009 	beq	22f34 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x34>
   22f0c:	e352000e 	cmp	r2, #14
   22f10:	9a00000d 	bls	22f4c <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x4c>
   22f14:	e5900008 	ldr	r0, [r0, #8]
   22f18:	e3500000 	cmp	r0, #0
   22f1c:	0a000010 	beq	22f64 <CLinkLayer::ResolveFailed(void const*, unsigned int)+0x64>
   22f20:	e242300e 	sub	r3, r2, #14
   22f24:	e281200e 	add	r2, r1, #14
   22f28:	e8bd4010 	pop	{r4, lr}
   22f2c:	e3a01001 	mov	r1, #1
   22f30:	eafffe29 	b	227dc <CNetworkLayer::SendFailed(unsigned int, void const*, unsigned int)>
   22f34:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22f38:	e3401003 	movt	r1, #3
   22f3c:	e30c0ee8 	movw	r0, #52968	@ 0xcee8
   22f40:	e3400003 	movt	r0, #3
   22f44:	e3a020e4 	mov	r2, #228	@ 0xe4
   22f48:	eb0023a3 	bl	2bddc <assertion_failed>
   22f4c:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22f50:	e3401003 	movt	r1, #3
   22f54:	e30c0efc 	movw	r0, #52988	@ 0xcefc
   22f58:	e3400003 	movt	r0, #3
   22f5c:	e3a020e5 	mov	r2, #229	@ 0xe5
   22f60:	eb00239d 	bl	2bddc <assertion_failed>
   22f64:	e30c1e54 	movw	r1, #52820	@ 0xce54
   22f68:	e3401003 	movt	r1, #3
   22f6c:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   22f70:	e3400003 	movt	r0, #3
   22f74:	e3a020e6 	mov	r2, #230	@ 0xe6
   22f78:	eb002397 	bl	2bddc <assertion_failed>

00022f7c <CNetDeviceLayer::CNetDeviceLayer(CNetConfig*, TNetDeviceType)>:
   22f7c:	e92d4010 	push	{r4, lr}
   22f80:	e1a04000 	mov	r4, r0
   22f84:	e3a03000 	mov	r3, #0
   22f88:	e280000c 	add	r0, r0, #12
   22f8c:	e5c42000 	strb	r2, [r4]
   22f90:	e984000a 	stmib	r4, {r1, r3}
   22f94:	eb0016a1 	bl	28a20 <CNetQueue::CNetQueue()>
   22f98:	e2840018 	add	r0, r4, #24
   22f9c:	eb00169f 	bl	28a20 <CNetQueue::CNetQueue()>
   22fa0:	e1a00004 	mov	r0, r4
   22fa4:	e8bd8010 	pop	{r4, pc}

00022fa8 <CNetDeviceLayer::~CNetDeviceLayer()>:
   22fa8:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   22fac:	e2803004 	add	r3, r0, #4
   22fb0:	e92d4010 	push	{r4, lr}
   22fb4:	e1a04000 	mov	r4, r0
   22fb8:	e2800018 	add	r0, r0, #24
   22fbc:	f443078f 	vst1.32	{d16}, [r3]
   22fc0:	eb0016cf 	bl	28b04 <CNetQueue::~CNetQueue()>
   22fc4:	e284000c 	add	r0, r4, #12
   22fc8:	eb0016cd 	bl	28b04 <CNetQueue::~CNetQueue()>
   22fcc:	e1a00004 	mov	r0, r4
   22fd0:	e8bd8010 	pop	{r4, pc}

00022fd4 <CNetDeviceLayer::Initialize(bool)>:
   22fd4:	e3510000 	cmp	r1, #0
   22fd8:	0a000050 	beq	23120 <CNetDeviceLayer::Initialize(bool)+0x14c>
   22fdc:	e92d4070 	push	{r4, r5, r6, lr}
   22fe0:	e1a04000 	mov	r4, r0
   22fe4:	e5903008 	ldr	r3, [r0, #8]
   22fe8:	e24dd008 	sub	sp, sp, #8
   22fec:	e3530000 	cmp	r3, #0
   22ff0:	1a00004c 	bne	23128 <CNetDeviceLayer::Initialize(bool)+0x154>
   22ff4:	e5d00000 	ldrb	r0, [r0]
   22ff8:	eb004c08 	bl	36020 <CNetDevice::GetNetDevice(TNetDeviceType)>
   22ffc:	e1a05000 	mov	r5, r0
   23000:	e3500000 	cmp	r0, #0
   23004:	e5840008 	str	r0, [r4, #8]
   23008:	0a00003a 	beq	230f8 <CNetDeviceLayer::Initialize(bool)+0x124>
   2300c:	e3a000f8 	mov	r0, #248	@ 0xf8
   23010:	e30d6428 	movw	r6, #54312	@ 0xd428
   23014:	e3406001 	movt	r6, #1
   23018:	eb004c41 	bl	36124 <operator new(unsigned int)>
   2301c:	e5941008 	ldr	r1, [r4, #8]
   23020:	eb0000e9 	bl	233cc <CPHYTask::CPHYTask(CNetDevice*)>
   23024:	eb004803 	bl	35038 <CTimer::Get()>
   23028:	eb004530 	bl	344f0 <CTimer::GetTicks() const>
   2302c:	e1a05000 	mov	r5, r0
   23030:	eb004800 	bl	35038 <CTimer::Get()>
   23034:	eb00452d 	bl	344f0 <CTimer::GetTicks() const>
   23038:	e0403005 	sub	r3, r0, r5
   2303c:	e3530e19 	cmp	r3, #400	@ 0x190
   23040:	2a000023 	bcs	230d4 <CNetDeviceLayer::Initialize(bool)+0x100>
   23044:	e5940008 	ldr	r0, [r4, #8]
   23048:	e5902000 	ldr	r2, [r0]
   2304c:	e592301c 	ldr	r3, [r2, #28]
   23050:	e1530006 	cmp	r3, r6
   23054:	1a000018 	bne	230bc <CNetDeviceLayer::Initialize(bool)+0xe8>
   23058:	e5922020 	ldr	r2, [r2, #32]
   2305c:	e30d3430 	movw	r3, #54320	@ 0xd430
   23060:	e3403001 	movt	r3, #1
   23064:	e1520003 	cmp	r2, r3
   23068:	0a000020 	beq	230f0 <CNetDeviceLayer::Initialize(bool)+0x11c>
   2306c:	e12fff32 	blx	r2
   23070:	e1a05000 	mov	r5, r0
   23074:	e3500006 	cmp	r0, #6
   23078:	0a00001c 	beq	230f0 <CNetDeviceLayer::Initialize(bool)+0x11c>
   2307c:	eb002dd1 	bl	2e7c8 <CLogger::Get()>
   23080:	e1a04000 	mov	r4, r0
   23084:	e1a00005 	mov	r0, r5
   23088:	eb004bd5 	bl	35fe4 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>
   2308c:	e3a02003 	mov	r2, #3
   23090:	e1a0c000 	mov	ip, r0
   23094:	e30c3f5c 	movw	r3, #53084	@ 0xcf5c
   23098:	e3403003 	movt	r3, #3
   2309c:	e1a00004 	mov	r0, r4
   230a0:	e3011dc0 	movw	r1, #7616	@ 0x1dc0
   230a4:	e3401004 	movt	r1, #4
   230a8:	e58dc000 	str	ip, [sp]
   230ac:	eb002f8e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   230b0:	e3a00001 	mov	r0, #1
   230b4:	e28dd008 	add	sp, sp, #8
   230b8:	e8bd8070 	pop	{r4, r5, r6, pc}
   230bc:	e12fff33 	blx	r3
   230c0:	e3500000 	cmp	r0, #0
   230c4:	0affffd9 	beq	23030 <CNetDeviceLayer::Initialize(bool)+0x5c>
   230c8:	e5940008 	ldr	r0, [r4, #8]
   230cc:	e5902000 	ldr	r2, [r0]
   230d0:	eaffffe0 	b	23058 <CNetDeviceLayer::Initialize(bool)+0x84>
   230d4:	eb002dbb 	bl	2e7c8 <CLogger::Get()>
   230d8:	e30c3f4c 	movw	r3, #53068	@ 0xcf4c
   230dc:	e3403003 	movt	r3, #3
   230e0:	e3011dc0 	movw	r1, #7616	@ 0x1dc0
   230e4:	e3401004 	movt	r1, #4
   230e8:	e3a02002 	mov	r2, #2
   230ec:	eb002f7e 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   230f0:	e3a00001 	mov	r0, #1
   230f4:	eaffffee 	b	230b4 <CNetDeviceLayer::Initialize(bool)+0xe0>
   230f8:	eb002db2 	bl	2e7c8 <CLogger::Get()>
   230fc:	e3a02001 	mov	r2, #1
   23100:	e30c3f30 	movw	r3, #53040	@ 0xcf30
   23104:	e3403003 	movt	r3, #3
   23108:	e3011dc0 	movw	r1, #7616	@ 0x1dc0
   2310c:	e3401004 	movt	r1, #4
   23110:	eb002f75 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23114:	e1a00005 	mov	r0, r5
   23118:	e28dd008 	add	sp, sp, #8
   2311c:	e8bd8070 	pop	{r4, r5, r6, pc}
   23120:	e3a00001 	mov	r0, #1
   23124:	e12fff1e 	bx	lr
   23128:	e30c1f20 	movw	r1, #53024	@ 0xcf20
   2312c:	e3401003 	movt	r1, #3
   23130:	e30a0550 	movw	r0, #42320	@ 0xa550
   23134:	e3400003 	movt	r0, #3
   23138:	e3a02039 	mov	r2, #57	@ 0x39
   2313c:	eb002326 	bl	2bddc <assertion_failed>

00023140 <CNetDeviceLayer::Process()>:
   23140:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   23144:	e1a05000 	mov	r5, r0
   23148:	e5900008 	ldr	r0, [r0, #8]
   2314c:	e24ddd1a 	sub	sp, sp, #1664	@ 0x680
   23150:	e24dd004 	sub	sp, sp, #4
   23154:	e3500000 	cmp	r0, #0
   23158:	e28d4047 	add	r4, sp, #71	@ 0x47
   2315c:	e3c4403f 	bic	r4, r4, #63	@ 0x3f
   23160:	0a00003c 	beq	23258 <CNetDeviceLayer::Process()+0x118>
   23164:	e30b66a8 	movw	r6, #46760	@ 0xb6a8
   23168:	e3406001 	movt	r6, #1
   2316c:	e285700c 	add	r7, r5, #12
   23170:	ea00000f 	b	231b4 <CNetDeviceLayer::Process()+0x74>
   23174:	e3a02000 	mov	r2, #0
   23178:	e1a01004 	mov	r1, r4
   2317c:	e1a00007 	mov	r0, r7
   23180:	eb0016ae 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   23184:	e1a02000 	mov	r2, r0
   23188:	e3500000 	cmp	r0, #0
   2318c:	e58d0004 	str	r0, [sp, #4]
   23190:	0a00000e 	beq	231d0 <CNetDeviceLayer::Process()+0x90>
   23194:	e5950008 	ldr	r0, [r5, #8]
   23198:	e1a01004 	mov	r1, r4
   2319c:	e5903000 	ldr	r3, [r0]
   231a0:	e5933014 	ldr	r3, [r3, #20]
   231a4:	e12fff33 	blx	r3
   231a8:	e3500000 	cmp	r0, #0
   231ac:	0a000021 	beq	23238 <CNetDeviceLayer::Process()+0xf8>
   231b0:	e5950008 	ldr	r0, [r5, #8]
   231b4:	e5903000 	ldr	r3, [r0]
   231b8:	e5933010 	ldr	r3, [r3, #16]
   231bc:	e1530006 	cmp	r3, r6
   231c0:	0affffeb 	beq	23174 <CNetDeviceLayer::Process()+0x34>
   231c4:	e12fff33 	blx	r3
   231c8:	e3500000 	cmp	r0, #0
   231cc:	1affffe8 	bne	23174 <CNetDeviceLayer::Process()+0x34>
   231d0:	e2856018 	add	r6, r5, #24
   231d4:	ea000003 	b	231e8 <CNetDeviceLayer::Process()+0xa8>
   231d8:	e3a03000 	mov	r3, #0
   231dc:	e1a01004 	mov	r1, r4
   231e0:	e1a00006 	mov	r0, r6
   231e4:	eb00164b 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   231e8:	e5950008 	ldr	r0, [r5, #8]
   231ec:	e28d2004 	add	r2, sp, #4
   231f0:	e1a01004 	mov	r1, r4
   231f4:	e5903000 	ldr	r3, [r0]
   231f8:	e5933018 	ldr	r3, [r3, #24]
   231fc:	e12fff33 	blx	r3
   23200:	e3500000 	cmp	r0, #0
   23204:	0a000008 	beq	2322c <CNetDeviceLayer::Process()+0xec>
   23208:	e59d2004 	ldr	r2, [sp, #4]
   2320c:	e3520000 	cmp	r2, #0
   23210:	1afffff0 	bne	231d8 <CNetDeviceLayer::Process()+0x98>
   23214:	e30c1f20 	movw	r1, #53024	@ 0xcf20
   23218:	e3401003 	movt	r1, #3
   2321c:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   23220:	e3400003 	movt	r0, #3
   23224:	e3a02077 	mov	r2, #119	@ 0x77
   23228:	eb0022eb 	bl	2bddc <assertion_failed>
   2322c:	e28ddd1a 	add	sp, sp, #1664	@ 0x680
   23230:	e28dd004 	add	sp, sp, #4
   23234:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   23238:	eb002d62 	bl	2e7c8 <CLogger::Get()>
   2323c:	e3a02002 	mov	r2, #2
   23240:	e30c3f68 	movw	r3, #53096	@ 0xcf68
   23244:	e3403003 	movt	r3, #3
   23248:	e3011dc0 	movw	r1, #7616	@ 0x1dc0
   2324c:	e3401004 	movt	r1, #4
   23250:	eb002f25 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   23254:	eaffffdd 	b	231d0 <CNetDeviceLayer::Process()+0x90>
   23258:	e5d50000 	ldrb	r0, [r5]
   2325c:	eb004b6f 	bl	36020 <CNetDevice::GetNetDevice(TNetDeviceType)>
   23260:	e3500000 	cmp	r0, #0
   23264:	e5850008 	str	r0, [r5, #8]
   23268:	0affffef 	beq	2322c <CNetDeviceLayer::Process()+0xec>
   2326c:	e3a000f8 	mov	r0, #248	@ 0xf8
   23270:	eb004bab 	bl	36124 <operator new(unsigned int)>
   23274:	e5951008 	ldr	r1, [r5, #8]
   23278:	eb000053 	bl	233cc <CPHYTask::CPHYTask(CNetDevice*)>
   2327c:	e5950008 	ldr	r0, [r5, #8]
   23280:	eaffffb7 	b	23164 <CNetDeviceLayer::Process()+0x24>

00023284 <CNetDeviceLayer::GetMACAddress() const>:
   23284:	e5900008 	ldr	r0, [r0, #8]
   23288:	e3500000 	cmp	r0, #0
   2328c:	012fff1e 	bxeq	lr
   23290:	e5903000 	ldr	r3, [r0]
   23294:	e593300c 	ldr	r3, [r3, #12]
   23298:	e12fff13 	bx	r3

0002329c <CNetDeviceLayer::Send(void const*, unsigned int)>:
   2329c:	e3a03000 	mov	r3, #0
   232a0:	e280000c 	add	r0, r0, #12
   232a4:	ea00161b 	b	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>

000232a8 <CNetDeviceLayer::Receive(void*, unsigned int*)>:
   232a8:	e92d4010 	push	{r4, lr}
   232ac:	e2800018 	add	r0, r0, #24
   232b0:	e1a04002 	mov	r4, r2
   232b4:	e3a02000 	mov	r2, #0
   232b8:	eb001660 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   232bc:	e2503000 	subs	r3, r0, #0
   232c0:	0a000004 	beq	232d8 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x30>
   232c4:	e3540000 	cmp	r4, #0
   232c8:	0a000004 	beq	232e0 <CNetDeviceLayer::Receive(void*, unsigned int*)+0x38>
   232cc:	e3a00001 	mov	r0, #1
   232d0:	e5843000 	str	r3, [r4]
   232d4:	e8bd8010 	pop	{r4, pc}
   232d8:	e1a00003 	mov	r0, r3
   232dc:	e8bd8010 	pop	{r4, pc}
   232e0:	e30c1f20 	movw	r1, #53024	@ 0xcf20
   232e4:	e3401003 	movt	r1, #3
   232e8:	e30c0250 	movw	r0, #49744	@ 0xc250
   232ec:	e3400003 	movt	r0, #3
   232f0:	e3a02093 	mov	r2, #147	@ 0x93
   232f4:	eb0022b8 	bl	2bddc <assertion_failed>

000232f8 <CNetDeviceLayer::IsRunning() const>:
   232f8:	e5900008 	ldr	r0, [r0, #8]
   232fc:	e2500000 	subs	r0, r0, #0
   23300:	13a00001 	movne	r0, #1
   23304:	e12fff1e 	bx	lr

00023308 <CPHYTask::~CPHYTask()>:
   23308:	e59f201c 	ldr	r2, [pc, #28]	@ 2332c <CPHYTask::~CPHYTask()+0x24>
   2330c:	e3a03000 	mov	r3, #0
   23310:	e92d4010 	push	{r4, lr}
   23314:	e1a04000 	mov	r4, r0
   23318:	e5802000 	str	r2, [r0]
   2331c:	e58030f4 	str	r3, [r0, #244]	@ 0xf4
   23320:	eb001eec 	bl	2aed8 <CTask::~CTask()>
   23324:	e1a00004 	mov	r0, r4
   23328:	e8bd8010 	pop	{r4, pc}
   2332c:	00041dd0 	.word	0x00041dd0

00023330 <CPHYTask::~CPHYTask()>:
   23330:	e59f2028 	ldr	r2, [pc, #40]	@ 23360 <CPHYTask::~CPHYTask()+0x30>
   23334:	e3a03000 	mov	r3, #0
   23338:	e92d4010 	push	{r4, lr}
   2333c:	e1a04000 	mov	r4, r0
   23340:	e5802000 	str	r2, [r0]
   23344:	e58030f4 	str	r3, [r0, #244]	@ 0xf4
   23348:	eb001ee2 	bl	2aed8 <CTask::~CTask()>
   2334c:	e1a00004 	mov	r0, r4
   23350:	e3a010f8 	mov	r1, #248	@ 0xf8
   23354:	eb004b8a 	bl	36184 <operator delete(void*, unsigned int)>
   23358:	e1a00004 	mov	r0, r4
   2335c:	e8bd8010 	pop	{r4, pc}
   23360:	00041dd0 	.word	0x00041dd0

00023364 <CPHYTask::Run()>:
   23364:	e92d4070 	push	{r4, r5, r6, lr}
   23368:	e1a04000 	mov	r4, r0
   2336c:	e59000f4 	ldr	r0, [r0, #244]	@ 0xf4
   23370:	e3500000 	cmp	r0, #0
   23374:	0a00000e 	beq	233b4 <CPHYTask::Run()+0x50>
   23378:	e30b56b0 	movw	r5, #46768	@ 0xb6b0
   2337c:	e3405001 	movt	r5, #1
   23380:	e5903000 	ldr	r3, [r0]
   23384:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
   23388:	e1530005 	cmp	r3, r5
   2338c:	08bd8070 	popeq	{r4, r5, r6, pc}
   23390:	e12fff33 	blx	r3
   23394:	e3500000 	cmp	r0, #0
   23398:	08bd8070 	popeq	{r4, r5, r6, pc}
   2339c:	eb002166 	bl	2b93c <CScheduler::Get()>
   233a0:	e3a01e7d 	mov	r1, #2000	@ 0x7d0
   233a4:	eb002141 	bl	2b8b0 <CScheduler::MsSleep(unsigned int)>
   233a8:	e59400f4 	ldr	r0, [r4, #244]	@ 0xf4
   233ac:	e3500000 	cmp	r0, #0
   233b0:	1afffff2 	bne	23380 <CPHYTask::Run()+0x1c>
   233b4:	e30c1f78 	movw	r1, #53112	@ 0xcf78
   233b8:	e3401003 	movt	r1, #3
   233bc:	e30a06d0 	movw	r0, #42704	@ 0xa6d0
   233c0:	e3400003 	movt	r0, #3
   233c4:	e3a02027 	mov	r2, #39	@ 0x27
   233c8:	eb002283 	bl	2bddc <assertion_failed>

000233cc <CPHYTask::CPHYTask(CNetDevice*)>:
   233cc:	e92d4070 	push	{r4, r5, r6, lr}
   233d0:	e1a04000 	mov	r4, r0
   233d4:	e1a05001 	mov	r5, r1
   233d8:	e3a02000 	mov	r2, #0
   233dc:	e3a01902 	mov	r1, #32768	@ 0x8000
   233e0:	eb001e07 	bl	2ac04 <CTask::CTask(unsigned int, bool)>
   233e4:	e59f301c 	ldr	r3, [pc, #28]	@ 23408 <CPHYTask::CPHYTask(CNetDevice*)+0x3c>
   233e8:	e1a00004 	mov	r0, r4
   233ec:	e5843000 	str	r3, [r4]
   233f0:	e58450f4 	str	r5, [r4, #244]	@ 0xf4
   233f4:	e30c1f84 	movw	r1, #53124	@ 0xcf84
   233f8:	e3401003 	movt	r1, #3
   233fc:	eb001e8f 	bl	2ae40 <CTask::SetName(char const*)>
   23400:	e1a00004 	mov	r0, r4
   23404:	e8bd8070 	pop	{r4, r5, r6, pc}
   23408:	00041dd0 	.word	0x00041dd0
   2340c:	00000000 	.word	0x00000000

00023410 <CARPHandler::TimerHandler(unsigned int, void*, void*)>:
   23410:	e92d4070 	push	{r4, r5, r6, lr}
   23414:	e2524000 	subs	r4, r2, #0
   23418:	0a000019 	beq	23484 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x74>
   2341c:	e5943010 	ldr	r3, [r4, #16]
   23420:	e1a05001 	mov	r5, r1
   23424:	e1530001 	cmp	r3, r1
   23428:	9a00001b 	bls	2349c <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x8c>
   2342c:	e5940244 	ldr	r0, [r4, #580]	@ 0x244
   23430:	e3500000 	cmp	r0, #0
   23434:	1a000006 	bne	23454 <CARPHandler::TimerHandler(unsigned int, void*, void*)+0x44>
   23438:	e3a0301c 	mov	r3, #28
   2343c:	e0244391 	mla	r4, r1, r3, r4
   23440:	e5d43014 	ldrb	r3, [r4, #20]
   23444:	e3530001 	cmp	r3, #1
   23448:	03a03002 	moveq	r3, #2
   2344c:	05c43014 	strbeq	r3, [r4, #20]
   23450:	e8bd8070 	pop	{r4, r5, r6, pc}
   23454:	eb005149 	bl	37980 <EnterCritical>
   23458:	e3a0301c 	mov	r3, #28
   2345c:	e0234395 	mla	r3, r5, r3, r4
   23460:	e5d32014 	ldrb	r2, [r3, #20]
   23464:	e3520001 	cmp	r2, #1
   23468:	e5942244 	ldr	r2, [r4, #580]	@ 0x244
   2346c:	03a01002 	moveq	r1, #2
   23470:	05c31014 	strbeq	r1, [r3, #20]
   23474:	e3520000 	cmp	r2, #0
   23478:	08bd8070 	popeq	{r4, r5, r6, pc}
   2347c:	e8bd4070 	pop	{r4, r5, r6, lr}
   23480:	ea005169 	b	37a2c <LeaveCritical>
   23484:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23488:	e3401003 	movt	r1, #3
   2348c:	e3090d50 	movw	r0, #40272	@ 0x9d50
   23490:	e3400003 	movt	r0, #3
   23494:	e30021a9 	movw	r2, #425	@ 0x1a9
   23498:	eb00224f 	bl	2bddc <assertion_failed>
   2349c:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   234a0:	e3401003 	movt	r1, #3
   234a4:	e30c0f9c 	movw	r0, #53148	@ 0xcf9c
   234a8:	e3400003 	movt	r0, #3
   234ac:	e3a02f6b 	mov	r2, #428	@ 0x1ac
   234b0:	eb002249 	bl	2bddc <assertion_failed>

000234b4 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)>:
   234b4:	e92d4010 	push	{r4, lr}
   234b8:	e280ef91 	add	lr, r0, #580	@ 0x244
   234bc:	eddf0b2b 	vldr	d16, [pc, #172]	@ 23570 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0xbc>
   234c0:	e24dd010 	sub	sp, sp, #16
   234c4:	e3a04000 	mov	r4, #0
   234c8:	e3510000 	cmp	r1, #0
   234cc:	e1cd20f4 	strd	r2, [sp, #4]
   234d0:	e59dc018 	ldr	ip, [sp, #24]
   234d4:	e58d1000 	str	r1, [sp]
   234d8:	e58dc00c 	str	ip, [sp, #12]
   234dc:	f46d2adf 	vld1.64	{d18-d19}, [sp :64]
   234e0:	e5804010 	str	r4, [r0, #16]
   234e4:	f4402a8f 	vst1.32	{d18-d19}, [r0]
   234e8:	f44e078f 	vst1.32	{d16}, [lr]
   234ec:	0a000007 	beq	23510 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x5c>
   234f0:	e3520000 	cmp	r2, #0
   234f4:	0a00000b 	beq	23528 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x74>
   234f8:	e3530000 	cmp	r3, #0
   234fc:	0a00000f 	beq	23540 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0x8c>
   23500:	e35c0000 	cmp	ip, #0
   23504:	0a000013 	beq	23558 <CARPHandler::CARPHandler(CNetConfig*, CNetDeviceLayer*, CLinkLayer*, CNetQueue*)+0xa4>
   23508:	e28dd010 	add	sp, sp, #16
   2350c:	e8bd8010 	pop	{r4, pc}
   23510:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23514:	e3401003 	movt	r1, #3
   23518:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   2351c:	e3400003 	movt	r0, #3
   23520:	e3a02042 	mov	r2, #66	@ 0x42
   23524:	eb00222c 	bl	2bddc <assertion_failed>
   23528:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   2352c:	e3401003 	movt	r1, #3
   23530:	e30c0e64 	movw	r0, #52836	@ 0xce64
   23534:	e3400003 	movt	r0, #3
   23538:	e3a02043 	mov	r2, #67	@ 0x43
   2353c:	eb002226 	bl	2bddc <assertion_failed>
   23540:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23544:	e3401003 	movt	r1, #3
   23548:	e30c0d5c 	movw	r0, #52572	@ 0xcd5c
   2354c:	e3400003 	movt	r0, #3
   23550:	e3a02044 	mov	r2, #68	@ 0x44
   23554:	eb002220 	bl	2bddc <assertion_failed>
   23558:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   2355c:	e3401003 	movt	r1, #3
   23560:	e30c0fb8 	movw	r0, #53176	@ 0xcfb8
   23564:	e3400003 	movt	r0, #3
   23568:	e3a02045 	mov	r2, #69	@ 0x45
   2356c:	eb00221a 	bl	2bddc <assertion_failed>
   23570:	00000001 	.word	0x00000001
   23574:	00000000 	.word	0x00000000

00023578 <CARPHandler::~CARPHandler()>:
   23578:	e5903010 	ldr	r3, [r0, #16]
   2357c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   23580:	e1a07000 	mov	r7, r0
   23584:	e3530000 	cmp	r3, #0
   23588:	0a00000f 	beq	235cc <CARPHandler::~CARPHandler()+0x54>
   2358c:	e3a06000 	mov	r6, #0
   23590:	e1a04000 	mov	r4, r0
   23594:	e1a08006 	mov	r8, r6
   23598:	e594502c 	ldr	r5, [r4, #44]	@ 0x2c
   2359c:	e2550000 	subs	r0, r5, #0
   235a0:	0a000004 	beq	235b8 <CARPHandler::~CARPHandler()+0x40>
   235a4:	eb001556 	bl	28b04 <CNetQueue::~CNetQueue()>
   235a8:	e3a0100c 	mov	r1, #12
   235ac:	e1a00005 	mov	r0, r5
   235b0:	eb004af3 	bl	36184 <operator delete(void*, unsigned int)>
   235b4:	e5973010 	ldr	r3, [r7, #16]
   235b8:	e2866001 	add	r6, r6, #1
   235bc:	e584802c 	str	r8, [r4, #44]	@ 0x2c
   235c0:	e1530006 	cmp	r3, r6
   235c4:	e284401c 	add	r4, r4, #28
   235c8:	8afffff2 	bhi	23598 <CARPHandler::~CARPHandler()+0x20>
   235cc:	e1a00007 	mov	r0, r7
   235d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

000235d4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>:
   235d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   235d8:	e1a06000 	mov	r6, r0
   235dc:	e5900244 	ldr	r0, [r0, #580]	@ 0x244
   235e0:	e1a08001 	mov	r8, r1
   235e4:	e1a07002 	mov	r7, r2
   235e8:	e3500000 	cmp	r0, #0
   235ec:	1a000028 	bne	23694 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0xc0>
   235f0:	e5962010 	ldr	r2, [r6, #16]
   235f4:	e3520000 	cmp	r2, #0
   235f8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   235fc:	e2865015 	add	r5, r6, #21
   23600:	e3a04000 	mov	r4, #0
   23604:	e3a0901c 	mov	r9, #28
   23608:	e0236499 	mla	r3, r9, r4, r6
   2360c:	e1a01005 	mov	r1, r5
   23610:	e1a00008 	mov	r0, r8
   23614:	e5d3c014 	ldrb	ip, [r3, #20]
   23618:	e35c0001 	cmp	ip, #1
   2361c:	0a000002 	beq	2362c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x58>
   23620:	e5d33014 	ldrb	r3, [r3, #20]
   23624:	e3530002 	cmp	r3, #2
   23628:	1a000003 	bne	2363c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x68>
   2362c:	eb0013e5 	bl	285c8 <CIPAddress::operator==(unsigned char const*) const>
   23630:	e3500000 	cmp	r0, #0
   23634:	1a000009 	bne	23660 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   23638:	e5962010 	ldr	r2, [r6, #16]
   2363c:	e2844001 	add	r4, r4, #1
   23640:	e285501c 	add	r5, r5, #28
   23644:	e1520004 	cmp	r2, r4
   23648:	8affffee 	bhi	23608 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x34>
   2364c:	e5963244 	ldr	r3, [r6, #580]	@ 0x244
   23650:	e3530000 	cmp	r3, #0
   23654:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   23658:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2365c:	ea0050f2 	b	37a2c <LeaveCritical>
   23660:	eb004674 	bl	35038 <CTimer::Get()>
   23664:	e3a0301c 	mov	r3, #28
   23668:	e0040493 	mul	r4, r3, r4
   2366c:	e0865004 	add	r5, r6, r4
   23670:	e2844019 	add	r4, r4, #25
   23674:	e5951020 	ldr	r1, [r5, #32]
   23678:	eb0044d8 	bl	349e0 <CTimer::CancelKernelTimer(unsigned int)>
   2367c:	e0861004 	add	r1, r6, r4
   23680:	e1a00007 	mov	r0, r7
   23684:	eb0049fc 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   23688:	e3a03003 	mov	r3, #3
   2368c:	e5c53014 	strb	r3, [r5, #20]
   23690:	eaffffed 	b	2364c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x78>
   23694:	eb0050b9 	bl	37980 <EnterCritical>
   23698:	e5962010 	ldr	r2, [r6, #16]
   2369c:	e3520000 	cmp	r2, #0
   236a0:	1affffd5 	bne	235fc <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x28>
   236a4:	eaffffe8 	b	2364c <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)+0x78>

000236a8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>:
   236a8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   236ac:	e1a07000 	mov	r7, r0
   236b0:	e5900244 	ldr	r0, [r0, #580]	@ 0x244
   236b4:	e1a08001 	mov	r8, r1
   236b8:	e1a09002 	mov	r9, r2
   236bc:	e3500000 	cmp	r0, #0
   236c0:	1a000024 	bne	23758 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xb0>
   236c4:	e5972010 	ldr	r2, [r7, #16]
   236c8:	e2526000 	subs	r6, r2, #0
   236cc:	0a000049 	beq	237f8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x150>
   236d0:	e2875015 	add	r5, r7, #21
   236d4:	e3a04000 	mov	r4, #0
   236d8:	e3a06014 	mov	r6, #20
   236dc:	e3a0a01c 	mov	sl, #28
   236e0:	ea000005 	b	236fc <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x54>
   236e4:	e3560014 	cmp	r6, #20
   236e8:	e285501c 	add	r5, r5, #28
   236ec:	01a06004 	moveq	r6, r4
   236f0:	e2844001 	add	r4, r4, #1
   236f4:	e1520004 	cmp	r2, r4
   236f8:	9a00000d 	bls	23734 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x8c>
   236fc:	e023749a 	mla	r3, sl, r4, r7
   23700:	e5d33014 	ldrb	r3, [r3, #20]
   23704:	e3530000 	cmp	r3, #0
   23708:	0afffff5 	beq	236e4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x3c>
   2370c:	e1a01005 	mov	r1, r5
   23710:	e1a00008 	mov	r0, r8
   23714:	eb0013ab 	bl	285c8 <CIPAddress::operator==(unsigned char const*) const>
   23718:	e3500000 	cmp	r0, #0
   2371c:	1a000008 	bne	23744 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x9c>
   23720:	e5972010 	ldr	r2, [r7, #16]
   23724:	e2844001 	add	r4, r4, #1
   23728:	e285501c 	add	r5, r5, #28
   2372c:	e1520004 	cmp	r2, r4
   23730:	8afffff1 	bhi	236fc <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x54>
   23734:	e3560014 	cmp	r6, #20
   23738:	0a000008 	beq	23760 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xb8>
   2373c:	e3560013 	cmp	r6, #19
   23740:	9a00001a 	bls	237b0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x108>
   23744:	e5973244 	ldr	r3, [r7, #580]	@ 0x244
   23748:	e3530000 	cmp	r3, #0
   2374c:	08bd8ff8 	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23750:	e8bd4ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23754:	ea0050b4 	b	37a2c <LeaveCritical>
   23758:	eb005088 	bl	37980 <EnterCritical>
   2375c:	eaffffd8 	b	236c4 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x1c>
   23760:	e3520014 	cmp	r2, #20
   23764:	0afffff6 	beq	23744 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x9c>
   23768:	e3a0501c 	mov	r5, #28
   2376c:	e1a06002 	mov	r6, r2
   23770:	e0050295 	mul	r5, r5, r2
   23774:	e285a015 	add	sl, r5, #21
   23778:	e2855019 	add	r5, r5, #25
   2377c:	e3a0301c 	mov	r3, #28
   23780:	e3a0000c 	mov	r0, #12
   23784:	e0247293 	mla	r4, r3, r2, r7
   23788:	e3a03000 	mov	r3, #0
   2378c:	e5c43014 	strb	r3, [r4, #20]
   23790:	eb004a63 	bl	36124 <operator new(unsigned int)>
   23794:	e1a0b000 	mov	fp, r0
   23798:	eb0014a0 	bl	28a20 <CNetQueue::CNetQueue()>
   2379c:	e5973010 	ldr	r3, [r7, #16]
   237a0:	e584b02c 	str	fp, [r4, #44]	@ 0x2c
   237a4:	e2833001 	add	r3, r3, #1
   237a8:	e5873010 	str	r3, [r7, #16]
   237ac:	ea000003 	b	237c0 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x118>
   237b0:	e3a0501c 	mov	r5, #28
   237b4:	e0050695 	mul	r5, r5, r6
   237b8:	e285a015 	add	sl, r5, #21
   237bc:	e2855019 	add	r5, r5, #25
   237c0:	e087100a 	add	r1, r7, sl
   237c4:	e1a00008 	mov	r0, r8
   237c8:	eb00140f 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   237cc:	e0871005 	add	r1, r7, r5
   237d0:	e1a00009 	mov	r0, r9
   237d4:	eb0049a8 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   237d8:	eb004616 	bl	35038 <CTimer::Get()>
   237dc:	eb004343 	bl	344f0 <CTimer::GetTicks() const>
   237e0:	e3a0201c 	mov	r2, #28
   237e4:	e3a03004 	mov	r3, #4
   237e8:	e0267692 	mla	r6, r2, r6, r7
   237ec:	e5860028 	str	r0, [r6, #40]	@ 0x28
   237f0:	e5c63014 	strb	r3, [r6, #20]
   237f4:	eaffffd2 	b	23744 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0x9c>
   237f8:	e3a05019 	mov	r5, #25
   237fc:	e3a0a015 	mov	sl, #21
   23800:	eaffffdd 	b	2377c <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)+0xd4>

00023804 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>:
   23804:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   23808:	e1a04000 	mov	r4, r0
   2380c:	e5900000 	ldr	r0, [r0]
   23810:	e24dd034 	sub	sp, sp, #52	@ 0x34
   23814:	e3500000 	cmp	r0, #0
   23818:	0a00002d 	beq	238d4 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xd0>
   2381c:	e1a08001 	mov	r8, r1
   23820:	e1a07002 	mov	r7, r2
   23824:	e1a05003 	mov	r5, r3
   23828:	eb0012f1 	bl	283f4 <CNetConfig::GetIPAddress() const>
   2382c:	e2509000 	subs	r9, r0, #0
   23830:	0a00002d 	beq	238ec <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0xe8>
   23834:	e5940004 	ldr	r0, [r4, #4]
   23838:	e3500000 	cmp	r0, #0
   2383c:	0a000030 	beq	23904 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x100>
   23840:	ebfffe8f 	bl	23284 <CNetDeviceLayer::GetMACAddress() const>
   23844:	e2506000 	subs	r6, r0, #0
   23848:	0a000033 	beq	2391c <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)+0x118>
   2384c:	e1a00005 	mov	r0, r5
   23850:	e28d1004 	add	r1, sp, #4
   23854:	eb004988 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   23858:	e28d100a 	add	r1, sp, #10
   2385c:	e1a00006 	mov	r0, r6
   23860:	eb004985 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   23864:	e3580000 	cmp	r8, #0
   23868:	e1a00006 	mov	r0, r6
   2386c:	e28d101a 	add	r1, sp, #26
   23870:	03a03c02 	moveq	r3, #512	@ 0x200
   23874:	13a03c01 	movne	r3, #256	@ 0x100
   23878:	e1cd31b8 	strh	r3, [sp, #24]
   2387c:	e3a03008 	mov	r3, #8
   23880:	e3403406 	movt	r3, #1030	@ 0x406
   23884:	e58d3014 	str	r3, [sp, #20]
   23888:	e3003608 	movw	r3, #1544	@ 0x608
   2388c:	e3403100 	movt	r3, #256	@ 0x100
   23890:	e58d3010 	str	r3, [sp, #16]
   23894:	eb004978 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   23898:	e1a00009 	mov	r0, r9
   2389c:	e28d1020 	add	r1, sp, #32
   238a0:	eb0013d9 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   238a4:	e28d1024 	add	r1, sp, #36	@ 0x24
   238a8:	e1a00005 	mov	r0, r5
   238ac:	eb004972 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   238b0:	e28d102a 	add	r1, sp, #42	@ 0x2a
   238b4:	e1a00007 	mov	r0, r7
   238b8:	eb0013d3 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   238bc:	e5940004 	ldr	r0, [r4, #4]
   238c0:	e3a0202a 	mov	r2, #42	@ 0x2a
   238c4:	e28d1004 	add	r1, sp, #4
   238c8:	ebfffe73 	bl	2329c <CNetDeviceLayer::Send(void const*, unsigned int)>
   238cc:	e28dd034 	add	sp, sp, #52	@ 0x34
   238d0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   238d4:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   238d8:	e3401003 	movt	r1, #3
   238dc:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   238e0:	e3400003 	movt	r0, #3
   238e4:	e300218a 	movw	r2, #394	@ 0x18a
   238e8:	eb00213b 	bl	2bddc <assertion_failed>
   238ec:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   238f0:	e3401003 	movt	r1, #3
   238f4:	e30c0d84 	movw	r0, #52612	@ 0xcd84
   238f8:	e3400003 	movt	r0, #3
   238fc:	e3a02f63 	mov	r2, #396	@ 0x18c
   23900:	eb002135 	bl	2bddc <assertion_failed>
   23904:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23908:	e3401003 	movt	r1, #3
   2390c:	e30c0e64 	movw	r0, #52836	@ 0xce64
   23910:	e3400003 	movt	r0, #3
   23914:	e300218e 	movw	r2, #398	@ 0x18e
   23918:	eb00212f 	bl	2bddc <assertion_failed>
   2391c:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23920:	e3401003 	movt	r1, #3
   23924:	e30c0ea4 	movw	r0, #52900	@ 0xcea4
   23928:	e3400003 	movt	r0, #3
   2392c:	e3a02e19 	mov	r2, #400	@ 0x190
   23930:	eb002129 	bl	2bddc <assertion_failed>

00023934 <CARPHandler::Process()>:
   23934:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23938:	e1a04000 	mov	r4, r0
   2393c:	e5900000 	ldr	r0, [r0]
   23940:	e24dde65 	sub	sp, sp, #1616	@ 0x650
   23944:	e24dd00c 	sub	sp, sp, #12
   23948:	e3500000 	cmp	r0, #0
   2394c:	0a0000c2 	beq	23c5c <CARPHandler::Process()+0x328>
   23950:	eb0012a7 	bl	283f4 <CNetConfig::GetIPAddress() const>
   23954:	e2505000 	subs	r5, r0, #0
   23958:	0a0000cb 	beq	23c8c <CARPHandler::Process()+0x358>
   2395c:	e594000c 	ldr	r0, [r4, #12]
   23960:	e3500000 	cmp	r0, #0
   23964:	0a0000ce 	beq	23ca4 <CARPHandler::Process()+0x370>
   23968:	e3a02000 	mov	r2, #0
   2396c:	e28d1018 	add	r1, sp, #24
   23970:	eb0014b2 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   23974:	e2506000 	subs	r6, r0, #0
   23978:	0a00000f 	beq	239bc <CARPHandler::Process()+0x88>
   2397c:	e356001b 	cmp	r6, #27
   23980:	9a00000b 	bls	239b4 <CARPHandler::Process()+0x80>
   23984:	e1dd31b8 	ldrh	r3, [sp, #24]
   23988:	e3530c01 	cmp	r3, #256	@ 0x100
   2398c:	1a000008 	bne	239b4 <CARPHandler::Process()+0x80>
   23990:	e1dd31ba 	ldrh	r3, [sp, #26]
   23994:	e3530008 	cmp	r3, #8
   23998:	1a000005 	bne	239b4 <CARPHandler::Process()+0x80>
   2399c:	e5dd301c 	ldrb	r3, [sp, #28]
   239a0:	e3530006 	cmp	r3, #6
   239a4:	1a000002 	bne	239b4 <CARPHandler::Process()+0x80>
   239a8:	e5dd301d 	ldrb	r3, [sp, #29]
   239ac:	e3530004 	cmp	r3, #4
   239b0:	0a00008c 	beq	23be8 <CARPHandler::Process()+0x2b4>
   239b4:	e594000c 	ldr	r0, [r4, #12]
   239b8:	eaffffea 	b	23968 <CARPHandler::Process()+0x34>
   239bc:	e5943008 	ldr	r3, [r4, #8]
   239c0:	e3530000 	cmp	r3, #0
   239c4:	0a0000bc 	beq	23cbc <CARPHandler::Process()+0x388>
   239c8:	e5943004 	ldr	r3, [r4, #4]
   239cc:	e3530000 	cmp	r3, #0
   239d0:	0a0000bf 	beq	23cd4 <CARPHandler::Process()+0x3a0>
   239d4:	e5942010 	ldr	r2, [r4, #16]
   239d8:	e3520000 	cmp	r2, #0
   239dc:	0a000026 	beq	23a7c <CARPHandler::Process()+0x148>
   239e0:	e303a410 	movw	sl, #13328	@ 0x3410
   239e4:	e340a002 	movt	sl, #2
   239e8:	e2845015 	add	r5, r4, #21
   239ec:	e1a07006 	mov	r7, r6
   239f0:	e3a0901c 	mov	r9, #28
   239f4:	e0284799 	mla	r8, r9, r7, r4
   239f8:	e5d83014 	ldrb	r3, [r8, #20]
   239fc:	e3530002 	cmp	r3, #2
   23a00:	e6ef3073 	uxtb	r3, r3
   23a04:	0a000040 	beq	23b0c <CARPHandler::Process()+0x1d8>
   23a08:	e3530003 	cmp	r3, #3
   23a0c:	1a000016 	bne	23a6c <CARPHandler::Process()+0x138>
   23a10:	e5950017 	ldr	r0, [r5, #23]
   23a14:	e3500000 	cmp	r0, #0
   23a18:	0a00006c 	beq	23bd0 <CARPHandler::Process()+0x29c>
   23a1c:	e2858004 	add	r8, r5, #4
   23a20:	ea000008 	b	23a48 <CARPHandler::Process()+0x114>
   23a24:	e3a02006 	mov	r2, #6
   23a28:	e1a01008 	mov	r1, r8
   23a2c:	e28d0018 	add	r0, sp, #24
   23a30:	eb0047b3 	bl	35904 <memcpy>
   23a34:	e5940004 	ldr	r0, [r4, #4]
   23a38:	e1a0200b 	mov	r2, fp
   23a3c:	e28d1018 	add	r1, sp, #24
   23a40:	ebfffe15 	bl	2329c <CNetDeviceLayer::Send(void const*, unsigned int)>
   23a44:	e5950017 	ldr	r0, [r5, #23]
   23a48:	e3a02000 	mov	r2, #0
   23a4c:	e28d1018 	add	r1, sp, #24
   23a50:	eb00147a 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   23a54:	e250b000 	subs	fp, r0, #0
   23a58:	1afffff1 	bne	23a24 <CARPHandler::Process()+0xf0>
   23a5c:	e0234799 	mla	r3, r9, r7, r4
   23a60:	e3a02004 	mov	r2, #4
   23a64:	e5c32014 	strb	r2, [r3, #20]
   23a68:	e5942010 	ldr	r2, [r4, #16]
   23a6c:	e2877001 	add	r7, r7, #1
   23a70:	e285501c 	add	r5, r5, #28
   23a74:	e1520007 	cmp	r2, r7
   23a78:	8affffdd 	bhi	239f4 <CARPHandler::Process()+0xc0>
   23a7c:	eb00456d 	bl	35038 <CTimer::Get()>
   23a80:	eb00429a 	bl	344f0 <CTimer::GetTicks() const>
   23a84:	e5943248 	ldr	r3, [r4, #584]	@ 0x248
   23a88:	e301276f 	movw	r2, #5999	@ 0x176f
   23a8c:	e1a05000 	mov	r5, r0
   23a90:	e0403003 	sub	r3, r0, r3
   23a94:	e1530002 	cmp	r3, r2
   23a98:	9a000018 	bls	23b00 <CARPHandler::Process()+0x1cc>
   23a9c:	e5940244 	ldr	r0, [r4, #580]	@ 0x244
   23aa0:	e5845248 	str	r5, [r4, #584]	@ 0x248
   23aa4:	e3500000 	cmp	r0, #0
   23aa8:	1a000091 	bne	23cf4 <CARPHandler::Process()+0x3c0>
   23aac:	e594c010 	ldr	ip, [r4, #16]
   23ab0:	e35c0000 	cmp	ip, #0
   23ab4:	0a000011 	beq	23b00 <CARPHandler::Process()+0x1cc>
   23ab8:	e1a03004 	mov	r3, r4
   23abc:	e3a0e01c 	mov	lr, #28
   23ac0:	e3a08000 	mov	r8, #0
   23ac4:	e30e7a60 	movw	r7, #60000	@ 0xea60
   23ac8:	e022469e 	mla	r2, lr, r6, r4
   23acc:	e5d21014 	ldrb	r1, [r2, #20]
   23ad0:	e3510004 	cmp	r1, #4
   23ad4:	1a000003 	bne	23ae8 <CARPHandler::Process()+0x1b4>
   23ad8:	e5931028 	ldr	r1, [r3, #40]	@ 0x28
   23adc:	e0871001 	add	r1, r7, r1
   23ae0:	e1510005 	cmp	r1, r5
   23ae4:	35c28014 	strbcc	r8, [r2, #20]
   23ae8:	e2866001 	add	r6, r6, #1
   23aec:	e283301c 	add	r3, r3, #28
   23af0:	e15c0006 	cmp	ip, r6
   23af4:	8afffff3 	bhi	23ac8 <CARPHandler::Process()+0x194>
   23af8:	e3500000 	cmp	r0, #0
   23afc:	1a00007a 	bne	23cec <CARPHandler::Process()+0x3b8>
   23b00:	e28dde65 	add	sp, sp, #1616	@ 0x650
   23b04:	e28dd00c 	add	sp, sp, #12
   23b08:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23b0c:	e595300f 	ldr	r3, [r5, #15]
   23b10:	e2832001 	add	r2, r3, #1
   23b14:	e3530002 	cmp	r3, #2
   23b18:	e585200f 	str	r2, [r5, #15]
   23b1c:	8a00001a 	bhi	23b8c <CARPHandler::Process()+0x258>
   23b20:	e1a01005 	mov	r1, r5
   23b24:	e28d0010 	add	r0, sp, #16
   23b28:	eb001254 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
   23b2c:	e28d0008 	add	r0, sp, #8
   23b30:	eb004863 	bl	35cc4 <CMACAddress::CMACAddress()>
   23b34:	e28d0008 	add	r0, sp, #8
   23b38:	eb0048ba 	bl	35e28 <CMACAddress::SetBroadcast()>
   23b3c:	e28d2010 	add	r2, sp, #16
   23b40:	e3a01001 	mov	r1, #1
   23b44:	e28d3008 	add	r3, sp, #8
   23b48:	e1a00004 	mov	r0, r4
   23b4c:	ebffff2c 	bl	23804 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   23b50:	e3a03001 	mov	r3, #1
   23b54:	e5c83014 	strb	r3, [r8, #20]
   23b58:	eb004536 	bl	35038 <CTimer::Get()>
   23b5c:	e1a0200a 	mov	r2, sl
   23b60:	e1a03007 	mov	r3, r7
   23b64:	e3a01050 	mov	r1, #80	@ 0x50
   23b68:	e58d4000 	str	r4, [sp]
   23b6c:	eb004346 	bl	3488c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   23b70:	e585000b 	str	r0, [r5, #11]
   23b74:	e28d0008 	add	r0, sp, #8
   23b78:	eb004865 	bl	35d14 <CMACAddress::~CMACAddress()>
   23b7c:	e28d0010 	add	r0, sp, #16
   23b80:	eb00125e 	bl	28500 <CIPAddress::~CIPAddress()>
   23b84:	e5942010 	ldr	r2, [r4, #16]
   23b88:	eaffffb7 	b	23a6c <CARPHandler::Process()+0x138>
   23b8c:	e5950017 	ldr	r0, [r5, #23]
   23b90:	e3500000 	cmp	r0, #0
   23b94:	1a000004 	bne	23bac <CARPHandler::Process()+0x278>
   23b98:	ea000035 	b	23c74 <CARPHandler::Process()+0x340>
   23b9c:	e5940008 	ldr	r0, [r4, #8]
   23ba0:	e28d1018 	add	r1, sp, #24
   23ba4:	ebfffcd5 	bl	22f00 <CLinkLayer::ResolveFailed(void const*, unsigned int)>
   23ba8:	e5950017 	ldr	r0, [r5, #23]
   23bac:	e3a02000 	mov	r2, #0
   23bb0:	e28d1018 	add	r1, sp, #24
   23bb4:	eb001421 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   23bb8:	e2502000 	subs	r2, r0, #0
   23bbc:	1afffff6 	bne	23b9c <CARPHandler::Process()+0x268>
   23bc0:	e0234799 	mla	r3, r9, r7, r4
   23bc4:	e5c32014 	strb	r2, [r3, #20]
   23bc8:	e5942010 	ldr	r2, [r4, #16]
   23bcc:	eaffffa6 	b	23a6c <CARPHandler::Process()+0x138>
   23bd0:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23bd4:	e3401003 	movt	r1, #3
   23bd8:	e30c0fc8 	movw	r0, #53192	@ 0xcfc8
   23bdc:	e3400003 	movt	r0, #3
   23be0:	e3a020aa 	mov	r2, #170	@ 0xaa
   23be4:	eb00207c 	bl	2bddc <assertion_failed>
   23be8:	e1a00005 	mov	r0, r5
   23bec:	eb00131e 	bl	2886c <CIPAddress::IsNull() const>
   23bf0:	e3500000 	cmp	r0, #0
   23bf4:	1affff6e 	bne	239b4 <CARPHandler::Process()+0x80>
   23bf8:	e28d1030 	add	r1, sp, #48	@ 0x30
   23bfc:	e1a00005 	mov	r0, r5
   23c00:	eb001288 	bl	28628 <CIPAddress::operator!=(unsigned char const*) const>
   23c04:	e2506000 	subs	r6, r0, #0
   23c08:	1affff69 	bne	239b4 <CARPHandler::Process()+0x80>
   23c0c:	e28d1020 	add	r1, sp, #32
   23c10:	e28d0008 	add	r0, sp, #8
   23c14:	eb00482d 	bl	35cd0 <CMACAddress::CMACAddress(unsigned char const*)>
   23c18:	e28d1026 	add	r1, sp, #38	@ 0x26
   23c1c:	e28d0010 	add	r0, sp, #16
   23c20:	eb001216 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
   23c24:	e1dd31be 	ldrh	r3, [sp, #30]
   23c28:	e3530c01 	cmp	r3, #256	@ 0x100
   23c2c:	0a000036 	beq	23d0c <CARPHandler::Process()+0x3d8>
   23c30:	e3530c02 	cmp	r3, #512	@ 0x200
   23c34:	1a000003 	bne	23c48 <CARPHandler::Process()+0x314>
   23c38:	e28d2008 	add	r2, sp, #8
   23c3c:	e28d1010 	add	r1, sp, #16
   23c40:	e1a00004 	mov	r0, r4
   23c44:	ebfffe62 	bl	235d4 <CARPHandler::ReplyReceived(CIPAddress const&, CMACAddress const&)>
   23c48:	e28d0010 	add	r0, sp, #16
   23c4c:	eb00122b 	bl	28500 <CIPAddress::~CIPAddress()>
   23c50:	e28d0008 	add	r0, sp, #8
   23c54:	eb00482e 	bl	35d14 <CMACAddress::~CMACAddress()>
   23c58:	eaffff55 	b	239b4 <CARPHandler::Process()+0x80>
   23c5c:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23c60:	e3401003 	movt	r1, #3
   23c64:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   23c68:	e3400003 	movt	r0, #3
   23c6c:	e3a02057 	mov	r2, #87	@ 0x57
   23c70:	eb002059 	bl	2bddc <assertion_failed>
   23c74:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23c78:	e3401003 	movt	r1, #3
   23c7c:	e30c0fc8 	movw	r0, #53192	@ 0xcfc8
   23c80:	e3400003 	movt	r0, #3
   23c84:	e3a0209f 	mov	r2, #159	@ 0x9f
   23c88:	eb002053 	bl	2bddc <assertion_failed>
   23c8c:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23c90:	e3401003 	movt	r1, #3
   23c94:	e30c0d84 	movw	r0, #52612	@ 0xcd84
   23c98:	e3400003 	movt	r0, #3
   23c9c:	e3a02059 	mov	r2, #89	@ 0x59
   23ca0:	eb00204d 	bl	2bddc <assertion_failed>
   23ca4:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23ca8:	e3401003 	movt	r1, #3
   23cac:	e30c0fb8 	movw	r0, #53176	@ 0xcfb8
   23cb0:	e3400003 	movt	r0, #3
   23cb4:	e3a0205f 	mov	r2, #95	@ 0x5f
   23cb8:	eb002047 	bl	2bddc <assertion_failed>
   23cbc:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23cc0:	e3401003 	movt	r1, #3
   23cc4:	e30c0d5c 	movw	r0, #52572	@ 0xcd5c
   23cc8:	e3400003 	movt	r0, #3
   23ccc:	e3a02088 	mov	r2, #136	@ 0x88
   23cd0:	eb002041 	bl	2bddc <assertion_failed>
   23cd4:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   23cd8:	e3401003 	movt	r1, #3
   23cdc:	e30c0e64 	movw	r0, #52836	@ 0xce64
   23ce0:	e3400003 	movt	r0, #3
   23ce4:	e3a02089 	mov	r2, #137	@ 0x89
   23ce8:	eb00203b 	bl	2bddc <assertion_failed>
   23cec:	eb004f4e 	bl	37a2c <LeaveCritical>
   23cf0:	eaffff82 	b	23b00 <CARPHandler::Process()+0x1cc>
   23cf4:	eb004f21 	bl	37980 <EnterCritical>
   23cf8:	e594c010 	ldr	ip, [r4, #16]
   23cfc:	e5940244 	ldr	r0, [r4, #580]	@ 0x244
   23d00:	e35c0000 	cmp	ip, #0
   23d04:	1affff6b 	bne	23ab8 <CARPHandler::Process()+0x184>
   23d08:	eaffff7a 	b	23af8 <CARPHandler::Process()+0x1c4>
   23d0c:	e1a01006 	mov	r1, r6
   23d10:	e28d2010 	add	r2, sp, #16
   23d14:	e1a00004 	mov	r0, r4
   23d18:	e28d3008 	add	r3, sp, #8
   23d1c:	ebfffeb8 	bl	23804 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   23d20:	e28d2008 	add	r2, sp, #8
   23d24:	e28d1010 	add	r1, sp, #16
   23d28:	e1a00004 	mov	r0, r4
   23d2c:	ebfffe5d 	bl	236a8 <CARPHandler::RequestReceived(CIPAddress const&, CMACAddress const&)>
   23d30:	eaffffc4 	b	23c48 <CARPHandler::Process()+0x314>

00023d34 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)>:
   23d34:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23d38:	e1a05000 	mov	r5, r0
   23d3c:	e5900244 	ldr	r0, [r0, #580]	@ 0x244
   23d40:	e24dd024 	sub	sp, sp, #36	@ 0x24
   23d44:	e3500000 	cmp	r0, #0
   23d48:	e58d1008 	str	r1, [sp, #8]
   23d4c:	e58d2014 	str	r2, [sp, #20]
   23d50:	e58d3010 	str	r3, [sp, #16]
   23d54:	1a000081 	bne	23f60 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x22c>
   23d58:	e5950010 	ldr	r0, [r5, #16]
   23d5c:	e3500000 	cmp	r0, #0
   23d60:	e1a07000 	mov	r7, r0
   23d64:	0a0000ad 	beq	24020 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2ec>
   23d68:	e3e09000 	mvn	r9, #0
   23d6c:	e285a015 	add	sl, r5, #21
   23d70:	e3a04000 	mov	r4, #0
   23d74:	e3a07014 	mov	r7, #20
   23d78:	e3a0801c 	mov	r8, #28
   23d7c:	e1a06005 	mov	r6, r5
   23d80:	e58d900c 	str	r9, [sp, #12]
   23d84:	ea000007 	b	23da8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x74>
   23d88:	e3530000 	cmp	r3, #0
   23d8c:	1a00004f 	bne	23ed0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x19c>
   23d90:	e3570014 	cmp	r7, #20
   23d94:	e28aa01c 	add	sl, sl, #28
   23d98:	01a07004 	moveq	r7, r4
   23d9c:	e2844001 	add	r4, r4, #1
   23da0:	e1500004 	cmp	r0, r4
   23da4:	9a000017 	bls	23e08 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xd4>
   23da8:	e00b0498 	mul	fp, r8, r4
   23dac:	e086500b 	add	r5, r6, fp
   23db0:	e5d53014 	ldrb	r3, [r5, #20]
   23db4:	e3530003 	cmp	r3, #3
   23db8:	e6ef3073 	uxtb	r3, r3
   23dbc:	9afffff1 	bls	23d88 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x54>
   23dc0:	e3530004 	cmp	r3, #4
   23dc4:	1a0000a9 	bne	24070 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x33c>
   23dc8:	e59a3013 	ldr	r3, [sl, #19]
   23dcc:	e1a0100a 	mov	r1, sl
   23dd0:	e59d0008 	ldr	r0, [sp, #8]
   23dd4:	e1590003 	cmp	r9, r3
   23dd8:	81a09003 	movhi	r9, r3
   23ddc:	e59d300c 	ldr	r3, [sp, #12]
   23de0:	81a03004 	movhi	r3, r4
   23de4:	e58d300c 	str	r3, [sp, #12]
   23de8:	eb0011f6 	bl	285c8 <CIPAddress::operator==(unsigned char const*) const>
   23dec:	e3500000 	cmp	r0, #0
   23df0:	1a00006d 	bne	23fac <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x278>
   23df4:	e5960010 	ldr	r0, [r6, #16]
   23df8:	e2844001 	add	r4, r4, #1
   23dfc:	e28aa01c 	add	sl, sl, #28
   23e00:	e1500004 	cmp	r0, r4
   23e04:	8affffe7 	bhi	23da8 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x74>
   23e08:	e1a05006 	mov	r5, r6
   23e0c:	e3570014 	cmp	r7, #20
   23e10:	0a000045 	beq	23f2c <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x1f8>
   23e14:	e3a0601c 	mov	r6, #28
   23e18:	e0060796 	mul	r6, r6, r7
   23e1c:	e2866015 	add	r6, r6, #21
   23e20:	e3a0401c 	mov	r4, #28
   23e24:	e59d0008 	ldr	r0, [sp, #8]
   23e28:	e0851006 	add	r1, r5, r6
   23e2c:	e3a06001 	mov	r6, #1
   23e30:	e0245794 	mla	r4, r4, r7, r5
   23e34:	e5c46014 	strb	r6, [r4, #20]
   23e38:	eb001273 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   23e3c:	e594002c 	ldr	r0, [r4, #44]	@ 0x2c
   23e40:	e3500000 	cmp	r0, #0
   23e44:	0a00006f 	beq	24008 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2d4>
   23e48:	e59d1010 	ldr	r1, [sp, #16]
   23e4c:	e3a03000 	mov	r3, #0
   23e50:	e59d2048 	ldr	r2, [sp, #72]	@ 0x48
   23e54:	eb00132f 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   23e58:	eb004476 	bl	35038 <CTimer::Get()>
   23e5c:	eb0041a3 	bl	344f0 <CTimer::GetTicks() const>
   23e60:	e5846024 	str	r6, [r4, #36]	@ 0x24
   23e64:	e5840028 	str	r0, [r4, #40]	@ 0x28
   23e68:	eb004472 	bl	35038 <CTimer::Get()>
   23e6c:	e1a03007 	mov	r3, r7
   23e70:	e3a01050 	mov	r1, #80	@ 0x50
   23e74:	e58d5000 	str	r5, [sp]
   23e78:	e3032410 	movw	r2, #13328	@ 0x3410
   23e7c:	e3402002 	movt	r2, #2
   23e80:	eb004281 	bl	3488c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   23e84:	e5840020 	str	r0, [r4, #32]
   23e88:	e5953244 	ldr	r3, [r5, #580]	@ 0x244
   23e8c:	e3530000 	cmp	r3, #0
   23e90:	1a00005a 	bne	24000 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2cc>
   23e94:	e28d0018 	add	r0, sp, #24
   23e98:	eb004789 	bl	35cc4 <CMACAddress::CMACAddress()>
   23e9c:	e28d0018 	add	r0, sp, #24
   23ea0:	eb0047e0 	bl	35e28 <CMACAddress::SetBroadcast()>
   23ea4:	e1a00005 	mov	r0, r5
   23ea8:	e59d2008 	ldr	r2, [sp, #8]
   23eac:	e28d3018 	add	r3, sp, #24
   23eb0:	e3a01001 	mov	r1, #1
   23eb4:	ebfffe52 	bl	23804 <CARPHandler::SendPacket(bool, CIPAddress const&, CMACAddress const&)>
   23eb8:	e28d0018 	add	r0, sp, #24
   23ebc:	eb004794 	bl	35d14 <CMACAddress::~CMACAddress()>
   23ec0:	e3a02000 	mov	r2, #0
   23ec4:	e1a00002 	mov	r0, r2
   23ec8:	e28dd024 	add	sp, sp, #36	@ 0x24
   23ecc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23ed0:	e59d0008 	ldr	r0, [sp, #8]
   23ed4:	e1a0100a 	mov	r1, sl
   23ed8:	eb0011ba 	bl	285c8 <CIPAddress::operator==(unsigned char const*) const>
   23edc:	e3500000 	cmp	r0, #0
   23ee0:	0affffc3 	beq	23df4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xc0>
   23ee4:	e1a03005 	mov	r3, r5
   23ee8:	e1a05006 	mov	r5, r6
   23eec:	e1a06003 	mov	r6, r3
   23ef0:	e593002c 	ldr	r0, [r3, #44]	@ 0x2c
   23ef4:	e3500000 	cmp	r0, #0
   23ef8:	0a000050 	beq	24040 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x30c>
   23efc:	e3a03000 	mov	r3, #0
   23f00:	e59d1010 	ldr	r1, [sp, #16]
   23f04:	e59d2048 	ldr	r2, [sp, #72]	@ 0x48
   23f08:	eb001302 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   23f0c:	eb004449 	bl	35038 <CTimer::Get()>
   23f10:	eb004176 	bl	344f0 <CTimer::GetTicks() const>
   23f14:	e5860028 	str	r0, [r6, #40]	@ 0x28
   23f18:	e5953244 	ldr	r3, [r5, #580]	@ 0x244
   23f1c:	e3530000 	cmp	r3, #0
   23f20:	0affffe6 	beq	23ec0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   23f24:	eb004ec0 	bl	37a2c <LeaveCritical>
   23f28:	eaffffe4 	b	23ec0 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x18c>
   23f2c:	e3500014 	cmp	r0, #20
   23f30:	1a00000c 	bne	23f68 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x234>
   23f34:	e59d300c 	ldr	r3, [sp, #12]
   23f38:	e3530013 	cmp	r3, #19
   23f3c:	8a000045 	bhi	24058 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x324>
   23f40:	e59d700c 	ldr	r7, [sp, #12]
   23f44:	e3a0601c 	mov	r6, #28
   23f48:	e3a02000 	mov	r2, #0
   23f4c:	e0060796 	mul	r6, r6, r7
   23f50:	e0853006 	add	r3, r5, r6
   23f54:	e2866015 	add	r6, r6, #21
   23f58:	e5c32014 	strb	r2, [r3, #20]
   23f5c:	eaffffaf 	b	23e20 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   23f60:	eb004e86 	bl	37980 <EnterCritical>
   23f64:	eaffff7b 	b	23d58 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x24>
   23f68:	e3a0601c 	mov	r6, #28
   23f6c:	e1a07000 	mov	r7, r0
   23f70:	e0060096 	mul	r6, r6, r0
   23f74:	e2866015 	add	r6, r6, #21
   23f78:	e3a0301c 	mov	r3, #28
   23f7c:	e0245093 	mla	r4, r3, r0, r5
   23f80:	e3a03000 	mov	r3, #0
   23f84:	e3a0000c 	mov	r0, #12
   23f88:	e5c43014 	strb	r3, [r4, #20]
   23f8c:	eb004864 	bl	36124 <operator new(unsigned int)>
   23f90:	e1a08000 	mov	r8, r0
   23f94:	eb0012a1 	bl	28a20 <CNetQueue::CNetQueue()>
   23f98:	e5953010 	ldr	r3, [r5, #16]
   23f9c:	e584802c 	str	r8, [r4, #44]	@ 0x2c
   23fa0:	e2833001 	add	r3, r3, #1
   23fa4:	e5853010 	str	r3, [r5, #16]
   23fa8:	eaffff9c 	b	23e20 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0xec>
   23fac:	e1a03005 	mov	r3, r5
   23fb0:	e1a05006 	mov	r5, r6
   23fb4:	e1a06003 	mov	r6, r3
   23fb8:	e59d3014 	ldr	r3, [sp, #20]
   23fbc:	e3530000 	cmp	r3, #0
   23fc0:	0a000018 	beq	24028 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x2f4>
   23fc4:	e28b3019 	add	r3, fp, #25
   23fc8:	e58d0008 	str	r0, [sp, #8]
   23fcc:	e0851003 	add	r1, r5, r3
   23fd0:	e59d0014 	ldr	r0, [sp, #20]
   23fd4:	eb004783 	bl	35de8 <CMACAddress::Set(unsigned char const*)>
   23fd8:	eb004416 	bl	35038 <CTimer::Get()>
   23fdc:	eb004143 	bl	344f0 <CTimer::GetTicks() const>
   23fe0:	e5860028 	str	r0, [r6, #40]	@ 0x28
   23fe4:	e59d2008 	ldr	r2, [sp, #8]
   23fe8:	e5953244 	ldr	r3, [r5, #580]	@ 0x244
   23fec:	e3530000 	cmp	r3, #0
   23ff0:	0affffb3 	beq	23ec4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x190>
   23ff4:	eb004e8c 	bl	37a2c <LeaveCritical>
   23ff8:	e59d2008 	ldr	r2, [sp, #8]
   23ffc:	eaffffb0 	b	23ec4 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x190>
   24000:	eb004e89 	bl	37a2c <LeaveCritical>
   24004:	eaffffa2 	b	23e94 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x160>
   24008:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   2400c:	e3401003 	movt	r1, #3
   24010:	e30c0fc8 	movw	r0, #53192	@ 0xcfc8
   24014:	e3400003 	movt	r0, #3
   24018:	e3002129 	movw	r2, #297	@ 0x129
   2401c:	eb001f6e 	bl	2bddc <assertion_failed>
   24020:	e3a06015 	mov	r6, #21
   24024:	eaffffd3 	b	23f78 <CARPHandler::Resolve(CIPAddress const&, CMACAddress*, void const*, unsigned int)+0x244>
   24028:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   2402c:	e3401003 	movt	r1, #3
   24030:	e30d0000 	movw	r0, #53248	@ 0xd000
   24034:	e3400003 	movt	r0, #3
   24038:	e3a020ff 	mov	r2, #255	@ 0xff
   2403c:	eb001f66 	bl	2bddc <assertion_failed>
   24040:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   24044:	e3401003 	movt	r1, #3
   24048:	e30c0fe0 	movw	r0, #53216	@ 0xcfe0
   2404c:	e3400003 	movt	r0, #3
   24050:	e3a020eb 	mov	r2, #235	@ 0xeb
   24054:	eb001f60 	bl	2bddc <assertion_failed>
   24058:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   2405c:	e3401003 	movt	r1, #3
   24060:	e30d0014 	movw	r0, #53268	@ 0xd014
   24064:	e3400003 	movt	r0, #3
   24068:	e300211d 	movw	r2, #285	@ 0x11d
   2406c:	eb001f5a 	bl	2bddc <assertion_failed>
   24070:	e30c1f8c 	movw	r1, #53132	@ 0xcf8c
   24074:	e3401003 	movt	r1, #3
   24078:	e30a093c 	movw	r0, #43324	@ 0xa93c
   2407c:	e3400003 	movt	r0, #3
   24080:	e300210a 	movw	r2, #266	@ 0x10a
   24084:	eb001f54 	bl	2bddc <assertion_failed>

00024088 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)>:
   24088:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   2408c:	e3510000 	cmp	r1, #0
   24090:	e24dd014 	sub	sp, sp, #20
   24094:	e58d1000 	str	r1, [sp]
   24098:	e1cd20f4 	strd	r2, [sp, #4]
   2409c:	e59d1018 	ldr	r1, [sp, #24]
   240a0:	e58d100c 	str	r1, [sp, #12]
   240a4:	f46d0adf 	vld1.64	{d16-d17}, [sp :64]
   240a8:	f4400a8f 	vst1.32	{d16-d17}, [r0]
   240ac:	0a000007 	beq	240d0 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x48>
   240b0:	e3520000 	cmp	r2, #0
   240b4:	0a00000b 	beq	240e8 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x60>
   240b8:	e3530000 	cmp	r3, #0
   240bc:	0a00000f 	beq	24100 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x78>
   240c0:	e3510000 	cmp	r1, #0
   240c4:	0a000013 	beq	24118 <CICMPHandler::CICMPHandler(CNetConfig*, CNetworkLayer*, CNetQueue*, CNetQueue*)+0x90>
   240c8:	e28dd014 	add	sp, sp, #20
   240cc:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   240d0:	e30d1030 	movw	r1, #53296	@ 0xd030
   240d4:	e3401003 	movt	r1, #3
   240d8:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   240dc:	e3400003 	movt	r0, #3
   240e0:	e3a0203b 	mov	r2, #59	@ 0x3b
   240e4:	eb001f3c 	bl	2bddc <assertion_failed>
   240e8:	e30d1030 	movw	r1, #53296	@ 0xd030
   240ec:	e3401003 	movt	r1, #3
   240f0:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   240f4:	e3400003 	movt	r0, #3
   240f8:	e3a0203c 	mov	r2, #60	@ 0x3c
   240fc:	eb001f36 	bl	2bddc <assertion_failed>
   24100:	e30d1030 	movw	r1, #53296	@ 0xd030
   24104:	e3401003 	movt	r1, #3
   24108:	e30c0fb8 	movw	r0, #53176	@ 0xcfb8
   2410c:	e3400003 	movt	r0, #3
   24110:	e3a0203d 	mov	r2, #61	@ 0x3d
   24114:	eb001f30 	bl	2bddc <assertion_failed>
   24118:	e30d1030 	movw	r1, #53296	@ 0xd030
   2411c:	e3401003 	movt	r1, #3
   24120:	e30d0040 	movw	r0, #53312	@ 0xd040
   24124:	e3400003 	movt	r0, #3
   24128:	e3a0203e 	mov	r2, #62	@ 0x3e
   2412c:	eb001f2a 	bl	2bddc <assertion_failed>

00024130 <CICMPHandler::~CICMPHandler()>:
   24130:	e12fff1e 	bx	lr

00024134 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>:
   24134:	e92d4070 	push	{r4, r5, r6, lr}
   24138:	e3510002 	cmp	r1, #2
   2413c:	e24dd010 	sub	sp, sp, #16
   24140:	8a000020 	bhi	241c8 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0x94>
   24144:	e1a04002 	mov	r4, r2
   24148:	e3520000 	cmp	r2, #0
   2414c:	e5cd1000 	strb	r1, [sp]
   24150:	0a000022 	beq	241e0 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xac>
   24154:	e1a05003 	mov	r5, r3
   24158:	e2841010 	add	r1, r4, #16
   2415c:	e5d23009 	ldrb	r3, [r2, #9]
   24160:	e1a06000 	mov	r6, r0
   24164:	e3a02004 	mov	r2, #4
   24168:	e28d0002 	add	r0, sp, #2
   2416c:	e5cd3001 	strb	r3, [sp, #1]
   24170:	eb0045e3 	bl	35904 <memcpy>
   24174:	e3a02004 	mov	r2, #4
   24178:	e284100c 	add	r1, r4, #12
   2417c:	e28d0006 	add	r0, sp, #6
   24180:	eb0045df 	bl	35904 <memcpy>
   24184:	e3550000 	cmp	r5, #0
   24188:	0a00001a 	beq	241f8 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xc4>
   2418c:	e1d520b2 	ldrh	r2, [r5, #2]
   24190:	e1d530b0 	ldrh	r3, [r5]
   24194:	e596000c 	ldr	r0, [r6, #12]
   24198:	e6bf2fb2 	rev16	r2, r2
   2419c:	e6bf3fb3 	rev16	r3, r3
   241a0:	e1cd20ba 	strh	r2, [sp, #10]
   241a4:	e3500000 	cmp	r0, #0
   241a8:	e1cd30bc 	strh	r3, [sp, #12]
   241ac:	0a000017 	beq	24210 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)+0xdc>
   241b0:	e3a03000 	mov	r3, #0
   241b4:	e3a0200e 	mov	r2, #14
   241b8:	e1a0100d 	mov	r1, sp
   241bc:	eb001255 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   241c0:	e28dd010 	add	sp, sp, #16
   241c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   241c8:	e30d1030 	movw	r1, #53296	@ 0xd030
   241cc:	e3401003 	movt	r1, #3
   241d0:	e30d005c 	movw	r0, #53340	@ 0xd05c
   241d4:	e3400003 	movt	r0, #3
   241d8:	e3a020ee 	mov	r2, #238	@ 0xee
   241dc:	eb001efe 	bl	2bddc <assertion_failed>
   241e0:	e30d1030 	movw	r1, #53296	@ 0xd030
   241e4:	e3401003 	movt	r1, #3
   241e8:	e30d007c 	movw	r0, #53372	@ 0xd07c
   241ec:	e3400003 	movt	r0, #3
   241f0:	e3a020f3 	mov	r2, #243	@ 0xf3
   241f4:	eb001ef8 	bl	2bddc <assertion_failed>
   241f8:	e30d1030 	movw	r1, #53296	@ 0xd030
   241fc:	e3401003 	movt	r1, #3
   24200:	e30d008c 	movw	r0, #53388	@ 0xd08c
   24204:	e3400003 	movt	r0, #3
   24208:	e3a020f8 	mov	r2, #248	@ 0xf8
   2420c:	eb001ef2 	bl	2bddc <assertion_failed>
   24210:	e30d1030 	movw	r1, #53296	@ 0xd030
   24214:	e3401003 	movt	r1, #3
   24218:	e30d0040 	movw	r0, #53312	@ 0xd040
   2421c:	e3400003 	movt	r0, #3
   24220:	e3a020fc 	mov	r2, #252	@ 0xfc
   24224:	eb001eec 	bl	2bddc <assertion_failed>

00024228 <CICMPHandler::Process()>:
   24228:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2422c:	e1a06000 	mov	r6, r0
   24230:	e5900008 	ldr	r0, [r0, #8]
   24234:	e24dde66 	sub	sp, sp, #1632	@ 0x660
   24238:	e24dd00c 	sub	sp, sp, #12
   2423c:	e3500000 	cmp	r0, #0
   24240:	0a00007c 	beq	24438 <CICMPHandler::Process()+0x210>
   24244:	e28d7010 	add	r7, sp, #16
   24248:	e28d200c 	add	r2, sp, #12
   2424c:	e28d1028 	add	r1, sp, #40	@ 0x28
   24250:	eb00127a 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   24254:	e2505000 	subs	r5, r0, #0
   24258:	0a00007c 	beq	24450 <CICMPHandler::Process()+0x228>
   2425c:	e59d400c 	ldr	r4, [sp, #12]
   24260:	e3540000 	cmp	r4, #0
   24264:	0a00004f 	beq	243a8 <CICMPHandler::Process()+0x180>
   24268:	e5d43000 	ldrb	r3, [r4]
   2426c:	e3530001 	cmp	r3, #1
   24270:	1a000052 	bne	243c0 <CICMPHandler::Process()+0x198>
   24274:	e2841001 	add	r1, r4, #1
   24278:	e1a00007 	mov	r0, r7
   2427c:	eb00107f 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
   24280:	e2841005 	add	r1, r4, #5
   24284:	e28d0018 	add	r0, sp, #24
   24288:	eb00107c 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
   2428c:	e3a01009 	mov	r1, #9
   24290:	e1a00004 	mov	r0, r4
   24294:	eb0047ba 	bl	36184 <operator delete(void*, unsigned int)>
   24298:	e5963000 	ldr	r3, [r6]
   2429c:	e3530000 	cmp	r3, #0
   242a0:	0a00004c 	beq	243d8 <CICMPHandler::Process()+0x1b0>
   242a4:	e28d0018 	add	r0, sp, #24
   242a8:	eb00117d 	bl	288a4 <CIPAddress::IsBroadcast() const>
   242ac:	e3500000 	cmp	r0, #0
   242b0:	1a000009 	bne	242dc <CICMPHandler::Process()+0xb4>
   242b4:	e5960000 	ldr	r0, [r6]
   242b8:	eb001057 	bl	2841c <CNetConfig::GetBroadcastAddress() const>
   242bc:	e1a01000 	mov	r1, r0
   242c0:	e28d0018 	add	r0, sp, #24
   242c4:	eb00108e 	bl	28504 <CIPAddress::operator==(CIPAddress const&) const>
   242c8:	e3550007 	cmp	r5, #7
   242cc:	93800001 	orrls	r0, r0, #1
   242d0:	e6ef0070 	uxtb	r0, r0
   242d4:	e3500000 	cmp	r0, #0
   242d8:	0a000005 	beq	242f4 <CICMPHandler::Process()+0xcc>
   242dc:	e28d0018 	add	r0, sp, #24
   242e0:	eb001086 	bl	28500 <CIPAddress::~CIPAddress()>
   242e4:	e1a00007 	mov	r0, r7
   242e8:	eb001084 	bl	28500 <CIPAddress::~CIPAddress()>
   242ec:	e5960008 	ldr	r0, [r6, #8]
   242f0:	eaffffd4 	b	24248 <CICMPHandler::Process()+0x20>
   242f4:	e1a01005 	mov	r1, r5
   242f8:	e28d0028 	add	r0, sp, #40	@ 0x28
   242fc:	eb001315 	bl	28f58 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   24300:	e3500000 	cmp	r0, #0
   24304:	1afffff4 	bne	242dc <CICMPHandler::Process()+0xb4>
   24308:	e5dd3028 	ldrb	r3, [sp, #40]	@ 0x28
   2430c:	e3530008 	cmp	r3, #8
   24310:	0a000036 	beq	243f0 <CICMPHandler::Process()+0x1c8>
   24314:	e355001c 	cmp	r5, #28
   24318:	9affffef 	bls	242dc <CICMPHandler::Process()+0xb4>
   2431c:	e5dd3030 	ldrb	r3, [sp, #48]	@ 0x30
   24320:	e203400f 	and	r4, r3, #15
   24324:	e2442005 	sub	r2, r4, #5
   24328:	e3520001 	cmp	r2, #1
   2432c:	8affffea 	bhi	242dc <CICMPHandler::Process()+0xb4>
   24330:	e1a03223 	lsr	r3, r3, #4
   24334:	e3530004 	cmp	r3, #4
   24338:	1affffe7 	bne	242dc <CICMPHandler::Process()+0xb4>
   2433c:	e5960000 	ldr	r0, [r6]
   24340:	eb00102b 	bl	283f4 <CNetConfig::GetIPAddress() const>
   24344:	e28d103c 	add	r1, sp, #60	@ 0x3c
   24348:	eb0010b6 	bl	28628 <CIPAddress::operator!=(unsigned char const*) const>
   2434c:	e3500000 	cmp	r0, #0
   24350:	1affffe1 	bne	242dc <CICMPHandler::Process()+0xb4>
   24354:	e1a04104 	lsl	r4, r4, #2
   24358:	e2843010 	add	r3, r4, #16
   2435c:	e1530005 	cmp	r3, r5
   24360:	8affffdd 	bhi	242dc <CICMPHandler::Process()+0xb4>
   24364:	e5dd3028 	ldrb	r3, [sp, #40]	@ 0x28
   24368:	e28d2030 	add	r2, sp, #48	@ 0x30
   2436c:	e0824004 	add	r4, r2, r4
   24370:	e2433003 	sub	r3, r3, #3
   24374:	e3530009 	cmp	r3, #9
   24378:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2437c:	eaffffd6 	b	242dc <CICMPHandler::Process()+0xb4>
   24380:	00024548 	.word	0x00024548
   24384:	000242dc 	.word	0x000242dc
   24388:	000244d4 	.word	0x000244d4
   2438c:	000242dc 	.word	0x000242dc
   24390:	000242dc 	.word	0x000242dc
   24394:	000242dc 	.word	0x000242dc
   24398:	000242dc 	.word	0x000242dc
   2439c:	000242dc 	.word	0x000242dc
   243a0:	00024498 	.word	0x00024498
   243a4:	0002445c 	.word	0x0002445c
   243a8:	e30d1030 	movw	r1, #53296	@ 0xd030
   243ac:	e3401003 	movt	r1, #3
   243b0:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   243b4:	e3400003 	movt	r0, #3
   243b8:	e3a02052 	mov	r2, #82	@ 0x52
   243bc:	eb001e86 	bl	2bddc <assertion_failed>
   243c0:	e30d1030 	movw	r1, #53296	@ 0xd030
   243c4:	e3401003 	movt	r1, #3
   243c8:	e30d00a4 	movw	r0, #53412	@ 0xd0a4
   243cc:	e3400003 	movt	r0, #3
   243d0:	e3a02053 	mov	r2, #83	@ 0x53
   243d4:	eb001e80 	bl	2bddc <assertion_failed>
   243d8:	e30d1030 	movw	r1, #53296	@ 0xd030
   243dc:	e3401003 	movt	r1, #3
   243e0:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   243e4:	e3400003 	movt	r0, #3
   243e8:	e3a0205b 	mov	r2, #91	@ 0x5b
   243ec:	eb001e7a 	bl	2bddc <assertion_failed>
   243f0:	e5dd3029 	ldrb	r3, [sp, #41]	@ 0x29
   243f4:	e3530000 	cmp	r3, #0
   243f8:	1affffb7 	bne	242dc <CICMPHandler::Process()+0xb4>
   243fc:	e1a01005 	mov	r1, r5
   24400:	e28d0028 	add	r0, sp, #40	@ 0x28
   24404:	e58d3028 	str	r3, [sp, #40]	@ 0x28
   24408:	eb0012d2 	bl	28f58 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>
   2440c:	e1cd02ba 	strh	r0, [sp, #42]	@ 0x2a
   24410:	e5960004 	ldr	r0, [r6, #4]
   24414:	e3500000 	cmp	r0, #0
   24418:	0a000059 	beq	24584 <CICMPHandler::Process()+0x35c>
   2441c:	e3a02001 	mov	r2, #1
   24420:	e1a03005 	mov	r3, r5
   24424:	e58d2000 	str	r2, [sp]
   24428:	e1a01007 	mov	r1, r7
   2442c:	e28d2028 	add	r2, sp, #40	@ 0x28
   24430:	ebfff796 	bl	22290 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   24434:	eaffffa8 	b	242dc <CICMPHandler::Process()+0xb4>
   24438:	e30d1030 	movw	r1, #53296	@ 0xd030
   2443c:	e3401003 	movt	r1, #3
   24440:	e30c0fb8 	movw	r0, #53176	@ 0xcfb8
   24444:	e3400003 	movt	r0, #3
   24448:	e3a0204e 	mov	r2, #78	@ 0x4e
   2444c:	eb001e62 	bl	2bddc <assertion_failed>
   24450:	e28dde66 	add	sp, sp, #1632	@ 0x660
   24454:	e28dd00c 	add	sp, sp, #12
   24458:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2445c:	eb0028d9 	bl	2e7c8 <CLogger::Get()>
   24460:	e5dd3029 	ldrb	r3, [sp, #41]	@ 0x29
   24464:	e58d3000 	str	r3, [sp]
   24468:	e3a02002 	mov	r2, #2
   2446c:	e30d310c 	movw	r3, #53516	@ 0xd10c
   24470:	e3403003 	movt	r3, #3
   24474:	e3011ddc 	movw	r1, #7644	@ 0x1ddc
   24478:	e3401004 	movt	r1, #4
   2447c:	eb002a9a 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   24480:	e1a03004 	mov	r3, r4
   24484:	e28d2030 	add	r2, sp, #48	@ 0x30
   24488:	e3a01002 	mov	r1, #2
   2448c:	e1a00006 	mov	r0, r6
   24490:	ebffff27 	bl	24134 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   24494:	eaffff90 	b	242dc <CICMPHandler::Process()+0xb4>
   24498:	eb0028ca 	bl	2e7c8 <CLogger::Get()>
   2449c:	e5dd3029 	ldrb	r3, [sp, #41]	@ 0x29
   244a0:	e58d3000 	str	r3, [sp]
   244a4:	e3a02002 	mov	r2, #2
   244a8:	e30d30f8 	movw	r3, #53496	@ 0xd0f8
   244ac:	e3403003 	movt	r3, #3
   244b0:	e3011ddc 	movw	r1, #7644	@ 0x1ddc
   244b4:	e3401004 	movt	r1, #4
   244b8:	eb002a8b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   244bc:	e1a03004 	mov	r3, r4
   244c0:	e28d2030 	add	r2, sp, #48	@ 0x30
   244c4:	e3a01001 	mov	r1, #1
   244c8:	e1a00006 	mov	r0, r6
   244cc:	ebffff18 	bl	24134 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   244d0:	eaffff81 	b	242dc <CICMPHandler::Process()+0xb4>
   244d4:	e28d102c 	add	r1, sp, #44	@ 0x2c
   244d8:	e28d0020 	add	r0, sp, #32
   244dc:	eb000fe7 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
   244e0:	e5963004 	ldr	r3, [r6, #4]
   244e4:	e3530000 	cmp	r3, #0
   244e8:	0a00002b 	beq	2459c <CICMPHandler::Process()+0x374>
   244ec:	e5960000 	ldr	r0, [r6]
   244f0:	eb000fbf 	bl	283f4 <CNetConfig::GetIPAddress() const>
   244f4:	e1a04000 	mov	r4, r0
   244f8:	e5960000 	ldr	r0, [r6]
   244fc:	eb000fc0 	bl	28404 <CNetConfig::GetNetMask() const>
   24500:	e1a01004 	mov	r1, r4
   24504:	e1a02000 	mov	r2, r0
   24508:	e28d0020 	add	r0, sp, #32
   2450c:	eb001115 	bl	28968 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>
   24510:	e3500000 	cmp	r0, #0
   24514:	0a000008 	beq	2453c <CICMPHandler::Process()+0x314>
   24518:	e28d4040 	add	r4, sp, #64	@ 0x40
   2451c:	e5960004 	ldr	r0, [r6, #4]
   24520:	e1a01004 	mov	r1, r4
   24524:	ebfff892 	bl	22774 <CNetworkLayer::GetGateway(unsigned char const*) const>
   24528:	e1a01000 	mov	r1, r0
   2452c:	e1a00007 	mov	r0, r7
   24530:	eb00103c 	bl	28628 <CIPAddress::operator!=(unsigned char const*) const>
   24534:	e3500000 	cmp	r0, #0
   24538:	0a00001d 	beq	245b4 <CICMPHandler::Process()+0x38c>
   2453c:	e28d0020 	add	r0, sp, #32
   24540:	eb000fee 	bl	28500 <CIPAddress::~CIPAddress()>
   24544:	eaffff64 	b	242dc <CICMPHandler::Process()+0xb4>
   24548:	eb00289e 	bl	2e7c8 <CLogger::Get()>
   2454c:	e5dd3029 	ldrb	r3, [sp, #41]	@ 0x29
   24550:	e58d3000 	str	r3, [sp]
   24554:	e3a02004 	mov	r2, #4
   24558:	e30d30c8 	movw	r3, #53448	@ 0xd0c8
   2455c:	e3403003 	movt	r3, #3
   24560:	e3011ddc 	movw	r1, #7644	@ 0x1ddc
   24564:	e3401004 	movt	r1, #4
   24568:	eb002a5f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2456c:	e1a03004 	mov	r3, r4
   24570:	e28d2030 	add	r2, sp, #48	@ 0x30
   24574:	e3a01000 	mov	r1, #0
   24578:	e1a00006 	mov	r0, r6
   2457c:	ebfffeec 	bl	24134 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   24580:	eaffff55 	b	242dc <CICMPHandler::Process()+0xb4>
   24584:	e30d1030 	movw	r1, #53296	@ 0xd030
   24588:	e3401003 	movt	r1, #3
   2458c:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   24590:	e3400003 	movt	r0, #3
   24594:	e3a02078 	mov	r2, #120	@ 0x78
   24598:	eb001e0f 	bl	2bddc <assertion_failed>
   2459c:	e30d1030 	movw	r1, #53296	@ 0xd030
   245a0:	e3401003 	movt	r1, #3
   245a4:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   245a8:	e3400003 	movt	r0, #3
   245ac:	e3a020a7 	mov	r2, #167	@ 0xa7
   245b0:	eb001e09 	bl	2bddc <assertion_failed>
   245b4:	eb002883 	bl	2e7c8 <CLogger::Get()>
   245b8:	e5dd3029 	ldrb	r3, [sp, #41]	@ 0x29
   245bc:	e3a02004 	mov	r2, #4
   245c0:	e58d3000 	str	r3, [sp]
   245c4:	e3011ddc 	movw	r1, #7644	@ 0x1ddc
   245c8:	e3401004 	movt	r1, #4
   245cc:	e30d30e8 	movw	r3, #53480	@ 0xd0e8
   245d0:	e3403003 	movt	r3, #3
   245d4:	eb002a44 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   245d8:	e5965004 	ldr	r5, [r6, #4]
   245dc:	e28d0020 	add	r0, sp, #32
   245e0:	eb00107d 	bl	287dc <CIPAddress::Get() const>
   245e4:	e1a01004 	mov	r1, r4
   245e8:	e1a02000 	mov	r2, r0
   245ec:	e1a00005 	mov	r0, r5
   245f0:	ebfff85d 	bl	2276c <CNetworkLayer::AddRoute(unsigned char const*, unsigned char const*)>
   245f4:	e28d0020 	add	r0, sp, #32
   245f8:	eb000fc0 	bl	28500 <CIPAddress::~CIPAddress()>
   245fc:	eaffff36 	b	242dc <CICMPHandler::Process()+0xb4>

00024600 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)>:
   24600:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24604:	e2524000 	subs	r4, r2, #0
   24608:	e24dd020 	sub	sp, sp, #32
   2460c:	0a000042 	beq	2471c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x11c>
   24610:	e1a05003 	mov	r5, r3
   24614:	e3530014 	cmp	r3, #20
   24618:	9a000045 	bls	24734 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x134>
   2461c:	e5d42000 	ldrb	r2, [r4]
   24620:	e1a08001 	mov	r8, r1
   24624:	e202300f 	and	r3, r2, #15
   24628:	e2431005 	sub	r1, r3, #5
   2462c:	e3510001 	cmp	r1, #1
   24630:	8a000045 	bhi	2474c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x14c>
   24634:	e1a02222 	lsr	r2, r2, #4
   24638:	e1a06103 	lsl	r6, r3, #2
   2463c:	e3520004 	cmp	r2, #4
   24640:	1a000047 	bne	24764 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x164>
   24644:	e1a07000 	mov	r7, r0
   24648:	e5900000 	ldr	r0, [r0]
   2464c:	eb000f68 	bl	283f4 <CNetConfig::GetIPAddress() const>
   24650:	e284100c 	add	r1, r4, #12
   24654:	eb000fdb 	bl	285c8 <CIPAddress::operator==(unsigned char const*) const>
   24658:	e3500000 	cmp	r0, #0
   2465c:	0a000046 	beq	2477c <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x17c>
   24660:	e2863008 	add	r3, r6, #8
   24664:	e1530005 	cmp	r3, r5
   24668:	8a000049 	bhi	24794 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x194>
   2466c:	e0846006 	add	r6, r4, r6
   24670:	e3580000 	cmp	r8, #0
   24674:	0a000025 	beq	24710 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x110>
   24678:	e3580001 	cmp	r8, #1
   2467c:	e30d3e48 	movw	r3, #56904	@ 0xde48
   24680:	e3403003 	movt	r3, #3
   24684:	e30d5130 	movw	r5, #53552	@ 0xd130
   24688:	e3405003 	movt	r5, #3
   2468c:	11a05003 	movne	r5, r3
   24690:	e28d0010 	add	r0, sp, #16
   24694:	eb0038ea 	bl	32a44 <CString::CString()>
   24698:	e2841010 	add	r1, r4, #16
   2469c:	e28d0008 	add	r0, sp, #8
   246a0:	eb000f76 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
   246a4:	e28d1010 	add	r1, sp, #16
   246a8:	e28d0008 	add	r0, sp, #8
   246ac:	eb00108d 	bl	288e8 <CIPAddress::Format(CString*) const>
   246b0:	eb002844 	bl	2e7c8 <CLogger::Get()>
   246b4:	e1a08000 	mov	r8, r0
   246b8:	e28d0010 	add	r0, sp, #16
   246bc:	eb003918 	bl	32b24 <CString::operator char const*() const>
   246c0:	e3a02004 	mov	r2, #4
   246c4:	e58d0004 	str	r0, [sp, #4]
   246c8:	e30d3278 	movw	r3, #53880	@ 0xd278
   246cc:	e3403003 	movt	r3, #3
   246d0:	e1a00008 	mov	r0, r8
   246d4:	e58d5000 	str	r5, [sp]
   246d8:	e3011ddc 	movw	r1, #7644	@ 0x1ddc
   246dc:	e3401004 	movt	r1, #4
   246e0:	eb002a01 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   246e4:	e1a03006 	mov	r3, r6
   246e8:	e1a02004 	mov	r2, r4
   246ec:	e3a01000 	mov	r1, #0
   246f0:	e1a00007 	mov	r0, r7
   246f4:	ebfffe8e 	bl	24134 <CICMPHandler::EnqueueNotification(TICMPNotificationType, TIPHeader*, TICMPDataDatagramHeader*)>
   246f8:	e28d0008 	add	r0, sp, #8
   246fc:	eb000f7f 	bl	28500 <CIPAddress::~CIPAddress()>
   24700:	e28d0010 	add	r0, sp, #16
   24704:	eb00389b 	bl	32978 <CString::~CString()>
   24708:	e28dd020 	add	sp, sp, #32
   2470c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24710:	e30d5124 	movw	r5, #53540	@ 0xd124
   24714:	e3405003 	movt	r5, #3
   24718:	eaffffdc 	b	24690 <CICMPHandler::DestinationUnreachable(unsigned int, void const*, unsigned int)+0x90>
   2471c:	e30d1030 	movw	r1, #53296	@ 0xd030
   24720:	e3401003 	movt	r1, #3
   24724:	e30d0138 	movw	r0, #53560	@ 0xd138
   24728:	e3400003 	movt	r0, #3
   2472c:	e3a020c9 	mov	r2, #201	@ 0xc9
   24730:	eb001da9 	bl	2bddc <assertion_failed>
   24734:	e30d1030 	movw	r1, #53296	@ 0xd030
   24738:	e3401003 	movt	r1, #3
   2473c:	e30d0150 	movw	r0, #53584	@ 0xd150
   24740:	e3400003 	movt	r0, #3
   24744:	e3a020ca 	mov	r2, #202	@ 0xca
   24748:	eb001da3 	bl	2bddc <assertion_failed>
   2474c:	e30d1030 	movw	r1, #53296	@ 0xd030
   24750:	e3401003 	movt	r1, #3
   24754:	e30d0170 	movw	r0, #53616	@ 0xd170
   24758:	e3400003 	movt	r0, #3
   2475c:	e3a020ce 	mov	r2, #206	@ 0xce
   24760:	eb001d9d 	bl	2bddc <assertion_failed>
   24764:	e30d1030 	movw	r1, #53296	@ 0xd030
   24768:	e3401003 	movt	r1, #3
   2476c:	e30d01d0 	movw	r0, #53712	@ 0xd1d0
   24770:	e3400003 	movt	r0, #3
   24774:	e3a020d2 	mov	r2, #210	@ 0xd2
   24778:	eb001d97 	bl	2bddc <assertion_failed>
   2477c:	e30d1030 	movw	r1, #53296	@ 0xd030
   24780:	e3401003 	movt	r1, #3
   24784:	e30d01fc 	movw	r0, #53756	@ 0xd1fc
   24788:	e3400003 	movt	r0, #3
   2478c:	e3a020d3 	mov	r2, #211	@ 0xd3
   24790:	eb001d91 	bl	2bddc <assertion_failed>
   24794:	e30d1030 	movw	r1, #53296	@ 0xd030
   24798:	e3401003 	movt	r1, #3
   2479c:	e30d0238 	movw	r0, #53816	@ 0xd238
   247a0:	e3400003 	movt	r0, #3
   247a4:	e3a020d4 	mov	r2, #212	@ 0xd4
   247a8:	eb001d8b 	bl	2bddc <assertion_failed>

000247ac <CRouteCache::CRouteCache()>:
   247ac:	e3a02064 	mov	r2, #100	@ 0x64
   247b0:	e92d4010 	push	{r4, lr}
   247b4:	e1a01002 	mov	r1, r2
   247b8:	e1a04000 	mov	r4, r0
   247bc:	eb002c1c 	bl	2f834 <CPtrArray::CPtrArray(unsigned int, unsigned int)>
   247c0:	e1a00004 	mov	r0, r4
   247c4:	e8bd8010 	pop	{r4, pc}

000247c8 <CRouteCache::Flush()>:
   247c8:	e92d4070 	push	{r4, r5, r6, lr}
   247cc:	e1a05000 	mov	r5, r0
   247d0:	eb002c3f 	bl	2f8d4 <CPtrArray::GetCount() const>
   247d4:	e3500000 	cmp	r0, #0
   247d8:	08bd8070 	popeq	{r4, r5, r6, pc}
   247dc:	e2404001 	sub	r4, r0, #1
   247e0:	e1a01004 	mov	r1, r4
   247e4:	e1a00005 	mov	r0, r5
   247e8:	eb002c3b 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   247ec:	e5900000 	ldr	r0, [r0]
   247f0:	e3a01008 	mov	r1, #8
   247f4:	e3500000 	cmp	r0, #0
   247f8:	0a000000 	beq	24800 <CRouteCache::Flush()+0x38>
   247fc:	eb004660 	bl	36184 <operator delete(void*, unsigned int)>
   24800:	e1a00005 	mov	r0, r5
   24804:	eb002cb1 	bl	2fad0 <CPtrArray::RemoveLast()>
   24808:	e2544001 	subs	r4, r4, #1
   2480c:	38bd8070 	popcc	{r4, r5, r6, pc}
   24810:	eafffff2 	b	247e0 <CRouteCache::Flush()+0x18>

00024814 <CRouteCache::~CRouteCache()>:
   24814:	e92d4010 	push	{r4, lr}
   24818:	e1a04000 	mov	r4, r0
   2481c:	ebffffe9 	bl	247c8 <CRouteCache::Flush()>
   24820:	e1a00004 	mov	r0, r4
   24824:	eb002c1f 	bl	2f8a8 <CPtrArray::~CPtrArray()>
   24828:	e1a00004 	mov	r0, r4
   2482c:	e8bd8010 	pop	{r4, pc}

00024830 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)>:
   24830:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24834:	e2516000 	subs	r6, r1, #0
   24838:	0a00002b 	beq	248ec <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xbc>
   2483c:	e1a08002 	mov	r8, r2
   24840:	e3520000 	cmp	r2, #0
   24844:	0a00002e 	beq	24904 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xd4>
   24848:	e1a07000 	mov	r7, r0
   2484c:	eb002c20 	bl	2f8d4 <CPtrArray::GetCount() const>
   24850:	e2509000 	subs	r9, r0, #0
   24854:	0a000016 	beq	248b4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x84>
   24858:	e3a04000 	mov	r4, #0
   2485c:	ea000008 	b	24884 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x54>
   24860:	e3a02004 	mov	r2, #4
   24864:	e1a01006 	mov	r1, r6
   24868:	e1a00005 	mov	r0, r5
   2486c:	eb00420c 	bl	350a4 <memcmp>
   24870:	e3500000 	cmp	r0, #0
   24874:	0a000017 	beq	248d8 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0xa8>
   24878:	e2844001 	add	r4, r4, #1
   2487c:	e1590004 	cmp	r9, r4
   24880:	0a00000b 	beq	248b4 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x84>
   24884:	e1a01004 	mov	r1, r4
   24888:	e1a00007 	mov	r0, r7
   2488c:	eb002c12 	bl	2f8dc <CPtrArray::operator[](unsigned int)>
   24890:	e5905000 	ldr	r5, [r0]
   24894:	e3550000 	cmp	r5, #0
   24898:	1afffff0 	bne	24860 <CRouteCache::AddRoute(unsigned char const*, unsigned char const*)+0x30>
   2489c:	e30d1298 	movw	r1, #53912	@ 0xd298
   248a0:	e3401003 	movt	r1, #3
   248a4:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
   248a8:	e3400003 	movt	r0, #3
   248ac:	e3a0203e 	mov	r2, #62	@ 0x3e
   248b0:	eb001d49 	bl	2bddc <assertion_failed>
   248b4:	e3a00008 	mov	r0, #8
   248b8:	eb004619 	bl	36124 <operator new(unsigned int)>
   248bc:	e1a01006 	mov	r1, r6
   248c0:	e1a05000 	mov	r5, r0
   248c4:	e3a02004 	mov	r2, #4
   248c8:	eb00440d 	bl	35904 <memcpy>
   248cc:	e1a01005 	mov	r1, r5
   248d0:	e1a00007 	mov	r0, r7
   248d4:	eb002c3c 	bl	2f9cc <CPtrArray::Append(void*)>
   248d8:	e3a02004 	mov	r2, #4
   248dc:	e1a01008 	mov	r1, r8
   248e0:	e0850002 	add	r0, r5, r2
   248e4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   248e8:	ea004405 	b	35904 <memcpy>
   248ec:	e30d1298 	movw	r1, #53912	@ 0xd298
   248f0:	e3401003 	movt	r1, #3
   248f4:	e30d02a8 	movw	r0, #53928	@ 0xd2a8
   248f8:	e3400003 	movt	r0, #3
   248fc:	e3a02035 	mov	r2, #53	@ 0x35
   24900:	eb001d35 	bl	2bddc <assertion_failed>
   24904:	e30d1298 	movw	r1, #53912	@ 0xd298
   24908:	e3401003 	movt	r1, #3
   2490c:	e30d02b8 	movw	r0, #53944	@ 0xd2b8
   24910:	e3400003 	movt	r0, #3
   24914:	e3a02036 	mov	r2, #54	@ 0x36
   24918:	eb001d2f 	bl	2bddc <assertion_failed>

0002491c <CRouteCache::GetRoute(unsigned char const*) const>:
   2491c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   24920:	e2516000 	subs	r6, r1, #0
   24924:	0a00001c 	beq	2499c <CRouteCache::GetRoute(unsigned char const*) const+0x80>
   24928:	e1a07000 	mov	r7, r0
   2492c:	eb002be8 	bl	2f8d4 <CPtrArray::GetCount() const>
   24930:	e2508000 	subs	r8, r0, #0
   24934:	0a000014 	beq	2498c <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   24938:	e3a05000 	mov	r5, #0
   2493c:	ea000007 	b	24960 <CRouteCache::GetRoute(unsigned char const*) const+0x44>
   24940:	e3a02004 	mov	r2, #4
   24944:	e1a01006 	mov	r1, r6
   24948:	eb0041d5 	bl	350a4 <memcmp>
   2494c:	e3500000 	cmp	r0, #0
   24950:	0a00000f 	beq	24994 <CRouteCache::GetRoute(unsigned char const*) const+0x78>
   24954:	e2855001 	add	r5, r5, #1
   24958:	e1580005 	cmp	r8, r5
   2495c:	0a00000a 	beq	2498c <CRouteCache::GetRoute(unsigned char const*) const+0x70>
   24960:	e1a01005 	mov	r1, r5
   24964:	e1a00007 	mov	r0, r7
   24968:	eb002bf9 	bl	2f954 <CPtrArray::operator[](unsigned int) const>
   2496c:	e2504000 	subs	r4, r0, #0
   24970:	1afffff2 	bne	24940 <CRouteCache::GetRoute(unsigned char const*) const+0x24>
   24974:	e30d1298 	movw	r1, #53912	@ 0xd298
   24978:	e3401003 	movt	r1, #3
   2497c:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
   24980:	e3400003 	movt	r0, #3
   24984:	e3a0205d 	mov	r2, #93	@ 0x5d
   24988:	eb001d13 	bl	2bddc <assertion_failed>
   2498c:	e3a00000 	mov	r0, #0
   24990:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   24994:	e2840004 	add	r0, r4, #4
   24998:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2499c:	e30d1298 	movw	r1, #53912	@ 0xd298
   249a0:	e3401003 	movt	r1, #3
   249a4:	e30d02a8 	movw	r0, #53928	@ 0xd2a8
   249a8:	e3400003 	movt	r0, #3
   249ac:	e3a02057 	mov	r2, #87	@ 0x57
   249b0:	eb001d09 	bl	2bddc <assertion_failed>

000249b4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>:
   249b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   249b8:	e1a04000 	mov	r4, r0
   249bc:	e1a06001 	mov	r6, r1
   249c0:	e1a05003 	mov	r5, r3
   249c4:	e1a01003 	mov	r1, r3
   249c8:	e59f3094 	ldr	r3, [pc, #148]	@ 24a64 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0xb0>
   249cc:	e280000c 	add	r0, r0, #12
   249d0:	e5002004 	str	r2, [r0, #-4]
   249d4:	e59d7028 	ldr	r7, [sp, #40]	@ 0x28
   249d8:	e5843000 	str	r3, [r4]
   249dc:	e1dd92b0 	ldrh	r9, [sp, #32]
   249e0:	e1dd82b4 	ldrh	r8, [sp, #36]	@ 0x24
   249e4:	e5846004 	str	r6, [r4, #4]
   249e8:	eb000eb5 	bl	284c4 <CIPAddress::CIPAddress(CIPAddress const&)>
   249ec:	e1a00006 	mov	r0, r6
   249f0:	e1c491b4 	strh	r9, [r4, #20]
   249f4:	e1c481b6 	strh	r8, [r4, #22]
   249f8:	e5847018 	str	r7, [r4, #24]
   249fc:	eb000e7c 	bl	283f4 <CNetConfig::GetIPAddress() const>
   24a00:	e1a03007 	mov	r3, r7
   24a04:	e1a01000 	mov	r1, r0
   24a08:	e1a02005 	mov	r2, r5
   24a0c:	e284001c 	add	r0, r4, #28
   24a10:	eb0010df 	bl	28d94 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>
   24a14:	e5943004 	ldr	r3, [r4, #4]
   24a18:	e3530000 	cmp	r3, #0
   24a1c:	0a000004 	beq	24a34 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x80>
   24a20:	e5943008 	ldr	r3, [r4, #8]
   24a24:	e3530000 	cmp	r3, #0
   24a28:	0a000007 	beq	24a4c <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)+0x98>
   24a2c:	e1a00004 	mov	r0, r4
   24a30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24a34:	e30d12c8 	movw	r1, #53960	@ 0xd2c8
   24a38:	e3401003 	movt	r1, #3
   24a3c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   24a40:	e3400003 	movt	r0, #3
   24a44:	e3a02025 	mov	r2, #37	@ 0x25
   24a48:	eb001ce3 	bl	2bddc <assertion_failed>
   24a4c:	e30d12c8 	movw	r1, #53960	@ 0xd2c8
   24a50:	e3401003 	movt	r1, #3
   24a54:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   24a58:	e3400003 	movt	r0, #3
   24a5c:	e3a02026 	mov	r2, #38	@ 0x26
   24a60:	eb001cdd 	bl	2bddc <assertion_failed>
   24a64:	00041dec 	.word	0x00041dec

00024a68 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>:
   24a68:	e92d4070 	push	{r4, r5, r6, lr}
   24a6c:	e1a04000 	mov	r4, r0
   24a70:	e59fc088 	ldr	ip, [pc, #136]	@ 24b00 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x98>
   24a74:	e580c000 	str	ip, [r0]
   24a78:	e1a05001 	mov	r5, r1
   24a7c:	e9840006 	stmib	r4, {r1, r2}
   24a80:	e280000c 	add	r0, r0, #12
   24a84:	e1a06003 	mov	r6, r3
   24a88:	eb000e75 	bl	28464 <CIPAddress::CIPAddress()>
   24a8c:	e3a03000 	mov	r3, #0
   24a90:	e1a00005 	mov	r0, r5
   24a94:	e1c431b4 	strh	r3, [r4, #20]
   24a98:	e1c461b6 	strh	r6, [r4, #22]
   24a9c:	eb000e54 	bl	283f4 <CNetConfig::GetIPAddress() const>
   24aa0:	e59d2010 	ldr	r2, [sp, #16]
   24aa4:	e1a01000 	mov	r1, r0
   24aa8:	e284001c 	add	r0, r4, #28
   24aac:	eb0010ac 	bl	28d64 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>
   24ab0:	e5943004 	ldr	r3, [r4, #4]
   24ab4:	e3530000 	cmp	r3, #0
   24ab8:	0a000004 	beq	24ad0 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x68>
   24abc:	e5943008 	ldr	r3, [r4, #8]
   24ac0:	e3530000 	cmp	r3, #0
   24ac4:	0a000007 	beq	24ae8 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)+0x80>
   24ac8:	e1a00004 	mov	r0, r4
   24acc:	e8bd8070 	pop	{r4, r5, r6, pc}
   24ad0:	e30d12c8 	movw	r1, #53960	@ 0xd2c8
   24ad4:	e3401003 	movt	r1, #3
   24ad8:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   24adc:	e3400003 	movt	r0, #3
   24ae0:	e3a02033 	mov	r2, #51	@ 0x33
   24ae4:	eb001cbc 	bl	2bddc <assertion_failed>
   24ae8:	e30d12c8 	movw	r1, #53960	@ 0xd2c8
   24aec:	e3401003 	movt	r1, #3
   24af0:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   24af4:	e3400003 	movt	r0, #3
   24af8:	e3a02034 	mov	r2, #52	@ 0x34
   24afc:	eb001cb6 	bl	2bddc <assertion_failed>
   24b00:	00041dec 	.word	0x00041dec

00024b04 <CNetConnection::~CNetConnection()>:
   24b04:	e92d4010 	push	{r4, lr}
   24b08:	e1a04000 	mov	r4, r0
   24b0c:	e59f2024 	ldr	r2, [pc, #36]	@ 24b38 <CNetConnection::~CNetConnection()+0x34>
   24b10:	e3a03000 	mov	r3, #0
   24b14:	e280001c 	add	r0, r0, #28
   24b18:	e5842000 	str	r2, [r4]
   24b1c:	e5843008 	str	r3, [r4, #8]
   24b20:	e5843004 	str	r3, [r4, #4]
   24b24:	eb0010ab 	bl	28dd8 <CChecksumCalculator::~CChecksumCalculator()>
   24b28:	e284000c 	add	r0, r4, #12
   24b2c:	eb000e73 	bl	28500 <CIPAddress::~CIPAddress()>
   24b30:	e1a00004 	mov	r0, r4
   24b34:	e8bd8010 	pop	{r4, pc}
   24b38:	00041dec 	.word	0x00041dec

00024b3c <CNetConnection::~CNetConnection()>:
   24b3c:	e92d4010 	push	{r4, lr}
   24b40:	e1a04000 	mov	r4, r0
   24b44:	e59f2030 	ldr	r2, [pc, #48]	@ 24b7c <CNetConnection::~CNetConnection()+0x40>
   24b48:	e3a03000 	mov	r3, #0
   24b4c:	e280001c 	add	r0, r0, #28
   24b50:	e5842000 	str	r2, [r4]
   24b54:	e5843008 	str	r3, [r4, #8]
   24b58:	e5843004 	str	r3, [r4, #4]
   24b5c:	eb00109d 	bl	28dd8 <CChecksumCalculator::~CChecksumCalculator()>
   24b60:	e284000c 	add	r0, r4, #12
   24b64:	eb000e65 	bl	28500 <CIPAddress::~CIPAddress()>
   24b68:	e1a00004 	mov	r0, r4
   24b6c:	e3a0102c 	mov	r1, #44	@ 0x2c
   24b70:	eb004583 	bl	36184 <operator delete(void*, unsigned int)>
   24b74:	e1a00004 	mov	r0, r4
   24b78:	e8bd8010 	pop	{r4, pc}
   24b7c:	00041dec 	.word	0x00041dec

00024b80 <CNetConnection::GetForeignIP() const>:
   24b80:	e280000c 	add	r0, r0, #12
   24b84:	ea000f14 	b	287dc <CIPAddress::Get() const>

00024b88 <CNetConnection::GetOwnPort() const>:
   24b88:	e1d001b6 	ldrh	r0, [r0, #22]
   24b8c:	e3500000 	cmp	r0, #0
   24b90:	112fff1e 	bxne	lr
   24b94:	e30d12c8 	movw	r1, #53960	@ 0xd2c8
   24b98:	e3401003 	movt	r1, #3
   24b9c:	e30d02dc 	movw	r0, #53980	@ 0xd2dc
   24ba0:	e3400003 	movt	r0, #3
   24ba4:	e3a02044 	mov	r2, #68	@ 0x44
   24ba8:	e92d4010 	push	{r4, lr}
   24bac:	eb001c8a 	bl	2bddc <assertion_failed>

00024bb0 <CNetConnection::GetProtocol() const>:
   24bb0:	e5900018 	ldr	r0, [r0, #24]
   24bb4:	e12fff1e 	bx	lr

00024bb8 <CUDPConnection::Accept(CIPAddress*, unsigned short*)>:
   24bb8:	e3e00000 	mvn	r0, #0
   24bbc:	e12fff1e 	bx	lr

00024bc0 <CUDPConnection::Close()>:
   24bc0:	e5d03029 	ldrb	r3, [r0, #41]	@ 0x29
   24bc4:	e3530000 	cmp	r3, #0
   24bc8:	13a03000 	movne	r3, #0
   24bcc:	15c03029 	strbne	r3, [r0, #41]	@ 0x29
   24bd0:	11a00003 	movne	r0, r3
   24bd4:	03e00000 	mvneq	r0, #0
   24bd8:	e12fff1e 	bx	lr

00024bdc <CUDPConnection::SetOptionBroadcast(bool)>:
   24bdc:	e1a03000 	mov	r3, r0
   24be0:	e3a00000 	mov	r0, #0
   24be4:	e5c31040 	strb	r1, [r3, #64]	@ 0x40
   24be8:	e12fff1e 	bx	lr

00024bec <CUDPConnection::IsConnected() const>:
   24bec:	e3a00000 	mov	r0, #0
   24bf0:	e12fff1e 	bx	lr

00024bf4 <CUDPConnection::IsTerminated() const>:
   24bf4:	e5d00029 	ldrb	r0, [r0, #41]	@ 0x29
   24bf8:	e2200001 	eor	r0, r0, #1
   24bfc:	e12fff1e 	bx	lr

00024c00 <CUDPConnection::Process()>:
   24c00:	e12fff1e 	bx	lr

00024c04 <CUDPConnection::Send(void const*, unsigned int, int)>:
   24c04:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   24c08:	e1a04000 	mov	r4, r0
   24c0c:	e28db01c 	add	fp, sp, #28
   24c10:	e24dd008 	sub	sp, sp, #8
   24c14:	e5900044 	ldr	r0, [r0, #68]	@ 0x44
   24c18:	e3500000 	cmp	r0, #0
   24c1c:	b3a03000 	movlt	r3, #0
   24c20:	b5843044 	strlt	r3, [r4, #68]	@ 0x44
   24c24:	ba000042 	blt	24d34 <CUDPConnection::Send(void const*, unsigned int, int)+0x130>
   24c28:	e1a05002 	mov	r5, r2
   24c2c:	e5d4202a 	ldrb	r2, [r4, #42]	@ 0x2a
   24c30:	e3520000 	cmp	r2, #0
   24c34:	0a00004c 	beq	24d6c <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24c38:	e3d33040 	bics	r3, r3, #64	@ 0x40
   24c3c:	1a00004a 	bne	24d6c <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24c40:	e2452001 	sub	r2, r5, #1
   24c44:	e3003637 	movw	r3, #1591	@ 0x637
   24c48:	e2858008 	add	r8, r5, #8
   24c4c:	e1520003 	cmp	r2, r3
   24c50:	8a000045 	bhi	24d6c <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24c54:	e5943004 	ldr	r3, [r4, #4]
   24c58:	e3530000 	cmp	r3, #0
   24c5c:	0a000044 	beq	24d74 <CUDPConnection::Send(void const*, unsigned int, int)+0x170>
   24c60:	e5d43040 	ldrb	r3, [r4, #64]	@ 0x40
   24c64:	e1a06001 	mov	r6, r1
   24c68:	e3530000 	cmp	r3, #0
   24c6c:	0a000032 	beq	24d3c <CUDPConnection::Send(void const*, unsigned int, int)+0x138>
   24c70:	e2883007 	add	r3, r8, #7
   24c74:	e1d421b6 	ldrh	r2, [r4, #22]
   24c78:	e3c33007 	bic	r3, r3, #7
   24c7c:	e3560000 	cmp	r6, #0
   24c80:	e04dd003 	sub	sp, sp, r3
   24c84:	e6bf3fb2 	rev16	r3, r2
   24c88:	e28d7008 	add	r7, sp, #8
   24c8c:	e1cd30b8 	strh	r3, [sp, #8]
   24c90:	e1d431b4 	ldrh	r3, [r4, #20]
   24c94:	e6bf3fb3 	rev16	r3, r3
   24c98:	e1cd30ba 	strh	r3, [sp, #10]
   24c9c:	e6bf3fb8 	rev16	r3, r8
   24ca0:	e1cd30bc 	strh	r3, [sp, #12]
   24ca4:	e3a03000 	mov	r3, #0
   24ca8:	e5c73006 	strb	r3, [r7, #6]
   24cac:	e5c73007 	strb	r3, [r7, #7]
   24cb0:	0a000035 	beq	24d8c <CUDPConnection::Send(void const*, unsigned int, int)+0x188>
   24cb4:	e1a02005 	mov	r2, r5
   24cb8:	e1a01006 	mov	r1, r6
   24cbc:	e2870008 	add	r0, r7, #8
   24cc0:	e284601c 	add	r6, r4, #28
   24cc4:	eb00430e 	bl	35904 <memcpy>
   24cc8:	e5940004 	ldr	r0, [r4, #4]
   24ccc:	eb000dc8 	bl	283f4 <CNetConfig::GetIPAddress() const>
   24cd0:	e284900c 	add	r9, r4, #12
   24cd4:	e1a01000 	mov	r1, r0
   24cd8:	e1a00006 	mov	r0, r6
   24cdc:	eb00103e 	bl	28ddc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   24ce0:	e1a01009 	mov	r1, r9
   24ce4:	e1a00006 	mov	r0, r6
   24ce8:	eb00103f 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   24cec:	e1a02008 	mov	r2, r8
   24cf0:	e1a01007 	mov	r1, r7
   24cf4:	e1a00006 	mov	r0, r6
   24cf8:	eb001066 	bl	28e98 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   24cfc:	e594c008 	ldr	ip, [r4, #8]
   24d00:	e1c700b6 	strh	r0, [r7, #6]
   24d04:	e35c0000 	cmp	ip, #0
   24d08:	0a000025 	beq	24da4 <CUDPConnection::Send(void const*, unsigned int, int)+0x1a0>
   24d0c:	e3a0e011 	mov	lr, #17
   24d10:	e1a03008 	mov	r3, r8
   24d14:	e1a02007 	mov	r2, r7
   24d18:	e1a01009 	mov	r1, r9
   24d1c:	e1a0000c 	mov	r0, ip
   24d20:	e58de000 	str	lr, [sp]
   24d24:	ebfff559 	bl	22290 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   24d28:	e3500000 	cmp	r0, #0
   24d2c:	0a00000e 	beq	24d6c <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24d30:	e1a00005 	mov	r0, r5
   24d34:	e24bd01c 	sub	sp, fp, #28
   24d38:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   24d3c:	e284700c 	add	r7, r4, #12
   24d40:	e1a00007 	mov	r0, r7
   24d44:	eb000ed6 	bl	288a4 <CIPAddress::IsBroadcast() const>
   24d48:	e3500000 	cmp	r0, #0
   24d4c:	1a000006 	bne	24d6c <CUDPConnection::Send(void const*, unsigned int, int)+0x168>
   24d50:	e5940004 	ldr	r0, [r4, #4]
   24d54:	eb000db0 	bl	2841c <CNetConfig::GetBroadcastAddress() const>
   24d58:	e1a01000 	mov	r1, r0
   24d5c:	e1a00007 	mov	r0, r7
   24d60:	eb000de7 	bl	28504 <CIPAddress::operator==(CIPAddress const&) const>
   24d64:	e3500000 	cmp	r0, #0
   24d68:	0affffc0 	beq	24c70 <CUDPConnection::Send(void const*, unsigned int, int)+0x6c>
   24d6c:	e3e00000 	mvn	r0, #0
   24d70:	eaffffef 	b	24d34 <CUDPConnection::Send(void const*, unsigned int, int)+0x130>
   24d74:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   24d78:	e3401003 	movt	r1, #3
   24d7c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   24d80:	e3400003 	movt	r0, #3
   24d84:	e3a0207b 	mov	r2, #123	@ 0x7b
   24d88:	eb001c13 	bl	2bddc <assertion_failed>
   24d8c:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   24d90:	e3401003 	movt	r1, #3
   24d94:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   24d98:	e3400003 	movt	r0, #3
   24d9c:	e3a0208b 	mov	r2, #139	@ 0x8b
   24da0:	eb001c0d 	bl	2bddc <assertion_failed>
   24da4:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   24da8:	e3401003 	movt	r1, #3
   24dac:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   24db0:	e3400003 	movt	r0, #3
   24db4:	e3a02093 	mov	r2, #147	@ 0x93
   24db8:	eb001c07 	bl	2bddc <assertion_failed>

00024dbc <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   24dbc:	e92d49f0 	push	{r4, r5, r6, r7, r8, fp, lr}
   24dc0:	e1a04000 	mov	r4, r0
   24dc4:	e28db018 	add	fp, sp, #24
   24dc8:	e24dd00c 	sub	sp, sp, #12
   24dcc:	e590c044 	ldr	ip, [r0, #68]	@ 0x44
   24dd0:	e35c0000 	cmp	ip, #0
   24dd4:	e1db70b8 	ldrh	r7, [fp, #8]
   24dd8:	b3a03000 	movlt	r3, #0
   24ddc:	b5803044 	strlt	r3, [r0, #68]	@ 0x44
   24de0:	ba000041 	blt	24eec <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x130>
   24de4:	e5d0c02a 	ldrb	ip, [r0, #42]	@ 0x2a
   24de8:	e35c0000 	cmp	ip, #0
   24dec:	1a000041 	bne	24ef8 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x13c>
   24df0:	e1a0e003 	mov	lr, r3
   24df4:	e3de3040 	bics	r3, lr, #64	@ 0x40
   24df8:	1a000050 	bne	24f40 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   24dfc:	e1a05002 	mov	r5, r2
   24e00:	e2422001 	sub	r2, r2, #1
   24e04:	e3003637 	movw	r3, #1591	@ 0x637
   24e08:	e2858008 	add	r8, r5, #8
   24e0c:	e1520003 	cmp	r2, r3
   24e10:	8a00004a 	bhi	24f40 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   24e14:	e5903004 	ldr	r3, [r0, #4]
   24e18:	e3530000 	cmp	r3, #0
   24e1c:	0a000049 	beq	24f48 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x18c>
   24e20:	e5d03040 	ldrb	r3, [r0, #64]	@ 0x40
   24e24:	e1a06001 	mov	r6, r1
   24e28:	e3530000 	cmp	r3, #0
   24e2c:	0a000038 	beq	24f14 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x158>
   24e30:	e2883007 	add	r3, r8, #7
   24e34:	e6bf7fb7 	rev16	r7, r7
   24e38:	e3c33007 	bic	r3, r3, #7
   24e3c:	e6bf2fb8 	rev16	r2, r8
   24e40:	e04dd003 	sub	sp, sp, r3
   24e44:	e1d431b6 	ldrh	r3, [r4, #22]
   24e48:	e3560000 	cmp	r6, #0
   24e4c:	e6bf3fb3 	rev16	r3, r3
   24e50:	e1cd70ba 	strh	r7, [sp, #10]
   24e54:	e28d7008 	add	r7, sp, #8
   24e58:	e1cd30b8 	strh	r3, [sp, #8]
   24e5c:	e3a03000 	mov	r3, #0
   24e60:	e1cd20bc 	strh	r2, [sp, #12]
   24e64:	e5c73006 	strb	r3, [r7, #6]
   24e68:	e5c73007 	strb	r3, [r7, #7]
   24e6c:	0a00003b 	beq	24f60 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1a4>
   24e70:	e1a02005 	mov	r2, r5
   24e74:	e1a01006 	mov	r1, r6
   24e78:	e2870008 	add	r0, r7, #8
   24e7c:	e284601c 	add	r6, r4, #28
   24e80:	eb00429f 	bl	35904 <memcpy>
   24e84:	e5940004 	ldr	r0, [r4, #4]
   24e88:	eb000d59 	bl	283f4 <CNetConfig::GetIPAddress() const>
   24e8c:	e1a01000 	mov	r1, r0
   24e90:	e1a00006 	mov	r0, r6
   24e94:	eb000fd0 	bl	28ddc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   24e98:	e59b1004 	ldr	r1, [fp, #4]
   24e9c:	e1a00006 	mov	r0, r6
   24ea0:	eb000fd1 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   24ea4:	e1a02008 	mov	r2, r8
   24ea8:	e1a01007 	mov	r1, r7
   24eac:	e1a00006 	mov	r0, r6
   24eb0:	eb000ff8 	bl	28e98 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   24eb4:	e594c008 	ldr	ip, [r4, #8]
   24eb8:	e1c700b6 	strh	r0, [r7, #6]
   24ebc:	e35c0000 	cmp	ip, #0
   24ec0:	0a00002c 	beq	24f78 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x1bc>
   24ec4:	e59b1004 	ldr	r1, [fp, #4]
   24ec8:	e3a0e011 	mov	lr, #17
   24ecc:	e1a03008 	mov	r3, r8
   24ed0:	e1a02007 	mov	r2, r7
   24ed4:	e1a0000c 	mov	r0, ip
   24ed8:	e58de000 	str	lr, [sp]
   24edc:	ebfff4eb 	bl	22290 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   24ee0:	e3500000 	cmp	r0, #0
   24ee4:	0a000015 	beq	24f40 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   24ee8:	e1a0c005 	mov	ip, r5
   24eec:	e1a0000c 	mov	r0, ip
   24ef0:	e24bd018 	sub	sp, fp, #24
   24ef4:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   24ef8:	e590c000 	ldr	ip, [r0]
   24efc:	e59c4014 	ldr	r4, [ip, #20]
   24f00:	e12fff34 	blx	r4
   24f04:	e1a0c000 	mov	ip, r0
   24f08:	e1a0000c 	mov	r0, ip
   24f0c:	e24bd018 	sub	sp, fp, #24
   24f10:	e8bd89f0 	pop	{r4, r5, r6, r7, r8, fp, pc}
   24f14:	e59b0004 	ldr	r0, [fp, #4]
   24f18:	eb000e61 	bl	288a4 <CIPAddress::IsBroadcast() const>
   24f1c:	e3500000 	cmp	r0, #0
   24f20:	1a000006 	bne	24f40 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x184>
   24f24:	e5940004 	ldr	r0, [r4, #4]
   24f28:	eb000d3b 	bl	2841c <CNetConfig::GetBroadcastAddress() const>
   24f2c:	e1a01000 	mov	r1, r0
   24f30:	e59b0004 	ldr	r0, [fp, #4]
   24f34:	eb000d72 	bl	28504 <CIPAddress::operator==(CIPAddress const&) const>
   24f38:	e3500000 	cmp	r0, #0
   24f3c:	0affffbb 	beq	24e30 <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x74>
   24f40:	e3e0c000 	mvn	ip, #0
   24f44:	eaffffe8 	b	24eec <CUDPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)+0x130>
   24f48:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   24f4c:	e3401003 	movt	r1, #3
   24f50:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   24f54:	e3400003 	movt	r0, #3
   24f58:	e3a020e4 	mov	r2, #228	@ 0xe4
   24f5c:	eb001b9e 	bl	2bddc <assertion_failed>
   24f60:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   24f64:	e3401003 	movt	r1, #3
   24f68:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   24f6c:	e3400003 	movt	r0, #3
   24f70:	e3a020f4 	mov	r2, #244	@ 0xf4
   24f74:	eb001b98 	bl	2bddc <assertion_failed>
   24f78:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   24f7c:	e3401003 	movt	r1, #3
   24f80:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   24f84:	e3400003 	movt	r0, #3
   24f88:	e3a020fc 	mov	r2, #252	@ 0xfc
   24f8c:	eb001b92 	bl	2bddc <assertion_failed>

00024f90 <CUDPConnection::Receive(void*, int)>:
   24f90:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   24f94:	e1a06000 	mov	r6, r0
   24f98:	e5900044 	ldr	r0, [r0, #68]	@ 0x44
   24f9c:	e24dd00c 	sub	sp, sp, #12
   24fa0:	e3500000 	cmp	r0, #0
   24fa4:	b3a03000 	movlt	r3, #0
   24fa8:	b5863044 	strlt	r3, [r6, #68]	@ 0x44
   24fac:	ba000015 	blt	25008 <CUDPConnection::Receive(void*, int)+0x78>
   24fb0:	e1a05001 	mov	r5, r1
   24fb4:	e3510000 	cmp	r1, #0
   24fb8:	0a00001c 	beq	25030 <CUDPConnection::Receive(void*, int)+0xa0>
   24fbc:	e1a09002 	mov	r9, r2
   24fc0:	e286702c 	add	r7, r6, #44	@ 0x2c
   24fc4:	e2868038 	add	r8, r6, #56	@ 0x38
   24fc8:	e28d2004 	add	r2, sp, #4
   24fcc:	e1a01005 	mov	r1, r5
   24fd0:	e1a00007 	mov	r0, r7
   24fd4:	eb000f19 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   24fd8:	e2504000 	subs	r4, r0, #0
   24fdc:	1a00000b 	bne	25010 <CUDPConnection::Receive(void*, int)+0x80>
   24fe0:	e3590040 	cmp	r9, #64	@ 0x40
   24fe4:	0a000017 	beq	25048 <CUDPConnection::Receive(void*, int)+0xb8>
   24fe8:	e1a00008 	mov	r0, r8
   24fec:	eb001ad1 	bl	2bb38 <CSynchronizationEvent::Clear()>
   24ff0:	e1a00008 	mov	r0, r8
   24ff4:	eb001ae5 	bl	2bb90 <CSynchronizationEvent::Wait()>
   24ff8:	e5960044 	ldr	r0, [r6, #68]	@ 0x44
   24ffc:	e3500000 	cmp	r0, #0
   25000:	aafffff0 	bge	24fc8 <CUDPConnection::Receive(void*, int)+0x38>
   25004:	e5864044 	str	r4, [r6, #68]	@ 0x44
   25008:	e28dd00c 	add	sp, sp, #12
   2500c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   25010:	e59d0004 	ldr	r0, [sp, #4]
   25014:	e3500000 	cmp	r0, #0
   25018:	0a00000c 	beq	25050 <CUDPConnection::Receive(void*, int)+0xc0>
   2501c:	e3a01006 	mov	r1, #6
   25020:	eb004457 	bl	36184 <operator delete(void*, unsigned int)>
   25024:	e1a00004 	mov	r0, r4
   25028:	e28dd00c 	add	sp, sp, #12
   2502c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   25030:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   25034:	e3401003 	movt	r1, #3
   25038:	e30b0400 	movw	r0, #46080	@ 0xb400
   2503c:	e3400003 	movt	r0, #3
   25040:	e3a020a7 	mov	r2, #167	@ 0xa7
   25044:	eb001b64 	bl	2bddc <assertion_failed>
   25048:	e1a00004 	mov	r0, r4
   2504c:	eaffffed 	b	25008 <CUDPConnection::Receive(void*, int)+0x78>
   25050:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   25054:	e3401003 	movt	r1, #3
   25058:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   2505c:	e3400003 	movt	r0, #3
   25060:	e3a020bf 	mov	r2, #191	@ 0xbf
   25064:	eb001b5c 	bl	2bddc <assertion_failed>

00025068 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   25068:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2506c:	e1a06000 	mov	r6, r0
   25070:	e5900044 	ldr	r0, [r0, #68]	@ 0x44
   25074:	e24dd008 	sub	sp, sp, #8
   25078:	e3500000 	cmp	r0, #0
   2507c:	b3a03000 	movlt	r3, #0
   25080:	b5863044 	strlt	r3, [r6, #68]	@ 0x44
   25084:	ba000016 	blt	250e4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x7c>
   25088:	e1a05001 	mov	r5, r1
   2508c:	e3510000 	cmp	r1, #0
   25090:	0a000022 	beq	25120 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xb8>
   25094:	e1a09002 	mov	r9, r2
   25098:	e1a0a003 	mov	sl, r3
   2509c:	e286702c 	add	r7, r6, #44	@ 0x2c
   250a0:	e2868038 	add	r8, r6, #56	@ 0x38
   250a4:	e28d2004 	add	r2, sp, #4
   250a8:	e1a01005 	mov	r1, r5
   250ac:	e1a00007 	mov	r0, r7
   250b0:	eb000ee2 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   250b4:	e2504000 	subs	r4, r0, #0
   250b8:	1a00000b 	bne	250ec <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x84>
   250bc:	e3590040 	cmp	r9, #64	@ 0x40
   250c0:	0a00001c 	beq	25138 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd0>
   250c4:	e1a00008 	mov	r0, r8
   250c8:	eb001a9a 	bl	2bb38 <CSynchronizationEvent::Clear()>
   250cc:	e1a00008 	mov	r0, r8
   250d0:	eb001aae 	bl	2bb90 <CSynchronizationEvent::Wait()>
   250d4:	e5960044 	ldr	r0, [r6, #68]	@ 0x44
   250d8:	e3500000 	cmp	r0, #0
   250dc:	aafffff0 	bge	250a4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x3c>
   250e0:	e5864044 	str	r4, [r6, #68]	@ 0x44
   250e4:	e28dd008 	add	sp, sp, #8
   250e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   250ec:	e59d5004 	ldr	r5, [sp, #4]
   250f0:	e3550000 	cmp	r5, #0
   250f4:	0a000018 	beq	2515c <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xf4>
   250f8:	e59d3028 	ldr	r3, [sp, #40]	@ 0x28
   250fc:	e35a0000 	cmp	sl, #0
   25100:	13530000 	cmpne	r3, #0
   25104:	1a00000d 	bne	25140 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xd8>
   25108:	e1a00005 	mov	r0, r5
   2510c:	e3a01006 	mov	r1, #6
   25110:	eb00441b 	bl	36184 <operator delete(void*, unsigned int)>
   25114:	e1a00004 	mov	r0, r4
   25118:	e28dd008 	add	sp, sp, #8
   2511c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25120:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   25124:	e3401003 	movt	r1, #3
   25128:	e30b0400 	movw	r0, #46080	@ 0xb400
   2512c:	e3400003 	movt	r0, #3
   25130:	e3a02e11 	mov	r2, #272	@ 0x110
   25134:	eb001b28 	bl	2bddc <assertion_failed>
   25138:	e1a00004 	mov	r0, r4
   2513c:	eaffffe8 	b	250e4 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x7c>
   25140:	e1a01005 	mov	r1, r5
   25144:	e1a0000a 	mov	r0, sl
   25148:	eb000d73 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   2514c:	e59d2028 	ldr	r2, [sp, #40]	@ 0x28
   25150:	e1d530b4 	ldrh	r3, [r5, #4]
   25154:	e1c230b0 	strh	r3, [r2]
   25158:	eaffffea 	b	25108 <CUDPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0xa0>
   2515c:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   25160:	e3401003 	movt	r1, #3
   25164:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   25168:	e3400003 	movt	r0, #3
   2516c:	e3a02f4a 	mov	r2, #296	@ 0x128
   25170:	eb001b19 	bl	2bddc <assertion_failed>

00025174 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   25174:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25178:	e59dc024 	ldr	ip, [sp, #36]	@ 0x24
   2517c:	e35c0011 	cmp	ip, #17
   25180:	1a000017 	bne	251e4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x70>
   25184:	e1a05002 	mov	r5, r2
   25188:	e3520008 	cmp	r2, #8
   2518c:	9a00003c 	bls	25284 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x110>
   25190:	e1a04003 	mov	r4, r3
   25194:	e1d130b2 	ldrh	r3, [r1, #2]
   25198:	e1d021b6 	ldrh	r2, [r0, #22]
   2519c:	e1a07000 	mov	r7, r0
   251a0:	e6bf3fb3 	rev16	r3, r3
   251a4:	e1a06001 	mov	r6, r1
   251a8:	e6ff3073 	uxth	r3, r3
   251ac:	e1520003 	cmp	r2, r3
   251b0:	1a00000b 	bne	251e4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x70>
   251b4:	e5903004 	ldr	r3, [r0, #4]
   251b8:	e3530000 	cmp	r3, #0
   251bc:	0a000050 	beq	25304 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x190>
   251c0:	e1d180b0 	ldrh	r8, [r1]
   251c4:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   251c8:	e6bf8fb8 	rev16	r8, r8
   251cc:	e3530000 	cmp	r3, #0
   251d0:	e6ff3078 	uxth	r3, r8
   251d4:	0a000015 	beq	25230 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   251d8:	e1d021b4 	ldrh	r2, [r0, #20]
   251dc:	e1520003 	cmp	r2, r3
   251e0:	0a000001 	beq	251ec <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x78>
   251e4:	e3a00000 	mov	r0, #0
   251e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   251ec:	e280900c 	add	r9, r0, #12
   251f0:	e1a01004 	mov	r1, r4
   251f4:	e1a00009 	mov	r0, r9
   251f8:	eb000cda 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   251fc:	e3500000 	cmp	r0, #0
   25200:	0a00000a 	beq	25230 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   25204:	e1a00009 	mov	r0, r9
   25208:	eb000da5 	bl	288a4 <CIPAddress::IsBroadcast() const>
   2520c:	e3500000 	cmp	r0, #0
   25210:	1a000006 	bne	25230 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc>
   25214:	e5970004 	ldr	r0, [r7, #4]
   25218:	eb000c7f 	bl	2841c <CNetConfig::GetBroadcastAddress() const>
   2521c:	e1a01000 	mov	r1, r0
   25220:	e1a00009 	mov	r0, r9
   25224:	eb000ccf 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   25228:	e3500000 	cmp	r0, #0
   2522c:	1affffec 	bne	251e4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x70>
   25230:	e1d630b4 	ldrh	r3, [r6, #4]
   25234:	e6bf3fb3 	rev16	r3, r3
   25238:	e6ff3073 	uxth	r3, r3
   2523c:	e1530005 	cmp	r3, r5
   25240:	8a00000f 	bhi	25284 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x110>
   25244:	e1d630b6 	ldrh	r3, [r6, #6]
   25248:	e3530000 	cmp	r3, #0
   2524c:	0a00000e 	beq	2528c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x118>
   25250:	e287901c 	add	r9, r7, #28
   25254:	e1a01004 	mov	r1, r4
   25258:	e1a00009 	mov	r0, r9
   2525c:	eb000ede 	bl	28ddc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   25260:	e59d1020 	ldr	r1, [sp, #32]
   25264:	e1a00009 	mov	r0, r9
   25268:	eb000edf 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   2526c:	e1a02005 	mov	r2, r5
   25270:	e1a01006 	mov	r1, r6
   25274:	e1a00009 	mov	r0, r9
   25278:	eb000f06 	bl	28e98 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   2527c:	e3500000 	cmp	r0, #0
   25280:	0a000001 	beq	2528c <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x118>
   25284:	e3e00000 	mvn	r0, #0
   25288:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2528c:	e5d73040 	ldrb	r3, [r7, #64]	@ 0x40
   25290:	e3530000 	cmp	r3, #0
   25294:	1a00000a 	bne	252c4 <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x150>
   25298:	e59d0020 	ldr	r0, [sp, #32]
   2529c:	eb000d80 	bl	288a4 <CIPAddress::IsBroadcast() const>
   252a0:	e3500000 	cmp	r0, #0
   252a4:	1a000014 	bne	252fc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x188>
   252a8:	e5970004 	ldr	r0, [r7, #4]
   252ac:	eb000c5a 	bl	2841c <CNetConfig::GetBroadcastAddress() const>
   252b0:	e1a01000 	mov	r1, r0
   252b4:	e59d0020 	ldr	r0, [sp, #32]
   252b8:	eb000c91 	bl	28504 <CIPAddress::operator==(CIPAddress const&) const>
   252bc:	e3500000 	cmp	r0, #0
   252c0:	1a00000d 	bne	252fc <CUDPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x188>
   252c4:	e3a00006 	mov	r0, #6
   252c8:	eb004395 	bl	36124 <operator new(unsigned int)>
   252cc:	e1a09000 	mov	r9, r0
   252d0:	e1a01009 	mov	r1, r9
   252d4:	e1a00004 	mov	r0, r4
   252d8:	eb000d4b 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   252dc:	e287002c 	add	r0, r7, #44	@ 0x2c
   252e0:	e2452008 	sub	r2, r5, #8
   252e4:	e2861008 	add	r1, r6, #8
   252e8:	e1a03009 	mov	r3, r9
   252ec:	e1c980b4 	strh	r8, [r9, #4]
   252f0:	eb000e08 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   252f4:	e2870038 	add	r0, r7, #56	@ 0x38
   252f8:	eb001a11 	bl	2bb44 <CSynchronizationEvent::Set()>
   252fc:	e3a00001 	mov	r0, #1
   25300:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25304:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   25308:	e3401003 	movt	r1, #3
   2530c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   25310:	e3400003 	movt	r0, #3
   25314:	e300215e 	movw	r2, #350	@ 0x15e
   25318:	eb001aaf 	bl	2bddc <assertion_failed>

0002531c <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   2531c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25320:	e1a05003 	mov	r5, r3
   25324:	e59d3020 	ldr	r3, [sp, #32]
   25328:	e1dd71b8 	ldrh	r7, [sp, #24]
   2532c:	e1dd11bc 	ldrh	r1, [sp, #28]
   25330:	e3530011 	cmp	r3, #17
   25334:	1a000013 	bne	25388 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   25338:	e1d031b6 	ldrh	r3, [r0, #22]
   2533c:	e1a04000 	mov	r4, r0
   25340:	e1530001 	cmp	r3, r1
   25344:	1a00000f 	bne	25388 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   25348:	e5900004 	ldr	r0, [r0, #4]
   2534c:	e3500000 	cmp	r0, #0
   25350:	0a000019 	beq	253bc <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xa0>
   25354:	e1a06002 	mov	r6, r2
   25358:	eb000c25 	bl	283f4 <CNetConfig::GetIPAddress() const>
   2535c:	e1a01000 	mov	r1, r0
   25360:	e1a00005 	mov	r0, r5
   25364:	eb000c7f 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   25368:	e3500000 	cmp	r0, #0
   2536c:	1a000005 	bne	25388 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   25370:	e5d4302a 	ldrb	r3, [r4, #42]	@ 0x2a
   25374:	e3530000 	cmp	r3, #0
   25378:	0a000009 	beq	253a4 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x88>
   2537c:	e1d431b4 	ldrh	r3, [r4, #20]
   25380:	e1530007 	cmp	r3, r7
   25384:	0a000001 	beq	25390 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x74>
   25388:	e3a00000 	mov	r0, #0
   2538c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25390:	e1a01006 	mov	r1, r6
   25394:	e284000c 	add	r0, r4, #12
   25398:	eb000c72 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   2539c:	e3500000 	cmp	r0, #0
   253a0:	1afffff8 	bne	25388 <CUDPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x6c>
   253a4:	e2840038 	add	r0, r4, #56	@ 0x38
   253a8:	e3e03000 	mvn	r3, #0
   253ac:	e5843044 	str	r3, [r4, #68]	@ 0x44
   253b0:	eb0019e3 	bl	2bb44 <CSynchronizationEvent::Set()>
   253b4:	e3a00001 	mov	r0, #1
   253b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   253bc:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   253c0:	e3401003 	movt	r1, #3
   253c4:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   253c8:	e3400003 	movt	r0, #3
   253cc:	e30021a7 	movw	r2, #423	@ 0x1a7
   253d0:	eb001a81 	bl	2bddc <assertion_failed>

000253d4 <CUDPConnection::Connect()>:
   253d4:	e5d03029 	ldrb	r3, [r0, #41]	@ 0x29
   253d8:	e3530000 	cmp	r3, #0
   253dc:	0a000001 	beq	253e8 <CUDPConnection::Connect()+0x14>
   253e0:	e3a00000 	mov	r0, #0
   253e4:	e12fff1e 	bx	lr
   253e8:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   253ec:	e3401003 	movt	r1, #3
   253f0:	e30d0300 	movw	r0, #54016	@ 0xd300
   253f4:	e3400003 	movt	r0, #3
   253f8:	e3a02049 	mov	r2, #73	@ 0x49
   253fc:	e92d4010 	push	{r4, lr}
   25400:	eb001a75 	bl	2bddc <assertion_failed>

00025404 <CUDPConnection::~CUDPConnection()>:
   25404:	e5d03029 	ldrb	r3, [r0, #41]	@ 0x29
   25408:	e59f2048 	ldr	r2, [pc, #72]	@ 25458 <CUDPConnection::~CUDPConnection()+0x54>
   2540c:	e92d4010 	push	{r4, lr}
   25410:	e3530000 	cmp	r3, #0
   25414:	e5802000 	str	r2, [r0]
   25418:	1a000008 	bne	25440 <CUDPConnection::~CUDPConnection()+0x3c>
   2541c:	e1a04000 	mov	r4, r0
   25420:	e2800038 	add	r0, r0, #56	@ 0x38
   25424:	eb0019b7 	bl	2bb08 <CSynchronizationEvent::~CSynchronizationEvent()>
   25428:	e284002c 	add	r0, r4, #44	@ 0x2c
   2542c:	eb000db4 	bl	28b04 <CNetQueue::~CNetQueue()>
   25430:	e1a00004 	mov	r0, r4
   25434:	ebfffdb2 	bl	24b04 <CNetConnection::~CNetConnection()>
   25438:	e1a00004 	mov	r0, r4
   2543c:	e8bd8010 	pop	{r4, pc}
   25440:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   25444:	e3401003 	movt	r1, #3
   25448:	e30d0308 	movw	r0, #54024	@ 0xd308
   2544c:	e3400003 	movt	r0, #3
   25450:	e3a02044 	mov	r2, #68	@ 0x44
   25454:	eb001a60 	bl	2bddc <assertion_failed>
   25458:	00041e30 	.word	0x00041e30

0002545c <CUDPConnection::~CUDPConnection()>:
   2545c:	e5d03029 	ldrb	r3, [r0, #41]	@ 0x29
   25460:	e59f2054 	ldr	r2, [pc, #84]	@ 254bc <CUDPConnection::~CUDPConnection()+0x60>
   25464:	e92d4010 	push	{r4, lr}
   25468:	e3530000 	cmp	r3, #0
   2546c:	e5802000 	str	r2, [r0]
   25470:	1a00000b 	bne	254a4 <CUDPConnection::~CUDPConnection()+0x48>
   25474:	e1a04000 	mov	r4, r0
   25478:	e2800038 	add	r0, r0, #56	@ 0x38
   2547c:	eb0019a1 	bl	2bb08 <CSynchronizationEvent::~CSynchronizationEvent()>
   25480:	e284002c 	add	r0, r4, #44	@ 0x2c
   25484:	eb000d9e 	bl	28b04 <CNetQueue::~CNetQueue()>
   25488:	e1a00004 	mov	r0, r4
   2548c:	ebfffd9c 	bl	24b04 <CNetConnection::~CNetConnection()>
   25490:	e1a00004 	mov	r0, r4
   25494:	e3a01048 	mov	r1, #72	@ 0x48
   25498:	eb004339 	bl	36184 <operator delete(void*, unsigned int)>
   2549c:	e1a00004 	mov	r0, r4
   254a0:	e8bd8010 	pop	{r4, pc}
   254a4:	e30d12ec 	movw	r1, #53996	@ 0xd2ec
   254a8:	e3401003 	movt	r1, #3
   254ac:	e30d0308 	movw	r0, #54024	@ 0xd308
   254b0:	e3400003 	movt	r0, #3
   254b4:	e3a02044 	mov	r2, #68	@ 0x44
   254b8:	eb001a47 	bl	2bddc <assertion_failed>
   254bc:	00041e30 	.word	0x00041e30

000254c0 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   254c0:	e92d4010 	push	{r4, lr}
   254c4:	e1a04000 	mov	r4, r0
   254c8:	e24dd010 	sub	sp, sp, #16
   254cc:	e1ddc1b8 	ldrh	ip, [sp, #24]
   254d0:	e58dc000 	str	ip, [sp]
   254d4:	e1ddc1bc 	ldrh	ip, [sp, #28]
   254d8:	e58dc004 	str	ip, [sp, #4]
   254dc:	e3a0c011 	mov	ip, #17
   254e0:	e58dc008 	str	ip, [sp, #8]
   254e4:	ebfffd32 	bl	249b4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   254e8:	e59f2034 	ldr	r2, [pc, #52]	@ 25524 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x64>
   254ec:	e3003101 	movw	r3, #257	@ 0x101
   254f0:	e5842000 	str	r2, [r4]
   254f4:	e1c432b9 	strh	r3, [r4, #41]	@ 0x29
   254f8:	e284002c 	add	r0, r4, #44	@ 0x2c
   254fc:	eb000d47 	bl	28a20 <CNetQueue::CNetQueue()>
   25500:	e3a01000 	mov	r1, #0
   25504:	e2840038 	add	r0, r4, #56	@ 0x38
   25508:	eb00197a 	bl	2baf8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   2550c:	e3a03000 	mov	r3, #0
   25510:	e1a00004 	mov	r0, r4
   25514:	e5c43040 	strb	r3, [r4, #64]	@ 0x40
   25518:	e5843044 	str	r3, [r4, #68]	@ 0x44
   2551c:	e28dd010 	add	sp, sp, #16
   25520:	e8bd8010 	pop	{r4, pc}
   25524:	00041e30 	.word	0x00041e30

00025528 <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   25528:	e92d4010 	push	{r4, lr}
   2552c:	e1a04000 	mov	r4, r0
   25530:	e3a0c011 	mov	ip, #17
   25534:	e24dd008 	sub	sp, sp, #8
   25538:	e58dc000 	str	ip, [sp]
   2553c:	ebfffd49 	bl	24a68 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   25540:	e59f2034 	ldr	r2, [pc, #52]	@ 2557c <CUDPConnection::CUDPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0x54>
   25544:	e3a03001 	mov	r3, #1
   25548:	e5842000 	str	r2, [r4]
   2554c:	e1c432b9 	strh	r3, [r4, #41]	@ 0x29
   25550:	e284002c 	add	r0, r4, #44	@ 0x2c
   25554:	eb000d31 	bl	28a20 <CNetQueue::CNetQueue()>
   25558:	e3a01000 	mov	r1, #0
   2555c:	e2840038 	add	r0, r4, #56	@ 0x38
   25560:	eb001964 	bl	2baf8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25564:	e3a03000 	mov	r3, #0
   25568:	e1a00004 	mov	r0, r4
   2556c:	e5c43040 	strb	r3, [r4, #64]	@ 0x40
   25570:	e5843044 	str	r3, [r4, #68]	@ 0x44
   25574:	e28dd008 	add	sp, sp, #8
   25578:	e8bd8010 	pop	{r4, pc}
   2557c:	00041e30 	.word	0x00041e30

00025580 <CTCPConnection::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   25580:	e590c000 	ldr	ip, [r0]
   25584:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   25588:	e59ce014 	ldr	lr, [ip, #20]
   2558c:	e1a0c00e 	mov	ip, lr
   25590:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
   25594:	e12fff1c 	bx	ip

00025598 <CTCPConnection::SetOptionBroadcast(bool)>:
   25598:	e3a00000 	mov	r0, #0
   2559c:	e12fff1e 	bx	lr

000255a0 <CTCPConnection::IsConnected() const>:
   255a0:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   255a4:	e3530002 	cmp	r3, #2
   255a8:	9a000003 	bls	255bc <CTCPConnection::IsConnected() const+0x1c>
   255ac:	e5d0002a 	ldrb	r0, [r0, #42]	@ 0x2a
   255b0:	e250000a 	subs	r0, r0, #10
   255b4:	13a00001 	movne	r0, #1
   255b8:	e12fff1e 	bx	lr
   255bc:	e3a00000 	mov	r0, #0
   255c0:	e12fff1e 	bx	lr

000255c4 <CTCPConnection::IsTerminated() const>:
   255c4:	e5d0002a 	ldrb	r0, [r0, #42]	@ 0x2a
   255c8:	e16f0f10 	clz	r0, r0
   255cc:	e1a002a0 	lsr	r0, r0, #5
   255d0:	e12fff1e 	bx	lr

000255d4 <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)>:
   255d4:	e92d4070 	push	{r4, r5, r6, lr}
   255d8:	e1a05003 	mov	r5, r3
   255dc:	e5903000 	ldr	r3, [r0]
   255e0:	e1a04000 	mov	r4, r0
   255e4:	e5933018 	ldr	r3, [r3, #24]
   255e8:	e12fff33 	blx	r3
   255ec:	e3500000 	cmp	r0, #0
   255f0:	d8bd8070 	pople	{r4, r5, r6, pc}
   255f4:	e59d3010 	ldr	r3, [sp, #16]
   255f8:	e3550000 	cmp	r5, #0
   255fc:	13530000 	cmpne	r3, #0
   25600:	1a000001 	bne	2560c <CTCPConnection::ReceiveFrom(void*, int, CIPAddress*, unsigned short*)+0x38>
   25604:	e3a00000 	mov	r0, #0
   25608:	e8bd8070 	pop	{r4, r5, r6, pc}
   2560c:	e1a00005 	mov	r0, r5
   25610:	e284100c 	add	r1, r4, #12
   25614:	eb000c50 	bl	2875c <CIPAddress::Set(CIPAddress const&)>
   25618:	e59d2010 	ldr	r2, [sp, #16]
   2561c:	e1d431b4 	ldrh	r3, [r4, #20]
   25620:	e3a00000 	mov	r0, #0
   25624:	e1c230b0 	strh	r3, [r2]
   25628:	e8bd8070 	pop	{r4, r5, r6, pc}

0002562c <CTCPConnection::Receive(void*, int)>:
   2562c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25630:	e3d29040 	bics	r9, r2, #64	@ 0x40
   25634:	1a000013 	bne	25688 <CTCPConnection::Receive(void*, int)+0x5c>
   25638:	e590302c 	ldr	r3, [r0, #44]	@ 0x2c
   2563c:	e1a04000 	mov	r4, r0
   25640:	e3530000 	cmp	r3, #0
   25644:	ba00001d 	blt	256c0 <CTCPConnection::Receive(void*, int)+0x94>
   25648:	e1a07001 	mov	r7, r1
   2564c:	e280803c 	add	r8, r0, #60	@ 0x3c
   25650:	e2025040 	and	r5, r2, #64	@ 0x40
   25654:	e2806068 	add	r6, r0, #104	@ 0x68
   25658:	e3a02000 	mov	r2, #0
   2565c:	e1a01007 	mov	r1, r7
   25660:	e1a00008 	mov	r0, r8
   25664:	eb000d75 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   25668:	e1a03000 	mov	r3, r0
   2566c:	e3530000 	cmp	r3, #0
   25670:	e1a00006 	mov	r0, r6
   25674:	1a000014 	bne	256cc <CTCPConnection::Receive(void*, int)+0xa0>
   25678:	e5d4302a 	ldrb	r3, [r4, #42]	@ 0x2a
   2567c:	e3530001 	cmp	r3, #1
   25680:	e6ef3073 	uxtb	r3, r3
   25684:	8a000002 	bhi	25694 <CTCPConnection::Receive(void*, int)+0x68>
   25688:	e3e09000 	mvn	r9, #0
   2568c:	e1a00009 	mov	r0, r9
   25690:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25694:	e2433005 	sub	r3, r3, #5
   25698:	e3530005 	cmp	r3, #5
   2569c:	9afffff9 	bls	25688 <CTCPConnection::Receive(void*, int)+0x5c>
   256a0:	e3550000 	cmp	r5, #0
   256a4:	1afffff8 	bne	2568c <CTCPConnection::Receive(void*, int)+0x60>
   256a8:	eb001922 	bl	2bb38 <CSynchronizationEvent::Clear()>
   256ac:	e1a00006 	mov	r0, r6
   256b0:	eb001936 	bl	2bb90 <CSynchronizationEvent::Wait()>
   256b4:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
   256b8:	e3530000 	cmp	r3, #0
   256bc:	aaffffe5 	bge	25658 <CTCPConnection::Receive(void*, int)+0x2c>
   256c0:	e594902c 	ldr	r9, [r4, #44]	@ 0x2c
   256c4:	e1a00009 	mov	r0, r9
   256c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   256cc:	e1a09003 	mov	r9, r3
   256d0:	e1a00009 	mov	r0, r9
   256d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000256d8 <CTCPConnection::Send(void const*, unsigned int, int)>:
   256d8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   256dc:	e1a09003 	mov	r9, r3
   256e0:	e3d93040 	bics	r3, r9, #64	@ 0x40
   256e4:	1a000039 	bne	257d0 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   256e8:	e590302c 	ldr	r3, [r0, #44]	@ 0x2c
   256ec:	e1a08000 	mov	r8, r0
   256f0:	e3530000 	cmp	r3, #0
   256f4:	ba000027 	blt	25798 <CTCPConnection::Send(void const*, unsigned int, int)+0xc0>
   256f8:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   256fc:	e1a04001 	mov	r4, r1
   25700:	e1a06002 	mov	r6, r2
   25704:	e353000a 	cmp	r3, #10
   25708:	e6ef3073 	uxtb	r3, r3
   2570c:	8a000003 	bhi	25720 <CTCPConnection::Send(void const*, unsigned int, int)+0x48>
   25710:	e3002763 	movw	r2, #1891	@ 0x763
   25714:	e1a03332 	lsr	r3, r2, r3
   25718:	e3130001 	tst	r3, #1
   2571c:	1a00002b 	bne	257d0 <CTCPConnection::Send(void const*, unsigned int, int)+0xf8>
   25720:	e3540000 	cmp	r4, #0
   25724:	0a000023 	beq	257b8 <CTCPConnection::Send(void const*, unsigned int, int)+0xe0>
   25728:	e3560d19 	cmp	r6, #1600	@ 0x640
   2572c:	81a05006 	movhi	r5, r6
   25730:	82887030 	addhi	r7, r8, #48	@ 0x30
   25734:	9a000019 	bls	257a0 <CTCPConnection::Send(void const*, unsigned int, int)+0xc8>
   25738:	e1a01004 	mov	r1, r4
   2573c:	e3a03000 	mov	r3, #0
   25740:	e3a02d19 	mov	r2, #1600	@ 0x640
   25744:	e1a00007 	mov	r0, r7
   25748:	e2455d19 	sub	r5, r5, #1600	@ 0x640
   2574c:	eb000cf1 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   25750:	e2844d19 	add	r4, r4, #1600	@ 0x640
   25754:	e3550d19 	cmp	r5, #1600	@ 0x640
   25758:	8afffff6 	bhi	25738 <CTCPConnection::Send(void const*, unsigned int, int)+0x60>
   2575c:	e1a02005 	mov	r2, r5
   25760:	e1a01004 	mov	r1, r4
   25764:	e1a00007 	mov	r0, r7
   25768:	e3a03000 	mov	r3, #0
   2576c:	eb000ce9 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   25770:	e3190040 	tst	r9, #64	@ 0x40
   25774:	1a00000d 	bne	257b0 <CTCPConnection::Send(void const*, unsigned int, int)+0xd8>
   25778:	e2884070 	add	r4, r8, #112	@ 0x70
   2577c:	e1a00004 	mov	r0, r4
   25780:	eb0018ec 	bl	2bb38 <CSynchronizationEvent::Clear()>
   25784:	e1a00004 	mov	r0, r4
   25788:	eb001900 	bl	2bb90 <CSynchronizationEvent::Wait()>
   2578c:	e598302c 	ldr	r3, [r8, #44]	@ 0x2c
   25790:	e3530000 	cmp	r3, #0
   25794:	aa000005 	bge	257b0 <CTCPConnection::Send(void const*, unsigned int, int)+0xd8>
   25798:	e598002c 	ldr	r0, [r8, #44]	@ 0x2c
   2579c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   257a0:	e3560000 	cmp	r6, #0
   257a4:	1a00000b 	bne	257d8 <CTCPConnection::Send(void const*, unsigned int, int)+0x100>
   257a8:	e3190040 	tst	r9, #64	@ 0x40
   257ac:	0afffff1 	beq	25778 <CTCPConnection::Send(void const*, unsigned int, int)+0xa0>
   257b0:	e1a00006 	mov	r0, r6
   257b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   257b8:	e30d1314 	movw	r1, #54036	@ 0xd314
   257bc:	e3401003 	movt	r1, #3
   257c0:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   257c4:	e3400003 	movt	r0, #3
   257c8:	e3a02d06 	mov	r2, #384	@ 0x180
   257cc:	eb001982 	bl	2bddc <assertion_failed>
   257d0:	e3e00000 	mvn	r0, #0
   257d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   257d8:	e1a05006 	mov	r5, r6
   257dc:	e2887030 	add	r7, r8, #48	@ 0x30
   257e0:	eaffffdd 	b	2575c <CTCPConnection::Send(void const*, unsigned int, int)+0x84>

000257e4 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)>:
   257e4:	e92d4070 	push	{r4, r5, r6, lr}
   257e8:	e1a04000 	mov	r4, r0
   257ec:	e3a0c006 	mov	ip, #6
   257f0:	e24dd008 	sub	sp, sp, #8
   257f4:	e3a05000 	mov	r5, #0
   257f8:	e3a06001 	mov	r6, #1
   257fc:	e58dc000 	str	ip, [sp]
   25800:	ebfffc98 	bl	24a68 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   25804:	e59f30c4 	ldr	r3, [pc, #196]	@ 258d0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xec>
   25808:	e5843000 	str	r3, [r4]
   2580c:	e2840030 	add	r0, r4, #48	@ 0x30
   25810:	e5c4602a 	strb	r6, [r4, #42]	@ 0x2a
   25814:	e5c45029 	strb	r5, [r4, #41]	@ 0x29
   25818:	e584502c 	str	r5, [r4, #44]	@ 0x2c
   2581c:	eb000c7f 	bl	28a20 <CNetQueue::CNetQueue()>
   25820:	e284003c 	add	r0, r4, #60	@ 0x3c
   25824:	eb000c7d 	bl	28a20 <CNetQueue::CNetQueue()>
   25828:	e3a01801 	mov	r1, #65536	@ 0x10000
   2582c:	e2840048 	add	r0, r4, #72	@ 0x48
   25830:	eb0007b3 	bl	27704 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   25834:	e5c4505c 	strb	r5, [r4, #92]	@ 0x5c
   25838:	e1a01005 	mov	r1, r5
   2583c:	e5c4505d 	strb	r5, [r4, #93]	@ 0x5d
   25840:	e2840068 	add	r0, r4, #104	@ 0x68
   25844:	e5c4505e 	strb	r5, [r4, #94]	@ 0x5e
   25848:	e5845060 	str	r5, [r4, #96]	@ 0x60
   2584c:	e5c45064 	strb	r5, [r4, #100]	@ 0x64
   25850:	eb0018a8 	bl	2baf8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25854:	e1a01005 	mov	r1, r5
   25858:	e2840070 	add	r0, r4, #112	@ 0x70
   2585c:	eb0018a5 	bl	2baf8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25860:	eb003df4 	bl	35038 <CTimer::Get()>
   25864:	e28420a8 	add	r2, r4, #168	@ 0xa8
   25868:	eddf0b16 	vldr	d16, [pc, #88]	@ 258c8 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, unsigned short)+0xe4>
   2586c:	e3033908 	movw	r3, #14600	@ 0x3908
   25870:	e5840078 	str	r0, [r4, #120]	@ 0x78
   25874:	e28400b8 	add	r0, r4, #184	@ 0xb8
   25878:	e5843094 	str	r3, [r4, #148]	@ 0x94
   2587c:	e3a03f86 	mov	r3, #536	@ 0x218
   25880:	e5846088 	str	r6, [r4, #136]	@ 0x88
   25884:	e1c459b8 	strh	r5, [r4, #152]	@ 0x98
   25888:	f442078f 	vst1.32	{d16}, [r2]
   2588c:	e1c43bb4 	strh	r3, [r4, #180]	@ 0xb4
   25890:	e58450b0 	str	r5, [r4, #176]	@ 0xb0
   25894:	eb0008ad 	bl	27b50 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   25898:	e304313c 	movw	r3, #16700	@ 0x413c
   2589c:	e3403004 	movt	r3, #4
   258a0:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   258a4:	e284107c 	add	r1, r4, #124	@ 0x7c
   258a8:	e1a00004 	mov	r0, r4
   258ac:	e5932000 	ldr	r2, [r3]
   258b0:	f441078f 	vst1.32	{d16}, [r1]
   258b4:	e0822006 	add	r2, r2, r6
   258b8:	e5845084 	str	r5, [r4, #132]	@ 0x84
   258bc:	e5832000 	str	r2, [r3]
   258c0:	e28dd008 	add	sp, sp, #8
   258c4:	e8bd8070 	pop	{r4, r5, r6, pc}
   258c8:	00000000 	.word	0x00000000
   258cc:	00003908 	.word	0x00003908
   258d0:	00041e78 	.word	0x00041e78

000258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>:
   258d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   258d8:	e1a0c001 	mov	ip, r1
   258dc:	e20c7c02 	and	r7, ip, #512	@ 0x200
   258e0:	e24ddd19 	sub	sp, sp, #1600	@ 0x640
   258e4:	e3570000 	cmp	r7, #0
   258e8:	e24dd008 	sub	sp, sp, #8
   258ec:	e1a04000 	mov	r4, r0
   258f0:	13a00018 	movne	r0, #24
   258f4:	03a00014 	moveq	r0, #20
   258f8:	13a08006 	movne	r8, #6
   258fc:	03a08005 	moveq	r8, #5
   25900:	e59d5664 	ldr	r5, [sp, #1636]	@ 0x664
   25904:	e59d1660 	ldr	r1, [sp, #1632]	@ 0x660
   25908:	e0906005 	adds	r6, r0, r5
   2590c:	2a000040 	bcs	25a14 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x140>
   25910:	e6bfef32 	rev	lr, r2
   25914:	e1d421b6 	ldrh	r2, [r4, #22]
   25918:	e58de00c 	str	lr, [sp, #12]
   2591c:	e6bf2fb2 	rev16	r2, r2
   25920:	e1cd20b8 	strh	r2, [sp, #8]
   25924:	e1d421b4 	ldrh	r2, [r4, #20]
   25928:	e6bf2fb2 	rev16	r2, r2
   2592c:	e1cd20ba 	strh	r2, [sp, #10]
   25930:	e21c2a01 	ands	r2, ip, #4096	@ 0x1000
   25934:	1a000028 	bne	259dc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x108>
   25938:	e59430ac 	ldr	r3, [r4, #172]	@ 0xac
   2593c:	e3570000 	cmp	r7, #0
   25940:	e18cc208 	orr	ip, ip, r8, lsl #4
   25944:	e58d2010 	str	r2, [sp, #16]
   25948:	e6bf3fb3 	rev16	r3, r3
   2594c:	e1cd31b6 	strh	r3, [sp, #22]
   25950:	e1d439b8 	ldrh	r3, [r4, #152]	@ 0x98
   25954:	e1cdc1b4 	strh	ip, [sp, #20]
   25958:	e6bf3fb3 	rev16	r3, r3
   2595c:	e1cd31ba 	strh	r3, [sp, #26]
   25960:	13003402 	movwne	r3, #1026	@ 0x402
   25964:	134b3405 	movtne	r3, #46085	@ 0xb405
   25968:	158d301c 	strne	r3, [sp, #28]
   2596c:	e3550000 	cmp	r5, #0
   25970:	0a000005 	beq	2598c <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0xb8>
   25974:	e3510000 	cmp	r1, #0
   25978:	0a00001f 	beq	259fc <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x128>
   2597c:	e28d3008 	add	r3, sp, #8
   25980:	e1a02005 	mov	r2, r5
   25984:	e0830000 	add	r0, r3, r0
   25988:	eb003fdd 	bl	35904 <memcpy>
   2598c:	e1a02006 	mov	r2, r6
   25990:	e28d1008 	add	r1, sp, #8
   25994:	e284001c 	add	r0, r4, #28
   25998:	e3a03000 	mov	r3, #0
   2599c:	e1cd31b8 	strh	r3, [sp, #24]
   259a0:	eb000d3c 	bl	28e98 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   259a4:	e594c008 	ldr	ip, [r4, #8]
   259a8:	e1cd01b8 	strh	r0, [sp, #24]
   259ac:	e35c0000 	cmp	ip, #0
   259b0:	0a00000b 	beq	259e4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x110>
   259b4:	e3a0e006 	mov	lr, #6
   259b8:	e1a03006 	mov	r3, r6
   259bc:	e28d2008 	add	r2, sp, #8
   259c0:	e284100c 	add	r1, r4, #12
   259c4:	e1a0000c 	mov	r0, ip
   259c8:	e58de000 	str	lr, [sp]
   259cc:	ebfff22f 	bl	22290 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   259d0:	e28ddd19 	add	sp, sp, #1600	@ 0x640
   259d4:	e28dd008 	add	sp, sp, #8
   259d8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   259dc:	e6bf2f33 	rev	r2, r3
   259e0:	eaffffd4 	b	25938 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)+0x64>
   259e4:	e30d1314 	movw	r1, #54036	@ 0xd314
   259e8:	e3401003 	movt	r1, #3
   259ec:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   259f0:	e3400003 	movt	r0, #3
   259f4:	e3002587 	movw	r2, #1415	@ 0x587
   259f8:	eb0018f7 	bl	2bddc <assertion_failed>
   259fc:	e30d1314 	movw	r1, #54036	@ 0xd314
   25a00:	e3401003 	movt	r1, #3
   25a04:	e30b05a4 	movw	r0, #46500	@ 0xb5a4
   25a08:	e3400003 	movt	r0, #3
   25a0c:	e3002571 	movw	r2, #1393	@ 0x571
   25a10:	eb0018f1 	bl	2bddc <assertion_failed>
   25a14:	e30d1314 	movw	r1, #54036	@ 0xd314
   25a18:	e3401003 	movt	r1, #3
   25a1c:	e30d0328 	movw	r0, #54056	@ 0xd328
   25a20:	e3400003 	movt	r0, #3
   25a24:	e3002557 	movw	r2, #1367	@ 0x557
   25a28:	eb0018eb 	bl	2bddc <assertion_failed>

00025a2c <CTCPConnection::ScanOptions(TTCPHeader*)>:
   25a2c:	e3510000 	cmp	r1, #0
   25a30:	e92d4010 	push	{r4, lr}
   25a34:	0a000029 	beq	25ae0 <CTCPConnection::ScanOptions(TTCPHeader*)+0xb4>
   25a38:	e1d120bc 	ldrh	r2, [r1, #12]
   25a3c:	e281c016 	add	ip, r1, #22
   25a40:	e2813014 	add	r3, r1, #20
   25a44:	e7e32252 	ubfx	r2, r2, #4, #4
   25a48:	e0811102 	add	r1, r1, r2, lsl #2
   25a4c:	e151000c 	cmp	r1, ip
   25a50:	38bd8010 	popcc	{r4, pc}
   25a54:	e5d32000 	ldrb	r2, [r3]
   25a58:	e3520001 	cmp	r2, #1
   25a5c:	0a00000b 	beq	25a90 <CTCPConnection::ScanOptions(TTCPHeader*)+0x64>
   25a60:	e3520002 	cmp	r2, #2
   25a64:	0a00000b 	beq	25a98 <CTCPConnection::ScanOptions(TTCPHeader*)+0x6c>
   25a68:	e3520000 	cmp	r2, #0
   25a6c:	08bd8010 	popeq	{r4, pc}
   25a70:	e5d32001 	ldrb	r2, [r3, #1]
   25a74:	e0833002 	add	r3, r3, r2
   25a78:	e2832002 	add	r2, r3, #2
   25a7c:	e1510002 	cmp	r1, r2
   25a80:	38bd8010 	popcc	{r4, pc}
   25a84:	e5d32000 	ldrb	r2, [r3]
   25a88:	e3520001 	cmp	r2, #1
   25a8c:	1afffff3 	bne	25a60 <CTCPConnection::ScanOptions(TTCPHeader*)+0x34>
   25a90:	e2833001 	add	r3, r3, #1
   25a94:	eafffff7 	b	25a78 <CTCPConnection::ScanOptions(TTCPHeader*)+0x4c>
   25a98:	e5d32001 	ldrb	r2, [r3, #1]
   25a9c:	e3520004 	cmp	r2, #4
   25aa0:	1afffff3 	bne	25a74 <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   25aa4:	e283c004 	add	ip, r3, #4
   25aa8:	e151000c 	cmp	r1, ip
   25aac:	3afffff0 	bcc	25a74 <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   25ab0:	e1d3c0b2 	ldrh	ip, [r3, #2]
   25ab4:	e300e5c8 	movw	lr, #1480	@ 0x5c8
   25ab8:	e6bfcfbc 	rev16	ip, ip
   25abc:	e6ffc07c 	uxth	ip, ip
   25ac0:	e28cc014 	add	ip, ip, #20
   25ac4:	e15c000e 	cmp	ip, lr
   25ac8:	21a0c00e 	movcs	ip, lr
   25acc:	e24cc014 	sub	ip, ip, #20
   25ad0:	e35c0009 	cmp	ip, #9
   25ad4:	9affffe6 	bls	25a74 <CTCPConnection::ScanOptions(TTCPHeader*)+0x48>
   25ad8:	e1c0cbb4 	strh	ip, [r0, #180]	@ 0xb4
   25adc:	eaffffe3 	b	25a70 <CTCPConnection::ScanOptions(TTCPHeader*)+0x44>
   25ae0:	e30d1314 	movw	r1, #54036	@ 0xd314
   25ae4:	e3401003 	movt	r1, #3
   25ae8:	e30d0348 	movw	r0, #54088	@ 0xd348
   25aec:	e3400003 	movt	r0, #3
   25af0:	e300258d 	movw	r2, #1421	@ 0x58d
   25af4:	eb0018b8 	bl	2bddc <assertion_failed>

00025af8 <CTCPConnection::CalculateISN()>:
   25af8:	e92d4010 	push	{r4, lr}
   25afc:	e1a04000 	mov	r4, r0
   25b00:	e5900078 	ldr	r0, [r0, #120]	@ 0x78
   25b04:	e3500000 	cmp	r0, #0
   25b08:	0a00000e 	beq	25b48 <CTCPConnection::CalculateISN()+0x50>
   25b0c:	eb003a7b 	bl	34500 <CTimer::GetTime() const>
   25b10:	e1a03000 	mov	r3, r0
   25b14:	e5940078 	ldr	r0, [r4, #120]	@ 0x78
   25b18:	e1a04003 	mov	r4, r3
   25b1c:	eb003a73 	bl	344f0 <CTimer::GetTicks() const>
   25b20:	e308351f 	movw	r3, #34079	@ 0x851f
   25b24:	e34531eb 	movt	r3, #20971	@ 0x51eb
   25b28:	e3a02064 	mov	r2, #100	@ 0x64
   25b2c:	e3a01015 	mov	r1, #21
   25b30:	e083c093 	umull	ip, r3, r3, r0
   25b34:	e1a032a3 	lsr	r3, r3, #5
   25b38:	e0630392 	mls	r3, r2, r3, r0
   25b3c:	e0203492 	mla	r0, r2, r4, r3
   25b40:	e0000091 	mul	r0, r1, r0
   25b44:	e8bd8010 	pop	{r4, pc}
   25b48:	e30d1314 	movw	r1, #54036	@ 0xd314
   25b4c:	e3401003 	movt	r1, #3
   25b50:	e3090d94 	movw	r0, #40340	@ 0x9d94
   25b54:	e3400003 	movt	r0, #3
   25b58:	e30025b6 	movw	r2, #1462	@ 0x5b6
   25b5c:	eb00189e 	bl	2bddc <assertion_failed>

00025b60 <CTCPConnection::StopTimer(unsigned int)>:
   25b60:	e3510002 	cmp	r1, #2
   25b64:	e92d4070 	push	{r4, r5, r6, lr}
   25b68:	8a00001e 	bhi	25be8 <CTCPConnection::StopTimer(unsigned int)+0x88>
   25b6c:	e5903078 	ldr	r3, [r0, #120]	@ 0x78
   25b70:	e1a05000 	mov	r5, r0
   25b74:	e3530000 	cmp	r3, #0
   25b78:	0a000020 	beq	25c00 <CTCPConnection::StopTimer(unsigned int)+0xa0>
   25b7c:	e5900088 	ldr	r0, [r0, #136]	@ 0x88
   25b80:	e1a04001 	mov	r4, r1
   25b84:	e3500000 	cmp	r0, #0
   25b88:	1a00000e 	bne	25bc8 <CTCPConnection::StopTimer(unsigned int)+0x68>
   25b8c:	e281401e 	add	r4, r1, #30
   25b90:	e0852104 	add	r2, r5, r4, lsl #2
   25b94:	e5921004 	ldr	r1, [r2, #4]
   25b98:	e3510000 	cmp	r1, #0
   25b9c:	08bd8070 	popeq	{r4, r5, r6, pc}
   25ba0:	e0854104 	add	r4, r5, r4, lsl #2
   25ba4:	e1a00003 	mov	r0, r3
   25ba8:	eb003b8c 	bl	349e0 <CTimer::CancelKernelTimer(unsigned int)>
   25bac:	e3a03000 	mov	r3, #0
   25bb0:	e5843004 	str	r3, [r4, #4]
   25bb4:	e5953088 	ldr	r3, [r5, #136]	@ 0x88
   25bb8:	e3530000 	cmp	r3, #0
   25bbc:	08bd8070 	popeq	{r4, r5, r6, pc}
   25bc0:	e8bd4070 	pop	{r4, r5, r6, lr}
   25bc4:	ea004798 	b	37a2c <LeaveCritical>
   25bc8:	e284401e 	add	r4, r4, #30
   25bcc:	eb00476b 	bl	37980 <EnterCritical>
   25bd0:	e0853104 	add	r3, r5, r4, lsl #2
   25bd4:	e5931004 	ldr	r1, [r3, #4]
   25bd8:	e3510000 	cmp	r1, #0
   25bdc:	0afffff4 	beq	25bb4 <CTCPConnection::StopTimer(unsigned int)+0x54>
   25be0:	e5953078 	ldr	r3, [r5, #120]	@ 0x78
   25be4:	eaffffed 	b	25ba0 <CTCPConnection::StopTimer(unsigned int)+0x40>
   25be8:	e30d1314 	movw	r1, #54036	@ 0xd314
   25bec:	e3401003 	movt	r1, #3
   25bf0:	e30d0358 	movw	r0, #54104	@ 0xd358
   25bf4:	e3400003 	movt	r0, #3
   25bf8:	e30025c9 	movw	r2, #1481	@ 0x5c9
   25bfc:	eb001876 	bl	2bddc <assertion_failed>
   25c00:	e30d1314 	movw	r1, #54036	@ 0xd314
   25c04:	e3401003 	movt	r1, #3
   25c08:	e3090d94 	movw	r0, #40340	@ 0x9d94
   25c0c:	e3400003 	movt	r0, #3
   25c10:	e30025ca 	movw	r2, #1482	@ 0x5ca
   25c14:	eb001870 	bl	2bddc <assertion_failed>

00025c18 <CTCPConnection::Close()>:
   25c18:	e590302c 	ldr	r3, [r0, #44]	@ 0x2c
   25c1c:	e92d4010 	push	{r4, lr}
   25c20:	e1a04000 	mov	r4, r0
   25c24:	e3530000 	cmp	r3, #0
   25c28:	ba00000e 	blt	25c68 <CTCPConnection::Close()+0x50>
   25c2c:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   25c30:	e353000a 	cmp	r3, #10
   25c34:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   25c38:	ea000012 	b	25c88 <CTCPConnection::Close()+0x70>
   25c3c:	00025c70 	.word	0x00025c70
   25c40:	00025c78 	.word	0x00025c78
   25c44:	00025c78 	.word	0x00025c78
   25c48:	00025c9c 	.word	0x00025c9c
   25c4c:	00025c9c 	.word	0x00025c9c
   25c50:	00025c88 	.word	0x00025c88
   25c54:	00025c88 	.word	0x00025c88
   25c58:	00025cc0 	.word	0x00025cc0
   25c5c:	00025c70 	.word	0x00025c70
   25c60:	00025c70 	.word	0x00025c70
   25c64:	00025c70 	.word	0x00025c70
   25c68:	e594002c 	ldr	r0, [r4, #44]	@ 0x2c
   25c6c:	e8bd8010 	pop	{r4, pc}
   25c70:	e3e00000 	mvn	r0, #0
   25c74:	e8bd8010 	pop	{r4, pc}
   25c78:	e3a01001 	mov	r1, #1
   25c7c:	ebffffb7 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   25c80:	e3a03000 	mov	r3, #0
   25c84:	e5c4302a 	strb	r3, [r4, #42]	@ 0x2a
   25c88:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
   25c8c:	e3530000 	cmp	r3, #0
   25c90:	bafffff4 	blt	25c68 <CTCPConnection::Close()+0x50>
   25c94:	e3a00000 	mov	r0, #0
   25c98:	e8bd8010 	pop	{r4, pc}
   25c9c:	e5d0305e 	ldrb	r3, [r0, #94]	@ 0x5e
   25ca0:	e3530000 	cmp	r3, #0
   25ca4:	1a00000f 	bne	25ce8 <CTCPConnection::Close()+0xd0>
   25ca8:	e3a03005 	mov	r3, #5
   25cac:	e3a02001 	mov	r2, #1
   25cb0:	e5803060 	str	r3, [r0, #96]	@ 0x60
   25cb4:	e5c0305f 	strb	r3, [r0, #95]	@ 0x5f
   25cb8:	e5c0205e 	strb	r2, [r0, #94]	@ 0x5e
   25cbc:	eafffff1 	b	25c88 <CTCPConnection::Close()+0x70>
   25cc0:	e5d0305e 	ldrb	r3, [r0, #94]	@ 0x5e
   25cc4:	e3530000 	cmp	r3, #0
   25cc8:	1a00000c 	bne	25d00 <CTCPConnection::Close()+0xe8>
   25ccc:	e3a02009 	mov	r2, #9
   25cd0:	e3a01005 	mov	r1, #5
   25cd4:	e3a03001 	mov	r3, #1
   25cd8:	e5801060 	str	r1, [r0, #96]	@ 0x60
   25cdc:	e5c0205f 	strb	r2, [r0, #95]	@ 0x5f
   25ce0:	e5c0305e 	strb	r3, [r0, #94]	@ 0x5e
   25ce4:	eaffffe7 	b	25c88 <CTCPConnection::Close()+0x70>
   25ce8:	e30d1314 	movw	r1, #54036	@ 0xd314
   25cec:	e3401003 	movt	r1, #3
   25cf0:	e30d0374 	movw	r0, #54132	@ 0xd374
   25cf4:	e3400003 	movt	r0, #3
   25cf8:	e3a02d05 	mov	r2, #320	@ 0x140
   25cfc:	eb001836 	bl	2bddc <assertion_failed>
   25d00:	e30d1314 	movw	r1, #54036	@ 0xd314
   25d04:	e3401003 	movt	r1, #3
   25d08:	e30d0374 	movw	r0, #54132	@ 0xd374
   25d0c:	e3400003 	movt	r0, #3
   25d10:	e300214b 	movw	r2, #331	@ 0x14b
   25d14:	eb001830 	bl	2bddc <assertion_failed>

00025d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>:
   25d18:	e92d4070 	push	{r4, r5, r6, lr}
   25d1c:	e3510002 	cmp	r1, #2
   25d20:	e24dd008 	sub	sp, sp, #8
   25d24:	8a000013 	bhi	25d78 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x60>
   25d28:	e1a06002 	mov	r6, r2
   25d2c:	e3520000 	cmp	r2, #0
   25d30:	0a000016 	beq	25d90 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x78>
   25d34:	e5903078 	ldr	r3, [r0, #120]	@ 0x78
   25d38:	e1a04000 	mov	r4, r0
   25d3c:	e3530000 	cmp	r3, #0
   25d40:	0a000018 	beq	25da8 <CTCPConnection::StartTimer(unsigned int, unsigned int)+0x90>
   25d44:	e1a05001 	mov	r5, r1
   25d48:	ebffff84 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   25d4c:	e5940078 	ldr	r0, [r4, #120]	@ 0x78
   25d50:	e1a03005 	mov	r3, r5
   25d54:	e58d4000 	str	r4, [sp]
   25d58:	e0844105 	add	r4, r4, r5, lsl #2
   25d5c:	e1a01006 	mov	r1, r6
   25d60:	e306289c 	movw	r2, #26780	@ 0x689c
   25d64:	e3402002 	movt	r2, #2
   25d68:	eb003ac7 	bl	3488c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
   25d6c:	e584007c 	str	r0, [r4, #124]	@ 0x7c
   25d70:	e28dd008 	add	sp, sp, #8
   25d74:	e8bd8070 	pop	{r4, r5, r6, pc}
   25d78:	e30d1314 	movw	r1, #54036	@ 0xd314
   25d7c:	e3401003 	movt	r1, #3
   25d80:	e30d0358 	movw	r0, #54104	@ 0xd358
   25d84:	e3400003 	movt	r0, #3
   25d88:	e30025be 	movw	r2, #1470	@ 0x5be
   25d8c:	eb001812 	bl	2bddc <assertion_failed>
   25d90:	e30d1314 	movw	r1, #54036	@ 0xd314
   25d94:	e3401003 	movt	r1, #3
   25d98:	e30d0384 	movw	r0, #54148	@ 0xd384
   25d9c:	e3400003 	movt	r0, #3
   25da0:	e30025bf 	movw	r2, #1471	@ 0x5bf
   25da4:	eb00180c 	bl	2bddc <assertion_failed>
   25da8:	e30d1314 	movw	r1, #54036	@ 0xd314
   25dac:	e3401003 	movt	r1, #3
   25db0:	e3090d94 	movw	r0, #40340	@ 0x9d94
   25db4:	e3400003 	movt	r0, #3
   25db8:	e3a02d17 	mov	r2, #1472	@ 0x5c0
   25dbc:	eb001806 	bl	2bddc <assertion_failed>

00025dc0 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)>:
   25dc0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   25dc4:	e1a04000 	mov	r4, r0
   25dc8:	e3a05000 	mov	r5, #0
   25dcc:	e24dd010 	sub	sp, sp, #16
   25dd0:	e3a06001 	mov	r6, #1
   25dd4:	e28470b8 	add	r7, r4, #184	@ 0xb8
   25dd8:	e1ddc2b8 	ldrh	ip, [sp, #40]	@ 0x28
   25ddc:	e58dc000 	str	ip, [sp]
   25de0:	e1ddc2bc 	ldrh	ip, [sp, #44]	@ 0x2c
   25de4:	e58dc004 	str	ip, [sp, #4]
   25de8:	e3a0c006 	mov	ip, #6
   25dec:	e58dc008 	str	ip, [sp, #8]
   25df0:	ebfffaef 	bl	249b4 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short, int)>
   25df4:	e59f319c 	ldr	r3, [pc, #412]	@ 25f98 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x1d8>
   25df8:	e5843000 	str	r3, [r4]
   25dfc:	e2840030 	add	r0, r4, #48	@ 0x30
   25e00:	e5c4502a 	strb	r5, [r4, #42]	@ 0x2a
   25e04:	e5c46029 	strb	r6, [r4, #41]	@ 0x29
   25e08:	e584502c 	str	r5, [r4, #44]	@ 0x2c
   25e0c:	eb000b03 	bl	28a20 <CNetQueue::CNetQueue()>
   25e10:	e284003c 	add	r0, r4, #60	@ 0x3c
   25e14:	eb000b01 	bl	28a20 <CNetQueue::CNetQueue()>
   25e18:	e3a01801 	mov	r1, #65536	@ 0x10000
   25e1c:	e2840048 	add	r0, r4, #72	@ 0x48
   25e20:	eb000637 	bl	27704 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>
   25e24:	e5c4505c 	strb	r5, [r4, #92]	@ 0x5c
   25e28:	e1a01005 	mov	r1, r5
   25e2c:	e5c4505d 	strb	r5, [r4, #93]	@ 0x5d
   25e30:	e2840068 	add	r0, r4, #104	@ 0x68
   25e34:	e5c4505e 	strb	r5, [r4, #94]	@ 0x5e
   25e38:	e5845060 	str	r5, [r4, #96]	@ 0x60
   25e3c:	e5c45064 	strb	r5, [r4, #100]	@ 0x64
   25e40:	eb00172c 	bl	2baf8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25e44:	e1a01005 	mov	r1, r5
   25e48:	e2840070 	add	r0, r4, #112	@ 0x70
   25e4c:	eb001729 	bl	2baf8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   25e50:	eb003c78 	bl	35038 <CTimer::Get()>
   25e54:	eddf0b4d 	vldr	d16, [pc, #308]	@ 25f90 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x1d0>
   25e58:	e28430a8 	add	r3, r4, #168	@ 0xa8
   25e5c:	e5840078 	str	r0, [r4, #120]	@ 0x78
   25e60:	e3032908 	movw	r2, #14600	@ 0x3908
   25e64:	e5846088 	str	r6, [r4, #136]	@ 0x88
   25e68:	e5842094 	str	r2, [r4, #148]	@ 0x94
   25e6c:	e1a00007 	mov	r0, r7
   25e70:	e1c459b8 	strh	r5, [r4, #152]	@ 0x98
   25e74:	f443078f 	vst1.32	{d16}, [r3]
   25e78:	e3a03f86 	mov	r3, #536	@ 0x218
   25e7c:	e58450b0 	str	r5, [r4, #176]	@ 0xb0
   25e80:	e1c43bb4 	strh	r3, [r4, #180]	@ 0xb4
   25e84:	eb000731 	bl	27b50 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>
   25e88:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   25e8c:	e284207c 	add	r2, r4, #124	@ 0x7c
   25e90:	e304313c 	movw	r3, #16700	@ 0x413c
   25e94:	e3403004 	movt	r3, #4
   25e98:	e5940078 	ldr	r0, [r4, #120]	@ 0x78
   25e9c:	f442078f 	vst1.32	{d16}, [r2]
   25ea0:	e1500005 	cmp	r0, r5
   25ea4:	e5932000 	ldr	r2, [r3]
   25ea8:	e5845084 	str	r5, [r4, #132]	@ 0x84
   25eac:	e0822006 	add	r2, r2, r6
   25eb0:	e5832000 	str	r2, [r3]
   25eb4:	0a00002f 	beq	25f78 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x1b8>
   25eb8:	eb003990 	bl	34500 <CTimer::GetTime() const>
   25ebc:	e1a08000 	mov	r8, r0
   25ec0:	e5940078 	ldr	r0, [r4, #120]	@ 0x78
   25ec4:	eb003989 	bl	344f0 <CTimer::GetTicks() const>
   25ec8:	e308351f 	movw	r3, #34079	@ 0x851f
   25ecc:	e34531eb 	movt	r3, #20971	@ 0x51eb
   25ed0:	e0832093 	umull	r2, r3, r3, r0
   25ed4:	e3a02064 	mov	r2, #100	@ 0x64
   25ed8:	e1a032a3 	lsr	r3, r3, #5
   25edc:	e0610392 	mls	r1, r2, r3, r0
   25ee0:	e3a03015 	mov	r3, #21
   25ee4:	e0211892 	mla	r1, r2, r8, r1
   25ee8:	e1a00007 	mov	r0, r7
   25eec:	e0010193 	mul	r1, r3, r1
   25ef0:	e58410a4 	str	r1, [r4, #164]	@ 0xa4
   25ef4:	eb000734 	bl	27bcc <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   25ef8:	e59420a4 	ldr	r2, [r4, #164]	@ 0xa4
   25efc:	e584208c 	str	r2, [r4, #140]	@ 0x8c
   25f00:	e1a03005 	mov	r3, r5
   25f04:	e2821001 	add	r1, r2, #1
   25f08:	e58d5004 	str	r5, [sp, #4]
   25f0c:	e58d5000 	str	r5, [sp]
   25f10:	e1a00004 	mov	r0, r4
   25f14:	e5841090 	str	r1, [r4, #144]	@ 0x90
   25f18:	e3a01c02 	mov	r1, #512	@ 0x200
   25f1c:	ebfffe6c 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   25f20:	e3500000 	cmp	r0, #0
   25f24:	1a000002 	bne	25f34 <CTCPConnection::CTCPConnection(CNetConfig*, CNetworkLayer*, CIPAddress&, unsigned short, unsigned short)+0x174>
   25f28:	e1a00004 	mov	r0, r4
   25f2c:	e28dd010 	add	sp, sp, #16
   25f30:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25f34:	e59410a4 	ldr	r1, [r4, #164]	@ 0xa4
   25f38:	e1a02006 	mov	r2, r6
   25f3c:	e1a00007 	mov	r0, r7
   25f40:	eb00073d 	bl	27c3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   25f44:	e3a03005 	mov	r3, #5
   25f48:	e3a02002 	mov	r2, #2
   25f4c:	e1a00007 	mov	r0, r7
   25f50:	e5c4202a 	strb	r2, [r4, #42]	@ 0x2a
   25f54:	e5843060 	str	r3, [r4, #96]	@ 0x60
   25f58:	eb000719 	bl	27bc4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   25f5c:	e1a01006 	mov	r1, r6
   25f60:	e1a02000 	mov	r2, r0
   25f64:	e1a00004 	mov	r0, r4
   25f68:	ebffff6a 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   25f6c:	e1a00004 	mov	r0, r4
   25f70:	e28dd010 	add	sp, sp, #16
   25f74:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   25f78:	e30d1314 	movw	r1, #54036	@ 0xd314
   25f7c:	e3401003 	movt	r1, #3
   25f80:	e3090d94 	movw	r0, #40340	@ 0x9d94
   25f84:	e3400003 	movt	r0, #3
   25f88:	e30025b6 	movw	r2, #1462	@ 0x5b6
   25f8c:	eb001792 	bl	2bddc <assertion_failed>
   25f90:	00000000 	.word	0x00000000
   25f94:	00003908 	.word	0x00003908
   25f98:	00041e78 	.word	0x00041e78

00025f9c <CTCPConnection::Process()>:
   25f9c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   25fa0:	e1a04000 	mov	r4, r0
   25fa4:	e5d03064 	ldrb	r3, [r0, #100]	@ 0x64
   25fa8:	e24ddd19 	sub	sp, sp, #1600	@ 0x640
   25fac:	e24dd00c 	sub	sp, sp, #12
   25fb0:	e21350ff 	ands	r5, r3, #255	@ 0xff
   25fb4:	1a00002d 	bne	26070 <CTCPConnection::Process()+0xd4>
   25fb8:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   25fbc:	e353000a 	cmp	r3, #10
   25fc0:	e6ef3073 	uxtb	r3, r3
   25fc4:	8a000086 	bhi	261e4 <CTCPConnection::Process()+0x248>
   25fc8:	e3a07001 	mov	r7, #1
   25fcc:	e1a03317 	lsl	r3, r7, r3
   25fd0:	e3130e3b 	tst	r3, #944	@ 0x3b0
   25fd4:	1a00002e 	bne	26094 <CTCPConnection::Process()+0xf8>
   25fd8:	e3002443 	movw	r2, #1091	@ 0x443
   25fdc:	e0131002 	ands	r1, r3, r2
   25fe0:	1a00001f 	bne	26064 <CTCPConnection::Process()+0xc8>
   25fe4:	e313000c 	tst	r3, #12
   25fe8:	0a00007d 	beq	261e4 <CTCPConnection::Process()+0x248>
   25fec:	e5d0305d 	ldrb	r3, [r0, #93]	@ 0x5d
   25ff0:	e3530000 	cmp	r3, #0
   25ff4:	0a00001a 	beq	26064 <CTCPConnection::Process()+0xc8>
   25ff8:	e5c0105d 	strb	r1, [r0, #93]	@ 0x5d
   25ffc:	e28450b8 	add	r5, r4, #184	@ 0xb8
   26000:	e59020a4 	ldr	r2, [r0, #164]	@ 0xa4
   26004:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   26008:	e3530002 	cmp	r3, #2
   2600c:	058d1004 	streq	r1, [sp, #4]
   26010:	01a03001 	moveq	r3, r1
   26014:	058d1000 	streq	r1, [sp]
   26018:	03a01c02 	moveq	r1, #512	@ 0x200
   2601c:	159030a8 	ldrne	r3, [r0, #168]	@ 0xa8
   26020:	158d1004 	strne	r1, [sp, #4]
   26024:	158d1000 	strne	r1, [sp]
   26028:	13a01c12 	movne	r1, #4608	@ 0x1200
   2602c:	ebfffe28 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26030:	e59410a4 	ldr	r1, [r4, #164]	@ 0xa4
   26034:	e3a02001 	mov	r2, #1
   26038:	e1a00005 	mov	r0, r5
   2603c:	eb0006fe 	bl	27c3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   26040:	e1a00005 	mov	r0, r5
   26044:	eb0006de 	bl	27bc4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   26048:	e3a01001 	mov	r1, #1
   2604c:	e1a02000 	mov	r2, r0
   26050:	e1a00004 	mov	r0, r4
   26054:	e28ddd19 	add	sp, sp, #1600	@ 0x640
   26058:	e28dd00c 	add	sp, sp, #12
   2605c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   26060:	eaffff2c 	b	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   26064:	e28ddd19 	add	sp, sp, #1600	@ 0x640
   26068:	e28dd00c 	add	sp, sp, #12
   2606c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   26070:	e3a03000 	mov	r3, #0
   26074:	e3e02000 	mvn	r2, #0
   26078:	e2800068 	add	r0, r0, #104	@ 0x68
   2607c:	e584202c 	str	r2, [r4, #44]	@ 0x2c
   26080:	e5c4302a 	strb	r3, [r4, #42]	@ 0x2a
   26084:	e28ddd19 	add	sp, sp, #1600	@ 0x640
   26088:	e28dd00c 	add	sp, sp, #12
   2608c:	e8bd43f0 	pop	{r4, r5, r6, r7, r8, r9, lr}
   26090:	ea0016ab 	b	2bb44 <CSynchronizationEvent::Set()>
   26094:	e2806048 	add	r6, r0, #72	@ 0x48
   26098:	e1a00006 	mov	r0, r6
   2609c:	eb0005b7 	bl	27780 <CRetransmissionQueue::IsEmpty() const>
   260a0:	e3500000 	cmp	r0, #0
   260a4:	1a00005e 	bne	26224 <CTCPConnection::Process()+0x288>
   260a8:	e2845030 	add	r5, r4, #48	@ 0x30
   260ac:	ea000008 	b	260d4 <CTCPConnection::Process()+0x138>
   260b0:	e3a02000 	mov	r2, #0
   260b4:	e28d1008 	add	r1, sp, #8
   260b8:	e1a00005 	mov	r0, r5
   260bc:	eb000adf 	bl	28c40 <CNetQueue::Dequeue(void*, void**)>
   260c0:	e2502000 	subs	r2, r0, #0
   260c4:	0a000006 	beq	260e4 <CTCPConnection::Process()+0x148>
   260c8:	e28d1008 	add	r1, sp, #8
   260cc:	e1a00006 	mov	r0, r6
   260d0:	eb0005d3 	bl	27824 <CRetransmissionQueue::Write(void const*, unsigned int)>
   260d4:	e1a00006 	mov	r0, r6
   260d8:	eb0005ae 	bl	27798 <CRetransmissionQueue::GetFreeSpace() const>
   260dc:	e3500d19 	cmp	r0, #1600	@ 0x640
   260e0:	2afffff2 	bcs	260b0 <CTCPConnection::Process()+0x114>
   260e4:	e5d4302a 	ldrb	r3, [r4, #42]	@ 0x2a
   260e8:	e3530004 	cmp	r3, #4
   260ec:	0a00003e 	beq	261ec <CTCPConnection::Process()+0x250>
   260f0:	e5d4302a 	ldrb	r3, [r4, #42]	@ 0x2a
   260f4:	e3530007 	cmp	r3, #7
   260f8:	0a00003b 	beq	261ec <CTCPConnection::Process()+0x250>
   260fc:	e5d4305c 	ldrb	r3, [r4, #92]	@ 0x5c
   26100:	e3530000 	cmp	r3, #0
   26104:	1a00003f 	bne	26208 <CTCPConnection::Process()+0x26c>
   26108:	e28d8008 	add	r8, sp, #8
   2610c:	e2849030 	add	r9, r4, #48	@ 0x30
   26110:	e28470b8 	add	r7, r4, #184	@ 0xb8
   26114:	ea00001b 	b	26188 <CTCPConnection::Process()+0x1ec>
   26118:	e1a01008 	mov	r1, r8
   2611c:	e1a02005 	mov	r2, r5
   26120:	e1a00006 	mov	r0, r6
   26124:	eb00061f 	bl	279a8 <CRetransmissionQueue::Read(void*, unsigned int)>
   26128:	e1a00009 	mov	r0, r9
   2612c:	eb000a40 	bl	28a34 <CNetQueue::IsEmpty() const>
   26130:	e3500000 	cmp	r0, #0
   26134:	e59430a8 	ldr	r3, [r4, #168]	@ 0xa8
   26138:	13a01b06 	movne	r1, #6144	@ 0x1800
   2613c:	e5942090 	ldr	r2, [r4, #144]	@ 0x90
   26140:	03a01a01 	moveq	r1, #4096	@ 0x1000
   26144:	e1a00004 	mov	r0, r4
   26148:	e58d5004 	str	r5, [sp, #4]
   2614c:	e58d8000 	str	r8, [sp]
   26150:	ebfffddf 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26154:	e5941090 	ldr	r1, [r4, #144]	@ 0x90
   26158:	e1a02005 	mov	r2, r5
   2615c:	e1a00007 	mov	r0, r7
   26160:	eb0006b5 	bl	27c3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   26164:	e5943090 	ldr	r3, [r4, #144]	@ 0x90
   26168:	e1a00007 	mov	r0, r7
   2616c:	e0833005 	add	r3, r3, r5
   26170:	e5843090 	str	r3, [r4, #144]	@ 0x90
   26174:	eb000692 	bl	27bc4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   26178:	e3a01001 	mov	r1, #1
   2617c:	e1a02000 	mov	r2, r0
   26180:	e1a00004 	mov	r0, r4
   26184:	ebfffee3 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   26188:	e1a00006 	mov	r0, r6
   2618c:	eb0005e4 	bl	27924 <CRetransmissionQueue::GetBytesAvailable() const>
   26190:	e3500000 	cmp	r0, #0
   26194:	0affffb2 	beq	26064 <CTCPConnection::Process()+0xc8>
   26198:	e594308c 	ldr	r3, [r4, #140]	@ 0x8c
   2619c:	e5941094 	ldr	r1, [r4, #148]	@ 0x94
   261a0:	e5942090 	ldr	r2, [r4, #144]	@ 0x90
   261a4:	e0833001 	add	r3, r3, r1
   261a8:	e0533002 	subs	r3, r3, r2
   261ac:	0affffac 	beq	26064 <CTCPConnection::Process()+0xc8>
   261b0:	e1d45bb4 	ldrh	r5, [r4, #180]	@ 0xb4
   261b4:	e1550003 	cmp	r5, r3
   261b8:	21a05003 	movcs	r5, r3
   261bc:	e1550000 	cmp	r5, r0
   261c0:	21a05000 	movcs	r5, r0
   261c4:	e3550d19 	cmp	r5, #1600	@ 0x640
   261c8:	9affffd2 	bls	26118 <CTCPConnection::Process()+0x17c>
   261cc:	e30d1314 	movw	r1, #54036	@ 0xd314
   261d0:	e3401003 	movt	r1, #3
   261d4:	e30c054c 	movw	r0, #50508	@ 0xc54c
   261d8:	e3400003 	movt	r0, #3
   261dc:	e300225b 	movw	r2, #603	@ 0x25b
   261e0:	eb0016fd 	bl	2bddc <assertion_failed>
   261e4:	e2846048 	add	r6, r4, #72	@ 0x48
   261e8:	eaffffae 	b	260a8 <CTCPConnection::Process()+0x10c>
   261ec:	e2840030 	add	r0, r4, #48	@ 0x30
   261f0:	eb000a0f 	bl	28a34 <CNetQueue::IsEmpty() const>
   261f4:	e3500000 	cmp	r0, #0
   261f8:	0affffbf 	beq	260fc <CTCPConnection::Process()+0x160>
   261fc:	e2840070 	add	r0, r4, #112	@ 0x70
   26200:	eb00164f 	bl	2bb44 <CSynchronizationEvent::Set()>
   26204:	eaffffbc 	b	260fc <CTCPConnection::Process()+0x160>
   26208:	e3a03000 	mov	r3, #0
   2620c:	e1a00006 	mov	r0, r6
   26210:	e5c4305c 	strb	r3, [r4, #92]	@ 0x5c
   26214:	eb000644 	bl	27b2c <CRetransmissionQueue::Reset()>
   26218:	e594308c 	ldr	r3, [r4, #140]	@ 0x8c
   2621c:	e5843090 	str	r3, [r4, #144]	@ 0x90
   26220:	eaffffb8 	b	26108 <CTCPConnection::Process()+0x16c>
   26224:	e2840030 	add	r0, r4, #48	@ 0x30
   26228:	eb000a01 	bl	28a34 <CNetQueue::IsEmpty() const>
   2622c:	e3500000 	cmp	r0, #0
   26230:	0affff9c 	beq	260a8 <CTCPConnection::Process()+0x10c>
   26234:	e5d4305e 	ldrb	r3, [r4, #94]	@ 0x5e
   26238:	e3530000 	cmp	r3, #0
   2623c:	0affff99 	beq	260a8 <CTCPConnection::Process()+0x10c>
   26240:	e59430a8 	ldr	r3, [r4, #168]	@ 0xa8
   26244:	e28480b8 	add	r8, r4, #184	@ 0xb8
   26248:	e58d5004 	str	r5, [sp, #4]
   2624c:	e3a01c11 	mov	r1, #4352	@ 0x1100
   26250:	e58d5000 	str	r5, [sp]
   26254:	e1a00004 	mov	r0, r4
   26258:	e5942090 	ldr	r2, [r4, #144]	@ 0x90
   2625c:	ebfffd9c 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26260:	e5941090 	ldr	r1, [r4, #144]	@ 0x90
   26264:	e1a02007 	mov	r2, r7
   26268:	e1a00008 	mov	r0, r8
   2626c:	eb000672 	bl	27c3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   26270:	e5943090 	ldr	r3, [r4, #144]	@ 0x90
   26274:	e1a00008 	mov	r0, r8
   26278:	e2833001 	add	r3, r3, #1
   2627c:	e5843090 	str	r3, [r4, #144]	@ 0x90
   26280:	e5d4305f 	ldrb	r3, [r4, #95]	@ 0x5f
   26284:	e5c4302a 	strb	r3, [r4, #42]	@ 0x2a
   26288:	e5c4505e 	strb	r5, [r4, #94]	@ 0x5e
   2628c:	eb00064c 	bl	27bc4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   26290:	e1a01007 	mov	r1, r7
   26294:	e1a02000 	mov	r2, r0
   26298:	e1a00004 	mov	r0, r4
   2629c:	ebfffe9d 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   262a0:	eaffff80 	b	260a8 <CTCPConnection::Process()+0x10c>

000262a4 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)>:
   262a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   262a8:	e59d1020 	ldr	r1, [sp, #32]
   262ac:	e1dd61b8 	ldrh	r6, [sp, #24]
   262b0:	e1dd71bc 	ldrh	r7, [sp, #28]
   262b4:	e3510006 	cmp	r1, #6
   262b8:	1a000018 	bne	26320 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   262bc:	e1a05003 	mov	r5, r3
   262c0:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   262c4:	e1a04000 	mov	r4, r0
   262c8:	e3530001 	cmp	r3, #1
   262cc:	9a000013 	bls	26320 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   262d0:	e1a01002 	mov	r1, r2
   262d4:	e280000c 	add	r0, r0, #12
   262d8:	eb0008a2 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   262dc:	e3500000 	cmp	r0, #0
   262e0:	1a00000e 	bne	26320 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   262e4:	e1d431b4 	ldrh	r3, [r4, #20]
   262e8:	e1530006 	cmp	r3, r6
   262ec:	1a00000b 	bne	26320 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   262f0:	e5940004 	ldr	r0, [r4, #4]
   262f4:	e3500000 	cmp	r0, #0
   262f8:	0a000019 	beq	26364 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0xc0>
   262fc:	eb00083c 	bl	283f4 <CNetConfig::GetIPAddress() const>
   26300:	e1a01000 	mov	r1, r0
   26304:	e1a00005 	mov	r0, r5
   26308:	eb000896 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   2630c:	e3500000 	cmp	r0, #0
   26310:	1a000002 	bne	26320 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x7c>
   26314:	e1d431b6 	ldrh	r3, [r4, #22]
   26318:	e1530007 	cmp	r3, r7
   2631c:	0a000001 	beq	26328 <CTCPConnection::NotificationReceived(TICMPNotificationType, CIPAddress&, CIPAddress&, unsigned short, unsigned short, int)+0x84>
   26320:	e3a00000 	mov	r0, #0
   26324:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26328:	e1a00004 	mov	r0, r4
   2632c:	e3e03000 	mvn	r3, #0
   26330:	e3a01001 	mov	r1, #1
   26334:	e584302c 	str	r3, [r4, #44]	@ 0x2c
   26338:	ebfffe08 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   2633c:	e3a0300a 	mov	r3, #10
   26340:	e3a01002 	mov	r1, #2
   26344:	e1a00004 	mov	r0, r4
   26348:	e5c4302a 	strb	r3, [r4, #42]	@ 0x2a
   2634c:	e3012770 	movw	r2, #6000	@ 0x1770
   26350:	ebfffe70 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   26354:	e2840068 	add	r0, r4, #104	@ 0x68
   26358:	eb0015f9 	bl	2bb44 <CSynchronizationEvent::Set()>
   2635c:	e3a00001 	mov	r0, #1
   26360:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   26364:	e30d1314 	movw	r1, #54036	@ 0xd314
   26368:	e3401003 	movt	r1, #3
   2636c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   26370:	e3400003 	movt	r0, #3
   26374:	e3002539 	movw	r2, #1337	@ 0x539
   26378:	eb001697 	bl	2bddc <assertion_failed>

0002637c <CTCPConnection::~CTCPConnection()>:
   2637c:	e5d0102a 	ldrb	r1, [r0, #42]	@ 0x2a
   26380:	e59f30d0 	ldr	r3, [pc, #208]	@ 26458 <CTCPConnection::~CTCPConnection()+0xdc>
   26384:	e92d4070 	push	{r4, r5, r6, lr}
   26388:	e21110ff 	ands	r1, r1, #255	@ 0xff
   2638c:	e5803000 	str	r3, [r0]
   26390:	1a000024 	bne	26428 <CTCPConnection::~CTCPConnection()+0xac>
   26394:	e1a04000 	mov	r4, r0
   26398:	ebfffdf0 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   2639c:	e3a01001 	mov	r1, #1
   263a0:	e1a00004 	mov	r0, r4
   263a4:	ebfffded 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   263a8:	e2845068 	add	r5, r4, #104	@ 0x68
   263ac:	e3a01002 	mov	r1, #2
   263b0:	e1a00004 	mov	r0, r4
   263b4:	ebfffde9 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   263b8:	e2846070 	add	r6, r4, #112	@ 0x70
   263bc:	e1a00005 	mov	r0, r5
   263c0:	eb0015df 	bl	2bb44 <CSynchronizationEvent::Set()>
   263c4:	e1a00006 	mov	r0, r6
   263c8:	eb0015dd 	bl	2bb44 <CSynchronizationEvent::Set()>
   263cc:	e304313c 	movw	r3, #16700	@ 0x413c
   263d0:	e3403004 	movt	r3, #4
   263d4:	e5932000 	ldr	r2, [r3]
   263d8:	e3520000 	cmp	r2, #0
   263dc:	0a000017 	beq	26440 <CTCPConnection::~CTCPConnection()+0xc4>
   263e0:	e28400b8 	add	r0, r4, #184	@ 0xb8
   263e4:	e2422001 	sub	r2, r2, #1
   263e8:	e5832000 	str	r2, [r3]
   263ec:	eb0005f3 	bl	27bc0 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>
   263f0:	e1a00006 	mov	r0, r6
   263f4:	eb0015c3 	bl	2bb08 <CSynchronizationEvent::~CSynchronizationEvent()>
   263f8:	e1a00005 	mov	r0, r5
   263fc:	eb0015c1 	bl	2bb08 <CSynchronizationEvent::~CSynchronizationEvent()>
   26400:	e2840048 	add	r0, r4, #72	@ 0x48
   26404:	eb0004d4 	bl	2775c <CRetransmissionQueue::~CRetransmissionQueue()>
   26408:	e284003c 	add	r0, r4, #60	@ 0x3c
   2640c:	eb0009bc 	bl	28b04 <CNetQueue::~CNetQueue()>
   26410:	e2840030 	add	r0, r4, #48	@ 0x30
   26414:	eb0009ba 	bl	28b04 <CNetQueue::~CNetQueue()>
   26418:	e1a00004 	mov	r0, r4
   2641c:	ebfff9b8 	bl	24b04 <CNetConnection::~CNetConnection()>
   26420:	e1a00004 	mov	r0, r4
   26424:	e8bd8070 	pop	{r4, r5, r6, pc}
   26428:	e30d1314 	movw	r1, #54036	@ 0xd314
   2642c:	e3401003 	movt	r1, #3
   26430:	e30d038c 	movw	r0, #54156	@ 0xd38c
   26434:	e3400003 	movt	r0, #3
   26438:	e3a020d1 	mov	r2, #209	@ 0xd1
   2643c:	eb001666 	bl	2bddc <assertion_failed>
   26440:	e30d1314 	movw	r1, #54036	@ 0xd314
   26444:	e3401003 	movt	r1, #3
   26448:	e30d03a8 	movw	r0, #54184	@ 0xd3a8
   2644c:	e3400003 	movt	r0, #3
   26450:	e3a020dc 	mov	r2, #220	@ 0xdc
   26454:	eb001660 	bl	2bddc <assertion_failed>
   26458:	00041e78 	.word	0x00041e78

0002645c <CTCPConnection::~CTCPConnection()>:
   2645c:	e92d4010 	push	{r4, lr}
   26460:	e1a04000 	mov	r4, r0
   26464:	ebffffc4 	bl	2637c <CTCPConnection::~CTCPConnection()>
   26468:	e1a00004 	mov	r0, r4
   2646c:	e3a010e0 	mov	r1, #224	@ 0xe0
   26470:	eb003f43 	bl	36184 <operator delete(void*, unsigned int)>
   26474:	e1a00004 	mov	r0, r4
   26478:	e8bd8010 	pop	{r4, pc}

0002647c <CTCPConnection::DumpStatus()>:
   2647c:	e92d4010 	push	{r4, lr}
   26480:	e1a04000 	mov	r4, r0
   26484:	e24dd020 	sub	sp, sp, #32
   26488:	eb0020ce 	bl	2e7c8 <CLogger::Get()>
   2648c:	e5d4c02a 	ldrb	ip, [r4, #42]	@ 0x2a
   26490:	e59410a4 	ldr	r1, [r4, #164]	@ 0xa4
   26494:	e59430b0 	ldr	r3, [r4, #176]	@ 0xb0
   26498:	e59420a8 	ldr	r2, [r4, #168]	@ 0xa8
   2649c:	e58dc000 	str	ip, [sp]
   264a0:	e0422003 	sub	r2, r2, r3
   264a4:	e5943090 	ldr	r3, [r4, #144]	@ 0x90
   264a8:	e594c094 	ldr	ip, [r4, #148]	@ 0x94
   264ac:	e58dc00c 	str	ip, [sp, #12]
   264b0:	e0433001 	sub	r3, r3, r1
   264b4:	e58d2010 	str	r2, [sp, #16]
   264b8:	e58d3008 	str	r3, [sp, #8]
   264bc:	e30d33bc 	movw	r3, #54204	@ 0xd3bc
   264c0:	e3403003 	movt	r3, #3
   264c4:	e594208c 	ldr	r2, [r4, #140]	@ 0x8c
   264c8:	e0422001 	sub	r2, r2, r1
   264cc:	e58d2004 	str	r2, [sp, #4]
   264d0:	e59f101c 	ldr	r1, [pc, #28]	@ 264f4 <CTCPConnection::DumpStatus()+0x78>
   264d4:	e3a02004 	mov	r2, #4
   264d8:	e1d4c1b4 	ldrh	ip, [r4, #20]
   264dc:	e58dc018 	str	ip, [sp, #24]
   264e0:	e594c0ac 	ldr	ip, [r4, #172]	@ 0xac
   264e4:	e58dc014 	str	ip, [sp, #20]
   264e8:	eb00227f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   264ec:	e28dd020 	add	sp, sp, #32
   264f0:	e8bd8010 	pop	{r4, pc}
   264f4:	00041eb4 	.word	0x00041eb4

000264f8 <CTCPConnection::Connect()>:
   264f8:	e92d4030 	push	{r4, r5, lr}
   264fc:	e1a04000 	mov	r4, r0
   26500:	e590302c 	ldr	r3, [r0, #44]	@ 0x2c
   26504:	e24dd00c 	sub	sp, sp, #12
   26508:	e3530000 	cmp	r3, #0
   2650c:	ba000013 	blt	26560 <CTCPConnection::Connect()+0x68>
   26510:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   26514:	e353000a 	cmp	r3, #10
   26518:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2651c:	ea00000f 	b	26560 <CTCPConnection::Connect()+0x68>
   26520:	00026594 	.word	0x00026594
   26524:	0002656c 	.word	0x0002656c
   26528:	0002654c 	.word	0x0002654c
   2652c:	0002654c 	.word	0x0002654c
   26530:	00026560 	.word	0x00026560
   26534:	0002656c 	.word	0x0002656c
   26538:	0002656c 	.word	0x0002656c
   2653c:	0002656c 	.word	0x0002656c
   26540:	0002656c 	.word	0x0002656c
   26544:	0002656c 	.word	0x0002656c
   26548:	0002656c 	.word	0x0002656c
   2654c:	e2805068 	add	r5, r0, #104	@ 0x68
   26550:	e1a00005 	mov	r0, r5
   26554:	eb001577 	bl	2bb38 <CSynchronizationEvent::Clear()>
   26558:	e1a00005 	mov	r0, r5
   2655c:	eb00158b 	bl	2bb90 <CSynchronizationEvent::Wait()>
   26560:	e594002c 	ldr	r0, [r4, #44]	@ 0x2c
   26564:	e28dd00c 	add	sp, sp, #12
   26568:	e8bd8030 	pop	{r4, r5, pc}
   2656c:	ebffffc2 	bl	2647c <CTCPConnection::DumpStatus()>
   26570:	eb002094 	bl	2e7c8 <CLogger::Get()>
   26574:	e5d4102a 	ldrb	r1, [r4, #42]	@ 0x2a
   26578:	e3a0c0f9 	mov	ip, #249	@ 0xf9
   2657c:	e30d33f4 	movw	r3, #54260	@ 0xd3f4
   26580:	e3403003 	movt	r3, #3
   26584:	e88d1002 	stm	sp, {r1, ip}
   26588:	e3a02000 	mov	r2, #0
   2658c:	e59f100c 	ldr	r1, [pc, #12]	@ 265a0 <CTCPConnection::Connect()+0xa8>
   26590:	eb002255 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26594:	e3e00000 	mvn	r0, #0
   26598:	e28dd00c 	add	sp, sp, #12
   2659c:	e8bd8030 	pop	{r4, r5, pc}
   265a0:	00041eb4 	.word	0x00041eb4

000265a4 <CTCPConnection::Accept(CIPAddress*, unsigned short*)>:
   265a4:	e590302c 	ldr	r3, [r0, #44]	@ 0x2c
   265a8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   265ac:	e1a04000 	mov	r4, r0
   265b0:	e3530000 	cmp	r3, #0
   265b4:	e24dd00c 	sub	sp, sp, #12
   265b8:	b590002c 	ldrlt	r0, [r0, #44]	@ 0x2c
   265bc:	ba00001f 	blt	26640 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x9c>
   265c0:	e5d4302a 	ldrb	r3, [r4, #42]	@ 0x2a
   265c4:	e1a05001 	mov	r5, r1
   265c8:	e1a06002 	mov	r6, r2
   265cc:	e353000a 	cmp	r3, #10
   265d0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   265d4:	ea00000f 	b	26618 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x74>
   265d8:	00026674 	.word	0x00026674
   265dc:	00026604 	.word	0x00026604
   265e0:	00026648 	.word	0x00026648
   265e4:	00026618 	.word	0x00026618
   265e8:	00026618 	.word	0x00026618
   265ec:	00026674 	.word	0x00026674
   265f0:	00026674 	.word	0x00026674
   265f4:	00026674 	.word	0x00026674
   265f8:	00026674 	.word	0x00026674
   265fc:	00026674 	.word	0x00026674
   26600:	00026674 	.word	0x00026674
   26604:	e2847068 	add	r7, r4, #104	@ 0x68
   26608:	e1a00007 	mov	r0, r7
   2660c:	eb001549 	bl	2bb38 <CSynchronizationEvent::Clear()>
   26610:	e1a00007 	mov	r0, r7
   26614:	eb00155d 	bl	2bb90 <CSynchronizationEvent::Wait()>
   26618:	e3550000 	cmp	r5, #0
   2661c:	0a000017 	beq	26680 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xdc>
   26620:	e284100c 	add	r1, r4, #12
   26624:	e1a00005 	mov	r0, r5
   26628:	eb00084b 	bl	2875c <CIPAddress::Set(CIPAddress const&)>
   2662c:	e3560000 	cmp	r6, #0
   26630:	0a000018 	beq	26698 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0xf4>
   26634:	e1d431b4 	ldrh	r3, [r4, #20]
   26638:	e594002c 	ldr	r0, [r4, #44]	@ 0x2c
   2663c:	e1c630b0 	strh	r3, [r6]
   26640:	e28dd00c 	add	sp, sp, #12
   26644:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   26648:	e1a00004 	mov	r0, r4
   2664c:	ebffff8a 	bl	2647c <CTCPConnection::DumpStatus()>
   26650:	eb00205c 	bl	2e7c8 <CLogger::Get()>
   26654:	e5d4102a 	ldrb	r1, [r4, #42]	@ 0x2a
   26658:	e300c10d 	movw	ip, #269	@ 0x10d
   2665c:	e30d33f4 	movw	r3, #54260	@ 0xd3f4
   26660:	e3403003 	movt	r3, #3
   26664:	e88d1002 	stm	sp, {r1, ip}
   26668:	e3a02000 	mov	r2, #0
   2666c:	e59f103c 	ldr	r1, [pc, #60]	@ 266b0 <CTCPConnection::Accept(CIPAddress*, unsigned short*)+0x10c>
   26670:	eb00221d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26674:	e3e00000 	mvn	r0, #0
   26678:	e28dd00c 	add	sp, sp, #12
   2667c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   26680:	e30d1314 	movw	r1, #54036	@ 0xd314
   26684:	e3401003 	movt	r1, #3
   26688:	e30c0ca8 	movw	r0, #52392	@ 0xcca8
   2668c:	e3400003 	movt	r0, #3
   26690:	e3002123 	movw	r2, #291	@ 0x123
   26694:	eb0015d0 	bl	2bddc <assertion_failed>
   26698:	e30d1314 	movw	r1, #54036	@ 0xd314
   2669c:	e3401003 	movt	r1, #3
   266a0:	e30c0cb8 	movw	r0, #52408	@ 0xccb8
   266a4:	e3400003 	movt	r0, #3
   266a8:	e3002126 	movw	r2, #294	@ 0x126
   266ac:	eb0015ca 	bl	2bddc <assertion_failed>
   266b0:	00041eb4 	.word	0x00041eb4

000266b4 <CTCPConnection::TimerHandler(unsigned int)>:
   266b4:	e92d4030 	push	{r4, r5, lr}
   266b8:	e3510002 	cmp	r1, #2
   266bc:	e24dd00c 	sub	sp, sp, #12
   266c0:	8a000046 	bhi	267e0 <CTCPConnection::TimerHandler(unsigned int)+0x12c>
   266c4:	e1a04000 	mov	r4, r0
   266c8:	e5900088 	ldr	r0, [r0, #136]	@ 0x88
   266cc:	e1a05001 	mov	r5, r1
   266d0:	e3500000 	cmp	r0, #0
   266d4:	1a00002c 	bne	2678c <CTCPConnection::TimerHandler(unsigned int)+0xd8>
   266d8:	e281301e 	add	r3, r1, #30
   266dc:	e0843103 	add	r3, r4, r3, lsl #2
   266e0:	e5932004 	ldr	r2, [r3, #4]
   266e4:	e3520000 	cmp	r2, #0
   266e8:	15830004 	strne	r0, [r3, #4]
   266ec:	0a000005 	beq	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   266f0:	e3550001 	cmp	r5, #1
   266f4:	0a000005 	beq	26710 <CTCPConnection::TimerHandler(unsigned int)+0x5c>
   266f8:	e3550002 	cmp	r5, #2
   266fc:	03a03000 	moveq	r3, #0
   26700:	05c4302a 	strbeq	r3, [r4, #42]	@ 0x2a
   26704:	1a000053 	bne	26858 <CTCPConnection::TimerHandler(unsigned int)+0x1a4>
   26708:	e28dd00c 	add	sp, sp, #12
   2670c:	e8bd8030 	pop	{r4, r5, pc}
   26710:	e28400b8 	add	r0, r4, #184	@ 0xb8
   26714:	eb00056d 	bl	27cd0 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>
   26718:	e5943060 	ldr	r3, [r4, #96]	@ 0x60
   2671c:	e2432001 	sub	r2, r3, #1
   26720:	e3530000 	cmp	r3, #0
   26724:	e5842060 	str	r2, [r4, #96]	@ 0x60
   26728:	05c45064 	strbeq	r5, [r4, #100]	@ 0x64
   2672c:	0afffff5 	beq	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26730:	e5d4302a 	ldrb	r3, [r4, #42]	@ 0x2a
   26734:	e353000a 	cmp	r3, #10
   26738:	e6ef3073 	uxtb	r3, r3
   2673c:	8afffff1 	bhi	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26740:	e3530003 	cmp	r3, #3
   26744:	9a00002b 	bls	267f8 <CTCPConnection::TimerHandler(unsigned int)+0x144>
   26748:	e1a03315 	lsl	r3, r5, r3
   2674c:	e3130e32 	tst	r3, #800	@ 0x320
   26750:	1a000046 	bne	26870 <CTCPConnection::TimerHandler(unsigned int)+0x1bc>
   26754:	e3130d11 	tst	r3, #1088	@ 0x440
   26758:	1a000032 	bne	26828 <CTCPConnection::TimerHandler(unsigned int)+0x174>
   2675c:	e3130090 	tst	r3, #144	@ 0x90
   26760:	0affffe8 	beq	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26764:	e5d4305c 	ldrb	r3, [r4, #92]	@ 0x5c
   26768:	e3530000 	cmp	r3, #0
   2676c:	05c4505c 	strbeq	r5, [r4, #92]	@ 0x5c
   26770:	0affffe4 	beq	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26774:	e30d1314 	movw	r1, #54036	@ 0xd314
   26778:	e3401003 	movt	r1, #3
   2677c:	e30d0420 	movw	r0, #54304	@ 0xd420
   26780:	e3400003 	movt	r0, #3
   26784:	e3002604 	movw	r2, #1540	@ 0x604
   26788:	eb001593 	bl	2bddc <assertion_failed>
   2678c:	eb00447b 	bl	37980 <EnterCritical>
   26790:	e285301e 	add	r3, r5, #30
   26794:	e0843103 	add	r3, r4, r3, lsl #2
   26798:	e5932004 	ldr	r2, [r3, #4]
   2679c:	e3520000 	cmp	r2, #0
   267a0:	0a000008 	beq	267c8 <CTCPConnection::TimerHandler(unsigned int)+0x114>
   267a4:	e5942088 	ldr	r2, [r4, #136]	@ 0x88
   267a8:	e3a01000 	mov	r1, #0
   267ac:	e5831004 	str	r1, [r3, #4]
   267b0:	e1520001 	cmp	r2, r1
   267b4:	0affffcd 	beq	266f0 <CTCPConnection::TimerHandler(unsigned int)+0x3c>
   267b8:	eb00449b 	bl	37a2c <LeaveCritical>
   267bc:	e3550001 	cmp	r5, #1
   267c0:	1affffcc 	bne	266f8 <CTCPConnection::TimerHandler(unsigned int)+0x44>
   267c4:	eaffffd1 	b	26710 <CTCPConnection::TimerHandler(unsigned int)+0x5c>
   267c8:	e5943088 	ldr	r3, [r4, #136]	@ 0x88
   267cc:	e3530000 	cmp	r3, #0
   267d0:	0affffcc 	beq	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   267d4:	e28dd00c 	add	sp, sp, #12
   267d8:	e8bd4030 	pop	{r4, r5, lr}
   267dc:	ea004492 	b	37a2c <LeaveCritical>
   267e0:	e30d1314 	movw	r1, #54036	@ 0xd314
   267e4:	e3401003 	movt	r1, #3
   267e8:	e30d0358 	movw	r0, #54104	@ 0xd358
   267ec:	e3400003 	movt	r0, #3
   267f0:	e30025d9 	movw	r2, #1497	@ 0x5d9
   267f4:	eb001578 	bl	2bddc <assertion_failed>
   267f8:	e3530001 	cmp	r3, #1
   267fc:	9a000009 	bls	26828 <CTCPConnection::TimerHandler(unsigned int)+0x174>
   26800:	e5d4305d 	ldrb	r3, [r4, #93]	@ 0x5d
   26804:	e3530000 	cmp	r3, #0
   26808:	05c4505d 	strbeq	r5, [r4, #93]	@ 0x5d
   2680c:	0affffbd 	beq	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26810:	e30d1314 	movw	r1, #54036	@ 0xd314
   26814:	e3401003 	movt	r1, #3
   26818:	e30d0414 	movw	r0, #54292	@ 0xd414
   2681c:	e3400003 	movt	r0, #3
   26820:	e30025fe 	movw	r2, #1534	@ 0x5fe
   26824:	eb00156c 	bl	2bddc <assertion_failed>
   26828:	e1a00004 	mov	r0, r4
   2682c:	ebffff12 	bl	2647c <CTCPConnection::DumpStatus()>
   26830:	eb001fe4 	bl	2e7c8 <CLogger::Get()>
   26834:	e5d4102a 	ldrb	r1, [r4, #42]	@ 0x2a
   26838:	e300c5f9 	movw	ip, #1529	@ 0x5f9
   2683c:	e3a02000 	mov	r2, #0
   26840:	e88d1002 	stm	sp, {r1, ip}
   26844:	e30d33f4 	movw	r3, #54260	@ 0xd3f4
   26848:	e3403003 	movt	r3, #3
   2684c:	e59f1044 	ldr	r1, [pc, #68]	@ 26898 <CTCPConnection::TimerHandler(unsigned int)+0x1e4>
   26850:	eb0021a5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26854:	eaffffab 	b	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26858:	e30d1314 	movw	r1, #54036	@ 0xd314
   2685c:	e3401003 	movt	r1, #3
   26860:	e30a093c 	movw	r0, #43324	@ 0xa93c
   26864:	e3400003 	movt	r0, #3
   26868:	e3002617 	movw	r2, #1559	@ 0x617
   2686c:	eb00155a 	bl	2bddc <assertion_failed>
   26870:	e5d4305e 	ldrb	r3, [r4, #94]	@ 0x5e
   26874:	e3530000 	cmp	r3, #0
   26878:	05c4505e 	strbeq	r5, [r4, #94]	@ 0x5e
   2687c:	0affffa1 	beq	26708 <CTCPConnection::TimerHandler(unsigned int)+0x54>
   26880:	e30d1314 	movw	r1, #54036	@ 0xd314
   26884:	e3401003 	movt	r1, #3
   26888:	e30d0374 	movw	r0, #54132	@ 0xd374
   2688c:	e3400003 	movt	r0, #3
   26890:	e300260b 	movw	r2, #1547	@ 0x60b
   26894:	eb001550 	bl	2bddc <assertion_failed>
   26898:	00041eb4 	.word	0x00041eb4

0002689c <CTCPConnection::TimerStub(unsigned int, void*, void*)>:
   2689c:	e2520000 	subs	r0, r2, #0
   268a0:	e92d4010 	push	{r4, lr}
   268a4:	0a000003 	beq	268b8 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x1c>
   268a8:	e3510002 	cmp	r1, #2
   268ac:	8a000007 	bhi	268d0 <CTCPConnection::TimerStub(unsigned int, void*, void*)+0x34>
   268b0:	e8bd4010 	pop	{r4, lr}
   268b4:	eaffff7e 	b	266b4 <CTCPConnection::TimerHandler(unsigned int)>
   268b8:	e30d1314 	movw	r1, #54036	@ 0xd314
   268bc:	e3401003 	movt	r1, #3
   268c0:	e3090d50 	movw	r0, #40272	@ 0x9d50
   268c4:	e3400003 	movt	r0, #3
   268c8:	e300261f 	movw	r2, #1567	@ 0x61f
   268cc:	eb001542 	bl	2bddc <assertion_failed>
   268d0:	e30d1314 	movw	r1, #54036	@ 0xd314
   268d4:	e3401003 	movt	r1, #3
   268d8:	e30d0358 	movw	r0, #54104	@ 0xd358
   268dc:	e3400003 	movt	r0, #3
   268e0:	e3002622 	movw	r2, #1570	@ 0x622
   268e4:	eb00153c 	bl	2bddc <assertion_failed>

000268e8 <CTCPConnection::NewState(TTCPState, unsigned int)>:
   268e8:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   268ec:	e92d4070 	push	{r4, r5, r6, lr}
   268f0:	e353000a 	cmp	r3, #10
   268f4:	e24dd010 	sub	sp, sp, #16
   268f8:	8a000018 	bhi	26960 <CTCPConnection::NewState(TTCPState, unsigned int)+0x78>
   268fc:	e1a04001 	mov	r4, r1
   26900:	e351000a 	cmp	r1, #10
   26904:	8a00001b 	bhi	26978 <CTCPConnection::NewState(TTCPState, unsigned int)+0x90>
   26908:	e1a05000 	mov	r5, r0
   2690c:	e1a06002 	mov	r6, r2
   26910:	eb001fac 	bl	2e7c8 <CLogger::Get()>
   26914:	e58d6008 	str	r6, [sp, #8]
   26918:	e3011e70 	movw	r1, #7792	@ 0x1e70
   2691c:	e3401004 	movt	r1, #4
   26920:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   26924:	e0812104 	add	r2, r1, r4, lsl #2
   26928:	e0813103 	add	r3, r1, r3, lsl #2
   2692c:	e5922048 	ldr	r2, [r2, #72]	@ 0x48
   26930:	e58d2004 	str	r2, [sp, #4]
   26934:	e2811044 	add	r1, r1, #68	@ 0x44
   26938:	e3a02004 	mov	r2, #4
   2693c:	e5933048 	ldr	r3, [r3, #72]	@ 0x48
   26940:	e58d3000 	str	r3, [sp]
   26944:	e30d3494 	movw	r3, #54420	@ 0xd494
   26948:	e3403003 	movt	r3, #3
   2694c:	eb002166 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   26950:	e1a00004 	mov	r0, r4
   26954:	e5c5402a 	strb	r4, [r5, #42]	@ 0x2a
   26958:	e28dd010 	add	sp, sp, #16
   2695c:	e8bd8070 	pop	{r4, r5, r6, pc}
   26960:	e30d1314 	movw	r1, #54036	@ 0xd314
   26964:	e3401003 	movt	r1, #3
   26968:	e30d0430 	movw	r0, #54320	@ 0xd430
   2696c:	e3400003 	movt	r0, #3
   26970:	e3002647 	movw	r2, #1607	@ 0x647
   26974:	eb001518 	bl	2bddc <assertion_failed>
   26978:	e30d1314 	movw	r1, #54036	@ 0xd314
   2697c:	e3401003 	movt	r1, #3
   26980:	e30d0464 	movw	r0, #54372	@ 0xd464
   26984:	e3400003 	movt	r0, #3
   26988:	e3002648 	movw	r2, #1608	@ 0x648
   2698c:	eb001512 	bl	2bddc <assertion_failed>

00026990 <CTCPConnection::UnexpectedState(unsigned int)>:
   26990:	e92d4030 	push	{r4, r5, lr}
   26994:	e1a05000 	mov	r5, r0
   26998:	e1a04001 	mov	r4, r1
   2699c:	e24dd00c 	sub	sp, sp, #12
   269a0:	ebfffeb5 	bl	2647c <CTCPConnection::DumpStatus()>
   269a4:	eb001f87 	bl	2e7c8 <CLogger::Get()>
   269a8:	e5d5102a 	ldrb	r1, [r5, #42]	@ 0x2a
   269ac:	e88d0012 	stm	sp, {r1, r4}
   269b0:	e3a02000 	mov	r2, #0
   269b4:	e59f1010 	ldr	r1, [pc, #16]	@ 269cc <CTCPConnection::UnexpectedState(unsigned int)+0x3c>
   269b8:	e30d33f4 	movw	r3, #54260	@ 0xd3f4
   269bc:	e3403003 	movt	r3, #3
   269c0:	eb002149 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   269c4:	e28dd00c 	add	sp, sp, #12
   269c8:	e8bd8030 	pop	{r4, r5, pc}
   269cc:	00041eb4 	.word	0x00041eb4

000269d0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   269d0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   269d4:	ed2d8b02 	vpush	{d8}
   269d8:	e24dd024 	sub	sp, sp, #36	@ 0x24
   269dc:	e59dc054 	ldr	ip, [sp, #84]	@ 0x54
   269e0:	e35c0006 	cmp	ip, #6
   269e4:	1a00000d 	bne	26a20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   269e8:	e1a06002 	mov	r6, r2
   269ec:	e3520013 	cmp	r2, #19
   269f0:	9a00000e 	bls	26a30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x60>
   269f4:	e1a04001 	mov	r4, r1
   269f8:	e3510000 	cmp	r1, #0
   269fc:	0a0000ff 	beq	26e00 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x430>
   26a00:	e1a07003 	mov	r7, r3
   26a04:	e1d130b2 	ldrh	r3, [r1, #2]
   26a08:	e1d021b6 	ldrh	r2, [r0, #22]
   26a0c:	e1a05000 	mov	r5, r0
   26a10:	e6bf3fb3 	rev16	r3, r3
   26a14:	e6ff3073 	uxth	r3, r3
   26a18:	e1520003 	cmp	r2, r3
   26a1c:	0a000007 	beq	26a40 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x70>
   26a20:	e3a00000 	mov	r0, #0
   26a24:	e28dd024 	add	sp, sp, #36	@ 0x24
   26a28:	ecbd8b02 	vpop	{d8}
   26a2c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a30:	e3e00000 	mvn	r0, #0
   26a34:	e28dd024 	add	sp, sp, #36	@ 0x24
   26a38:	ecbd8b02 	vpop	{d8}
   26a3c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a40:	e5d0302a 	ldrb	r3, [r0, #42]	@ 0x2a
   26a44:	e3530001 	cmp	r3, #1
   26a48:	0a000039 	beq	26b34 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x164>
   26a4c:	e1a01007 	mov	r1, r7
   26a50:	e280000c 	add	r0, r0, #12
   26a54:	eb0006c3 	bl	28568 <CIPAddress::operator!=(CIPAddress const&) const>
   26a58:	e3500000 	cmp	r0, #0
   26a5c:	1affffef 	bne	26a20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26a60:	e1d430b0 	ldrh	r3, [r4]
   26a64:	e1d521b4 	ldrh	r2, [r5, #20]
   26a68:	e6bf3fb3 	rev16	r3, r3
   26a6c:	e6ff3073 	uxth	r3, r3
   26a70:	e1520003 	cmp	r2, r3
   26a74:	0285901c 	addeq	r9, r5, #28
   26a78:	1affffe8 	bne	26a20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26a7c:	e1a02006 	mov	r2, r6
   26a80:	e1a01004 	mov	r1, r4
   26a84:	e1a00009 	mov	r0, r9
   26a88:	eb000902 	bl	28e98 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   26a8c:	e3500000 	cmp	r0, #0
   26a90:	1affffe2 	bne	26a20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26a94:	e1d480bc 	ldrh	r8, [r4, #12]
   26a98:	e1a01004 	mov	r1, r4
   26a9c:	e5942004 	ldr	r2, [r4, #4]
   26aa0:	e1a00005 	mov	r0, r5
   26aa4:	e2183c02 	ands	r3, r8, #512	@ 0x200
   26aa8:	e58d3014 	str	r3, [sp, #20]
   26aac:	e5943008 	ldr	r3, [r4, #8]
   26ab0:	e7e3a258 	ubfx	sl, r8, #4, #4
   26ab4:	e1a0a10a 	lsl	sl, sl, #2
   26ab8:	ec432b30 	vmov	d16, r2, r3
   26abc:	e28d300c 	add	r3, sp, #12
   26ac0:	e046600a 	sub	r6, r6, sl
   26ac4:	1286b001 	addne	fp, r6, #1
   26ac8:	01a0b006 	moveq	fp, r6
   26acc:	f3b080a0 	vrev32.8	d8, d16
   26ad0:	f483888f 	vst1.32	{d8[1]}, [r3]
   26ad4:	e2183c01 	ands	r3, r8, #256	@ 0x100
   26ad8:	e58d301c 	str	r3, [sp, #28]
   26adc:	128bb001 	addne	fp, fp, #1
   26ae0:	ed8d8a04 	vstr	s16, [sp, #16]
   26ae4:	e1d430be 	ldrh	r3, [r4, #14]
   26ae8:	e6bf3fb3 	rev16	r3, r3
   26aec:	e6ff3073 	uxth	r3, r3
   26af0:	e58d3018 	str	r3, [sp, #24]
   26af4:	ebfffbcc 	bl	25a2c <CTCPConnection::ScanOptions(TTCPHeader*)>
   26af8:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   26afc:	e353000a 	cmp	r3, #10
   26b00:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   26b04:	ea000027 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26b08:	00026cbc 	.word	0x00026cbc
   26b0c:	00026d10 	.word	0x00026d10
   26b10:	00026bb0 	.word	0x00026bb0
   26b14:	00026b54 	.word	0x00026b54
   26b18:	00026b54 	.word	0x00026b54
   26b1c:	00026b54 	.word	0x00026b54
   26b20:	00026b54 	.word	0x00026b54
   26b24:	00026b54 	.word	0x00026b54
   26b28:	00026b54 	.word	0x00026b54
   26b2c:	00026b54 	.word	0x00026b54
   26b30:	00026b54 	.word	0x00026b54
   26b34:	e1d130bc 	ldrh	r3, [r1, #12]
   26b38:	e3130c02 	tst	r3, #512	@ 0x200
   26b3c:	0affffb7 	beq	26a20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x50>
   26b40:	e280901c 	add	r9, r0, #28
   26b44:	e1a01007 	mov	r1, r7
   26b48:	e1a00009 	mov	r0, r9
   26b4c:	eb0008a6 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26b50:	eaffffc9 	b	26a7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xac>
   26b54:	e59530ac 	ldr	r3, [r5, #172]	@ 0xac
   26b58:	e3530000 	cmp	r3, #0
   26b5c:	0a0000ad 	beq	26e18 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x448>
   26b60:	e59520a8 	ldr	r2, [r5, #168]	@ 0xa8
   26b64:	e35b0000 	cmp	fp, #0
   26b68:	e59d0010 	ldr	r0, [sp, #16]
   26b6c:	e0421000 	sub	r1, r2, r0
   26b70:	1a0000f7 	bne	26f54 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x584>
   26b74:	e3510000 	cmp	r1, #0
   26b78:	da0001b8 	ble	27260 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x890>
   26b7c:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   26b80:	e3530003 	cmp	r3, #3
   26b84:	0a0000a9 	beq	26e30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x460>
   26b88:	e59530a8 	ldr	r3, [r5, #168]	@ 0xa8
   26b8c:	e3a0c000 	mov	ip, #0
   26b90:	e5952090 	ldr	r2, [r5, #144]	@ 0x90
   26b94:	e3a01a01 	mov	r1, #4096	@ 0x1000
   26b98:	e1a00005 	mov	r0, r5
   26b9c:	e58dc004 	str	ip, [sp, #4]
   26ba0:	e58dc000 	str	ip, [sp]
   26ba4:	ebfffb4a 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26ba8:	e3a00001 	mov	r0, #1
   26bac:	eaffff9c 	b	26a24 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x54>
   26bb0:	e3180a01 	tst	r8, #4096	@ 0x1000
   26bb4:	0a00000d 	beq	26bf0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x220>
   26bb8:	e59530a4 	ldr	r3, [r5, #164]	@ 0xa4
   26bbc:	e59d200c 	ldr	r2, [sp, #12]
   26bc0:	e0433002 	sub	r3, r3, r2
   26bc4:	e3530000 	cmp	r3, #0
   26bc8:	aa0000a9 	bge	26e74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4a4>
   26bcc:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   26bd0:	e0423003 	sub	r3, r2, r3
   26bd4:	e3530000 	cmp	r3, #0
   26bd8:	ca0000a5 	bgt	26e74 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4a4>
   26bdc:	e595308c 	ldr	r3, [r5, #140]	@ 0x8c
   26be0:	e59d200c 	ldr	r2, [sp, #12]
   26be4:	e0433002 	sub	r3, r3, r2
   26be8:	e3530000 	cmp	r3, #0
   26bec:	da0001b7 	ble	272d0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x900>
   26bf0:	e59d3014 	ldr	r3, [sp, #20]
   26bf4:	e2082b05 	and	r2, r8, #5120	@ 0x1400
   26bf8:	e2533000 	subs	r3, r3, #0
   26bfc:	13a03001 	movne	r3, #1
   26c00:	e3520000 	cmp	r2, #0
   26c04:	13a03000 	movne	r3, #0
   26c08:	e3530000 	cmp	r3, #0
   26c0c:	0affffe5 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26c10:	e59d3010 	ldr	r3, [sp, #16]
   26c14:	e58530b0 	str	r3, [r5, #176]	@ 0xb0
   26c18:	e2833001 	add	r3, r3, #1
   26c1c:	e58530a8 	str	r3, [r5, #168]	@ 0xa8
   26c20:	e59520a4 	ldr	r2, [r5, #164]	@ 0xa4
   26c24:	e595308c 	ldr	r3, [r5, #140]	@ 0x8c
   26c28:	e0423003 	sub	r3, r2, r3
   26c2c:	e3530000 	cmp	r3, #0
   26c30:	ba00010d 	blt	2706c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x69c>
   26c34:	e3a07000 	mov	r7, #0
   26c38:	e58d7004 	str	r7, [sp, #4]
   26c3c:	e58d7000 	str	r7, [sp]
   26c40:	e3a03003 	mov	r3, #3
   26c44:	e3a01c12 	mov	r1, #4608	@ 0x1200
   26c48:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   26c4c:	e28580b8 	add	r8, r5, #184	@ 0xb8
   26c50:	e59530a8 	ldr	r3, [r5, #168]	@ 0xa8
   26c54:	e1a00005 	mov	r0, r5
   26c58:	e5c5705d 	strb	r7, [r5, #93]	@ 0x5d
   26c5c:	ebfffb1c 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26c60:	e59510a4 	ldr	r1, [r5, #164]	@ 0xa4
   26c64:	e3a02001 	mov	r2, #1
   26c68:	e1a00008 	mov	r0, r8
   26c6c:	eb0003f2 	bl	27c3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   26c70:	e3a03005 	mov	r3, #5
   26c74:	e1a00008 	mov	r0, r8
   26c78:	e5853060 	str	r3, [r5, #96]	@ 0x60
   26c7c:	eb0003d0 	bl	27bc4 <CRetransmissionTimeoutCalculator::GetRTO() const>
   26c80:	e3a01001 	mov	r1, #1
   26c84:	e1a02000 	mov	r2, r0
   26c88:	e1a00005 	mov	r0, r5
   26c8c:	ebfffc21 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   26c90:	e59d301c 	ldr	r3, [sp, #28]
   26c94:	e1530007 	cmp	r3, r7
   26c98:	1a0001b1 	bne	27364 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x994>
   26c9c:	e1560007 	cmp	r6, r7
   26ca0:	0affffc0 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26ca4:	e3a03000 	mov	r3, #0
   26ca8:	e1a02006 	mov	r2, r6
   26cac:	e084100a 	add	r1, r4, sl
   26cb0:	e285003c 	add	r0, r5, #60	@ 0x3c
   26cb4:	eb000797 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   26cb8:	eaffffba 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26cbc:	e2186b01 	ands	r6, r8, #1024	@ 0x400
   26cc0:	1affffb8 	bne	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26cc4:	e1a01007 	mov	r1, r7
   26cc8:	e285000c 	add	r0, r5, #12
   26ccc:	e2188a01 	ands	r8, r8, #4096	@ 0x1000
   26cd0:	0a000072 	beq	26ea0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4d0>
   26cd4:	eb0006a0 	bl	2875c <CIPAddress::Set(CIPAddress const&)>
   26cd8:	e1d430b0 	ldrh	r3, [r4]
   26cdc:	e1a01007 	mov	r1, r7
   26ce0:	e1a00009 	mov	r0, r9
   26ce4:	e6bf3fb3 	rev16	r3, r3
   26ce8:	e1c531b4 	strh	r3, [r5, #20]
   26cec:	eb00083e 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26cf0:	e59d200c 	ldr	r2, [sp, #12]
   26cf4:	e3a01b01 	mov	r1, #1024	@ 0x400
   26cf8:	e1a03006 	mov	r3, r6
   26cfc:	e1a00005 	mov	r0, r5
   26d00:	e58d6004 	str	r6, [sp, #4]
   26d04:	e58d6000 	str	r6, [sp]
   26d08:	ebfffaf1 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26d0c:	eaffffa5 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26d10:	e2183b01 	ands	r3, r8, #1024	@ 0x400
   26d14:	1affffa3 	bne	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26d18:	e2188a01 	ands	r8, r8, #4096	@ 0x1000
   26d1c:	1a000099 	bne	26f88 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5b8>
   26d20:	e59d3014 	ldr	r3, [sp, #20]
   26d24:	e3530000 	cmp	r3, #0
   26d28:	0affff9e 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26d2c:	e304313c 	movw	r3, #16700	@ 0x413c
   26d30:	e3403004 	movt	r3, #4
   26d34:	e5933000 	ldr	r3, [r3]
   26d38:	e3530ffa 	cmp	r3, #1000	@ 0x3e8
   26d3c:	2a000055 	bcs	26e98 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x4c8>
   26d40:	e59d3018 	ldr	r3, [sp, #24]
   26d44:	e35b0000 	cmp	fp, #0
   26d48:	e5853094 	str	r3, [r5, #148]	@ 0x94
   26d4c:	e59d3010 	ldr	r3, [sp, #16]
   26d50:	e58530b0 	str	r3, [r5, #176]	@ 0xb0
   26d54:	e2833001 	add	r3, r3, #1
   26d58:	e58530a8 	str	r3, [r5, #168]	@ 0xa8
   26d5c:	e285309c 	add	r3, r5, #156	@ 0x9c
   26d60:	f403878f 	vst1.32	{d8}, [r3]
   26d64:	0a0001bd 	beq	27460 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa90>
   26d68:	e3560000 	cmp	r6, #0
   26d6c:	1a000176 	bne	2734c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x97c>
   26d70:	e28560b8 	add	r6, r5, #184	@ 0xb8
   26d74:	e1a00005 	mov	r0, r5
   26d78:	ebfffb5e 	bl	25af8 <CTCPConnection::CalculateISN()>
   26d7c:	e1a01000 	mov	r1, r0
   26d80:	e58500a4 	str	r0, [r5, #164]	@ 0xa4
   26d84:	e1a00006 	mov	r0, r6
   26d88:	eb00038f 	bl	27bcc <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>
   26d8c:	e1a01007 	mov	r1, r7
   26d90:	e285000c 	add	r0, r5, #12
   26d94:	eb000670 	bl	2875c <CIPAddress::Set(CIPAddress const&)>
   26d98:	e1d430b0 	ldrh	r3, [r4]
   26d9c:	e1a01007 	mov	r1, r7
   26da0:	e1a00009 	mov	r0, r9
   26da4:	e6bf3fb3 	rev16	r3, r3
   26da8:	e1c531b4 	strh	r3, [r5, #20]
   26dac:	eb00080e 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26db0:	e3a01000 	mov	r1, #0
   26db4:	e1c52ad4 	ldrd	r2, [r5, #164]	@ 0xa4
   26db8:	e1a00005 	mov	r0, r5
   26dbc:	e58d1004 	str	r1, [sp, #4]
   26dc0:	e58d1000 	str	r1, [sp]
   26dc4:	e3a01c12 	mov	r1, #4608	@ 0x1200
   26dc8:	ebfffac1 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26dcc:	e59510a4 	ldr	r1, [r5, #164]	@ 0xa4
   26dd0:	e1a00006 	mov	r0, r6
   26dd4:	e3a02001 	mov	r2, #1
   26dd8:	eb000397 	bl	27c3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>
   26ddc:	e59530a4 	ldr	r3, [r5, #164]	@ 0xa4
   26de0:	e3a02003 	mov	r2, #3
   26de4:	e2850068 	add	r0, r5, #104	@ 0x68
   26de8:	e2831001 	add	r1, r3, #1
   26dec:	e585308c 	str	r3, [r5, #140]	@ 0x8c
   26df0:	e5851090 	str	r1, [r5, #144]	@ 0x90
   26df4:	e5c5202a 	strb	r2, [r5, #42]	@ 0x2a
   26df8:	eb001351 	bl	2bb44 <CSynchronizationEvent::Set()>
   26dfc:	eaffff69 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26e00:	e30d1314 	movw	r1, #54036	@ 0xd314
   26e04:	e3401003 	movt	r1, #3
   26e08:	e30c0dac 	movw	r0, #52652	@ 0xcdac
   26e0c:	e3400003 	movt	r0, #3
   26e10:	e300227b 	movw	r2, #635	@ 0x27b
   26e14:	eb0013f0 	bl	2bddc <assertion_failed>
   26e18:	e35b0000 	cmp	fp, #0
   26e1c:	1affff56 	bne	26b7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   26e20:	e59530a8 	ldr	r3, [r5, #168]	@ 0xa8
   26e24:	e59d2010 	ldr	r2, [sp, #16]
   26e28:	e1520003 	cmp	r2, r3
   26e2c:	1affff52 	bne	26b7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   26e30:	e3180b01 	tst	r8, #1024	@ 0x400
   26e34:	0a000029 	beq	26ee0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x510>
   26e38:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   26e3c:	e3530007 	cmp	r3, #7
   26e40:	e6ef3073 	uxtb	r3, r3
   26e44:	8a0000fd 	bhi	27240 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x870>
   26e48:	e3530003 	cmp	r3, #3
   26e4c:	8a000112 	bhi	2729c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8cc>
   26e50:	1a00010d 	bne	2728c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8bc>
   26e54:	e2850048 	add	r0, r5, #72	@ 0x48
   26e58:	eb000336 	bl	27b38 <CRetransmissionQueue::Flush()>
   26e5c:	e5d53029 	ldrb	r3, [r5, #41]	@ 0x29
   26e60:	e3530000 	cmp	r3, #0
   26e64:	1a00014d 	bne	273a0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9d0>
   26e68:	e3a03001 	mov	r3, #1
   26e6c:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   26e70:	eaffff4c 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26e74:	e2183b01 	ands	r3, r8, #1024	@ 0x400
   26e78:	1affff4a 	bne	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26e7c:	e59d200c 	ldr	r2, [sp, #12]
   26e80:	e3a01b01 	mov	r1, #1024	@ 0x400
   26e84:	e1a00005 	mov	r0, r5
   26e88:	e58d3004 	str	r3, [sp, #4]
   26e8c:	e58d3000 	str	r3, [sp]
   26e90:	ebfffa8f 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26e94:	eaffff43 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26e98:	e1a01007 	mov	r1, r7
   26e9c:	e285000c 	add	r0, r5, #12
   26ea0:	eb00062d 	bl	2875c <CIPAddress::Set(CIPAddress const&)>
   26ea4:	e1d430b0 	ldrh	r3, [r4]
   26ea8:	e1a01007 	mov	r1, r7
   26eac:	e1a00009 	mov	r0, r9
   26eb0:	e6bf3fb3 	rev16	r3, r3
   26eb4:	e1c531b4 	strh	r3, [r5, #20]
   26eb8:	eb0007cb 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26ebc:	e59d3010 	ldr	r3, [sp, #16]
   26ec0:	e3a01b05 	mov	r1, #5120	@ 0x1400
   26ec4:	e1a02008 	mov	r2, r8
   26ec8:	e083300b 	add	r3, r3, fp
   26ecc:	e1a00005 	mov	r0, r5
   26ed0:	e58d8004 	str	r8, [sp, #4]
   26ed4:	e58d8000 	str	r8, [sp]
   26ed8:	ebfffa7d 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26edc:	eaffff31 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26ee0:	e59d3014 	ldr	r3, [sp, #20]
   26ee4:	e3530000 	cmp	r3, #0
   26ee8:	0a000037 	beq	26fcc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x5fc>
   26eec:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   26ef0:	e3530003 	cmp	r3, #3
   26ef4:	1a000002 	bne	26f04 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x534>
   26ef8:	e5d53029 	ldrb	r3, [r5, #41]	@ 0x29
   26efc:	e3530000 	cmp	r3, #0
   26f00:	0affffd8 	beq	26e68 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x498>
   26f04:	e3a04000 	mov	r4, #0
   26f08:	e5952090 	ldr	r2, [r5, #144]	@ 0x90
   26f0c:	e3a01b01 	mov	r1, #1024	@ 0x400
   26f10:	e1a03004 	mov	r3, r4
   26f14:	e1a00005 	mov	r0, r5
   26f18:	e58d4004 	str	r4, [sp, #4]
   26f1c:	e58d4000 	str	r4, [sp]
   26f20:	ebfffa6b 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26f24:	e3e03000 	mvn	r3, #0
   26f28:	e2850048 	add	r0, r5, #72	@ 0x48
   26f2c:	e585302c 	str	r3, [r5, #44]	@ 0x2c
   26f30:	eb000300 	bl	27b38 <CRetransmissionQueue::Flush()>
   26f34:	e2850030 	add	r0, r5, #48	@ 0x30
   26f38:	eb0006c1 	bl	28a44 <CNetQueue::Flush()>
   26f3c:	e285003c 	add	r0, r5, #60	@ 0x3c
   26f40:	eb0006bf 	bl	28a44 <CNetQueue::Flush()>
   26f44:	e2850068 	add	r0, r5, #104	@ 0x68
   26f48:	e5c5402a 	strb	r4, [r5, #42]	@ 0x2a
   26f4c:	eb0012fc 	bl	2bb44 <CSynchronizationEvent::Set()>
   26f50:	eaffff14 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26f54:	e3510000 	cmp	r1, #0
   26f58:	da0000c5 	ble	27274 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8a4>
   26f5c:	e59d1010 	ldr	r1, [sp, #16]
   26f60:	e2820001 	add	r0, r2, #1
   26f64:	e081100b 	add	r1, r1, fp
   26f68:	e0400001 	sub	r0, r0, r1
   26f6c:	e3500000 	cmp	r0, #0
   26f70:	caffff01 	bgt	26b7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   26f74:	e0833002 	add	r3, r3, r2
   26f78:	e0411003 	sub	r1, r1, r3
   26f7c:	e3510001 	cmp	r1, #1
   26f80:	5afffefd 	bpl	26b7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   26f84:	eaffffa9 	b	26e30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x460>
   26f88:	e1a01007 	mov	r1, r7
   26f8c:	e285000c 	add	r0, r5, #12
   26f90:	e58d3010 	str	r3, [sp, #16]
   26f94:	eb0005f0 	bl	2875c <CIPAddress::Set(CIPAddress const&)>
   26f98:	e1d420b0 	ldrh	r2, [r4]
   26f9c:	e1a01007 	mov	r1, r7
   26fa0:	e1a00009 	mov	r0, r9
   26fa4:	e6bf2fb2 	rev16	r2, r2
   26fa8:	e1c521b4 	strh	r2, [r5, #20]
   26fac:	eb00078e 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   26fb0:	e3a01b01 	mov	r1, #1024	@ 0x400
   26fb4:	e1cd20dc 	ldrd	r2, [sp, #12]
   26fb8:	e1a00005 	mov	r0, r5
   26fbc:	e58d3004 	str	r3, [sp, #4]
   26fc0:	e58d3000 	str	r3, [sp]
   26fc4:	ebfffa42 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   26fc8:	eafffef6 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26fcc:	e3180a01 	tst	r8, #4096	@ 0x1000
   26fd0:	0afffef4 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   26fd4:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   26fd8:	e2433003 	sub	r3, r3, #3
   26fdc:	e3530007 	cmp	r3, #7
   26fe0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   26fe4:	ea0001ba 	b	276d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd04>
   26fe8:	00027190 	.word	0x00027190
   26fec:	00027008 	.word	0x00027008
   26ff0:	00027008 	.word	0x00027008
   26ff4:	00027008 	.word	0x00027008
   26ff8:	00027008 	.word	0x00027008
   26ffc:	00027008 	.word	0x00027008
   27000:	00027218 	.word	0x00027218
   27004:	000271d4 	.word	0x000271d4
   27008:	e595308c 	ldr	r3, [r5, #140]	@ 0x8c
   2700c:	e59d100c 	ldr	r1, [sp, #12]
   27010:	e0532001 	subs	r2, r3, r1
   27014:	4a000108 	bmi	2743c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa6c>
   27018:	e59d100c 	ldr	r1, [sp, #12]
   2701c:	e0413003 	sub	r3, r1, r3
   27020:	e3530000 	cmp	r3, #0
   27024:	c5952090 	ldrgt	r2, [r5, #144]	@ 0x90
   27028:	da000125 	ble	274c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xaf4>
   2702c:	e59d300c 	ldr	r3, [sp, #12]
   27030:	e0423003 	sub	r3, r2, r3
   27034:	e3530000 	cmp	r3, #0
   27038:	b3a0c000 	movlt	ip, #0
   2703c:	b59530a8 	ldrlt	r3, [r5, #168]	@ 0xa8
   27040:	bafffed3 	blt	26b94 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c4>
   27044:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   27048:	e2433004 	sub	r3, r3, #4
   2704c:	e3530004 	cmp	r3, #4
   27050:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   27054:	ea0001a2 	b	276e4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd14>
   27058:	000270d4 	.word	0x000270d4
   2705c:	00027524 	.word	0x00027524
   27060:	0002756c 	.word	0x0002756c
   27064:	000270d4 	.word	0x000270d4
   27068:	00027478 	.word	0x00027478
   2706c:	e3a07000 	mov	r7, #0
   27070:	e3a03004 	mov	r3, #4
   27074:	e3a01001 	mov	r1, #1
   27078:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   2707c:	e1a00005 	mov	r0, r5
   27080:	e5c5705d 	strb	r7, [r5, #93]	@ 0x5d
   27084:	ebfffab5 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   27088:	e3a03005 	mov	r3, #5
   2708c:	e2850068 	add	r0, r5, #104	@ 0x68
   27090:	e5853060 	str	r3, [r5, #96]	@ 0x60
   27094:	eb0012aa 	bl	2bb44 <CSynchronizationEvent::Set()>
   27098:	e59d3018 	ldr	r3, [sp, #24]
   2709c:	e5853094 	str	r3, [r5, #148]	@ 0x94
   270a0:	e285309c 	add	r3, r5, #156	@ 0x9c
   270a4:	e58d7004 	str	r7, [sp, #4]
   270a8:	e3a01a01 	mov	r1, #4096	@ 0x1000
   270ac:	e58d7000 	str	r7, [sp]
   270b0:	e1a00005 	mov	r0, r5
   270b4:	f403878f 	vst1.32	{d8}, [r3]
   270b8:	e59530a8 	ldr	r3, [r5, #168]	@ 0xa8
   270bc:	e5952090 	ldr	r2, [r5, #144]	@ 0x90
   270c0:	ebfffa03 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   270c4:	e59d301c 	ldr	r3, [sp, #28]
   270c8:	e1560007 	cmp	r6, r7
   270cc:	01530007 	cmpeq	r3, r7
   270d0:	0afffeb4 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   270d4:	e35b0000 	cmp	fp, #0
   270d8:	0afffeb2 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   270dc:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   270e0:	e3530006 	cmp	r3, #6
   270e4:	e6ef3073 	uxtb	r3, r3
   270e8:	8a0000cd 	bhi	27424 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa54>
   270ec:	e3530003 	cmp	r3, #3
   270f0:	8a0000b1 	bhi	273bc <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x9ec>
   270f4:	0a000002 	beq	27104 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x734>
   270f8:	e1a00005 	mov	r0, r5
   270fc:	e30014dc 	movw	r1, #1244	@ 0x4dc
   27100:	ebfffe22 	bl	26990 <CTCPConnection::UnexpectedState(unsigned int)>
   27104:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   27108:	e3530000 	cmp	r3, #0
   2710c:	0afffea5 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27110:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   27114:	e3530001 	cmp	r3, #1
   27118:	0afffea2 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   2711c:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   27120:	e59d201c 	ldr	r2, [sp, #28]
   27124:	e3520000 	cmp	r2, #0
   27128:	13530002 	cmpne	r3, #2
   2712c:	03a03001 	moveq	r3, #1
   27130:	13a03000 	movne	r3, #0
   27134:	0afffe9b 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27138:	e59510a8 	ldr	r1, [r5, #168]	@ 0xa8
   2713c:	e1a00005 	mov	r0, r5
   27140:	e58d3004 	str	r3, [sp, #4]
   27144:	e58d3000 	str	r3, [sp]
   27148:	e2813001 	add	r3, r1, #1
   2714c:	e3a01a01 	mov	r1, #4096	@ 0x1000
   27150:	e58530a8 	str	r3, [r5, #168]	@ 0xa8
   27154:	e5952090 	ldr	r2, [r5, #144]	@ 0x90
   27158:	ebfff9dd 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   2715c:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   27160:	e2433003 	sub	r3, r3, #3
   27164:	e3530007 	cmp	r3, #7
   27168:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2716c:	ea000160 	b	276f4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xd24>
   27170:	000275e8 	.word	0x000275e8
   27174:	000275e8 	.word	0x000275e8
   27178:	000275bc 	.word	0x000275bc
   2717c:	00027588 	.word	0x00027588
   27180:	00026ba8 	.word	0x00026ba8
   27184:	00026ba8 	.word	0x00026ba8
   27188:	00026ba8 	.word	0x00026ba8
   2718c:	000275fc 	.word	0x000275fc
   27190:	e595308c 	ldr	r3, [r5, #140]	@ 0x8c
   27194:	e59d200c 	ldr	r2, [sp, #12]
   27198:	e0433002 	sub	r3, r3, r2
   2719c:	e3530000 	cmp	r3, #0
   271a0:	ca000003 	bgt	271b4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x7e4>
   271a4:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   271a8:	e0423003 	sub	r3, r2, r3
   271ac:	e3530000 	cmp	r3, #0
   271b0:	da000116 	ble	27610 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc40>
   271b4:	e3a03000 	mov	r3, #0
   271b8:	e59d200c 	ldr	r2, [sp, #12]
   271bc:	e3a01b01 	mov	r1, #1024	@ 0x400
   271c0:	e1a00005 	mov	r0, r5
   271c4:	e58d3004 	str	r3, [sp, #4]
   271c8:	e58d3000 	str	r3, [sp]
   271cc:	ebfff9c0 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   271d0:	eaffffbf 	b	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   271d4:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   271d8:	e59d200c 	ldr	r2, [sp, #12]
   271dc:	e1520003 	cmp	r2, r3
   271e0:	1affffbb 	bne	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   271e4:	e3a03000 	mov	r3, #0
   271e8:	e5c5305e 	strb	r3, [r5, #94]	@ 0x5e
   271ec:	e58d3004 	str	r3, [sp, #4]
   271f0:	e3a01a01 	mov	r1, #4096	@ 0x1000
   271f4:	e58d3000 	str	r3, [sp]
   271f8:	e1a00005 	mov	r0, r5
   271fc:	e59530a8 	ldr	r3, [r5, #168]	@ 0xa8
   27200:	ebfff9b3 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   27204:	e3a01002 	mov	r1, #2
   27208:	e1a00005 	mov	r0, r5
   2720c:	e3012770 	movw	r2, #6000	@ 0x1770
   27210:	ebfffac0 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   27214:	eaffffae 	b	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   27218:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   2721c:	e59d200c 	ldr	r2, [sp, #12]
   27220:	e1520003 	cmp	r2, r3
   27224:	1affffaa 	bne	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   27228:	e3a03000 	mov	r3, #0
   2722c:	e2850068 	add	r0, r5, #104	@ 0x68
   27230:	e5c5305e 	strb	r3, [r5, #94]	@ 0x5e
   27234:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   27238:	eb001241 	bl	2bb44 <CSynchronizationEvent::Set()>
   2723c:	eafffe59 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27240:	e2433008 	sub	r3, r3, #8
   27244:	e3530002 	cmp	r3, #2
   27248:	8a00000f 	bhi	2728c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x8bc>
   2724c:	e3a03000 	mov	r3, #0
   27250:	e2850068 	add	r0, r5, #104	@ 0x68
   27254:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   27258:	eb001239 	bl	2bb44 <CSynchronizationEvent::Set()>
   2725c:	eafffe51 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27260:	e0833002 	add	r3, r3, r2
   27264:	e0403003 	sub	r3, r0, r3
   27268:	e3530000 	cmp	r3, #0
   2726c:	aafffe42 	bge	26b7c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1ac>
   27270:	eafffeee 	b	26e30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x460>
   27274:	e59d0010 	ldr	r0, [sp, #16]
   27278:	e0831002 	add	r1, r3, r2
   2727c:	e0401001 	sub	r1, r0, r1
   27280:	e3510000 	cmp	r1, #0
   27284:	aaffff34 	bge	26f5c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x58c>
   27288:	eafffee8 	b	26e30 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x460>
   2728c:	e1a00005 	mov	r0, r5
   27290:	e30013e2 	movw	r1, #994	@ 0x3e2
   27294:	ebfffdbd 	bl	26990 <CTCPConnection::UnexpectedState(unsigned int)>
   27298:	eafffe42 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   2729c:	e3e03000 	mvn	r3, #0
   272a0:	e2850048 	add	r0, r5, #72	@ 0x48
   272a4:	e585302c 	str	r3, [r5, #44]	@ 0x2c
   272a8:	eb000222 	bl	27b38 <CRetransmissionQueue::Flush()>
   272ac:	e2850030 	add	r0, r5, #48	@ 0x30
   272b0:	eb0005e3 	bl	28a44 <CNetQueue::Flush()>
   272b4:	e285003c 	add	r0, r5, #60	@ 0x3c
   272b8:	eb0005e1 	bl	28a44 <CNetQueue::Flush()>
   272bc:	e3a03000 	mov	r3, #0
   272c0:	e2850068 	add	r0, r5, #104	@ 0x68
   272c4:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   272c8:	eb00121d 	bl	2bb44 <CSynchronizationEvent::Set()>
   272cc:	eafffe35 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   272d0:	e3180b01 	tst	r8, #1024	@ 0x400
   272d4:	1a000014 	bne	2732c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x95c>
   272d8:	e59d3014 	ldr	r3, [sp, #20]
   272dc:	e3530000 	cmp	r3, #0
   272e0:	0afffe30 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   272e4:	e59d3010 	ldr	r3, [sp, #16]
   272e8:	e28500b8 	add	r0, r5, #184	@ 0xb8
   272ec:	e59d700c 	ldr	r7, [sp, #12]
   272f0:	e58530b0 	str	r3, [r5, #176]	@ 0xb0
   272f4:	e2833001 	add	r3, r3, #1
   272f8:	e1a01007 	mov	r1, r7
   272fc:	e58530a8 	str	r3, [r5, #168]	@ 0xa8
   27300:	eb0002bc 	bl	27df8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   27304:	e595108c 	ldr	r1, [r5, #140]	@ 0x8c
   27308:	e0471001 	sub	r1, r7, r1
   2730c:	e3510001 	cmp	r1, #1
   27310:	9a000002 	bls	27320 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x950>
   27314:	e2411001 	sub	r1, r1, #1
   27318:	e2850048 	add	r0, r5, #72	@ 0x48
   2731c:	eb0001e1 	bl	27aa8 <CRetransmissionQueue::Advance(unsigned int)>
   27320:	e59d300c 	ldr	r3, [sp, #12]
   27324:	e585308c 	str	r3, [r5, #140]	@ 0x8c
   27328:	eafffe3c 	b	26c20 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x250>
   2732c:	e3a03000 	mov	r3, #0
   27330:	e3e02000 	mvn	r2, #0
   27334:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   27338:	e2850068 	add	r0, r5, #104	@ 0x68
   2733c:	e5c5305d 	strb	r3, [r5, #93]	@ 0x5d
   27340:	e585202c 	str	r2, [r5, #44]	@ 0x2c
   27344:	eb0011fe 	bl	2bb44 <CSynchronizationEvent::Set()>
   27348:	eafffe16 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   2734c:	e1a03008 	mov	r3, r8
   27350:	e1a02006 	mov	r2, r6
   27354:	e084100a 	add	r1, r4, sl
   27358:	e285003c 	add	r0, r5, #60	@ 0x3c
   2735c:	eb0005ed 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   27360:	eafffe82 	b	26d70 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x3a0>
   27364:	e58d7004 	str	r7, [sp, #4]
   27368:	e1a03007 	mov	r3, r7
   2736c:	e58d7000 	str	r7, [sp]
   27370:	e3a01b01 	mov	r1, #1024	@ 0x400
   27374:	e1a00005 	mov	r0, r5
   27378:	e5952090 	ldr	r2, [r5, #144]	@ 0x90
   2737c:	ebfff954 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   27380:	e5c5702a 	strb	r7, [r5, #42]	@ 0x2a
   27384:	e3e03000 	mvn	r3, #0
   27388:	e2850068 	add	r0, r5, #104	@ 0x68
   2738c:	e585302c 	str	r3, [r5, #44]	@ 0x2c
   27390:	eb0011eb 	bl	2bb44 <CSynchronizationEvent::Set()>
   27394:	e3560000 	cmp	r6, #0
   27398:	0afffe02 	beq	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   2739c:	eafffe40 	b	26ca4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x2d4>
   273a0:	e3a03000 	mov	r3, #0
   273a4:	e3e02000 	mvn	r2, #0
   273a8:	e2850068 	add	r0, r5, #104	@ 0x68
   273ac:	e585202c 	str	r2, [r5, #44]	@ 0x2c
   273b0:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   273b4:	eb0011e2 	bl	2bb44 <CSynchronizationEvent::Set()>
   273b8:	eafffdfa 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   273bc:	e59530a8 	ldr	r3, [r5, #168]	@ 0xa8
   273c0:	e59d2010 	ldr	r2, [sp, #16]
   273c4:	e1520003 	cmp	r2, r3
   273c8:	1a000019 	bne	27434 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xa64>
   273cc:	e3560000 	cmp	r6, #0
   273d0:	0affff4b 	beq	27104 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x734>
   273d4:	e084100a 	add	r1, r4, sl
   273d8:	e3a03000 	mov	r3, #0
   273dc:	e1a02006 	mov	r2, r6
   273e0:	e285003c 	add	r0, r5, #60	@ 0x3c
   273e4:	eb0005cb 	bl	28b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>
   273e8:	e59530a8 	ldr	r3, [r5, #168]	@ 0xa8
   273ec:	e3a02000 	mov	r2, #0
   273f0:	e3a01a01 	mov	r1, #4096	@ 0x1000
   273f4:	e0863003 	add	r3, r6, r3
   273f8:	e58530a8 	str	r3, [r5, #168]	@ 0xa8
   273fc:	e58d2004 	str	r2, [sp, #4]
   27400:	e1a00005 	mov	r0, r5
   27404:	e58d2000 	str	r2, [sp]
   27408:	e5952090 	ldr	r2, [r5, #144]	@ 0x90
   2740c:	ebfff930 	bl	258d4 <CTCPConnection::SendSegment(unsigned int, unsigned int, unsigned int, void const*, unsigned int)>
   27410:	e3180b02 	tst	r8, #2048	@ 0x800
   27414:	0affff3a 	beq	27104 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x734>
   27418:	e2850068 	add	r0, r5, #104	@ 0x68
   2741c:	eb0011c8 	bl	2bb44 <CSynchronizationEvent::Set()>
   27420:	eaffff37 	b	27104 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x734>
   27424:	e2433007 	sub	r3, r3, #7
   27428:	e3530003 	cmp	r3, #3
   2742c:	8affff31 	bhi	270f8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x728>
   27430:	eaffff33 	b	27104 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x734>
   27434:	e3a0c000 	mov	ip, #0
   27438:	eafffdd4 	b	26b90 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1c0>
   2743c:	e5952090 	ldr	r2, [r5, #144]	@ 0x90
   27440:	e0411002 	sub	r1, r1, r2
   27444:	e3510000 	cmp	r1, #0
   27448:	da00007d 	ble	27644 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc74>
   2744c:	e59d100c 	ldr	r1, [sp, #12]
   27450:	e0413003 	sub	r3, r1, r3
   27454:	e3530000 	cmp	r3, #0
   27458:	cafffef3 	bgt	2702c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x65c>
   2745c:	eafffef8 	b	27044 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x674>
   27460:	e30d1314 	movw	r1, #54036	@ 0xd314
   27464:	e3401003 	movt	r1, #3
   27468:	e30d04b0 	movw	r0, #54448	@ 0xd4b0
   2746c:	e3400003 	movt	r0, #3
   27470:	e3a02c03 	mov	r2, #768	@ 0x300
   27474:	eb001258 	bl	2bddc <assertion_failed>
   27478:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   2747c:	e59d200c 	ldr	r2, [sp, #12]
   27480:	e1520003 	cmp	r2, r3
   27484:	1affff12 	bne	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   27488:	e1a01002 	mov	r1, r2
   2748c:	e28500b8 	add	r0, r5, #184	@ 0xb8
   27490:	eb000258 	bl	27df8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   27494:	e3a03000 	mov	r3, #0
   27498:	e1a00005 	mov	r0, r5
   2749c:	e5c5305e 	strb	r3, [r5, #94]	@ 0x5e
   274a0:	e3a01001 	mov	r1, #1
   274a4:	ebfff9ad 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   274a8:	e3a0300a 	mov	r3, #10
   274ac:	e3a01002 	mov	r1, #2
   274b0:	e1a00005 	mov	r0, r5
   274b4:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   274b8:	e3012770 	movw	r2, #6000	@ 0x1770
   274bc:	ebfffa15 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   274c0:	eaffff03 	b	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   274c4:	e3520000 	cmp	r2, #0
   274c8:	1afffedd 	bne	27044 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x674>
   274cc:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   274d0:	e59d200c 	ldr	r2, [sp, #12]
   274d4:	e0423003 	sub	r3, r2, r3
   274d8:	e3530000 	cmp	r3, #0
   274dc:	cafffed8 	bgt	27044 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x674>
   274e0:	e595309c 	ldr	r3, [r5, #156]	@ 0x9c
   274e4:	e59d1010 	ldr	r1, [sp, #16]
   274e8:	e0432001 	sub	r2, r3, r1
   274ec:	e3520000 	cmp	r2, #0
   274f0:	ba000006 	blt	27510 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb40>
   274f4:	e1510003 	cmp	r1, r3
   274f8:	1afffed1 	bne	27044 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x674>
   274fc:	e59530a0 	ldr	r3, [r5, #160]	@ 0xa0
   27500:	e59d200c 	ldr	r2, [sp, #12]
   27504:	e0433002 	sub	r3, r3, r2
   27508:	e3530000 	cmp	r3, #0
   2750c:	cafffecc 	bgt	27044 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x674>
   27510:	e59d3018 	ldr	r3, [sp, #24]
   27514:	e5853094 	str	r3, [r5, #148]	@ 0x94
   27518:	e285309c 	add	r3, r5, #156	@ 0x9c
   2751c:	f403878f 	vst1.32	{d8}, [r3]
   27520:	eafffec7 	b	27044 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x674>
   27524:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   27528:	e59d200c 	ldr	r2, [sp, #12]
   2752c:	e1520003 	cmp	r2, r3
   27530:	1afffee7 	bne	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   27534:	e1a01002 	mov	r1, r2
   27538:	e28500b8 	add	r0, r5, #184	@ 0xb8
   2753c:	eb00022d 	bl	27df8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   27540:	e3a03000 	mov	r3, #0
   27544:	e3a01001 	mov	r1, #1
   27548:	e1a00005 	mov	r0, r5
   2754c:	e5c5305e 	strb	r3, [r5, #94]	@ 0x5e
   27550:	ebfff982 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   27554:	e3a03006 	mov	r3, #6
   27558:	e3a01002 	mov	r1, #2
   2755c:	e1a00005 	mov	r0, r5
   27560:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   27564:	e3012770 	movw	r2, #6000	@ 0x1770
   27568:	ebfff9ea 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   2756c:	e2850048 	add	r0, r5, #72	@ 0x48
   27570:	eb000082 	bl	27780 <CRetransmissionQueue::IsEmpty() const>
   27574:	e3500000 	cmp	r0, #0
   27578:	0afffed5 	beq	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   2757c:	e2850068 	add	r0, r5, #104	@ 0x68
   27580:	eb00116f 	bl	2bb44 <CSynchronizationEvent::Set()>
   27584:	eafffed2 	b	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   27588:	e3a01001 	mov	r1, #1
   2758c:	e1a00005 	mov	r0, r5
   27590:	ebfff972 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   27594:	e1a00005 	mov	r0, r5
   27598:	e3a01000 	mov	r1, #0
   2759c:	ebfff96f 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   275a0:	e3a0300a 	mov	r3, #10
   275a4:	e3a01002 	mov	r1, #2
   275a8:	e1a00005 	mov	r0, r5
   275ac:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   275b0:	e3012770 	movw	r2, #6000	@ 0x1770
   275b4:	ebfff9d7 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   275b8:	eafffd7a 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   275bc:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   275c0:	e59d200c 	ldr	r2, [sp, #12]
   275c4:	e1520003 	cmp	r2, r3
   275c8:	13a03008 	movne	r3, #8
   275cc:	15c5302a 	strbne	r3, [r5, #42]	@ 0x2a
   275d0:	1afffd74 	bne	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   275d4:	e3a04000 	mov	r4, #0
   275d8:	e3a01001 	mov	r1, #1
   275dc:	e1a00005 	mov	r0, r5
   275e0:	e5c5405e 	strb	r4, [r5, #94]	@ 0x5e
   275e4:	eaffffe9 	b	27590 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xbc0>
   275e8:	e3a03007 	mov	r3, #7
   275ec:	e2850068 	add	r0, r5, #104	@ 0x68
   275f0:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   275f4:	eb001152 	bl	2bb44 <CSynchronizationEvent::Set()>
   275f8:	eafffd6a 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   275fc:	e3a01002 	mov	r1, #2
   27600:	e1a00005 	mov	r0, r5
   27604:	e3012770 	movw	r2, #6000	@ 0x1770
   27608:	ebfff9c2 	bl	25d18 <CTCPConnection::StartTimer(unsigned int, unsigned int)>
   2760c:	eafffd65 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>
   27610:	e59d3018 	ldr	r3, [sp, #24]
   27614:	e1a01002 	mov	r1, r2
   27618:	e5853094 	str	r3, [r5, #148]	@ 0x94
   2761c:	e285309c 	add	r3, r5, #156	@ 0x9c
   27620:	e28500b8 	add	r0, r5, #184	@ 0xb8
   27624:	f403878f 	vst1.32	{d8}, [r3]
   27628:	e585208c 	str	r2, [r5, #140]	@ 0x8c
   2762c:	eb0001f1 	bl	27df8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   27630:	e3a03004 	mov	r3, #4
   27634:	e5c5302a 	strb	r3, [r5, #42]	@ 0x2a
   27638:	e3a03005 	mov	r3, #5
   2763c:	e5853060 	str	r3, [r5, #96]	@ 0x60
   27640:	eafffea3 	b	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   27644:	e59d900c 	ldr	r9, [sp, #12]
   27648:	e28500b8 	add	r0, r5, #184	@ 0xb8
   2764c:	e1a01009 	mov	r1, r9
   27650:	eb0001e8 	bl	27df8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>
   27654:	e595708c 	ldr	r7, [r5, #140]	@ 0x8c
   27658:	e5953090 	ldr	r3, [r5, #144]	@ 0x90
   2765c:	e0497007 	sub	r7, r9, r7
   27660:	e585908c 	str	r9, [r5, #140]	@ 0x8c
   27664:	e1590003 	cmp	r9, r3
   27668:	0a00000f 	beq	276ac <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcdc>
   2766c:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   27670:	e3530005 	cmp	r3, #5
   27674:	0a000012 	beq	276c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcf4>
   27678:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   2767c:	e3530008 	cmp	r3, #8
   27680:	0a00000f 	beq	276c4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcf4>
   27684:	e5d5302a 	ldrb	r3, [r5, #42]	@ 0x2a
   27688:	e3570001 	cmp	r7, #1
   2768c:	03530004 	cmpeq	r3, #4
   27690:	0affff92 	beq	274e0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   27694:	e3570000 	cmp	r7, #0
   27698:	0affff90 	beq	274e0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   2769c:	e1a01007 	mov	r1, r7
   276a0:	e2850048 	add	r0, r5, #72	@ 0x48
   276a4:	eb0000ff 	bl	27aa8 <CRetransmissionQueue::Advance(unsigned int)>
   276a8:	eaffff8c 	b	274e0 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xb10>
   276ac:	e3a01001 	mov	r1, #1
   276b0:	e1a00005 	mov	r0, r5
   276b4:	ebfff929 	bl	25b60 <CTCPConnection::StopTimer(unsigned int)>
   276b8:	e3a03005 	mov	r3, #5
   276bc:	e5853060 	str	r3, [r5, #96]	@ 0x60
   276c0:	eaffffe9 	b	2766c <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xc9c>
   276c4:	e3a03000 	mov	r3, #0
   276c8:	e2477001 	sub	r7, r7, #1
   276cc:	e5c5305e 	strb	r3, [r5, #94]	@ 0x5e
   276d0:	eaffffeb 	b	27684 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0xcb4>
   276d4:	e1a00005 	mov	r0, r5
   276d8:	e30014a8 	movw	r1, #1192	@ 0x4a8
   276dc:	ebfffcab 	bl	26990 <CTCPConnection::UnexpectedState(unsigned int)>
   276e0:	eafffe7b 	b	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   276e4:	e1a00005 	mov	r0, r5
   276e8:	e300148f 	movw	r1, #1167	@ 0x48f
   276ec:	ebfffca7 	bl	26990 <CTCPConnection::UnexpectedState(unsigned int)>
   276f0:	eafffe77 	b	270d4 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x704>
   276f4:	e1a00005 	mov	r0, r5
   276f8:	e3001519 	movw	r1, #1305	@ 0x519
   276fc:	ebfffca3 	bl	26990 <CTCPConnection::UnexpectedState(unsigned int)>
   27700:	eafffd28 	b	26ba8 <CTCPConnection::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x1d8>

00027704 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)>:
   27704:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   27708:	e2802008 	add	r2, r0, #8
   2770c:	e92d4010 	push	{r4, lr}
   27710:	e3a03000 	mov	r3, #0
   27714:	e1a04000 	mov	r4, r0
   27718:	e880000a 	stm	r0, {r1, r3}
   2771c:	e3510001 	cmp	r1, #1
   27720:	f442078f 	vst1.32	{d16}, [r2]
   27724:	e5803010 	str	r3, [r0, #16]
   27728:	9a000005 	bls	27744 <CRetransmissionQueue::CRetransmissionQueue(unsigned int)+0x40>
   2772c:	e1a00001 	mov	r0, r1
   27730:	eb003a81 	bl	3613c <operator new[](unsigned int)>
   27734:	e1a03000 	mov	r3, r0
   27738:	e1a00004 	mov	r0, r4
   2773c:	e5843004 	str	r3, [r4, #4]
   27740:	e8bd8010 	pop	{r4, pc}
   27744:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27748:	e3401003 	movt	r1, #3
   2774c:	e30d0554 	movw	r0, #54612	@ 0xd554
   27750:	e3400003 	movt	r0, #3
   27754:	e3a0201e 	mov	r2, #30
   27758:	eb00119f 	bl	2bddc <assertion_failed>

0002775c <CRetransmissionQueue::~CRetransmissionQueue()>:
   2775c:	e92d4010 	push	{r4, lr}
   27760:	e1a04000 	mov	r4, r0
   27764:	e5900004 	ldr	r0, [r0, #4]
   27768:	e3500000 	cmp	r0, #0
   2776c:	0a000001 	beq	27778 <CRetransmissionQueue::~CRetransmissionQueue()+0x1c>
   27770:	e3a01001 	mov	r1, #1
   27774:	eb003a82 	bl	36184 <operator delete(void*, unsigned int)>
   27778:	e1a00004 	mov	r0, r4
   2777c:	e8bd8010 	pop	{r4, pc}

00027780 <CRetransmissionQueue::IsEmpty() const>:
   27780:	e590200c 	ldr	r2, [r0, #12]
   27784:	e5900008 	ldr	r0, [r0, #8]
   27788:	e0420000 	sub	r0, r2, r0
   2778c:	e16f0f10 	clz	r0, r0
   27790:	e1a002a0 	lsr	r0, r0, #5
   27794:	e12fff1e 	bx	lr

00027798 <CRetransmissionQueue::GetFreeSpace() const>:
   27798:	e5903000 	ldr	r3, [r0]
   2779c:	e92d4010 	push	{r4, lr}
   277a0:	e3530001 	cmp	r3, #1
   277a4:	9a00000c 	bls	277dc <CRetransmissionQueue::GetFreeSpace() const+0x44>
   277a8:	e5902008 	ldr	r2, [r0, #8]
   277ac:	e1530002 	cmp	r3, r2
   277b0:	9a00000f 	bls	277f4 <CRetransmissionQueue::GetFreeSpace() const+0x5c>
   277b4:	e590100c 	ldr	r1, [r0, #12]
   277b8:	e1530001 	cmp	r3, r1
   277bc:	9a000012 	bls	2780c <CRetransmissionQueue::GetFreeSpace() const+0x74>
   277c0:	e1520001 	cmp	r2, r1
   277c4:	20833001 	addcs	r3, r3, r1
   277c8:	32411001 	subcc	r1, r1, #1
   277cc:	22433001 	subcs	r3, r3, #1
   277d0:	20430002 	subcs	r0, r3, r2
   277d4:	30410002 	subcc	r0, r1, r2
   277d8:	e8bd8010 	pop	{r4, pc}
   277dc:	e30d153c 	movw	r1, #54588	@ 0xd53c
   277e0:	e3401003 	movt	r1, #3
   277e4:	e30d0554 	movw	r0, #54612	@ 0xd554
   277e8:	e3400003 	movt	r0, #3
   277ec:	e3a02033 	mov	r2, #51	@ 0x33
   277f0:	eb001179 	bl	2bddc <assertion_failed>
   277f4:	e30d153c 	movw	r1, #54588	@ 0xd53c
   277f8:	e3401003 	movt	r1, #3
   277fc:	e30d0560 	movw	r0, #54624	@ 0xd560
   27800:	e3400003 	movt	r0, #3
   27804:	e3a02034 	mov	r2, #52	@ 0x34
   27808:	eb001173 	bl	2bddc <assertion_failed>
   2780c:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27810:	e3401003 	movt	r1, #3
   27814:	e30d0574 	movw	r0, #54644	@ 0xd574
   27818:	e3400003 	movt	r0, #3
   2781c:	e3a02035 	mov	r2, #53	@ 0x35
   27820:	eb00116d 	bl	2bddc <assertion_failed>

00027824 <CRetransmissionQueue::Write(void const*, unsigned int)>:
   27824:	e92d4070 	push	{r4, r5, r6, lr}
   27828:	e2526000 	subs	r6, r2, #0
   2782c:	0a000024 	beq	278c4 <CRetransmissionQueue::Write(void const*, unsigned int)+0xa0>
   27830:	e1a04000 	mov	r4, r0
   27834:	e1a05001 	mov	r5, r1
   27838:	ebffffd6 	bl	27798 <CRetransmissionQueue::GetFreeSpace() const>
   2783c:	e1500006 	cmp	r0, r6
   27840:	3a000025 	bcc	278dc <CRetransmissionQueue::Write(void const*, unsigned int)+0xb8>
   27844:	e3550000 	cmp	r5, #0
   27848:	0a000029 	beq	278f4 <CRetransmissionQueue::Write(void const*, unsigned int)+0xd0>
   2784c:	e5943004 	ldr	r3, [r4, #4]
   27850:	e3530000 	cmp	r3, #0
   27854:	0a00002c 	beq	2790c <CRetransmissionQueue::Write(void const*, unsigned int)+0xe8>
   27858:	e5942008 	ldr	r2, [r4, #8]
   2785c:	e1a00005 	mov	r0, r5
   27860:	e3560001 	cmp	r6, #1
   27864:	e2821001 	add	r1, r2, #1
   27868:	e5841008 	str	r1, [r4, #8]
   2786c:	e4d01001 	ldrb	r1, [r0], #1
   27870:	e7c31002 	strb	r1, [r3, r2]
   27874:	e5943008 	ldr	r3, [r4, #8]
   27878:	e5942000 	ldr	r2, [r4]
   2787c:	e731f213 	udiv	r1, r3, r2
   27880:	e0633192 	mls	r3, r2, r1, r3
   27884:	e5843008 	str	r3, [r4, #8]
   27888:	08bd8070 	popeq	{r4, r5, r6, pc}
   2788c:	e0851006 	add	r1, r5, r6
   27890:	e283e001 	add	lr, r3, #1
   27894:	e594c004 	ldr	ip, [r4, #4]
   27898:	e584e008 	str	lr, [r4, #8]
   2789c:	e4d0e001 	ldrb	lr, [r0], #1
   278a0:	e7cce003 	strb	lr, [ip, r3]
   278a4:	e1510000 	cmp	r1, r0
   278a8:	e5943008 	ldr	r3, [r4, #8]
   278ac:	e594c000 	ldr	ip, [r4]
   278b0:	e73efc13 	udiv	lr, r3, ip
   278b4:	e0633e9c 	mls	r3, ip, lr, r3
   278b8:	e5843008 	str	r3, [r4, #8]
   278bc:	1afffff3 	bne	27890 <CRetransmissionQueue::Write(void const*, unsigned int)+0x6c>
   278c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   278c4:	e30d153c 	movw	r1, #54588	@ 0xd53c
   278c8:	e3401003 	movt	r1, #3
   278cc:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   278d0:	e3400003 	movt	r0, #3
   278d4:	e3a02041 	mov	r2, #65	@ 0x41
   278d8:	eb00113f 	bl	2bddc <assertion_failed>
   278dc:	e30d153c 	movw	r1, #54588	@ 0xd53c
   278e0:	e3401003 	movt	r1, #3
   278e4:	e30d0588 	movw	r0, #54664	@ 0xd588
   278e8:	e3400003 	movt	r0, #3
   278ec:	e3a02042 	mov	r2, #66	@ 0x42
   278f0:	eb001139 	bl	2bddc <assertion_failed>
   278f4:	e30d153c 	movw	r1, #54588	@ 0xd53c
   278f8:	e3401003 	movt	r1, #3
   278fc:	e30d05a4 	movw	r0, #54692	@ 0xd5a4
   27900:	e3400003 	movt	r0, #3
   27904:	e3a02045 	mov	r2, #69	@ 0x45
   27908:	eb001133 	bl	2bddc <assertion_failed>
   2790c:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27910:	e3401003 	movt	r1, #3
   27914:	e30c0590 	movw	r0, #50576	@ 0xc590
   27918:	e3400003 	movt	r0, #3
   2791c:	e3a02046 	mov	r2, #70	@ 0x46
   27920:	eb00112d 	bl	2bddc <assertion_failed>

00027924 <CRetransmissionQueue::GetBytesAvailable() const>:
   27924:	e5903000 	ldr	r3, [r0]
   27928:	e92d4010 	push	{r4, lr}
   2792c:	e3530001 	cmp	r3, #1
   27930:	9a00000a 	bls	27960 <CRetransmissionQueue::GetBytesAvailable() const+0x3c>
   27934:	e5902008 	ldr	r2, [r0, #8]
   27938:	e1530002 	cmp	r3, r2
   2793c:	9a00000d 	bls	27978 <CRetransmissionQueue::GetBytesAvailable() const+0x54>
   27940:	e5900010 	ldr	r0, [r0, #16]
   27944:	e1530000 	cmp	r3, r0
   27948:	9a000010 	bls	27990 <CRetransmissionQueue::GetBytesAvailable() const+0x6c>
   2794c:	e1520000 	cmp	r2, r0
   27950:	30833002 	addcc	r3, r3, r2
   27954:	30430000 	subcc	r0, r3, r0
   27958:	20420000 	subcs	r0, r2, r0
   2795c:	e8bd8010 	pop	{r4, pc}
   27960:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27964:	e3401003 	movt	r1, #3
   27968:	e30d0554 	movw	r0, #54612	@ 0xd554
   2796c:	e3400003 	movt	r0, #3
   27970:	e3a02051 	mov	r2, #81	@ 0x51
   27974:	eb001118 	bl	2bddc <assertion_failed>
   27978:	e30d153c 	movw	r1, #54588	@ 0xd53c
   2797c:	e3401003 	movt	r1, #3
   27980:	e30d0560 	movw	r0, #54624	@ 0xd560
   27984:	e3400003 	movt	r0, #3
   27988:	e3a02052 	mov	r2, #82	@ 0x52
   2798c:	eb001112 	bl	2bddc <assertion_failed>
   27990:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27994:	e3401003 	movt	r1, #3
   27998:	e30d05ac 	movw	r0, #54700	@ 0xd5ac
   2799c:	e3400003 	movt	r0, #3
   279a0:	e3a02053 	mov	r2, #83	@ 0x53
   279a4:	eb00110c 	bl	2bddc <assertion_failed>

000279a8 <CRetransmissionQueue::Read(void*, unsigned int)>:
   279a8:	e92d4070 	push	{r4, r5, r6, lr}
   279ac:	e2526000 	subs	r6, r2, #0
   279b0:	0a000024 	beq	27a48 <CRetransmissionQueue::Read(void*, unsigned int)+0xa0>
   279b4:	e1a04000 	mov	r4, r0
   279b8:	e1a05001 	mov	r5, r1
   279bc:	ebffffd8 	bl	27924 <CRetransmissionQueue::GetBytesAvailable() const>
   279c0:	e1500006 	cmp	r0, r6
   279c4:	3a000025 	bcc	27a60 <CRetransmissionQueue::Read(void*, unsigned int)+0xb8>
   279c8:	e3550000 	cmp	r5, #0
   279cc:	0a000029 	beq	27a78 <CRetransmissionQueue::Read(void*, unsigned int)+0xd0>
   279d0:	e5943004 	ldr	r3, [r4, #4]
   279d4:	e3530000 	cmp	r3, #0
   279d8:	0a00002c 	beq	27a90 <CRetransmissionQueue::Read(void*, unsigned int)+0xe8>
   279dc:	e5942010 	ldr	r2, [r4, #16]
   279e0:	e1a00005 	mov	r0, r5
   279e4:	e3560001 	cmp	r6, #1
   279e8:	e2821001 	add	r1, r2, #1
   279ec:	e5841010 	str	r1, [r4, #16]
   279f0:	e7d33002 	ldrb	r3, [r3, r2]
   279f4:	e4c03001 	strb	r3, [r0], #1
   279f8:	e5943010 	ldr	r3, [r4, #16]
   279fc:	e5942000 	ldr	r2, [r4]
   27a00:	e731f213 	udiv	r1, r3, r2
   27a04:	e0633192 	mls	r3, r2, r1, r3
   27a08:	e5843010 	str	r3, [r4, #16]
   27a0c:	08bd8070 	popeq	{r4, r5, r6, pc}
   27a10:	e0851006 	add	r1, r5, r6
   27a14:	e594c004 	ldr	ip, [r4, #4]
   27a18:	e283e001 	add	lr, r3, #1
   27a1c:	e584e010 	str	lr, [r4, #16]
   27a20:	e7dc3003 	ldrb	r3, [ip, r3]
   27a24:	e4c03001 	strb	r3, [r0], #1
   27a28:	e5943010 	ldr	r3, [r4, #16]
   27a2c:	e1510000 	cmp	r1, r0
   27a30:	e594c000 	ldr	ip, [r4]
   27a34:	e73efc13 	udiv	lr, r3, ip
   27a38:	e0633e9c 	mls	r3, ip, lr, r3
   27a3c:	e5843010 	str	r3, [r4, #16]
   27a40:	1afffff3 	bne	27a14 <CRetransmissionQueue::Read(void*, unsigned int)+0x6c>
   27a44:	e8bd8070 	pop	{r4, r5, r6, pc}
   27a48:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27a4c:	e3401003 	movt	r1, #3
   27a50:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   27a54:	e3400003 	movt	r0, #3
   27a58:	e3a0205f 	mov	r2, #95	@ 0x5f
   27a5c:	eb0010de 	bl	2bddc <assertion_failed>
   27a60:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27a64:	e3401003 	movt	r1, #3
   27a68:	e30d05c4 	movw	r0, #54724	@ 0xd5c4
   27a6c:	e3400003 	movt	r0, #3
   27a70:	e3a02060 	mov	r2, #96	@ 0x60
   27a74:	eb0010d8 	bl	2bddc <assertion_failed>
   27a78:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27a7c:	e3401003 	movt	r1, #3
   27a80:	e30d05a4 	movw	r0, #54692	@ 0xd5a4
   27a84:	e3400003 	movt	r0, #3
   27a88:	e3a02063 	mov	r2, #99	@ 0x63
   27a8c:	eb0010d2 	bl	2bddc <assertion_failed>
   27a90:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27a94:	e3401003 	movt	r1, #3
   27a98:	e30c0590 	movw	r0, #50576	@ 0xc590
   27a9c:	e3400003 	movt	r0, #3
   27aa0:	e3a02064 	mov	r2, #100	@ 0x64
   27aa4:	eb0010cc 	bl	2bddc <assertion_failed>

00027aa8 <CRetransmissionQueue::Advance(unsigned int)>:
   27aa8:	e5902000 	ldr	r2, [r0]
   27aac:	e92d4010 	push	{r4, lr}
   27ab0:	e3520001 	cmp	r2, #1
   27ab4:	9a00000a 	bls	27ae4 <CRetransmissionQueue::Advance(unsigned int)+0x3c>
   27ab8:	e590300c 	ldr	r3, [r0, #12]
   27abc:	e1520003 	cmp	r2, r3
   27ac0:	9a00000d 	bls	27afc <CRetransmissionQueue::Advance(unsigned int)+0x54>
   27ac4:	e590c010 	ldr	ip, [r0, #16]
   27ac8:	e152000c 	cmp	r2, ip
   27acc:	9a000010 	bls	27b14 <CRetransmissionQueue::Advance(unsigned int)+0x6c>
   27ad0:	e0833001 	add	r3, r3, r1
   27ad4:	e731f213 	udiv	r1, r3, r2
   27ad8:	e0633192 	mls	r3, r2, r1, r3
   27adc:	e580300c 	str	r3, [r0, #12]
   27ae0:	e8bd8010 	pop	{r4, pc}
   27ae4:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27ae8:	e3401003 	movt	r1, #3
   27aec:	e30d0554 	movw	r0, #54612	@ 0xd554
   27af0:	e3400003 	movt	r0, #3
   27af4:	e3a0206f 	mov	r2, #111	@ 0x6f
   27af8:	eb0010b7 	bl	2bddc <assertion_failed>
   27afc:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27b00:	e3401003 	movt	r1, #3
   27b04:	e30d0574 	movw	r0, #54644	@ 0xd574
   27b08:	e3400003 	movt	r0, #3
   27b0c:	e3a02070 	mov	r2, #112	@ 0x70
   27b10:	eb0010b1 	bl	2bddc <assertion_failed>
   27b14:	e30d153c 	movw	r1, #54588	@ 0xd53c
   27b18:	e3401003 	movt	r1, #3
   27b1c:	e30d05ac 	movw	r0, #54700	@ 0xd5ac
   27b20:	e3400003 	movt	r0, #3
   27b24:	e3a02071 	mov	r2, #113	@ 0x71
   27b28:	eb0010ab 	bl	2bddc <assertion_failed>

00027b2c <CRetransmissionQueue::Reset()>:
   27b2c:	e590300c 	ldr	r3, [r0, #12]
   27b30:	e5803010 	str	r3, [r0, #16]
   27b34:	e12fff1e 	bx	lr

00027b38 <CRetransmissionQueue::Flush()>:
   27b38:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   27b3c:	e2802008 	add	r2, r0, #8
   27b40:	e3a03000 	mov	r3, #0
   27b44:	f442078f 	vst1.32	{d16}, [r2]
   27b48:	e5803010 	str	r3, [r0, #16]
   27b4c:	e12fff1e 	bx	lr

00027b50 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()>:
   27b50:	e92d4010 	push	{r4, lr}
   27b54:	e1a04000 	mov	r4, r0
   27b58:	eb003536 	bl	35038 <CTimer::Get()>
   27b5c:	e1a03004 	mov	r3, r4
   27b60:	eddf1b12 	vldr	d17, [pc, #72]	@ 27bb0 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x60>
   27b64:	eddf0b13 	vldr	d16, [pc, #76]	@ 27bb8 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x68>
   27b68:	e2842020 	add	r2, r4, #32
   27b6c:	e3a01001 	mov	r1, #1
   27b70:	e3500000 	cmp	r0, #0
   27b74:	e4830004 	str	r0, [r3], #4
   27b78:	f443178f 	vst1.32	{d17}, [r3]
   27b7c:	e3a03000 	mov	r3, #0
   27b80:	e5c4100c 	strb	r1, [r4, #12]
   27b84:	e5c43018 	strb	r3, [r4, #24]
   27b88:	f442078f 	vst1.32	{d16}, [r2]
   27b8c:	0a000001 	beq	27b98 <CRetransmissionTimeoutCalculator::CRetransmissionTimeoutCalculator()+0x48>
   27b90:	e1a00004 	mov	r0, r4
   27b94:	e8bd8010 	pop	{r4, pc}
   27b98:	e30d15e4 	movw	r1, #54756	@ 0xd5e4
   27b9c:	e3401003 	movt	r1, #3
   27ba0:	e3090d94 	movw	r0, #40340	@ 0x9d94
   27ba4:	e3400003 	movt	r0, #3
   27ba8:	e3a02033 	mov	r2, #51	@ 0x33
   27bac:	eb00108a 	bl	2bddc <assertion_failed>
   27bb0:	00000000 	.word	0x00000000
   27bb4:	0000012c 	.word	0x0000012c
   27bb8:	00000000 	.word	0x00000000
   27bbc:	00000001 	.word	0x00000001

00027bc0 <CRetransmissionTimeoutCalculator::~CRetransmissionTimeoutCalculator()>:
   27bc0:	e12fff1e 	bx	lr

00027bc4 <CRetransmissionTimeoutCalculator::GetRTO() const>:
   27bc4:	e5900008 	ldr	r0, [r0, #8]
   27bc8:	e12fff1e 	bx	lr

00027bcc <CRetransmissionTimeoutCalculator::Initialize(unsigned int)>:
   27bcc:	e92d4070 	push	{r4, r5, r6, lr}
   27bd0:	e1a04000 	mov	r4, r0
   27bd4:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   27bd8:	e1a05001 	mov	r5, r1
   27bdc:	e3500000 	cmp	r0, #0
   27be0:	1a000007 	bne	27c04 <CRetransmissionTimeoutCalculator::Initialize(unsigned int)+0x38>
   27be4:	e3a02f4b 	mov	r2, #300	@ 0x12c
   27be8:	e3a03001 	mov	r3, #1
   27bec:	e5841004 	str	r1, [r4, #4]
   27bf0:	e5842008 	str	r2, [r4, #8]
   27bf4:	e5c4300c 	strb	r3, [r4, #12]
   27bf8:	e5c40018 	strb	r0, [r4, #24]
   27bfc:	e5840020 	str	r0, [r4, #32]
   27c00:	e8bd8070 	pop	{r4, r5, r6, pc}
   27c04:	eb003f5d 	bl	37980 <EnterCritical>
   27c08:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
   27c0c:	e3a03000 	mov	r3, #0
   27c10:	e3a02f4b 	mov	r2, #300	@ 0x12c
   27c14:	e1510003 	cmp	r1, r3
   27c18:	e5842008 	str	r2, [r4, #8]
   27c1c:	e5845004 	str	r5, [r4, #4]
   27c20:	e3a02001 	mov	r2, #1
   27c24:	e5c43018 	strb	r3, [r4, #24]
   27c28:	e5c4200c 	strb	r2, [r4, #12]
   27c2c:	e5843020 	str	r3, [r4, #32]
   27c30:	08bd8070 	popeq	{r4, r5, r6, pc}
   27c34:	e8bd4070 	pop	{r4, r5, r6, lr}
   27c38:	ea003f7b 	b	37a2c <LeaveCritical>

00027c3c <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)>:
   27c3c:	e92d4010 	push	{r4, lr}
   27c40:	e1a04000 	mov	r4, r0
   27c44:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   27c48:	e3500000 	cmp	r0, #0
   27c4c:	1a000011 	bne	27c98 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x5c>
   27c50:	e5d43018 	ldrb	r3, [r4, #24]
   27c54:	e3530000 	cmp	r3, #0
   27c58:	18bd8010 	popne	{r4, pc}
   27c5c:	e5943020 	ldr	r3, [r4, #32]
   27c60:	e3530000 	cmp	r3, #0
   27c64:	1a000006 	bne	27c84 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   27c68:	e5940000 	ldr	r0, [r4]
   27c6c:	e3a03001 	mov	r3, #1
   27c70:	e5c43018 	strb	r3, [r4, #24]
   27c74:	e3500000 	cmp	r0, #0
   27c78:	0a00000e 	beq	27cb8 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x7c>
   27c7c:	eb00321b 	bl	344f0 <CTimer::GetTicks() const>
   27c80:	e584001c 	str	r0, [r4, #28]
   27c84:	e5943024 	ldr	r3, [r4, #36]	@ 0x24
   27c88:	e3530000 	cmp	r3, #0
   27c8c:	08bd8010 	popeq	{r4, pc}
   27c90:	e8bd4010 	pop	{r4, lr}
   27c94:	ea003f64 	b	37a2c <LeaveCritical>
   27c98:	eb003f38 	bl	37980 <EnterCritical>
   27c9c:	e5d43018 	ldrb	r3, [r4, #24]
   27ca0:	e3530000 	cmp	r3, #0
   27ca4:	1afffff6 	bne	27c84 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   27ca8:	e5943020 	ldr	r3, [r4, #32]
   27cac:	e3530000 	cmp	r3, #0
   27cb0:	1afffff3 	bne	27c84 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x48>
   27cb4:	eaffffeb 	b	27c68 <CRetransmissionTimeoutCalculator::SegmentSent(unsigned int, unsigned int)+0x2c>
   27cb8:	e30d15e4 	movw	r1, #54756	@ 0xd5e4
   27cbc:	e3401003 	movt	r1, #3
   27cc0:	e3090d94 	movw	r0, #40340	@ 0x9d94
   27cc4:	e3400003 	movt	r0, #3
   27cc8:	e3a0205f 	mov	r2, #95	@ 0x5f
   27ccc:	eb001042 	bl	2bddc <assertion_failed>

00027cd0 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()>:
   27cd0:	e92d4010 	push	{r4, lr}
   27cd4:	e1a04000 	mov	r4, r0
   27cd8:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   27cdc:	e3500000 	cmp	r0, #0
   27ce0:	1a000010 	bne	27d28 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x58>
   27ce4:	e5943008 	ldr	r3, [r4, #8]
   27ce8:	e3022ee0 	movw	r2, #12000	@ 0x2ee0
   27cec:	e1a03083 	lsl	r3, r3, #1
   27cf0:	e1530002 	cmp	r3, r2
   27cf4:	21a03002 	movcs	r3, r2
   27cf8:	e5942020 	ldr	r2, [r4, #32]
   27cfc:	e5843008 	str	r3, [r4, #8]
   27d00:	e2823001 	add	r3, r2, #1
   27d04:	e5843020 	str	r3, [r4, #32]
   27d08:	e3530002 	cmp	r3, #2
   27d0c:	9a000003 	bls	27d20 <CRetransmissionTimeoutCalculator::RetransmissionTimerExpired()+0x50>
   27d10:	e3a03001 	mov	r3, #1
   27d14:	e5c40018 	strb	r0, [r4, #24]
   27d18:	e5c4300c 	strb	r3, [r4, #12]
   27d1c:	e8bd8010 	pop	{r4, pc}
   27d20:	e5c40018 	strb	r0, [r4, #24]
   27d24:	e8bd8010 	pop	{r4, pc}
   27d28:	eb003f14 	bl	37980 <EnterCritical>
   27d2c:	e5943008 	ldr	r3, [r4, #8]
   27d30:	e5942020 	ldr	r2, [r4, #32]
   27d34:	e3021ee0 	movw	r1, #12000	@ 0x2ee0
   27d38:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
   27d3c:	e1a03083 	lsl	r3, r3, #1
   27d40:	e2822001 	add	r2, r2, #1
   27d44:	e1530001 	cmp	r3, r1
   27d48:	e5842020 	str	r2, [r4, #32]
   27d4c:	21a03001 	movcs	r3, r1
   27d50:	e3520002 	cmp	r2, #2
   27d54:	e5843008 	str	r3, [r4, #8]
   27d58:	83a03001 	movhi	r3, #1
   27d5c:	85c4300c 	strbhi	r3, [r4, #12]
   27d60:	e3a03000 	mov	r3, #0
   27d64:	e1500003 	cmp	r0, r3
   27d68:	e5c43018 	strb	r3, [r4, #24]
   27d6c:	08bd8010 	popeq	{r4, pc}
   27d70:	e8bd4010 	pop	{r4, lr}
   27d74:	ea003f2c 	b	37a2c <LeaveCritical>

00027d78 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>:
   27d78:	e5d0300c 	ldrb	r3, [r0, #12]
   27d7c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   27d80:	e3530000 	cmp	r3, #0
   27d84:	0a00000f 	beq	27dc8 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x50>
   27d88:	e1a020a1 	lsr	r2, r1, #1
   27d8c:	e3a03000 	mov	r3, #0
   27d90:	e5c0300c 	strb	r3, [r0, #12]
   27d94:	e1a0e102 	lsl	lr, r2, #2
   27d98:	e302cee0 	movw	ip, #12000	@ 0x2ee0
   27d9c:	e35e0001 	cmp	lr, #1
   27da0:	2081300e 	addcs	r3, r1, lr
   27da4:	32813001 	addcc	r3, r1, #1
   27da8:	e5802014 	str	r2, [r0, #20]
   27dac:	e153000c 	cmp	r3, ip
   27db0:	e5801010 	str	r1, [r0, #16]
   27db4:	21a0300c 	movcs	r3, ip
   27db8:	e3530064 	cmp	r3, #100	@ 0x64
   27dbc:	33a03064 	movcc	r3, #100	@ 0x64
   27dc0:	e5803008 	str	r3, [r0, #8]
   27dc4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   27dc8:	e5903010 	ldr	r3, [r0, #16]
   27dcc:	e5902014 	ldr	r2, [r0, #20]
   27dd0:	e043c001 	sub	ip, r3, r1
   27dd4:	e35c0000 	cmp	ip, #0
   27dd8:	e0633183 	rsb	r3, r3, r3, lsl #3
   27ddc:	e0822082 	add	r2, r2, r2, lsl #1
   27de0:	b26cc000 	rsblt	ip, ip, #0
   27de4:	e082200c 	add	r2, r2, ip
   27de8:	e0833001 	add	r3, r3, r1
   27dec:	e1a02122 	lsr	r2, r2, #2
   27df0:	e1a011a3 	lsr	r1, r3, #3
   27df4:	eaffffe6 	b	27d94 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)+0x1c>

00027df8 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)>:
   27df8:	e92d4010 	push	{r4, lr}
   27dfc:	e1a04000 	mov	r4, r0
   27e00:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   27e04:	e3500000 	cmp	r0, #0
   27e08:	1a000016 	bne	27e68 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x70>
   27e0c:	e5d43018 	ldrb	r3, [r4, #24]
   27e10:	e3530000 	cmp	r3, #0
   27e14:	0a00000b 	beq	27e48 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   27e18:	e5943020 	ldr	r3, [r4, #32]
   27e1c:	e3530000 	cmp	r3, #0
   27e20:	1a000008 	bne	27e48 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x50>
   27e24:	e5940000 	ldr	r0, [r4]
   27e28:	e3500000 	cmp	r0, #0
   27e2c:	0a00000f 	beq	27e70 <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x78>
   27e30:	eb0031ae 	bl	344f0 <CTimer::GetTicks() const>
   27e34:	e594301c 	ldr	r3, [r4, #28]
   27e38:	e1a01000 	mov	r1, r0
   27e3c:	e1a00004 	mov	r0, r4
   27e40:	e0411003 	sub	r1, r1, r3
   27e44:	ebffffcb 	bl	27d78 <CRetransmissionTimeoutCalculator::Calculate(unsigned int)>
   27e48:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
   27e4c:	e3a03000 	mov	r3, #0
   27e50:	e5c43018 	strb	r3, [r4, #24]
   27e54:	e1520003 	cmp	r2, r3
   27e58:	e5843020 	str	r3, [r4, #32]
   27e5c:	08bd8010 	popeq	{r4, pc}
   27e60:	e8bd4010 	pop	{r4, lr}
   27e64:	ea003ef0 	b	37a2c <LeaveCritical>
   27e68:	eb003ec4 	bl	37980 <EnterCritical>
   27e6c:	eaffffe6 	b	27e0c <CRetransmissionTimeoutCalculator::SegmentAcknowledged(unsigned int)+0x14>
   27e70:	e30d15e4 	movw	r1, #54756	@ 0xd5e4
   27e74:	e3401003 	movt	r1, #3
   27e78:	e3090d94 	movw	r0, #40340	@ 0x9d94
   27e7c:	e3400003 	movt	r0, #3
   27e80:	e3a02074 	mov	r2, #116	@ 0x74
   27e84:	eb000fd4 	bl	2bddc <assertion_failed>

00027e88 <CTCPRejector::~CTCPRejector()>:
   27e88:	e59f3014 	ldr	r3, [pc, #20]	@ 27ea4 <CTCPRejector::~CTCPRejector()+0x1c>
   27e8c:	e92d4010 	push	{r4, lr}
   27e90:	e1a04000 	mov	r4, r0
   27e94:	e5803000 	str	r3, [r0]
   27e98:	ebfff319 	bl	24b04 <CNetConnection::~CNetConnection()>
   27e9c:	e1a00004 	mov	r0, r4
   27ea0:	e8bd8010 	pop	{r4, pc}
   27ea4:	00041eec 	.word	0x00041eec

00027ea8 <CTCPRejector::~CTCPRejector()>:
   27ea8:	e59f3020 	ldr	r3, [pc, #32]	@ 27ed0 <CTCPRejector::~CTCPRejector()+0x28>
   27eac:	e92d4010 	push	{r4, lr}
   27eb0:	e1a04000 	mov	r4, r0
   27eb4:	e5803000 	str	r3, [r0]
   27eb8:	ebfff311 	bl	24b04 <CNetConnection::~CNetConnection()>
   27ebc:	e1a00004 	mov	r0, r4
   27ec0:	e3a0102c 	mov	r1, #44	@ 0x2c
   27ec4:	eb0038ae 	bl	36184 <operator delete(void*, unsigned int)>
   27ec8:	e1a00004 	mov	r0, r4
   27ecc:	e8bd8010 	pop	{r4, pc}
   27ed0:	00041eec 	.word	0x00041eec

00027ed4 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)>:
   27ed4:	e92d4010 	push	{r4, lr}
   27ed8:	e1a04000 	mov	r4, r0
   27edc:	e3a03006 	mov	r3, #6
   27ee0:	e24dd008 	sub	sp, sp, #8
   27ee4:	e58d3000 	str	r3, [sp]
   27ee8:	e3a03000 	mov	r3, #0
   27eec:	ebfff2dd 	bl	24a68 <CNetConnection::CNetConnection(CNetConfig*, CNetworkLayer*, unsigned short, int)>
   27ef0:	e59f300c 	ldr	r3, [pc, #12]	@ 27f04 <CTCPRejector::CTCPRejector(CNetConfig*, CNetworkLayer*)+0x30>
   27ef4:	e1a00004 	mov	r0, r4
   27ef8:	e5843000 	str	r3, [r4]
   27efc:	e28dd008 	add	sp, sp, #8
   27f00:	e8bd8010 	pop	{r4, pc}
   27f04:	00041eec 	.word	0x00041eec

00027f08 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>:
   27f08:	e92d4010 	push	{r4, lr}
   27f0c:	e3110c02 	tst	r1, #512	@ 0x200
   27f10:	e24ddd19 	sub	sp, sp, #1600	@ 0x640
   27f14:	e24dd008 	sub	sp, sp, #8
   27f18:	1a000022 	bne	27fa8 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xa0>
   27f1c:	e1a04000 	mov	r4, r0
   27f20:	e1d001b6 	ldrh	r0, [r0, #22]
   27f24:	e6bf2f32 	rev	r2, r2
   27f28:	e58d200c 	str	r2, [sp, #12]
   27f2c:	e6bf2fb0 	rev16	r2, r0
   27f30:	e1cd20b8 	strh	r2, [sp, #8]
   27f34:	e1d421b4 	ldrh	r2, [r4, #20]
   27f38:	e211ca01 	ands	ip, r1, #4096	@ 0x1000
   27f3c:	e284001c 	add	r0, r4, #28
   27f40:	e3811050 	orr	r1, r1, #80	@ 0x50
   27f44:	e6bf2fb2 	rev16	r2, r2
   27f48:	e1cd11b4 	strh	r1, [sp, #20]
   27f4c:	e1cd20ba 	strh	r2, [sp, #10]
   27f50:	e28d1008 	add	r1, sp, #8
   27f54:	e3a02014 	mov	r2, #20
   27f58:	16bfcf33 	revne	ip, r3
   27f5c:	e3a03000 	mov	r3, #0
   27f60:	e58dc010 	str	ip, [sp, #16]
   27f64:	e1cd31b6 	strh	r3, [sp, #22]
   27f68:	e58d3018 	str	r3, [sp, #24]
   27f6c:	eb0003c9 	bl	28e98 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   27f70:	e594c008 	ldr	ip, [r4, #8]
   27f74:	e1cd01b8 	strh	r0, [sp, #24]
   27f78:	e35c0000 	cmp	ip, #0
   27f7c:	0a00000f 	beq	27fc0 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)+0xb8>
   27f80:	e3a0e006 	mov	lr, #6
   27f84:	e3a03014 	mov	r3, #20
   27f88:	e28d2008 	add	r2, sp, #8
   27f8c:	e284100c 	add	r1, r4, #12
   27f90:	e1a0000c 	mov	r0, ip
   27f94:	e58de000 	str	lr, [sp]
   27f98:	ebffe8bc 	bl	22290 <CNetworkLayer::Send(CIPAddress const&, void const*, unsigned int, int)>
   27f9c:	e28ddd19 	add	sp, sp, #1600	@ 0x640
   27fa0:	e28dd008 	add	sp, sp, #8
   27fa4:	e8bd8010 	pop	{r4, pc}
   27fa8:	e30d15fc 	movw	r1, #54780	@ 0xd5fc
   27fac:	e3401003 	movt	r1, #3
   27fb0:	e30d060c 	movw	r0, #54796	@ 0xd60c
   27fb4:	e3400003 	movt	r0, #3
   27fb8:	e3a020a1 	mov	r2, #161	@ 0xa1
   27fbc:	eb000f86 	bl	2bddc <assertion_failed>
   27fc0:	e30d15fc 	movw	r1, #54780	@ 0xd5fc
   27fc4:	e3401003 	movt	r1, #3
   27fc8:	e30c0d04 	movw	r0, #52484	@ 0xcd04
   27fcc:	e3400003 	movt	r0, #3
   27fd0:	e3a020c7 	mov	r2, #199	@ 0xc7
   27fd4:	eb000f80 	bl	2bddc <assertion_failed>

00027fd8 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)>:
   27fd8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27fdc:	e59dc024 	ldr	ip, [sp, #36]	@ 0x24
   27fe0:	e35c0006 	cmp	ip, #6
   27fe4:	1a00003e 	bne	280e4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10c>
   27fe8:	e1a05002 	mov	r5, r2
   27fec:	e3520013 	cmp	r2, #19
   27ff0:	9a00003d 	bls	280ec <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x114>
   27ff4:	e1a06001 	mov	r6, r1
   27ff8:	e3510000 	cmp	r1, #0
   27ffc:	0a00003c 	beq	280f4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x11c>
   28000:	e1a04003 	mov	r4, r3
   28004:	e1d130b2 	ldrh	r3, [r1, #2]
   28008:	e1a07000 	mov	r7, r0
   2800c:	e6bf2fb3 	rev16	r2, r3
   28010:	e1c021b6 	strh	r2, [r0, #22]
   28014:	e6ff3073 	uxth	r3, r3
   28018:	e3530000 	cmp	r3, #0
   2801c:	0a000032 	beq	280ec <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x114>
   28020:	e5900004 	ldr	r0, [r0, #4]
   28024:	e3500000 	cmp	r0, #0
   28028:	0a000037 	beq	2810c <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x134>
   2802c:	eb0000f0 	bl	283f4 <CNetConfig::GetIPAddress() const>
   28030:	eb00020d 	bl	2886c <CIPAddress::IsNull() const>
   28034:	e3500000 	cmp	r0, #0
   28038:	1a000029 	bne	280e4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10c>
   2803c:	e287801c 	add	r8, r7, #28
   28040:	e5970004 	ldr	r0, [r7, #4]
   28044:	eb0000ea 	bl	283f4 <CNetConfig::GetIPAddress() const>
   28048:	e1a01000 	mov	r1, r0
   2804c:	e1a00008 	mov	r0, r8
   28050:	eb000361 	bl	28ddc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>
   28054:	e1a01004 	mov	r1, r4
   28058:	e1a00008 	mov	r0, r8
   2805c:	eb000362 	bl	28dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>
   28060:	e1a02005 	mov	r2, r5
   28064:	e1a01006 	mov	r1, r6
   28068:	e1a00008 	mov	r0, r8
   2806c:	eb000389 	bl	28e98 <CChecksumCalculator::Calculate(void const*, unsigned int)>
   28070:	e3500000 	cmp	r0, #0
   28074:	1a00001a 	bne	280e4 <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x10c>
   28078:	e1d680bc 	ldrh	r8, [r6, #12]
   2807c:	e1a01004 	mov	r1, r4
   28080:	e287000c 	add	r0, r7, #12
   28084:	e5969004 	ldr	r9, [r6, #4]
   28088:	e3180c02 	tst	r8, #512	@ 0x200
   2808c:	e596a008 	ldr	sl, [r6, #8]
   28090:	e7e33258 	ubfx	r3, r8, #4, #4
   28094:	e0455103 	sub	r5, r5, r3, lsl #2
   28098:	12855001 	addne	r5, r5, #1
   2809c:	e3180c01 	tst	r8, #256	@ 0x100
   280a0:	12855001 	addne	r5, r5, #1
   280a4:	eb0001ac 	bl	2875c <CIPAddress::Set(CIPAddress const&)>
   280a8:	e1d630b0 	ldrh	r3, [r6]
   280ac:	e6bf3fb3 	rev16	r3, r3
   280b0:	e1c731b4 	strh	r3, [r7, #20]
   280b4:	e2183b01 	ands	r3, r8, #1024	@ 0x400
   280b8:	1a000007 	bne	280dc <CTCPRejector::PacketReceived(void const*, unsigned int, CIPAddress&, CIPAddress&, int)+0x104>
   280bc:	e2182a01 	ands	r2, r8, #4096	@ 0x1000
   280c0:	e1a00007 	mov	r0, r7
   280c4:	06bf3f39 	reveq	r3, r9
   280c8:	03a01b05 	moveq	r1, #5120	@ 0x1400
   280cc:	00853003 	addeq	r3, r5, r3
   280d0:	16bf2f3a 	revne	r2, sl
   280d4:	13a01b01 	movne	r1, #1024	@ 0x400
   280d8:	ebffff8a 	bl	27f08 <CTCPRejector::SendSegment(unsigned int, unsigned int, unsigned int)>
   280dc:	e3a00001 	mov	r0, #1
   280e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   280e4:	e3a00000 	mov	r0, #0
   280e8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   280ec:	e3e00000 	mvn	r0, #0
   280f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   280f4:	e30d15fc 	movw	r1, #54780	@ 0xd5fc
   280f8:	e3401003 	movt	r1, #3
   280fc:	e30c0dac 	movw	r0, #52652	@ 0xcdac
   28100:	e3400003 	movt	r0, #3
   28104:	e3a02052 	mov	r2, #82	@ 0x52
   28108:	eb000f33 	bl	2bddc <assertion_failed>
   2810c:	e30d15fc 	movw	r1, #54780	@ 0xd5fc
   28110:	e3401003 	movt	r1, #3
   28114:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   28118:	e3400003 	movt	r0, #3
   2811c:	e3a0205b 	mov	r2, #91	@ 0x5b
   28120:	eb000f2d 	bl	2bddc <assertion_failed>

00028124 <CNetConfig::CNetConfig()>:
   28124:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28128:	e1a06000 	mov	r6, r0
   2812c:	e3a03001 	mov	r3, #1
   28130:	e1a04000 	mov	r4, r0
   28134:	e24dd008 	sub	sp, sp, #8
   28138:	e4c63004 	strb	r3, [r6], #4
   2813c:	e284700c 	add	r7, r4, #12
   28140:	e284a014 	add	sl, r4, #20
   28144:	e284901c 	add	r9, r4, #28
   28148:	e1a00006 	mov	r0, r6
   2814c:	e2848024 	add	r8, r4, #36	@ 0x24
   28150:	eb0000c3 	bl	28464 <CIPAddress::CIPAddress()>
   28154:	e1a00007 	mov	r0, r7
   28158:	eb0000c1 	bl	28464 <CIPAddress::CIPAddress()>
   2815c:	e1a0000a 	mov	r0, sl
   28160:	eb0000bf 	bl	28464 <CIPAddress::CIPAddress()>
   28164:	e1a00009 	mov	r0, r9
   28168:	eb0000bd 	bl	28464 <CIPAddress::CIPAddress()>
   2816c:	e3015f28 	movw	r5, #7976	@ 0x1f28
   28170:	e3405004 	movt	r5, #4
   28174:	e1a00008 	mov	r0, r8
   28178:	eb0000b9 	bl	28464 <CIPAddress::CIPAddress()>
   2817c:	e1a00006 	mov	r0, r6
   28180:	e1a01005 	mov	r1, r5
   28184:	eb000164 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   28188:	e1a01005 	mov	r1, r5
   2818c:	e1a00007 	mov	r0, r7
   28190:	eb000161 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   28194:	e1a01005 	mov	r1, r5
   28198:	e1a0000a 	mov	r0, sl
   2819c:	eb00015e 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   281a0:	e1a01005 	mov	r1, r5
   281a4:	e1a00009 	mov	r0, r9
   281a8:	eb00015b 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   281ac:	e1a0100d 	mov	r1, sp
   281b0:	e1a00006 	mov	r0, r6
   281b4:	eb000194 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   281b8:	e28d1004 	add	r1, sp, #4
   281bc:	e1a00007 	mov	r0, r7
   281c0:	eb000191 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   281c4:	e1a00008 	mov	r0, r8
   281c8:	e89d000a 	ldm	sp, {r1, r3}
   281cc:	e1e03003 	mvn	r3, r3
   281d0:	e1831001 	orr	r1, r3, r1
   281d4:	eb00014c 	bl	2870c <CIPAddress::Set(unsigned int)>
   281d8:	e1a00004 	mov	r0, r4
   281dc:	e28dd008 	add	sp, sp, #8
   281e0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000281e4 <CNetConfig::~CNetConfig()>:
   281e4:	e92d4010 	push	{r4, lr}
   281e8:	e1a04000 	mov	r4, r0
   281ec:	e2800024 	add	r0, r0, #36	@ 0x24
   281f0:	eb0000c2 	bl	28500 <CIPAddress::~CIPAddress()>
   281f4:	e284001c 	add	r0, r4, #28
   281f8:	eb0000c0 	bl	28500 <CIPAddress::~CIPAddress()>
   281fc:	e2840014 	add	r0, r4, #20
   28200:	eb0000be 	bl	28500 <CIPAddress::~CIPAddress()>
   28204:	e284000c 	add	r0, r4, #12
   28208:	eb0000bc 	bl	28500 <CIPAddress::~CIPAddress()>
   2820c:	e2840004 	add	r0, r4, #4
   28210:	eb0000ba 	bl	28500 <CIPAddress::~CIPAddress()>
   28214:	e1a00004 	mov	r0, r4
   28218:	e8bd8010 	pop	{r4, pc}

0002821c <CNetConfig::Reset()>:
   2821c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   28220:	e1a04000 	mov	r4, r0
   28224:	e2807004 	add	r7, r0, #4
   28228:	e3015f28 	movw	r5, #7976	@ 0x1f28
   2822c:	e3405004 	movt	r5, #4
   28230:	e24dd00c 	sub	sp, sp, #12
   28234:	e1a01005 	mov	r1, r5
   28238:	e1a00007 	mov	r0, r7
   2823c:	e284600c 	add	r6, r4, #12
   28240:	eb000135 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   28244:	e1a01005 	mov	r1, r5
   28248:	e1a00006 	mov	r0, r6
   2824c:	eb000132 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   28250:	e1a01005 	mov	r1, r5
   28254:	e2840014 	add	r0, r4, #20
   28258:	eb00012f 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   2825c:	e1a01005 	mov	r1, r5
   28260:	e284001c 	add	r0, r4, #28
   28264:	eb00012c 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   28268:	e1a0100d 	mov	r1, sp
   2826c:	e1a00007 	mov	r0, r7
   28270:	eb000165 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28274:	e28d1004 	add	r1, sp, #4
   28278:	e1a00006 	mov	r0, r6
   2827c:	eb000162 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28280:	e2840024 	add	r0, r4, #36	@ 0x24
   28284:	e89d000a 	ldm	sp, {r1, r3}
   28288:	e1e03003 	mvn	r3, r3
   2828c:	e1831001 	orr	r1, r3, r1
   28290:	eb00011d 	bl	2870c <CIPAddress::Set(unsigned int)>
   28294:	e28dd00c 	add	sp, sp, #12
   28298:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002829c <CNetConfig::SetDHCP(bool)>:
   2829c:	e5c01000 	strb	r1, [r0]
   282a0:	e12fff1e 	bx	lr

000282a4 <CNetConfig::SetIPAddress(unsigned int)>:
   282a4:	e92d4030 	push	{r4, r5, lr}
   282a8:	e2805004 	add	r5, r0, #4
   282ac:	e1a04000 	mov	r4, r0
   282b0:	e24dd00c 	sub	sp, sp, #12
   282b4:	e1a00005 	mov	r0, r5
   282b8:	eb000113 	bl	2870c <CIPAddress::Set(unsigned int)>
   282bc:	e1a0100d 	mov	r1, sp
   282c0:	e1a00005 	mov	r0, r5
   282c4:	eb000150 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   282c8:	e28d1004 	add	r1, sp, #4
   282cc:	e284000c 	add	r0, r4, #12
   282d0:	eb00014d 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   282d4:	e2840024 	add	r0, r4, #36	@ 0x24
   282d8:	e89d000a 	ldm	sp, {r1, r3}
   282dc:	e1e03003 	mvn	r3, r3
   282e0:	e1831001 	orr	r1, r3, r1
   282e4:	eb000108 	bl	2870c <CIPAddress::Set(unsigned int)>
   282e8:	e28dd00c 	add	sp, sp, #12
   282ec:	e8bd8030 	pop	{r4, r5, pc}

000282f0 <CNetConfig::SetNetMask(unsigned int)>:
   282f0:	e92d4030 	push	{r4, r5, lr}
   282f4:	e280500c 	add	r5, r0, #12
   282f8:	e1a04000 	mov	r4, r0
   282fc:	e24dd00c 	sub	sp, sp, #12
   28300:	e1a00005 	mov	r0, r5
   28304:	eb000100 	bl	2870c <CIPAddress::Set(unsigned int)>
   28308:	e1a0100d 	mov	r1, sp
   2830c:	e2840004 	add	r0, r4, #4
   28310:	eb00013d 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28314:	e28d1004 	add	r1, sp, #4
   28318:	e1a00005 	mov	r0, r5
   2831c:	eb00013a 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28320:	e2840024 	add	r0, r4, #36	@ 0x24
   28324:	e89d000a 	ldm	sp, {r1, r3}
   28328:	e1e03003 	mvn	r3, r3
   2832c:	e1831001 	orr	r1, r3, r1
   28330:	eb0000f5 	bl	2870c <CIPAddress::Set(unsigned int)>
   28334:	e28dd00c 	add	sp, sp, #12
   28338:	e8bd8030 	pop	{r4, r5, pc}

0002833c <CNetConfig::SetDefaultGateway(unsigned int)>:
   2833c:	e2800014 	add	r0, r0, #20
   28340:	ea0000f1 	b	2870c <CIPAddress::Set(unsigned int)>

00028344 <CNetConfig::SetDNSServer(unsigned int)>:
   28344:	e280001c 	add	r0, r0, #28
   28348:	ea0000ef 	b	2870c <CIPAddress::Set(unsigned int)>

0002834c <CNetConfig::SetIPAddress(unsigned char const*)>:
   2834c:	e92d4030 	push	{r4, r5, lr}
   28350:	e2805004 	add	r5, r0, #4
   28354:	e1a04000 	mov	r4, r0
   28358:	e24dd00c 	sub	sp, sp, #12
   2835c:	e1a00005 	mov	r0, r5
   28360:	eb0000ed 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   28364:	e1a0100d 	mov	r1, sp
   28368:	e1a00005 	mov	r0, r5
   2836c:	eb000126 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28370:	e28d1004 	add	r1, sp, #4
   28374:	e284000c 	add	r0, r4, #12
   28378:	eb000123 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   2837c:	e2840024 	add	r0, r4, #36	@ 0x24
   28380:	e89d000a 	ldm	sp, {r1, r3}
   28384:	e1e03003 	mvn	r3, r3
   28388:	e1831001 	orr	r1, r3, r1
   2838c:	eb0000de 	bl	2870c <CIPAddress::Set(unsigned int)>
   28390:	e28dd00c 	add	sp, sp, #12
   28394:	e8bd8030 	pop	{r4, r5, pc}

00028398 <CNetConfig::SetNetMask(unsigned char const*)>:
   28398:	e92d4030 	push	{r4, r5, lr}
   2839c:	e280500c 	add	r5, r0, #12
   283a0:	e1a04000 	mov	r4, r0
   283a4:	e24dd00c 	sub	sp, sp, #12
   283a8:	e1a00005 	mov	r0, r5
   283ac:	eb0000da 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   283b0:	e1a0100d 	mov	r1, sp
   283b4:	e2840004 	add	r0, r4, #4
   283b8:	eb000113 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   283bc:	e28d1004 	add	r1, sp, #4
   283c0:	e1a00005 	mov	r0, r5
   283c4:	eb000110 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   283c8:	e2840024 	add	r0, r4, #36	@ 0x24
   283cc:	e89d000a 	ldm	sp, {r1, r3}
   283d0:	e1e03003 	mvn	r3, r3
   283d4:	e1831001 	orr	r1, r3, r1
   283d8:	eb0000cb 	bl	2870c <CIPAddress::Set(unsigned int)>
   283dc:	e28dd00c 	add	sp, sp, #12
   283e0:	e8bd8030 	pop	{r4, r5, pc}

000283e4 <CNetConfig::SetDefaultGateway(unsigned char const*)>:
   283e4:	e2800014 	add	r0, r0, #20
   283e8:	ea0000cb 	b	2871c <CIPAddress::Set(unsigned char const*)>

000283ec <CNetConfig::SetDNSServer(unsigned char const*)>:
   283ec:	e280001c 	add	r0, r0, #28
   283f0:	ea0000c9 	b	2871c <CIPAddress::Set(unsigned char const*)>

000283f4 <CNetConfig::GetIPAddress() const>:
   283f4:	e2800004 	add	r0, r0, #4
   283f8:	e12fff1e 	bx	lr

000283fc <CNetConfig::IsDHCPUsed() const>:
   283fc:	e5d00000 	ldrb	r0, [r0]
   28400:	e12fff1e 	bx	lr

00028404 <CNetConfig::GetNetMask() const>:
   28404:	e280000c 	add	r0, r0, #12
   28408:	ea0000f3 	b	287dc <CIPAddress::Get() const>

0002840c <CNetConfig::GetDefaultGateway() const>:
   2840c:	e2800014 	add	r0, r0, #20
   28410:	e12fff1e 	bx	lr

00028414 <CNetConfig::GetDNSServer() const>:
   28414:	e280001c 	add	r0, r0, #28
   28418:	e12fff1e 	bx	lr

0002841c <CNetConfig::GetBroadcastAddress() const>:
   2841c:	e2800024 	add	r0, r0, #36	@ 0x24
   28420:	e12fff1e 	bx	lr

00028424 <CNetConfig::UpdateBroadcastAddress()>:
   28424:	e92d4010 	push	{r4, lr}
   28428:	e1a04000 	mov	r4, r0
   2842c:	e2800004 	add	r0, r0, #4
   28430:	e24dd008 	sub	sp, sp, #8
   28434:	e1a0100d 	mov	r1, sp
   28438:	eb0000f3 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   2843c:	e28d1004 	add	r1, sp, #4
   28440:	e284000c 	add	r0, r4, #12
   28444:	eb0000f0 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28448:	e2840024 	add	r0, r4, #36	@ 0x24
   2844c:	e89d000a 	ldm	sp, {r1, r3}
   28450:	e1e03003 	mvn	r3, r3
   28454:	e1831001 	orr	r1, r3, r1
   28458:	eb0000ab 	bl	2870c <CIPAddress::Set(unsigned int)>
   2845c:	e28dd008 	add	sp, sp, #8
   28460:	e8bd8010 	pop	{r4, pc}

00028464 <CIPAddress::CIPAddress()>:
   28464:	e3a02000 	mov	r2, #0
   28468:	e5c02000 	strb	r2, [r0]
   2846c:	e12fff1e 	bx	lr

00028470 <CIPAddress::CIPAddress(unsigned int)>:
   28470:	e3a02001 	mov	r2, #1
   28474:	e5801004 	str	r1, [r0, #4]
   28478:	e5c02000 	strb	r2, [r0]
   2847c:	e12fff1e 	bx	lr

00028480 <CIPAddress::CIPAddress(unsigned char const*)>:
   28480:	e3510000 	cmp	r1, #0
   28484:	e92d4010 	push	{r4, lr}
   28488:	0a000007 	beq	284ac <CIPAddress::CIPAddress(unsigned char const*)+0x2c>
   2848c:	e1a04000 	mov	r4, r0
   28490:	e3a02004 	mov	r2, #4
   28494:	e0800002 	add	r0, r0, r2
   28498:	eb003519 	bl	35904 <memcpy>
   2849c:	e3a03001 	mov	r3, #1
   284a0:	e1a00004 	mov	r0, r4
   284a4:	e5c43000 	strb	r3, [r4]
   284a8:	e8bd8010 	pop	{r4, pc}
   284ac:	e30d1628 	movw	r1, #54824	@ 0xd628
   284b0:	e3401003 	movt	r1, #3
   284b4:	e30d0638 	movw	r0, #54840	@ 0xd638
   284b8:	e3400003 	movt	r0, #3
   284bc:	e3a02075 	mov	r2, #117	@ 0x75
   284c0:	eb000e45 	bl	2bddc <assertion_failed>

000284c4 <CIPAddress::CIPAddress(CIPAddress const&)>:
   284c4:	e5d12000 	ldrb	r2, [r1]
   284c8:	e3520000 	cmp	r2, #0
   284cc:	0a000004 	beq	284e4 <CIPAddress::CIPAddress(CIPAddress const&)+0x20>
   284d0:	e5911004 	ldr	r1, [r1, #4]
   284d4:	e3a02001 	mov	r2, #1
   284d8:	e5801004 	str	r1, [r0, #4]
   284dc:	e5c02000 	strb	r2, [r0]
   284e0:	e12fff1e 	bx	lr
   284e4:	e30d1628 	movw	r1, #54824	@ 0xd628
   284e8:	e3401003 	movt	r1, #3
   284ec:	e30d0648 	movw	r0, #54856	@ 0xd648
   284f0:	e3400003 	movt	r0, #3
   284f4:	e3a0202e 	mov	r2, #46	@ 0x2e
   284f8:	e92d4010 	push	{r4, lr}
   284fc:	eb000e36 	bl	2bddc <assertion_failed>

00028500 <CIPAddress::~CIPAddress()>:
   28500:	e12fff1e 	bx	lr

00028504 <CIPAddress::operator==(CIPAddress const&) const>:
   28504:	e5d03000 	ldrb	r3, [r0]
   28508:	e92d4010 	push	{r4, lr}
   2850c:	e3530000 	cmp	r3, #0
   28510:	0a000008 	beq	28538 <CIPAddress::operator==(CIPAddress const&) const+0x34>
   28514:	e5d13000 	ldrb	r3, [r1]
   28518:	e3530000 	cmp	r3, #0
   2851c:	0a00000b 	beq	28550 <CIPAddress::operator==(CIPAddress const&) const+0x4c>
   28520:	e5900004 	ldr	r0, [r0, #4]
   28524:	e5913004 	ldr	r3, [r1, #4]
   28528:	e0400003 	sub	r0, r0, r3
   2852c:	e16f0f10 	clz	r0, r0
   28530:	e1a002a0 	lsr	r0, r0, #5
   28534:	e8bd8010 	pop	{r4, pc}
   28538:	e30d1628 	movw	r1, #54824	@ 0xd628
   2853c:	e3401003 	movt	r1, #3
   28540:	e30c0164 	movw	r0, #49508	@ 0xc164
   28544:	e3400003 	movt	r0, #3
   28548:	e3a0203e 	mov	r2, #62	@ 0x3e
   2854c:	eb000e22 	bl	2bddc <assertion_failed>
   28550:	e30d1628 	movw	r1, #54824	@ 0xd628
   28554:	e3401003 	movt	r1, #3
   28558:	e30d065c 	movw	r0, #54876	@ 0xd65c
   2855c:	e3400003 	movt	r0, #3
   28560:	e3a0203f 	mov	r2, #63	@ 0x3f
   28564:	eb000e1c 	bl	2bddc <assertion_failed>

00028568 <CIPAddress::operator!=(CIPAddress const&) const>:
   28568:	e5d03000 	ldrb	r3, [r0]
   2856c:	e92d4010 	push	{r4, lr}
   28570:	e3530000 	cmp	r3, #0
   28574:	0a000007 	beq	28598 <CIPAddress::operator!=(CIPAddress const&) const+0x30>
   28578:	e5d13000 	ldrb	r3, [r1]
   2857c:	e3530000 	cmp	r3, #0
   28580:	0a00000a 	beq	285b0 <CIPAddress::operator!=(CIPAddress const&) const+0x48>
   28584:	e5900004 	ldr	r0, [r0, #4]
   28588:	e5913004 	ldr	r3, [r1, #4]
   2858c:	e0500003 	subs	r0, r0, r3
   28590:	13a00001 	movne	r0, #1
   28594:	e8bd8010 	pop	{r4, pc}
   28598:	e30d1628 	movw	r1, #54824	@ 0xd628
   2859c:	e3401003 	movt	r1, #3
   285a0:	e30c0164 	movw	r0, #49508	@ 0xc164
   285a4:	e3400003 	movt	r0, #3
   285a8:	e3a02045 	mov	r2, #69	@ 0x45
   285ac:	eb000e0a 	bl	2bddc <assertion_failed>
   285b0:	e30d1628 	movw	r1, #54824	@ 0xd628
   285b4:	e3401003 	movt	r1, #3
   285b8:	e30d065c 	movw	r0, #54876	@ 0xd65c
   285bc:	e3400003 	movt	r0, #3
   285c0:	e3a02046 	mov	r2, #70	@ 0x46
   285c4:	eb000e04 	bl	2bddc <assertion_failed>

000285c8 <CIPAddress::operator==(unsigned char const*) const>:
   285c8:	e5d02000 	ldrb	r2, [r0]
   285cc:	e92d4010 	push	{r4, lr}
   285d0:	e3520000 	cmp	r2, #0
   285d4:	0a000007 	beq	285f8 <CIPAddress::operator==(unsigned char const*) const+0x30>
   285d8:	e3510000 	cmp	r1, #0
   285dc:	0a00000b 	beq	28610 <CIPAddress::operator==(unsigned char const*) const+0x48>
   285e0:	e3a02004 	mov	r2, #4
   285e4:	e0800002 	add	r0, r0, r2
   285e8:	eb0032ad 	bl	350a4 <memcmp>
   285ec:	e16f0f10 	clz	r0, r0
   285f0:	e1a002a0 	lsr	r0, r0, #5
   285f4:	e8bd8010 	pop	{r4, pc}
   285f8:	e30d1628 	movw	r1, #54824	@ 0xd628
   285fc:	e3401003 	movt	r1, #3
   28600:	e30c0164 	movw	r0, #49508	@ 0xc164
   28604:	e3400003 	movt	r0, #3
   28608:	e3a0204c 	mov	r2, #76	@ 0x4c
   2860c:	eb000df2 	bl	2bddc <assertion_failed>
   28610:	e30d1628 	movw	r1, #54824	@ 0xd628
   28614:	e3401003 	movt	r1, #3
   28618:	e30d0670 	movw	r0, #54896	@ 0xd670
   2861c:	e3400003 	movt	r0, #3
   28620:	e3a0204d 	mov	r2, #77	@ 0x4d
   28624:	eb000dec 	bl	2bddc <assertion_failed>

00028628 <CIPAddress::operator!=(unsigned char const*) const>:
   28628:	e5d02000 	ldrb	r2, [r0]
   2862c:	e92d4010 	push	{r4, lr}
   28630:	e3520000 	cmp	r2, #0
   28634:	0a000007 	beq	28658 <CIPAddress::operator!=(unsigned char const*) const+0x30>
   28638:	e3510000 	cmp	r1, #0
   2863c:	0a00000b 	beq	28670 <CIPAddress::operator!=(unsigned char const*) const+0x48>
   28640:	e3a02004 	mov	r2, #4
   28644:	e0800002 	add	r0, r0, r2
   28648:	eb003295 	bl	350a4 <memcmp>
   2864c:	e2500000 	subs	r0, r0, #0
   28650:	13a00001 	movne	r0, #1
   28654:	e8bd8010 	pop	{r4, pc}
   28658:	e30d1628 	movw	r1, #54824	@ 0xd628
   2865c:	e3401003 	movt	r1, #3
   28660:	e30c0164 	movw	r0, #49508	@ 0xc164
   28664:	e3400003 	movt	r0, #3
   28668:	e3a0204c 	mov	r2, #76	@ 0x4c
   2866c:	eb000dda 	bl	2bddc <assertion_failed>
   28670:	e30d1628 	movw	r1, #54824	@ 0xd628
   28674:	e3401003 	movt	r1, #3
   28678:	e30d0670 	movw	r0, #54896	@ 0xd670
   2867c:	e3400003 	movt	r0, #3
   28680:	e3a0204d 	mov	r2, #77	@ 0x4d
   28684:	eb000dd4 	bl	2bddc <assertion_failed>

00028688 <CIPAddress::operator==(unsigned int) const>:
   28688:	e5d03000 	ldrb	r3, [r0]
   2868c:	e3530000 	cmp	r3, #0
   28690:	0a000004 	beq	286a8 <CIPAddress::operator==(unsigned int) const+0x20>
   28694:	e5900004 	ldr	r0, [r0, #4]
   28698:	e0400001 	sub	r0, r0, r1
   2869c:	e16f0f10 	clz	r0, r0
   286a0:	e1a002a0 	lsr	r0, r0, #5
   286a4:	e12fff1e 	bx	lr
   286a8:	e30d1628 	movw	r1, #54824	@ 0xd628
   286ac:	e3401003 	movt	r1, #3
   286b0:	e30c0164 	movw	r0, #49508	@ 0xc164
   286b4:	e3400003 	movt	r0, #3
   286b8:	e3a02058 	mov	r2, #88	@ 0x58
   286bc:	e92d4010 	push	{r4, lr}
   286c0:	eb000dc5 	bl	2bddc <assertion_failed>

000286c4 <CIPAddress::operator!=(unsigned int) const>:
   286c4:	e5d03000 	ldrb	r3, [r0]
   286c8:	e3530000 	cmp	r3, #0
   286cc:	0a000003 	beq	286e0 <CIPAddress::operator!=(unsigned int) const+0x1c>
   286d0:	e5900004 	ldr	r0, [r0, #4]
   286d4:	e0500001 	subs	r0, r0, r1
   286d8:	13a00001 	movne	r0, #1
   286dc:	e12fff1e 	bx	lr
   286e0:	e30d1628 	movw	r1, #54824	@ 0xd628
   286e4:	e3401003 	movt	r1, #3
   286e8:	e30c0164 	movw	r0, #49508	@ 0xc164
   286ec:	e3400003 	movt	r0, #3
   286f0:	e3a0205e 	mov	r2, #94	@ 0x5e
   286f4:	e92d4010 	push	{r4, lr}
   286f8:	eb000db7 	bl	2bddc <assertion_failed>

000286fc <CIPAddress::operator=(unsigned int)>:
   286fc:	e3a02001 	mov	r2, #1
   28700:	e5801004 	str	r1, [r0, #4]
   28704:	e5c02000 	strb	r2, [r0]
   28708:	e12fff1e 	bx	lr

0002870c <CIPAddress::Set(unsigned int)>:
   2870c:	e3a03001 	mov	r3, #1
   28710:	e5801004 	str	r1, [r0, #4]
   28714:	e5c03000 	strb	r3, [r0]
   28718:	e12fff1e 	bx	lr

0002871c <CIPAddress::Set(unsigned char const*)>:
   2871c:	e3510000 	cmp	r1, #0
   28720:	e92d4010 	push	{r4, lr}
   28724:	0a000006 	beq	28744 <CIPAddress::Set(unsigned char const*)+0x28>
   28728:	e1a04000 	mov	r4, r0
   2872c:	e3a02004 	mov	r2, #4
   28730:	e0800002 	add	r0, r0, r2
   28734:	eb003472 	bl	35904 <memcpy>
   28738:	e3a03001 	mov	r3, #1
   2873c:	e5c43000 	strb	r3, [r4]
   28740:	e8bd8010 	pop	{r4, pc}
   28744:	e30d1628 	movw	r1, #54824	@ 0xd628
   28748:	e3401003 	movt	r1, #3
   2874c:	e30d0638 	movw	r0, #54840	@ 0xd638
   28750:	e3400003 	movt	r0, #3
   28754:	e3a02075 	mov	r2, #117	@ 0x75
   28758:	eb000d9f 	bl	2bddc <assertion_failed>

0002875c <CIPAddress::Set(CIPAddress const&)>:
   2875c:	e5d13000 	ldrb	r3, [r1]
   28760:	e3530000 	cmp	r3, #0
   28764:	0a000004 	beq	2877c <CIPAddress::Set(CIPAddress const&)+0x20>
   28768:	e5912004 	ldr	r2, [r1, #4]
   2876c:	e3a03001 	mov	r3, #1
   28770:	e5802004 	str	r2, [r0, #4]
   28774:	e5c03000 	strb	r3, [r0]
   28778:	e12fff1e 	bx	lr
   2877c:	e30d1628 	movw	r1, #54824	@ 0xd628
   28780:	e3401003 	movt	r1, #3
   28784:	e30d0648 	movw	r0, #54856	@ 0xd648
   28788:	e3400003 	movt	r0, #3
   2878c:	e3a0207e 	mov	r2, #126	@ 0x7e
   28790:	e92d4010 	push	{r4, lr}
   28794:	eb000d90 	bl	2bddc <assertion_failed>

00028798 <CIPAddress::SetBroadcast()>:
   28798:	e3a02001 	mov	r2, #1
   2879c:	e3e03000 	mvn	r3, #0
   287a0:	e5c02000 	strb	r2, [r0]
   287a4:	e5803004 	str	r3, [r0, #4]
   287a8:	e12fff1e 	bx	lr

000287ac <CIPAddress::operator unsigned int() const>:
   287ac:	e5d03000 	ldrb	r3, [r0]
   287b0:	e3530000 	cmp	r3, #0
   287b4:	0a000001 	beq	287c0 <CIPAddress::operator unsigned int() const+0x14>
   287b8:	e5900004 	ldr	r0, [r0, #4]
   287bc:	e12fff1e 	bx	lr
   287c0:	e30d1628 	movw	r1, #54824	@ 0xd628
   287c4:	e3401003 	movt	r1, #3
   287c8:	e30c0164 	movw	r0, #49508	@ 0xc164
   287cc:	e3400003 	movt	r0, #3
   287d0:	e3a0208f 	mov	r2, #143	@ 0x8f
   287d4:	e92d4010 	push	{r4, lr}
   287d8:	eb000d7f 	bl	2bddc <assertion_failed>

000287dc <CIPAddress::Get() const>:
   287dc:	e5d03000 	ldrb	r3, [r0]
   287e0:	e3530000 	cmp	r3, #0
   287e4:	0a000001 	beq	287f0 <CIPAddress::Get() const+0x14>
   287e8:	e2800004 	add	r0, r0, #4
   287ec:	e12fff1e 	bx	lr
   287f0:	e30d1628 	movw	r1, #54824	@ 0xd628
   287f4:	e3401003 	movt	r1, #3
   287f8:	e30c0164 	movw	r0, #49508	@ 0xc164
   287fc:	e3400003 	movt	r0, #3
   28800:	e3a02095 	mov	r2, #149	@ 0x95
   28804:	e92d4010 	push	{r4, lr}
   28808:	eb000d73 	bl	2bddc <assertion_failed>

0002880c <CIPAddress::CopyTo(unsigned char*) const>:
   2880c:	e5d02000 	ldrb	r2, [r0]
   28810:	e1a03000 	mov	r3, r0
   28814:	e92d4010 	push	{r4, lr}
   28818:	e3520000 	cmp	r2, #0
   2881c:	0a000006 	beq	2883c <CIPAddress::CopyTo(unsigned char*) const+0x30>
   28820:	e1a00001 	mov	r0, r1
   28824:	e3510000 	cmp	r1, #0
   28828:	0a000009 	beq	28854 <CIPAddress::CopyTo(unsigned char*) const+0x48>
   2882c:	e3a02004 	mov	r2, #4
   28830:	e8bd4010 	pop	{r4, lr}
   28834:	e0831002 	add	r1, r3, r2
   28838:	ea003431 	b	35904 <memcpy>
   2883c:	e30d1628 	movw	r1, #54824	@ 0xd628
   28840:	e3401003 	movt	r1, #3
   28844:	e30c0164 	movw	r0, #49508	@ 0xc164
   28848:	e3400003 	movt	r0, #3
   2884c:	e3a0209b 	mov	r2, #155	@ 0x9b
   28850:	eb000d61 	bl	2bddc <assertion_failed>
   28854:	e30d1628 	movw	r1, #54824	@ 0xd628
   28858:	e3401003 	movt	r1, #3
   2885c:	e30b0400 	movw	r0, #46080	@ 0xb400
   28860:	e3400003 	movt	r0, #3
   28864:	e3a0209c 	mov	r2, #156	@ 0x9c
   28868:	eb000d5b 	bl	2bddc <assertion_failed>

0002886c <CIPAddress::IsNull() const>:
   2886c:	e5d03000 	ldrb	r3, [r0]
   28870:	e3530000 	cmp	r3, #0
   28874:	0a000003 	beq	28888 <CIPAddress::IsNull() const+0x1c>
   28878:	e5900004 	ldr	r0, [r0, #4]
   2887c:	e16f0f10 	clz	r0, r0
   28880:	e1a002a0 	lsr	r0, r0, #5
   28884:	e12fff1e 	bx	lr
   28888:	e30d1628 	movw	r1, #54824	@ 0xd628
   2888c:	e3401003 	movt	r1, #3
   28890:	e30c0164 	movw	r0, #49508	@ 0xc164
   28894:	e3400003 	movt	r0, #3
   28898:	e3a020a2 	mov	r2, #162	@ 0xa2
   2889c:	e92d4010 	push	{r4, lr}
   288a0:	eb000d4d 	bl	2bddc <assertion_failed>

000288a4 <CIPAddress::IsBroadcast() const>:
   288a4:	e5d03000 	ldrb	r3, [r0]
   288a8:	e3530000 	cmp	r3, #0
   288ac:	0a000004 	beq	288c4 <CIPAddress::IsBroadcast() const+0x20>
   288b0:	e5900004 	ldr	r0, [r0, #4]
   288b4:	e3700001 	cmn	r0, #1
   288b8:	13a00000 	movne	r0, #0
   288bc:	03a00001 	moveq	r0, #1
   288c0:	e12fff1e 	bx	lr
   288c4:	e30d1628 	movw	r1, #54824	@ 0xd628
   288c8:	e3401003 	movt	r1, #3
   288cc:	e30c0164 	movw	r0, #49508	@ 0xc164
   288d0:	e3400003 	movt	r0, #3
   288d4:	e3a020a8 	mov	r2, #168	@ 0xa8
   288d8:	e92d4010 	push	{r4, lr}
   288dc:	eb000d3e 	bl	2bddc <assertion_failed>

000288e0 <CIPAddress::GetSize() const>:
   288e0:	e3a00004 	mov	r0, #4
   288e4:	e12fff1e 	bx	lr

000288e8 <CIPAddress::Format(CString*) const>:
   288e8:	e5d02000 	ldrb	r2, [r0]
   288ec:	e1a03000 	mov	r3, r0
   288f0:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   288f4:	e3520000 	cmp	r2, #0
   288f8:	e24dd00c 	sub	sp, sp, #12
   288fc:	0a00000d 	beq	28938 <CIPAddress::Format(CString*) const+0x50>
   28900:	e1a00001 	mov	r0, r1
   28904:	e3510000 	cmp	r1, #0
   28908:	0a000010 	beq	28950 <CIPAddress::Format(CString*) const+0x68>
   2890c:	e5932004 	ldr	r2, [r3, #4]
   28910:	e30d1690 	movw	r1, #54928	@ 0xd690
   28914:	e3401003 	movt	r1, #3
   28918:	e1a0cc22 	lsr	ip, r2, #24
   2891c:	e7e73852 	ubfx	r3, r2, #16, #8
   28920:	e88d1008 	stm	sp, {r3, ip}
   28924:	e7e73452 	ubfx	r3, r2, #8, #8
   28928:	e6ef2072 	uxtb	r2, r2
   2892c:	eb002dfd 	bl	34128 <CString::Format(char const*, ...)>
   28930:	e28dd00c 	add	sp, sp, #12
   28934:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   28938:	e30d1628 	movw	r1, #54824	@ 0xd628
   2893c:	e3401003 	movt	r1, #3
   28940:	e30c0164 	movw	r0, #49508	@ 0xc164
   28944:	e3400003 	movt	r0, #3
   28948:	e3a020b3 	mov	r2, #179	@ 0xb3
   2894c:	eb000d22 	bl	2bddc <assertion_failed>
   28950:	e30d1628 	movw	r1, #54824	@ 0xd628
   28954:	e3401003 	movt	r1, #3
   28958:	e30d0680 	movw	r0, #54912	@ 0xd680
   2895c:	e3400003 	movt	r0, #3
   28960:	e3a020b4 	mov	r2, #180	@ 0xb4
   28964:	eb000d1c 	bl	2bddc <assertion_failed>

00028968 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const>:
   28968:	e92d4030 	push	{r4, r5, lr}
   2896c:	e1a05000 	mov	r5, r0
   28970:	e5d10000 	ldrb	r0, [r1]
   28974:	e24dd00c 	sub	sp, sp, #12
   28978:	e1a04001 	mov	r4, r1
   2897c:	e3500000 	cmp	r0, #0
   28980:	0a000014 	beq	289d8 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x70>
   28984:	e5913004 	ldr	r3, [r1, #4]
   28988:	e3730001 	cmn	r3, #1
   2898c:	0a00000f 	beq	289d0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x68>
   28990:	e1a01002 	mov	r1, r2
   28994:	e3520000 	cmp	r2, #0
   28998:	0a000014 	beq	289f0 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0x88>
   2899c:	e3a02004 	mov	r2, #4
   289a0:	e08d0002 	add	r0, sp, r2
   289a4:	eb0033d6 	bl	35904 <memcpy>
   289a8:	e5d53000 	ldrb	r3, [r5]
   289ac:	e3530000 	cmp	r3, #0
   289b0:	0a000014 	beq	28a08 <CIPAddress::OnSameNetwork(CIPAddress const&, unsigned char const*) const+0xa0>
   289b4:	e5953004 	ldr	r3, [r5, #4]
   289b8:	e5941004 	ldr	r1, [r4, #4]
   289bc:	e59d2004 	ldr	r2, [sp, #4]
   289c0:	e0233001 	eor	r3, r3, r1
   289c4:	e1130002 	tst	r3, r2
   289c8:	03a00001 	moveq	r0, #1
   289cc:	13a00000 	movne	r0, #0
   289d0:	e28dd00c 	add	sp, sp, #12
   289d4:	e8bd8030 	pop	{r4, r5, pc}
   289d8:	e30d1628 	movw	r1, #54824	@ 0xd628
   289dc:	e3401003 	movt	r1, #3
   289e0:	e30c0164 	movw	r0, #49508	@ 0xc164
   289e4:	e3400003 	movt	r0, #3
   289e8:	e3a020a8 	mov	r2, #168	@ 0xa8
   289ec:	eb000cfa 	bl	2bddc <assertion_failed>
   289f0:	e30d1628 	movw	r1, #54824	@ 0xd628
   289f4:	e3401003 	movt	r1, #3
   289f8:	e30d069c 	movw	r0, #54940	@ 0xd69c
   289fc:	e3400003 	movt	r0, #3
   28a00:	e3a020c1 	mov	r2, #193	@ 0xc1
   28a04:	eb000cf4 	bl	2bddc <assertion_failed>
   28a08:	e30d1628 	movw	r1, #54824	@ 0xd628
   28a0c:	e3401003 	movt	r1, #3
   28a10:	e30c0164 	movw	r0, #49508	@ 0xc164
   28a14:	e3400003 	movt	r0, #3
   28a18:	e3a020c5 	mov	r2, #197	@ 0xc5
   28a1c:	eb000cee 	bl	2bddc <assertion_failed>

00028a20 <CNetQueue::CNetQueue()>:
   28a20:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   28a24:	e3a02000 	mov	r2, #0
   28a28:	e5802008 	str	r2, [r0, #8]
   28a2c:	f440078f 	vst1.32	{d16}, [r0]
   28a30:	e12fff1e 	bx	lr

00028a34 <CNetQueue::IsEmpty() const>:
   28a34:	e5900000 	ldr	r0, [r0]
   28a38:	e16f0f10 	clz	r0, r0
   28a3c:	e1a002a0 	lsr	r0, r0, #5
   28a40:	e12fff1e 	bx	lr

00028a44 <CNetQueue::Flush()>:
   28a44:	e92d4070 	push	{r4, r5, r6, lr}
   28a48:	e5904000 	ldr	r4, [r0]
   28a4c:	e3540000 	cmp	r4, #0
   28a50:	08bd8070 	popeq	{r4, r5, r6, pc}
   28a54:	e1a05000 	mov	r5, r0
   28a58:	e3a06000 	mov	r6, #0
   28a5c:	ea00000f 	b	28aa0 <CNetQueue::Flush()+0x5c>
   28a60:	e3540000 	cmp	r4, #0
   28a64:	0a000014 	beq	28abc <CNetQueue::Flush()+0x78>
   28a68:	e5943004 	ldr	r3, [r4, #4]
   28a6c:	e5853000 	str	r3, [r5]
   28a70:	e3530000 	cmp	r3, #0
   28a74:	15836000 	strne	r6, [r3]
   28a78:	0a000017 	beq	28adc <CNetQueue::Flush()+0x98>
   28a7c:	e5953008 	ldr	r3, [r5, #8]
   28a80:	e3530000 	cmp	r3, #0
   28a84:	1a000012 	bne	28ad4 <CNetQueue::Flush()+0x90>
   28a88:	e1a00004 	mov	r0, r4
   28a8c:	e3a01e65 	mov	r1, #1616	@ 0x650
   28a90:	eb0035bb 	bl	36184 <operator delete(void*, unsigned int)>
   28a94:	e5954000 	ldr	r4, [r5]
   28a98:	e3540000 	cmp	r4, #0
   28a9c:	08bd8070 	popeq	{r4, r5, r6, pc}
   28aa0:	e5950008 	ldr	r0, [r5, #8]
   28aa4:	e3500000 	cmp	r0, #0
   28aa8:	0affffec 	beq	28a60 <CNetQueue::Flush()+0x1c>
   28aac:	eb003bb3 	bl	37980 <EnterCritical>
   28ab0:	e5954000 	ldr	r4, [r5]
   28ab4:	e3540000 	cmp	r4, #0
   28ab8:	1affffea 	bne	28a68 <CNetQueue::Flush()+0x24>
   28abc:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28ac0:	e3401003 	movt	r1, #3
   28ac4:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
   28ac8:	e3400003 	movt	r0, #3
   28acc:	e3a0203a 	mov	r2, #58	@ 0x3a
   28ad0:	eb000cc1 	bl	2bddc <assertion_failed>
   28ad4:	eb003bd4 	bl	37a2c <LeaveCritical>
   28ad8:	eaffffea 	b	28a88 <CNetQueue::Flush()+0x44>
   28adc:	e5952004 	ldr	r2, [r5, #4]
   28ae0:	e1520004 	cmp	r2, r4
   28ae4:	05853004 	streq	r3, [r5, #4]
   28ae8:	0affffe3 	beq	28a7c <CNetQueue::Flush()+0x38>
   28aec:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28af0:	e3401003 	movt	r1, #3
   28af4:	e30d06bc 	movw	r0, #54972	@ 0xd6bc
   28af8:	e3400003 	movt	r0, #3
   28afc:	e3a02043 	mov	r2, #67	@ 0x43
   28b00:	eb000cb5 	bl	2bddc <assertion_failed>

00028b04 <CNetQueue::~CNetQueue()>:
   28b04:	e92d4010 	push	{r4, lr}
   28b08:	e1a04000 	mov	r4, r0
   28b0c:	ebffffcc 	bl	28a44 <CNetQueue::Flush()>
   28b10:	e1a00004 	mov	r0, r4
   28b14:	e8bd8010 	pop	{r4, pc}

00028b18 <CNetQueue::Enqueue(void const*, unsigned int, void*)>:
   28b18:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28b1c:	e1a06002 	mov	r6, r2
   28b20:	e1a05000 	mov	r5, r0
   28b24:	e3a00e65 	mov	r0, #1616	@ 0x650
   28b28:	e1a07001 	mov	r7, r1
   28b2c:	e1a08003 	mov	r8, r3
   28b30:	eb00357b 	bl	36124 <operator new(unsigned int)>
   28b34:	e3560000 	cmp	r6, #0
   28b38:	0a000028 	beq	28be0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xc8>
   28b3c:	e3560d19 	cmp	r6, #1600	@ 0x640
   28b40:	8a00002c 	bhi	28bf8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xe0>
   28b44:	e1a04000 	mov	r4, r0
   28b48:	e3570000 	cmp	r7, #0
   28b4c:	e5806008 	str	r6, [r0, #8]
   28b50:	0a00002e 	beq	28c10 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xf8>
   28b54:	e1a02006 	mov	r2, r6
   28b58:	e1a01007 	mov	r1, r7
   28b5c:	e280000c 	add	r0, r0, #12
   28b60:	eb003367 	bl	35904 <memcpy>
   28b64:	e5950008 	ldr	r0, [r5, #8]
   28b68:	e584864c 	str	r8, [r4, #1612]	@ 0x64c
   28b6c:	e3500000 	cmp	r0, #0
   28b70:	1a000012 	bne	28bc0 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xa8>
   28b74:	e895000a 	ldm	r5, {r1, r3}
   28b78:	e3a02000 	mov	r2, #0
   28b7c:	e5843000 	str	r3, [r4]
   28b80:	e1510002 	cmp	r1, r2
   28b84:	e5842004 	str	r2, [r4, #4]
   28b88:	05854000 	streq	r4, [r5]
   28b8c:	0a000005 	beq	28ba8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x90>
   28b90:	e3530000 	cmp	r3, #0
   28b94:	0a00000b 	beq	28bc8 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0xb0>
   28b98:	e5932004 	ldr	r2, [r3, #4]
   28b9c:	e3520000 	cmp	r2, #0
   28ba0:	05834004 	streq	r4, [r3, #4]
   28ba4:	1a00001f 	bne	28c28 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x110>
   28ba8:	e5953008 	ldr	r3, [r5, #8]
   28bac:	e5854004 	str	r4, [r5, #4]
   28bb0:	e3530000 	cmp	r3, #0
   28bb4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   28bb8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   28bbc:	ea003b9a 	b	37a2c <LeaveCritical>
   28bc0:	eb003b6e 	bl	37980 <EnterCritical>
   28bc4:	eaffffea 	b	28b74 <CNetQueue::Enqueue(void const*, unsigned int, void*)+0x5c>
   28bc8:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28bcc:	e3401003 	movt	r1, #3
   28bd0:	e30d06d0 	movw	r0, #54992	@ 0xd6d0
   28bd4:	e3400003 	movt	r0, #3
   28bd8:	e3a02066 	mov	r2, #102	@ 0x66
   28bdc:	eb000c7e 	bl	2bddc <assertion_failed>
   28be0:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28be4:	e3401003 	movt	r1, #3
   28be8:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   28bec:	e3400003 	movt	r0, #3
   28bf0:	e3a02052 	mov	r2, #82	@ 0x52
   28bf4:	eb000c78 	bl	2bddc <assertion_failed>
   28bf8:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28bfc:	e3401003 	movt	r1, #3
   28c00:	e30c054c 	movw	r0, #50508	@ 0xc54c
   28c04:	e3400003 	movt	r0, #3
   28c08:	e3a02053 	mov	r2, #83	@ 0x53
   28c0c:	eb000c72 	bl	2bddc <assertion_failed>
   28c10:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28c14:	e3401003 	movt	r1, #3
   28c18:	e30b0400 	movw	r0, #46080	@ 0xb400
   28c1c:	e3400003 	movt	r0, #3
   28c20:	e3a02056 	mov	r2, #86	@ 0x56
   28c24:	eb000c6c 	bl	2bddc <assertion_failed>
   28c28:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28c2c:	e3401003 	movt	r1, #3
   28c30:	e30d06e0 	movw	r0, #55008	@ 0xd6e0
   28c34:	e3400003 	movt	r0, #3
   28c38:	e3a02067 	mov	r2, #103	@ 0x67
   28c3c:	eb000c66 	bl	2bddc <assertion_failed>

00028c40 <CNetQueue::Dequeue(void*, void**)>:
   28c40:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28c44:	e5905000 	ldr	r5, [r0]
   28c48:	e3550000 	cmp	r5, #0
   28c4c:	0a000029 	beq	28cf8 <CNetQueue::Dequeue(void*, void**)+0xb8>
   28c50:	e1a04000 	mov	r4, r0
   28c54:	e5900008 	ldr	r0, [r0, #8]
   28c58:	e1a07001 	mov	r7, r1
   28c5c:	e1a06002 	mov	r6, r2
   28c60:	e3500000 	cmp	r0, #0
   28c64:	1a000019 	bne	28cd0 <CNetQueue::Dequeue(void*, void**)+0x90>
   28c68:	e5953004 	ldr	r3, [r5, #4]
   28c6c:	e5843000 	str	r3, [r4]
   28c70:	e3530000 	cmp	r3, #0
   28c74:	0a000024 	beq	28d0c <CNetQueue::Dequeue(void*, void**)+0xcc>
   28c78:	e3a02000 	mov	r2, #0
   28c7c:	e5832000 	str	r2, [r3]
   28c80:	e5943008 	ldr	r3, [r4, #8]
   28c84:	e3530000 	cmp	r3, #0
   28c88:	1a00001d 	bne	28d04 <CNetQueue::Dequeue(void*, void**)+0xc4>
   28c8c:	e5954008 	ldr	r4, [r5, #8]
   28c90:	e3540000 	cmp	r4, #0
   28c94:	0a000026 	beq	28d34 <CNetQueue::Dequeue(void*, void**)+0xf4>
   28c98:	e3540d19 	cmp	r4, #1600	@ 0x640
   28c9c:	8a00002a 	bhi	28d4c <CNetQueue::Dequeue(void*, void**)+0x10c>
   28ca0:	e1a02004 	mov	r2, r4
   28ca4:	e285100c 	add	r1, r5, #12
   28ca8:	e1a00007 	mov	r0, r7
   28cac:	eb003314 	bl	35904 <memcpy>
   28cb0:	e3560000 	cmp	r6, #0
   28cb4:	e1a00005 	mov	r0, r5
   28cb8:	e3a01e65 	mov	r1, #1616	@ 0x650
   28cbc:	1595364c 	ldrne	r3, [r5, #1612]	@ 0x64c
   28cc0:	15863000 	strne	r3, [r6]
   28cc4:	eb00352e 	bl	36184 <operator delete(void*, unsigned int)>
   28cc8:	e1a00004 	mov	r0, r4
   28ccc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28cd0:	eb003b2a 	bl	37980 <EnterCritical>
   28cd4:	e5945000 	ldr	r5, [r4]
   28cd8:	e3550000 	cmp	r5, #0
   28cdc:	1affffe1 	bne	28c68 <CNetQueue::Dequeue(void*, void**)+0x28>
   28ce0:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28ce4:	e3401003 	movt	r1, #3
   28ce8:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
   28cec:	e3400003 	movt	r0, #3
   28cf0:	e3a02078 	mov	r2, #120	@ 0x78
   28cf4:	eb000c38 	bl	2bddc <assertion_failed>
   28cf8:	e1a04005 	mov	r4, r5
   28cfc:	e1a00004 	mov	r0, r4
   28d00:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   28d04:	eb003b48 	bl	37a2c <LeaveCritical>
   28d08:	eaffffdf 	b	28c8c <CNetQueue::Dequeue(void*, void**)+0x4c>
   28d0c:	e5942004 	ldr	r2, [r4, #4]
   28d10:	e1520005 	cmp	r2, r5
   28d14:	05843004 	streq	r3, [r4, #4]
   28d18:	0affffd8 	beq	28c80 <CNetQueue::Dequeue(void*, void**)+0x40>
   28d1c:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28d20:	e3401003 	movt	r1, #3
   28d24:	e30d06bc 	movw	r0, #54972	@ 0xd6bc
   28d28:	e3400003 	movt	r0, #3
   28d2c:	e3a02081 	mov	r2, #129	@ 0x81
   28d30:	eb000c29 	bl	2bddc <assertion_failed>
   28d34:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28d38:	e3401003 	movt	r1, #3
   28d3c:	e30d06f4 	movw	r0, #55028	@ 0xd6f4
   28d40:	e3400003 	movt	r0, #3
   28d44:	e3a02088 	mov	r2, #136	@ 0x88
   28d48:	eb000c23 	bl	2bddc <assertion_failed>
   28d4c:	e30d16ac 	movw	r1, #54956	@ 0xd6ac
   28d50:	e3401003 	movt	r1, #3
   28d54:	e30d0700 	movw	r0, #55040	@ 0xd700
   28d58:	e3400003 	movt	r0, #3
   28d5c:	e3a02089 	mov	r2, #137	@ 0x89
   28d60:	eb000c1d 	bl	2bddc <assertion_failed>

00028d64 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, int)>:
   28d64:	e92d4070 	push	{r4, r5, r6, lr}
   28d68:	e1a04000 	mov	r4, r0
   28d6c:	e3a06000 	mov	r6, #0
   28d70:	e1a00001 	mov	r0, r1
   28d74:	e1a01004 	mov	r1, r4
   28d78:	e5c4600c 	strb	r6, [r4, #12]
   28d7c:	e1a05002 	mov	r5, r2
   28d80:	ebfffea1 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28d84:	e1a00004 	mov	r0, r4
   28d88:	e5c46008 	strb	r6, [r4, #8]
   28d8c:	e5c45009 	strb	r5, [r4, #9]
   28d90:	e8bd8070 	pop	{r4, r5, r6, pc}

00028d94 <CChecksumCalculator::CChecksumCalculator(CIPAddress const&, CIPAddress const&, int)>:
   28d94:	e92d4070 	push	{r4, r5, r6, lr}
   28d98:	e1a04000 	mov	r4, r0
   28d9c:	e3a0c001 	mov	ip, #1
   28da0:	e1a06002 	mov	r6, r2
   28da4:	e1a00001 	mov	r0, r1
   28da8:	e5c4c00c 	strb	ip, [r4, #12]
   28dac:	e1a01004 	mov	r1, r4
   28db0:	e1a05003 	mov	r5, r3
   28db4:	ebfffe94 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28db8:	e1a00006 	mov	r0, r6
   28dbc:	e2841004 	add	r1, r4, #4
   28dc0:	ebfffe91 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28dc4:	e3a03000 	mov	r3, #0
   28dc8:	e1a00004 	mov	r0, r4
   28dcc:	e5c45009 	strb	r5, [r4, #9]
   28dd0:	e5c43008 	strb	r3, [r4, #8]
   28dd4:	e8bd8070 	pop	{r4, r5, r6, pc}

00028dd8 <CChecksumCalculator::~CChecksumCalculator()>:
   28dd8:	e12fff1e 	bx	lr

00028ddc <CChecksumCalculator::SetSourceAddress(CIPAddress const&)>:
   28ddc:	e1a03000 	mov	r3, r0
   28de0:	e1a00001 	mov	r0, r1
   28de4:	e1a01003 	mov	r1, r3
   28de8:	eafffe87 	b	2880c <CIPAddress::CopyTo(unsigned char*) const>

00028dec <CChecksumCalculator::SetDestinationAddress(CIPAddress const&)>:
   28dec:	e92d4010 	push	{r4, lr}
   28df0:	e1a04000 	mov	r4, r0
   28df4:	e1a00001 	mov	r0, r1
   28df8:	e2841004 	add	r1, r4, #4
   28dfc:	ebfffe82 	bl	2880c <CIPAddress::CopyTo(unsigned char*) const>
   28e00:	e3a03001 	mov	r3, #1
   28e04:	e5c4300c 	strb	r3, [r4, #12]
   28e08:	e8bd8010 	pop	{r4, pc}

00028e0c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>:
   28e0c:	e2503000 	subs	r3, r0, #0
   28e10:	e92d4010 	push	{r4, lr}
   28e14:	0a000013 	beq	28e68 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x5c>
   28e18:	e3510000 	cmp	r1, #0
   28e1c:	0a000017 	beq	28e80 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x74>
   28e20:	e3510001 	cmp	r1, #1
   28e24:	01a0c003 	moveq	ip, r3
   28e28:	01a00002 	moveq	r0, r2
   28e2c:	0a00000a 	beq	28e5c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x50>
   28e30:	e241c002 	sub	ip, r1, #2
   28e34:	e1a00002 	mov	r0, r2
   28e38:	e3ccc001 	bic	ip, ip, #1
   28e3c:	e28cc002 	add	ip, ip, #2
   28e40:	e083c00c 	add	ip, r3, ip
   28e44:	e0d320b2 	ldrh	r2, [r3], #2
   28e48:	e0800002 	add	r0, r0, r2
   28e4c:	e153000c 	cmp	r3, ip
   28e50:	1afffffb 	bne	28e44 <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)+0x38>
   28e54:	e3110001 	tst	r1, #1
   28e58:	08bd8010 	popeq	{r4, pc}
   28e5c:	e5dc3000 	ldrb	r3, [ip]
   28e60:	e0800003 	add	r0, r0, r3
   28e64:	e8bd8010 	pop	{r4, pc}
   28e68:	e30d1720 	movw	r1, #55072	@ 0xd720
   28e6c:	e3401003 	movt	r1, #3
   28e70:	e30d0738 	movw	r0, #55096	@ 0xd738
   28e74:	e3400003 	movt	r0, #3
   28e78:	e3a02054 	mov	r2, #84	@ 0x54
   28e7c:	eb000bd6 	bl	2bddc <assertion_failed>
   28e80:	e30d1720 	movw	r1, #55072	@ 0xd720
   28e84:	e3401003 	movt	r1, #3
   28e88:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   28e8c:	e3400003 	movt	r0, #3
   28e90:	e3a02055 	mov	r2, #85	@ 0x55
   28e94:	eb000bd0 	bl	2bddc <assertion_failed>

00028e98 <CChecksumCalculator::Calculate(void const*, unsigned int)>:
   28e98:	e5d0300c 	ldrb	r3, [r0, #12]
   28e9c:	e1a0c000 	mov	ip, r0
   28ea0:	e92d4010 	push	{r4, lr}
   28ea4:	e3530000 	cmp	r3, #0
   28ea8:	0a000018 	beq	28f10 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x78>
   28eac:	e1a00001 	mov	r0, r1
   28eb0:	e1a0300c 	mov	r3, ip
   28eb4:	e1a01002 	mov	r1, r2
   28eb8:	e28ce00c 	add	lr, ip, #12
   28ebc:	e6bf2fb2 	rev16	r2, r2
   28ec0:	e1cc20ba 	strh	r2, [ip, #10]
   28ec4:	e3a02000 	mov	r2, #0
   28ec8:	e0d3c0b2 	ldrh	ip, [r3], #2
   28ecc:	e082200c 	add	r2, r2, ip
   28ed0:	e153000e 	cmp	r3, lr
   28ed4:	1afffffb 	bne	28ec8 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x30>
   28ed8:	e3500000 	cmp	r0, #0
   28edc:	0a000011 	beq	28f28 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x90>
   28ee0:	e3510000 	cmp	r1, #0
   28ee4:	0a000015 	beq	28f40 <CChecksumCalculator::Calculate(void const*, unsigned int)+0xa8>
   28ee8:	ebffffc7 	bl	28e0c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   28eec:	e1b03820 	lsrs	r3, r0, #16
   28ef0:	0a000003 	beq	28f04 <CChecksumCalculator::Calculate(void const*, unsigned int)+0x6c>
   28ef4:	e6f30070 	uxtah	r0, r3, r0
   28ef8:	e1b03820 	lsrs	r3, r0, #16
   28efc:	16ff0070 	uxthne	r0, r0
   28f00:	12800001 	addne	r0, r0, #1
   28f04:	e1e00000 	mvn	r0, r0
   28f08:	e6ff0070 	uxth	r0, r0
   28f0c:	e8bd8010 	pop	{r4, pc}
   28f10:	e30d1720 	movw	r1, #55072	@ 0xd720
   28f14:	e3401003 	movt	r1, #3
   28f18:	e30d0748 	movw	r0, #55112	@ 0xd748
   28f1c:	e3400003 	movt	r0, #3
   28f20:	e3a0203c 	mov	r2, #60	@ 0x3c
   28f24:	eb000bac 	bl	2bddc <assertion_failed>
   28f28:	e30d1720 	movw	r1, #55072	@ 0xd720
   28f2c:	e3401003 	movt	r1, #3
   28f30:	e30b0400 	movw	r0, #46080	@ 0xb400
   28f34:	e3400003 	movt	r0, #3
   28f38:	e3a02041 	mov	r2, #65	@ 0x41
   28f3c:	eb000ba6 	bl	2bddc <assertion_failed>
   28f40:	e30d1720 	movw	r1, #55072	@ 0xd720
   28f44:	e3401003 	movt	r1, #3
   28f48:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   28f4c:	e3400003 	movt	r0, #3
   28f50:	e3a02042 	mov	r2, #66	@ 0x42
   28f54:	eb000ba0 	bl	2bddc <assertion_failed>

00028f58 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)>:
   28f58:	e3500000 	cmp	r0, #0
   28f5c:	e92d4010 	push	{r4, lr}
   28f60:	0a00000c 	beq	28f98 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x40>
   28f64:	e3510000 	cmp	r1, #0
   28f68:	0a000010 	beq	28fb0 <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x58>
   28f6c:	e3a02000 	mov	r2, #0
   28f70:	ebffffa5 	bl	28e0c <CChecksumCalculator::CalculateChunk(void const*, unsigned int, unsigned int)>
   28f74:	e1b03820 	lsrs	r3, r0, #16
   28f78:	0a000003 	beq	28f8c <CChecksumCalculator::SimpleCalculate(void const*, unsigned int)+0x34>
   28f7c:	e6f30070 	uxtah	r0, r3, r0
   28f80:	e1b03820 	lsrs	r3, r0, #16
   28f84:	16ff0070 	uxthne	r0, r0
   28f88:	12800001 	addne	r0, r0, #1
   28f8c:	e1e00000 	mvn	r0, r0
   28f90:	e6ff0070 	uxth	r0, r0
   28f94:	e8bd8010 	pop	{r4, pc}
   28f98:	e30d1720 	movw	r1, #55072	@ 0xd720
   28f9c:	e3401003 	movt	r1, #3
   28fa0:	e30b0400 	movw	r0, #46080	@ 0xb400
   28fa4:	e3400003 	movt	r0, #3
   28fa8:	e3a0204a 	mov	r2, #74	@ 0x4a
   28fac:	eb000b8a 	bl	2bddc <assertion_failed>
   28fb0:	e30d1720 	movw	r1, #55072	@ 0xd720
   28fb4:	e3401003 	movt	r1, #3
   28fb8:	e30b05b0 	movw	r0, #46512	@ 0xb5b0
   28fbc:	e3400003 	movt	r0, #3
   28fc0:	e3a0204b 	mov	r2, #75	@ 0x4b
   28fc4:	eb000b84 	bl	2bddc <assertion_failed>

00028fc8 <CChecksumCalculator::FoldResult(unsigned int)>:
   28fc8:	e1b03820 	lsrs	r3, r0, #16
   28fcc:	0a000003 	beq	28fe0 <CChecksumCalculator::FoldResult(unsigned int)+0x18>
   28fd0:	e6f30070 	uxtah	r0, r3, r0
   28fd4:	e1b03820 	lsrs	r3, r0, #16
   28fd8:	16ff0070 	uxthne	r0, r0
   28fdc:	12800001 	addne	r0, r0, #1
   28fe0:	e6ff0070 	uxth	r0, r0
   28fe4:	e12fff1e 	bx	lr

00028fe8 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)>:
   28fe8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   28fec:	e1a04000 	mov	r4, r0
   28ff0:	e1a05001 	mov	r5, r1
   28ff4:	e1a06002 	mov	r6, r2
   28ff8:	e3a01902 	mov	r1, #32768	@ 0x8000
   28ffc:	e3a02000 	mov	r2, #0
   29000:	e59f80cc 	ldr	r8, [pc, #204]	@ 290d4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xec>
   29004:	eb0006fe 	bl	2ac04 <CTask::CTask(unsigned int, bool)>
   29008:	e1a00005 	mov	r0, r5
   2900c:	e5848000 	str	r8, [r4]
   29010:	e28470fc 	add	r7, r4, #252	@ 0xfc
   29014:	e58450f4 	str	r5, [r4, #244]	@ 0xf4
   29018:	ebffdce8 	bl	203c0 <CNetSubSystem::GetConfig()>
   2901c:	e3560000 	cmp	r6, #0
   29020:	e58400f8 	str	r0, [r4, #248]	@ 0xf8
   29024:	e30d1e48 	movw	r1, #56904	@ 0xde48
   29028:	e3401003 	movt	r1, #3
   2902c:	e1a00007 	mov	r0, r7
   29030:	11a01006 	movne	r1, r6
   29034:	eb002688 	bl	32a5c <CString::CString(char const*)>
   29038:	e3a02011 	mov	r2, #17
   2903c:	e1a01005 	mov	r1, r5
   29040:	e2840f43 	add	r0, r4, #268	@ 0x10c
   29044:	ebffdee8 	bl	20bec <CSocket::CSocket(CNetSubSystem*, int)>
   29048:	e59430f4 	ldr	r3, [r4, #244]	@ 0xf4
   2904c:	e3a02000 	mov	r2, #0
   29050:	e5c421ac 	strb	r2, [r4, #428]	@ 0x1ac
   29054:	e1530002 	cmp	r3, r2
   29058:	0a00000b 	beq	2908c <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xa4>
   2905c:	e59430f8 	ldr	r3, [r4, #248]	@ 0xf8
   29060:	e3530000 	cmp	r3, #0
   29064:	0a00000e 	beq	290a4 <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xbc>
   29068:	e1a00007 	mov	r0, r7
   2906c:	eb0026ea 	bl	32c1c <CString::GetLength() const>
   29070:	e350001e 	cmp	r0, #30
   29074:	8a000010 	bhi	290bc <CDHCPClient::CDHCPClient(CNetSubSystem*, char const*)+0xd4>
   29078:	e1a00004 	mov	r0, r4
   2907c:	e288100c 	add	r1, r8, #12
   29080:	eb00076e 	bl	2ae40 <CTask::SetName(char const*)>
   29084:	e1a00004 	mov	r0, r4
   29088:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2908c:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29090:	e3401003 	movt	r1, #3
   29094:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   29098:	e3400003 	movt	r0, #3
   2909c:	e3a02073 	mov	r2, #115	@ 0x73
   290a0:	eb000b4d 	bl	2bddc <assertion_failed>
   290a4:	e30d175c 	movw	r1, #55132	@ 0xd75c
   290a8:	e3401003 	movt	r1, #3
   290ac:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   290b0:	e3400003 	movt	r0, #3
   290b4:	e3a02074 	mov	r2, #116	@ 0x74
   290b8:	eb000b47 	bl	2bddc <assertion_failed>
   290bc:	e30d175c 	movw	r1, #55132	@ 0xd75c
   290c0:	e3401003 	movt	r1, #3
   290c4:	e30d076c 	movw	r0, #55148	@ 0xd76c
   290c8:	e3400003 	movt	r0, #3
   290cc:	e3a02076 	mov	r2, #118	@ 0x76
   290d0:	eb000b41 	bl	2bddc <assertion_failed>
   290d4:	00041f38 	.word	0x00041f38

000290d8 <CDHCPClient::IsBound() const>:
   290d8:	e5d001ac 	ldrb	r0, [r0, #428]	@ 0x1ac
   290dc:	e12fff1e 	bx	lr

000290e0 <CDHCPClient::HaltNetwork()>:
   290e0:	e1a03000 	mov	r3, r0
   290e4:	e59000f8 	ldr	r0, [r0, #248]	@ 0xf8
   290e8:	e3a02000 	mov	r2, #0
   290ec:	e1500002 	cmp	r0, r2
   290f0:	e5c321ac 	strb	r2, [r3, #428]	@ 0x1ac
   290f4:	0a000000 	beq	290fc <CDHCPClient::HaltNetwork()+0x1c>
   290f8:	eafffc47 	b	2821c <CNetConfig::Reset()>
   290fc:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29100:	e3401003 	movt	r1, #3
   29104:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   29108:	e3400003 	movt	r0, #3
   2910c:	e3a02e1b 	mov	r2, #432	@ 0x1b0
   29110:	e92d4010 	push	{r4, lr}
   29114:	eb000b30 	bl	2bddc <assertion_failed>

00029118 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>:
   29118:	e3510000 	cmp	r1, #0
   2911c:	10812002 	addne	r2, r1, r2
   29120:	0a0000a3 	beq	293b4 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x29c>
   29124:	e2813002 	add	r3, r1, #2
   29128:	e1520003 	cmp	r2, r3
   2912c:	312fff1e 	bxcc	lr
   29130:	e5d13000 	ldrb	r3, [r1]
   29134:	e353003b 	cmp	r3, #59	@ 0x3b
   29138:	8a00003e 	bhi	29238 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x120>
   2913c:	e353003b 	cmp	r3, #59	@ 0x3b
   29140:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   29144:	ea00003d 	b	29240 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x128>
   29148:	000293ac 	.word	0x000293ac
   2914c:	00029388 	.word	0x00029388
   29150:	00029240 	.word	0x00029240
   29154:	00029358 	.word	0x00029358
   29158:	00029240 	.word	0x00029240
   2915c:	00029240 	.word	0x00029240
   29160:	00029334 	.word	0x00029334
   29164:	00029240 	.word	0x00029240
   29168:	00029240 	.word	0x00029240
   2916c:	00029240 	.word	0x00029240
   29170:	00029240 	.word	0x00029240
   29174:	00029240 	.word	0x00029240
   29178:	00029240 	.word	0x00029240
   2917c:	00029240 	.word	0x00029240
   29180:	00029240 	.word	0x00029240
   29184:	00029240 	.word	0x00029240
   29188:	00029240 	.word	0x00029240
   2918c:	00029240 	.word	0x00029240
   29190:	00029240 	.word	0x00029240
   29194:	00029240 	.word	0x00029240
   29198:	00029240 	.word	0x00029240
   2919c:	00029240 	.word	0x00029240
   291a0:	00029240 	.word	0x00029240
   291a4:	00029240 	.word	0x00029240
   291a8:	00029240 	.word	0x00029240
   291ac:	00029240 	.word	0x00029240
   291b0:	00029240 	.word	0x00029240
   291b4:	00029240 	.word	0x00029240
   291b8:	00029240 	.word	0x00029240
   291bc:	00029240 	.word	0x00029240
   291c0:	00029240 	.word	0x00029240
   291c4:	00029240 	.word	0x00029240
   291c8:	00029240 	.word	0x00029240
   291cc:	00029240 	.word	0x00029240
   291d0:	00029240 	.word	0x00029240
   291d4:	00029240 	.word	0x00029240
   291d8:	00029240 	.word	0x00029240
   291dc:	00029240 	.word	0x00029240
   291e0:	00029240 	.word	0x00029240
   291e4:	00029240 	.word	0x00029240
   291e8:	00029240 	.word	0x00029240
   291ec:	00029240 	.word	0x00029240
   291f0:	00029240 	.word	0x00029240
   291f4:	00029240 	.word	0x00029240
   291f8:	00029240 	.word	0x00029240
   291fc:	00029240 	.word	0x00029240
   29200:	00029240 	.word	0x00029240
   29204:	00029240 	.word	0x00029240
   29208:	00029240 	.word	0x00029240
   2920c:	00029240 	.word	0x00029240
   29210:	00029240 	.word	0x00029240
   29214:	0002930c 	.word	0x0002930c
   29218:	000292e8 	.word	0x000292e8
   2921c:	000292c4 	.word	0x000292c4
   29220:	000292a0 	.word	0x000292a0
   29224:	00029240 	.word	0x00029240
   29228:	00029240 	.word	0x00029240
   2922c:	00029240 	.word	0x00029240
   29230:	00029278 	.word	0x00029278
   29234:	00029250 	.word	0x00029250
   29238:	e35300ff 	cmp	r3, #255	@ 0xff
   2923c:	012fff1e 	bxeq	lr
   29240:	e5d13001 	ldrb	r3, [r1, #1]
   29244:	e2833002 	add	r3, r3, #2
   29248:	e0811003 	add	r1, r1, r3
   2924c:	eaffffb4 	b	29124 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xc>
   29250:	e5d13001 	ldrb	r3, [r1, #1]
   29254:	e3530004 	cmp	r3, #4
   29258:	1afffff9 	bne	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   2925c:	e281c006 	add	ip, r1, #6
   29260:	e152000c 	cmp	r2, ip
   29264:	3afffff6 	bcc	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29268:	e5913002 	ldr	r3, [r1, #2]
   2926c:	e6bf3f33 	rev	r3, r3
   29270:	e58031f4 	str	r3, [r0, #500]	@ 0x1f4
   29274:	eafffff1 	b	29240 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x128>
   29278:	e5d13001 	ldrb	r3, [r1, #1]
   2927c:	e3530004 	cmp	r3, #4
   29280:	1affffef 	bne	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29284:	e281c006 	add	ip, r1, #6
   29288:	e152000c 	cmp	r2, ip
   2928c:	25913002 	ldrcs	r3, [r1, #2]
   29290:	26bf3f33 	revcs	r3, r3
   29294:	258031f0 	strcs	r3, [r0, #496]	@ 0x1f0
   29298:	25d13001 	ldrbcs	r3, [r1, #1]
   2929c:	eaffffe8 	b	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   292a0:	e5d13001 	ldrb	r3, [r1, #1]
   292a4:	e3530004 	cmp	r3, #4
   292a8:	1affffe5 	bne	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   292ac:	e281c006 	add	ip, r1, #6
   292b0:	e152000c 	cmp	r2, ip
   292b4:	25913002 	ldrcs	r3, [r1, #2]
   292b8:	258031ec 	strcs	r3, [r0, #492]	@ 0x1ec
   292bc:	25d13001 	ldrbcs	r3, [r1, #1]
   292c0:	eaffffdf 	b	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   292c4:	e5d13001 	ldrb	r3, [r1, #1]
   292c8:	e3530001 	cmp	r3, #1
   292cc:	1affffdc 	bne	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   292d0:	e281c003 	add	ip, r1, #3
   292d4:	e152000c 	cmp	r2, ip
   292d8:	25d13002 	ldrbcs	r3, [r1, #2]
   292dc:	25c031e9 	strbcs	r3, [r0, #489]	@ 0x1e9
   292e0:	25d13001 	ldrbcs	r3, [r1, #1]
   292e4:	eaffffd6 	b	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   292e8:	e5d13001 	ldrb	r3, [r1, #1]
   292ec:	e3530001 	cmp	r3, #1
   292f0:	1affffd3 	bne	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   292f4:	e281c003 	add	ip, r1, #3
   292f8:	e152000c 	cmp	r2, ip
   292fc:	25d13002 	ldrbcs	r3, [r1, #2]
   29300:	25c031e8 	strbcs	r3, [r0, #488]	@ 0x1e8
   29304:	25d13001 	ldrbcs	r3, [r1, #1]
   29308:	eaffffcd 	b	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   2930c:	e5d13001 	ldrb	r3, [r1, #1]
   29310:	e3530004 	cmp	r3, #4
   29314:	1affffca 	bne	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29318:	e281c006 	add	ip, r1, #6
   2931c:	e152000c 	cmp	r2, ip
   29320:	25913002 	ldrcs	r3, [r1, #2]
   29324:	26bf3f33 	revcs	r3, r3
   29328:	258031e4 	strcs	r3, [r0, #484]	@ 0x1e4
   2932c:	25d13001 	ldrbcs	r3, [r1, #1]
   29330:	eaffffc3 	b	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29334:	e5d13001 	ldrb	r3, [r1, #1]
   29338:	e3530003 	cmp	r3, #3
   2933c:	9affffc0 	bls	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29340:	e281c006 	add	ip, r1, #6
   29344:	e152000c 	cmp	r2, ip
   29348:	25913002 	ldrcs	r3, [r1, #2]
   2934c:	258031e0 	strcs	r3, [r0, #480]	@ 0x1e0
   29350:	25d13001 	ldrbcs	r3, [r1, #1]
   29354:	eaffffba 	b	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29358:	e5d13001 	ldrb	r3, [r1, #1]
   2935c:	e3530003 	cmp	r3, #3
   29360:	9affffb7 	bls	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29364:	e281c006 	add	ip, r1, #6
   29368:	e152000c 	cmp	r2, ip
   2936c:	3affffb4 	bcc	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29370:	e590c1dc 	ldr	ip, [r0, #476]	@ 0x1dc
   29374:	e35c0000 	cmp	ip, #0
   29378:	05913002 	ldreq	r3, [r1, #2]
   2937c:	058031dc 	streq	r3, [r0, #476]	@ 0x1dc
   29380:	05d13001 	ldrbeq	r3, [r1, #1]
   29384:	eaffffae 	b	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29388:	e5d13001 	ldrb	r3, [r1, #1]
   2938c:	e3530004 	cmp	r3, #4
   29390:	1affffab 	bne	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   29394:	e281c006 	add	ip, r1, #6
   29398:	e152000c 	cmp	r2, ip
   2939c:	25913002 	ldrcs	r3, [r1, #2]
   293a0:	258031d8 	strcs	r3, [r0, #472]	@ 0x1d8
   293a4:	25d13001 	ldrbcs	r3, [r1, #1]
   293a8:	eaffffa5 	b	29244 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0x12c>
   293ac:	e2811001 	add	r1, r1, #1
   293b0:	eaffff5b 	b	29124 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)+0xc>
   293b4:	e30d175c 	movw	r1, #55132	@ 0xd75c
   293b8:	e3401003 	movt	r1, #3
   293bc:	e30d078c 	movw	r0, #55180	@ 0xd78c
   293c0:	e3400003 	movt	r0, #3
   293c4:	e92d4010 	push	{r4, lr}
   293c8:	e30022af 	movw	r2, #687	@ 0x2af
   293cc:	eb000a82 	bl	2bddc <assertion_failed>

000293d0 <CDHCPClient::CheckConfig()>:
   293d0:	e92d4010 	push	{r4, lr}
   293d4:	e1a04000 	mov	r4, r0
   293d8:	e59031d4 	ldr	r3, [r0, #468]	@ 0x1d4
   293dc:	e24dd010 	sub	sp, sp, #16
   293e0:	e3530000 	cmp	r3, #0
   293e4:	0a00002a 	beq	29494 <CDHCPClient::CheckConfig()+0xc4>
   293e8:	e59021d8 	ldr	r2, [r0, #472]	@ 0x1d8
   293ec:	e3520000 	cmp	r2, #0
   293f0:	0a000027 	beq	29494 <CDHCPClient::CheckConfig()+0xc4>
   293f4:	e59011dc 	ldr	r1, [r0, #476]	@ 0x1dc
   293f8:	e3510000 	cmp	r1, #0
   293fc:	0a000024 	beq	29494 <CDHCPClient::CheckConfig()+0xc4>
   29400:	e59001e0 	ldr	r0, [r0, #480]	@ 0x1e0
   29404:	e3500000 	cmp	r0, #0
   29408:	0a000021 	beq	29494 <CDHCPClient::CheckConfig()+0xc4>
   2940c:	e0233001 	eor	r3, r3, r1
   29410:	e1130002 	tst	r3, r2
   29414:	1a000033 	bne	294e8 <CDHCPClient::CheckConfig()+0x118>
   29418:	e59421e4 	ldr	r2, [r4, #484]	@ 0x1e4
   2941c:	e3520000 	cmp	r2, #0
   29420:	0a000037 	beq	29504 <CDHCPClient::CheckConfig()+0x134>
   29424:	e59411f0 	ldr	r1, [r4, #496]	@ 0x1f0
   29428:	e59431f4 	ldr	r3, [r4, #500]	@ 0x1f4
   2942c:	e3510000 	cmp	r1, #0
   29430:	1a000027 	bne	294d4 <CDHCPClient::CheckConfig()+0x104>
   29434:	e3530000 	cmp	r3, #0
   29438:	01a010a2 	lsreq	r1, r2, #1
   2943c:	004231a2 	subeq	r3, r2, r2, lsr #3
   29440:	10621083 	rsbne	r1, r2, r3, lsl #1
   29444:	058411f0 	streq	r1, [r4, #496]	@ 0x1f0
   29448:	058431f4 	streq	r3, [r4, #500]	@ 0x1f4
   2944c:	158411f0 	strne	r1, [r4, #496]	@ 0x1f0
   29450:	e1530001 	cmp	r3, r1
   29454:	21520003 	cmpcs	r2, r3
   29458:	23a00001 	movcs	r0, #1
   2945c:	2a00001a 	bcs	294cc <CDHCPClient::CheckConfig()+0xfc>
   29460:	eb0014d8 	bl	2e7c8 <CLogger::Get()>
   29464:	e59411e4 	ldr	r1, [r4, #484]	@ 0x1e4
   29468:	e59421f4 	ldr	r2, [r4, #500]	@ 0x1f4
   2946c:	e30d3810 	movw	r3, #55312	@ 0xd810
   29470:	e3403003 	movt	r3, #3
   29474:	e594c1f0 	ldr	ip, [r4, #496]	@ 0x1f0
   29478:	e58d1008 	str	r1, [sp, #8]
   2947c:	e58d2004 	str	r2, [sp, #4]
   29480:	e3a02002 	mov	r2, #2
   29484:	e59f1094 	ldr	r1, [pc, #148]	@ 29520 <CDHCPClient::CheckConfig()+0x150>
   29488:	e58dc000 	str	ip, [sp]
   2948c:	eb001696 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29490:	ea00000c 	b	294c8 <CDHCPClient::CheckConfig()+0xf8>
   29494:	eb0014cb 	bl	2e7c8 <CLogger::Get()>
   29498:	e59421e0 	ldr	r2, [r4, #480]	@ 0x1e0
   2949c:	e59431dc 	ldr	r3, [r4, #476]	@ 0x1dc
   294a0:	e59411d4 	ldr	r1, [r4, #468]	@ 0x1d4
   294a4:	e594c1d8 	ldr	ip, [r4, #472]	@ 0x1d8
   294a8:	e88d1002 	stm	sp, {r1, ip}
   294ac:	e58d200c 	str	r2, [sp, #12]
   294b0:	e3a02002 	mov	r2, #2
   294b4:	e58d3008 	str	r3, [sp, #8]
   294b8:	e30d379c 	movw	r3, #55196	@ 0xd79c
   294bc:	e3403003 	movt	r3, #3
   294c0:	e59f1058 	ldr	r1, [pc, #88]	@ 29520 <CDHCPClient::CheckConfig()+0x150>
   294c4:	eb001688 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   294c8:	e3a00000 	mov	r0, #0
   294cc:	e28dd010 	add	sp, sp, #16
   294d0:	e8bd8010 	pop	{r4, pc}
   294d4:	e3530000 	cmp	r3, #0
   294d8:	00423001 	subeq	r3, r2, r1
   294dc:	008130a3 	addeq	r3, r1, r3, lsr #1
   294e0:	058431f4 	streq	r3, [r4, #500]	@ 0x1f4
   294e4:	eaffffd9 	b	29450 <CDHCPClient::CheckConfig()+0x80>
   294e8:	eb0014b6 	bl	2e7c8 <CLogger::Get()>
   294ec:	e30d37cc 	movw	r3, #55244	@ 0xd7cc
   294f0:	e3403003 	movt	r3, #3
   294f4:	e59411d8 	ldr	r1, [r4, #472]	@ 0x1d8
   294f8:	e59421dc 	ldr	r2, [r4, #476]	@ 0x1dc
   294fc:	e594c1d4 	ldr	ip, [r4, #468]	@ 0x1d4
   29500:	eaffffdc 	b	29478 <CDHCPClient::CheckConfig()+0xa8>
   29504:	eb0014af 	bl	2e7c8 <CLogger::Get()>
   29508:	e59f1010 	ldr	r1, [pc, #16]	@ 29520 <CDHCPClient::CheckConfig()+0x150>
   2950c:	e3a02002 	mov	r2, #2
   29510:	e30d37f8 	movw	r3, #55288	@ 0xd7f8
   29514:	e3403003 	movt	r3, #3
   29518:	eb001673 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2951c:	eaffffe9 	b	294c8 <CDHCPClient::CheckConfig()+0xf8>
   29520:	00041f44 	.word	0x00041f44

00029524 <CDHCPClient::GetXID() const>:
   29524:	e59000f4 	ldr	r0, [r0, #244]	@ 0xf4
   29528:	e92d4010 	push	{r4, lr}
   2952c:	e3500000 	cmp	r0, #0
   29530:	0a000009 	beq	2955c <CDHCPClient::GetXID() const+0x38>
   29534:	ebffdba3 	bl	203c8 <CNetSubSystem::GetNetDeviceLayer()>
   29538:	ebffe751 	bl	23284 <CNetDeviceLayer::GetMACAddress() const>
   2953c:	eb003242 	bl	35e4c <CMACAddress::Get() const>
   29540:	e2504000 	subs	r4, r0, #0
   29544:	0a00000a 	beq	29574 <CDHCPClient::GetXID() const+0x50>
   29548:	eb002eba 	bl	35038 <CTimer::Get()>
   2954c:	e5944002 	ldr	r4, [r4, #2]
   29550:	eb002be3 	bl	344e4 <CTimer::GetClockTicks()>
   29554:	e0800004 	add	r0, r0, r4
   29558:	e8bd8010 	pop	{r4, pc}
   2955c:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29560:	e3401003 	movt	r1, #3
   29564:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   29568:	e3400003 	movt	r0, #3
   2956c:	e3a02fd6 	mov	r2, #856	@ 0x358
   29570:	eb000a19 	bl	2bddc <assertion_failed>
   29574:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29578:	e3401003 	movt	r1, #3
   2957c:	e30d0000 	movw	r0, #53248	@ 0xd000
   29580:	e3400003 	movt	r0, #3
   29584:	e300235a 	movw	r2, #858	@ 0x35a
   29588:	eb000a13 	bl	2bddc <assertion_failed>

0002958c <CDHCPClient::GetUnaligned(void const*)>:
   2958c:	e3500000 	cmp	r0, #0
   29590:	0a000001 	beq	2959c <CDHCPClient::GetUnaligned(void const*)+0x10>
   29594:	e5900000 	ldr	r0, [r0]
   29598:	e12fff1e 	bx	lr
   2959c:	e30d175c 	movw	r1, #55132	@ 0xd75c
   295a0:	e3401003 	movt	r1, #3
   295a4:	e30d0830 	movw	r0, #55344	@ 0xd830
   295a8:	e3400003 	movt	r0, #3
   295ac:	e92d4010 	push	{r4, lr}
   295b0:	e3002362 	movw	r2, #866	@ 0x362
   295b4:	eb000a08 	bl	2bddc <assertion_failed>

000295b8 <CDHCPClient::SetUnaligned(void*, unsigned int)>:
   295b8:	e3500000 	cmp	r0, #0
   295bc:	0a000001 	beq	295c8 <CDHCPClient::SetUnaligned(void*, unsigned int)+0x10>
   295c0:	e5801000 	str	r1, [r0]
   295c4:	e12fff1e 	bx	lr
   295c8:	e30d175c 	movw	r1, #55132	@ 0xd75c
   295cc:	e3401003 	movt	r1, #3
   295d0:	e30d0830 	movw	r0, #55344	@ 0xd830
   295d4:	e3400003 	movt	r0, #3
   295d8:	e92d4010 	push	{r4, lr}
   295dc:	e300236f 	movw	r2, #879	@ 0x36f
   295e0:	eb0009fd 	bl	2bddc <assertion_failed>

000295e4 <CDHCPClient::~CDHCPClient()>:
   295e4:	e92d4010 	push	{r4, lr}
   295e8:	e1a04000 	mov	r4, r0
   295ec:	e59f2028 	ldr	r2, [pc, #40]	@ 2961c <CDHCPClient::~CDHCPClient()+0x38>
   295f0:	e3a03000 	mov	r3, #0
   295f4:	e2800f43 	add	r0, r0, #268	@ 0x10c
   295f8:	e5842000 	str	r2, [r4]
   295fc:	e58430f4 	str	r3, [r4, #244]	@ 0xf4
   29600:	ebffdbdc 	bl	20578 <CSocket::~CSocket()>
   29604:	e28400fc 	add	r0, r4, #252	@ 0xfc
   29608:	eb0024da 	bl	32978 <CString::~CString()>
   2960c:	e1a00004 	mov	r0, r4
   29610:	eb000630 	bl	2aed8 <CTask::~CTask()>
   29614:	e1a00004 	mov	r0, r4
   29618:	e8bd8010 	pop	{r4, pc}
   2961c:	00041f38 	.word	0x00041f38

00029620 <CDHCPClient::~CDHCPClient()>:
   29620:	e92d4010 	push	{r4, lr}
   29624:	e1a04000 	mov	r4, r0
   29628:	e59f2034 	ldr	r2, [pc, #52]	@ 29664 <CDHCPClient::~CDHCPClient()+0x44>
   2962c:	e3a03000 	mov	r3, #0
   29630:	e2800f43 	add	r0, r0, #268	@ 0x10c
   29634:	e5842000 	str	r2, [r4]
   29638:	e58430f4 	str	r3, [r4, #244]	@ 0xf4
   2963c:	ebffdbcd 	bl	20578 <CSocket::~CSocket()>
   29640:	e28400fc 	add	r0, r4, #252	@ 0xfc
   29644:	eb0024cb 	bl	32978 <CString::~CString()>
   29648:	e1a00004 	mov	r0, r4
   2964c:	eb000621 	bl	2aed8 <CTask::~CTask()>
   29650:	e1a00004 	mov	r0, r4
   29654:	e3a01f7e 	mov	r1, #504	@ 0x1f8
   29658:	eb0032c9 	bl	36184 <operator delete(void*, unsigned int)>
   2965c:	e1a00004 	mov	r0, r4
   29660:	e8bd8010 	pop	{r4, pc}
   29664:	00041f38 	.word	0x00041f38

00029668 <CDHCPClient::ReceiveMessage()>:
   29668:	e92d4070 	push	{r4, r5, r6, lr}
   2966c:	e3a03040 	mov	r3, #64	@ 0x40
   29670:	e1a04000 	mov	r4, r0
   29674:	e24dde23 	sub	sp, sp, #560	@ 0x230
   29678:	e3a02f89 	mov	r2, #548	@ 0x224
   2967c:	e28d100c 	add	r1, sp, #12
   29680:	e2800f43 	add	r0, r0, #268	@ 0x10c
   29684:	ebffdc9d 	bl	20900 <CSocket::Receive(void*, unsigned int, int)>
   29688:	e35000ef 	cmp	r0, #239	@ 0xef
   2968c:	da000002 	ble	2969c <CDHCPClient::ReceiveMessage()+0x34>
   29690:	e5dd300c 	ldrb	r3, [sp, #12]
   29694:	e3530002 	cmp	r3, #2
   29698:	0a000003 	beq	296ac <CDHCPClient::ReceiveMessage()+0x44>
   2969c:	e3a04000 	mov	r4, #0
   296a0:	e1a00004 	mov	r0, r4
   296a4:	e28dde23 	add	sp, sp, #560	@ 0x230
   296a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   296ac:	e5dd300d 	ldrb	r3, [sp, #13]
   296b0:	e3530001 	cmp	r3, #1
   296b4:	1afffff8 	bne	2969c <CDHCPClient::ReceiveMessage()+0x34>
   296b8:	e5dd300e 	ldrb	r3, [sp, #14]
   296bc:	e3530006 	cmp	r3, #6
   296c0:	1afffff5 	bne	2969c <CDHCPClient::ReceiveMessage()+0x34>
   296c4:	e59d2010 	ldr	r2, [sp, #16]
   296c8:	e59431cc 	ldr	r3, [r4, #460]	@ 0x1cc
   296cc:	e1520003 	cmp	r2, r3
   296d0:	1afffff1 	bne	2969c <CDHCPClient::ReceiveMessage()+0x34>
   296d4:	e59d20f8 	ldr	r2, [sp, #248]	@ 0xf8
   296d8:	e3083263 	movw	r3, #33379	@ 0x8263
   296dc:	e3463353 	movt	r3, #25427	@ 0x6353
   296e0:	e1520003 	cmp	r2, r3
   296e4:	1affffec 	bne	2969c <CDHCPClient::ReceiveMessage()+0x34>
   296e8:	e1a05000 	mov	r5, r0
   296ec:	e59400f4 	ldr	r0, [r4, #244]	@ 0xf4
   296f0:	e3500000 	cmp	r0, #0
   296f4:	0a000034 	beq	297cc <CDHCPClient::ReceiveMessage()+0x164>
   296f8:	ebffdb32 	bl	203c8 <CNetSubSystem::GetNetDeviceLayer()>
   296fc:	ebffe6e0 	bl	23284 <CNetDeviceLayer::GetMACAddress() const>
   29700:	e2506000 	subs	r6, r0, #0
   29704:	0a000036 	beq	297e4 <CDHCPClient::ReceiveMessage()+0x17c>
   29708:	e28d1028 	add	r1, sp, #40	@ 0x28
   2970c:	e28d0004 	add	r0, sp, #4
   29710:	eb00316e 	bl	35cd0 <CMACAddress::CMACAddress(unsigned char const*)>
   29714:	e1a01006 	mov	r1, r6
   29718:	e28d0004 	add	r0, sp, #4
   2971c:	eb003197 	bl	35d80 <CMACAddress::operator!=(CMACAddress const&) const>
   29720:	e3500000 	cmp	r0, #0
   29724:	13a04000 	movne	r4, #0
   29728:	1a00001b 	bne	2979c <CDHCPClient::ReceiveMessage()+0x134>
   2972c:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   29730:	e2843f7b 	add	r3, r4, #492	@ 0x1ec
   29734:	e2841f7a 	add	r1, r4, #488	@ 0x1e8
   29738:	e59d201c 	ldr	r2, [sp, #28]
   2973c:	e58421d4 	str	r2, [r4, #468]	@ 0x1d4
   29740:	e24520f0 	sub	r2, r5, #240	@ 0xf0
   29744:	e58401d8 	str	r0, [r4, #472]	@ 0x1d8
   29748:	e58401dc 	str	r0, [r4, #476]	@ 0x1dc
   2974c:	e58401e0 	str	r0, [r4, #480]	@ 0x1e0
   29750:	e58401e4 	str	r0, [r4, #484]	@ 0x1e4
   29754:	e1c100b0 	strh	r0, [r1]
   29758:	e28d10fc 	add	r1, sp, #252	@ 0xfc
   2975c:	f443078f 	vst1.32	{d16}, [r3]
   29760:	e58401f4 	str	r0, [r4, #500]	@ 0x1f4
   29764:	e1a00004 	mov	r0, r4
   29768:	ebfffe6a 	bl	29118 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   2976c:	e5d431e8 	ldrb	r3, [r4, #488]	@ 0x1e8
   29770:	e3530002 	cmp	r3, #2
   29774:	0a00000f 	beq	297b8 <CDHCPClient::ReceiveMessage()+0x150>
   29778:	e3530003 	cmp	r3, #3
   2977c:	0a000009 	beq	297a8 <CDHCPClient::ReceiveMessage()+0x140>
   29780:	e3530001 	cmp	r3, #1
   29784:	1a000003 	bne	29798 <CDHCPClient::ReceiveMessage()+0x130>
   29788:	e3a02080 	mov	r2, #128	@ 0x80
   2978c:	e28d1078 	add	r1, sp, #120	@ 0x78
   29790:	e1a00004 	mov	r0, r4
   29794:	ebfffe5f 	bl	29118 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   29798:	e3a04001 	mov	r4, #1
   2979c:	e28d0004 	add	r0, sp, #4
   297a0:	eb00315b 	bl	35d14 <CMACAddress::~CMACAddress()>
   297a4:	eaffffbd 	b	296a0 <CDHCPClient::ReceiveMessage()+0x38>
   297a8:	e3a02080 	mov	r2, #128	@ 0x80
   297ac:	e28d1078 	add	r1, sp, #120	@ 0x78
   297b0:	e1a00004 	mov	r0, r4
   297b4:	ebfffe57 	bl	29118 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   297b8:	e3a02040 	mov	r2, #64	@ 0x40
   297bc:	e28d1038 	add	r1, sp, #56	@ 0x38
   297c0:	e1a00004 	mov	r0, r4
   297c4:	ebfffe53 	bl	29118 <CDHCPClient::ScanOptions(unsigned char const*, unsigned int)>
   297c8:	eafffff2 	b	29798 <CDHCPClient::ReceiveMessage()+0x130>
   297cc:	e30d175c 	movw	r1, #55132	@ 0xd75c
   297d0:	e3401003 	movt	r1, #3
   297d4:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   297d8:	e3400003 	movt	r0, #3
   297dc:	e300227d 	movw	r2, #637	@ 0x27d
   297e0:	eb00097d 	bl	2bddc <assertion_failed>
   297e4:	e30d175c 	movw	r1, #55132	@ 0xd75c
   297e8:	e3401003 	movt	r1, #3
   297ec:	e30c0ea4 	movw	r0, #52900	@ 0xcea4
   297f0:	e3400003 	movt	r0, #3
   297f4:	e300227f 	movw	r2, #639	@ 0x27f
   297f8:	eb000977 	bl	2bddc <assertion_failed>

000297fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>:
   297fc:	e92d4070 	push	{r4, r5, r6, lr}
   29800:	e1a04000 	mov	r4, r0
   29804:	e1a06002 	mov	r6, r2
   29808:	e24ddf8a 	sub	sp, sp, #552	@ 0x228
   2980c:	e3a02f89 	mov	r2, #548	@ 0x224
   29810:	e1a05001 	mov	r5, r1
   29814:	e28d0004 	add	r0, sp, #4
   29818:	e3a01000 	mov	r1, #0
   2981c:	eb003021 	bl	358a8 <memset>
   29820:	e3003101 	movw	r3, #257	@ 0x101
   29824:	e1cd30b4 	strh	r3, [sp, #4]
   29828:	e3a03006 	mov	r3, #6
   2982c:	e5cd3006 	strb	r3, [sp, #6]
   29830:	e59431cc 	ldr	r3, [r4, #460]	@ 0x1cc
   29834:	e58d3008 	str	r3, [sp, #8]
   29838:	e5d431c8 	ldrb	r3, [r4, #456]	@ 0x1c8
   2983c:	e59400f4 	ldr	r0, [r4, #244]	@ 0xf4
   29840:	e1a03383 	lsl	r3, r3, #7
   29844:	e1cd30be 	strh	r3, [sp, #14]
   29848:	e59431d0 	ldr	r3, [r4, #464]	@ 0x1d0
   2984c:	e3500000 	cmp	r0, #0
   29850:	e58d3010 	str	r3, [sp, #16]
   29854:	e3083263 	movw	r3, #33379	@ 0x8263
   29858:	e3463353 	movt	r3, #25427	@ 0x6353
   2985c:	e58d30f0 	str	r3, [sp, #240]	@ 0xf0
   29860:	0a000017 	beq	298c4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xc8>
   29864:	ebffdad7 	bl	203c8 <CNetSubSystem::GetNetDeviceLayer()>
   29868:	ebffe685 	bl	23284 <CNetDeviceLayer::GetMACAddress() const>
   2986c:	e3500000 	cmp	r0, #0
   29870:	0a000019 	beq	298dc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xe0>
   29874:	e28d1020 	add	r1, sp, #32
   29878:	eb00317f 	bl	35e7c <CMACAddress::CopyTo(unsigned char*) const>
   2987c:	e3550000 	cmp	r5, #0
   29880:	0a00001b 	beq	298f4 <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0xf8>
   29884:	e3560f4d 	cmp	r6, #308	@ 0x134
   29888:	8a00001f 	bhi	2990c <CDHCPClient::SendMessage(unsigned char const*, unsigned int)+0x110>
   2988c:	e1a02006 	mov	r2, r6
   29890:	e1a01005 	mov	r1, r5
   29894:	e28d00f4 	add	r0, sp, #244	@ 0xf4
   29898:	eb003019 	bl	35904 <memcpy>
   2989c:	e3a03000 	mov	r3, #0
   298a0:	e3a02f89 	mov	r2, #548	@ 0x224
   298a4:	e28d1004 	add	r1, sp, #4
   298a8:	e2840f43 	add	r0, r4, #268	@ 0x10c
   298ac:	ebffdbf5 	bl	20888 <CSocket::Send(void const*, unsigned int, int)>
   298b0:	e2400f89 	sub	r0, r0, #548	@ 0x224
   298b4:	e16f0f10 	clz	r0, r0
   298b8:	e1a002a0 	lsr	r0, r0, #5
   298bc:	e28ddf8a 	add	sp, sp, #552	@ 0x228
   298c0:	e8bd8070 	pop	{r4, r5, r6, pc}
   298c4:	e30d175c 	movw	r1, #55132	@ 0xd75c
   298c8:	e3401003 	movt	r1, #3
   298cc:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   298d0:	e3400003 	movt	r0, #3
   298d4:	e300225a 	movw	r2, #602	@ 0x25a
   298d8:	eb00093f 	bl	2bddc <assertion_failed>
   298dc:	e30d175c 	movw	r1, #55132	@ 0xd75c
   298e0:	e3401003 	movt	r1, #3
   298e4:	e30d0000 	movw	r0, #53248	@ 0xd000
   298e8:	e3400003 	movt	r0, #3
   298ec:	e3a02f97 	mov	r2, #604	@ 0x25c
   298f0:	eb000939 	bl	2bddc <assertion_failed>
   298f4:	e30d175c 	movw	r1, #55132	@ 0xd75c
   298f8:	e3401003 	movt	r1, #3
   298fc:	e30d078c 	movw	r0, #55180	@ 0xd78c
   29900:	e3400003 	movt	r0, #3
   29904:	e300225f 	movw	r2, #607	@ 0x25f
   29908:	eb000933 	bl	2bddc <assertion_failed>
   2990c:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29910:	e3401003 	movt	r1, #3
   29914:	e30d083c 	movw	r0, #55356	@ 0xd83c
   29918:	e3400003 	movt	r0, #3
   2991c:	e3a02e26 	mov	r2, #608	@ 0x260
   29920:	eb00092d 	bl	2bddc <assertion_failed>

00029924 <CDHCPClient::SendDiscover()>:
   29924:	e3a0c000 	mov	ip, #0
   29928:	e59f1008 	ldr	r1, [pc, #8]	@ 29938 <CDHCPClient::SendDiscover()+0x14>
   2992c:	e3a0200c 	mov	r2, #12
   29930:	e580c1d0 	str	ip, [r0, #464]	@ 0x1d0
   29934:	eaffffb0 	b	297fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   29938:	00041f4c 	.word	0x00041f4c

0002993c <CDHCPClient::SendRequest(unsigned int)>:
   2993c:	e3510000 	cmp	r1, #0
   29940:	e92d4bf0 	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   29944:	e28080fc 	add	r8, r0, #252	@ 0xfc
   29948:	03033fa0 	movweq	r3, #16288	@ 0x3fa0
   2994c:	03403004 	movteq	r3, #4
   29950:	059021b4 	ldreq	r2, [r0, #436]	@ 0x1b4
   29954:	e28db01c 	add	fp, sp, #28
   29958:	e58011d0 	str	r1, [r0, #464]	@ 0x1d0
   2995c:	e1a05000 	mov	r5, r0
   29960:	059011b8 	ldreq	r1, [r0, #440]	@ 0x1b8
   29964:	e1a00008 	mov	r0, r8
   29968:	159f90c8 	ldrne	r9, [pc, #200]	@ 29a38 <CDHCPClient::SendRequest(unsigned int)+0xfc>
   2996c:	03a06018 	moveq	r6, #24
   29970:	01a09003 	moveq	r9, r3
   29974:	13a0600c 	movne	r6, #12
   29978:	05831005 	streq	r1, [r3, #5]
   2997c:	0583200b 	streq	r2, [r3, #11]
   29980:	eb0024a5 	bl	32c1c <CString::GetLength() const>
   29984:	e2504000 	subs	r4, r0, #0
   29988:	0a00001e 	beq	29a08 <CDHCPClient::SendRequest(unsigned int)+0xcc>
   2998c:	e35400ff 	cmp	r4, #255	@ 0xff
   29990:	8a000022 	bhi	29a20 <CDHCPClient::SendRequest(unsigned int)+0xe4>
   29994:	e0867004 	add	r7, r6, r4
   29998:	e1a01009 	mov	r1, r9
   2999c:	e2873009 	add	r3, r7, #9
   299a0:	e1a02006 	mov	r2, r6
   299a4:	e3c33007 	bic	r3, r3, #7
   299a8:	e2877002 	add	r7, r7, #2
   299ac:	e04dd003 	sub	sp, sp, r3
   299b0:	e1a0000d 	mov	r0, sp
   299b4:	eb002fd2 	bl	35904 <memcpy>
   299b8:	e2462001 	sub	r2, r6, #1
   299bc:	e08d3002 	add	r3, sp, r2
   299c0:	e3a0100c 	mov	r1, #12
   299c4:	e2836002 	add	r6, r3, #2
   299c8:	e1a00008 	mov	r0, r8
   299cc:	e7cd1002 	strb	r1, [sp, r2]
   299d0:	e5c34001 	strb	r4, [r3, #1]
   299d4:	eb002452 	bl	32b24 <CString::operator char const*() const>
   299d8:	e1a02004 	mov	r2, r4
   299dc:	e1a01000 	mov	r1, r0
   299e0:	e1a00006 	mov	r0, r6
   299e4:	eb002fc6 	bl	35904 <memcpy>
   299e8:	e3e03000 	mvn	r3, #0
   299ec:	e1a02007 	mov	r2, r7
   299f0:	e1a0100d 	mov	r1, sp
   299f4:	e1a00005 	mov	r0, r5
   299f8:	e7c63004 	strb	r3, [r6, r4]
   299fc:	ebffff7e 	bl	297fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   29a00:	e24bd01c 	sub	sp, fp, #28
   29a04:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29a08:	e1a02006 	mov	r2, r6
   29a0c:	e1a01009 	mov	r1, r9
   29a10:	e1a00005 	mov	r0, r5
   29a14:	ebffff78 	bl	297fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   29a18:	e24bd01c 	sub	sp, fp, #28
   29a1c:	e8bd8bf0 	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   29a20:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29a24:	e3401003 	movt	r1, #3
   29a28:	e30d0864 	movw	r0, #55396	@ 0xd864
   29a2c:	e3400003 	movt	r0, #3
   29a30:	e3002233 	movw	r2, #563	@ 0x233
   29a34:	eb0008e8 	bl	2bddc <assertion_failed>
   29a38:	00041f58 	.word	0x00041f58

00029a3c <CDHCPClient::SendAndReceive(bool, unsigned int)>:
   29a3c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a40:	e30d88b0 	movw	r8, #55472	@ 0xd8b0
   29a44:	e3408003 	movt	r8, #3
   29a48:	e59f5188 	ldr	r5, [pc, #392]	@ 29bd8 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x19c>
   29a4c:	e24dd014 	sub	sp, sp, #20
   29a50:	e1a04000 	mov	r4, r0
   29a54:	e1a07001 	mov	r7, r1
   29a58:	e285b010 	add	fp, r5, #16
   29a5c:	e245a024 	sub	sl, r5, #36	@ 0x24
   29a60:	e58d200c 	str	r2, [sp, #12]
   29a64:	e3570000 	cmp	r7, #0
   29a68:	0a000043 	beq	29b7c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x140>
   29a6c:	e59d100c 	ldr	r1, [sp, #12]
   29a70:	e1a00004 	mov	r0, r4
   29a74:	ebffffb0 	bl	2993c <CDHCPClient::SendRequest(unsigned int)>
   29a78:	e2203001 	eor	r3, r0, #1
   29a7c:	e6ef3073 	uxtb	r3, r3
   29a80:	e3530000 	cmp	r3, #0
   29a84:	1a000044 	bne	29b9c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x160>
   29a88:	eb002d6a 	bl	35038 <CTimer::Get()>
   29a8c:	eb002a97 	bl	344f0 <CTimer::GetTicks() const>
   29a90:	e1a06000 	mov	r6, r0
   29a94:	ea000004 	b	29aac <CDHCPClient::SendAndReceive(bool, unsigned int)+0x70>
   29a98:	e2422005 	sub	r2, r2, #5
   29a9c:	e3520001 	cmp	r2, #1
   29aa0:	9a000018 	bls	29b08 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xcc>
   29aa4:	eb0007a4 	bl	2b93c <CScheduler::Get()>
   29aa8:	eb0006a4 	bl	2b540 <CScheduler::Yield()>
   29aac:	eb002d61 	bl	35038 <CTimer::Get()>
   29ab0:	eb002a8e 	bl	344f0 <CTimer::GetTicks() const>
   29ab4:	e5952000 	ldr	r2, [r5]
   29ab8:	e1a03000 	mov	r3, r0
   29abc:	e1a00004 	mov	r0, r4
   29ac0:	e0433006 	sub	r3, r3, r6
   29ac4:	e1530002 	cmp	r3, r2
   29ac8:	2a000011 	bcs	29b14 <CDHCPClient::SendAndReceive(bool, unsigned int)+0xd8>
   29acc:	ebfffee5 	bl	29668 <CDHCPClient::ReceiveMessage()>
   29ad0:	e2509000 	subs	r9, r0, #0
   29ad4:	0afffff2 	beq	29aa4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   29ad8:	e5d421e9 	ldrb	r2, [r4, #489]	@ 0x1e9
   29adc:	e3570000 	cmp	r7, #0
   29ae0:	1affffec 	bne	29a98 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x5c>
   29ae4:	e3520002 	cmp	r2, #2
   29ae8:	1affffed 	bne	29aa4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   29aec:	e1a00004 	mov	r0, r4
   29af0:	ebfffe36 	bl	293d0 <CDHCPClient::CheckConfig()>
   29af4:	e3500000 	cmp	r0, #0
   29af8:	0affffe9 	beq	29aa4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   29afc:	e59421ec 	ldr	r2, [r4, #492]	@ 0x1ec
   29b00:	e3520000 	cmp	r2, #0
   29b04:	0affffe6 	beq	29aa4 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x68>
   29b08:	e1a00009 	mov	r0, r9
   29b0c:	e28dd014 	add	sp, sp, #20
   29b10:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b14:	eb00132b 	bl	2e7c8 <CLogger::Get()>
   29b18:	e2855004 	add	r5, r5, #4
   29b1c:	e1a03008 	mov	r3, r8
   29b20:	e3a02002 	mov	r2, #2
   29b24:	e1a0100a 	mov	r1, sl
   29b28:	eb0014ef 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29b2c:	e155000b 	cmp	r5, fp
   29b30:	1affffcb 	bne	29a64 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x28>
   29b34:	eb001323 	bl	2e7c8 <CLogger::Get()>
   29b38:	e3570000 	cmp	r7, #0
   29b3c:	e30d2898 	movw	r2, #55448	@ 0xd898
   29b40:	e3402003 	movt	r2, #3
   29b44:	e30d188c 	movw	r1, #55436	@ 0xd88c
   29b48:	e3401003 	movt	r1, #3
   29b4c:	01a0c002 	moveq	ip, r2
   29b50:	11a0c001 	movne	ip, r1
   29b54:	e30d38d4 	movw	r3, #55508	@ 0xd8d4
   29b58:	e3403003 	movt	r3, #3
   29b5c:	e59f1078 	ldr	r1, [pc, #120]	@ 29bdc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   29b60:	e3a02002 	mov	r2, #2
   29b64:	e58dc000 	str	ip, [sp]
   29b68:	eb0014df 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29b6c:	e3a09000 	mov	r9, #0
   29b70:	e1a00009 	mov	r0, r9
   29b74:	e28dd014 	add	sp, sp, #20
   29b78:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b7c:	e59f105c 	ldr	r1, [pc, #92]	@ 29be0 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a4>
   29b80:	e3a0200c 	mov	r2, #12
   29b84:	e1a00004 	mov	r0, r4
   29b88:	e58471d0 	str	r7, [r4, #464]	@ 0x1d0
   29b8c:	ebffff1a 	bl	297fc <CDHCPClient::SendMessage(unsigned char const*, unsigned int)>
   29b90:	e2203001 	eor	r3, r0, #1
   29b94:	e6ef3073 	uxtb	r3, r3
   29b98:	eaffffb8 	b	29a80 <CDHCPClient::SendAndReceive(bool, unsigned int)+0x44>
   29b9c:	eb001309 	bl	2e7c8 <CLogger::Get()>
   29ba0:	e3570000 	cmp	r7, #0
   29ba4:	e30d2880 	movw	r2, #55424	@ 0xd880
   29ba8:	e3402003 	movt	r2, #3
   29bac:	e30d1878 	movw	r1, #55416	@ 0xd878
   29bb0:	e3401003 	movt	r1, #3
   29bb4:	01a0c002 	moveq	ip, r2
   29bb8:	11a0c001 	movne	ip, r1
   29bbc:	e3a02001 	mov	r2, #1
   29bc0:	e59f1014 	ldr	r1, [pc, #20]	@ 29bdc <CDHCPClient::SendAndReceive(bool, unsigned int)+0x1a0>
   29bc4:	e30d38a0 	movw	r3, #55456	@ 0xd8a0
   29bc8:	e3403003 	movt	r3, #3
   29bcc:	e58dc000 	str	ip, [sp]
   29bd0:	eb0014c5 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29bd4:	eaffffe4 	b	29b6c <CDHCPClient::SendAndReceive(bool, unsigned int)+0x130>
   29bd8:	00041f68 	.word	0x00041f68
   29bdc:	00041f44 	.word	0x00041f44
   29be0:	00041f4c 	.word	0x00041f4c

00029be4 <CDHCPClient::SelectAndRequest()>:
   29be4:	e92d4070 	push	{r4, r5, r6, lr}
   29be8:	e1a04000 	mov	r4, r0
   29bec:	e3a06001 	mov	r6, #1
   29bf0:	e24dd028 	sub	sp, sp, #40	@ 0x28
   29bf4:	e2845f43 	add	r5, r4, #268	@ 0x10c
   29bf8:	e28d0008 	add	r0, sp, #8
   29bfc:	e5c461c8 	strb	r6, [r4, #456]	@ 0x1c8
   29c00:	ebfffa17 	bl	28464 <CIPAddress::CIPAddress()>
   29c04:	e28d0008 	add	r0, sp, #8
   29c08:	ebfffae2 	bl	28798 <CIPAddress::SetBroadcast()>
   29c0c:	e3a02043 	mov	r2, #67	@ 0x43
   29c10:	e28d1008 	add	r1, sp, #8
   29c14:	e1a00005 	mov	r0, r5
   29c18:	ebffdaa6 	bl	206b8 <CSocket::Connect(CIPAddress&, unsigned short)>
   29c1c:	e3500000 	cmp	r0, #0
   29c20:	ba00006b 	blt	29dd4 <CDHCPClient::SelectAndRequest()+0x1f0>
   29c24:	e1a00005 	mov	r0, r5
   29c28:	e1a01006 	mov	r1, r6
   29c2c:	ebffdbc9 	bl	20b58 <CSocket::SetOptionBroadcast(bool)>
   29c30:	e2505000 	subs	r5, r0, #0
   29c34:	1a00005a 	bne	29da4 <CDHCPClient::SelectAndRequest()+0x1c0>
   29c38:	e1a00004 	mov	r0, r4
   29c3c:	ebfffe38 	bl	29524 <CDHCPClient::GetXID() const>
   29c40:	e1a02005 	mov	r2, r5
   29c44:	e58401cc 	str	r0, [r4, #460]	@ 0x1cc
   29c48:	e1a01005 	mov	r1, r5
   29c4c:	e1a00004 	mov	r0, r4
   29c50:	ebffff79 	bl	29a3c <CDHCPClient::SendAndReceive(bool, unsigned int)>
   29c54:	e3500000 	cmp	r0, #0
   29c58:	0a000066 	beq	29df8 <CDHCPClient::SelectAndRequest()+0x214>
   29c5c:	e59431d4 	ldr	r3, [r4, #468]	@ 0x1d4
   29c60:	e58431b4 	str	r3, [r4, #436]	@ 0x1b4
   29c64:	e3530000 	cmp	r3, #0
   29c68:	0a00006e 	beq	29e28 <CDHCPClient::SelectAndRequest()+0x244>
   29c6c:	e59431ec 	ldr	r3, [r4, #492]	@ 0x1ec
   29c70:	e58431b8 	str	r3, [r4, #440]	@ 0x1b8
   29c74:	e3530000 	cmp	r3, #0
   29c78:	0a000077 	beq	29e5c <CDHCPClient::SelectAndRequest()+0x278>
   29c7c:	e1a02005 	mov	r2, r5
   29c80:	e1a01006 	mov	r1, r6
   29c84:	e1a00004 	mov	r0, r4
   29c88:	ebffff6b 	bl	29a3c <CDHCPClient::SendAndReceive(bool, unsigned int)>
   29c8c:	e3500000 	cmp	r0, #0
   29c90:	0a000058 	beq	29df8 <CDHCPClient::SelectAndRequest()+0x214>
   29c94:	e5d431e9 	ldrb	r3, [r4, #489]	@ 0x1e9
   29c98:	e3530006 	cmp	r3, #6
   29c9c:	0a000074 	beq	29e74 <CDHCPClient::SelectAndRequest()+0x290>
   29ca0:	e1a00004 	mov	r0, r4
   29ca4:	ebfffdc9 	bl	293d0 <CDHCPClient::CheckConfig()>
   29ca8:	e3500000 	cmp	r0, #0
   29cac:	0a000053 	beq	29e00 <CDHCPClient::SelectAndRequest()+0x21c>
   29cb0:	e59421b4 	ldr	r2, [r4, #436]	@ 0x1b4
   29cb4:	e59431d4 	ldr	r3, [r4, #468]	@ 0x1d4
   29cb8:	e1520003 	cmp	r2, r3
   29cbc:	1a00005f 	bne	29e40 <CDHCPClient::SelectAndRequest()+0x25c>
   29cc0:	e59421b8 	ldr	r2, [r4, #440]	@ 0x1b8
   29cc4:	e59431ec 	ldr	r3, [r4, #492]	@ 0x1ec
   29cc8:	e1520003 	cmp	r2, r3
   29ccc:	1a00004d 	bne	29e08 <CDHCPClient::SelectAndRequest()+0x224>
   29cd0:	e28d0010 	add	r0, sp, #16
   29cd4:	ebfff9e2 	bl	28464 <CIPAddress::CIPAddress()>
   29cd8:	e59411b4 	ldr	r1, [r4, #436]	@ 0x1b4
   29cdc:	e28d0010 	add	r0, sp, #16
   29ce0:	ebfffa89 	bl	2870c <CIPAddress::Set(unsigned int)>
   29ce4:	e28d0018 	add	r0, sp, #24
   29ce8:	eb002355 	bl	32a44 <CString::CString()>
   29cec:	e28d1018 	add	r1, sp, #24
   29cf0:	e28d0010 	add	r0, sp, #16
   29cf4:	ebfffafb 	bl	288e8 <CIPAddress::Format(CString*) const>
   29cf8:	eb0012b2 	bl	2e7c8 <CLogger::Get()>
   29cfc:	e1a05000 	mov	r5, r0
   29d00:	e28d0018 	add	r0, sp, #24
   29d04:	eb002386 	bl	32b24 <CString::operator char const*() const>
   29d08:	e59f11a8 	ldr	r1, [pc, #424]	@ 29eb8 <CDHCPClient::SelectAndRequest()+0x2d4>
   29d0c:	e58d0000 	str	r0, [sp]
   29d10:	e3a02003 	mov	r2, #3
   29d14:	e1a00005 	mov	r0, r5
   29d18:	e30d39b0 	movw	r3, #55728	@ 0xd9b0
   29d1c:	e3403003 	movt	r3, #3
   29d20:	eb001471 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29d24:	e59400f8 	ldr	r0, [r4, #248]	@ 0xf8
   29d28:	e3500000 	cmp	r0, #0
   29d2c:	0a000058 	beq	29e94 <CDHCPClient::SelectAndRequest()+0x2b0>
   29d30:	e59411b4 	ldr	r1, [r4, #436]	@ 0x1b4
   29d34:	ebfff95a 	bl	282a4 <CNetConfig::SetIPAddress(unsigned int)>
   29d38:	e59411d8 	ldr	r1, [r4, #472]	@ 0x1d8
   29d3c:	e59400f8 	ldr	r0, [r4, #248]	@ 0xf8
   29d40:	ebfff96a 	bl	282f0 <CNetConfig::SetNetMask(unsigned int)>
   29d44:	e59411dc 	ldr	r1, [r4, #476]	@ 0x1dc
   29d48:	e59400f8 	ldr	r0, [r4, #248]	@ 0xf8
   29d4c:	ebfff97a 	bl	2833c <CNetConfig::SetDefaultGateway(unsigned int)>
   29d50:	e59411e0 	ldr	r1, [r4, #480]	@ 0x1e0
   29d54:	e59400f8 	ldr	r0, [r4, #248]	@ 0xf8
   29d58:	ebfff979 	bl	28344 <CNetConfig::SetDNSServer(unsigned int)>
   29d5c:	e2843f79 	add	r3, r4, #484	@ 0x1e4
   29d60:	eddf2b52 	vldr	d18, [pc, #328]	@ 29eb0 <CDHCPClient::SelectAndRequest()+0x2cc>
   29d64:	e28d0018 	add	r0, sp, #24
   29d68:	f463078f 	vld1.32	{d16}, [r3]
   29d6c:	e2843f7b 	add	r3, r4, #492	@ 0x1ec
   29d70:	f463178f 	vld1.32	{d17}, [r3]
   29d74:	e2843f6f 	add	r3, r4, #444	@ 0x1bc
   29d78:	f3f009a2 	vtbl.8	d16, {d16-d17}, d18
   29d7c:	f443078f 	vst1.32	{d16}, [r3]
   29d80:	e59431f4 	ldr	r3, [r4, #500]	@ 0x1f4
   29d84:	e58431c4 	str	r3, [r4, #452]	@ 0x1c4
   29d88:	e3a03001 	mov	r3, #1
   29d8c:	e5c431ac 	strb	r3, [r4, #428]	@ 0x1ac
   29d90:	e3a04000 	mov	r4, #0
   29d94:	eb0022f7 	bl	32978 <CString::~CString()>
   29d98:	e28d0010 	add	r0, sp, #16
   29d9c:	ebfff9d7 	bl	28500 <CIPAddress::~CIPAddress()>
   29da0:	ea000006 	b	29dc0 <CDHCPClient::SelectAndRequest()+0x1dc>
   29da4:	eb001287 	bl	2e7c8 <CLogger::Get()>
   29da8:	e30d390c 	movw	r3, #55564	@ 0xd90c
   29dac:	e3403003 	movt	r3, #3
   29db0:	e59f1100 	ldr	r1, [pc, #256]	@ 29eb8 <CDHCPClient::SelectAndRequest()+0x2d4>
   29db4:	e1a02006 	mov	r2, r6
   29db8:	eb00144b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29dbc:	e3a04001 	mov	r4, #1
   29dc0:	e28d0008 	add	r0, sp, #8
   29dc4:	ebfff9cd 	bl	28500 <CIPAddress::~CIPAddress()>
   29dc8:	e1a00004 	mov	r0, r4
   29dcc:	e28dd028 	add	sp, sp, #40	@ 0x28
   29dd0:	e8bd8070 	pop	{r4, r5, r6, pc}
   29dd4:	eb00127b 	bl	2e7c8 <CLogger::Get()>
   29dd8:	e3a01043 	mov	r1, #67	@ 0x43
   29ddc:	e1a02006 	mov	r2, r6
   29de0:	e58d1000 	str	r1, [sp]
   29de4:	e30d38e8 	movw	r3, #55528	@ 0xd8e8
   29de8:	e3403003 	movt	r3, #3
   29dec:	e59f10c4 	ldr	r1, [pc, #196]	@ 29eb8 <CDHCPClient::SelectAndRequest()+0x2d4>
   29df0:	eb00143d 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29df4:	eafffff0 	b	29dbc <CDHCPClient::SelectAndRequest()+0x1d8>
   29df8:	e3a04002 	mov	r4, #2
   29dfc:	eaffffef 	b	29dc0 <CDHCPClient::SelectAndRequest()+0x1dc>
   29e00:	e3a04004 	mov	r4, #4
   29e04:	eaffffed 	b	29dc0 <CDHCPClient::SelectAndRequest()+0x1dc>
   29e08:	eb00126e 	bl	2e7c8 <CLogger::Get()>
   29e0c:	e30d3990 	movw	r3, #55696	@ 0xd990
   29e10:	e3403003 	movt	r3, #3
   29e14:	e59f109c 	ldr	r1, [pc, #156]	@ 29eb8 <CDHCPClient::SelectAndRequest()+0x2d4>
   29e18:	e3a02002 	mov	r2, #2
   29e1c:	eb001432 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29e20:	e3a04005 	mov	r4, #5
   29e24:	eaffffe5 	b	29dc0 <CDHCPClient::SelectAndRequest()+0x1dc>
   29e28:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29e2c:	e3401003 	movt	r1, #3
   29e30:	e30d0928 	movw	r0, #55592	@ 0xd928
   29e34:	e3400003 	movt	r0, #3
   29e38:	e3a020fb 	mov	r2, #251	@ 0xfb
   29e3c:	eb0007e6 	bl	2bddc <assertion_failed>
   29e40:	eb001260 	bl	2e7c8 <CLogger::Get()>
   29e44:	e59f106c 	ldr	r1, [pc, #108]	@ 29eb8 <CDHCPClient::SelectAndRequest()+0x2d4>
   29e48:	e3a02002 	mov	r2, #2
   29e4c:	e30d3978 	movw	r3, #55672	@ 0xd978
   29e50:	e3403003 	movt	r3, #3
   29e54:	eb001424 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29e58:	eafffff0 	b	29e20 <CDHCPClient::SelectAndRequest()+0x23c>
   29e5c:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29e60:	e3401003 	movt	r1, #3
   29e64:	e30d0940 	movw	r0, #55616	@ 0xd940
   29e68:	e3400003 	movt	r0, #3
   29e6c:	e3a020fe 	mov	r2, #254	@ 0xfe
   29e70:	eb0007d9 	bl	2bddc <assertion_failed>
   29e74:	eb001253 	bl	2e7c8 <CLogger::Get()>
   29e78:	e59f1038 	ldr	r1, [pc, #56]	@ 29eb8 <CDHCPClient::SelectAndRequest()+0x2d4>
   29e7c:	e3a02002 	mov	r2, #2
   29e80:	e30d395c 	movw	r3, #55644	@ 0xd95c
   29e84:	e3403003 	movt	r3, #3
   29e88:	e3a04003 	mov	r4, #3
   29e8c:	eb001416 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29e90:	eaffffca 	b	29dc0 <CDHCPClient::SelectAndRequest()+0x1dc>
   29e94:	e30d175c 	movw	r1, #55132	@ 0xd75c
   29e98:	e3401003 	movt	r1, #3
   29e9c:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   29ea0:	e3400003 	movt	r0, #3
   29ea4:	e3a02f4a 	mov	r2, #296	@ 0x128
   29ea8:	eb0007cb 	bl	2bddc <assertion_failed>
   29eac:	e320f000 	nop	{0}
   29eb0:	03020100 	.word	0x03020100
   29eb4:	0f0e0d0c 	.word	0x0f0e0d0c
   29eb8:	00041f44 	.word	0x00041f44

00029ebc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]>:
   29ebc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   29ec0:	e1a04001 	mov	r4, r1
   29ec4:	e1a05000 	mov	r5, r0
   29ec8:	e24dd010 	sub	sp, sp, #16
   29ecc:	e1a06002 	mov	r6, r2
   29ed0:	eb00123c 	bl	2e7c8 <CLogger::Get()>
   29ed4:	e3540000 	cmp	r4, #0
   29ed8:	0a000040 	beq	29fe0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x124>
   29edc:	e59f1304 	ldr	r1, [pc, #772]	@ 2a1e8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x32c>
   29ee0:	e3a02004 	mov	r2, #4
   29ee4:	e28d8008 	add	r8, sp, #8
   29ee8:	e30d79c4 	movw	r7, #55748	@ 0xd9c4
   29eec:	e3407003 	movt	r7, #3
   29ef0:	e30d3a60 	movw	r3, #55904	@ 0xda60
   29ef4:	e3403003 	movt	r3, #3
   29ef8:	e58d7000 	str	r7, [sp]
   29efc:	eb0013fa 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   29f00:	e1a00008 	mov	r0, r8
   29f04:	ebfff956 	bl	28464 <CIPAddress::CIPAddress()>
   29f08:	e3a03000 	mov	r3, #0
   29f0c:	e59511b8 	ldr	r1, [r5, #440]	@ 0x1b8
   29f10:	e1a00008 	mov	r0, r8
   29f14:	e5c531c8 	strb	r3, [r5, #456]	@ 0x1c8
   29f18:	ebfff9fb 	bl	2870c <CIPAddress::Set(unsigned int)>
   29f1c:	e2854f43 	add	r4, r5, #268	@ 0x10c
   29f20:	e3a02043 	mov	r2, #67	@ 0x43
   29f24:	e1a01008 	mov	r1, r8
   29f28:	e1a00004 	mov	r0, r4
   29f2c:	ebffd9e1 	bl	206b8 <CSocket::Connect(CIPAddress&, unsigned short)>
   29f30:	e3500000 	cmp	r0, #0
   29f34:	ba000039 	blt	2a020 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x164>
   29f38:	e5d511c8 	ldrb	r1, [r5, #456]	@ 0x1c8
   29f3c:	e1a00004 	mov	r0, r4
   29f40:	ebffdb04 	bl	20b58 <CSocket::SetOptionBroadcast(bool)>
   29f44:	e3500000 	cmp	r0, #0
   29f48:	0a000018 	beq	29fb0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0xf4>
   29f4c:	ea000085 	b	2a168 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x2ac>
   29f50:	e1a00005 	mov	r0, r5
   29f54:	ebfffd72 	bl	29524 <CDHCPClient::GetXID() const>
   29f58:	e59521b4 	ldr	r2, [r5, #436]	@ 0x1b4
   29f5c:	e1a03000 	mov	r3, r0
   29f60:	e3a01001 	mov	r1, #1
   29f64:	e1a00005 	mov	r0, r5
   29f68:	e58531cc 	str	r3, [r5, #460]	@ 0x1cc
   29f6c:	ebfffeb2 	bl	29a3c <CDHCPClient::SendAndReceive(bool, unsigned int)>
   29f70:	e3500000 	cmp	r0, #0
   29f74:	1a00003b 	bne	2a068 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x1ac>
   29f78:	eb002c2e 	bl	35038 <CTimer::Get()>
   29f7c:	eb00295d 	bl	344f8 <CTimer::GetUptime() const>
   29f80:	e59511b0 	ldr	r1, [r5, #432]	@ 0x1b0
   29f84:	e0403001 	sub	r3, r0, r1
   29f88:	e1530006 	cmp	r3, r6
   29f8c:	2a00000d 	bcs	29fc8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x10c>
   29f90:	e0811006 	add	r1, r1, r6
   29f94:	e0411000 	sub	r1, r1, r0
   29f98:	e3510077 	cmp	r1, #119	@ 0x77
   29f9c:	81a040a1 	lsrhi	r4, r1, #1
   29fa0:	93a0403c 	movls	r4, #60	@ 0x3c
   29fa4:	eb000664 	bl	2b93c <CScheduler::Get()>
   29fa8:	e1a01004 	mov	r1, r4
   29fac:	eb000613 	bl	2b800 <CScheduler::Sleep(unsigned int)>
   29fb0:	eb002c20 	bl	35038 <CTimer::Get()>
   29fb4:	eb00294f 	bl	344f8 <CTimer::GetUptime() const>
   29fb8:	e59531b0 	ldr	r3, [r5, #432]	@ 0x1b0
   29fbc:	e0400003 	sub	r0, r0, r3
   29fc0:	e1560000 	cmp	r6, r0
   29fc4:	8affffe1 	bhi	29f50 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x94>
   29fc8:	e3a04002 	mov	r4, #2
   29fcc:	e1a00008 	mov	r0, r8
   29fd0:	ebfff94a 	bl	28500 <CIPAddress::~CIPAddress()>
   29fd4:	e1a00004 	mov	r0, r4
   29fd8:	e28dd010 	add	sp, sp, #16
   29fdc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   29fe0:	e59f1200 	ldr	r1, [pc, #512]	@ 2a1e8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x32c>
   29fe4:	e3a02004 	mov	r2, #4
   29fe8:	e28d8008 	add	r8, sp, #8
   29fec:	e30d79d0 	movw	r7, #55760	@ 0xd9d0
   29ff0:	e3407003 	movt	r7, #3
   29ff4:	e30d3a60 	movw	r3, #55904	@ 0xda60
   29ff8:	e3403003 	movt	r3, #3
   29ffc:	e58d7000 	str	r7, [sp]
   2a000:	eb0013b9 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a004:	e1a00008 	mov	r0, r8
   2a008:	ebfff915 	bl	28464 <CIPAddress::CIPAddress()>
   2a00c:	e3a03001 	mov	r3, #1
   2a010:	e1a00008 	mov	r0, r8
   2a014:	e5c531c8 	strb	r3, [r5, #456]	@ 0x1c8
   2a018:	ebfff9de 	bl	28798 <CIPAddress::SetBroadcast()>
   2a01c:	eaffffbe 	b	29f1c <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x60>
   2a020:	eb0011e8 	bl	2e7c8 <CLogger::Get()>
   2a024:	e5d511c8 	ldrb	r1, [r5, #456]	@ 0x1c8
   2a028:	e30d39e4 	movw	r3, #55780	@ 0xd9e4
   2a02c:	e3403003 	movt	r3, #3
   2a030:	e3510000 	cmp	r1, #0
   2a034:	e30d29dc 	movw	r2, #55772	@ 0xd9dc
   2a038:	e3402003 	movt	r2, #3
   2a03c:	e3a01043 	mov	r1, #67	@ 0x43
   2a040:	01a02003 	moveq	r2, r3
   2a044:	e58d1004 	str	r1, [sp, #4]
   2a048:	e30d39e8 	movw	r3, #55784	@ 0xd9e8
   2a04c:	e3403003 	movt	r3, #3
   2a050:	e58d2000 	str	r2, [sp]
   2a054:	e3a02001 	mov	r2, #1
   2a058:	e59f1188 	ldr	r1, [pc, #392]	@ 2a1e8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x32c>
   2a05c:	eb0013a2 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a060:	e3a04001 	mov	r4, #1
   2a064:	eaffffd8 	b	29fcc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a068:	e5d531e9 	ldrb	r3, [r5, #489]	@ 0x1e9
   2a06c:	e3530006 	cmp	r3, #6
   2a070:	0a000043 	beq	2a184 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x2c8>
   2a074:	e1a00005 	mov	r0, r5
   2a078:	ebfffcd4 	bl	293d0 <CDHCPClient::CheckConfig()>
   2a07c:	e3500000 	cmp	r0, #0
   2a080:	0a00004d 	beq	2a1bc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x300>
   2a084:	e59531ec 	ldr	r3, [r5, #492]	@ 0x1ec
   2a088:	e58531b8 	str	r3, [r5, #440]	@ 0x1b8
   2a08c:	e3530000 	cmp	r3, #0
   2a090:	0a000043 	beq	2a1a4 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x2e8>
   2a094:	e59500f8 	ldr	r0, [r5, #248]	@ 0xf8
   2a098:	e3500000 	cmp	r0, #0
   2a09c:	0a000048 	beq	2a1c4 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x308>
   2a0a0:	ebfff8d3 	bl	283f4 <CNetConfig::GetIPAddress() const>
   2a0a4:	e59511d4 	ldr	r1, [r5, #468]	@ 0x1d4
   2a0a8:	ebfff985 	bl	286c4 <CIPAddress::operator!=(unsigned int) const>
   2a0ac:	e3500000 	cmp	r0, #0
   2a0b0:	0a000019 	beq	2a11c <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x260>
   2a0b4:	e59500f8 	ldr	r0, [r5, #248]	@ 0xf8
   2a0b8:	ebfff8d1 	bl	28404 <CNetConfig::GetNetMask() const>
   2a0bc:	e59531d8 	ldr	r3, [r5, #472]	@ 0x1d8
   2a0c0:	e5902000 	ldr	r2, [r0]
   2a0c4:	e1520003 	cmp	r2, r3
   2a0c8:	0a000013 	beq	2a11c <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x260>
   2a0cc:	e59500f8 	ldr	r0, [r5, #248]	@ 0xf8
   2a0d0:	ebfff8cd 	bl	2840c <CNetConfig::GetDefaultGateway() const>
   2a0d4:	e59511dc 	ldr	r1, [r5, #476]	@ 0x1dc
   2a0d8:	ebfff979 	bl	286c4 <CIPAddress::operator!=(unsigned int) const>
   2a0dc:	e3500000 	cmp	r0, #0
   2a0e0:	0a00000d 	beq	2a11c <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x260>
   2a0e4:	e59500f8 	ldr	r0, [r5, #248]	@ 0xf8
   2a0e8:	ebfff8c9 	bl	28414 <CNetConfig::GetDNSServer() const>
   2a0ec:	e59511e0 	ldr	r1, [r5, #480]	@ 0x1e0
   2a0f0:	ebfff973 	bl	286c4 <CIPAddress::operator!=(unsigned int) const>
   2a0f4:	e3500000 	cmp	r0, #0
   2a0f8:	0a000007 	beq	2a11c <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x260>
   2a0fc:	eb0011b1 	bl	2e7c8 <CLogger::Get()>
   2a100:	e59f10e0 	ldr	r1, [pc, #224]	@ 2a1e8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x32c>
   2a104:	e3a02002 	mov	r2, #2
   2a108:	e30d3a2c 	movw	r3, #55852	@ 0xda2c
   2a10c:	e3403003 	movt	r3, #3
   2a110:	e3a04005 	mov	r4, #5
   2a114:	eb001374 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a118:	eaffffab 	b	29fcc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a11c:	e2852f79 	add	r2, r5, #484	@ 0x1e4
   2a120:	e2853f7b 	add	r3, r5, #492	@ 0x1ec
   2a124:	eddf2b2d 	vldr	d18, [pc, #180]	@ 2a1e0 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x324>
   2a128:	e3a04000 	mov	r4, #0
   2a12c:	f463178f 	vld1.32	{d17}, [r3]
   2a130:	e2853f6f 	add	r3, r5, #444	@ 0x1bc
   2a134:	f462078f 	vld1.32	{d16}, [r2]
   2a138:	f3f009a2 	vtbl.8	d16, {d16-d17}, d18
   2a13c:	f443078f 	vst1.32	{d16}, [r3]
   2a140:	e59531f4 	ldr	r3, [r5, #500]	@ 0x1f4
   2a144:	e58531c4 	str	r3, [r5, #452]	@ 0x1c4
   2a148:	eb00119e 	bl	2e7c8 <CLogger::Get()>
   2a14c:	e59f1094 	ldr	r1, [pc, #148]	@ 2a1e8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x32c>
   2a150:	e3a02004 	mov	r2, #4
   2a154:	e58d7000 	str	r7, [sp]
   2a158:	e30d3a50 	movw	r3, #55888	@ 0xda50
   2a15c:	e3403003 	movt	r3, #3
   2a160:	eb001361 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a164:	eaffff98 	b	29fcc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a168:	eb001196 	bl	2e7c8 <CLogger::Get()>
   2a16c:	e59f1074 	ldr	r1, [pc, #116]	@ 2a1e8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x32c>
   2a170:	e3a02001 	mov	r2, #1
   2a174:	e30d390c 	movw	r3, #55564	@ 0xd90c
   2a178:	e3403003 	movt	r3, #3
   2a17c:	eb00135a 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a180:	eaffffb6 	b	2a060 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x1a4>
   2a184:	eb00118f 	bl	2e7c8 <CLogger::Get()>
   2a188:	e59f1058 	ldr	r1, [pc, #88]	@ 2a1e8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x32c>
   2a18c:	e3a02002 	mov	r2, #2
   2a190:	e30d395c 	movw	r3, #55644	@ 0xd95c
   2a194:	e3403003 	movt	r3, #3
   2a198:	e3a04003 	mov	r4, #3
   2a19c:	eb001352 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a1a0:	eaffff89 	b	29fcc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a1a4:	eb001187 	bl	2e7c8 <CLogger::Get()>
   2a1a8:	e30d3a0c 	movw	r3, #55820	@ 0xda0c
   2a1ac:	e3403003 	movt	r3, #3
   2a1b0:	e59f1030 	ldr	r1, [pc, #48]	@ 2a1e8 <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x32c>
   2a1b4:	e3a02002 	mov	r2, #2
   2a1b8:	eb00134b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a1bc:	e3a04004 	mov	r4, #4
   2a1c0:	eaffff81 	b	29fcc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]+0x110>
   2a1c4:	e30d175c 	movw	r1, #55132	@ 0xd75c
   2a1c8:	e3401003 	movt	r1, #3
   2a1cc:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   2a1d0:	e3400003 	movt	r0, #3
   2a1d4:	e3002197 	movw	r2, #407	@ 0x197
   2a1d8:	eb0006ff 	bl	2bddc <assertion_failed>
   2a1dc:	e320f000 	nop	{0}
   2a1e0:	03020100 	.word	0x03020100
   2a1e4:	0f0e0d0c 	.word	0x0f0e0d0c
   2a1e8:	00041f44 	.word	0x00041f44

0002a1ec <CDHCPClient::RenewOrRebind(bool, unsigned int)>:
   2a1ec:	e92d4070 	push	{r4, r5, r6, lr}
   2a1f0:	e1a04000 	mov	r4, r0
   2a1f4:	e1a05002 	mov	r5, r2
   2a1f8:	e1a06001 	mov	r6, r1
   2a1fc:	eb002b8d 	bl	35038 <CTimer::Get()>
   2a200:	eb0028bc 	bl	344f8 <CTimer::GetUptime() const>
   2a204:	e59431b0 	ldr	r3, [r4, #432]	@ 0x1b0
   2a208:	e0400003 	sub	r0, r0, r3
   2a20c:	e1500005 	cmp	r0, r5
   2a210:	2a000004 	bcs	2a228 <CDHCPClient::RenewOrRebind(bool, unsigned int)+0x3c>
   2a214:	e1a02005 	mov	r2, r5
   2a218:	e1a01006 	mov	r1, r6
   2a21c:	e1a00004 	mov	r0, r4
   2a220:	e8bd4070 	pop	{r4, r5, r6, lr}
   2a224:	eaffff24 	b	29ebc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]>
   2a228:	e3a00002 	mov	r0, #2
   2a22c:	e8bd8070 	pop	{r4, r5, r6, pc}

0002a230 <CDHCPClient::Run()>:
   2a230:	e92d4070 	push	{r4, r5, r6, lr}
   2a234:	e2804f43 	add	r4, r0, #268	@ 0x10c
   2a238:	e3a01044 	mov	r1, #68	@ 0x44
   2a23c:	e24dde23 	sub	sp, sp, #560	@ 0x230
   2a240:	e1a05000 	mov	r5, r0
   2a244:	e1a00004 	mov	r0, r4
   2a248:	ebffd903 	bl	2065c <CSocket::Bind(unsigned short)>
   2a24c:	e3500000 	cmp	r0, #0
   2a250:	ba00005a 	blt	2a3c0 <CDHCPClient::Run()+0x190>
   2a254:	e1a00005 	mov	r0, r5
   2a258:	ebfffe61 	bl	29be4 <CDHCPClient::SelectAndRequest()>
   2a25c:	e3500001 	cmp	r0, #1
   2a260:	0a00000a 	beq	2a290 <CDHCPClient::Run()+0x60>
   2a264:	e2400002 	sub	r0, r0, #2
   2a268:	e6ef0070 	uxtb	r0, r0
   2a26c:	e3500003 	cmp	r0, #3
   2a270:	8a000016 	bhi	2a2d0 <CDHCPClient::Run()+0xa0>
   2a274:	eb0005b0 	bl	2b93c <CScheduler::Get()>
   2a278:	e3a0103c 	mov	r1, #60	@ 0x3c
   2a27c:	eb00055f 	bl	2b800 <CScheduler::Sleep(unsigned int)>
   2a280:	e1a00005 	mov	r0, r5
   2a284:	ebfffe56 	bl	29be4 <CDHCPClient::SelectAndRequest()>
   2a288:	e3500001 	cmp	r0, #1
   2a28c:	1afffff4 	bne	2a264 <CDHCPClient::Run()+0x34>
   2a290:	e28dde23 	add	sp, sp, #560	@ 0x230
   2a294:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a298:	e59561c4 	ldr	r6, [r5, #452]	@ 0x1c4
   2a29c:	eb002b65 	bl	35038 <CTimer::Get()>
   2a2a0:	eb002894 	bl	344f8 <CTimer::GetUptime() const>
   2a2a4:	e59531b0 	ldr	r3, [r5, #432]	@ 0x1b0
   2a2a8:	e0403003 	sub	r3, r0, r3
   2a2ac:	e1560003 	cmp	r6, r3
   2a2b0:	9a00001e 	bls	2a330 <CDHCPClient::Run()+0x100>
   2a2b4:	e1a02006 	mov	r2, r6
   2a2b8:	e3a01001 	mov	r1, #1
   2a2bc:	e1a00005 	mov	r0, r5
   2a2c0:	ebfffefd 	bl	29ebc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]>
   2a2c4:	e3500001 	cmp	r0, #1
   2a2c8:	0afffff0 	beq	2a290 <CDHCPClient::Run()+0x60>
   2a2cc:	8a000030 	bhi	2a394 <CDHCPClient::Run()+0x164>
   2a2d0:	eb002b58 	bl	35038 <CTimer::Get()>
   2a2d4:	eb002887 	bl	344f8 <CTimer::GetUptime() const>
   2a2d8:	e58501b0 	str	r0, [r5, #432]	@ 0x1b0
   2a2dc:	eb002b55 	bl	35038 <CTimer::Get()>
   2a2e0:	eb002884 	bl	344f8 <CTimer::GetUptime() const>
   2a2e4:	e59521b0 	ldr	r2, [r5, #432]	@ 0x1b0
   2a2e8:	e59531c0 	ldr	r3, [r5, #448]	@ 0x1c0
   2a2ec:	e0400002 	sub	r0, r0, r2
   2a2f0:	e1500003 	cmp	r0, r3
   2a2f4:	3a000002 	bcc	2a304 <CDHCPClient::Run()+0xd4>
   2a2f8:	eaffffe6 	b	2a298 <CDHCPClient::Run()+0x68>
   2a2fc:	eb00058e 	bl	2b93c <CScheduler::Get()>
   2a300:	eb00048e 	bl	2b540 <CScheduler::Yield()>
   2a304:	e3a03040 	mov	r3, #64	@ 0x40
   2a308:	e3a02f89 	mov	r2, #548	@ 0x224
   2a30c:	e28d100c 	add	r1, sp, #12
   2a310:	e1a00004 	mov	r0, r4
   2a314:	ebffd979 	bl	20900 <CSocket::Receive(void*, unsigned int, int)>
   2a318:	e3500000 	cmp	r0, #0
   2a31c:	cafffff6 	bgt	2a2fc <CDHCPClient::Run()+0xcc>
   2a320:	eb000585 	bl	2b93c <CScheduler::Get()>
   2a324:	e3a0100a 	mov	r1, #10
   2a328:	eb000534 	bl	2b800 <CScheduler::Sleep(unsigned int)>
   2a32c:	eaffffea 	b	2a2dc <CDHCPClient::Run()+0xac>
   2a330:	e59561bc 	ldr	r6, [r5, #444]	@ 0x1bc
   2a334:	eb002b3f 	bl	35038 <CTimer::Get()>
   2a338:	eb00286e 	bl	344f8 <CTimer::GetUptime() const>
   2a33c:	e59531b0 	ldr	r3, [r5, #432]	@ 0x1b0
   2a340:	e0403003 	sub	r3, r0, r3
   2a344:	e1560003 	cmp	r6, r3
   2a348:	9a00000a 	bls	2a378 <CDHCPClient::Run()+0x148>
   2a34c:	e1a02006 	mov	r2, r6
   2a350:	e3a01000 	mov	r1, #0
   2a354:	e1a00005 	mov	r0, r5
   2a358:	ebfffed7 	bl	29ebc <CDHCPClient::RenewOrRebind(bool, unsigned int) [clone .part.0]>
   2a35c:	e3500001 	cmp	r0, #1
   2a360:	0affffca 	beq	2a290 <CDHCPClient::Run()+0x60>
   2a364:	9affffd9 	bls	2a2d0 <CDHCPClient::Run()+0xa0>
   2a368:	e2403003 	sub	r3, r0, #3
   2a36c:	e6ef3073 	uxtb	r3, r3
   2a370:	e3530002 	cmp	r3, #2
   2a374:	9a00000a 	bls	2a3a4 <CDHCPClient::Run()+0x174>
   2a378:	eb001112 	bl	2e7c8 <CLogger::Get()>
   2a37c:	e59f107c 	ldr	r1, [pc, #124]	@ 2a400 <CDHCPClient::Run()+0x1d0>
   2a380:	e3a02001 	mov	r2, #1
   2a384:	e30d3a84 	movw	r3, #55940	@ 0xda84
   2a388:	e3403003 	movt	r3, #3
   2a38c:	eb0012d6 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a390:	ea000003 	b	2a3a4 <CDHCPClient::Run()+0x174>
   2a394:	e2403003 	sub	r3, r0, #3
   2a398:	e6ef3073 	uxtb	r3, r3
   2a39c:	e3530002 	cmp	r3, #2
   2a3a0:	8affffe2 	bhi	2a330 <CDHCPClient::Run()+0x100>
   2a3a4:	e59500f8 	ldr	r0, [r5, #248]	@ 0xf8
   2a3a8:	e3a03000 	mov	r3, #0
   2a3ac:	e5c531ac 	strb	r3, [r5, #428]	@ 0x1ac
   2a3b0:	e1500003 	cmp	r0, r3
   2a3b4:	0a00000b 	beq	2a3e8 <CDHCPClient::Run()+0x1b8>
   2a3b8:	ebfff797 	bl	2821c <CNetConfig::Reset()>
   2a3bc:	eaffffa4 	b	2a254 <CDHCPClient::Run()+0x24>
   2a3c0:	eb001100 	bl	2e7c8 <CLogger::Get()>
   2a3c4:	e3a0c044 	mov	ip, #68	@ 0x44
   2a3c8:	e59f1030 	ldr	r1, [pc, #48]	@ 2a400 <CDHCPClient::Run()+0x1d0>
   2a3cc:	e3a02001 	mov	r2, #1
   2a3d0:	e58dc000 	str	ip, [sp]
   2a3d4:	e30d3a6c 	movw	r3, #55916	@ 0xda6c
   2a3d8:	e3403003 	movt	r3, #3
   2a3dc:	eb0012c2 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a3e0:	e28dde23 	add	sp, sp, #560	@ 0x230
   2a3e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2a3e8:	e30d175c 	movw	r1, #55132	@ 0xd75c
   2a3ec:	e3401003 	movt	r1, #3
   2a3f0:	e30c0c10 	movw	r0, #52240	@ 0xcc10
   2a3f4:	e3400003 	movt	r0, #3
   2a3f8:	e3a02e1b 	mov	r2, #432	@ 0x1b0
   2a3fc:	eb000676 	bl	2bddc <assertion_failed>
   2a400:	00041f44 	.word	0x00041f44

0002a404 <CNetSocket::Connect(char const*, char const*)>:
   2a404:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2a408:	e2516000 	subs	r6, r1, #0
   2a40c:	e24dd01c 	sub	sp, sp, #28
   2a410:	0a00003a 	beq	2a500 <CNetSocket::Connect(char const*, char const*)+0xfc>
   2a414:	e1a07002 	mov	r7, r2
   2a418:	e3520000 	cmp	r2, #0
   2a41c:	0a00003d 	beq	2a518 <CNetSocket::Connect(char const*, char const*)+0x114>
   2a420:	e1a04000 	mov	r4, r0
   2a424:	e3a0200a 	mov	r2, #10
   2a428:	e28d1008 	add	r1, sp, #8
   2a42c:	e1a00007 	mov	r0, r7
   2a430:	e3a03000 	mov	r3, #0
   2a434:	e58d3008 	str	r3, [sp, #8]
   2a438:	eb002c50 	bl	35580 <strtoul>
   2a43c:	e59d3008 	ldr	r3, [sp, #8]
   2a440:	e1a05000 	mov	r5, r0
   2a444:	e3530000 	cmp	r3, #0
   2a448:	0a000002 	beq	2a458 <CNetSocket::Connect(char const*, char const*)+0x54>
   2a44c:	e1d330d0 	ldrsb	r3, [r3]
   2a450:	e3530000 	cmp	r3, #0
   2a454:	1a00003b 	bne	2a548 <CNetSocket::Connect(char const*, char const*)+0x144>
   2a458:	e2452001 	sub	r2, r5, #1
   2a45c:	e30f3ffe 	movw	r3, #65534	@ 0xfffe
   2a460:	e1520003 	cmp	r2, r3
   2a464:	8a000037 	bhi	2a548 <CNetSocket::Connect(char const*, char const*)+0x144>
   2a468:	e5943004 	ldr	r3, [r4, #4]
   2a46c:	e3530000 	cmp	r3, #0
   2a470:	0a00002e 	beq	2a530 <CNetSocket::Connect(char const*, char const*)+0x12c>
   2a474:	e28d0010 	add	r0, sp, #16
   2a478:	ebfff7f9 	bl	28464 <CIPAddress::CIPAddress()>
   2a47c:	e5941004 	ldr	r1, [r4, #4]
   2a480:	e28d000c 	add	r0, sp, #12
   2a484:	eb000063 	bl	2a618 <CDNSClient::CDNSClient(CNetSubSystem*)>
   2a488:	e28d2010 	add	r2, sp, #16
   2a48c:	e1a01006 	mov	r1, r6
   2a490:	e28d000c 	add	r0, sp, #12
   2a494:	eb0000af 	bl	2a758 <CDNSClient::Resolve(char const*, CIPAddress*)>
   2a498:	e3500000 	cmp	r0, #0
   2a49c:	0a00000d 	beq	2a4d8 <CNetSocket::Connect(char const*, char const*)+0xd4>
   2a4a0:	e5943000 	ldr	r3, [r4]
   2a4a4:	e1a00004 	mov	r0, r4
   2a4a8:	e6ff2075 	uxth	r2, r5
   2a4ac:	e28d1010 	add	r1, sp, #16
   2a4b0:	e593300c 	ldr	r3, [r3, #12]
   2a4b4:	e12fff33 	blx	r3
   2a4b8:	e1a04000 	mov	r4, r0
   2a4bc:	e28d000c 	add	r0, sp, #12
   2a4c0:	eb00005e 	bl	2a640 <CDNSClient::~CDNSClient()>
   2a4c4:	e28d0010 	add	r0, sp, #16
   2a4c8:	ebfff80c 	bl	28500 <CIPAddress::~CIPAddress()>
   2a4cc:	e1a00004 	mov	r0, r4
   2a4d0:	e28dd01c 	add	sp, sp, #28
   2a4d4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a4d8:	eb0010ba 	bl	2e7c8 <CLogger::Get()>
   2a4dc:	e3a02004 	mov	r2, #4
   2a4e0:	e58d6000 	str	r6, [sp]
   2a4e4:	e30d3ac8 	movw	r3, #56008	@ 0xdac8
   2a4e8:	e3403003 	movt	r3, #3
   2a4ec:	e3011f78 	movw	r1, #8056	@ 0x1f78
   2a4f0:	e3401004 	movt	r1, #4
   2a4f4:	e3e04000 	mvn	r4, #0
   2a4f8:	eb00127b 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a4fc:	eaffffee 	b	2a4bc <CNetSocket::Connect(char const*, char const*)+0xb8>
   2a500:	e30d1a94 	movw	r1, #55956	@ 0xda94
   2a504:	e3401003 	movt	r1, #3
   2a508:	e30b06f8 	movw	r0, #46840	@ 0xb6f8
   2a50c:	e3400003 	movt	r0, #3
   2a510:	e3a0202a 	mov	r2, #42	@ 0x2a
   2a514:	eb000630 	bl	2bddc <assertion_failed>
   2a518:	e30d1a94 	movw	r1, #55956	@ 0xda94
   2a51c:	e3401003 	movt	r1, #3
   2a520:	e30d0aa4 	movw	r0, #55972	@ 0xdaa4
   2a524:	e3400003 	movt	r0, #3
   2a528:	e3a0202b 	mov	r2, #43	@ 0x2b
   2a52c:	eb00062a 	bl	2bddc <assertion_failed>
   2a530:	e30d1a94 	movw	r1, #55956	@ 0xda94
   2a534:	e3401003 	movt	r1, #3
   2a538:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   2a53c:	e3400003 	movt	r0, #3
   2a540:	e3a02037 	mov	r2, #55	@ 0x37
   2a544:	eb000624 	bl	2bddc <assertion_failed>
   2a548:	eb00109e 	bl	2e7c8 <CLogger::Get()>
   2a54c:	e3a02004 	mov	r2, #4
   2a550:	e58d7000 	str	r7, [sp]
   2a554:	e30d3ab0 	movw	r3, #55984	@ 0xdab0
   2a558:	e3403003 	movt	r3, #3
   2a55c:	e3011f78 	movw	r1, #8056	@ 0x1f78
   2a560:	e3401004 	movt	r1, #4
   2a564:	e3e04000 	mvn	r4, #0
   2a568:	eb00125f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2a56c:	eaffffd6 	b	2a4cc <CNetSocket::Connect(char const*, char const*)+0xc8>

0002a570 <CNetSocket::CNetSocket(CNetSubSystem*)>:
   2a570:	e3510000 	cmp	r1, #0
   2a574:	e59f2024 	ldr	r2, [pc, #36]	@ 2a5a0 <CNetSocket::CNetSocket(CNetSubSystem*)+0x30>
   2a578:	e5802000 	str	r2, [r0]
   2a57c:	e5801004 	str	r1, [r0, #4]
   2a580:	112fff1e 	bxne	lr
   2a584:	e30d1a94 	movw	r1, #55956	@ 0xda94
   2a588:	e3401003 	movt	r1, #3
   2a58c:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   2a590:	e3400003 	movt	r0, #3
   2a594:	e3a02020 	mov	r2, #32
   2a598:	e92d4010 	push	{r4, lr}
   2a59c:	eb00060e 	bl	2bddc <assertion_failed>
   2a5a0:	00041f8c 	.word	0x00041f8c

0002a5a4 <CNetSocket::~CNetSocket()>:
   2a5a4:	e12fff1e 	bx	lr

0002a5a8 <CNetSocket::~CNetSocket()>:
   2a5a8:	e92d4010 	push	{r4, lr}
   2a5ac:	e3a01008 	mov	r1, #8
   2a5b0:	e1a04000 	mov	r4, r0
   2a5b4:	eb002ef2 	bl	36184 <operator delete(void*, unsigned int)>
   2a5b8:	e1a00004 	mov	r0, r4
   2a5bc:	e8bd8010 	pop	{r4, pc}

0002a5c0 <CNetSocket::GetNetSubSystem()>:
   2a5c0:	e5900004 	ldr	r0, [r0, #4]
   2a5c4:	e3500000 	cmp	r0, #0
   2a5c8:	112fff1e 	bxne	lr
   2a5cc:	e30d1a94 	movw	r1, #55956	@ 0xda94
   2a5d0:	e3401003 	movt	r1, #3
   2a5d4:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   2a5d8:	e3400003 	movt	r0, #3
   2a5dc:	e3a02046 	mov	r2, #70	@ 0x46
   2a5e0:	e92d4010 	push	{r4, lr}
   2a5e4:	eb0005fc 	bl	2bddc <assertion_failed>

0002a5e8 <CNetSocket::Bind(unsigned short)>:
   2a5e8:	e3e00000 	mvn	r0, #0
   2a5ec:	e12fff1e 	bx	lr

0002a5f0 <CNetSocket::Listen(unsigned int)>:
   2a5f0:	e3e00000 	mvn	r0, #0
   2a5f4:	e12fff1e 	bx	lr

0002a5f8 <CNetSocket::Accept(CIPAddress*, unsigned short*)>:
   2a5f8:	e3a00000 	mov	r0, #0
   2a5fc:	e12fff1e 	bx	lr

0002a600 <CNetSocket::SendTo(void const*, unsigned int, int, CIPAddress&, unsigned short)>:
   2a600:	e3e00000 	mvn	r0, #0
   2a604:	e12fff1e 	bx	lr

0002a608 <CNetSocket::ReceiveFrom(void*, unsigned int, int, CIPAddress*, unsigned short*)>:
   2a608:	e3e00000 	mvn	r0, #0
   2a60c:	e12fff1e 	bx	lr

0002a610 <CNetSocket::SetOptionBroadcast(bool)>:
   2a610:	e3e00000 	mvn	r0, #0
   2a614:	e12fff1e 	bx	lr

0002a618 <CDNSClient::CDNSClient(CNetSubSystem*)>:
   2a618:	e3510000 	cmp	r1, #0
   2a61c:	e5801000 	str	r1, [r0]
   2a620:	112fff1e 	bxne	lr
   2a624:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2a628:	e3401003 	movt	r1, #3
   2a62c:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   2a630:	e3400003 	movt	r0, #3
   2a634:	e3a02056 	mov	r2, #86	@ 0x56
   2a638:	e92d4010 	push	{r4, lr}
   2a63c:	eb0005e6 	bl	2bddc <assertion_failed>

0002a640 <CDNSClient::~CDNSClient()>:
   2a640:	e12fff1e 	bx	lr

0002a644 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>:
   2a644:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2a648:	e2510000 	subs	r0, r1, #0
   2a64c:	e3a04000 	mov	r4, #0
   2a650:	e24dd00c 	sub	sp, sp, #12
   2a654:	e58d4004 	str	r4, [sp, #4]
   2a658:	0a000026 	beq	2a6f8 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xb4>
   2a65c:	e1a05002 	mov	r5, r2
   2a660:	e1a0600d 	mov	r6, sp
   2a664:	e1a07004 	mov	r7, r4
   2a668:	e3a0200a 	mov	r2, #10
   2a66c:	e28d1004 	add	r1, sp, #4
   2a670:	eb002bc2 	bl	35580 <strtoul>
   2a674:	e3540003 	cmp	r4, #3
   2a678:	e1a03000 	mov	r3, r0
   2a67c:	0a00000c 	beq	2a6b4 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x70>
   2a680:	e59d1004 	ldr	r1, [sp, #4]
   2a684:	e3510000 	cmp	r1, #0
   2a688:	0a000020 	beq	2a710 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   2a68c:	e1d120d0 	ldrsb	r2, [r1]
   2a690:	e352002e 	cmp	r2, #46	@ 0x2e
   2a694:	1a00001d 	bne	2a710 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   2a698:	e35000ff 	cmp	r0, #255	@ 0xff
   2a69c:	8a00001b 	bhi	2a710 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   2a6a0:	e2810001 	add	r0, r1, #1
   2a6a4:	e2844001 	add	r4, r4, #1
   2a6a8:	e4c63001 	strb	r3, [r6], #1
   2a6ac:	e58d7004 	str	r7, [sp, #4]
   2a6b0:	eaffffec 	b	2a668 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0x24>
   2a6b4:	e59d2004 	ldr	r2, [sp, #4]
   2a6b8:	e3520000 	cmp	r2, #0
   2a6bc:	0a000016 	beq	2a71c <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xd8>
   2a6c0:	e1d220d0 	ldrsb	r2, [r2]
   2a6c4:	e3520000 	cmp	r2, #0
   2a6c8:	1a000010 	bne	2a710 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   2a6cc:	e35000ff 	cmp	r0, #255	@ 0xff
   2a6d0:	8a00000e 	bhi	2a710 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   2a6d4:	e3550000 	cmp	r5, #0
   2a6d8:	e5c63000 	strb	r3, [r6]
   2a6dc:	0a000017 	beq	2a740 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xfc>
   2a6e0:	e1a00005 	mov	r0, r5
   2a6e4:	e1a0100d 	mov	r1, sp
   2a6e8:	ebfff80b 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   2a6ec:	e3a00001 	mov	r0, #1
   2a6f0:	e28dd00c 	add	sp, sp, #12
   2a6f4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a6f8:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2a6fc:	e3401003 	movt	r1, #3
   2a700:	e30d0aec 	movw	r0, #56044	@ 0xdaec
   2a704:	e3400003 	movt	r0, #3
   2a708:	e300211a 	movw	r2, #282	@ 0x11a
   2a70c:	eb0005b2 	bl	2bddc <assertion_failed>
   2a710:	e3a00000 	mov	r0, #0
   2a714:	e28dd00c 	add	sp, sp, #12
   2a718:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2a71c:	e35000ff 	cmp	r0, #255	@ 0xff
   2a720:	8afffffa 	bhi	2a710 <CDNSClient::ConvertIPString(char const*, CIPAddress*)+0xcc>
   2a724:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2a728:	e3401003 	movt	r1, #3
   2a72c:	e30d0b0c 	movw	r0, #56076	@ 0xdb0c
   2a730:	e3400003 	movt	r0, #3
   2a734:	e3002135 	movw	r2, #309	@ 0x135
   2a738:	e5cd3003 	strb	r3, [sp, #3]
   2a73c:	eb0005a6 	bl	2bddc <assertion_failed>
   2a740:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2a744:	e3401003 	movt	r1, #3
   2a748:	e30d0afc 	movw	r0, #56060	@ 0xdafc
   2a74c:	e3400003 	movt	r0, #3
   2a750:	e3002139 	movw	r2, #313	@ 0x139
   2a754:	eb0005a0 	bl	2bddc <assertion_failed>

0002a758 <CDNSClient::Resolve(char const*, CIPAddress*)>:
   2a758:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a75c:	e2515000 	subs	r5, r1, #0
   2a760:	e24ddd17 	sub	sp, sp, #1472	@ 0x5c0
   2a764:	e24dd00c 	sub	sp, sp, #12
   2a768:	0a000066 	beq	2a908 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1b0>
   2a76c:	e5d53000 	ldrb	r3, [r5]
   2a770:	e1a04000 	mov	r4, r0
   2a774:	e1a08002 	mov	r8, r2
   2a778:	e2433031 	sub	r3, r3, #49	@ 0x31
   2a77c:	e3530008 	cmp	r3, #8
   2a780:	9a000020 	bls	2a808 <CDNSClient::Resolve(char const*, CIPAddress*)+0xb0>
   2a784:	e5940000 	ldr	r0, [r4]
   2a788:	e3500000 	cmp	r0, #0
   2a78c:	0a000063 	beq	2a920 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1c8>
   2a790:	ebffd70a 	bl	203c0 <CNetSubSystem::GetConfig()>
   2a794:	ebfff71e 	bl	28414 <CNetConfig::GetDNSServer() const>
   2a798:	ebfff80f 	bl	287dc <CIPAddress::Get() const>
   2a79c:	e1a01000 	mov	r1, r0
   2a7a0:	e28d0010 	add	r0, sp, #16
   2a7a4:	ebfff735 	bl	28480 <CIPAddress::CIPAddress(unsigned char const*)>
   2a7a8:	e28d0010 	add	r0, sp, #16
   2a7ac:	ebfff82e 	bl	2886c <CIPAddress::IsNull() const>
   2a7b0:	e2506000 	subs	r6, r0, #0
   2a7b4:	13a06000 	movne	r6, #0
   2a7b8:	0a000005 	beq	2a7d4 <CDNSClient::Resolve(char const*, CIPAddress*)+0x7c>
   2a7bc:	e28d0010 	add	r0, sp, #16
   2a7c0:	ebfff74e 	bl	28500 <CIPAddress::~CIPAddress()>
   2a7c4:	e1a00006 	mov	r0, r6
   2a7c8:	e28ddd17 	add	sp, sp, #1472	@ 0x5c0
   2a7cc:	e28dd00c 	add	sp, sp, #12
   2a7d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a7d4:	e5941000 	ldr	r1, [r4]
   2a7d8:	e3a02011 	mov	r2, #17
   2a7dc:	e28d0028 	add	r0, sp, #40	@ 0x28
   2a7e0:	ebffd901 	bl	20bec <CSocket::CSocket(CNetSubSystem*, int)>
   2a7e4:	e3a02035 	mov	r2, #53	@ 0x35
   2a7e8:	e28d1010 	add	r1, sp, #16
   2a7ec:	e28d0028 	add	r0, sp, #40	@ 0x28
   2a7f0:	ebffd7b0 	bl	206b8 <CSocket::Connect(CIPAddress&, unsigned short)>
   2a7f4:	e3500000 	cmp	r0, #0
   2a7f8:	0a000009 	beq	2a824 <CDNSClient::Resolve(char const*, CIPAddress*)+0xcc>
   2a7fc:	e28d0028 	add	r0, sp, #40	@ 0x28
   2a800:	ebffd75c 	bl	20578 <CSocket::~CSocket()>
   2a804:	eaffffec 	b	2a7bc <CDNSClient::Resolve(char const*, CIPAddress*)+0x64>
   2a808:	ebffff8d 	bl	2a644 <CDNSClient::ConvertIPString(char const*, CIPAddress*)>
   2a80c:	e2506000 	subs	r6, r0, #0
   2a810:	0affffdb 	beq	2a784 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2c>
   2a814:	e1a00006 	mov	r0, r6
   2a818:	e28ddd17 	add	sp, sp, #1472	@ 0x5c0
   2a81c:	e28dd00c 	add	sp, sp, #12
   2a820:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a824:	e28d9f72 	add	r9, sp, #456	@ 0x1c8
   2a828:	e3a02c02 	mov	r2, #512	@ 0x200
   2a82c:	e1a01006 	mov	r1, r6
   2a830:	e1a00009 	mov	r0, r9
   2a834:	eb002c1b 	bl	358a8 <memset>
   2a838:	e3033fb8 	movw	r3, #16312	@ 0x3fb8
   2a83c:	e3403004 	movt	r3, #4
   2a840:	e3a0c001 	mov	ip, #1
   2a844:	e1c9c0b2 	strh	ip, [r9, #2]
   2a848:	e1a01005 	mov	r1, r5
   2a84c:	e3a020ff 	mov	r2, #255	@ 0xff
   2a850:	e28d00c8 	add	r0, sp, #200	@ 0xc8
   2a854:	e1d3c0b0 	ldrh	ip, [r3]
   2a858:	e3a0ec01 	mov	lr, #256	@ 0x100
   2a85c:	e1c9e0b4 	strh	lr, [r9, #4]
   2a860:	e6bfbfbc 	rev16	fp, ip
   2a864:	e28cc001 	add	ip, ip, #1
   2a868:	e1c9b0b0 	strh	fp, [r9]
   2a86c:	e1c3c0b0 	strh	ip, [r3]
   2a870:	e6ff307b 	uxth	r3, fp
   2a874:	e58d3004 	str	r3, [sp, #4]
   2a878:	eb002ac8 	bl	353a0 <strncpy>
   2a87c:	e28d00c8 	add	r0, sp, #200	@ 0xc8
   2a880:	e28d2008 	add	r2, sp, #8
   2a884:	e3091d04 	movw	r1, #40196	@ 0x9d04
   2a888:	e3401003 	movt	r1, #3
   2a88c:	e5cd61c7 	strb	r6, [sp, #455]	@ 0x1c7
   2a890:	eb002b03 	bl	354a4 <strtok_r>
   2a894:	e2505000 	subs	r5, r0, #0
   2a898:	0a000086 	beq	2aab8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x360>
   2a89c:	e309ad04 	movw	sl, #40196	@ 0x9d04
   2a8a0:	e340a003 	movt	sl, #3
   2a8a4:	e28d7f75 	add	r7, sp, #468	@ 0x1d4
   2a8a8:	ea000010 	b	2a8f0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x198>
   2a8ac:	e0473009 	sub	r3, r7, r9
   2a8b0:	e2802002 	add	r2, r0, #2
   2a8b4:	e2633c02 	rsb	r3, r3, #512	@ 0x200
   2a8b8:	e1520003 	cmp	r2, r3
   2a8bc:	aaffffce 	bge	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2a8c0:	e1a0b007 	mov	fp, r7
   2a8c4:	e1a01005 	mov	r1, r5
   2a8c8:	e4cb0001 	strb	r0, [fp], #1
   2a8cc:	e1a0000b 	mov	r0, fp
   2a8d0:	e08b7004 	add	r7, fp, r4
   2a8d4:	eb002aa6 	bl	35374 <strcpy>
   2a8d8:	e3a00000 	mov	r0, #0
   2a8dc:	e28d2008 	add	r2, sp, #8
   2a8e0:	e1a0100a 	mov	r1, sl
   2a8e4:	eb002aee 	bl	354a4 <strtok_r>
   2a8e8:	e2505000 	subs	r5, r0, #0
   2a8ec:	0a000011 	beq	2a938 <CDNSClient::Resolve(char const*, CIPAddress*)+0x1e0>
   2a8f0:	e1a00005 	mov	r0, r5
   2a8f4:	eb0029fe 	bl	350f4 <strlen>
   2a8f8:	e1a04000 	mov	r4, r0
   2a8fc:	e35000ff 	cmp	r0, #255	@ 0xff
   2a900:	9affffe9 	bls	2a8ac <CDNSClient::Resolve(char const*, CIPAddress*)+0x154>
   2a904:	eaffffbc 	b	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2a908:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2a90c:	e3401003 	movt	r1, #3
   2a910:	e30d0b18 	movw	r0, #56088	@ 0xdb18
   2a914:	e3400003 	movt	r0, #3
   2a918:	e3a02060 	mov	r2, #96	@ 0x60
   2a91c:	eb00052e 	bl	2bddc <assertion_failed>
   2a920:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2a924:	e3401003 	movt	r1, #3
   2a928:	e30c0bc0 	movw	r0, #52160	@ 0xcbc0
   2a92c:	e3400003 	movt	r0, #3
   2a930:	e3a0206a 	mov	r2, #106	@ 0x6a
   2a934:	eb000528 	bl	2bddc <assertion_failed>
   2a938:	e2870001 	add	r0, r7, #1
   2a93c:	e7cb5004 	strb	r5, [fp, r4]
   2a940:	e0403009 	sub	r3, r0, r9
   2a944:	e2633c02 	rsb	r3, r3, #512	@ 0x200
   2a948:	e3530003 	cmp	r3, #3
   2a94c:	e3a03c01 	mov	r3, #256	@ 0x100
   2a950:	e3403100 	movt	r3, #256	@ 0x100
   2a954:	e58d300c 	str	r3, [sp, #12]
   2a958:	daffffa7 	ble	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2a95c:	e2874005 	add	r4, r7, #5
   2a960:	e3a02004 	mov	r2, #4
   2a964:	e28d100c 	add	r1, sp, #12
   2a968:	e0444009 	sub	r4, r4, r9
   2a96c:	eb002be4 	bl	35904 <memcpy>
   2a970:	e3540c02 	cmp	r4, #512	@ 0x200
   2a974:	ca00005f 	bgt	2aaf8 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3a0>
   2a978:	e3a07004 	mov	r7, #4
   2a97c:	e28daff2 	add	sl, sp, #968	@ 0x3c8
   2a980:	e2577001 	subs	r7, r7, #1
   2a984:	0affff9c 	beq	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2a988:	e3a03000 	mov	r3, #0
   2a98c:	e1a02004 	mov	r2, r4
   2a990:	e1a01009 	mov	r1, r9
   2a994:	e28d0028 	add	r0, sp, #40	@ 0x28
   2a998:	ebffd7ba 	bl	20888 <CSocket::Send(void const*, unsigned int, int)>
   2a99c:	e1500004 	cmp	r0, r4
   2a9a0:	1affff95 	bne	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2a9a4:	eb0003e4 	bl	2b93c <CScheduler::Get()>
   2a9a8:	e3a01ffa 	mov	r1, #1000	@ 0x3e8
   2a9ac:	eb0003bf 	bl	2b8b0 <CScheduler::MsSleep(unsigned int)>
   2a9b0:	e3a03040 	mov	r3, #64	@ 0x40
   2a9b4:	e3a02c02 	mov	r2, #512	@ 0x200
   2a9b8:	e1a0100a 	mov	r1, sl
   2a9bc:	e28d0028 	add	r0, sp, #40	@ 0x28
   2a9c0:	ebffd7ce 	bl	20900 <CSocket::Receive(void*, unsigned int, int)>
   2a9c4:	e1a05000 	mov	r5, r0
   2a9c8:	e3500c02 	cmp	r0, #512	@ 0x200
   2a9cc:	aa000043 	bge	2aae0 <CDNSClient::Resolve(char const*, CIPAddress*)+0x388>
   2a9d0:	e3500000 	cmp	r0, #0
   2a9d4:	baffff88 	blt	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2a9d8:	e3500019 	cmp	r0, #25
   2a9dc:	daffffe7 	ble	2a980 <CDNSClient::Resolve(char const*, CIPAddress*)+0x228>
   2a9e0:	e1da30b0 	ldrh	r3, [sl]
   2a9e4:	e59d2004 	ldr	r2, [sp, #4]
   2a9e8:	e1530002 	cmp	r3, r2
   2a9ec:	1affff82 	bne	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2a9f0:	e1da20b2 	ldrh	r2, [sl, #2]
   2a9f4:	e3003ffa 	movw	r3, #4090	@ 0xffa
   2a9f8:	e0033002 	and	r3, r3, r2
   2a9fc:	e3530080 	cmp	r3, #128	@ 0x80
   2aa00:	1affff7d 	bne	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2aa04:	e1da30b4 	ldrh	r3, [sl, #4]
   2aa08:	e3530c01 	cmp	r3, #256	@ 0x100
   2aa0c:	1affff7a 	bne	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2aa10:	e1da30b6 	ldrh	r3, [sl, #6]
   2aa14:	e3530000 	cmp	r3, #0
   2aa18:	128d4ff5 	addne	r4, sp, #980	@ 0x3d4
   2aa1c:	1a000005 	bne	2aa38 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2e0>
   2aa20:	eaffff75 	b	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2aa24:	e2833001 	add	r3, r3, #1
   2aa28:	e0844003 	add	r4, r4, r3
   2aa2c:	e044300a 	sub	r3, r4, sl
   2aa30:	e1530005 	cmp	r3, r5
   2aa34:	aaffff70 	bge	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2aa38:	e5d43000 	ldrb	r3, [r4]
   2aa3c:	e3530000 	cmp	r3, #0
   2aa40:	1afffff7 	bne	2aa24 <CDNSClient::Resolve(char const*, CIPAddress*)+0x2cc>
   2aa44:	e2844005 	add	r4, r4, #5
   2aa48:	e044300a 	sub	r3, r4, sl
   2aa4c:	e1530005 	cmp	r3, r5
   2aa50:	aaffff69 	bge	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2aa54:	e245700e 	sub	r7, r5, #14
   2aa58:	e5d43000 	ldrb	r3, [r4]
   2aa5c:	e20320c0 	and	r2, r3, #192	@ 0xc0
   2aa60:	e35200c0 	cmp	r2, #192	@ 0xc0
   2aa64:	02844002 	addeq	r4, r4, #2
   2aa68:	1a000028 	bne	2ab10 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3b8>
   2aa6c:	e044300a 	sub	r3, r4, sl
   2aa70:	e1530007 	cmp	r3, r7
   2aa74:	caffff60 	bgt	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2aa78:	e3a0200e 	mov	r2, #14
   2aa7c:	e1a01004 	mov	r1, r4
   2aa80:	e28d0018 	add	r0, sp, #24
   2aa84:	eb002b9e 	bl	35904 <memcpy>
   2aa88:	e1dd31b8 	ldrh	r3, [sp, #24]
   2aa8c:	e3530c01 	cmp	r3, #256	@ 0x100
   2aa90:	0a000029 	beq	2ab3c <CDNSClient::Resolve(char const*, CIPAddress*)+0x3e4>
   2aa94:	e1dd32b0 	ldrh	r3, [sp, #32]
   2aa98:	e6bf3fb3 	rev16	r3, r3
   2aa9c:	e6ff3073 	uxth	r3, r3
   2aaa0:	e283300a 	add	r3, r3, #10
   2aaa4:	e0844003 	add	r4, r4, r3
   2aaa8:	e044300a 	sub	r3, r4, sl
   2aaac:	e1530005 	cmp	r3, r5
   2aab0:	baffffe8 	blt	2aa58 <CDNSClient::Resolve(char const*, CIPAddress*)+0x300>
   2aab4:	eaffff50 	b	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2aab8:	e3a02004 	mov	r2, #4
   2aabc:	e28d100c 	add	r1, sp, #12
   2aac0:	e289000d 	add	r0, r9, #13
   2aac4:	e3a03c01 	mov	r3, #256	@ 0x100
   2aac8:	e3403100 	movt	r3, #256	@ 0x100
   2aacc:	e5cd61d4 	strb	r6, [sp, #468]	@ 0x1d4
   2aad0:	e58d300c 	str	r3, [sp, #12]
   2aad4:	e3a04011 	mov	r4, #17
   2aad8:	eb002b89 	bl	35904 <memcpy>
   2aadc:	eaffffa5 	b	2a978 <CDNSClient::Resolve(char const*, CIPAddress*)+0x220>
   2aae0:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2aae4:	e3401003 	movt	r1, #3
   2aae8:	e30d0b48 	movw	r0, #56136	@ 0xdb48
   2aaec:	e3400003 	movt	r0, #3
   2aaf0:	e3a020ba 	mov	r2, #186	@ 0xba
   2aaf4:	eb0004b8 	bl	2bddc <assertion_failed>
   2aaf8:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2aafc:	e3401003 	movt	r1, #3
   2ab00:	e30d0b28 	movw	r0, #56104	@ 0xdb28
   2ab04:	e3400003 	movt	r0, #3
   2ab08:	e3a020a9 	mov	r2, #169	@ 0xa9
   2ab0c:	eb0004b2 	bl	2bddc <assertion_failed>
   2ab10:	e2844001 	add	r4, r4, #1
   2ab14:	ea000003 	b	2ab28 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3d0>
   2ab18:	e1a04003 	mov	r4, r3
   2ab1c:	e4d43001 	ldrb	r3, [r4], #1
   2ab20:	e3530000 	cmp	r3, #0
   2ab24:	0affffd0 	beq	2aa6c <CDNSClient::Resolve(char const*, CIPAddress*)+0x314>
   2ab28:	e0843003 	add	r3, r4, r3
   2ab2c:	e043200a 	sub	r2, r3, sl
   2ab30:	e1520005 	cmp	r2, r5
   2ab34:	bafffff7 	blt	2ab18 <CDNSClient::Resolve(char const*, CIPAddress*)+0x3c0>
   2ab38:	eaffff2f 	b	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2ab3c:	e1dd31ba 	ldrh	r3, [sp, #26]
   2ab40:	e3530c01 	cmp	r3, #256	@ 0x100
   2ab44:	1affffd2 	bne	2aa94 <CDNSClient::Resolve(char const*, CIPAddress*)+0x33c>
   2ab48:	e1dd32b0 	ldrh	r3, [sp, #32]
   2ab4c:	e3530b01 	cmp	r3, #1024	@ 0x400
   2ab50:	1affffcf 	bne	2aa94 <CDNSClient::Resolve(char const*, CIPAddress*)+0x33c>
   2ab54:	e3580000 	cmp	r8, #0
   2ab58:	0a000004 	beq	2ab70 <CDNSClient::Resolve(char const*, CIPAddress*)+0x418>
   2ab5c:	e28d1022 	add	r1, sp, #34	@ 0x22
   2ab60:	e1a00008 	mov	r0, r8
   2ab64:	e3a06001 	mov	r6, #1
   2ab68:	ebfff6eb 	bl	2871c <CIPAddress::Set(unsigned char const*)>
   2ab6c:	eaffff22 	b	2a7fc <CDNSClient::Resolve(char const*, CIPAddress*)+0xa4>
   2ab70:	e30d1adc 	movw	r1, #56028	@ 0xdadc
   2ab74:	e3401003 	movt	r1, #3
   2ab78:	e30d0afc 	movw	r0, #56060	@ 0xdafc
   2ab7c:	e3400003 	movt	r0, #3
   2ab80:	e300210d 	movw	r2, #269	@ 0x10d
   2ab84:	eb000494 	bl	2bddc <assertion_failed>

0002ab88 <CTask::Run()>:
   2ab88:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2ab8c:	e3401003 	movt	r1, #3
   2ab90:	e30a093c 	movw	r0, #43324	@ 0xa93c
   2ab94:	e3400003 	movt	r0, #3
   2ab98:	e3a02057 	mov	r2, #87	@ 0x57
   2ab9c:	e92d4010 	push	{r4, lr}
   2aba0:	eb00048d 	bl	2bddc <assertion_failed>

0002aba4 <CTask::TaskEntry(void*)>:
   2aba4:	e92d4010 	push	{r4, lr}
   2aba8:	e2504000 	subs	r4, r0, #0
   2abac:	0a00000e 	beq	2abec <CTask::TaskEntry(void*)+0x48>
   2abb0:	e5943000 	ldr	r3, [r4]
   2abb4:	e5933008 	ldr	r3, [r3, #8]
   2abb8:	e12fff33 	blx	r3
   2abbc:	e3a03005 	mov	r3, #5
   2abc0:	e28400e8 	add	r0, r4, #232	@ 0xe8
   2abc4:	e5c43004 	strb	r3, [r4, #4]
   2abc8:	eb0003dd 	bl	2bb44 <CSynchronizationEvent::Set()>
   2abcc:	eb00035a 	bl	2b93c <CScheduler::Get()>
   2abd0:	eb00025a 	bl	2b540 <CScheduler::Yield()>
   2abd4:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2abd8:	e3401003 	movt	r1, #3
   2abdc:	e30a093c 	movw	r0, #43324	@ 0xa93c
   2abe0:	e3400003 	movt	r0, #3
   2abe4:	e3a020b6 	mov	r2, #182	@ 0xb6
   2abe8:	eb00047b 	bl	2bddc <assertion_failed>
   2abec:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2abf0:	e3401003 	movt	r1, #3
   2abf4:	e3090d50 	movw	r0, #40272	@ 0x9d50
   2abf8:	e3400003 	movt	r0, #3
   2abfc:	e3a020ae 	mov	r2, #174	@ 0xae
   2ac00:	eb000475 	bl	2bddc <assertion_failed>

0002ac04 <CTask::CTask(unsigned int, bool)>:
   2ac04:	e92d4070 	push	{r4, r5, r6, lr}
   2ac08:	e1a04000 	mov	r4, r0
   2ac0c:	e59f3124 	ldr	r3, [pc, #292]	@ 2ad38 <CTask::CTask(unsigned int, bool)+0x134>
   2ac10:	e28060cc 	add	r6, r0, #204	@ 0xcc
   2ac14:	e3a05000 	mov	r5, #0
   2ac18:	e5803000 	str	r3, [r0]
   2ac1c:	e2222001 	eor	r2, r2, #1
   2ac20:	e58010c4 	str	r1, [r0, #196]	@ 0xc4
   2ac24:	e5c02004 	strb	r2, [r0, #4]
   2ac28:	e1a00006 	mov	r0, r6
   2ac2c:	e5c45005 	strb	r5, [r4, #5]
   2ac30:	e58450c8 	str	r5, [r4, #200]	@ 0xc8
   2ac34:	eb001f82 	bl	32a44 <CString::CString()>
   2ac38:	e1a01005 	mov	r1, r5
   2ac3c:	e28400e8 	add	r0, r4, #232	@ 0xe8
   2ac40:	eb0003ac 	bl	2baf8 <CSynchronizationEvent::CSynchronizationEvent(bool)>
   2ac44:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   2ac48:	e28430dc 	add	r3, r4, #220	@ 0xdc
   2ac4c:	e59400c4 	ldr	r0, [r4, #196]	@ 0xc4
   2ac50:	e58450f0 	str	r5, [r4, #240]	@ 0xf0
   2ac54:	e1500005 	cmp	r0, r5
   2ac58:	f443078f 	vst1.32	{d16}, [r3]
   2ac5c:	e58450e4 	str	r5, [r4, #228]	@ 0xe4
   2ac60:	0a000016 	beq	2acc0 <CTask::CTask(unsigned int, bool)+0xbc>
   2ac64:	e3500b01 	cmp	r0, #1024	@ 0x400
   2ac68:	3a000024 	bcc	2ad00 <CTask::CTask(unsigned int, bool)+0xfc>
   2ac6c:	e2105003 	ands	r5, r0, #3
   2ac70:	1a000028 	bne	2ad18 <CTask::CTask(unsigned int, bool)+0x114>
   2ac74:	eb002d30 	bl	3613c <operator new[](unsigned int)>
   2ac78:	e3a020b8 	mov	r2, #184	@ 0xb8
   2ac7c:	e58400c8 	str	r0, [r4, #200]	@ 0xc8
   2ac80:	e1a01005 	mov	r1, r5
   2ac84:	e284000c 	add	r0, r4, #12
   2ac88:	eb002b06 	bl	358a8 <memset>
   2ac8c:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   2ac90:	e584400c 	str	r4, [r4, #12]
   2ac94:	e3530000 	cmp	r3, #0
   2ac98:	0a000012 	beq	2ace8 <CTask::CTask(unsigned int, bool)+0xe4>
   2ac9c:	eddf0b23 	vldr	d16, [pc, #140]	@ 2ad30 <CTask::CTask(unsigned int, bool)+0x12c>
   2aca0:	e2842010 	add	r2, r4, #16
   2aca4:	e59410c4 	ldr	r1, [r4, #196]	@ 0xc4
   2aca8:	e0833001 	add	r3, r3, r1
   2acac:	e30a1ba4 	movw	r1, #43940	@ 0xaba4
   2acb0:	e3401002 	movt	r1, #2
   2acb4:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   2acb8:	e5841040 	str	r1, [r4, #64]	@ 0x40
   2acbc:	f442078f 	vst1.32	{d16}, [r2]
   2acc0:	e1a02004 	mov	r2, r4
   2acc4:	e1a00006 	mov	r0, r6
   2acc8:	e30d1bb8 	movw	r1, #56248	@ 0xdbb8
   2accc:	e3401003 	movt	r1, #3
   2acd0:	eb002514 	bl	34128 <CString::Format(char const*, ...)>
   2acd4:	eb000318 	bl	2b93c <CScheduler::Get()>
   2acd8:	e1a01004 	mov	r1, r4
   2acdc:	eb00014a 	bl	2b20c <CScheduler::AddTask(CTask*)>
   2ace0:	e1a00004 	mov	r0, r4
   2ace4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2ace8:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2acec:	e3401003 	movt	r1, #3
   2acf0:	e30d0ba8 	movw	r0, #56232	@ 0xdba8
   2acf4:	e3400003 	movt	r0, #3
   2acf8:	e3a0208c 	mov	r2, #140	@ 0x8c
   2acfc:	eb000436 	bl	2bddc <assertion_failed>
   2ad00:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2ad04:	e3401003 	movt	r1, #3
   2ad08:	e30d0b78 	movw	r0, #56184	@ 0xdb78
   2ad0c:	e3400003 	movt	r0, #3
   2ad10:	e3a02027 	mov	r2, #39	@ 0x27
   2ad14:	eb000430 	bl	2bddc <assertion_failed>
   2ad18:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2ad1c:	e3401003 	movt	r1, #3
   2ad20:	e30d0b90 	movw	r0, #56208	@ 0xdb90
   2ad24:	e3400003 	movt	r0, #3
   2ad28:	e3a02029 	mov	r2, #41	@ 0x29
   2ad2c:	eb00042a 	bl	2bddc <assertion_failed>
   2ad30:	40000000 	.word	0x40000000
   2ad34:	02000000 	.word	0x02000000
   2ad38:	00041fc8 	.word	0x00041fc8

0002ad3c <CTask::Start()>:
   2ad3c:	e5d03004 	ldrb	r3, [r0, #4]
   2ad40:	e3530000 	cmp	r3, #0
   2ad44:	1a000002 	bne	2ad54 <CTask::Start()+0x18>
   2ad48:	e3a03001 	mov	r3, #1
   2ad4c:	e5c03004 	strb	r3, [r0, #4]
   2ad50:	e12fff1e 	bx	lr
   2ad54:	e5d03005 	ldrb	r3, [r0, #5]
   2ad58:	e3530000 	cmp	r3, #0
   2ad5c:	0a000002 	beq	2ad6c <CTask::Start()+0x30>
   2ad60:	e3a03000 	mov	r3, #0
   2ad64:	e5c03005 	strb	r3, [r0, #5]
   2ad68:	e12fff1e 	bx	lr
   2ad6c:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2ad70:	e3401003 	movt	r1, #3
   2ad74:	e30d0bc0 	movw	r0, #56256	@ 0xdbc0
   2ad78:	e3400003 	movt	r0, #3
   2ad7c:	e3a02049 	mov	r2, #73	@ 0x49
   2ad80:	e92d4010 	push	{r4, lr}
   2ad84:	eb000414 	bl	2bddc <assertion_failed>

0002ad88 <CTask::Suspend()>:
   2ad88:	e5d03004 	ldrb	r3, [r0, #4]
   2ad8c:	e92d4010 	push	{r4, lr}
   2ad90:	e3530000 	cmp	r3, #0
   2ad94:	0a000005 	beq	2adb0 <CTask::Suspend()+0x28>
   2ad98:	e5d03005 	ldrb	r3, [r0, #5]
   2ad9c:	e3530000 	cmp	r3, #0
   2ada0:	1a000008 	bne	2adc8 <CTask::Suspend()+0x40>
   2ada4:	e3a03001 	mov	r3, #1
   2ada8:	e5c03005 	strb	r3, [r0, #5]
   2adac:	e8bd8010 	pop	{r4, pc}
   2adb0:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2adb4:	e3401003 	movt	r1, #3
   2adb8:	e30d0bd0 	movw	r0, #56272	@ 0xdbd0
   2adbc:	e3400003 	movt	r0, #3
   2adc0:	e3a02050 	mov	r2, #80	@ 0x50
   2adc4:	eb000404 	bl	2bddc <assertion_failed>
   2adc8:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2adcc:	e3401003 	movt	r1, #3
   2add0:	e30d0be8 	movw	r0, #56296	@ 0xdbe8
   2add4:	e3400003 	movt	r0, #3
   2add8:	e3a02051 	mov	r2, #81	@ 0x51
   2addc:	eb0003fe 	bl	2bddc <assertion_failed>

0002ade0 <CTask::Terminate()>:
   2ade0:	e1a03000 	mov	r3, r0
   2ade4:	e3a02005 	mov	r2, #5
   2ade8:	e92d4010 	push	{r4, lr}
   2adec:	e28000e8 	add	r0, r0, #232	@ 0xe8
   2adf0:	e5c32004 	strb	r2, [r3, #4]
   2adf4:	eb000352 	bl	2bb44 <CSynchronizationEvent::Set()>
   2adf8:	eb0002cf 	bl	2b93c <CScheduler::Get()>
   2adfc:	eb0001cf 	bl	2b540 <CScheduler::Yield()>
   2ae00:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2ae04:	e3401003 	movt	r1, #3
   2ae08:	e30a093c 	movw	r0, #43324	@ 0xa93c
   2ae0c:	e3400003 	movt	r0, #3
   2ae10:	e3a02060 	mov	r2, #96	@ 0x60
   2ae14:	eb0003f0 	bl	2bddc <assertion_failed>

0002ae18 <CTask::WaitForTermination()>:
   2ae18:	e92d4010 	push	{r4, lr}
   2ae1c:	e1a04000 	mov	r4, r0
   2ae20:	eb0002c5 	bl	2b93c <CScheduler::Get()>
   2ae24:	e1a01004 	mov	r1, r4
   2ae28:	eb000099 	bl	2b094 <CScheduler::IsValidTask(CTask*)>
   2ae2c:	e3500000 	cmp	r0, #0
   2ae30:	08bd8010 	popeq	{r4, pc}
   2ae34:	e28400e8 	add	r0, r4, #232	@ 0xe8
   2ae38:	e8bd4010 	pop	{r4, lr}
   2ae3c:	ea000353 	b	2bb90 <CSynchronizationEvent::Wait()>

0002ae40 <CTask::SetName(char const*)>:
   2ae40:	e28000cc 	add	r0, r0, #204	@ 0xcc
   2ae44:	ea001f3c 	b	32b3c <CString::operator=(char const*)>

0002ae48 <CTask::GetName() const>:
   2ae48:	e28000cc 	add	r0, r0, #204	@ 0xcc
   2ae4c:	ea001f34 	b	32b24 <CString::operator char const*() const>

0002ae50 <CTask::SetUserData(void*, unsigned int)>:
   2ae50:	e0800102 	add	r0, r0, r2, lsl #2
   2ae54:	e58010dc 	str	r1, [r0, #220]	@ 0xdc
   2ae58:	e12fff1e 	bx	lr

0002ae5c <CTask::GetUserData(unsigned int)>:
   2ae5c:	e0800101 	add	r0, r0, r1, lsl #2
   2ae60:	e59000dc 	ldr	r0, [r0, #220]	@ 0xdc
   2ae64:	e12fff1e 	bx	lr

0002ae68 <CTask::InitializeRegs()>:
   2ae68:	e92d4010 	push	{r4, lr}
   2ae6c:	e1a04000 	mov	r4, r0
   2ae70:	e3a020b8 	mov	r2, #184	@ 0xb8
   2ae74:	e3a01000 	mov	r1, #0
   2ae78:	e280000c 	add	r0, r0, #12
   2ae7c:	eb002a89 	bl	358a8 <memset>
   2ae80:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   2ae84:	e584400c 	str	r4, [r4, #12]
   2ae88:	e3530000 	cmp	r3, #0
   2ae8c:	0a000009 	beq	2aeb8 <CTask::InitializeRegs()+0x50>
   2ae90:	eddf0b0e 	vldr	d16, [pc, #56]	@ 2aed0 <CTask::InitializeRegs()+0x68>
   2ae94:	e2841010 	add	r1, r4, #16
   2ae98:	e59400c4 	ldr	r0, [r4, #196]	@ 0xc4
   2ae9c:	e30a2ba4 	movw	r2, #43940	@ 0xaba4
   2aea0:	e3402002 	movt	r2, #2
   2aea4:	e5842040 	str	r2, [r4, #64]	@ 0x40
   2aea8:	e0833000 	add	r3, r3, r0
   2aeac:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   2aeb0:	f441078f 	vst1.32	{d16}, [r1]
   2aeb4:	e8bd8010 	pop	{r4, pc}
   2aeb8:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2aebc:	e3401003 	movt	r1, #3
   2aec0:	e30d0ba8 	movw	r0, #56232	@ 0xdba8
   2aec4:	e3400003 	movt	r0, #3
   2aec8:	e3a0208c 	mov	r2, #140	@ 0x8c
   2aecc:	eb0003c2 	bl	2bddc <assertion_failed>
   2aed0:	40000000 	.word	0x40000000
   2aed4:	02000000 	.word	0x02000000

0002aed8 <CTask::~CTask()>:
   2aed8:	e5d03004 	ldrb	r3, [r0, #4]
   2aedc:	e59f2060 	ldr	r2, [pc, #96]	@ 2af44 <CTask::~CTask()+0x6c>
   2aee0:	e92d4010 	push	{r4, lr}
   2aee4:	e3530005 	cmp	r3, #5
   2aee8:	e5802000 	str	r2, [r0]
   2aeec:	1a00000e 	bne	2af2c <CTask::~CTask()+0x54>
   2aef0:	e1a04000 	mov	r4, r0
   2aef4:	e59000c8 	ldr	r0, [r0, #200]	@ 0xc8
   2aef8:	e3a03006 	mov	r3, #6
   2aefc:	e3500000 	cmp	r0, #0
   2af00:	e5c43004 	strb	r3, [r4, #4]
   2af04:	0a000000 	beq	2af0c <CTask::~CTask()+0x34>
   2af08:	eb002c97 	bl	3616c <operator delete[](void*)>
   2af0c:	e3a03000 	mov	r3, #0
   2af10:	e28400e8 	add	r0, r4, #232	@ 0xe8
   2af14:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
   2af18:	eb0002fa 	bl	2bb08 <CSynchronizationEvent::~CSynchronizationEvent()>
   2af1c:	e28400cc 	add	r0, r4, #204	@ 0xcc
   2af20:	eb001e94 	bl	32978 <CString::~CString()>
   2af24:	e1a00004 	mov	r0, r4
   2af28:	e8bd8010 	pop	{r4, pc}
   2af2c:	e30d1b6c 	movw	r1, #56172	@ 0xdb6c
   2af30:	e3401003 	movt	r1, #3
   2af34:	e30d0bf8 	movw	r0, #56312	@ 0xdbf8
   2af38:	e3400003 	movt	r0, #3
   2af3c:	e3a0203a 	mov	r2, #58	@ 0x3a
   2af40:	eb0003a5 	bl	2bddc <assertion_failed>
   2af44:	00041fc8 	.word	0x00041fc8

0002af48 <CTask::~CTask()>:
   2af48:	e92d4010 	push	{r4, lr}
   2af4c:	e1a04000 	mov	r4, r0
   2af50:	ebffffe0 	bl	2aed8 <CTask::~CTask()>
   2af54:	e1a00004 	mov	r0, r4
   2af58:	e3a010f4 	mov	r1, #244	@ 0xf4
   2af5c:	eb002c88 	bl	36184 <operator delete(void*, unsigned int)>
   2af60:	e1a00004 	mov	r0, r4
   2af64:	e8bd8010 	pop	{r4, pc}

0002af68 <CScheduler::CScheduler()>:
   2af68:	e3041140 	movw	r1, #16704	@ 0x4140
   2af6c:	e3401004 	movt	r1, #4
   2af70:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   2af74:	e92d4070 	push	{r4, r5, r6, lr}
   2af78:	e1a04000 	mov	r4, r0
   2af7c:	e280005c 	add	r0, r0, #92	@ 0x5c
   2af80:	e5915000 	ldr	r5, [r1]
   2af84:	e3a03000 	mov	r3, #0
   2af88:	e3a02001 	mov	r2, #1
   2af8c:	e5843050 	str	r3, [r4, #80]	@ 0x50
   2af90:	e1550003 	cmp	r5, r3
   2af94:	e5843054 	str	r3, [r4, #84]	@ 0x54
   2af98:	e5843058 	str	r3, [r4, #88]	@ 0x58
   2af9c:	f440078f 	vst1.32	{d16}, [r0]
   2afa0:	e5843064 	str	r3, [r4, #100]	@ 0x64
   2afa4:	e5842068 	str	r2, [r4, #104]	@ 0x68
   2afa8:	1a00000d 	bne	2afe4 <CScheduler::CScheduler()+0x7c>
   2afac:	e3a000f4 	mov	r0, #244	@ 0xf4
   2afb0:	e5814000 	str	r4, [r1]
   2afb4:	eb002c5a 	bl	36124 <operator new(unsigned int)>
   2afb8:	e1a02005 	mov	r2, r5
   2afbc:	e1a01005 	mov	r1, r5
   2afc0:	e1a05000 	mov	r5, r0
   2afc4:	ebffff0e 	bl	2ac04 <CTask::CTask(unsigned int, bool)>
   2afc8:	e1a00005 	mov	r0, r5
   2afcc:	e5845054 	str	r5, [r4, #84]	@ 0x54
   2afd0:	e30d1c28 	movw	r1, #56360	@ 0xdc28
   2afd4:	e3401003 	movt	r1, #3
   2afd8:	ebffff98 	bl	2ae40 <CTask::SetName(char const*)>
   2afdc:	e1a00004 	mov	r0, r4
   2afe0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2afe4:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2afe8:	e3401003 	movt	r1, #3
   2afec:	e30c0b90 	movw	r0, #52112	@ 0xcb90
   2aff0:	e3400003 	movt	r0, #3
   2aff4:	e3a02027 	mov	r2, #39	@ 0x27
   2aff8:	eb000377 	bl	2bddc <assertion_failed>

0002affc <CScheduler::~CScheduler()>:
   2affc:	e3043140 	movw	r3, #16704	@ 0x4140
   2b000:	e3403004 	movt	r3, #4
   2b004:	e3a02000 	mov	r2, #0
   2b008:	e5832000 	str	r2, [r3]
   2b00c:	e12fff1e 	bx	lr

0002b010 <CScheduler::GetCurrentTask()>:
   2b010:	e5900054 	ldr	r0, [r0, #84]	@ 0x54
   2b014:	e12fff1e 	bx	lr

0002b018 <CScheduler::GetTask(char const*)>:
   2b018:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2b01c:	e2518000 	subs	r8, r1, #0
   2b020:	0a000015 	beq	2b07c <CScheduler::GetTask(char const*)+0x64>
   2b024:	e5903050 	ldr	r3, [r0, #80]	@ 0x50
   2b028:	e1a07000 	mov	r7, r0
   2b02c:	e3530000 	cmp	r3, #0
   2b030:	12406004 	subne	r6, r0, #4
   2b034:	13a04000 	movne	r4, #0
   2b038:	0a00000c 	beq	2b070 <CScheduler::GetTask(char const*)+0x58>
   2b03c:	e5b65004 	ldr	r5, [r6, #4]!
   2b040:	e3550000 	cmp	r5, #0
   2b044:	0a000006 	beq	2b064 <CScheduler::GetTask(char const*)+0x4c>
   2b048:	e1a00005 	mov	r0, r5
   2b04c:	ebffff7d 	bl	2ae48 <CTask::GetName() const>
   2b050:	e1a01008 	mov	r1, r8
   2b054:	eb002830 	bl	3511c <strcmp>
   2b058:	e3500000 	cmp	r0, #0
   2b05c:	0a000004 	beq	2b074 <CScheduler::GetTask(char const*)+0x5c>
   2b060:	e5973050 	ldr	r3, [r7, #80]	@ 0x50
   2b064:	e2844001 	add	r4, r4, #1
   2b068:	e1530004 	cmp	r3, r4
   2b06c:	8afffff2 	bhi	2b03c <CScheduler::GetTask(char const*)+0x24>
   2b070:	e3a05000 	mov	r5, #0
   2b074:	e1a00005 	mov	r0, r5
   2b078:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2b07c:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b080:	e3401003 	movt	r1, #3
   2b084:	e30d0c30 	movw	r0, #56368	@ 0xdc30
   2b088:	e3400003 	movt	r0, #3
   2b08c:	e3a02082 	mov	r2, #130	@ 0x82
   2b090:	eb000351 	bl	2bddc <assertion_failed>

0002b094 <CScheduler::IsValidTask(CTask*)>:
   2b094:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   2b098:	e590e050 	ldr	lr, [r0, #80]	@ 0x50
   2b09c:	e35e0000 	cmp	lr, #0
   2b0a0:	0a00000d 	beq	2b0dc <CScheduler::IsValidTask(CTask*)+0x48>
   2b0a4:	e240c004 	sub	ip, r0, #4
   2b0a8:	e3a03000 	mov	r3, #0
   2b0ac:	e5bc2004 	ldr	r2, [ip, #4]!
   2b0b0:	e2833001 	add	r3, r3, #1
   2b0b4:	e0420001 	sub	r0, r2, r1
   2b0b8:	e3520000 	cmp	r2, #0
   2b0bc:	e16f0f10 	clz	r0, r0
   2b0c0:	e1a002a0 	lsr	r0, r0, #5
   2b0c4:	03a00000 	moveq	r0, #0
   2b0c8:	e3500000 	cmp	r0, #0
   2b0cc:	149df004 	popne	{pc}		@ (ldrne pc, [sp], #4)
   2b0d0:	e153000e 	cmp	r3, lr
   2b0d4:	1afffff4 	bne	2b0ac <CScheduler::IsValidTask(CTask*)+0x18>
   2b0d8:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   2b0dc:	e1a0000e 	mov	r0, lr
   2b0e0:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

0002b0e4 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))>:
   2b0e4:	e590305c 	ldr	r3, [r0, #92]	@ 0x5c
   2b0e8:	e92d4010 	push	{r4, lr}
   2b0ec:	e3530000 	cmp	r3, #0
   2b0f0:	1a000008 	bne	2b118 <CScheduler::RegisterTaskSwitchHandler(void (*)(CTask*))+0x34>
   2b0f4:	e3510000 	cmp	r1, #0
   2b0f8:	e580105c 	str	r1, [r0, #92]	@ 0x5c
   2b0fc:	18bd8010 	popne	{r4, pc}
   2b100:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b104:	e3401003 	movt	r1, #3
   2b108:	e30d0c5c 	movw	r0, #56412	@ 0xdc5c
   2b10c:	e3400003 	movt	r0, #3
   2b110:	e3a020a2 	mov	r2, #162	@ 0xa2
   2b114:	eb000330 	bl	2bddc <assertion_failed>
   2b118:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b11c:	e3401003 	movt	r1, #3
   2b120:	e30d0c40 	movw	r0, #56384	@ 0xdc40
   2b124:	e3400003 	movt	r0, #3
   2b128:	e3a020a0 	mov	r2, #160	@ 0xa0
   2b12c:	eb00032a 	bl	2bddc <assertion_failed>

0002b130 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))>:
   2b130:	e5903060 	ldr	r3, [r0, #96]	@ 0x60
   2b134:	e92d4010 	push	{r4, lr}
   2b138:	e3530000 	cmp	r3, #0
   2b13c:	1a000008 	bne	2b164 <CScheduler::RegisterTaskTerminationHandler(void (*)(CTask*))+0x34>
   2b140:	e3510000 	cmp	r1, #0
   2b144:	e5801060 	str	r1, [r0, #96]	@ 0x60
   2b148:	18bd8010 	popne	{r4, pc}
   2b14c:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b150:	e3401003 	movt	r1, #3
   2b154:	e30d0c98 	movw	r0, #56472	@ 0xdc98
   2b158:	e3400003 	movt	r0, #3
   2b15c:	e3a020a9 	mov	r2, #169	@ 0xa9
   2b160:	eb00031d 	bl	2bddc <assertion_failed>
   2b164:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b168:	e3401003 	movt	r1, #3
   2b16c:	e30d0c78 	movw	r0, #56440	@ 0xdc78
   2b170:	e3400003 	movt	r0, #3
   2b174:	e3a020a7 	mov	r2, #167	@ 0xa7
   2b178:	eb000317 	bl	2bddc <assertion_failed>

0002b17c <CScheduler::SuspendNewTasks()>:
   2b17c:	e5903064 	ldr	r3, [r0, #100]	@ 0x64
   2b180:	e2833001 	add	r3, r3, #1
   2b184:	e5803064 	str	r3, [r0, #100]	@ 0x64
   2b188:	e12fff1e 	bx	lr

0002b18c <CScheduler::ResumeNewTasks()>:
   2b18c:	e92d4070 	push	{r4, r5, r6, lr}
   2b190:	e5904064 	ldr	r4, [r0, #100]	@ 0x64
   2b194:	e3540000 	cmp	r4, #0
   2b198:	da000015 	ble	2b1f4 <CScheduler::ResumeNewTasks()+0x68>
   2b19c:	e2444001 	sub	r4, r4, #1
   2b1a0:	e1a06000 	mov	r6, r0
   2b1a4:	e3540000 	cmp	r4, #0
   2b1a8:	e5804064 	str	r4, [r0, #100]	@ 0x64
   2b1ac:	18bd8070 	popne	{r4, r5, r6, pc}
   2b1b0:	e5903050 	ldr	r3, [r0, #80]	@ 0x50
   2b1b4:	e3530000 	cmp	r3, #0
   2b1b8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b1bc:	e2405004 	sub	r5, r0, #4
   2b1c0:	ea000002 	b	2b1d0 <CScheduler::ResumeNewTasks()+0x44>
   2b1c4:	e2844001 	add	r4, r4, #1
   2b1c8:	e1530004 	cmp	r3, r4
   2b1cc:	98bd8070 	popls	{r4, r5, r6, pc}
   2b1d0:	e5b50004 	ldr	r0, [r5, #4]!
   2b1d4:	e3500000 	cmp	r0, #0
   2b1d8:	0afffff9 	beq	2b1c4 <CScheduler::ResumeNewTasks()+0x38>
   2b1dc:	e5d02004 	ldrb	r2, [r0, #4]
   2b1e0:	e3520000 	cmp	r2, #0
   2b1e4:	1afffff6 	bne	2b1c4 <CScheduler::ResumeNewTasks()+0x38>
   2b1e8:	ebfffed3 	bl	2ad3c <CTask::Start()>
   2b1ec:	e5963050 	ldr	r3, [r6, #80]	@ 0x50
   2b1f0:	eafffff3 	b	2b1c4 <CScheduler::ResumeNewTasks()+0x38>
   2b1f4:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b1f8:	e3401003 	movt	r1, #3
   2b1fc:	e30d0cb8 	movw	r0, #56504	@ 0xdcb8
   2b200:	e3400003 	movt	r0, #3
   2b204:	e3a020b3 	mov	r2, #179	@ 0xb3
   2b208:	eb0002f3 	bl	2bddc <assertion_failed>

0002b20c <CScheduler::AddTask(CTask*)>:
   2b20c:	e92d4070 	push	{r4, r5, r6, lr}
   2b210:	e2515000 	subs	r5, r1, #0
   2b214:	0a000021 	beq	2b2a0 <CScheduler::AddTask(CTask*)+0x94>
   2b218:	e5903064 	ldr	r3, [r0, #100]	@ 0x64
   2b21c:	e1a04000 	mov	r4, r0
   2b220:	e590e050 	ldr	lr, [r0, #80]	@ 0x50
   2b224:	e3530000 	cmp	r3, #0
   2b228:	13a03000 	movne	r3, #0
   2b22c:	15c53004 	strbne	r3, [r5, #4]
   2b230:	e35e0000 	cmp	lr, #0
   2b234:	0a00000c 	beq	2b26c <CScheduler::AddTask(CTask*)+0x60>
   2b238:	e2402004 	sub	r2, r0, #4
   2b23c:	e3a03000 	mov	r3, #0
   2b240:	ea000002 	b	2b250 <CScheduler::AddTask(CTask*)+0x44>
   2b244:	e2833001 	add	r3, r3, #1
   2b248:	e15e0003 	cmp	lr, r3
   2b24c:	0a000004 	beq	2b264 <CScheduler::AddTask(CTask*)+0x58>
   2b250:	e5b2c004 	ldr	ip, [r2, #4]!
   2b254:	e35c0000 	cmp	ip, #0
   2b258:	1afffff9 	bne	2b244 <CScheduler::AddTask(CTask*)+0x38>
   2b25c:	e7845103 	str	r5, [r4, r3, lsl #2]
   2b260:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b264:	e35e0014 	cmp	lr, #20
   2b268:	0a000003 	beq	2b27c <CScheduler::AddTask(CTask*)+0x70>
   2b26c:	e28e3001 	add	r3, lr, #1
   2b270:	e5843050 	str	r3, [r4, #80]	@ 0x50
   2b274:	e784510e 	str	r5, [r4, lr, lsl #2]
   2b278:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b27c:	eb000d51 	bl	2e7c8 <CLogger::Get()>
   2b280:	e3a02000 	mov	r2, #0
   2b284:	e30d3cdc 	movw	r3, #56540	@ 0xdcdc
   2b288:	e3403003 	movt	r3, #3
   2b28c:	e3011fd8 	movw	r1, #8152	@ 0x1fd8
   2b290:	e3401004 	movt	r1, #4
   2b294:	eb000f14 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2b298:	e594e050 	ldr	lr, [r4, #80]	@ 0x50
   2b29c:	eafffff2 	b	2b26c <CScheduler::AddTask(CTask*)+0x60>
   2b2a0:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b2a4:	e3401003 	movt	r1, #3
   2b2a8:	e30d0cd0 	movw	r0, #56528	@ 0xdcd0
   2b2ac:	e3400003 	movt	r0, #3
   2b2b0:	e3a020e8 	mov	r2, #232	@ 0xe8
   2b2b4:	eb0002c8 	bl	2bddc <assertion_failed>

0002b2b8 <CScheduler::RemoveTask(CTask*)>:
   2b2b8:	e92d4010 	push	{r4, lr}
   2b2bc:	e590e050 	ldr	lr, [r0, #80]	@ 0x50
   2b2c0:	e35e0000 	cmp	lr, #0
   2b2c4:	0a00000e 	beq	2b304 <CScheduler::RemoveTask(CTask*)+0x4c>
   2b2c8:	e2402004 	sub	r2, r0, #4
   2b2cc:	e3a03000 	mov	r3, #0
   2b2d0:	ea000002 	b	2b2e0 <CScheduler::RemoveTask(CTask*)+0x28>
   2b2d4:	e2833001 	add	r3, r3, #1
   2b2d8:	e15e0003 	cmp	lr, r3
   2b2dc:	0a000008 	beq	2b304 <CScheduler::RemoveTask(CTask*)+0x4c>
   2b2e0:	e5b2c004 	ldr	ip, [r2, #4]!
   2b2e4:	e15c0001 	cmp	ip, r1
   2b2e8:	1afffff9 	bne	2b2d4 <CScheduler::RemoveTask(CTask*)+0x1c>
   2b2ec:	e24ee001 	sub	lr, lr, #1
   2b2f0:	e3a02000 	mov	r2, #0
   2b2f4:	e15e0003 	cmp	lr, r3
   2b2f8:	e7802103 	str	r2, [r0, r3, lsl #2]
   2b2fc:	05803050 	streq	r3, [r0, #80]	@ 0x50
   2b300:	e8bd8010 	pop	{r4, pc}
   2b304:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b308:	e3401003 	movt	r1, #3
   2b30c:	e30a093c 	movw	r0, #43324	@ 0xa93c
   2b310:	e3400003 	movt	r0, #3
   2b314:	e3002113 	movw	r2, #275	@ 0x113
   2b318:	eb0002af 	bl	2bddc <assertion_failed>

0002b31c <CScheduler::WakeTasks(CTask**)>:
   2b31c:	e92d4070 	push	{r4, r5, r6, lr}
   2b320:	e2514000 	subs	r4, r1, #0
   2b324:	0a000023 	beq	2b3b8 <CScheduler::WakeTasks(CTask**)+0x9c>
   2b328:	e1a05000 	mov	r5, r0
   2b32c:	e5900068 	ldr	r0, [r0, #104]	@ 0x68
   2b330:	e3500000 	cmp	r0, #0
   2b334:	1a00001d 	bne	2b3b0 <CScheduler::WakeTasks(CTask**)+0x94>
   2b338:	e5943000 	ldr	r3, [r4]
   2b33c:	e3a0c000 	mov	ip, #0
   2b340:	e584c000 	str	ip, [r4]
   2b344:	e153000c 	cmp	r3, ip
   2b348:	0a000013 	beq	2b39c <CScheduler::WakeTasks(CTask**)+0x80>
   2b34c:	e3a01001 	mov	r1, #1
   2b350:	ea000005 	b	2b36c <CScheduler::WakeTasks(CTask**)+0x50>
   2b354:	e59320f0 	ldr	r2, [r3, #240]	@ 0xf0
   2b358:	e5c31004 	strb	r1, [r3, #4]
   2b35c:	e3520000 	cmp	r2, #0
   2b360:	e583c0f0 	str	ip, [r3, #240]	@ 0xf0
   2b364:	0a00000c 	beq	2b39c <CScheduler::WakeTasks(CTask**)+0x80>
   2b368:	e1a03002 	mov	r3, r2
   2b36c:	e5d32004 	ldrb	r2, [r3, #4]
   2b370:	e3520002 	cmp	r2, #2
   2b374:	0afffff6 	beq	2b354 <CScheduler::WakeTasks(CTask**)+0x38>
   2b378:	e5d32004 	ldrb	r2, [r3, #4]
   2b37c:	e3520003 	cmp	r2, #3
   2b380:	0afffff3 	beq	2b354 <CScheduler::WakeTasks(CTask**)+0x38>
   2b384:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b388:	e3401003 	movt	r1, #3
   2b38c:	e30d0d10 	movw	r0, #56592	@ 0xdd10
   2b390:	e3400003 	movt	r0, #3
   2b394:	e3002163 	movw	r2, #355	@ 0x163
   2b398:	eb00028f 	bl	2bddc <assertion_failed>
   2b39c:	e5953068 	ldr	r3, [r5, #104]	@ 0x68
   2b3a0:	e3530000 	cmp	r3, #0
   2b3a4:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b3a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b3ac:	ea00319e 	b	37a2c <LeaveCritical>
   2b3b0:	eb003172 	bl	37980 <EnterCritical>
   2b3b4:	eaffffdf 	b	2b338 <CScheduler::WakeTasks(CTask**)+0x1c>
   2b3b8:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b3bc:	e3401003 	movt	r1, #3
   2b3c0:	e30d0cfc 	movw	r0, #56572	@ 0xdcfc
   2b3c4:	e3400003 	movt	r0, #3
   2b3c8:	e3002151 	movw	r2, #337	@ 0x151
   2b3cc:	eb000282 	bl	2bddc <assertion_failed>

0002b3d0 <CScheduler::GetNextTask()>:
   2b3d0:	e92d4070 	push	{r4, r5, r6, lr}
   2b3d4:	e1a06000 	mov	r6, r0
   2b3d8:	e5904058 	ldr	r4, [r0, #88]	@ 0x58
   2b3dc:	e3540014 	cmp	r4, #20
   2b3e0:	23a04000 	movcs	r4, #0
   2b3e4:	eb002713 	bl	35038 <CTimer::Get()>
   2b3e8:	eb00243d 	bl	344e4 <CTimer::GetClockTicks()>
   2b3ec:	e5962050 	ldr	r2, [r6, #80]	@ 0x50
   2b3f0:	e3520000 	cmp	r2, #0
   2b3f4:	0a00003f 	beq	2b4f8 <CScheduler::GetNextTask()+0x128>
   2b3f8:	e3a03001 	mov	r3, #1
   2b3fc:	e2844001 	add	r4, r4, #1
   2b400:	e1540002 	cmp	r4, r2
   2b404:	23a04000 	movcs	r4, #0
   2b408:	e7965104 	ldr	r5, [r6, r4, lsl #2]
   2b40c:	e3550000 	cmp	r5, #0
   2b410:	0a000010 	beq	2b458 <CScheduler::GetNextTask()+0x88>
   2b414:	e5d51005 	ldrb	r1, [r5, #5]
   2b418:	e3510000 	cmp	r1, #0
   2b41c:	1a00000d 	bne	2b458 <CScheduler::GetNextTask()+0x88>
   2b420:	e5d51004 	ldrb	r1, [r5, #4]
   2b424:	e3510005 	cmp	r1, #5
   2b428:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   2b42c:	ea00003d 	b	2b528 <CScheduler::GetNextTask()+0x158>
   2b430:	0002b458 	.word	0x0002b458
   2b434:	0002b488 	.word	0x0002b488
   2b438:	0002b458 	.word	0x0002b458
   2b43c:	0002b468 	.word	0x0002b468
   2b440:	0002b448 	.word	0x0002b448
   2b444:	0002b490 	.word	0x0002b490
   2b448:	e5951008 	ldr	r1, [r5, #8]
   2b44c:	e0411000 	sub	r1, r1, r0
   2b450:	e3510000 	cmp	r1, #0
   2b454:	da000029 	ble	2b500 <CScheduler::GetNextTask()+0x130>
   2b458:	e2833001 	add	r3, r3, #1
   2b45c:	e1520003 	cmp	r2, r3
   2b460:	2affffe5 	bcs	2b3fc <CScheduler::GetNextTask()+0x2c>
   2b464:	ea000023 	b	2b4f8 <CScheduler::GetNextTask()+0x128>
   2b468:	e5951008 	ldr	r1, [r5, #8]
   2b46c:	e0411000 	sub	r1, r1, r0
   2b470:	e3510000 	cmp	r1, #0
   2b474:	cafffff7 	bgt	2b458 <CScheduler::GetNextTask()+0x88>
   2b478:	e3a02001 	mov	r2, #1
   2b47c:	e3a03000 	mov	r3, #0
   2b480:	e5c52004 	strb	r2, [r5, #4]
   2b484:	e5853008 	str	r3, [r5, #8]
   2b488:	e1a00004 	mov	r0, r4
   2b48c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b490:	e5963060 	ldr	r3, [r6, #96]	@ 0x60
   2b494:	e3530000 	cmp	r3, #0
   2b498:	0a000004 	beq	2b4b0 <CScheduler::GetNextTask()+0xe0>
   2b49c:	e1a00005 	mov	r0, r5
   2b4a0:	e12fff33 	blx	r3
   2b4a4:	e5962050 	ldr	r2, [r6, #80]	@ 0x50
   2b4a8:	e3520000 	cmp	r2, #0
   2b4ac:	0a000017 	beq	2b510 <CScheduler::GetNextTask()+0x140>
   2b4b0:	e2461004 	sub	r1, r6, #4
   2b4b4:	e3a03000 	mov	r3, #0
   2b4b8:	ea000002 	b	2b4c8 <CScheduler::GetNextTask()+0xf8>
   2b4bc:	e2833001 	add	r3, r3, #1
   2b4c0:	e1520003 	cmp	r2, r3
   2b4c4:	0a000011 	beq	2b510 <CScheduler::GetNextTask()+0x140>
   2b4c8:	e5b1c004 	ldr	ip, [r1, #4]!
   2b4cc:	e155000c 	cmp	r5, ip
   2b4d0:	1afffff9 	bne	2b4bc <CScheduler::GetNextTask()+0xec>
   2b4d4:	e2422001 	sub	r2, r2, #1
   2b4d8:	e3a01000 	mov	r1, #0
   2b4dc:	e1530002 	cmp	r3, r2
   2b4e0:	e7861103 	str	r1, [r6, r3, lsl #2]
   2b4e4:	05863050 	streq	r3, [r6, #80]	@ 0x50
   2b4e8:	e1a00005 	mov	r0, r5
   2b4ec:	e5953000 	ldr	r3, [r5]
   2b4f0:	e5933004 	ldr	r3, [r3, #4]
   2b4f4:	e12fff33 	blx	r3
   2b4f8:	e3a04014 	mov	r4, #20
   2b4fc:	eaffffe1 	b	2b488 <CScheduler::GetNextTask()+0xb8>
   2b500:	e3a03001 	mov	r3, #1
   2b504:	e1a00004 	mov	r0, r4
   2b508:	e5c53004 	strb	r3, [r5, #4]
   2b50c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b510:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b514:	e3401003 	movt	r1, #3
   2b518:	e30a093c 	movw	r0, #43324	@ 0xa93c
   2b51c:	e3400003 	movt	r0, #3
   2b520:	e3002113 	movw	r2, #275	@ 0x113
   2b524:	eb00022c 	bl	2bddc <assertion_failed>
   2b528:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b52c:	e3401003 	movt	r1, #3
   2b530:	e30a093c 	movw	r0, #43324	@ 0xa93c
   2b534:	e3400003 	movt	r0, #3
   2b538:	e30021ae 	movw	r2, #430	@ 0x1ae
   2b53c:	eb000226 	bl	2bddc <assertion_failed>

0002b540 <CScheduler::Yield()>:
   2b540:	e92d4070 	push	{r4, r5, r6, lr}
   2b544:	e1a04000 	mov	r4, r0
   2b548:	e1a00004 	mov	r0, r4
   2b54c:	ebffff9f 	bl	2b3d0 <CScheduler::GetNextTask()>
   2b550:	e3500014 	cmp	r0, #20
   2b554:	e5840058 	str	r0, [r4, #88]	@ 0x58
   2b558:	1a000008 	bne	2b580 <CScheduler::Yield()+0x40>
   2b55c:	e5943050 	ldr	r3, [r4, #80]	@ 0x50
   2b560:	e3530000 	cmp	r3, #0
   2b564:	1afffff7 	bne	2b548 <CScheduler::Yield()+0x8>
   2b568:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b56c:	e3401003 	movt	r1, #3
   2b570:	e30d0d6c 	movw	r0, #56684	@ 0xdd6c
   2b574:	e3400003 	movt	r0, #3
   2b578:	e3a0203b 	mov	r2, #59	@ 0x3b
   2b57c:	eb000216 	bl	2bddc <assertion_failed>
   2b580:	e3500013 	cmp	r0, #19
   2b584:	8a000010 	bhi	2b5cc <CScheduler::Yield()+0x8c>
   2b588:	e7940100 	ldr	r0, [r4, r0, lsl #2]
   2b58c:	e3500000 	cmp	r0, #0
   2b590:	0a000013 	beq	2b5e4 <CScheduler::Yield()+0xa4>
   2b594:	e5943054 	ldr	r3, [r4, #84]	@ 0x54
   2b598:	e1530000 	cmp	r3, r0
   2b59c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b5a0:	e594205c 	ldr	r2, [r4, #92]	@ 0x5c
   2b5a4:	e283500c 	add	r5, r3, #12
   2b5a8:	e280600c 	add	r6, r0, #12
   2b5ac:	e5840054 	str	r0, [r4, #84]	@ 0x54
   2b5b0:	e3520000 	cmp	r2, #0
   2b5b4:	0a000000 	beq	2b5bc <CScheduler::Yield()+0x7c>
   2b5b8:	e12fff32 	blx	r2
   2b5bc:	e1a01006 	mov	r1, r6
   2b5c0:	e1a00005 	mov	r0, r5
   2b5c4:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b5c8:	ea000141 	b	2bad4 <TaskSwitch>
   2b5cc:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b5d0:	e3401003 	movt	r1, #3
   2b5d4:	e30d0d7c 	movw	r0, #56700	@ 0xdd7c
   2b5d8:	e3400003 	movt	r0, #3
   2b5dc:	e3a0203e 	mov	r2, #62	@ 0x3e
   2b5e0:	eb0001fd 	bl	2bddc <assertion_failed>
   2b5e4:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b5e8:	e3401003 	movt	r1, #3
   2b5ec:	e30d0d94 	movw	r0, #56724	@ 0xdd94
   2b5f0:	e3400003 	movt	r0, #3
   2b5f4:	e3a02040 	mov	r2, #64	@ 0x40
   2b5f8:	eb0001f7 	bl	2bddc <assertion_failed>

0002b5fc <CScheduler::usSleep(unsigned int)>:
   2b5fc:	e92d4070 	push	{r4, r5, r6, lr}
   2b600:	e2514000 	subs	r4, r1, #0
   2b604:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b608:	e1a05000 	mov	r5, r0
   2b60c:	eb002689 	bl	35038 <CTimer::Get()>
   2b610:	eb0023b3 	bl	344e4 <CTimer::GetClockTicks()>
   2b614:	e5953054 	ldr	r3, [r5, #84]	@ 0x54
   2b618:	e3530000 	cmp	r3, #0
   2b61c:	0a000009 	beq	2b648 <CScheduler::usSleep(unsigned int)+0x4c>
   2b620:	e5d32004 	ldrb	r2, [r3, #4]
   2b624:	e3520001 	cmp	r2, #1
   2b628:	1a00000c 	bne	2b660 <CScheduler::usSleep(unsigned int)+0x64>
   2b62c:	e0841000 	add	r1, r4, r0
   2b630:	e3a02004 	mov	r2, #4
   2b634:	e1a00005 	mov	r0, r5
   2b638:	e5831008 	str	r1, [r3, #8]
   2b63c:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b640:	e5c32004 	strb	r2, [r3, #4]
   2b644:	eaffffbd 	b	2b540 <CScheduler::Yield()>
   2b648:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b64c:	e3401003 	movt	r1, #3
   2b650:	e30d0da0 	movw	r0, #56736	@ 0xdda0
   2b654:	e3400003 	movt	r0, #3
   2b658:	e3a02072 	mov	r2, #114	@ 0x72
   2b65c:	eb0001de 	bl	2bddc <assertion_failed>
   2b660:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b664:	e3401003 	movt	r1, #3
   2b668:	e30d0db0 	movw	r0, #56752	@ 0xddb0
   2b66c:	e3400003 	movt	r0, #3
   2b670:	e3a02073 	mov	r2, #115	@ 0x73
   2b674:	eb0001d8 	bl	2bddc <assertion_failed>

0002b678 <CScheduler::BlockTask(CTask**, unsigned int)>:
   2b678:	e92d4070 	push	{r4, r5, r6, lr}
   2b67c:	e2515000 	subs	r5, r1, #0
   2b680:	0a00004c 	beq	2b7b8 <CScheduler::BlockTask(CTask**, unsigned int)+0x140>
   2b684:	e5903054 	ldr	r3, [r0, #84]	@ 0x54
   2b688:	e1a06002 	mov	r6, r2
   2b68c:	e1a04000 	mov	r4, r0
   2b690:	e59320f0 	ldr	r2, [r3, #240]	@ 0xf0
   2b694:	e3520000 	cmp	r2, #0
   2b698:	1a00004c 	bne	2b7d0 <CScheduler::BlockTask(CTask**, unsigned int)+0x158>
   2b69c:	e5d32004 	ldrb	r2, [r3, #4]
   2b6a0:	e3520001 	cmp	r2, #1
   2b6a4:	1a00004f 	bne	2b7e8 <CScheduler::BlockTask(CTask**, unsigned int)+0x170>
   2b6a8:	e5900068 	ldr	r0, [r0, #104]	@ 0x68
   2b6ac:	e3500000 	cmp	r0, #0
   2b6b0:	1a00002a 	bne	2b760 <CScheduler::BlockTask(CTask**, unsigned int)+0xe8>
   2b6b4:	e5952000 	ldr	r2, [r5]
   2b6b8:	e3560000 	cmp	r6, #0
   2b6bc:	e58320f0 	str	r2, [r3, #240]	@ 0xf0
   2b6c0:	e5853000 	str	r3, [r5]
   2b6c4:	1a000028 	bne	2b76c <CScheduler::BlockTask(CTask**, unsigned int)+0xf4>
   2b6c8:	e5943054 	ldr	r3, [r4, #84]	@ 0x54
   2b6cc:	e3a02002 	mov	r2, #2
   2b6d0:	e5c32004 	strb	r2, [r3, #4]
   2b6d4:	e5943068 	ldr	r3, [r4, #104]	@ 0x68
   2b6d8:	e3530000 	cmp	r3, #0
   2b6dc:	1a00002c 	bne	2b794 <CScheduler::BlockTask(CTask**, unsigned int)+0x11c>
   2b6e0:	e1a00004 	mov	r0, r4
   2b6e4:	ebffff95 	bl	2b540 <CScheduler::Yield()>
   2b6e8:	e5940068 	ldr	r0, [r4, #104]	@ 0x68
   2b6ec:	e3500000 	cmp	r0, #0
   2b6f0:	1a000029 	bne	2b79c <CScheduler::BlockTask(CTask**, unsigned int)+0x124>
   2b6f4:	e594c054 	ldr	ip, [r4, #84]	@ 0x54
   2b6f8:	e5952000 	ldr	r2, [r5]
   2b6fc:	e3520000 	cmp	r2, #0
   2b700:	058c20f0 	streq	r2, [ip, #240]	@ 0xf0
   2b704:	0a000011 	beq	2b750 <CScheduler::BlockTask(CTask**, unsigned int)+0xd8>
   2b708:	e15c0002 	cmp	ip, r2
   2b70c:	059c30f0 	ldreq	r3, [ip, #240]	@ 0xf0
   2b710:	05853000 	streq	r3, [r5]
   2b714:	0594c054 	ldreq	ip, [r4, #84]	@ 0x54
   2b718:	ea000003 	b	2b72c <CScheduler::BlockTask(CTask**, unsigned int)+0xb4>
   2b71c:	e153000c 	cmp	r3, ip
   2b720:	059c10f0 	ldreq	r1, [ip, #240]	@ 0xf0
   2b724:	058210f0 	streq	r1, [r2, #240]	@ 0xf0
   2b728:	e1a02003 	mov	r2, r3
   2b72c:	e59230f0 	ldr	r3, [r2, #240]	@ 0xf0
   2b730:	e3530000 	cmp	r3, #0
   2b734:	1afffff8 	bne	2b71c <CScheduler::BlockTask(CTask**, unsigned int)+0xa4>
   2b738:	e3a03000 	mov	r3, #0
   2b73c:	e58c30f0 	str	r3, [ip, #240]	@ 0xf0
   2b740:	e1500003 	cmp	r0, r3
   2b744:	0a000001 	beq	2b750 <CScheduler::BlockTask(CTask**, unsigned int)+0xd8>
   2b748:	eb0030b7 	bl	37a2c <LeaveCritical>
   2b74c:	e594c054 	ldr	ip, [r4, #84]	@ 0x54
   2b750:	e59c0008 	ldr	r0, [ip, #8]
   2b754:	e16f0f10 	clz	r0, r0
   2b758:	e1a002a0 	lsr	r0, r0, #5
   2b75c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2b760:	eb003086 	bl	37980 <EnterCritical>
   2b764:	e5943054 	ldr	r3, [r4, #84]	@ 0x54
   2b768:	eaffffd1 	b	2b6b4 <CScheduler::BlockTask(CTask**, unsigned int)+0x3c>
   2b76c:	eb002631 	bl	35038 <CTimer::Get()>
   2b770:	eb00235b 	bl	344e4 <CTimer::GetClockTicks()>
   2b774:	e5943054 	ldr	r3, [r4, #84]	@ 0x54
   2b778:	e0862000 	add	r2, r6, r0
   2b77c:	e3a01003 	mov	r1, #3
   2b780:	e5832008 	str	r2, [r3, #8]
   2b784:	e5c31004 	strb	r1, [r3, #4]
   2b788:	e5943068 	ldr	r3, [r4, #104]	@ 0x68
   2b78c:	e3530000 	cmp	r3, #0
   2b790:	0affffd2 	beq	2b6e0 <CScheduler::BlockTask(CTask**, unsigned int)+0x68>
   2b794:	eb0030a4 	bl	37a2c <LeaveCritical>
   2b798:	eaffffd0 	b	2b6e0 <CScheduler::BlockTask(CTask**, unsigned int)+0x68>
   2b79c:	eb003077 	bl	37980 <EnterCritical>
   2b7a0:	e5952000 	ldr	r2, [r5]
   2b7a4:	e5940068 	ldr	r0, [r4, #104]	@ 0x68
   2b7a8:	e594c054 	ldr	ip, [r4, #84]	@ 0x54
   2b7ac:	e3520000 	cmp	r2, #0
   2b7b0:	1affffd4 	bne	2b708 <CScheduler::BlockTask(CTask**, unsigned int)+0x90>
   2b7b4:	eaffffdf 	b	2b738 <CScheduler::BlockTask(CTask**, unsigned int)+0xc0>
   2b7b8:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b7bc:	e3401003 	movt	r1, #3
   2b7c0:	e30d0cfc 	movw	r0, #56572	@ 0xdcfc
   2b7c4:	e3400003 	movt	r0, #3
   2b7c8:	e3a02f46 	mov	r2, #280	@ 0x118
   2b7cc:	eb000182 	bl	2bddc <assertion_failed>
   2b7d0:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b7d4:	e3401003 	movt	r1, #3
   2b7d8:	e30d0ddc 	movw	r0, #56796	@ 0xdddc
   2b7dc:	e3400003 	movt	r0, #3
   2b7e0:	e3002119 	movw	r2, #281	@ 0x119
   2b7e4:	eb00017c 	bl	2bddc <assertion_failed>
   2b7e8:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b7ec:	e3401003 	movt	r1, #3
   2b7f0:	e30d0db0 	movw	r0, #56752	@ 0xddb0
   2b7f4:	e3400003 	movt	r0, #3
   2b7f8:	e300211b 	movw	r2, #283	@ 0x11b
   2b7fc:	eb000176 	bl	2bddc <assertion_failed>

0002b800 <CScheduler::Sleep(unsigned int)>:
   2b800:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2b804:	e3006708 	movw	r6, #1800	@ 0x708
   2b808:	e1a04001 	mov	r4, r1
   2b80c:	e1a05000 	mov	r5, r0
   2b810:	e1510006 	cmp	r1, r6
   2b814:	9a000013 	bls	2b868 <CScheduler::Sleep(unsigned int)+0x68>
   2b818:	e3a07cd2 	mov	r7, #53760	@ 0xd200
   2b81c:	e3467b49 	movt	r7, #27465	@ 0x6b49
   2b820:	e3a08004 	mov	r8, #4
   2b824:	eb002603 	bl	35038 <CTimer::Get()>
   2b828:	eb00232d 	bl	344e4 <CTimer::GetClockTicks()>
   2b82c:	e5952054 	ldr	r2, [r5, #84]	@ 0x54
   2b830:	e3520000 	cmp	r2, #0
   2b834:	0a000011 	beq	2b880 <CScheduler::Sleep(unsigned int)+0x80>
   2b838:	e5d23004 	ldrb	r3, [r2, #4]
   2b83c:	e3530001 	cmp	r3, #1
   2b840:	1a000014 	bne	2b898 <CScheduler::Sleep(unsigned int)+0x98>
   2b844:	e2444c07 	sub	r4, r4, #1792	@ 0x700
   2b848:	e0803007 	add	r3, r0, r7
   2b84c:	e2444008 	sub	r4, r4, #8
   2b850:	e1a00005 	mov	r0, r5
   2b854:	e5823008 	str	r3, [r2, #8]
   2b858:	e5c28004 	strb	r8, [r2, #4]
   2b85c:	ebffff37 	bl	2b540 <CScheduler::Yield()>
   2b860:	e1540006 	cmp	r4, r6
   2b864:	8affffee 	bhi	2b824 <CScheduler::Sleep(unsigned int)+0x24>
   2b868:	e3041240 	movw	r1, #16960	@ 0x4240
   2b86c:	e340100f 	movt	r1, #15
   2b870:	e1a00005 	mov	r0, r5
   2b874:	e0010491 	mul	r1, r1, r4
   2b878:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2b87c:	eaffff5e 	b	2b5fc <CScheduler::usSleep(unsigned int)>
   2b880:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b884:	e3401003 	movt	r1, #3
   2b888:	e30d0da0 	movw	r0, #56736	@ 0xdda0
   2b88c:	e3400003 	movt	r0, #3
   2b890:	e3a02072 	mov	r2, #114	@ 0x72
   2b894:	eb000150 	bl	2bddc <assertion_failed>
   2b898:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b89c:	e3401003 	movt	r1, #3
   2b8a0:	e30d0db0 	movw	r0, #56752	@ 0xddb0
   2b8a4:	e3400003 	movt	r0, #3
   2b8a8:	e3a02073 	mov	r2, #115	@ 0x73
   2b8ac:	eb00014a 	bl	2bddc <assertion_failed>

0002b8b0 <CScheduler::MsSleep(unsigned int)>:
   2b8b0:	e3510000 	cmp	r1, #0
   2b8b4:	012fff1e 	bxeq	lr
   2b8b8:	e3a03ffa 	mov	r3, #1000	@ 0x3e8
   2b8bc:	e92d4070 	push	{r4, r5, r6, lr}
   2b8c0:	e0040193 	mul	r4, r3, r1
   2b8c4:	e3540000 	cmp	r4, #0
   2b8c8:	08bd8070 	popeq	{r4, r5, r6, pc}
   2b8cc:	e1a05000 	mov	r5, r0
   2b8d0:	eb0025d8 	bl	35038 <CTimer::Get()>
   2b8d4:	eb002302 	bl	344e4 <CTimer::GetClockTicks()>
   2b8d8:	e5953054 	ldr	r3, [r5, #84]	@ 0x54
   2b8dc:	e3530000 	cmp	r3, #0
   2b8e0:	0a000009 	beq	2b90c <CScheduler::MsSleep(unsigned int)+0x5c>
   2b8e4:	e5d32004 	ldrb	r2, [r3, #4]
   2b8e8:	e3520001 	cmp	r2, #1
   2b8ec:	1a00000c 	bne	2b924 <CScheduler::MsSleep(unsigned int)+0x74>
   2b8f0:	e0841000 	add	r1, r4, r0
   2b8f4:	e3a02004 	mov	r2, #4
   2b8f8:	e1a00005 	mov	r0, r5
   2b8fc:	e5831008 	str	r1, [r3, #8]
   2b900:	e8bd4070 	pop	{r4, r5, r6, lr}
   2b904:	e5c32004 	strb	r2, [r3, #4]
   2b908:	eaffff0c 	b	2b540 <CScheduler::Yield()>
   2b90c:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b910:	e3401003 	movt	r1, #3
   2b914:	e30d0da0 	movw	r0, #56736	@ 0xdda0
   2b918:	e3400003 	movt	r0, #3
   2b91c:	e3a02072 	mov	r2, #114	@ 0x72
   2b920:	eb00012d 	bl	2bddc <assertion_failed>
   2b924:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b928:	e3401003 	movt	r1, #3
   2b92c:	e30d0db0 	movw	r0, #56752	@ 0xddb0
   2b930:	e3400003 	movt	r0, #3
   2b934:	e3a02073 	mov	r2, #115	@ 0x73
   2b938:	eb000127 	bl	2bddc <assertion_failed>

0002b93c <CScheduler::Get()>:
   2b93c:	e3043140 	movw	r3, #16704	@ 0x4140
   2b940:	e3403004 	movt	r3, #4
   2b944:	e5930000 	ldr	r0, [r3]
   2b948:	e3500000 	cmp	r0, #0
   2b94c:	112fff1e 	bxne	lr
   2b950:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2b954:	e3401003 	movt	r1, #3
   2b958:	e30b051c 	movw	r0, #46364	@ 0xb51c
   2b95c:	e3400003 	movt	r0, #3
   2b960:	e3a02f6e 	mov	r2, #440	@ 0x1b8
   2b964:	e92d4010 	push	{r4, lr}
   2b968:	eb00011b 	bl	2bddc <assertion_failed>

0002b96c <CScheduler::ListTasks(CDevice*)>:
   2b96c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b970:	e2515000 	subs	r5, r1, #0
   2b974:	e24dd034 	sub	sp, sp, #52	@ 0x34
   2b978:	0a00004e 	beq	2bab8 <CScheduler::ListTasks(CDevice*)+0x14c>
   2b97c:	e5953000 	ldr	r3, [r5]
   2b980:	e1a06000 	mov	r6, r0
   2b984:	e3a0201a 	mov	r2, #26
   2b988:	e59f1140 	ldr	r1, [pc, #320]	@ 2bad0 <CScheduler::ListTasks(CDevice*)+0x164>
   2b98c:	e1a00005 	mov	r0, r5
   2b990:	e593300c 	ldr	r3, [r3, #12]
   2b994:	e12fff33 	blx	r3
   2b998:	e5962050 	ldr	r2, [r6, #80]	@ 0x50
   2b99c:	e3520000 	cmp	r2, #0
   2b9a0:	0a000042 	beq	2bab0 <CScheduler::ListTasks(CDevice*)+0x144>
   2b9a4:	e30d3e30 	movw	r3, #56880	@ 0xde30
   2b9a8:	e3403003 	movt	r3, #3
   2b9ac:	e2467004 	sub	r7, r6, #4
   2b9b0:	e58d3014 	str	r3, [sp, #20]
   2b9b4:	e3a04000 	mov	r4, #0
   2b9b8:	e30d3e00 	movw	r3, #56832	@ 0xde00
   2b9bc:	e3403003 	movt	r3, #3
   2b9c0:	e58d301c 	str	r3, [sp, #28]
   2b9c4:	e3013fd8 	movw	r3, #8152	@ 0x1fd8
   2b9c8:	e3403004 	movt	r3, #4
   2b9cc:	e58d3018 	str	r3, [sp, #24]
   2b9d0:	ea000029 	b	2ba7c <CScheduler::ListTasks(CDevice*)+0x110>
   2b9d4:	e28d0020 	add	r0, sp, #32
   2b9d8:	eb001c19 	bl	32a44 <CString::CString()>
   2b9dc:	e5961054 	ldr	r1, [r6, #84]	@ 0x54
   2b9e0:	e1a0000a 	mov	r0, sl
   2b9e4:	e151000a 	cmp	r1, sl
   2b9e8:	159d3018 	ldrne	r3, [sp, #24]
   2b9ec:	059d801c 	ldreq	r8, [sp, #28]
   2b9f0:	10831109 	addne	r1, r3, r9, lsl #2
   2b9f4:	15918028 	ldrne	r8, [r1, #40]	@ 0x28
   2b9f8:	e5da1005 	ldrb	r1, [sl, #5]
   2b9fc:	e3510000 	cmp	r1, #0
   2ba00:	03a0b020 	moveq	fp, #32
   2ba04:	13a0b053 	movne	fp, #83	@ 0x53
   2ba08:	e3590003 	cmp	r9, #3
   2ba0c:	13a09020 	movne	r9, #32
   2ba10:	03a09054 	moveq	r9, #84	@ 0x54
   2ba14:	ebfffd0b 	bl	2ae48 <CTask::GetName() const>
   2ba18:	e59d1014 	ldr	r1, [sp, #20]
   2ba1c:	e1a02004 	mov	r2, r4
   2ba20:	e88d0900 	stm	sp, {r8, fp}
   2ba24:	e1a0300a 	mov	r3, sl
   2ba28:	e58d000c 	str	r0, [sp, #12]
   2ba2c:	e58d9008 	str	r9, [sp, #8]
   2ba30:	e28d0020 	add	r0, sp, #32
   2ba34:	eb0021bb 	bl	34128 <CString::Format(char const*, ...)>
   2ba38:	e5953000 	ldr	r3, [r5]
   2ba3c:	e28d0020 	add	r0, sp, #32
   2ba40:	e593b00c 	ldr	fp, [r3, #12]
   2ba44:	eb001c36 	bl	32b24 <CString::operator char const*() const>
   2ba48:	e1a08000 	mov	r8, r0
   2ba4c:	e28d0020 	add	r0, sp, #32
   2ba50:	eb001c71 	bl	32c1c <CString::GetLength() const>
   2ba54:	e1a01008 	mov	r1, r8
   2ba58:	e1a02000 	mov	r2, r0
   2ba5c:	e1a00005 	mov	r0, r5
   2ba60:	e12fff3b 	blx	fp
   2ba64:	e28d0020 	add	r0, sp, #32
   2ba68:	eb001bc2 	bl	32978 <CString::~CString()>
   2ba6c:	e5962050 	ldr	r2, [r6, #80]	@ 0x50
   2ba70:	e2844001 	add	r4, r4, #1
   2ba74:	e1520004 	cmp	r2, r4
   2ba78:	9a00000c 	bls	2bab0 <CScheduler::ListTasks(CDevice*)+0x144>
   2ba7c:	e5b7a004 	ldr	sl, [r7, #4]!
   2ba80:	e35a0000 	cmp	sl, #0
   2ba84:	0afffff9 	beq	2ba70 <CScheduler::ListTasks(CDevice*)+0x104>
   2ba88:	e5da2004 	ldrb	r2, [sl, #4]
   2ba8c:	e3520005 	cmp	r2, #5
   2ba90:	e6ef9072 	uxtb	r9, r2
   2ba94:	9affffce 	bls	2b9d4 <CScheduler::ListTasks(CDevice*)+0x68>
   2ba98:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2ba9c:	e3401003 	movt	r1, #3
   2baa0:	e30d0e14 	movw	r0, #56852	@ 0xde14
   2baa4:	e3400003 	movt	r0, #3
   2baa8:	e3a020d4 	mov	r2, #212	@ 0xd4
   2baac:	eb0000ca 	bl	2bddc <assertion_failed>
   2bab0:	e28dd034 	add	sp, sp, #52	@ 0x34
   2bab4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bab8:	e30d1c18 	movw	r1, #56344	@ 0xdc18
   2babc:	e3401003 	movt	r1, #3
   2bac0:	e30d0e04 	movw	r0, #56836	@ 0xde04
   2bac4:	e3400003 	movt	r0, #3
   2bac8:	e3a020c6 	mov	r2, #198	@ 0xc6
   2bacc:	eb0000c2 	bl	2bddc <assertion_failed>
   2bad0:	00041fe0 	.word	0x00041fe0

0002bad4 <TaskSwitch>:
   2bad4:	eef82a10 	vmrs	r2, fpexc
   2bad8:	eef13a10 	vmrs	r3, fpscr
   2badc:	e8a07ffd 	stmia	r0!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   2bae0:	ec800b20 	vstmia	r0, {d0-d15}
   2bae4:	e8b17ffd 	ldm	r1!, {r0, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   2bae8:	eee82a10 	vmsr	fpexc, r2
   2baec:	eee13a10 	vmsr	fpscr, r3
   2baf0:	ec910b20 	vldmia	r1, {d0-d15}
   2baf4:	e12fff1e 	bx	lr

0002baf8 <CSynchronizationEvent::CSynchronizationEvent(bool)>:
   2baf8:	e3a02000 	mov	r2, #0
   2bafc:	e5c01000 	strb	r1, [r0]
   2bb00:	e5802004 	str	r2, [r0, #4]
   2bb04:	e12fff1e 	bx	lr

0002bb08 <CSynchronizationEvent::~CSynchronizationEvent()>:
   2bb08:	e5903004 	ldr	r3, [r0, #4]
   2bb0c:	e3530000 	cmp	r3, #0
   2bb10:	012fff1e 	bxeq	lr
   2bb14:	e30d1e70 	movw	r1, #56944	@ 0xde70
   2bb18:	e3401003 	movt	r1, #3
   2bb1c:	e30d0e8c 	movw	r0, #56972	@ 0xde8c
   2bb20:	e3400003 	movt	r0, #3
   2bb24:	e3a02023 	mov	r2, #35	@ 0x23
   2bb28:	e92d4010 	push	{r4, lr}
   2bb2c:	eb0000aa 	bl	2bddc <assertion_failed>

0002bb30 <CSynchronizationEvent::GetState()>:
   2bb30:	e5d00000 	ldrb	r0, [r0]
   2bb34:	e12fff1e 	bx	lr

0002bb38 <CSynchronizationEvent::Clear()>:
   2bb38:	e3a03000 	mov	r3, #0
   2bb3c:	e5c03000 	strb	r3, [r0]
   2bb40:	e12fff1e 	bx	lr

0002bb44 <CSynchronizationEvent::Set()>:
   2bb44:	e5d03000 	ldrb	r3, [r0]
   2bb48:	e3530000 	cmp	r3, #0
   2bb4c:	112fff1e 	bxne	lr
   2bb50:	e92d4010 	push	{r4, lr}
   2bb54:	e1a04000 	mov	r4, r0
   2bb58:	e3a03001 	mov	r3, #1
   2bb5c:	e4c43004 	strb	r3, [r4], #4
   2bb60:	ebffff75 	bl	2b93c <CScheduler::Get()>
   2bb64:	e1a01004 	mov	r1, r4
   2bb68:	e8bd4010 	pop	{r4, lr}
   2bb6c:	eafffdea 	b	2b31c <CScheduler::WakeTasks(CTask**)>

0002bb70 <CSynchronizationEvent::Pulse()>:
   2bb70:	e92d4010 	push	{r4, lr}
   2bb74:	e1a04000 	mov	r4, r0
   2bb78:	e3a03000 	mov	r3, #0
   2bb7c:	e4c43004 	strb	r3, [r4], #4
   2bb80:	ebffff6d 	bl	2b93c <CScheduler::Get()>
   2bb84:	e1a01004 	mov	r1, r4
   2bb88:	e8bd4010 	pop	{r4, lr}
   2bb8c:	eafffde2 	b	2b31c <CScheduler::WakeTasks(CTask**)>

0002bb90 <CSynchronizationEvent::Wait()>:
   2bb90:	e5d02000 	ldrb	r2, [r0]
   2bb94:	e92d4070 	push	{r4, r5, r6, lr}
   2bb98:	e21250ff 	ands	r5, r2, #255	@ 0xff
   2bb9c:	18bd8070 	popne	{r4, r5, r6, pc}
   2bba0:	e1a04000 	mov	r4, r0
   2bba4:	ebffff64 	bl	2b93c <CScheduler::Get()>
   2bba8:	e1a02005 	mov	r2, r5
   2bbac:	e2841004 	add	r1, r4, #4
   2bbb0:	e8bd4070 	pop	{r4, r5, r6, lr}
   2bbb4:	eafffeaf 	b	2b678 <CScheduler::BlockTask(CTask**, unsigned int)>

0002bbb8 <CSynchronizationEvent::WaitWithTimeout(unsigned int)>:
   2bbb8:	e5d03000 	ldrb	r3, [r0]
   2bbbc:	e92d4070 	push	{r4, r5, r6, lr}
   2bbc0:	e1a04001 	mov	r4, r1
   2bbc4:	e3530000 	cmp	r3, #0
   2bbc8:	0a000002 	beq	2bbd8 <CSynchronizationEvent::WaitWithTimeout(unsigned int)+0x20>
   2bbcc:	e16f0f11 	clz	r0, r1
   2bbd0:	e1a002a0 	lsr	r0, r0, #5
   2bbd4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2bbd8:	e1a05000 	mov	r5, r0
   2bbdc:	ebffff56 	bl	2b93c <CScheduler::Get()>
   2bbe0:	e1a02004 	mov	r2, r4
   2bbe4:	e2851004 	add	r1, r5, #4
   2bbe8:	e8bd4070 	pop	{r4, r5, r6, lr}
   2bbec:	eafffea1 	b	2b678 <CScheduler::BlockTask(CTask**, unsigned int)>

0002bbf0 <CActLED::CActLED(bool)>:
   2bbf0:	e3043144 	movw	r3, #16708	@ 0x4144
   2bbf4:	e3403004 	movt	r3, #4
   2bbf8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2bbfc:	e3a02000 	mov	r2, #0
   2bc00:	e1a06001 	mov	r6, r1
   2bc04:	e5802000 	str	r2, [r0]
   2bc08:	e1a05000 	mov	r5, r0
   2bc0c:	e5802004 	str	r2, [r0, #4]
   2bc10:	e5830000 	str	r0, [r3]
   2bc14:	eb000efb 	bl	2f808 <CMachineInfo::Get()>
   2bc18:	eb000e0c 	bl	2f450 <CMachineInfo::GetActLEDInfo() const>
   2bc1c:	e1a04000 	mov	r4, r0
   2bc20:	e2107080 	ands	r7, r0, #128	@ 0x80
   2bc24:	0a000015 	beq	2bc80 <CActLED::CActLED(bool)+0x90>
   2bc28:	e3a00014 	mov	r0, #20
   2bc2c:	eb00293c 	bl	36124 <operator new(unsigned int)>
   2bc30:	e1a02006 	mov	r2, r6
   2bc34:	e204103f 	and	r1, r4, #63	@ 0x3f
   2bc38:	e1a07000 	mov	r7, r0
   2bc3c:	eb002797 	bl	35aa0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>
   2bc40:	e5956000 	ldr	r6, [r5]
   2bc44:	e2144040 	ands	r4, r4, #64	@ 0x40
   2bc48:	e5857004 	str	r7, [r5, #4]
   2bc4c:	03a03001 	moveq	r3, #1
   2bc50:	13a03000 	movne	r3, #0
   2bc54:	e3560000 	cmp	r6, #0
   2bc58:	e5c53008 	strb	r3, [r5, #8]
   2bc5c:	1a000013 	bne	2bcb0 <CActLED::CActLED(bool)+0xc0>
   2bc60:	e3570000 	cmp	r7, #0
   2bc64:	0a000015 	beq	2bcc0 <CActLED::CActLED(bool)+0xd0>
   2bc68:	e2541000 	subs	r1, r4, #0
   2bc6c:	e1a00007 	mov	r0, r7
   2bc70:	13a01001 	movne	r1, #1
   2bc74:	eb002740 	bl	3597c <CVirtualGPIOPin::Write(unsigned int)>
   2bc78:	e1a00005 	mov	r0, r5
   2bc7c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2bc80:	e3a00028 	mov	r0, #40	@ 0x28
   2bc84:	eb002926 	bl	36124 <operator new(unsigned int)>
   2bc88:	e1a03007 	mov	r3, r7
   2bc8c:	e204103f 	and	r1, r4, #63	@ 0x3f
   2bc90:	e3a02001 	mov	r2, #1
   2bc94:	e1a06000 	mov	r6, r0
   2bc98:	eb0007f8 	bl	2dc80 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>
   2bc9c:	e2144040 	ands	r4, r4, #64	@ 0x40
   2bca0:	e5856000 	str	r6, [r5]
   2bca4:	03a03001 	moveq	r3, #1
   2bca8:	13a03000 	movne	r3, #0
   2bcac:	e5c53008 	strb	r3, [r5, #8]
   2bcb0:	e2541000 	subs	r1, r4, #0
   2bcb4:	e1a00006 	mov	r0, r6
   2bcb8:	13a01001 	movne	r1, #1
   2bcbc:	eb00057e 	bl	2d2bc <CGPIOPin::Write(unsigned int)>
   2bcc0:	e1a00005 	mov	r0, r5
   2bcc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002bcc8 <CActLED::~CActLED()>:
   2bcc8:	e3043144 	movw	r3, #16708	@ 0x4144
   2bccc:	e3403004 	movt	r3, #4
   2bcd0:	e3a02000 	mov	r2, #0
   2bcd4:	e5832000 	str	r2, [r3]
   2bcd8:	e12fff1e 	bx	lr

0002bcdc <CActLED::On()>:
   2bcdc:	e1a03000 	mov	r3, r0
   2bce0:	e5900000 	ldr	r0, [r0]
   2bce4:	e3500000 	cmp	r0, #0
   2bce8:	e5d31008 	ldrb	r1, [r3, #8]
   2bcec:	0a000000 	beq	2bcf4 <CActLED::On()+0x18>
   2bcf0:	ea000571 	b	2d2bc <CGPIOPin::Write(unsigned int)>
   2bcf4:	e5930004 	ldr	r0, [r3, #4]
   2bcf8:	e3500000 	cmp	r0, #0
   2bcfc:	012fff1e 	bxeq	lr
   2bd00:	ea00271d 	b	3597c <CVirtualGPIOPin::Write(unsigned int)>

0002bd04 <CActLED::Off()>:
   2bd04:	e1a03000 	mov	r3, r0
   2bd08:	e5900000 	ldr	r0, [r0]
   2bd0c:	e3500000 	cmp	r0, #0
   2bd10:	e5d31008 	ldrb	r1, [r3, #8]
   2bd14:	0a000001 	beq	2bd20 <CActLED::Off()+0x1c>
   2bd18:	e2211001 	eor	r1, r1, #1
   2bd1c:	ea000566 	b	2d2bc <CGPIOPin::Write(unsigned int)>
   2bd20:	e5930004 	ldr	r0, [r3, #4]
   2bd24:	e3500000 	cmp	r0, #0
   2bd28:	012fff1e 	bxeq	lr
   2bd2c:	e2211001 	eor	r1, r1, #1
   2bd30:	ea002711 	b	3597c <CVirtualGPIOPin::Write(unsigned int)>

0002bd34 <CActLED::Blink(unsigned int, unsigned int, unsigned int)>:
   2bd34:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2bd38:	e2516000 	subs	r6, r1, #0
   2bd3c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2bd40:	e1a04000 	mov	r4, r0
   2bd44:	e1a07002 	mov	r7, r2
   2bd48:	e1a08003 	mov	r8, r3
   2bd4c:	e3a05001 	mov	r5, #1
   2bd50:	ea00000d 	b	2bd8c <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x58>
   2bd54:	eb000558 	bl	2d2bc <CGPIOPin::Write(unsigned int)>
   2bd58:	e1a00007 	mov	r0, r7
   2bd5c:	eb002474 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   2bd60:	e5940000 	ldr	r0, [r4]
   2bd64:	e3500000 	cmp	r0, #0
   2bd68:	0a000010 	beq	2bdb0 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x7c>
   2bd6c:	e5d41008 	ldrb	r1, [r4, #8]
   2bd70:	e2211001 	eor	r1, r1, #1
   2bd74:	eb000550 	bl	2d2bc <CGPIOPin::Write(unsigned int)>
   2bd78:	e1a00008 	mov	r0, r8
   2bd7c:	e2855001 	add	r5, r5, #1
   2bd80:	eb00246b 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   2bd84:	e1560005 	cmp	r6, r5
   2bd88:	38bd81f0 	popcc	{r4, r5, r6, r7, r8, pc}
   2bd8c:	e5940000 	ldr	r0, [r4]
   2bd90:	e5d41008 	ldrb	r1, [r4, #8]
   2bd94:	e3500000 	cmp	r0, #0
   2bd98:	1affffed 	bne	2bd54 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x20>
   2bd9c:	e5940004 	ldr	r0, [r4, #4]
   2bda0:	e3500000 	cmp	r0, #0
   2bda4:	0affffeb 	beq	2bd58 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x24>
   2bda8:	eb0026f3 	bl	3597c <CVirtualGPIOPin::Write(unsigned int)>
   2bdac:	eaffffe9 	b	2bd58 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x24>
   2bdb0:	e5940004 	ldr	r0, [r4, #4]
   2bdb4:	e3500000 	cmp	r0, #0
   2bdb8:	0affffee 	beq	2bd78 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x44>
   2bdbc:	e5d41008 	ldrb	r1, [r4, #8]
   2bdc0:	e2211001 	eor	r1, r1, #1
   2bdc4:	eb0026ec 	bl	3597c <CVirtualGPIOPin::Write(unsigned int)>
   2bdc8:	eaffffea 	b	2bd78 <CActLED::Blink(unsigned int, unsigned int, unsigned int)+0x44>

0002bdcc <CActLED::Get()>:
   2bdcc:	e3043144 	movw	r3, #16708	@ 0x4144
   2bdd0:	e3403004 	movt	r3, #4
   2bdd4:	e5930000 	ldr	r0, [r3]
   2bdd8:	e12fff1e 	bx	lr

0002bddc <assertion_failed>:
   2bddc:	e92d4080 	push	{r7, lr}
   2bde0:	e1a04000 	mov	r4, r0
   2bde4:	e1a05001 	mov	r5, r1
   2bde8:	e24dd018 	sub	sp, sp, #24
   2bdec:	e1a06002 	mov	r6, r2
   2bdf0:	e1a0700d 	mov	r7, sp
   2bdf4:	eb003080 	bl	37ffc <CInterruptSystem::DisableFIQ()>
   2bdf8:	f1080040 	cpsie	f
   2bdfc:	e28d0008 	add	r0, sp, #8
   2be00:	eb001b0f 	bl	32a44 <CString::CString()>
   2be04:	e1a02005 	mov	r2, r5
   2be08:	e1a03006 	mov	r3, r6
   2be0c:	e28d0008 	add	r0, sp, #8
   2be10:	e30d1ea4 	movw	r1, #56996	@ 0xdea4
   2be14:	e3401003 	movt	r1, #3
   2be18:	eb0020c2 	bl	34128 <CString::Format(char const*, ...)>
   2be1c:	e28d0008 	add	r0, sp, #8
   2be20:	eb001b3f 	bl	32b24 <CString::operator char const*() const>
   2be24:	e1a01000 	mov	r1, r0
   2be28:	e1a00007 	mov	r0, r7
   2be2c:	eb0001e7 	bl	2c5d0 <debug_stacktrace(unsigned int const*, char const*)>
   2be30:	eb000a64 	bl	2e7c8 <CLogger::Get()>
   2be34:	e1a05000 	mov	r5, r0
   2be38:	e28d0008 	add	r0, sp, #8
   2be3c:	eb001b38 	bl	32b24 <CString::operator char const*() const>
   2be40:	e30d3eac 	movw	r3, #57004	@ 0xdeac
   2be44:	e3403003 	movt	r3, #3
   2be48:	e1a01000 	mov	r1, r0
   2be4c:	e3a02000 	mov	r2, #0
   2be50:	e1a00005 	mov	r0, r5
   2be54:	e58d4000 	str	r4, [sp]
   2be58:	eb000c23 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2be5c:	eafffffe 	b	2be5c <assertion_failed+0x80>

0002be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   2be60:	e1a02001 	mov	r2, r1
   2be64:	e92d4010 	push	{r4, lr}
   2be68:	e3a01008 	mov	r1, #8
   2be6c:	e1a04000 	mov	r4, r0
   2be70:	eb00325f 	bl	387f4 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   2be74:	e1a00004 	mov	r0, r4
   2be78:	e8bd8010 	pop	{r4, pc}

0002be7c <CBcmPropertyTags::~CBcmPropertyTags()>:
   2be7c:	e92d4010 	push	{r4, lr}
   2be80:	e1a04000 	mov	r4, r0
   2be84:	eb00325d 	bl	38800 <CBcmMailBox::~CBcmMailBox()>
   2be88:	e1a00004 	mov	r0, r4
   2be8c:	e8bd8010 	pop	{r4, pc}

0002be90 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   2be90:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2be94:	e2519000 	subs	r9, r1, #0
   2be98:	0a000033 	beq	2bf6c <CBcmPropertyTags::GetTags(void*, unsigned int)+0xdc>
   2be9c:	e1a05002 	mov	r5, r2
   2bea0:	e352000f 	cmp	r2, #15
   2bea4:	9a000035 	bls	2bf80 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf0>
   2bea8:	e282700c 	add	r7, r2, #12
   2beac:	e2126003 	ands	r6, r2, #3
   2beb0:	1a000037 	bne	2bf94 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x104>
   2beb4:	e1a08000 	mov	r8, r0
   2beb8:	e1a00006 	mov	r0, r6
   2bebc:	eb002e80 	bl	378c4 <CMemorySystem::GetCoherentPage(unsigned int)>
   2bec0:	e280a008 	add	sl, r0, #8
   2bec4:	e7e73457 	ubfx	r3, r7, #8, #8
   2bec8:	e5c07000 	strb	r7, [r0]
   2becc:	e5c06004 	strb	r6, [r0, #4]
   2bed0:	e1a04000 	mov	r4, r0
   2bed4:	e5c06005 	strb	r6, [r0, #5]
   2bed8:	e1a02005 	mov	r2, r5
   2bedc:	e5c06006 	strb	r6, [r0, #6]
   2bee0:	e1a01009 	mov	r1, r9
   2bee4:	e5c06007 	strb	r6, [r0, #7]
   2bee8:	e5c03001 	strb	r3, [r0, #1]
   2beec:	e7e73857 	ubfx	r3, r7, #16, #8
   2bef0:	e1a07c27 	lsr	r7, r7, #24
   2bef4:	e5c03002 	strb	r3, [r0, #2]
   2bef8:	e5c07003 	strb	r7, [r0, #3]
   2befc:	e1a0000a 	mov	r0, sl
   2bf00:	eb00267f 	bl	35904 <memcpy>
   2bf04:	e78a6005 	str	r6, [sl, r5]
   2bf08:	f57ff04f 	dsb	sy
   2bf0c:	e3846103 	orr	r6, r4, #-1073741824	@ 0xc0000000
   2bf10:	e1a00008 	mov	r0, r8
   2bf14:	e1a01006 	mov	r1, r6
   2bf18:	eb003239 	bl	38804 <CBcmMailBox::WriteRead(unsigned int)>
   2bf1c:	e1500006 	cmp	r0, r6
   2bf20:	0a000001 	beq	2bf2c <CBcmPropertyTags::GetTags(void*, unsigned int)+0x9c>
   2bf24:	e3a00000 	mov	r0, #0
   2bf28:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bf2c:	f57ff05f 	dmb	sy
   2bf30:	e5d42005 	ldrb	r2, [r4, #5]
   2bf34:	e5d43004 	ldrb	r3, [r4, #4]
   2bf38:	e1833402 	orr	r3, r3, r2, lsl #8
   2bf3c:	e5d42006 	ldrb	r2, [r4, #6]
   2bf40:	e1833802 	orr	r3, r3, r2, lsl #16
   2bf44:	e5d42007 	ldrb	r2, [r4, #7]
   2bf48:	e1833c02 	orr	r3, r3, r2, lsl #24
   2bf4c:	e3530102 	cmp	r3, #-2147483648	@ 0x80000000
   2bf50:	1afffff3 	bne	2bf24 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x94>
   2bf54:	e1a02005 	mov	r2, r5
   2bf58:	e1a0100a 	mov	r1, sl
   2bf5c:	e1a00009 	mov	r0, r9
   2bf60:	eb002667 	bl	35904 <memcpy>
   2bf64:	e3a00001 	mov	r0, #1
   2bf68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bf6c:	e3021018 	movw	r1, #8216	@ 0x2018
   2bf70:	e3401004 	movt	r1, #4
   2bf74:	e3a0204b 	mov	r2, #75	@ 0x4b
   2bf78:	e2810014 	add	r0, r1, #20
   2bf7c:	ebffff96 	bl	2bddc <assertion_failed>
   2bf80:	e3021018 	movw	r1, #8216	@ 0x2018
   2bf84:	e3401004 	movt	r1, #4
   2bf88:	e3a0204c 	mov	r2, #76	@ 0x4c
   2bf8c:	e2810020 	add	r0, r1, #32
   2bf90:	ebffff91 	bl	2bddc <assertion_failed>
   2bf94:	e3021018 	movw	r1, #8216	@ 0x2018
   2bf98:	e3401004 	movt	r1, #4
   2bf9c:	e3a0204e 	mov	r2, #78	@ 0x4e
   2bfa0:	e281004c 	add	r0, r1, #76	@ 0x4c
   2bfa4:	ebffff8c 	bl	2bddc <assertion_failed>

0002bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   2bfa8:	e92d4010 	push	{r4, lr}
   2bfac:	e2524000 	subs	r4, r2, #0
   2bfb0:	e59dc008 	ldr	ip, [sp, #8]
   2bfb4:	0a00002e 	beq	2c074 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xcc>
   2bfb8:	e353000f 	cmp	r3, #15
   2bfbc:	9a000031 	bls	2c088 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0xe0>
   2bfc0:	e243e00c 	sub	lr, r3, #12
   2bfc4:	e1a02003 	mov	r2, r3
   2bfc8:	e5c41000 	strb	r1, [r4]
   2bfcc:	e7e73451 	ubfx	r3, r1, #8, #8
   2bfd0:	e5c4c008 	strb	ip, [r4, #8]
   2bfd4:	e5c4e004 	strb	lr, [r4, #4]
   2bfd8:	e5c43001 	strb	r3, [r4, #1]
   2bfdc:	e7e73851 	ubfx	r3, r1, #16, #8
   2bfe0:	e1a01c21 	lsr	r1, r1, #24
   2bfe4:	e5c43002 	strb	r3, [r4, #2]
   2bfe8:	e5c41003 	strb	r1, [r4, #3]
   2bfec:	e7e7345e 	ubfx	r3, lr, #8, #8
   2bff0:	e1a01004 	mov	r1, r4
   2bff4:	e5c43005 	strb	r3, [r4, #5]
   2bff8:	e7e7385e 	ubfx	r3, lr, #16, #8
   2bffc:	e1a0ec2e 	lsr	lr, lr, #24
   2c000:	e5c43006 	strb	r3, [r4, #6]
   2c004:	e7e7345c 	ubfx	r3, ip, #8, #8
   2c008:	e5c4e007 	strb	lr, [r4, #7]
   2c00c:	e5c43009 	strb	r3, [r4, #9]
   2c010:	e7e7385c 	ubfx	r3, ip, #16, #8
   2c014:	e7e6cc5c 	ubfx	ip, ip, #24, #7
   2c018:	e5c4300a 	strb	r3, [r4, #10]
   2c01c:	e5c4c00b 	strb	ip, [r4, #11]
   2c020:	ebffff9a 	bl	2be90 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   2c024:	e3500000 	cmp	r0, #0
   2c028:	08bd8010 	popeq	{r4, pc}
   2c02c:	e5d40009 	ldrb	r0, [r4, #9]
   2c030:	e5d43008 	ldrb	r3, [r4, #8]
   2c034:	e5d4100a 	ldrb	r1, [r4, #10]
   2c038:	e5d4200b 	ldrb	r2, [r4, #11]
   2c03c:	e1833400 	orr	r3, r3, r0, lsl #8
   2c040:	e1833801 	orr	r3, r3, r1, lsl #16
   2c044:	e1833c02 	orr	r3, r3, r2, lsl #24
   2c048:	e5c43008 	strb	r3, [r4, #8]
   2c04c:	e3c32102 	bic	r2, r3, #-2147483648	@ 0x80000000
   2c050:	e2520000 	subs	r0, r2, #0
   2c054:	e7e71453 	ubfx	r1, r3, #8, #8
   2c058:	e1a02c22 	lsr	r2, r2, #24
   2c05c:	e7e73853 	ubfx	r3, r3, #16, #8
   2c060:	13a00001 	movne	r0, #1
   2c064:	e5c41009 	strb	r1, [r4, #9]
   2c068:	e5c4300a 	strb	r3, [r4, #10]
   2c06c:	e5c4200b 	strb	r2, [r4, #11]
   2c070:	e8bd8010 	pop	{r4, pc}
   2c074:	e3021018 	movw	r1, #8216	@ 0x2018
   2c078:	e3401004 	movt	r1, #4
   2c07c:	e3a02033 	mov	r2, #51	@ 0x33
   2c080:	e2810064 	add	r0, r1, #100	@ 0x64
   2c084:	ebffff54 	bl	2bddc <assertion_failed>
   2c088:	e3021018 	movw	r1, #8216	@ 0x2018
   2c08c:	e3401004 	movt	r1, #4
   2c090:	e3a02034 	mov	r2, #52	@ 0x34
   2c094:	e2810070 	add	r0, r1, #112	@ 0x70
   2c098:	ebffff4f 	bl	2bddc <assertion_failed>

0002c09c <CClassAllocator::~CClassAllocator()>:
   2c09c:	e92d4010 	push	{r4, lr}
   2c0a0:	e1a04000 	mov	r4, r0
   2c0a4:	e590000c 	ldr	r0, [r0, #12]
   2c0a8:	e3a03000 	mov	r3, #0
   2c0ac:	e1500003 	cmp	r0, r3
   2c0b0:	e5843010 	str	r3, [r4, #16]
   2c0b4:	0a000000 	beq	2c0bc <CClassAllocator::~CClassAllocator()+0x20>
   2c0b8:	eb00305b 	bl	3822c <free>
   2c0bc:	e1a00004 	mov	r0, r4
   2c0c0:	e8bd8010 	pop	{r4, pc}

0002c0c4 <CClassAllocator::Init(unsigned int, unsigned int)>:
   2c0c4:	e3510001 	cmp	r1, #1
   2c0c8:	e92d4010 	push	{r4, lr}
   2c0cc:	33a01001 	movcc	r1, #1
   2c0d0:	e281101f 	add	r1, r1, #31
   2c0d4:	e3520000 	cmp	r2, #0
   2c0d8:	e3c1100f 	bic	r1, r1, #15
   2c0dc:	e5801000 	str	r1, [r0]
   2c0e0:	0a00001c 	beq	2c158 <CClassAllocator::Init(unsigned int, unsigned int)+0x94>
   2c0e4:	e1a04000 	mov	r4, r0
   2c0e8:	e0000192 	mul	r0, r2, r1
   2c0ec:	e5842004 	str	r2, [r4, #4]
   2c0f0:	eb00303a 	bl	381e0 <malloc>
   2c0f4:	e3500000 	cmp	r0, #0
   2c0f8:	e584000c 	str	r0, [r4, #12]
   2c0fc:	0a000013 	beq	2c150 <CClassAllocator::Init(unsigned int, unsigned int)+0x8c>
   2c100:	e210200f 	ands	r2, r0, #15
   2c104:	1a000019 	bne	2c170 <CClassAllocator::Init(unsigned int, unsigned int)+0xac>
   2c108:	e5943004 	ldr	r3, [r4, #4]
   2c10c:	e3530000 	cmp	r3, #0
   2c110:	08bd8010 	popeq	{r4, pc}
   2c114:	e5941010 	ldr	r1, [r4, #16]
   2c118:	e305e350 	movw	lr, #21328	@ 0x5350
   2c11c:	e344ef42 	movt	lr, #20290	@ 0x4f42
   2c120:	e5943000 	ldr	r3, [r4]
   2c124:	e1a0c001 	mov	ip, r1
   2c128:	e0030293 	mul	r3, r3, r2
   2c12c:	e2822001 	add	r2, r2, #1
   2c130:	e0801003 	add	r1, r0, r3
   2c134:	e780e003 	str	lr, [r0, r3]
   2c138:	e581c00c 	str	ip, [r1, #12]
   2c13c:	e5943004 	ldr	r3, [r4, #4]
   2c140:	e1530002 	cmp	r3, r2
   2c144:	8afffff5 	bhi	2c120 <CClassAllocator::Init(unsigned int, unsigned int)+0x5c>
   2c148:	e5841010 	str	r1, [r4, #16]
   2c14c:	e8bd8010 	pop	{r4, pc}
   2c150:	e5840004 	str	r0, [r4, #4]
   2c154:	e8bd8010 	pop	{r4, pc}
   2c158:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c15c:	e3401003 	movt	r1, #3
   2c160:	e30d0ed8 	movw	r0, #57048	@ 0xded8
   2c164:	e3400003 	movt	r0, #3
   2c168:	e3a02057 	mov	r2, #87	@ 0x57
   2c16c:	ebffff1a 	bl	2bddc <assertion_failed>
   2c170:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c174:	e3401003 	movt	r1, #3
   2c178:	e30d0ef0 	movw	r0, #57072	@ 0xdef0
   2c17c:	e3400003 	movt	r0, #3
   2c180:	e3a02061 	mov	r2, #97	@ 0x61
   2c184:	ebffff14 	bl	2bddc <assertion_failed>

0002c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>:
   2c188:	e92d4010 	push	{r4, lr}
   2c18c:	e1a04000 	mov	r4, r0
   2c190:	e5803008 	str	r3, [r0, #8]
   2c194:	e3a03000 	mov	r3, #0
   2c198:	e580300c 	str	r3, [r0, #12]
   2c19c:	e5803010 	str	r3, [r0, #16]
   2c1a0:	e5c03014 	strb	r3, [r0, #20]
   2c1a4:	e3a03001 	mov	r3, #1
   2c1a8:	e580301c 	str	r3, [r0, #28]
   2c1ac:	ebffffc4 	bl	2c0c4 <CClassAllocator::Init(unsigned int, unsigned int)>
   2c1b0:	e1a00004 	mov	r0, r4
   2c1b4:	e8bd8010 	pop	{r4, pc}

0002c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>:
   2c1b8:	e92d4010 	push	{r4, lr}
   2c1bc:	e1a04000 	mov	r4, r0
   2c1c0:	e5803018 	str	r3, [r0, #24]
   2c1c4:	e580301c 	str	r3, [r0, #28]
   2c1c8:	e59d3008 	ldr	r3, [sp, #8]
   2c1cc:	e5803008 	str	r3, [r0, #8]
   2c1d0:	e3a03000 	mov	r3, #0
   2c1d4:	e580300c 	str	r3, [r0, #12]
   2c1d8:	e5803010 	str	r3, [r0, #16]
   2c1dc:	e3a03001 	mov	r3, #1
   2c1e0:	e5c03014 	strb	r3, [r0, #20]
   2c1e4:	ebffffb6 	bl	2c0c4 <CClassAllocator::Init(unsigned int, unsigned int)>
   2c1e8:	e1a00004 	mov	r0, r4
   2c1ec:	e8bd8010 	pop	{r4, pc}

0002c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>:
   2c1f0:	e5d03014 	ldrb	r3, [r0, #20]
   2c1f4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c1f8:	e3530000 	cmp	r3, #0
   2c1fc:	0a000027 	beq	2c2a0 <CClassAllocator::Extend(unsigned int, unsigned int)+0xb0>
   2c200:	e5903018 	ldr	r3, [r0, #24]
   2c204:	e1a05000 	mov	r5, r0
   2c208:	e1530002 	cmp	r3, r2
   2c20c:	1a000029 	bne	2c2b8 <CClassAllocator::Extend(unsigned int, unsigned int)+0xc8>
   2c210:	e1a07001 	mov	r7, r1
   2c214:	e3510000 	cmp	r1, #0
   2c218:	0a00002c 	beq	2c2d0 <CClassAllocator::Extend(unsigned int, unsigned int)+0xe0>
   2c21c:	e5900000 	ldr	r0, [r0]
   2c220:	e0000190 	mul	r0, r0, r1
   2c224:	eb002fed 	bl	381e0 <malloc>
   2c228:	e2506000 	subs	r6, r0, #0
   2c22c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2c230:	e216400f 	ands	r4, r6, #15
   2c234:	1a00002b 	bne	2c2e8 <CClassAllocator::Extend(unsigned int, unsigned int)+0xf8>
   2c238:	e595001c 	ldr	r0, [r5, #28]
   2c23c:	e3500000 	cmp	r0, #0
   2c240:	1a000014 	bne	2c298 <CClassAllocator::Extend(unsigned int, unsigned int)+0xa8>
   2c244:	e5952010 	ldr	r2, [r5, #16]
   2c248:	e3050350 	movw	r0, #21328	@ 0x5350
   2c24c:	e3440f42 	movt	r0, #20290	@ 0x4f42
   2c250:	e5953000 	ldr	r3, [r5]
   2c254:	e1a01002 	mov	r1, r2
   2c258:	e0030493 	mul	r3, r3, r4
   2c25c:	e2844001 	add	r4, r4, #1
   2c260:	e1570004 	cmp	r7, r4
   2c264:	e0862003 	add	r2, r6, r3
   2c268:	e7860003 	str	r0, [r6, r3]
   2c26c:	e582100c 	str	r1, [r2, #12]
   2c270:	1afffff6 	bne	2c250 <CClassAllocator::Extend(unsigned int, unsigned int)+0x60>
   2c274:	e595101c 	ldr	r1, [r5, #28]
   2c278:	e5953004 	ldr	r3, [r5, #4]
   2c27c:	e3510000 	cmp	r1, #0
   2c280:	e5852010 	str	r2, [r5, #16]
   2c284:	e0833007 	add	r3, r3, r7
   2c288:	e5853004 	str	r3, [r5, #4]
   2c28c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2c290:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2c294:	ea002de4 	b	37a2c <LeaveCritical>
   2c298:	eb002db8 	bl	37980 <EnterCritical>
   2c29c:	eaffffe8 	b	2c244 <CClassAllocator::Extend(unsigned int, unsigned int)+0x54>
   2c2a0:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c2a4:	e3401003 	movt	r1, #3
   2c2a8:	e30d0f2c 	movw	r0, #57132	@ 0xdf2c
   2c2ac:	e3400003 	movt	r0, #3
   2c2b0:	e3a02070 	mov	r2, #112	@ 0x70
   2c2b4:	ebfffec8 	bl	2bddc <assertion_failed>
   2c2b8:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c2bc:	e3401003 	movt	r1, #3
   2c2c0:	e30d0f3c 	movw	r0, #57148	@ 0xdf3c
   2c2c4:	e3400003 	movt	r0, #3
   2c2c8:	e3a02071 	mov	r2, #113	@ 0x71
   2c2cc:	ebfffec2 	bl	2bddc <assertion_failed>
   2c2d0:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c2d4:	e3401003 	movt	r1, #3
   2c2d8:	e30d0ed8 	movw	r0, #57048	@ 0xded8
   2c2dc:	e3400003 	movt	r0, #3
   2c2e0:	e3a02072 	mov	r2, #114	@ 0x72
   2c2e4:	ebfffebc 	bl	2bddc <assertion_failed>
   2c2e8:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c2ec:	e3401003 	movt	r1, #3
   2c2f0:	e30d0f5c 	movw	r0, #57180	@ 0xdf5c
   2c2f4:	e3400003 	movt	r0, #3
   2c2f8:	e3a0207a 	mov	r2, #122	@ 0x7a
   2c2fc:	ebfffeb6 	bl	2bddc <assertion_failed>

0002c300 <CClassAllocator::Allocate()>:
   2c300:	e92d4030 	push	{r4, r5, lr}
   2c304:	e1a04000 	mov	r4, r0
   2c308:	e5d03014 	ldrb	r3, [r0, #20]
   2c30c:	e24dd00c 	sub	sp, sp, #12
   2c310:	e3530000 	cmp	r3, #0
   2c314:	0a000002 	beq	2c324 <CClassAllocator::Allocate()+0x24>
   2c318:	e590001c 	ldr	r0, [r0, #28]
   2c31c:	e3500000 	cmp	r0, #0
   2c320:	1a000016 	bne	2c380 <CClassAllocator::Allocate()+0x80>
   2c324:	e5945010 	ldr	r5, [r4, #16]
   2c328:	e3550000 	cmp	r5, #0
   2c32c:	0a00001e 	beq	2c3ac <CClassAllocator::Allocate()+0xac>
   2c330:	e5952000 	ldr	r2, [r5]
   2c334:	e3053350 	movw	r3, #21328	@ 0x5350
   2c338:	e3443f42 	movt	r3, #20290	@ 0x4f42
   2c33c:	e1520003 	cmp	r2, r3
   2c340:	1a000023 	bne	2c3d4 <CClassAllocator::Allocate()+0xd4>
   2c344:	e5d42014 	ldrb	r2, [r4, #20]
   2c348:	e3a03000 	mov	r3, #0
   2c34c:	e595100c 	ldr	r1, [r5, #12]
   2c350:	e5841010 	str	r1, [r4, #16]
   2c354:	e1520003 	cmp	r2, r3
   2c358:	e585300c 	str	r3, [r5, #12]
   2c35c:	1a000002 	bne	2c36c <CClassAllocator::Allocate()+0x6c>
   2c360:	e2850010 	add	r0, r5, #16
   2c364:	e28dd00c 	add	sp, sp, #12
   2c368:	e8bd8030 	pop	{r4, r5, pc}
   2c36c:	e594301c 	ldr	r3, [r4, #28]
   2c370:	e3530000 	cmp	r3, #0
   2c374:	0afffff9 	beq	2c360 <CClassAllocator::Allocate()+0x60>
   2c378:	eb002dab 	bl	37a2c <LeaveCritical>
   2c37c:	eafffff7 	b	2c360 <CClassAllocator::Allocate()+0x60>
   2c380:	eb002d7e 	bl	37980 <EnterCritical>
   2c384:	e5945010 	ldr	r5, [r4, #16]
   2c388:	e3550000 	cmp	r5, #0
   2c38c:	1affffe7 	bne	2c330 <CClassAllocator::Allocate()+0x30>
   2c390:	e5d43014 	ldrb	r3, [r4, #20]
   2c394:	e3530000 	cmp	r3, #0
   2c398:	0a000003 	beq	2c3ac <CClassAllocator::Allocate()+0xac>
   2c39c:	e594301c 	ldr	r3, [r4, #28]
   2c3a0:	e3530000 	cmp	r3, #0
   2c3a4:	0a000000 	beq	2c3ac <CClassAllocator::Allocate()+0xac>
   2c3a8:	eb002d9f 	bl	37a2c <LeaveCritical>
   2c3ac:	eb000905 	bl	2e7c8 <CLogger::Get()>
   2c3b0:	e5943004 	ldr	r3, [r4, #4]
   2c3b4:	e5941008 	ldr	r1, [r4, #8]
   2c3b8:	e3a02000 	mov	r2, #0
   2c3bc:	e58d3000 	str	r3, [sp]
   2c3c0:	e30d3f98 	movw	r3, #57240	@ 0xdf98
   2c3c4:	e3403003 	movt	r3, #3
   2c3c8:	eb000ac7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2c3cc:	e3a00000 	mov	r0, #0
   2c3d0:	eaffffe3 	b	2c364 <CClassAllocator::Allocate()+0x64>
   2c3d4:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c3d8:	e3401003 	movt	r1, #3
   2c3dc:	e30d0fc4 	movw	r0, #57284	@ 0xdfc4
   2c3e0:	e3400003 	movt	r0, #3
   2c3e4:	e3a020a3 	mov	r2, #163	@ 0xa3
   2c3e8:	ebfffe7b 	bl	2bddc <assertion_failed>

0002c3ec <CClassAllocator::Free(void*)>:
   2c3ec:	e92d4070 	push	{r4, r5, r6, lr}
   2c3f0:	e2514000 	subs	r4, r1, #0
   2c3f4:	0a00001f 	beq	2c478 <CClassAllocator::Free(void*)+0x8c>
   2c3f8:	e5142010 	ldr	r2, [r4, #-16]
   2c3fc:	e3053350 	movw	r3, #21328	@ 0x5350
   2c400:	e3443f42 	movt	r3, #20290	@ 0x4f42
   2c404:	e2446010 	sub	r6, r4, #16
   2c408:	e1520003 	cmp	r2, r3
   2c40c:	1a00001f 	bne	2c490 <CClassAllocator::Free(void*)+0xa4>
   2c410:	e5143004 	ldr	r3, [r4, #-4]
   2c414:	e3530000 	cmp	r3, #0
   2c418:	1a000022 	bne	2c4a8 <CClassAllocator::Free(void*)+0xbc>
   2c41c:	e5d03014 	ldrb	r3, [r0, #20]
   2c420:	e1a05000 	mov	r5, r0
   2c424:	e3530000 	cmp	r3, #0
   2c428:	0a000002 	beq	2c438 <CClassAllocator::Free(void*)+0x4c>
   2c42c:	e590001c 	ldr	r0, [r0, #28]
   2c430:	e3500000 	cmp	r0, #0
   2c434:	1a000003 	bne	2c448 <CClassAllocator::Free(void*)+0x5c>
   2c438:	e5953010 	ldr	r3, [r5, #16]
   2c43c:	e5043004 	str	r3, [r4, #-4]
   2c440:	e5856010 	str	r6, [r5, #16]
   2c444:	e8bd8070 	pop	{r4, r5, r6, pc}
   2c448:	eb002d4c 	bl	37980 <EnterCritical>
   2c44c:	e5d53014 	ldrb	r3, [r5, #20]
   2c450:	e5952010 	ldr	r2, [r5, #16]
   2c454:	e3530000 	cmp	r3, #0
   2c458:	e5042004 	str	r2, [r4, #-4]
   2c45c:	e5856010 	str	r6, [r5, #16]
   2c460:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c464:	e595301c 	ldr	r3, [r5, #28]
   2c468:	e3530000 	cmp	r3, #0
   2c46c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2c470:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c474:	ea002d6c 	b	37a2c <LeaveCritical>
   2c478:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c47c:	e3401003 	movt	r1, #3
   2c480:	e30d0fe4 	movw	r0, #57316	@ 0xdfe4
   2c484:	e3400003 	movt	r0, #3
   2c488:	e3a020b1 	mov	r2, #177	@ 0xb1
   2c48c:	ebfffe52 	bl	2bddc <assertion_failed>
   2c490:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c494:	e3401003 	movt	r1, #3
   2c498:	e30d0ff0 	movw	r0, #57328	@ 0xdff0
   2c49c:	e3400003 	movt	r0, #3
   2c4a0:	e3a020b5 	mov	r2, #181	@ 0xb5
   2c4a4:	ebfffe4c 	bl	2bddc <assertion_failed>
   2c4a8:	e30d1ec4 	movw	r1, #57028	@ 0xdec4
   2c4ac:	e3401003 	movt	r1, #3
   2c4b0:	e30e000c 	movw	r0, #57356	@ 0xe00c
   2c4b4:	e3400003 	movt	r0, #3
   2c4b8:	e3a020b6 	mov	r2, #182	@ 0xb6
   2c4bc:	ebfffe46 	bl	2bddc <assertion_failed>

0002c4c0 <debug_hexdump(void const*, unsigned int, char const*)>:
   2c4c0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c4c4:	e3520000 	cmp	r2, #0
   2c4c8:	e30280b0 	movw	r8, #8368	@ 0x20b0
   2c4cc:	e3408004 	movt	r8, #4
   2c4d0:	e24dd054 	sub	sp, sp, #84	@ 0x54
   2c4d4:	11a08002 	movne	r8, r2
   2c4d8:	e1a05001 	mov	r5, r1
   2c4dc:	e1a04000 	mov	r4, r0
   2c4e0:	eb0008b8 	bl	2e7c8 <CLogger::Get()>
   2c4e4:	e3a02004 	mov	r2, #4
   2c4e8:	e1a01008 	mov	r1, r8
   2c4ec:	e30e3020 	movw	r3, #57376	@ 0xe020
   2c4f0:	e3403003 	movt	r3, #3
   2c4f4:	e58d4004 	str	r4, [sp, #4]
   2c4f8:	e58d5000 	str	r5, [sp]
   2c4fc:	eb000a7a 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2c500:	e3550000 	cmp	r5, #0
   2c504:	0a00002f 	beq	2c5c8 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   2c508:	e30e3048 	movw	r3, #57416	@ 0xe048
   2c50c:	e3403003 	movt	r3, #3
   2c510:	e205900f 	and	r9, r5, #15
   2c514:	e58d304c 	str	r3, [sp, #76]	@ 0x4c
   2c518:	ea000001 	b	2c524 <debug_hexdump(void const*, unsigned int, char const*)+0x64>
   2c51c:	e2555010 	subs	r5, r5, #16
   2c520:	0a000028 	beq	2c5c8 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   2c524:	eb0008a7 	bl	2e7c8 <CLogger::Get()>
   2c528:	e5d4e00f 	ldrb	lr, [r4, #15]
   2c52c:	e5d4c00e 	ldrb	ip, [r4, #14]
   2c530:	e3a02004 	mov	r2, #4
   2c534:	e5d4a00d 	ldrb	sl, [r4, #13]
   2c538:	e5d4300c 	ldrb	r3, [r4, #12]
   2c53c:	e5d4700b 	ldrb	r7, [r4, #11]
   2c540:	e5d4100a 	ldrb	r1, [r4, #10]
   2c544:	e5d46009 	ldrb	r6, [r4, #9]
   2c548:	e58de040 	str	lr, [sp, #64]	@ 0x40
   2c54c:	e58dc03c 	str	ip, [sp, #60]	@ 0x3c
   2c550:	e5d4e008 	ldrb	lr, [r4, #8]
   2c554:	e5d4c007 	ldrb	ip, [r4, #7]
   2c558:	e58da038 	str	sl, [sp, #56]	@ 0x38
   2c55c:	e58d3034 	str	r3, [sp, #52]	@ 0x34
   2c560:	e5d43006 	ldrb	r3, [r4, #6]
   2c564:	e5d4b005 	ldrb	fp, [r4, #5]
   2c568:	e58d7030 	str	r7, [sp, #48]	@ 0x30
   2c56c:	e58d102c 	str	r1, [sp, #44]	@ 0x2c
   2c570:	e5d41004 	ldrb	r1, [r4, #4]
   2c574:	e5d4a003 	ldrb	sl, [r4, #3]
   2c578:	e58d6028 	str	r6, [sp, #40]	@ 0x28
   2c57c:	e58de024 	str	lr, [sp, #36]	@ 0x24
   2c580:	e5d47002 	ldrb	r7, [r4, #2]
   2c584:	e5d46001 	ldrb	r6, [r4, #1]
   2c588:	e58dc020 	str	ip, [sp, #32]
   2c58c:	e6ffc074 	uxth	ip, r4
   2c590:	e58d301c 	str	r3, [sp, #28]
   2c594:	e2844010 	add	r4, r4, #16
   2c598:	e59d304c 	ldr	r3, [sp, #76]	@ 0x4c
   2c59c:	e554e010 	ldrb	lr, [r4, #-16]
   2c5a0:	e58d1014 	str	r1, [sp, #20]
   2c5a4:	e1a01008 	mov	r1, r8
   2c5a8:	e58db018 	str	fp, [sp, #24]
   2c5ac:	e58da010 	str	sl, [sp, #16]
   2c5b0:	e58d700c 	str	r7, [sp, #12]
   2c5b4:	e58d6008 	str	r6, [sp, #8]
   2c5b8:	e88d5000 	stm	sp, {ip, lr}
   2c5bc:	eb000a4a 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2c5c0:	e1590005 	cmp	r9, r5
   2c5c4:	1affffd4 	bne	2c51c <debug_hexdump(void const*, unsigned int, char const*)+0x5c>
   2c5c8:	e28dd054 	add	sp, sp, #84	@ 0x54
   2c5cc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002c5d0 <debug_stacktrace(unsigned int const*, char const*)>:
   2c5d0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c5d4:	e3510000 	cmp	r1, #0
   2c5d8:	e30270b0 	movw	r7, #8368	@ 0x20b0
   2c5dc:	e3407004 	movt	r7, #4
   2c5e0:	e3096c94 	movw	r6, #40084	@ 0x9c94
   2c5e4:	e3406003 	movt	r6, #3
   2c5e8:	e30e80a0 	movw	r8, #57504	@ 0xe0a0
   2c5ec:	e3408003 	movt	r8, #3
   2c5f0:	e24dd008 	sub	sp, sp, #8
   2c5f4:	11a07001 	movne	r7, r1
   2c5f8:	e2405004 	sub	r5, r0, #4
   2c5fc:	e3a04000 	mov	r4, #0
   2c600:	ea000002 	b	2c610 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   2c604:	e2844001 	add	r4, r4, #1
   2c608:	e3540040 	cmp	r4, #64	@ 0x40
   2c60c:	0a000010 	beq	2c654 <debug_stacktrace(unsigned int const*, char const*)+0x84>
   2c610:	e5b53004 	ldr	r3, [r5, #4]!
   2c614:	e3530902 	cmp	r3, #32768	@ 0x8000
   2c618:	3afffff9 	bcc	2c604 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   2c61c:	e1530006 	cmp	r3, r6
   2c620:	2afffff7 	bcs	2c604 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   2c624:	e3130003 	tst	r3, #3
   2c628:	1afffff5 	bne	2c604 <debug_stacktrace(unsigned int const*, char const*)+0x34>
   2c62c:	eb000865 	bl	2e7c8 <CLogger::Get()>
   2c630:	e595c000 	ldr	ip, [r5]
   2c634:	e88d1010 	stm	sp, {r4, ip}
   2c638:	e1a03008 	mov	r3, r8
   2c63c:	e3a02004 	mov	r2, #4
   2c640:	e1a01007 	mov	r1, r7
   2c644:	e2844001 	add	r4, r4, #1
   2c648:	eb000a27 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2c64c:	e3540040 	cmp	r4, #64	@ 0x40
   2c650:	1affffee 	bne	2c610 <debug_stacktrace(unsigned int const*, char const*)+0x40>
   2c654:	e28dd008 	add	sp, sp, #8
   2c658:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002c65c <CDevice::Read(void*, unsigned int)>:
   2c65c:	e3e00000 	mvn	r0, #0
   2c660:	e12fff1e 	bx	lr

0002c664 <CDevice::Seek(unsigned long long)>:
   2c664:	e3e00000 	mvn	r0, #0
   2c668:	e3e01000 	mvn	r1, #0
   2c66c:	e12fff1e 	bx	lr

0002c670 <CDevice::GetSize() const>:
   2c670:	e3e00000 	mvn	r0, #0
   2c674:	e3e01000 	mvn	r1, #0
   2c678:	e12fff1e 	bx	lr

0002c67c <CDevice::IOCtl(unsigned long, void*)>:
   2c67c:	e3e00000 	mvn	r0, #0
   2c680:	e12fff1e 	bx	lr

0002c684 <CDevice::RemoveDevice()>:
   2c684:	e3a00000 	mov	r0, #0
   2c688:	e12fff1e 	bx	lr

0002c68c <CDevice::~CDevice()>:
   2c68c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c690:	e1a06000 	mov	r6, r0
   2c694:	e59f3080 	ldr	r3, [pc, #128]	@ 2c71c <CDevice::~CDevice()+0x90>
   2c698:	e1a07000 	mov	r7, r0
   2c69c:	e4863004 	str	r3, [r6], #4
   2c6a0:	ea000008 	b	2c6c8 <CDevice::~CDevice()+0x3c>
   2c6a4:	e5901004 	ldr	r1, [r0, #4]
   2c6a8:	e1a00007 	mov	r0, r7
   2c6ac:	e12fff33 	blx	r3
   2c6b0:	e1a01004 	mov	r1, r4
   2c6b4:	e1a00006 	mov	r0, r6
   2c6b8:	eb000dc4 	bl	2fdd0 <CPtrList::Remove(TPtrListElement*)>
   2c6bc:	e3a01008 	mov	r1, #8
   2c6c0:	e1a00005 	mov	r0, r5
   2c6c4:	eb0026ae 	bl	36184 <operator delete(void*, unsigned int)>
   2c6c8:	e1a00006 	mov	r0, r6
   2c6cc:	eb000d19 	bl	2fb38 <CPtrList::GetFirst()>
   2c6d0:	e2504000 	subs	r4, r0, #0
   2c6d4:	0a00000c 	beq	2c70c <CDevice::~CDevice()+0x80>
   2c6d8:	e1a01004 	mov	r1, r4
   2c6dc:	e1a00006 	mov	r0, r6
   2c6e0:	eb000d2c 	bl	2fb98 <CPtrList::GetPtr(TPtrListElement*)>
   2c6e4:	e5903000 	ldr	r3, [r0]
   2c6e8:	e1a05000 	mov	r5, r0
   2c6ec:	e3530000 	cmp	r3, #0
   2c6f0:	1affffeb 	bne	2c6a4 <CDevice::~CDevice()+0x18>
   2c6f4:	e30e10b4 	movw	r1, #57524	@ 0xe0b4
   2c6f8:	e3401003 	movt	r1, #3
   2c6fc:	e30e00c0 	movw	r0, #57536	@ 0xe0c0
   2c700:	e3400003 	movt	r0, #3
   2c704:	e3a02028 	mov	r2, #40	@ 0x28
   2c708:	ebfffdb3 	bl	2bddc <assertion_failed>
   2c70c:	e1a00006 	mov	r0, r6
   2c710:	eb000cfe 	bl	2fb10 <CPtrList::~CPtrList()>
   2c714:	e1a00007 	mov	r0, r7
   2c718:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c71c:	000420c0 	.word	0x000420c0

0002c720 <CDevice::~CDevice()>:
   2c720:	e92d4010 	push	{r4, lr}
   2c724:	e1a04000 	mov	r4, r0
   2c728:	ebffffd7 	bl	2c68c <CDevice::~CDevice()>
   2c72c:	e1a00004 	mov	r0, r4
   2c730:	e3a01008 	mov	r1, #8
   2c734:	eb002692 	bl	36184 <operator delete(void*, unsigned int)>
   2c738:	e1a00004 	mov	r0, r4
   2c73c:	e8bd8010 	pop	{r4, pc}

0002c740 <CDevice::CDevice()>:
   2c740:	e59f3014 	ldr	r3, [pc, #20]	@ 2c75c <CDevice::CDevice()+0x1c>
   2c744:	e92d4010 	push	{r4, lr}
   2c748:	e1a04000 	mov	r4, r0
   2c74c:	e4803004 	str	r3, [r0], #4
   2c750:	eb000ceb 	bl	2fb04 <CPtrList::CPtrList()>
   2c754:	e1a00004 	mov	r0, r4
   2c758:	e8bd8010 	pop	{r4, pc}
   2c75c:	000420c0 	.word	0x000420c0

0002c760 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   2c760:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c764:	e2516000 	subs	r6, r1, #0
   2c768:	0a000012 	beq	2c7b8 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x58>
   2c76c:	e1a04000 	mov	r4, r0
   2c770:	e3a00008 	mov	r0, #8
   2c774:	e1a07002 	mov	r7, r2
   2c778:	eb002669 	bl	36124 <operator new(unsigned int)>
   2c77c:	e1a05000 	mov	r5, r0
   2c780:	e2844004 	add	r4, r4, #4
   2c784:	e1a00004 	mov	r0, r4
   2c788:	e88500c0 	stm	r5, {r6, r7}
   2c78c:	eb000ce9 	bl	2fb38 <CPtrList::GetFirst()>
   2c790:	e1a02005 	mov	r2, r5
   2c794:	e2501000 	subs	r1, r0, #0
   2c798:	e1a00004 	mov	r0, r4
   2c79c:	0a000002 	beq	2c7ac <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x4c>
   2c7a0:	eb000d12 	bl	2fbf0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   2c7a4:	e1a00005 	mov	r0, r5
   2c7a8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c7ac:	eb000d4b 	bl	2fce0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   2c7b0:	e1a00005 	mov	r0, r5
   2c7b4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2c7b8:	e30e10b4 	movw	r1, #57524	@ 0xe0b4
   2c7bc:	e3401003 	movt	r1, #3
   2c7c0:	e30e0ad0 	movw	r0, #60112	@ 0xead0
   2c7c4:	e3400003 	movt	r0, #3
   2c7c8:	e3a02052 	mov	r2, #82	@ 0x52
   2c7cc:	ebfffd82 	bl	2bddc <assertion_failed>

0002c7d0 <CDevice::UnregisterRemovedHandler(void*)>:
   2c7d0:	e92d4070 	push	{r4, r5, r6, lr}
   2c7d4:	e2515000 	subs	r5, r1, #0
   2c7d8:	0a00000a 	beq	2c808 <CDevice::UnregisterRemovedHandler(void*)+0x38>
   2c7dc:	e2804004 	add	r4, r0, #4
   2c7e0:	e1a00004 	mov	r0, r4
   2c7e4:	eb000dc3 	bl	2fef8 <CPtrList::Find(void*)>
   2c7e8:	e2501000 	subs	r1, r0, #0
   2c7ec:	0a00000b 	beq	2c820 <CDevice::UnregisterRemovedHandler(void*)+0x50>
   2c7f0:	e1a00004 	mov	r0, r4
   2c7f4:	eb000d75 	bl	2fdd0 <CPtrList::Remove(TPtrListElement*)>
   2c7f8:	e1a00005 	mov	r0, r5
   2c7fc:	e3a01008 	mov	r1, #8
   2c800:	e8bd4070 	pop	{r4, r5, r6, lr}
   2c804:	ea00265e 	b	36184 <operator delete(void*, unsigned int)>
   2c808:	e30e10b4 	movw	r1, #57524	@ 0xe0b4
   2c80c:	e3401003 	movt	r1, #3
   2c810:	e30a05e4 	movw	r0, #42468	@ 0xa5e4
   2c814:	e3400003 	movt	r0, #3
   2c818:	e3a02069 	mov	r2, #105	@ 0x69
   2c81c:	ebfffd6e 	bl	2bddc <assertion_failed>
   2c820:	e30e10b4 	movw	r1, #57524	@ 0xe0b4
   2c824:	e3401003 	movt	r1, #3
   2c828:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   2c82c:	e3400003 	movt	r0, #3
   2c830:	e3a0206c 	mov	r2, #108	@ 0x6c
   2c834:	ebfffd68 	bl	2bddc <assertion_failed>

0002c838 <CDeviceNameService::CDeviceNameService()>:
   2c838:	e3042148 	movw	r2, #16712	@ 0x4148
   2c83c:	e3402004 	movt	r2, #4
   2c840:	e3a01000 	mov	r1, #0
   2c844:	e5801000 	str	r1, [r0]
   2c848:	e5801004 	str	r1, [r0, #4]
   2c84c:	e592c000 	ldr	ip, [r2]
   2c850:	e15c0001 	cmp	ip, r1
   2c854:	1a000001 	bne	2c860 <CDeviceNameService::CDeviceNameService()+0x28>
   2c858:	e5820000 	str	r0, [r2]
   2c85c:	e12fff1e 	bx	lr
   2c860:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2c864:	e3401003 	movt	r1, #3
   2c868:	e30e0100 	movw	r0, #57600	@ 0xe100
   2c86c:	e3400003 	movt	r0, #3
   2c870:	e3a0201f 	mov	r2, #31
   2c874:	e92d4010 	push	{r4, lr}
   2c878:	ebfffd57 	bl	2bddc <assertion_failed>

0002c87c <CDeviceNameService::~CDeviceNameService()>:
   2c87c:	e92d4070 	push	{r4, r5, r6, lr}
   2c880:	e1a05000 	mov	r5, r0
   2c884:	e5904000 	ldr	r4, [r0]
   2c888:	e3540000 	cmp	r4, #0
   2c88c:	0a00000b 	beq	2c8c0 <CDeviceNameService::~CDeviceNameService()+0x44>
   2c890:	e1a03004 	mov	r3, r4
   2c894:	e5944000 	ldr	r4, [r4]
   2c898:	e5930004 	ldr	r0, [r3, #4]
   2c89c:	e3500000 	cmp	r0, #0
   2c8a0:	0a000000 	beq	2c8a8 <CDeviceNameService::~CDeviceNameService()+0x2c>
   2c8a4:	eb002630 	bl	3616c <operator delete[](void*)>
   2c8a8:	e5950000 	ldr	r0, [r5]
   2c8ac:	e3a01010 	mov	r1, #16
   2c8b0:	eb002633 	bl	36184 <operator delete(void*, unsigned int)>
   2c8b4:	e3540000 	cmp	r4, #0
   2c8b8:	e5854000 	str	r4, [r5]
   2c8bc:	1afffff3 	bne	2c890 <CDeviceNameService::~CDeviceNameService()+0x14>
   2c8c0:	e3043148 	movw	r3, #16712	@ 0x4148
   2c8c4:	e3403004 	movt	r3, #4
   2c8c8:	e3a02000 	mov	r2, #0
   2c8cc:	e1a00005 	mov	r0, r5
   2c8d0:	e5832000 	str	r2, [r3]
   2c8d4:	e8bd8070 	pop	{r4, r5, r6, pc}

0002c8d8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   2c8d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c8dc:	e1a05000 	mov	r5, r0
   2c8e0:	e5900004 	ldr	r0, [r0, #4]
   2c8e4:	e1a06001 	mov	r6, r1
   2c8e8:	e1a07002 	mov	r7, r2
   2c8ec:	e1a08003 	mov	r8, r3
   2c8f0:	e3500000 	cmp	r0, #0
   2c8f4:	1a000016 	bne	2c954 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x7c>
   2c8f8:	e3a00010 	mov	r0, #16
   2c8fc:	eb002608 	bl	36124 <operator new(unsigned int)>
   2c900:	e3560000 	cmp	r6, #0
   2c904:	e1a04000 	mov	r4, r0
   2c908:	0a000013 	beq	2c95c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x84>
   2c90c:	e1a00006 	mov	r0, r6
   2c910:	eb0021f7 	bl	350f4 <strlen>
   2c914:	e2800001 	add	r0, r0, #1
   2c918:	eb002607 	bl	3613c <operator new[](unsigned int)>
   2c91c:	e1a01006 	mov	r1, r6
   2c920:	e5840004 	str	r0, [r4, #4]
   2c924:	eb002292 	bl	35374 <strcpy>
   2c928:	e3570000 	cmp	r7, #0
   2c92c:	0a000010 	beq	2c974 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x9c>
   2c930:	e895000c 	ldm	r5, {r2, r3}
   2c934:	e5842000 	str	r2, [r4]
   2c938:	e5847008 	str	r7, [r4, #8]
   2c93c:	e3530000 	cmp	r3, #0
   2c940:	e5c4800c 	strb	r8, [r4, #12]
   2c944:	e5854000 	str	r4, [r5]
   2c948:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2c94c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2c950:	ea002c35 	b	37a2c <LeaveCritical>
   2c954:	eb002c09 	bl	37980 <EnterCritical>
   2c958:	eaffffe6 	b	2c8f8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x20>
   2c95c:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2c960:	e3401003 	movt	r1, #3
   2c964:	e30a09b8 	movw	r0, #43448	@ 0xa9b8
   2c968:	e3400003 	movt	r0, #3
   2c96c:	e3a0203b 	mov	r2, #59	@ 0x3b
   2c970:	ebfffd19 	bl	2bddc <assertion_failed>
   2c974:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2c978:	e3401003 	movt	r1, #3
   2c97c:	e30e010c 	movw	r0, #57612	@ 0xe10c
   2c980:	e3400003 	movt	r0, #3
   2c984:	e3a02040 	mov	r2, #64	@ 0x40
   2c988:	ebfffd13 	bl	2bddc <assertion_failed>

0002c98c <CDeviceNameService::RemoveDevice(char const*, bool)>:
   2c98c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2c990:	e2515000 	subs	r5, r1, #0
   2c994:	0a00003a 	beq	2ca84 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf8>
   2c998:	e1a08000 	mov	r8, r0
   2c99c:	e5900004 	ldr	r0, [r0, #4]
   2c9a0:	e1a07002 	mov	r7, r2
   2c9a4:	e3500000 	cmp	r0, #0
   2c9a8:	1a000019 	bne	2ca14 <CDeviceNameService::RemoveDevice(char const*, bool)+0x88>
   2c9ac:	e5984000 	ldr	r4, [r8]
   2c9b0:	e3540000 	cmp	r4, #0
   2c9b4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2c9b8:	e3a06000 	mov	r6, #0
   2c9bc:	ea00000b 	b	2c9f0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   2c9c0:	e1a00005 	mov	r0, r5
   2c9c4:	eb0021d4 	bl	3511c <strcmp>
   2c9c8:	e3500000 	cmp	r0, #0
   2c9cc:	1a000002 	bne	2c9dc <CDeviceNameService::RemoveDevice(char const*, bool)+0x50>
   2c9d0:	e5d4300c 	ldrb	r3, [r4, #12]
   2c9d4:	e1530007 	cmp	r3, r7
   2c9d8:	0a000016 	beq	2ca38 <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>
   2c9dc:	e5943000 	ldr	r3, [r4]
   2c9e0:	e1a06004 	mov	r6, r4
   2c9e4:	e3530000 	cmp	r3, #0
   2c9e8:	0a00000d 	beq	2ca24 <CDeviceNameService::RemoveDevice(char const*, bool)+0x98>
   2c9ec:	e1a04003 	mov	r4, r3
   2c9f0:	e5941004 	ldr	r1, [r4, #4]
   2c9f4:	e3510000 	cmp	r1, #0
   2c9f8:	1afffff0 	bne	2c9c0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   2c9fc:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2ca00:	e3401003 	movt	r1, #3
   2ca04:	e30e011c 	movw	r0, #57628	@ 0xe11c
   2ca08:	e3400003 	movt	r0, #3
   2ca0c:	e3a0205e 	mov	r2, #94	@ 0x5e
   2ca10:	ebfffcf1 	bl	2bddc <assertion_failed>
   2ca14:	eb002bd9 	bl	37980 <EnterCritical>
   2ca18:	e5984000 	ldr	r4, [r8]
   2ca1c:	e3540000 	cmp	r4, #0
   2ca20:	1affffe4 	bne	2c9b8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x2c>
   2ca24:	e5983004 	ldr	r3, [r8, #4]
   2ca28:	e3530000 	cmp	r3, #0
   2ca2c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2ca30:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2ca34:	ea002bfc 	b	37a2c <LeaveCritical>
   2ca38:	e5943000 	ldr	r3, [r4]
   2ca3c:	e3560000 	cmp	r6, #0
   2ca40:	15863000 	strne	r3, [r6]
   2ca44:	0a00000c 	beq	2ca7c <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
   2ca48:	e5983004 	ldr	r3, [r8, #4]
   2ca4c:	e3530000 	cmp	r3, #0
   2ca50:	1a000007 	bne	2ca74 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
   2ca54:	e5940004 	ldr	r0, [r4, #4]
   2ca58:	e3500000 	cmp	r0, #0
   2ca5c:	0a000000 	beq	2ca64 <CDeviceNameService::RemoveDevice(char const*, bool)+0xd8>
   2ca60:	eb0025c1 	bl	3616c <operator delete[](void*)>
   2ca64:	e1a00004 	mov	r0, r4
   2ca68:	e3a01010 	mov	r1, #16
   2ca6c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2ca70:	ea0025c3 	b	36184 <operator delete(void*, unsigned int)>
   2ca74:	eb002bec 	bl	37a2c <LeaveCritical>
   2ca78:	eafffff5 	b	2ca54 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc8>
   2ca7c:	e5883000 	str	r3, [r8]
   2ca80:	eafffff0 	b	2ca48 <CDeviceNameService::RemoveDevice(char const*, bool)+0xbc>
   2ca84:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2ca88:	e3401003 	movt	r1, #3
   2ca8c:	e30a09b8 	movw	r0, #43448	@ 0xa9b8
   2ca90:	e3400003 	movt	r0, #3
   2ca94:	e3a02056 	mov	r2, #86	@ 0x56
   2ca98:	ebfffccf 	bl	2bddc <assertion_failed>

0002ca9c <CDeviceNameService::GetDevice(char const*, bool)>:
   2ca9c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2caa0:	e2515000 	subs	r5, r1, #0
   2caa4:	e24dd00c 	sub	sp, sp, #12
   2caa8:	0a000026 	beq	2cb48 <CDeviceNameService::GetDevice(char const*, bool)+0xac>
   2caac:	e1a07000 	mov	r7, r0
   2cab0:	e5900004 	ldr	r0, [r0, #4]
   2cab4:	e1a06002 	mov	r6, r2
   2cab8:	e3500000 	cmp	r0, #0
   2cabc:	1a000016 	bne	2cb1c <CDeviceNameService::GetDevice(char const*, bool)+0x80>
   2cac0:	e5974000 	ldr	r4, [r7]
   2cac4:	e3540000 	cmp	r4, #0
   2cac8:	1a00000a 	bne	2caf8 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   2cacc:	ea00001a 	b	2cb3c <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   2cad0:	e1a00005 	mov	r0, r5
   2cad4:	eb002190 	bl	3511c <strcmp>
   2cad8:	e3500000 	cmp	r0, #0
   2cadc:	1a000002 	bne	2caec <CDeviceNameService::GetDevice(char const*, bool)+0x50>
   2cae0:	e5d4300c 	ldrb	r3, [r4, #12]
   2cae4:	e1530006 	cmp	r3, r6
   2cae8:	0a00001c 	beq	2cb60 <CDeviceNameService::GetDevice(char const*, bool)+0xc4>
   2caec:	e5944000 	ldr	r4, [r4]
   2caf0:	e3540000 	cmp	r4, #0
   2caf4:	0a00000c 	beq	2cb2c <CDeviceNameService::GetDevice(char const*, bool)+0x90>
   2caf8:	e5941004 	ldr	r1, [r4, #4]
   2cafc:	e3510000 	cmp	r1, #0
   2cb00:	1afffff2 	bne	2cad0 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   2cb04:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2cb08:	e3401003 	movt	r1, #3
   2cb0c:	e30e011c 	movw	r0, #57628	@ 0xe11c
   2cb10:	e3400003 	movt	r0, #3
   2cb14:	e3a02092 	mov	r2, #146	@ 0x92
   2cb18:	ebfffcaf 	bl	2bddc <assertion_failed>
   2cb1c:	eb002b97 	bl	37980 <EnterCritical>
   2cb20:	e5974000 	ldr	r4, [r7]
   2cb24:	e3540000 	cmp	r4, #0
   2cb28:	1afffff2 	bne	2caf8 <CDeviceNameService::GetDevice(char const*, bool)+0x5c>
   2cb2c:	e5973004 	ldr	r3, [r7, #4]
   2cb30:	e3530000 	cmp	r3, #0
   2cb34:	0a000000 	beq	2cb3c <CDeviceNameService::GetDevice(char const*, bool)+0xa0>
   2cb38:	eb002bbb 	bl	37a2c <LeaveCritical>
   2cb3c:	e3a00000 	mov	r0, #0
   2cb40:	e28dd00c 	add	sp, sp, #12
   2cb44:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2cb48:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2cb4c:	e3401003 	movt	r1, #3
   2cb50:	e30a09b8 	movw	r0, #43448	@ 0xa9b8
   2cb54:	e3400003 	movt	r0, #3
   2cb58:	e3a0208b 	mov	r2, #139	@ 0x8b
   2cb5c:	ebfffc9e 	bl	2bddc <assertion_failed>
   2cb60:	e5973004 	ldr	r3, [r7, #4]
   2cb64:	e5940008 	ldr	r0, [r4, #8]
   2cb68:	e3530000 	cmp	r3, #0
   2cb6c:	1a000007 	bne	2cb90 <CDeviceNameService::GetDevice(char const*, bool)+0xf4>
   2cb70:	e3500000 	cmp	r0, #0
   2cb74:	1afffff1 	bne	2cb40 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
   2cb78:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2cb7c:	e3401003 	movt	r1, #3
   2cb80:	e30e0130 	movw	r0, #57648	@ 0xe130
   2cb84:	e3400003 	movt	r0, #3
   2cb88:	e3a0209a 	mov	r2, #154	@ 0x9a
   2cb8c:	ebfffc92 	bl	2bddc <assertion_failed>
   2cb90:	e58d0004 	str	r0, [sp, #4]
   2cb94:	eb002ba4 	bl	37a2c <LeaveCritical>
   2cb98:	e59d0004 	ldr	r0, [sp, #4]
   2cb9c:	eafffff3 	b	2cb70 <CDeviceNameService::GetDevice(char const*, bool)+0xd4>

0002cba0 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)>:
   2cba0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2cba4:	e1a07000 	mov	r7, r0
   2cba8:	e5900004 	ldr	r0, [r0, #4]
   2cbac:	e1a05001 	mov	r5, r1
   2cbb0:	e1a06002 	mov	r6, r2
   2cbb4:	e3500000 	cmp	r0, #0
   2cbb8:	1a000013 	bne	2cc0c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x6c>
   2cbbc:	e5974000 	ldr	r4, [r7]
   2cbc0:	e3540000 	cmp	r4, #0
   2cbc4:	1a000003 	bne	2cbd8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
   2cbc8:	ea000015 	b	2cc24 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x84>
   2cbcc:	e5944000 	ldr	r4, [r4]
   2cbd0:	e3540000 	cmp	r4, #0
   2cbd4:	0a000010 	beq	2cc1c <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x7c>
   2cbd8:	e5d4200c 	ldrb	r2, [r4, #12]
   2cbdc:	e1a03006 	mov	r3, r6
   2cbe0:	e5941004 	ldr	r1, [r4, #4]
   2cbe4:	e5940008 	ldr	r0, [r4, #8]
   2cbe8:	e12fff35 	blx	r5
   2cbec:	e2508000 	subs	r8, r0, #0
   2cbf0:	1afffff5 	bne	2cbcc <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x2c>
   2cbf4:	e5973004 	ldr	r3, [r7, #4]
   2cbf8:	e3530000 	cmp	r3, #0
   2cbfc:	0a000000 	beq	2cc04 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>
   2cc00:	eb002b89 	bl	37a2c <LeaveCritical>
   2cc04:	e1a00008 	mov	r0, r8
   2cc08:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2cc0c:	eb002b5b 	bl	37980 <EnterCritical>
   2cc10:	e5974000 	ldr	r4, [r7]
   2cc14:	e3540000 	cmp	r4, #0
   2cc18:	1affffee 	bne	2cbd8 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x38>
   2cc1c:	e3a08001 	mov	r8, #1
   2cc20:	eafffff3 	b	2cbf4 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x54>
   2cc24:	e3a08001 	mov	r8, #1
   2cc28:	eafffff5 	b	2cc04 <CDeviceNameService::EnumerateDevices(bool (*)(CDevice*, char const*, bool, void*), void*)+0x64>

0002cc2c <CDeviceNameService::Get()>:
   2cc2c:	e3043148 	movw	r3, #16712	@ 0x4148
   2cc30:	e3403004 	movt	r3, #4
   2cc34:	e5930000 	ldr	r0, [r3]
   2cc38:	e3500000 	cmp	r0, #0
   2cc3c:	112fff1e 	bxne	lr
   2cc40:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2cc44:	e3401003 	movt	r1, #3
   2cc48:	e30e0140 	movw	r0, #57664	@ 0xe140
   2cc4c:	e3400003 	movt	r0, #3
   2cc50:	e3a020e5 	mov	r2, #229	@ 0xe5
   2cc54:	e92d4010 	push	{r4, lr}
   2cc58:	ebfffc5f 	bl	2bddc <assertion_failed>

0002cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   2cc5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2cc60:	e1a06001 	mov	r6, r1
   2cc64:	e1a07002 	mov	r7, r2
   2cc68:	e24dd010 	sub	sp, sp, #16
   2cc6c:	e1a04000 	mov	r4, r0
   2cc70:	e1a0000d 	mov	r0, sp
   2cc74:	e1a05003 	mov	r5, r3
   2cc78:	e5dd8028 	ldrb	r8, [sp, #40]	@ 0x28
   2cc7c:	eb001770 	bl	32a44 <CString::CString()>
   2cc80:	e1a03007 	mov	r3, r7
   2cc84:	e1a02006 	mov	r2, r6
   2cc88:	e1a0000d 	mov	r0, sp
   2cc8c:	e30e114c 	movw	r1, #57676	@ 0xe14c
   2cc90:	e3401003 	movt	r1, #3
   2cc94:	eb001d23 	bl	34128 <CString::Format(char const*, ...)>
   2cc98:	e1a0000d 	mov	r0, sp
   2cc9c:	eb0017a0 	bl	32b24 <CString::operator char const*() const>
   2cca0:	e1a03008 	mov	r3, r8
   2cca4:	e1a01000 	mov	r1, r0
   2cca8:	e1a02005 	mov	r2, r5
   2ccac:	e1a00004 	mov	r0, r4
   2ccb0:	ebffff08 	bl	2c8d8 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   2ccb4:	e1a0000d 	mov	r0, sp
   2ccb8:	eb00172e 	bl	32978 <CString::~CString()>
   2ccbc:	e28dd010 	add	sp, sp, #16
   2ccc0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   2ccc4:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2ccc8:	e1a06001 	mov	r6, r1
   2cccc:	e1a07002 	mov	r7, r2
   2ccd0:	e24dd014 	sub	sp, sp, #20
   2ccd4:	e1a04000 	mov	r4, r0
   2ccd8:	e1a0000d 	mov	r0, sp
   2ccdc:	e1a05003 	mov	r5, r3
   2cce0:	eb001757 	bl	32a44 <CString::CString()>
   2cce4:	e1a03007 	mov	r3, r7
   2cce8:	e1a02006 	mov	r2, r6
   2ccec:	e1a0000d 	mov	r0, sp
   2ccf0:	e30e114c 	movw	r1, #57676	@ 0xe14c
   2ccf4:	e3401003 	movt	r1, #3
   2ccf8:	eb001d0a 	bl	34128 <CString::Format(char const*, ...)>
   2ccfc:	e1a0000d 	mov	r0, sp
   2cd00:	eb001787 	bl	32b24 <CString::operator char const*() const>
   2cd04:	e1a02005 	mov	r2, r5
   2cd08:	e1a01000 	mov	r1, r0
   2cd0c:	e1a00004 	mov	r0, r4
   2cd10:	ebffff1d 	bl	2c98c <CDeviceNameService::RemoveDevice(char const*, bool)>
   2cd14:	e1a0000d 	mov	r0, sp
   2cd18:	eb001716 	bl	32978 <CString::~CString()>
   2cd1c:	e28dd014 	add	sp, sp, #20
   2cd20:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002cd24 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   2cd24:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2cd28:	e1a06001 	mov	r6, r1
   2cd2c:	e1a07002 	mov	r7, r2
   2cd30:	e24dd014 	sub	sp, sp, #20
   2cd34:	e1a04000 	mov	r4, r0
   2cd38:	e1a0000d 	mov	r0, sp
   2cd3c:	e1a05003 	mov	r5, r3
   2cd40:	eb00173f 	bl	32a44 <CString::CString()>
   2cd44:	e1a03007 	mov	r3, r7
   2cd48:	e1a02006 	mov	r2, r6
   2cd4c:	e1a0000d 	mov	r0, sp
   2cd50:	e30e114c 	movw	r1, #57676	@ 0xe14c
   2cd54:	e3401003 	movt	r1, #3
   2cd58:	eb001cf2 	bl	34128 <CString::Format(char const*, ...)>
   2cd5c:	e1a0000d 	mov	r0, sp
   2cd60:	eb00176f 	bl	32b24 <CString::operator char const*() const>
   2cd64:	e1a02005 	mov	r2, r5
   2cd68:	e1a01000 	mov	r1, r0
   2cd6c:	e1a00004 	mov	r0, r4
   2cd70:	ebffff49 	bl	2ca9c <CDeviceNameService::GetDevice(char const*, bool)>
   2cd74:	e1a04000 	mov	r4, r0
   2cd78:	e1a0000d 	mov	r0, sp
   2cd7c:	eb0016fd 	bl	32978 <CString::~CString()>
   2cd80:	e1a00004 	mov	r0, r4
   2cd84:	e28dd014 	add	sp, sp, #20
   2cd88:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

0002cd8c <CDeviceNameService::ListDevices(CDevice*)>:
   2cd8c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cd90:	e2517000 	subs	r7, r1, #0
   2cd94:	e24dd018 	sub	sp, sp, #24
   2cd98:	0a000038 	beq	2ce80 <CDeviceNameService::ListDevices(CDevice*)+0xf4>
   2cd9c:	e5904000 	ldr	r4, [r0]
   2cda0:	e3540000 	cmp	r4, #0
   2cda4:	0a000033 	beq	2ce78 <CDeviceNameService::ListDevices(CDevice*)+0xec>
   2cda8:	e30e8154 	movw	r8, #57684	@ 0xe154
   2cdac:	e3408003 	movt	r8, #3
   2cdb0:	e3a05000 	mov	r5, #0
   2cdb4:	ea000019 	b	2ce20 <CDeviceNameService::ListDevices(CDevice*)+0x94>
   2cdb8:	e5d4200c 	ldrb	r2, [r4, #12]
   2cdbc:	e2855001 	add	r5, r5, #1
   2cdc0:	e2159003 	ands	r9, r5, #3
   2cdc4:	e1a01008 	mov	r1, r8
   2cdc8:	13a0c020 	movne	ip, #32
   2cdcc:	03a0c00a 	moveq	ip, #10
   2cdd0:	e2622063 	rsb	r2, r2, #99	@ 0x63
   2cdd4:	e58dc000 	str	ip, [sp]
   2cdd8:	e28d0008 	add	r0, sp, #8
   2cddc:	eb001cd1 	bl	34128 <CString::Format(char const*, ...)>
   2cde0:	e5973000 	ldr	r3, [r7]
   2cde4:	e28d0008 	add	r0, sp, #8
   2cde8:	e593a00c 	ldr	sl, [r3, #12]
   2cdec:	eb00174c 	bl	32b24 <CString::operator char const*() const>
   2cdf0:	e1a06000 	mov	r6, r0
   2cdf4:	e28d0008 	add	r0, sp, #8
   2cdf8:	eb001787 	bl	32c1c <CString::GetLength() const>
   2cdfc:	e1a01006 	mov	r1, r6
   2ce00:	e1a02000 	mov	r2, r0
   2ce04:	e1a00007 	mov	r0, r7
   2ce08:	e12fff3a 	blx	sl
   2ce0c:	e5944000 	ldr	r4, [r4]
   2ce10:	e28d0008 	add	r0, sp, #8
   2ce14:	eb0016d7 	bl	32978 <CString::~CString()>
   2ce18:	e3540000 	cmp	r4, #0
   2ce1c:	0a00000a 	beq	2ce4c <CDeviceNameService::ListDevices(CDevice*)+0xc0>
   2ce20:	e28d0008 	add	r0, sp, #8
   2ce24:	eb001706 	bl	32a44 <CString::CString()>
   2ce28:	e5943004 	ldr	r3, [r4, #4]
   2ce2c:	e3530000 	cmp	r3, #0
   2ce30:	1affffe0 	bne	2cdb8 <CDeviceNameService::ListDevices(CDevice*)+0x2c>
   2ce34:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2ce38:	e3401003 	movt	r1, #3
   2ce3c:	e30e011c 	movw	r0, #57628	@ 0xe11c
   2ce40:	e3400003 	movt	r0, #3
   2ce44:	e3a020d2 	mov	r2, #210	@ 0xd2
   2ce48:	ebfffbe3 	bl	2bddc <assertion_failed>
   2ce4c:	e3590000 	cmp	r9, #0
   2ce50:	0a000008 	beq	2ce78 <CDeviceNameService::ListDevices(CDevice*)+0xec>
   2ce54:	e5973000 	ldr	r3, [r7]
   2ce58:	e3a02001 	mov	r2, #1
   2ce5c:	e1a00007 	mov	r0, r7
   2ce60:	e3091d30 	movw	r1, #40240	@ 0x9d30
   2ce64:	e3401003 	movt	r1, #3
   2ce68:	e593300c 	ldr	r3, [r3, #12]
   2ce6c:	e28dd018 	add	sp, sp, #24
   2ce70:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ce74:	e12fff13 	bx	r3
   2ce78:	e28dd018 	add	sp, sp, #24
   2ce7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ce80:	e30e10e8 	movw	r1, #57576	@ 0xe0e8
   2ce84:	e3401003 	movt	r1, #3
   2ce88:	e30d0e04 	movw	r0, #56836	@ 0xde04
   2ce8c:	e3400003 	movt	r0, #3
   2ce90:	e3a020c9 	mov	r2, #201	@ 0xc9
   2ce94:	ebfffbd0 	bl	2bddc <assertion_failed>

0002ce98 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   2ce98:	e1a03000 	mov	r3, r0
   2ce9c:	e280c0dc 	add	ip, r0, #220	@ 0xdc
   2cea0:	e3a02000 	mov	r2, #0
   2cea4:	e5801000 	str	r1, [r0]
   2cea8:	e5e32004 	strb	r2, [r3, #4]!
   2ceac:	e5a32004 	str	r2, [r3, #4]!
   2ceb0:	e153000c 	cmp	r3, ip
   2ceb4:	1afffffc 	bne	2ceac <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x14>
   2ceb8:	e12fff1e 	bx	lr

0002cebc <CGPIOManager::~CGPIOManager()>:
   2cebc:	e92d4010 	push	{r4, lr}
   2cec0:	e2803004 	add	r3, r0, #4
   2cec4:	e1a04000 	mov	r4, r0
   2cec8:	e28010dc 	add	r1, r0, #220	@ 0xdc
   2cecc:	ea000001 	b	2ced8 <CGPIOManager::~CGPIOManager()+0x1c>
   2ced0:	e1530001 	cmp	r3, r1
   2ced4:	0a000008 	beq	2cefc <CGPIOManager::~CGPIOManager()+0x40>
   2ced8:	e5b32004 	ldr	r2, [r3, #4]!
   2cedc:	e3520000 	cmp	r2, #0
   2cee0:	0afffffa 	beq	2ced0 <CGPIOManager::~CGPIOManager()+0x14>
   2cee4:	e30e1160 	movw	r1, #57696	@ 0xe160
   2cee8:	e3401003 	movt	r1, #3
   2ceec:	e30e0170 	movw	r0, #57712	@ 0xe170
   2cef0:	e3400003 	movt	r0, #3
   2cef4:	e3a0202c 	mov	r2, #44	@ 0x2c
   2cef8:	ebfffbb7 	bl	2bddc <assertion_failed>
   2cefc:	e5d43004 	ldrb	r3, [r4, #4]
   2cf00:	e3530000 	cmp	r3, #0
   2cf04:	0a000004 	beq	2cf1c <CGPIOManager::~CGPIOManager()+0x60>
   2cf08:	e5940000 	ldr	r0, [r4]
   2cf0c:	e3500000 	cmp	r0, #0
   2cf10:	0a000003 	beq	2cf24 <CGPIOManager::~CGPIOManager()+0x68>
   2cf14:	e3a01034 	mov	r1, #52	@ 0x34
   2cf18:	eb002b55 	bl	37c74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   2cf1c:	e1a00004 	mov	r0, r4
   2cf20:	e8bd8010 	pop	{r4, pc}
   2cf24:	e30e1160 	movw	r1, #57696	@ 0xe160
   2cf28:	e3401003 	movt	r1, #3
   2cf2c:	e30e0184 	movw	r0, #57732	@ 0xe184
   2cf30:	e3400003 	movt	r0, #3
   2cf34:	e3a02032 	mov	r2, #50	@ 0x32
   2cf38:	ebfffba7 	bl	2bddc <assertion_failed>

0002cf3c <CGPIOManager::Initialize()>:
   2cf3c:	e5d03004 	ldrb	r3, [r0, #4]
   2cf40:	e92d4010 	push	{r4, lr}
   2cf44:	e3530000 	cmp	r3, #0
   2cf48:	1a00000b 	bne	2cf7c <CGPIOManager::Initialize()+0x40>
   2cf4c:	e1a04000 	mov	r4, r0
   2cf50:	e5900000 	ldr	r0, [r0]
   2cf54:	e3500000 	cmp	r0, #0
   2cf58:	0a00000d 	beq	2cf94 <CGPIOManager::Initialize()+0x58>
   2cf5c:	e1a03004 	mov	r3, r4
   2cf60:	e3a01034 	mov	r1, #52	@ 0x34
   2cf64:	e30d21bc 	movw	r2, #53692	@ 0xd1bc
   2cf68:	e3402002 	movt	r2, #2
   2cf6c:	eb002b0d 	bl	37ba8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   2cf70:	e3a00001 	mov	r0, #1
   2cf74:	e5c40004 	strb	r0, [r4, #4]
   2cf78:	e8bd8010 	pop	{r4, pc}
   2cf7c:	e30e1160 	movw	r1, #57696	@ 0xe160
   2cf80:	e3401003 	movt	r1, #3
   2cf84:	e30e0198 	movw	r0, #57752	@ 0xe198
   2cf88:	e3400003 	movt	r0, #3
   2cf8c:	e3a0203b 	mov	r2, #59	@ 0x3b
   2cf90:	ebfffb91 	bl	2bddc <assertion_failed>
   2cf94:	e30e1160 	movw	r1, #57696	@ 0xe160
   2cf98:	e3401003 	movt	r1, #3
   2cf9c:	e30e0184 	movw	r0, #57732	@ 0xe184
   2cfa0:	e3400003 	movt	r0, #3
   2cfa4:	e3a0203c 	mov	r2, #60	@ 0x3c
   2cfa8:	ebfffb8b 	bl	2bddc <assertion_failed>

0002cfac <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   2cfac:	e5d03004 	ldrb	r3, [r0, #4]
   2cfb0:	e92d4010 	push	{r4, lr}
   2cfb4:	e3530000 	cmp	r3, #0
   2cfb8:	0a00000a 	beq	2cfe8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x3c>
   2cfbc:	e3510000 	cmp	r1, #0
   2cfc0:	0a00000e 	beq	2d000 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x54>
   2cfc4:	e5913004 	ldr	r3, [r1, #4]
   2cfc8:	e3530035 	cmp	r3, #53	@ 0x35
   2cfcc:	8a000011 	bhi	2d018 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x6c>
   2cfd0:	e0800103 	add	r0, r0, r3, lsl #2
   2cfd4:	e5903008 	ldr	r3, [r0, #8]
   2cfd8:	e3530000 	cmp	r3, #0
   2cfdc:	1a000013 	bne	2d030 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x84>
   2cfe0:	e5801008 	str	r1, [r0, #8]
   2cfe4:	e8bd8010 	pop	{r4, pc}
   2cfe8:	e30e1160 	movw	r1, #57696	@ 0xe160
   2cfec:	e3401003 	movt	r1, #3
   2cff0:	e30e01ac 	movw	r0, #57772	@ 0xe1ac
   2cff4:	e3400003 	movt	r0, #3
   2cff8:	e3a02045 	mov	r2, #69	@ 0x45
   2cffc:	ebfffb76 	bl	2bddc <assertion_failed>
   2d000:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d004:	e3401003 	movt	r1, #3
   2d008:	e30e01bc 	movw	r0, #57788	@ 0xe1bc
   2d00c:	e3400003 	movt	r0, #3
   2d010:	e3a02047 	mov	r2, #71	@ 0x47
   2d014:	ebfffb70 	bl	2bddc <assertion_failed>
   2d018:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d01c:	e3401003 	movt	r1, #3
   2d020:	e30e01c8 	movw	r0, #57800	@ 0xe1c8
   2d024:	e3400003 	movt	r0, #3
   2d028:	e3a02049 	mov	r2, #73	@ 0x49
   2d02c:	ebfffb6a 	bl	2bddc <assertion_failed>
   2d030:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d034:	e3401003 	movt	r1, #3
   2d038:	e30e0170 	movw	r0, #57712	@ 0xe170
   2d03c:	e3400003 	movt	r0, #3
   2d040:	e3a0204b 	mov	r2, #75	@ 0x4b
   2d044:	ebfffb64 	bl	2bddc <assertion_failed>

0002d048 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   2d048:	e5d03004 	ldrb	r3, [r0, #4]
   2d04c:	e92d4010 	push	{r4, lr}
   2d050:	e3530000 	cmp	r3, #0
   2d054:	0a00000b 	beq	2d088 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x40>
   2d058:	e3510000 	cmp	r1, #0
   2d05c:	0a00000f 	beq	2d0a0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x58>
   2d060:	e5913004 	ldr	r3, [r1, #4]
   2d064:	e3530035 	cmp	r3, #53	@ 0x35
   2d068:	8a000012 	bhi	2d0b8 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x70>
   2d06c:	e0800103 	add	r0, r0, r3, lsl #2
   2d070:	e5903008 	ldr	r3, [r0, #8]
   2d074:	e3530000 	cmp	r3, #0
   2d078:	0a000014 	beq	2d0d0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x88>
   2d07c:	e3a03000 	mov	r3, #0
   2d080:	e5803008 	str	r3, [r0, #8]
   2d084:	e8bd8010 	pop	{r4, pc}
   2d088:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d08c:	e3401003 	movt	r1, #3
   2d090:	e30e01ac 	movw	r0, #57772	@ 0xe1ac
   2d094:	e3400003 	movt	r0, #3
   2d098:	e3a02052 	mov	r2, #82	@ 0x52
   2d09c:	ebfffb4e 	bl	2bddc <assertion_failed>
   2d0a0:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d0a4:	e3401003 	movt	r1, #3
   2d0a8:	e30e01bc 	movw	r0, #57788	@ 0xe1bc
   2d0ac:	e3400003 	movt	r0, #3
   2d0b0:	e3a02054 	mov	r2, #84	@ 0x54
   2d0b4:	ebfffb48 	bl	2bddc <assertion_failed>
   2d0b8:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d0bc:	e3401003 	movt	r1, #3
   2d0c0:	e30e01c8 	movw	r0, #57800	@ 0xe1c8
   2d0c4:	e3400003 	movt	r0, #3
   2d0c8:	e3a02056 	mov	r2, #86	@ 0x56
   2d0cc:	ebfffb42 	bl	2bddc <assertion_failed>
   2d0d0:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d0d4:	e3401003 	movt	r1, #3
   2d0d8:	e30e01dc 	movw	r0, #57820	@ 0xe1dc
   2d0dc:	e3400003 	movt	r0, #3
   2d0e0:	e3a02058 	mov	r2, #88	@ 0x58
   2d0e4:	ebfffb3c 	bl	2bddc <assertion_failed>

0002d0e8 <CGPIOManager::InterruptHandler()>:
   2d0e8:	e5d03004 	ldrb	r3, [r0, #4]
   2d0ec:	e92d4070 	push	{r4, r5, r6, lr}
   2d0f0:	e3530000 	cmp	r3, #0
   2d0f4:	0a00002a 	beq	2d1a4 <CGPIOManager::InterruptHandler()+0xbc>
   2d0f8:	e3a03000 	mov	r3, #0
   2d0fc:	e3433f20 	movt	r3, #16160	@ 0x3f20
   2d100:	e3a04000 	mov	r4, #0
   2d104:	e5933040 	ldr	r3, [r3, #64]	@ 0x40
   2d108:	ea000005 	b	2d124 <CGPIOManager::InterruptHandler()+0x3c>
   2d10c:	e2844001 	add	r4, r4, #1
   2d110:	e1a030a3 	lsr	r3, r3, #1
   2d114:	e314001f 	tst	r4, #31
   2d118:	0a000011 	beq	2d164 <CGPIOManager::InterruptHandler()+0x7c>
   2d11c:	e3540036 	cmp	r4, #54	@ 0x36
   2d120:	08bd8070 	popeq	{r4, r5, r6, pc}
   2d124:	e3130001 	tst	r3, #1
   2d128:	0afffff7 	beq	2d10c <CGPIOManager::InterruptHandler()+0x24>
   2d12c:	e2843002 	add	r3, r4, #2
   2d130:	e7905103 	ldr	r5, [r0, r3, lsl #2]
   2d134:	e3550000 	cmp	r5, #0
   2d138:	0a00000e 	beq	2d178 <CGPIOManager::InterruptHandler()+0x90>
   2d13c:	e1a00005 	mov	r0, r5
   2d140:	eb0002f7 	bl	2dd24 <CGPIOPin::InterruptHandler()>
   2d144:	e5d53024 	ldrb	r3, [r5, #36]	@ 0x24
   2d148:	e3530000 	cmp	r3, #0
   2d14c:	13a03040 	movne	r3, #64	@ 0x40
   2d150:	13433f20 	movtne	r3, #16160	@ 0x3f20
   2d154:	15952008 	ldrne	r2, [r5, #8]
   2d158:	1595100c 	ldrne	r1, [r5, #12]
   2d15c:	17821003 	strne	r1, [r2, r3]
   2d160:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d164:	e3a03000 	mov	r3, #0
   2d168:	e3433f20 	movt	r3, #16160	@ 0x3f20
   2d16c:	e3a04020 	mov	r4, #32
   2d170:	e5933044 	ldr	r3, [r3, #68]	@ 0x44
   2d174:	eaffffea 	b	2d124 <CGPIOManager::InterruptHandler()+0x3c>
   2d178:	e1a00004 	mov	r0, r4
   2d17c:	eb000307 	bl	2dda0 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   2d180:	e3a03010 	mov	r3, #16
   2d184:	e3403fc8 	movt	r3, #4040	@ 0xfc8
   2d188:	e204101f 	and	r1, r4, #31
   2d18c:	e08332a4 	add	r3, r3, r4, lsr #5
   2d190:	e3a02001 	mov	r2, #1
   2d194:	e1a03103 	lsl	r3, r3, #2
   2d198:	e1a02112 	lsl	r2, r2, r1
   2d19c:	e5832000 	str	r2, [r3]
   2d1a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d1a4:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d1a8:	e3401003 	movt	r1, #3
   2d1ac:	e30e01ac 	movw	r0, #57772	@ 0xe1ac
   2d1b0:	e3400003 	movt	r0, #3
   2d1b4:	e3a0205e 	mov	r2, #94	@ 0x5e
   2d1b8:	ebfffb07 	bl	2bddc <assertion_failed>

0002d1bc <CGPIOManager::InterruptStub(void*)>:
   2d1bc:	e3500000 	cmp	r0, #0
   2d1c0:	0a000000 	beq	2d1c8 <CGPIOManager::InterruptStub(void*)+0xc>
   2d1c4:	eaffffc7 	b	2d0e8 <CGPIOManager::InterruptHandler()>
   2d1c8:	e30e1160 	movw	r1, #57696	@ 0xe160
   2d1cc:	e3401003 	movt	r1, #3
   2d1d0:	e30e01f0 	movw	r0, #57840	@ 0xe1f0
   2d1d4:	e3400003 	movt	r0, #3
   2d1d8:	e3a0208e 	mov	r2, #142	@ 0x8e
   2d1dc:	e92d4010 	push	{r4, lr}
   2d1e0:	ebfffafd 	bl	2bddc <assertion_failed>

0002d1e4 <CGPIOPin::~CGPIOPin()>:
   2d1e4:	e12fff1e 	bx	lr

0002d1e8 <CGPIOPin::~CGPIOPin()>:
   2d1e8:	e92d4010 	push	{r4, lr}
   2d1ec:	e3a01028 	mov	r1, #40	@ 0x28
   2d1f0:	e1a04000 	mov	r4, r0
   2d1f4:	eb0023e2 	bl	36184 <operator delete(void*, unsigned int)>
   2d1f8:	e1a00004 	mov	r0, r4
   2d1fc:	e8bd8010 	pop	{r4, pc}

0002d200 <CGPIOPin::CGPIOPin()>:
   2d200:	e59fc02c 	ldr	ip, [pc, #44]	@ 2d234 <CGPIOPin::CGPIOPin()+0x34>
   2d204:	e3a01000 	mov	r1, #0
   2d208:	e3a02006 	mov	r2, #6
   2d20c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   2d210:	e3a0e036 	mov	lr, #54	@ 0x36
   2d214:	e5c02025 	strb	r2, [r0, #37]	@ 0x25
   2d218:	e5c02026 	strb	r2, [r0, #38]	@ 0x26
   2d21c:	e3a0200a 	mov	r2, #10
   2d220:	e8805000 	stm	r0, {ip, lr}
   2d224:	e5801018 	str	r1, [r0, #24]
   2d228:	e580101c 	str	r1, [r0, #28]
   2d22c:	e5c02010 	strb	r2, [r0, #16]
   2d230:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   2d234:	000420e8 	.word	0x000420e8

0002d238 <CGPIOPin::AssignPin(unsigned int)>:
   2d238:	e5903004 	ldr	r3, [r0, #4]
   2d23c:	e92d4070 	push	{r4, r5, r6, lr}
   2d240:	e3530036 	cmp	r3, #54	@ 0x36
   2d244:	1a000017 	bne	2d2a8 <CGPIOPin::AssignPin(unsigned int)+0x70>
   2d248:	e1a05000 	mov	r5, r0
   2d24c:	e1a04001 	mov	r4, r1
   2d250:	e3510035 	cmp	r1, #53	@ 0x35
   2d254:	e5801004 	str	r1, [r0, #4]
   2d258:	8a000007 	bhi	2d27c <CGPIOPin::AssignPin(unsigned int)+0x44>
   2d25c:	e1a022a4 	lsr	r2, r4, #5
   2d260:	e3a03001 	mov	r3, #1
   2d264:	e204401f 	and	r4, r4, #31
   2d268:	e1a02102 	lsl	r2, r2, #2
   2d26c:	e5852008 	str	r2, [r5, #8]
   2d270:	e1a03413 	lsl	r3, r3, r4
   2d274:	e585300c 	str	r3, [r5, #12]
   2d278:	e8bd8070 	pop	{r4, r5, r6, pc}
   2d27c:	eb000961 	bl	2f808 <CMachineInfo::Get()>
   2d280:	e6ef1074 	uxtb	r1, r4
   2d284:	eb0008c6 	bl	2f5a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   2d288:	e1a04000 	mov	r4, r0
   2d28c:	e3500035 	cmp	r0, #53	@ 0x35
   2d290:	e5850004 	str	r0, [r5, #4]
   2d294:	9afffff0 	bls	2d25c <CGPIOPin::AssignPin(unsigned int)+0x24>
   2d298:	e59f1018 	ldr	r1, [pc, #24]	@ 2d2b8 <CGPIOPin::AssignPin(unsigned int)+0x80>
   2d29c:	e3a02047 	mov	r2, #71	@ 0x47
   2d2a0:	e2810020 	add	r0, r1, #32
   2d2a4:	ebfffacc 	bl	2bddc <assertion_failed>
   2d2a8:	e59f1008 	ldr	r1, [pc, #8]	@ 2d2b8 <CGPIOPin::AssignPin(unsigned int)+0x80>
   2d2ac:	e3a02040 	mov	r2, #64	@ 0x40
   2d2b0:	e281000c 	add	r0, r1, #12
   2d2b4:	ebfffac8 	bl	2bddc <assertion_failed>
   2d2b8:	000420f0 	.word	0x000420f0

0002d2bc <CGPIOPin::Write(unsigned int)>:
   2d2bc:	e5903004 	ldr	r3, [r0, #4]
   2d2c0:	e92d4010 	push	{r4, lr}
   2d2c4:	e3530035 	cmp	r3, #53	@ 0x35
   2d2c8:	8a00000f 	bhi	2d30c <CGPIOPin::Write(unsigned int)+0x50>
   2d2cc:	e5d03010 	ldrb	r3, [r0, #16]
   2d2d0:	e3530003 	cmp	r3, #3
   2d2d4:	8a000010 	bhi	2d31c <CGPIOPin::Write(unsigned int)+0x60>
   2d2d8:	e3510001 	cmp	r1, #1
   2d2dc:	8a000012 	bhi	2d32c <CGPIOPin::Write(unsigned int)+0x70>
   2d2e0:	e3a0201c 	mov	r2, #28
   2d2e4:	e3432f20 	movt	r2, #16160	@ 0x3f20
   2d2e8:	e3510000 	cmp	r1, #0
   2d2ec:	e590c008 	ldr	ip, [r0, #8]
   2d2f0:	e3a03028 	mov	r3, #40	@ 0x28
   2d2f4:	e3433f20 	movt	r3, #16160	@ 0x3f20
   2d2f8:	11a03002 	movne	r3, r2
   2d2fc:	e590200c 	ldr	r2, [r0, #12]
   2d300:	e5801014 	str	r1, [r0, #20]
   2d304:	e783200c 	str	r2, [r3, ip]
   2d308:	e8bd8010 	pop	{r4, pc}
   2d30c:	e59f1028 	ldr	r1, [pc, #40]	@ 2d33c <CGPIOPin::Write(unsigned int)+0x80>
   2d310:	e3a02091 	mov	r2, #145	@ 0x91
   2d314:	e2810020 	add	r0, r1, #32
   2d318:	ebfffaaf 	bl	2bddc <assertion_failed>
   2d31c:	e59f1018 	ldr	r1, [pc, #24]	@ 2d33c <CGPIOPin::Write(unsigned int)+0x80>
   2d320:	e3a02094 	mov	r2, #148	@ 0x94
   2d324:	e2810034 	add	r0, r1, #52	@ 0x34
   2d328:	ebfffaab 	bl	2bddc <assertion_failed>
   2d32c:	e59f1008 	ldr	r1, [pc, #8]	@ 2d33c <CGPIOPin::Write(unsigned int)+0x80>
   2d330:	e3a02098 	mov	r2, #152	@ 0x98
   2d334:	e2810058 	add	r0, r1, #88	@ 0x58
   2d338:	ebfffaa7 	bl	2bddc <assertion_failed>
   2d33c:	000420f0 	.word	0x000420f0

0002d340 <CGPIOPin::Read() const>:
   2d340:	e5903004 	ldr	r3, [r0, #4]
   2d344:	e92d4010 	push	{r4, lr}
   2d348:	e3530035 	cmp	r3, #53	@ 0x35
   2d34c:	8a00000d 	bhi	2d388 <CGPIOPin::Read() const+0x48>
   2d350:	e5d03010 	ldrb	r3, [r0, #16]
   2d354:	e2432002 	sub	r2, r3, #2
   2d358:	e3530000 	cmp	r3, #0
   2d35c:	13520001 	cmpne	r2, #1
   2d360:	8a00000c 	bhi	2d398 <CGPIOPin::Read() const+0x58>
   2d364:	e5901008 	ldr	r1, [r0, #8]
   2d368:	e3a03034 	mov	r3, #52	@ 0x34
   2d36c:	e3433f20 	movt	r3, #16160	@ 0x3f20
   2d370:	e590200c 	ldr	r2, [r0, #12]
   2d374:	e7913003 	ldr	r3, [r1, r3]
   2d378:	e1130002 	tst	r3, r2
   2d37c:	13a00001 	movne	r0, #1
   2d380:	03a00000 	moveq	r0, #0
   2d384:	e8bd8010 	pop	{r4, pc}
   2d388:	e59f1018 	ldr	r1, [pc, #24]	@ 2d3a8 <CGPIOPin::Read() const+0x68>
   2d38c:	e3a020a4 	mov	r2, #164	@ 0xa4
   2d390:	e2810020 	add	r0, r1, #32
   2d394:	ebfffa90 	bl	2bddc <assertion_failed>
   2d398:	e59f1008 	ldr	r1, [pc, #8]	@ 2d3a8 <CGPIOPin::Read() const+0x68>
   2d39c:	e3a020a6 	mov	r2, #166	@ 0xa6
   2d3a0:	e2810078 	add	r0, r1, #120	@ 0x78
   2d3a4:	ebfffa8c 	bl	2bddc <assertion_failed>
   2d3a8:	000420f0 	.word	0x000420f0

0002d3ac <CGPIOPin::Invert()>:
   2d3ac:	e5d03010 	ldrb	r3, [r0, #16]
   2d3b0:	e92d4010 	push	{r4, lr}
   2d3b4:	e3530001 	cmp	r3, #1
   2d3b8:	1a000011 	bne	2d404 <CGPIOPin::Invert()+0x58>
   2d3bc:	e5902014 	ldr	r2, [r0, #20]
   2d3c0:	e5903004 	ldr	r3, [r0, #4]
   2d3c4:	e2221001 	eor	r1, r2, #1
   2d3c8:	e3530035 	cmp	r3, #53	@ 0x35
   2d3cc:	8a000010 	bhi	2d414 <CGPIOPin::Invert()+0x68>
   2d3d0:	e3510001 	cmp	r1, #1
   2d3d4:	8a000012 	bhi	2d424 <CGPIOPin::Invert()+0x78>
   2d3d8:	e3520001 	cmp	r2, #1
   2d3dc:	e3a0c01c 	mov	ip, #28
   2d3e0:	e343cf20 	movt	ip, #16160	@ 0x3f20
   2d3e4:	e5902008 	ldr	r2, [r0, #8]
   2d3e8:	e3a03028 	mov	r3, #40	@ 0x28
   2d3ec:	e3433f20 	movt	r3, #16160	@ 0x3f20
   2d3f0:	11a0300c 	movne	r3, ip
   2d3f4:	e590c00c 	ldr	ip, [r0, #12]
   2d3f8:	e5801014 	str	r1, [r0, #20]
   2d3fc:	e783c002 	str	ip, [r3, r2]
   2d400:	e8bd8010 	pop	{r4, pc}
   2d404:	e59f1028 	ldr	r1, [pc, #40]	@ 2d434 <CGPIOPin::Invert()+0x88>
   2d408:	e3a020b5 	mov	r2, #181	@ 0xb5
   2d40c:	e28100d4 	add	r0, r1, #212	@ 0xd4
   2d410:	ebfffa71 	bl	2bddc <assertion_failed>
   2d414:	e59f1018 	ldr	r1, [pc, #24]	@ 2d434 <CGPIOPin::Invert()+0x88>
   2d418:	e3a02091 	mov	r2, #145	@ 0x91
   2d41c:	e2810020 	add	r0, r1, #32
   2d420:	ebfffa6d 	bl	2bddc <assertion_failed>
   2d424:	e59f1008 	ldr	r1, [pc, #8]	@ 2d434 <CGPIOPin::Invert()+0x88>
   2d428:	e3a02098 	mov	r2, #152	@ 0x98
   2d42c:	e2810058 	add	r0, r1, #88	@ 0x58
   2d430:	ebfffa69 	bl	2bddc <assertion_failed>
   2d434:	000420f0 	.word	0x000420f0

0002d438 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   2d438:	e1a0c000 	mov	ip, r0
   2d43c:	e5d00010 	ldrb	r0, [r0, #16]
   2d440:	e92d4010 	push	{r4, lr}
   2d444:	e240e002 	sub	lr, r0, #2
   2d448:	e3500000 	cmp	r0, #0
   2d44c:	135e0001 	cmpne	lr, #1
   2d450:	8a000027 	bhi	2d4f4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xbc>
   2d454:	e5dc0025 	ldrb	r0, [ip, #37]	@ 0x25
   2d458:	e3500006 	cmp	r0, #6
   2d45c:	1a000010 	bne	2d4a4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x6c>
   2d460:	e5dc0026 	ldrb	r0, [ip, #38]	@ 0x26
   2d464:	e3500006 	cmp	r0, #6
   2d468:	1a000011 	bne	2d4b4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x7c>
   2d46c:	e3510000 	cmp	r1, #0
   2d470:	0a000013 	beq	2d4c4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   2d474:	e59c001c 	ldr	r0, [ip, #28]
   2d478:	e3500000 	cmp	r0, #0
   2d47c:	1a000014 	bne	2d4d4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x9c>
   2d480:	e59c0018 	ldr	r0, [ip, #24]
   2d484:	e58c101c 	str	r1, [ip, #28]
   2d488:	e3500000 	cmp	r0, #0
   2d48c:	e58c2020 	str	r2, [ip, #32]
   2d490:	e5cc3024 	strb	r3, [ip, #36]	@ 0x24
   2d494:	0a000012 	beq	2d4e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xac>
   2d498:	e8bd4010 	pop	{r4, lr}
   2d49c:	e1a0100c 	mov	r1, ip
   2d4a0:	eafffec1 	b	2cfac <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   2d4a4:	e59f1058 	ldr	r1, [pc, #88]	@ 2d504 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2d4a8:	e3a020c0 	mov	r2, #192	@ 0xc0
   2d4ac:	e28100f0 	add	r0, r1, #240	@ 0xf0
   2d4b0:	ebfffa49 	bl	2bddc <assertion_failed>
   2d4b4:	e59f1048 	ldr	r1, [pc, #72]	@ 2d504 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2d4b8:	e3a020c1 	mov	r2, #193	@ 0xc1
   2d4bc:	e2810f45 	add	r0, r1, #276	@ 0x114
   2d4c0:	ebfffa45 	bl	2bddc <assertion_failed>
   2d4c4:	e59f1038 	ldr	r1, [pc, #56]	@ 2d504 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2d4c8:	e3a020c3 	mov	r2, #195	@ 0xc3
   2d4cc:	e2810f4f 	add	r0, r1, #316	@ 0x13c
   2d4d0:	ebfffa41 	bl	2bddc <assertion_failed>
   2d4d4:	e59f1028 	ldr	r1, [pc, #40]	@ 2d504 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2d4d8:	e3a020c4 	mov	r2, #196	@ 0xc4
   2d4dc:	e2810f53 	add	r0, r1, #332	@ 0x14c
   2d4e0:	ebfffa3d 	bl	2bddc <assertion_failed>
   2d4e4:	e59f1018 	ldr	r1, [pc, #24]	@ 2d504 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2d4e8:	e3a020cb 	mov	r2, #203	@ 0xcb
   2d4ec:	e2810f57 	add	r0, r1, #348	@ 0x15c
   2d4f0:	ebfffa39 	bl	2bddc <assertion_failed>
   2d4f4:	e59f1008 	ldr	r1, [pc, #8]	@ 2d504 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xcc>
   2d4f8:	e3a020bc 	mov	r2, #188	@ 0xbc
   2d4fc:	e2810078 	add	r0, r1, #120	@ 0x78
   2d500:	ebfffa35 	bl	2bddc <assertion_failed>
   2d504:	000420f0 	.word	0x000420f0

0002d508 <CGPIOPin::DisconnectInterrupt()>:
   2d508:	e5d03010 	ldrb	r3, [r0, #16]
   2d50c:	e92d4010 	push	{r4, lr}
   2d510:	e2432002 	sub	r2, r3, #2
   2d514:	e3530000 	cmp	r3, #0
   2d518:	13520001 	cmpne	r2, #1
   2d51c:	8a000020 	bhi	2d5a4 <CGPIOPin::DisconnectInterrupt()+0x9c>
   2d520:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   2d524:	e1a01000 	mov	r1, r0
   2d528:	e3530006 	cmp	r3, #6
   2d52c:	1a00000c 	bne	2d564 <CGPIOPin::DisconnectInterrupt()+0x5c>
   2d530:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   2d534:	e3530006 	cmp	r3, #6
   2d538:	1a00000d 	bne	2d574 <CGPIOPin::DisconnectInterrupt()+0x6c>
   2d53c:	e590301c 	ldr	r3, [r0, #28]
   2d540:	e3530000 	cmp	r3, #0
   2d544:	0a00000e 	beq	2d584 <CGPIOPin::DisconnectInterrupt()+0x7c>
   2d548:	e5900018 	ldr	r0, [r0, #24]
   2d54c:	e3a03000 	mov	r3, #0
   2d550:	e581301c 	str	r3, [r1, #28]
   2d554:	e1500003 	cmp	r0, r3
   2d558:	0a00000d 	beq	2d594 <CGPIOPin::DisconnectInterrupt()+0x8c>
   2d55c:	e8bd4010 	pop	{r4, lr}
   2d560:	eafffeb8 	b	2d048 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   2d564:	e59f1048 	ldr	r1, [pc, #72]	@ 2d5b4 <CGPIOPin::DisconnectInterrupt()+0xac>
   2d568:	e3a020d5 	mov	r2, #213	@ 0xd5
   2d56c:	e28100f0 	add	r0, r1, #240	@ 0xf0
   2d570:	ebfffa19 	bl	2bddc <assertion_failed>
   2d574:	e59f1038 	ldr	r1, [pc, #56]	@ 2d5b4 <CGPIOPin::DisconnectInterrupt()+0xac>
   2d578:	e3a020d6 	mov	r2, #214	@ 0xd6
   2d57c:	e2810f45 	add	r0, r1, #276	@ 0x114
   2d580:	ebfffa15 	bl	2bddc <assertion_failed>
   2d584:	e59f1028 	ldr	r1, [pc, #40]	@ 2d5b4 <CGPIOPin::DisconnectInterrupt()+0xac>
   2d588:	e3a020d8 	mov	r2, #216	@ 0xd8
   2d58c:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   2d590:	ebfffa11 	bl	2bddc <assertion_failed>
   2d594:	e59f1018 	ldr	r1, [pc, #24]	@ 2d5b4 <CGPIOPin::DisconnectInterrupt()+0xac>
   2d598:	e3a020db 	mov	r2, #219	@ 0xdb
   2d59c:	e2810f57 	add	r0, r1, #348	@ 0x15c
   2d5a0:	ebfffa0d 	bl	2bddc <assertion_failed>
   2d5a4:	e59f1008 	ldr	r1, [pc, #8]	@ 2d5b4 <CGPIOPin::DisconnectInterrupt()+0xac>
   2d5a8:	e3a020d1 	mov	r2, #209	@ 0xd1
   2d5ac:	e2810078 	add	r0, r1, #120	@ 0x78
   2d5b0:	ebfffa09 	bl	2bddc <assertion_failed>
   2d5b4:	000420f0 	.word	0x000420f0

0002d5b8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   2d5b8:	e5d03010 	ldrb	r3, [r0, #16]
   2d5bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d5c0:	e2432002 	sub	r2, r3, #2
   2d5c4:	e3530000 	cmp	r3, #0
   2d5c8:	13520001 	cmpne	r2, #1
   2d5cc:	8a000032 	bhi	2d69c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>
   2d5d0:	e590301c 	ldr	r3, [r0, #28]
   2d5d4:	e1a04000 	mov	r4, r0
   2d5d8:	e3530000 	cmp	r3, #0
   2d5dc:	0a00001e 	beq	2d65c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa4>
   2d5e0:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   2d5e4:	e3530006 	cmp	r3, #6
   2d5e8:	1a00001f 	bne	2d66c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb4>
   2d5ec:	e3510005 	cmp	r1, #5
   2d5f0:	8a000021 	bhi	2d67c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xc4>
   2d5f4:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   2d5f8:	e1530001 	cmp	r3, r1
   2d5fc:	0a000022 	beq	2d68c <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd4>
   2d600:	e304714c 	movw	r7, #16716	@ 0x414c
   2d604:	e3407004 	movt	r7, #4
   2d608:	e3a0200c 	mov	r2, #12
   2d60c:	e5903008 	ldr	r3, [r0, #8]
   2d610:	e5c01025 	strb	r1, [r0, #37]	@ 0x25
   2d614:	e3a0604c 	mov	r6, #76	@ 0x4c
   2d618:	e3436f20 	movt	r6, #16160	@ 0x3f20
   2d61c:	e5970000 	ldr	r0, [r7]
   2d620:	e0050192 	mul	r5, r2, r1
   2d624:	e0836006 	add	r6, r3, r6
   2d628:	e3500000 	cmp	r0, #0
   2d62c:	1a000008 	bne	2d654 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x9c>
   2d630:	e7963005 	ldr	r3, [r6, r5]
   2d634:	e594200c 	ldr	r2, [r4, #12]
   2d638:	e1833002 	orr	r3, r3, r2
   2d63c:	e7863005 	str	r3, [r6, r5]
   2d640:	e5973000 	ldr	r3, [r7]
   2d644:	e3530000 	cmp	r3, #0
   2d648:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2d64c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2d650:	ea0028f5 	b	37a2c <LeaveCritical>
   2d654:	eb0028c9 	bl	37980 <EnterCritical>
   2d658:	eafffff4 	b	2d630 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x78>
   2d65c:	e59f1048 	ldr	r1, [pc, #72]	@ 2d6ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2d660:	e3a020e4 	mov	r2, #228	@ 0xe4
   2d664:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   2d668:	ebfff9db 	bl	2bddc <assertion_failed>
   2d66c:	e59f1038 	ldr	r1, [pc, #56]	@ 2d6ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2d670:	e3a020e6 	mov	r2, #230	@ 0xe6
   2d674:	e28100f0 	add	r0, r1, #240	@ 0xf0
   2d678:	ebfff9d7 	bl	2bddc <assertion_failed>
   2d67c:	e59f1028 	ldr	r1, [pc, #40]	@ 2d6ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2d680:	e3a020e7 	mov	r2, #231	@ 0xe7
   2d684:	e2810f5f 	add	r0, r1, #380	@ 0x17c
   2d688:	ebfff9d3 	bl	2bddc <assertion_failed>
   2d68c:	e59f1018 	ldr	r1, [pc, #24]	@ 2d6ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2d690:	e3a020e8 	mov	r2, #232	@ 0xe8
   2d694:	e2810e1a 	add	r0, r1, #416	@ 0x1a0
   2d698:	ebfff9cf 	bl	2bddc <assertion_failed>
   2d69c:	e59f1008 	ldr	r1, [pc, #8]	@ 2d6ac <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf4>
   2d6a0:	e3a020e1 	mov	r2, #225	@ 0xe1
   2d6a4:	e2810078 	add	r0, r1, #120	@ 0x78
   2d6a8:	ebfff9cb 	bl	2bddc <assertion_failed>
   2d6ac:	000420f0 	.word	0x000420f0

0002d6b0 <CGPIOPin::DisableInterrupt()>:
   2d6b0:	e5d03010 	ldrb	r3, [r0, #16]
   2d6b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d6b8:	e2432002 	sub	r2, r3, #2
   2d6bc:	e3530000 	cmp	r3, #0
   2d6c0:	13520001 	cmpne	r2, #1
   2d6c4:	8a000020 	bhi	2d74c <CGPIOPin::DisableInterrupt()+0x9c>
   2d6c8:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   2d6cc:	e1a04000 	mov	r4, r0
   2d6d0:	e3530005 	cmp	r3, #5
   2d6d4:	8a000018 	bhi	2d73c <CGPIOPin::DisableInterrupt()+0x8c>
   2d6d8:	e304714c 	movw	r7, #16716	@ 0x414c
   2d6dc:	e3407004 	movt	r7, #4
   2d6e0:	e3a0100c 	mov	r1, #12
   2d6e4:	e5902008 	ldr	r2, [r0, #8]
   2d6e8:	e3a0604c 	mov	r6, #76	@ 0x4c
   2d6ec:	e3436f20 	movt	r6, #16160	@ 0x3f20
   2d6f0:	e5970000 	ldr	r0, [r7]
   2d6f4:	e0826006 	add	r6, r2, r6
   2d6f8:	e0050391 	mul	r5, r1, r3
   2d6fc:	e3500000 	cmp	r0, #0
   2d700:	1a000009 	bne	2d72c <CGPIOPin::DisableInterrupt()+0x7c>
   2d704:	e7963005 	ldr	r3, [r6, r5]
   2d708:	e594200c 	ldr	r2, [r4, #12]
   2d70c:	e1c33002 	bic	r3, r3, r2
   2d710:	e7863005 	str	r3, [r6, r5]
   2d714:	e5973000 	ldr	r3, [r7]
   2d718:	e3530000 	cmp	r3, #0
   2d71c:	1a000004 	bne	2d734 <CGPIOPin::DisableInterrupt()+0x84>
   2d720:	e3a03006 	mov	r3, #6
   2d724:	e5c43025 	strb	r3, [r4, #37]	@ 0x25
   2d728:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d72c:	eb002893 	bl	37980 <EnterCritical>
   2d730:	eafffff3 	b	2d704 <CGPIOPin::DisableInterrupt()+0x54>
   2d734:	eb0028bc 	bl	37a2c <LeaveCritical>
   2d738:	eafffff8 	b	2d720 <CGPIOPin::DisableInterrupt()+0x70>
   2d73c:	e59f1018 	ldr	r1, [pc, #24]	@ 2d75c <CGPIOPin::DisableInterrupt()+0xac>
   2d740:	e3a020fb 	mov	r2, #251	@ 0xfb
   2d744:	e2810f6f 	add	r0, r1, #444	@ 0x1bc
   2d748:	ebfff9a3 	bl	2bddc <assertion_failed>
   2d74c:	e59f1008 	ldr	r1, [pc, #8]	@ 2d75c <CGPIOPin::DisableInterrupt()+0xac>
   2d750:	e3a020f7 	mov	r2, #247	@ 0xf7
   2d754:	e2810078 	add	r0, r1, #120	@ 0x78
   2d758:	ebfff99f 	bl	2bddc <assertion_failed>
   2d75c:	000420f0 	.word	0x000420f0

0002d760 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   2d760:	e5d03010 	ldrb	r3, [r0, #16]
   2d764:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d768:	e2432002 	sub	r2, r3, #2
   2d76c:	e3530000 	cmp	r3, #0
   2d770:	13520001 	cmpne	r2, #1
   2d774:	8a000032 	bhi	2d844 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>
   2d778:	e590301c 	ldr	r3, [r0, #28]
   2d77c:	e1a04000 	mov	r4, r0
   2d780:	e3530000 	cmp	r3, #0
   2d784:	0a00001e 	beq	2d804 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa4>
   2d788:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   2d78c:	e3530006 	cmp	r3, #6
   2d790:	1a00001f 	bne	2d814 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb4>
   2d794:	e3510005 	cmp	r1, #5
   2d798:	8a000021 	bhi	2d824 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xc4>
   2d79c:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   2d7a0:	e1530001 	cmp	r3, r1
   2d7a4:	0a000022 	beq	2d834 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd4>
   2d7a8:	e304714c 	movw	r7, #16716	@ 0x414c
   2d7ac:	e3407004 	movt	r7, #4
   2d7b0:	e3a0200c 	mov	r2, #12
   2d7b4:	e5903008 	ldr	r3, [r0, #8]
   2d7b8:	e5c01026 	strb	r1, [r0, #38]	@ 0x26
   2d7bc:	e3a0604c 	mov	r6, #76	@ 0x4c
   2d7c0:	e3436f20 	movt	r6, #16160	@ 0x3f20
   2d7c4:	e5970000 	ldr	r0, [r7]
   2d7c8:	e0050192 	mul	r5, r2, r1
   2d7cc:	e0836006 	add	r6, r3, r6
   2d7d0:	e3500000 	cmp	r0, #0
   2d7d4:	1a000008 	bne	2d7fc <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x9c>
   2d7d8:	e7963005 	ldr	r3, [r6, r5]
   2d7dc:	e594200c 	ldr	r2, [r4, #12]
   2d7e0:	e1833002 	orr	r3, r3, r2
   2d7e4:	e7863005 	str	r3, [r6, r5]
   2d7e8:	e5973000 	ldr	r3, [r7]
   2d7ec:	e3530000 	cmp	r3, #0
   2d7f0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2d7f4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2d7f8:	ea00288b 	b	37a2c <LeaveCritical>
   2d7fc:	eb00285f 	bl	37980 <EnterCritical>
   2d800:	eafffff4 	b	2d7d8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x78>
   2d804:	e59f1048 	ldr	r1, [pc, #72]	@ 2d854 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2d808:	e300210d 	movw	r2, #269	@ 0x10d
   2d80c:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   2d810:	ebfff971 	bl	2bddc <assertion_failed>
   2d814:	e59f1038 	ldr	r1, [pc, #56]	@ 2d854 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2d818:	e300210f 	movw	r2, #271	@ 0x10f
   2d81c:	e2810f45 	add	r0, r1, #276	@ 0x114
   2d820:	ebfff96d 	bl	2bddc <assertion_failed>
   2d824:	e59f1028 	ldr	r1, [pc, #40]	@ 2d854 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2d828:	e3a02e11 	mov	r2, #272	@ 0x110
   2d82c:	e2810f5f 	add	r0, r1, #380	@ 0x17c
   2d830:	ebfff969 	bl	2bddc <assertion_failed>
   2d834:	e59f1018 	ldr	r1, [pc, #24]	@ 2d854 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2d838:	e3002111 	movw	r2, #273	@ 0x111
   2d83c:	e2810e1e 	add	r0, r1, #480	@ 0x1e0
   2d840:	ebfff965 	bl	2bddc <assertion_failed>
   2d844:	e59f1008 	ldr	r1, [pc, #8]	@ 2d854 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf4>
   2d848:	e300210a 	movw	r2, #266	@ 0x10a
   2d84c:	e2810078 	add	r0, r1, #120	@ 0x78
   2d850:	ebfff961 	bl	2bddc <assertion_failed>
   2d854:	000420f0 	.word	0x000420f0

0002d858 <CGPIOPin::DisableInterrupt2()>:
   2d858:	e5d03010 	ldrb	r3, [r0, #16]
   2d85c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2d860:	e2432002 	sub	r2, r3, #2
   2d864:	e3530000 	cmp	r3, #0
   2d868:	13520001 	cmpne	r2, #1
   2d86c:	8a000020 	bhi	2d8f4 <CGPIOPin::DisableInterrupt2()+0x9c>
   2d870:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   2d874:	e1a04000 	mov	r4, r0
   2d878:	e3530005 	cmp	r3, #5
   2d87c:	8a000018 	bhi	2d8e4 <CGPIOPin::DisableInterrupt2()+0x8c>
   2d880:	e304714c 	movw	r7, #16716	@ 0x414c
   2d884:	e3407004 	movt	r7, #4
   2d888:	e3a0100c 	mov	r1, #12
   2d88c:	e5902008 	ldr	r2, [r0, #8]
   2d890:	e3a0604c 	mov	r6, #76	@ 0x4c
   2d894:	e3436f20 	movt	r6, #16160	@ 0x3f20
   2d898:	e5970000 	ldr	r0, [r7]
   2d89c:	e0826006 	add	r6, r2, r6
   2d8a0:	e0050391 	mul	r5, r1, r3
   2d8a4:	e3500000 	cmp	r0, #0
   2d8a8:	1a000009 	bne	2d8d4 <CGPIOPin::DisableInterrupt2()+0x7c>
   2d8ac:	e7963005 	ldr	r3, [r6, r5]
   2d8b0:	e594200c 	ldr	r2, [r4, #12]
   2d8b4:	e1c33002 	bic	r3, r3, r2
   2d8b8:	e7863005 	str	r3, [r6, r5]
   2d8bc:	e5973000 	ldr	r3, [r7]
   2d8c0:	e3530000 	cmp	r3, #0
   2d8c4:	1a000004 	bne	2d8dc <CGPIOPin::DisableInterrupt2()+0x84>
   2d8c8:	e3a03006 	mov	r3, #6
   2d8cc:	e5c43026 	strb	r3, [r4, #38]	@ 0x26
   2d8d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2d8d4:	eb002829 	bl	37980 <EnterCritical>
   2d8d8:	eafffff3 	b	2d8ac <CGPIOPin::DisableInterrupt2()+0x54>
   2d8dc:	eb002852 	bl	37a2c <LeaveCritical>
   2d8e0:	eafffff8 	b	2d8c8 <CGPIOPin::DisableInterrupt2()+0x70>
   2d8e4:	e59f1018 	ldr	r1, [pc, #24]	@ 2d904 <CGPIOPin::DisableInterrupt2()+0xac>
   2d8e8:	e3a02f49 	mov	r2, #292	@ 0x124
   2d8ec:	e2810f7f 	add	r0, r1, #508	@ 0x1fc
   2d8f0:	ebfff939 	bl	2bddc <assertion_failed>
   2d8f4:	e59f1008 	ldr	r1, [pc, #8]	@ 2d904 <CGPIOPin::DisableInterrupt2()+0xac>
   2d8f8:	e3a02e12 	mov	r2, #288	@ 0x120
   2d8fc:	e2810078 	add	r0, r1, #120	@ 0x78
   2d900:	ebfff935 	bl	2bddc <assertion_failed>
   2d904:	000420f0 	.word	0x000420f0

0002d908 <CGPIOPin::AcknowledgeInterrupt()>:
   2d908:	e590301c 	ldr	r3, [r0, #28]
   2d90c:	e92d4010 	push	{r4, lr}
   2d910:	e3530000 	cmp	r3, #0
   2d914:	0a000008 	beq	2d93c <CGPIOPin::AcknowledgeInterrupt()+0x34>
   2d918:	e5d03024 	ldrb	r3, [r0, #36]	@ 0x24
   2d91c:	e3530000 	cmp	r3, #0
   2d920:	1a000009 	bne	2d94c <CGPIOPin::AcknowledgeInterrupt()+0x44>
   2d924:	e5902008 	ldr	r2, [r0, #8]
   2d928:	e3a03040 	mov	r3, #64	@ 0x40
   2d92c:	e3433f20 	movt	r3, #16160	@ 0x3f20
   2d930:	e590100c 	ldr	r1, [r0, #12]
   2d934:	e7821003 	str	r1, [r2, r3]
   2d938:	e8bd8010 	pop	{r4, pc}
   2d93c:	e59f1018 	ldr	r1, [pc, #24]	@ 2d95c <CGPIOPin::AcknowledgeInterrupt()+0x54>
   2d940:	e3002133 	movw	r2, #307	@ 0x133
   2d944:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   2d948:	ebfff923 	bl	2bddc <assertion_failed>
   2d94c:	e59f1008 	ldr	r1, [pc, #8]	@ 2d95c <CGPIOPin::AcknowledgeInterrupt()+0x54>
   2d950:	e3a02f4d 	mov	r2, #308	@ 0x134
   2d954:	e2810e22 	add	r0, r1, #544	@ 0x220
   2d958:	ebfff91f 	bl	2bddc <assertion_failed>
   2d95c:	000420f0 	.word	0x000420f0

0002d960 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   2d960:	e1d12000 	bics	r2, r1, r0
   2d964:	13a03000 	movne	r3, #0
   2d968:	13433f20 	movtne	r3, #16160	@ 0x3f20
   2d96c:	15832028 	strne	r2, [r3, #40]	@ 0x28
   2d970:	e0100001 	ands	r0, r0, r1
   2d974:	13a03000 	movne	r3, #0
   2d978:	13433f20 	movtne	r3, #16160	@ 0x3f20
   2d97c:	1583001c 	strne	r0, [r3, #28]
   2d980:	e12fff1e 	bx	lr

0002d984 <CGPIOPin::ReadAll()>:
   2d984:	e3a03000 	mov	r3, #0
   2d988:	e3433f20 	movt	r3, #16160	@ 0x3f20
   2d98c:	e5930034 	ldr	r0, [r3, #52]	@ 0x34
   2d990:	e12fff1e 	bx	lr

0002d994 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   2d994:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d998:	e304414c 	movw	r4, #16716	@ 0x414c
   2d99c:	e3404004 	movt	r4, #4
   2d9a0:	e1a05000 	mov	r5, r0
   2d9a4:	e1a06001 	mov	r6, r1
   2d9a8:	e5940000 	ldr	r0, [r4]
   2d9ac:	e3500000 	cmp	r0, #0
   2d9b0:	1a000015 	bne	2da0c <CGPIOPin::SetPullMode(TGPIOPullMode)+0x78>
   2d9b4:	e3a07098 	mov	r7, #152	@ 0x98
   2d9b8:	e3437f20 	movt	r7, #16160	@ 0x3f20
   2d9bc:	e5959008 	ldr	r9, [r5, #8]
   2d9c0:	e3560002 	cmp	r6, #2
   2d9c4:	8a000012 	bhi	2da14 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x80>
   2d9c8:	e3a08000 	mov	r8, #0
   2d9cc:	e3438f20 	movt	r8, #16160	@ 0x3f20
   2d9d0:	e3a00005 	mov	r0, #5
   2d9d4:	e5886094 	str	r6, [r8, #148]	@ 0x94
   2d9d8:	eb001d64 	bl	34f70 <CTimer::SimpleusDelay(unsigned int)>
   2d9dc:	e595300c 	ldr	r3, [r5, #12]
   2d9e0:	e7893007 	str	r3, [r9, r7]
   2d9e4:	e3a00005 	mov	r0, #5
   2d9e8:	eb001d60 	bl	34f70 <CTimer::SimpleusDelay(unsigned int)>
   2d9ec:	e3a03000 	mov	r3, #0
   2d9f0:	e5883094 	str	r3, [r8, #148]	@ 0x94
   2d9f4:	e7893007 	str	r3, [r9, r7]
   2d9f8:	e5943000 	ldr	r3, [r4]
   2d9fc:	e3530000 	cmp	r3, #0
   2da00:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2da04:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2da08:	ea002807 	b	37a2c <LeaveCritical>
   2da0c:	eb0027db 	bl	37980 <EnterCritical>
   2da10:	eaffffe7 	b	2d9b4 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x20>
   2da14:	e59f1008 	ldr	r1, [pc, #8]	@ 2da24 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   2da18:	e3002165 	movw	r2, #357	@ 0x165
   2da1c:	e2810f8b 	add	r0, r1, #556	@ 0x22c
   2da20:	ebfff8ed 	bl	2bddc <assertion_failed>
   2da24:	000420f0 	.word	0x000420f0

0002da28 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   2da28:	e5903004 	ldr	r3, [r0, #4]
   2da2c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2da30:	e3530035 	cmp	r3, #53	@ 0x35
   2da34:	8a000021 	bhi	2dac0 <CGPIOPin::SetAlternateFunction(unsigned int)+0x98>
   2da38:	e30c2ccd 	movw	r2, #52429	@ 0xcccd
   2da3c:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
   2da40:	e1a06001 	mov	r6, r1
   2da44:	e3a0100a 	mov	r1, #10
   2da48:	e3560005 	cmp	r6, #5
   2da4c:	e0820392 	umull	r0, r2, r2, r3
   2da50:	e1a021a2 	lsr	r2, r2, #3
   2da54:	e282053f 	add	r0, r2, #264241152	@ 0xfc00000
   2da58:	e2800702 	add	r0, r0, #524288	@ 0x80000
   2da5c:	e0633291 	mls	r3, r1, r2, r3
   2da60:	e1a07100 	lsl	r7, r0, #2
   2da64:	e0834083 	add	r4, r3, r3, lsl #1
   2da68:	8a000018 	bhi	2dad0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   2da6c:	e304514c 	movw	r5, #16716	@ 0x414c
   2da70:	e3405004 	movt	r5, #4
   2da74:	e5950000 	ldr	r0, [r5]
   2da78:	e3500000 	cmp	r0, #0
   2da7c:	1a00000d 	bne	2dab8 <CGPIOPin::SetAlternateFunction(unsigned int)+0x90>
   2da80:	e30220e0 	movw	r2, #8416	@ 0x20e0
   2da84:	e3402004 	movt	r2, #4
   2da88:	e0822106 	add	r2, r2, r6, lsl #2
   2da8c:	e5973000 	ldr	r3, [r7]
   2da90:	e3a01007 	mov	r1, #7
   2da94:	e5922258 	ldr	r2, [r2, #600]	@ 0x258
   2da98:	e1c33411 	bic	r3, r3, r1, lsl r4
   2da9c:	e1833412 	orr	r3, r3, r2, lsl r4
   2daa0:	e5873000 	str	r3, [r7]
   2daa4:	e5953000 	ldr	r3, [r5]
   2daa8:	e3530000 	cmp	r3, #0
   2daac:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2dab0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2dab4:	ea0027dc 	b	37a2c <LeaveCritical>
   2dab8:	eb0027b0 	bl	37980 <EnterCritical>
   2dabc:	eaffffef 	b	2da80 <CGPIOPin::SetAlternateFunction(unsigned int)+0x58>
   2dac0:	e59f1018 	ldr	r1, [pc, #24]	@ 2dae0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   2dac4:	e3002181 	movw	r2, #385	@ 0x181
   2dac8:	e2810020 	add	r0, r1, #32
   2dacc:	ebfff8c2 	bl	2bddc <assertion_failed>
   2dad0:	e59f1008 	ldr	r1, [pc, #8]	@ 2dae0 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>
   2dad4:	e3002185 	movw	r2, #389	@ 0x185
   2dad8:	e2810f8e 	add	r0, r1, #568	@ 0x238
   2dadc:	ebfff8be 	bl	2bddc <assertion_failed>
   2dae0:	000420f0 	.word	0x000420f0

0002dae4 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   2dae4:	e3510009 	cmp	r1, #9
   2dae8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2daec:	8a000057 	bhi	2dc50 <CGPIOPin::SetMode(TGPIOMode, bool)+0x16c>
   2daf0:	e1a03001 	mov	r3, r1
   2daf4:	e2411004 	sub	r1, r1, #4
   2daf8:	e1a06002 	mov	r6, r2
   2dafc:	e1a04000 	mov	r4, r0
   2db00:	e6ef2071 	uxtb	r2, r1
   2db04:	e5c03010 	strb	r3, [r0, #16]
   2db08:	e3520005 	cmp	r2, #5
   2db0c:	9a00002d 	bls	2dbc8 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe4>
   2db10:	e3530001 	cmp	r3, #1
   2db14:	13a02000 	movne	r2, #0
   2db18:	02062001 	andeq	r2, r6, #1
   2db1c:	e3520000 	cmp	r2, #0
   2db20:	1a00004e 	bne	2dc60 <CGPIOPin::SetMode(TGPIOMode, bool)+0x17c>
   2db24:	e5943004 	ldr	r3, [r4, #4]
   2db28:	e3530035 	cmp	r3, #53	@ 0x35
   2db2c:	8a00004e 	bhi	2dc6c <CGPIOPin::SetMode(TGPIOMode, bool)+0x188>
   2db30:	e30c2ccd 	movw	r2, #52429	@ 0xcccd
   2db34:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
   2db38:	e304814c 	movw	r8, #16716	@ 0x414c
   2db3c:	e3408004 	movt	r8, #4
   2db40:	e0821392 	umull	r1, r2, r2, r3
   2db44:	e3a0100a 	mov	r1, #10
   2db48:	e5980000 	ldr	r0, [r8]
   2db4c:	e1a021a2 	lsr	r2, r2, #3
   2db50:	e3500000 	cmp	r0, #0
   2db54:	e282753f 	add	r7, r2, #264241152	@ 0xfc00000
   2db58:	e2877702 	add	r7, r7, #524288	@ 0x80000
   2db5c:	e0653291 	mls	r5, r1, r2, r3
   2db60:	e1a07107 	lsl	r7, r7, #2
   2db64:	e0855085 	add	r5, r5, r5, lsl #1
   2db68:	1a00001f 	bne	2dbec <CGPIOPin::SetMode(TGPIOMode, bool)+0x108>
   2db6c:	e5d42010 	ldrb	r2, [r4, #16]
   2db70:	e3a01007 	mov	r1, #7
   2db74:	e5973000 	ldr	r3, [r7]
   2db78:	e2422001 	sub	r2, r2, #1
   2db7c:	e16f2f12 	clz	r2, r2
   2db80:	e1c33511 	bic	r3, r3, r1, lsl r5
   2db84:	e1a022a2 	lsr	r2, r2, #5
   2db88:	e1833512 	orr	r3, r3, r2, lsl r5
   2db8c:	e5873000 	str	r3, [r7]
   2db90:	e5983000 	ldr	r3, [r8]
   2db94:	e3530000 	cmp	r3, #0
   2db98:	1a00000f 	bne	2dbdc <CGPIOPin::SetMode(TGPIOMode, bool)+0xf8>
   2db9c:	e3560000 	cmp	r6, #0
   2dba0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2dba4:	e5d43010 	ldrb	r3, [r4, #16]
   2dba8:	e3530003 	cmp	r3, #3
   2dbac:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   2dbb0:	ea000003 	b	2dbc4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe0>
   2dbb4:	0002dc24 	.word	0x0002dc24
   2dbb8:	0002dc14 	.word	0x0002dc14
   2dbbc:	0002dc04 	.word	0x0002dc04
   2dbc0:	0002dbf4 	.word	0x0002dbf4
   2dbc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dbc8:	e3560000 	cmp	r6, #0
   2dbcc:	1a000018 	bne	2dc34 <CGPIOPin::SetMode(TGPIOMode, bool)+0x150>
   2dbd0:	e1a00004 	mov	r0, r4
   2dbd4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2dbd8:	eaffff92 	b	2da28 <CGPIOPin::SetAlternateFunction(unsigned int)>
   2dbdc:	eb002792 	bl	37a2c <LeaveCritical>
   2dbe0:	e3560000 	cmp	r6, #0
   2dbe4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   2dbe8:	eaffffed 	b	2dba4 <CGPIOPin::SetMode(TGPIOMode, bool)+0xc0>
   2dbec:	eb002763 	bl	37980 <EnterCritical>
   2dbf0:	eaffffdd 	b	2db6c <CGPIOPin::SetMode(TGPIOMode, bool)+0x88>
   2dbf4:	e1a00004 	mov	r0, r4
   2dbf8:	e3a01001 	mov	r1, #1
   2dbfc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2dc00:	eaffff63 	b	2d994 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2dc04:	e1a00004 	mov	r0, r4
   2dc08:	e3a01002 	mov	r1, #2
   2dc0c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2dc10:	eaffff5f 	b	2d994 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2dc14:	e1a00004 	mov	r0, r4
   2dc18:	e3a01000 	mov	r1, #0
   2dc1c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2dc20:	eafffda5 	b	2d2bc <CGPIOPin::Write(unsigned int)>
   2dc24:	e1a00004 	mov	r0, r4
   2dc28:	e3a01000 	mov	r1, #0
   2dc2c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2dc30:	eaffff57 	b	2d994 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2dc34:	e3a01000 	mov	r1, #0
   2dc38:	ebffff55 	bl	2d994 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2dc3c:	e5d43010 	ldrb	r3, [r4, #16]
   2dc40:	e1a00004 	mov	r0, r4
   2dc44:	e2431004 	sub	r1, r3, #4
   2dc48:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   2dc4c:	eaffff75 	b	2da28 <CGPIOPin::SetAlternateFunction(unsigned int)>
   2dc50:	e59f1024 	ldr	r1, [pc, #36]	@ 2dc7c <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   2dc54:	e3a0204f 	mov	r2, #79	@ 0x4f
   2dc58:	e2810e26 	add	r0, r1, #608	@ 0x260
   2dc5c:	ebfff85e 	bl	2bddc <assertion_failed>
   2dc60:	e3a01000 	mov	r1, #0
   2dc64:	ebffff4a 	bl	2d994 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   2dc68:	eaffffad 	b	2db24 <CGPIOPin::SetMode(TGPIOMode, bool)+0x40>
   2dc6c:	e59f1008 	ldr	r1, [pc, #8]	@ 2dc7c <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>
   2dc70:	e3a02068 	mov	r2, #104	@ 0x68
   2dc74:	e2810020 	add	r0, r1, #32
   2dc78:	ebfff857 	bl	2bddc <assertion_failed>
   2dc7c:	000420f0 	.word	0x000420f0

0002dc80 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   2dc80:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2dc84:	e3510035 	cmp	r1, #53	@ 0x35
   2dc88:	e59f7090 	ldr	r7, [pc, #144]	@ 2dd20 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0xa0>
   2dc8c:	e5803018 	str	r3, [r0, #24]
   2dc90:	e1a04000 	mov	r4, r0
   2dc94:	e3a03000 	mov	r3, #0
   2dc98:	e1a05001 	mov	r5, r1
   2dc9c:	e580301c 	str	r3, [r0, #28]
   2dca0:	e1a06002 	mov	r6, r2
   2dca4:	e3a03006 	mov	r3, #6
   2dca8:	e5807000 	str	r7, [r0]
   2dcac:	e5c03025 	strb	r3, [r0, #37]	@ 0x25
   2dcb0:	e5c03026 	strb	r3, [r0, #38]	@ 0x26
   2dcb4:	e3a0300a 	mov	r3, #10
   2dcb8:	e5801004 	str	r1, [r0, #4]
   2dcbc:	e5c03010 	strb	r3, [r0, #16]
   2dcc0:	8a00000b 	bhi	2dcf4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>
   2dcc4:	e3a02001 	mov	r2, #1
   2dcc8:	e1a032a5 	lsr	r3, r5, #5
   2dccc:	e205501f 	and	r5, r5, #31
   2dcd0:	e1a00004 	mov	r0, r4
   2dcd4:	e1a03103 	lsl	r3, r3, #2
   2dcd8:	e1a01006 	mov	r1, r6
   2dcdc:	e1a05512 	lsl	r5, r2, r5
   2dce0:	e5843008 	str	r3, [r4, #8]
   2dce4:	e584500c 	str	r5, [r4, #12]
   2dce8:	ebffff7d 	bl	2dae4 <CGPIOPin::SetMode(TGPIOMode, bool)>
   2dcec:	e1a00004 	mov	r0, r4
   2dcf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2dcf4:	eb0006c3 	bl	2f808 <CMachineInfo::Get()>
   2dcf8:	e6ef1075 	uxtb	r1, r5
   2dcfc:	eb000628 	bl	2f5a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   2dd00:	e1a05000 	mov	r5, r0
   2dd04:	e3500035 	cmp	r0, #53	@ 0x35
   2dd08:	e5840004 	str	r0, [r4, #4]
   2dd0c:	9affffec 	bls	2dcc4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x44>
   2dd10:	e3a02047 	mov	r2, #71	@ 0x47
   2dd14:	e2871008 	add	r1, r7, #8
   2dd18:	e2870028 	add	r0, r7, #40	@ 0x28
   2dd1c:	ebfff82e 	bl	2bddc <assertion_failed>
   2dd20:	000420e8 	.word	0x000420e8

0002dd24 <CGPIOPin::InterruptHandler()>:
   2dd24:	e5d03010 	ldrb	r3, [r0, #16]
   2dd28:	e92d4010 	push	{r4, lr}
   2dd2c:	e2432002 	sub	r2, r3, #2
   2dd30:	e3530000 	cmp	r3, #0
   2dd34:	13520001 	cmpne	r2, #1
   2dd38:	8a000013 	bhi	2dd8c <CGPIOPin::InterruptHandler()+0x68>
   2dd3c:	e5d03025 	ldrb	r3, [r0, #37]	@ 0x25
   2dd40:	e3530005 	cmp	r3, #5
   2dd44:	8a000005 	bhi	2dd60 <CGPIOPin::InterruptHandler()+0x3c>
   2dd48:	e590301c 	ldr	r3, [r0, #28]
   2dd4c:	e3530000 	cmp	r3, #0
   2dd50:	0a000009 	beq	2dd7c <CGPIOPin::InterruptHandler()+0x58>
   2dd54:	e8bd4010 	pop	{r4, lr}
   2dd58:	e5900020 	ldr	r0, [r0, #32]
   2dd5c:	e12fff13 	bx	r3
   2dd60:	e5d03026 	ldrb	r3, [r0, #38]	@ 0x26
   2dd64:	e3530005 	cmp	r3, #5
   2dd68:	9afffff6 	bls	2dd48 <CGPIOPin::InterruptHandler()+0x24>
   2dd6c:	e59f1028 	ldr	r1, [pc, #40]	@ 2dd9c <CGPIOPin::InterruptHandler()+0x78>
   2dd70:	e3002195 	movw	r2, #405	@ 0x195
   2dd74:	e2810f9e 	add	r0, r1, #632	@ 0x278
   2dd78:	ebfff817 	bl	2bddc <assertion_failed>
   2dd7c:	e59f1018 	ldr	r1, [pc, #24]	@ 2dd9c <CGPIOPin::InterruptHandler()+0x78>
   2dd80:	e3a02f66 	mov	r2, #408	@ 0x198
   2dd84:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   2dd88:	ebfff813 	bl	2bddc <assertion_failed>
   2dd8c:	e59f1008 	ldr	r1, [pc, #8]	@ 2dd9c <CGPIOPin::InterruptHandler()+0x78>
   2dd90:	e3002192 	movw	r2, #402	@ 0x192
   2dd94:	e2810078 	add	r0, r1, #120	@ 0x78
   2dd98:	ebfff80f 	bl	2bddc <assertion_failed>
   2dd9c:	000420f0 	.word	0x000420f0

0002dda0 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   2dda0:	e3500035 	cmp	r0, #53	@ 0x35
   2dda4:	e92d4070 	push	{r4, r5, r6, lr}
   2dda8:	8a00001a 	bhi	2de18 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x78>
   2ddac:	e304614c 	movw	r6, #16716	@ 0x414c
   2ddb0:	e3406004 	movt	r6, #4
   2ddb4:	e3a04013 	mov	r4, #19
   2ddb8:	e3404fc8 	movt	r4, #4040	@ 0xfc8
   2ddbc:	e08442a0 	add	r4, r4, r0, lsr #5
   2ddc0:	e200301f 	and	r3, r0, #31
   2ddc4:	e3a02001 	mov	r2, #1
   2ddc8:	e5960000 	ldr	r0, [r6]
   2ddcc:	e1a04104 	lsl	r4, r4, #2
   2ddd0:	e1a05312 	lsl	r5, r2, r3
   2ddd4:	e3500000 	cmp	r0, #0
   2ddd8:	1a00000c 	bne	2de10 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x70>
   2dddc:	e3a0108b 	mov	r1, #139	@ 0x8b
   2dde0:	e3431f20 	movt	r1, #16160	@ 0x3f20
   2dde4:	e1e02005 	mvn	r2, r5
   2dde8:	e5943000 	ldr	r3, [r4]
   2ddec:	e0033002 	and	r3, r3, r2
   2ddf0:	e484300c 	str	r3, [r4], #12
   2ddf4:	e1540001 	cmp	r4, r1
   2ddf8:	9afffffa 	bls	2dde8 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x48>
   2ddfc:	e5963000 	ldr	r3, [r6]
   2de00:	e3530000 	cmp	r3, #0
   2de04:	08bd8070 	popeq	{r4, r5, r6, pc}
   2de08:	e8bd4070 	pop	{r4, r5, r6, lr}
   2de0c:	ea002706 	b	37a2c <LeaveCritical>
   2de10:	eb0026da 	bl	37980 <EnterCritical>
   2de14:	eafffff0 	b	2dddc <CGPIOPin::DisableAllInterrupts(unsigned int)+0x3c>
   2de18:	e59f1008 	ldr	r1, [pc, #8]	@ 2de28 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x88>
   2de1c:	e300219e 	movw	r2, #414	@ 0x19e
   2de20:	e2810fb1 	add	r0, r1, #708	@ 0x2c4
   2de24:	ebfff7ec 	bl	2bddc <assertion_failed>
   2de28:	000420f0 	.word	0x000420f0

0002de2c <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   2de2c:	e304314c 	movw	r3, #16716	@ 0x414c
   2de30:	e3403004 	movt	r3, #4
   2de34:	e3a02001 	mov	r2, #1
   2de38:	e5832000 	str	r2, [r3]
   2de3c:	e12fff1e 	bx	lr

0002de40 <CKernelOptions::~CKernelOptions()>:
   2de40:	e92d4070 	push	{r4, r5, r6, lr}
   2de44:	e1a05000 	mov	r5, r0
   2de48:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
   2de4c:	e3540000 	cmp	r4, #0
   2de50:	0a00000f 	beq	2de94 <CKernelOptions::~CKernelOptions()+0x54>
   2de54:	e5940008 	ldr	r0, [r4, #8]
   2de58:	e5943000 	ldr	r3, [r4]
   2de5c:	e3500000 	cmp	r0, #0
   2de60:	e5853890 	str	r3, [r5, #2192]	@ 0x890
   2de64:	0a000000 	beq	2de6c <CKernelOptions::~CKernelOptions()+0x2c>
   2de68:	eb0020bf 	bl	3616c <operator delete[](void*)>
   2de6c:	e5940004 	ldr	r0, [r4, #4]
   2de70:	e3500000 	cmp	r0, #0
   2de74:	0a000000 	beq	2de7c <CKernelOptions::~CKernelOptions()+0x3c>
   2de78:	eb0020bb 	bl	3616c <operator delete[](void*)>
   2de7c:	e1a00004 	mov	r0, r4
   2de80:	e3a0100c 	mov	r1, #12
   2de84:	eb0020be 	bl	36184 <operator delete(void*, unsigned int)>
   2de88:	e5954890 	ldr	r4, [r5, #2192]	@ 0x890
   2de8c:	e3540000 	cmp	r4, #0
   2de90:	1affffef 	bne	2de54 <CKernelOptions::~CKernelOptions()+0x14>
   2de94:	e3043150 	movw	r3, #16720	@ 0x4150
   2de98:	e3403004 	movt	r3, #4
   2de9c:	e3a02000 	mov	r2, #0
   2dea0:	e1a00005 	mov	r0, r5
   2dea4:	e5832000 	str	r2, [r3]
   2dea8:	e8bd8070 	pop	{r4, r5, r6, pc}

0002deac <CKernelOptions::GetWidth() const>:
   2deac:	e5900810 	ldr	r0, [r0, #2064]	@ 0x810
   2deb0:	e12fff1e 	bx	lr

0002deb4 <CKernelOptions::GetHeight() const>:
   2deb4:	e5900814 	ldr	r0, [r0, #2068]	@ 0x814
   2deb8:	e12fff1e 	bx	lr

0002debc <CKernelOptions::GetLogDevice() const>:
   2debc:	e2800e81 	add	r0, r0, #2064	@ 0x810
   2dec0:	e2800008 	add	r0, r0, #8
   2dec4:	e12fff1e 	bx	lr

0002dec8 <CKernelOptions::GetLogLevel() const>:
   2dec8:	e590082c 	ldr	r0, [r0, #2092]	@ 0x82c
   2decc:	e12fff1e 	bx	lr

0002ded0 <CKernelOptions::GetKeyMap() const>:
   2ded0:	e2800e83 	add	r0, r0, #2096	@ 0x830
   2ded4:	e12fff1e 	bx	lr

0002ded8 <CKernelOptions::GetUSBPowerDelay() const>:
   2ded8:	e5900834 	ldr	r0, [r0, #2100]	@ 0x834
   2dedc:	e12fff1e 	bx	lr

0002dee0 <CKernelOptions::GetUSBFullSpeed() const>:
   2dee0:	e5d00838 	ldrb	r0, [r0, #2104]	@ 0x838
   2dee4:	e12fff1e 	bx	lr

0002dee8 <CKernelOptions::GetUSBBoost() const>:
   2dee8:	e5d00839 	ldrb	r0, [r0, #2105]	@ 0x839
   2deec:	e12fff1e 	bx	lr

0002def0 <CKernelOptions::GetUSBIgnore() const>:
   2def0:	e2800e83 	add	r0, r0, #2096	@ 0x830
   2def4:	e280000a 	add	r0, r0, #10
   2def8:	e12fff1e 	bx	lr

0002defc <CKernelOptions::GetUSBSoundChannels() const>:
   2defc:	e2800e85 	add	r0, r0, #2128	@ 0x850
   2df00:	e12fff1e 	bx	lr

0002df04 <CKernelOptions::GetSoundDevice() const>:
   2df04:	e2800e85 	add	r0, r0, #2128	@ 0x850
   2df08:	e2800008 	add	r0, r0, #8
   2df0c:	e12fff1e 	bx	lr

0002df10 <CKernelOptions::GetSoundOption() const>:
   2df10:	e590086c 	ldr	r0, [r0, #2156]	@ 0x86c
   2df14:	e12fff1e 	bx	lr

0002df18 <CKernelOptions::GetCPUSpeed() const>:
   2df18:	e5d00870 	ldrb	r0, [r0, #2160]	@ 0x870
   2df1c:	e12fff1e 	bx	lr

0002df20 <CKernelOptions::GetSoCMaxTemp() const>:
   2df20:	e5900874 	ldr	r0, [r0, #2164]	@ 0x874
   2df24:	e12fff1e 	bx	lr

0002df28 <CKernelOptions::GetGPIOFanPin() const>:
   2df28:	e5900878 	ldr	r0, [r0, #2168]	@ 0x878
   2df2c:	e12fff1e 	bx	lr

0002df30 <CKernelOptions::GetTouchScreen() const>:
   2df30:	e5d0387c 	ldrb	r3, [r0, #2172]	@ 0x87c
   2df34:	e3530000 	cmp	r3, #0
   2df38:	12800d22 	addne	r0, r0, #2176	@ 0x880
   2df3c:	01a00003 	moveq	r0, r3
   2df40:	e12fff1e 	bx	lr

0002df44 <CKernelOptions::GetAppOptionString(char const*, char const*) const>:
   2df44:	e92d4070 	push	{r4, r5, r6, lr}
   2df48:	e1a06002 	mov	r6, r2
   2df4c:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
   2df50:	e3540000 	cmp	r4, #0
   2df54:	0a00000b 	beq	2df88 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
   2df58:	e1a05001 	mov	r5, r1
   2df5c:	ea000002 	b	2df6c <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x28>
   2df60:	e5944000 	ldr	r4, [r4]
   2df64:	e3540000 	cmp	r4, #0
   2df68:	0a000006 	beq	2df88 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x44>
   2df6c:	e5940004 	ldr	r0, [r4, #4]
   2df70:	e1a01005 	mov	r1, r5
   2df74:	eb001c68 	bl	3511c <strcmp>
   2df78:	e3500000 	cmp	r0, #0
   2df7c:	1afffff7 	bne	2df60 <CKernelOptions::GetAppOptionString(char const*, char const*) const+0x1c>
   2df80:	e5940008 	ldr	r0, [r4, #8]
   2df84:	e8bd8070 	pop	{r4, r5, r6, pc}
   2df88:	e1a00006 	mov	r0, r6
   2df8c:	e8bd8070 	pop	{r4, r5, r6, pc}

0002df90 <CKernelOptions::Get()>:
   2df90:	e3043150 	movw	r3, #16720	@ 0x4150
   2df94:	e3403004 	movt	r3, #4
   2df98:	e5930000 	ldr	r0, [r3]
   2df9c:	e12fff1e 	bx	lr

0002dfa0 <CKernelOptions::GetToken()>:
   2dfa0:	e1a01000 	mov	r1, r0
   2dfa4:	e590080c 	ldr	r0, [r0, #2060]	@ 0x80c
   2dfa8:	e1d030d0 	ldrsb	r3, [r0]
   2dfac:	e3530000 	cmp	r3, #0
   2dfb0:	1a000005 	bne	2dfcc <CKernelOptions::GetToken()+0x2c>
   2dfb4:	ea000017 	b	2e018 <CKernelOptions::GetToken()+0x78>
   2dfb8:	e2800001 	add	r0, r0, #1
   2dfbc:	e581080c 	str	r0, [r1, #2060]	@ 0x80c
   2dfc0:	e1d030d0 	ldrsb	r3, [r0]
   2dfc4:	e3530000 	cmp	r3, #0
   2dfc8:	0a000012 	beq	2e018 <CKernelOptions::GetToken()+0x78>
   2dfcc:	e3530020 	cmp	r3, #32
   2dfd0:	0afffff8 	beq	2dfb8 <CKernelOptions::GetToken()+0x18>
   2dfd4:	e591380c 	ldr	r3, [r1, #2060]	@ 0x80c
   2dfd8:	e1d320d0 	ldrsb	r2, [r3]
   2dfdc:	e3520000 	cmp	r2, #0
   2dfe0:	1a000004 	bne	2dff8 <CKernelOptions::GetToken()+0x58>
   2dfe4:	e12fff1e 	bx	lr
   2dfe8:	e581380c 	str	r3, [r1, #2060]	@ 0x80c
   2dfec:	e1d320d0 	ldrsb	r2, [r3]
   2dff0:	e3520000 	cmp	r2, #0
   2dff4:	012fff1e 	bxeq	lr
   2dff8:	e3520020 	cmp	r2, #32
   2dffc:	e1a02003 	mov	r2, r3
   2e000:	e2833001 	add	r3, r3, #1
   2e004:	1afffff7 	bne	2dfe8 <CKernelOptions::GetToken()+0x48>
   2e008:	e3a0c000 	mov	ip, #0
   2e00c:	e581380c 	str	r3, [r1, #2060]	@ 0x80c
   2e010:	e5c2c000 	strb	ip, [r2]
   2e014:	e12fff1e 	bx	lr
   2e018:	e3a00000 	mov	r0, #0
   2e01c:	e12fff1e 	bx	lr

0002e020 <CKernelOptions::GetOptionValue(char*)>:
   2e020:	e1d030d0 	ldrsb	r3, [r0]
   2e024:	e3530000 	cmp	r3, #0
   2e028:	1a000003 	bne	2e03c <CKernelOptions::GetOptionValue(char*)+0x1c>
   2e02c:	ea000007 	b	2e050 <CKernelOptions::GetOptionValue(char*)+0x30>
   2e030:	e1f030d1 	ldrsb	r3, [r0, #1]!
   2e034:	e3530000 	cmp	r3, #0
   2e038:	0a000004 	beq	2e050 <CKernelOptions::GetOptionValue(char*)+0x30>
   2e03c:	e353003d 	cmp	r3, #61	@ 0x3d
   2e040:	1afffffa 	bne	2e030 <CKernelOptions::GetOptionValue(char*)+0x10>
   2e044:	e3a03000 	mov	r3, #0
   2e048:	e4c03001 	strb	r3, [r0], #1
   2e04c:	e12fff1e 	bx	lr
   2e050:	e1a00003 	mov	r0, r3
   2e054:	e12fff1e 	bx	lr

0002e058 <CKernelOptions::GetDecimal(char const*)>:
   2e058:	e2501000 	subs	r1, r0, #0
   2e05c:	0a000015 	beq	2e0b8 <CKernelOptions::GetDecimal(char const*)+0x60>
   2e060:	e1d130d0 	ldrsb	r3, [r1]
   2e064:	e3530000 	cmp	r3, #0
   2e068:	0a000012 	beq	2e0b8 <CKernelOptions::GetDecimal(char const*)+0x60>
   2e06c:	e3a00000 	mov	r0, #0
   2e070:	e3a0c00a 	mov	ip, #10
   2e074:	ea000007 	b	2e098 <CKernelOptions::GetDecimal(char const*)+0x40>
   2e078:	e3730001 	cmn	r3, #1
   2e07c:	13a02000 	movne	r2, #0
   2e080:	03a02001 	moveq	r2, #1
   2e084:	e1500003 	cmp	r0, r3
   2e088:	83822001 	orrhi	r2, r2, #1
   2e08c:	e1a00003 	mov	r0, r3
   2e090:	e3520000 	cmp	r2, #0
   2e094:	1a000007 	bne	2e0b8 <CKernelOptions::GetDecimal(char const*)+0x60>
   2e098:	e0d120d1 	ldrsb	r2, [r1], #1
   2e09c:	e3520000 	cmp	r2, #0
   2e0a0:	e2423030 	sub	r3, r2, #48	@ 0x30
   2e0a4:	012fff1e 	bxeq	lr
   2e0a8:	e6ef2073 	uxtb	r2, r3
   2e0ac:	e023309c 	mla	r3, ip, r0, r3
   2e0b0:	e3520009 	cmp	r2, #9
   2e0b4:	9affffef 	bls	2e078 <CKernelOptions::GetDecimal(char const*)+0x20>
   2e0b8:	e3e00000 	mvn	r0, #0
   2e0bc:	e12fff1e 	bx	lr

0002e0c0 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const>:
   2e0c0:	e92d4070 	push	{r4, r5, r6, lr}
   2e0c4:	e1a06002 	mov	r6, r2
   2e0c8:	e5904890 	ldr	r4, [r0, #2192]	@ 0x890
   2e0cc:	e3540000 	cmp	r4, #0
   2e0d0:	0a00000f 	beq	2e114 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   2e0d4:	e1a05001 	mov	r5, r1
   2e0d8:	ea000002 	b	2e0e8 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x28>
   2e0dc:	e5944000 	ldr	r4, [r4]
   2e0e0:	e3540000 	cmp	r4, #0
   2e0e4:	0a00000a 	beq	2e114 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   2e0e8:	e5940004 	ldr	r0, [r4, #4]
   2e0ec:	e1a01005 	mov	r1, r5
   2e0f0:	eb001c09 	bl	3511c <strcmp>
   2e0f4:	e3500000 	cmp	r0, #0
   2e0f8:	1afffff7 	bne	2e0dc <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x1c>
   2e0fc:	e5940008 	ldr	r0, [r4, #8]
   2e100:	e3500000 	cmp	r0, #0
   2e104:	0a000002 	beq	2e114 <CKernelOptions::GetAppOptionDecimal(char const*, unsigned int) const+0x54>
   2e108:	ebffffd2 	bl	2e058 <CKernelOptions::GetDecimal(char const*)>
   2e10c:	e3700001 	cmn	r0, #1
   2e110:	18bd8070 	popne	{r4, r5, r6, pc}
   2e114:	e1a00006 	mov	r0, r6
   2e118:	e8bd8070 	pop	{r4, r5, r6, pc}

0002e11c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
   2e11c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2e120:	e3520000 	cmp	r2, #0
   2e124:	e24dd008 	sub	sp, sp, #8
   2e128:	028d7004 	addeq	r7, sp, #4
   2e12c:	0a000023 	beq	2e1c0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa4>
   2e130:	e30263c8 	movw	r6, #9160	@ 0x23c8
   2e134:	e3406004 	movt	r6, #4
   2e138:	e1a05001 	mov	r5, r1
   2e13c:	e2428001 	sub	r8, r2, #1
   2e140:	e28d7004 	add	r7, sp, #4
   2e144:	e3a0400a 	mov	r4, #10
   2e148:	e1a02007 	mov	r2, r7
   2e14c:	e1a01006 	mov	r1, r6
   2e150:	eb001cd3 	bl	354a4 <strtok_r>
   2e154:	e250c000 	subs	ip, r0, #0
   2e158:	0a000021 	beq	2e1e4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
   2e15c:	e1dc00d0 	ldrsb	r0, [ip]
   2e160:	e3500000 	cmp	r0, #0
   2e164:	0a00001f 	beq	2e1e8 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xcc>
   2e168:	e3a01000 	mov	r1, #0
   2e16c:	ea00000b 	b	2e1a0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x84>
   2e170:	e6ef2073 	uxtb	r2, r3
   2e174:	e0233194 	mla	r3, r4, r1, r3
   2e178:	e3520009 	cmp	r2, #9
   2e17c:	8a000018 	bhi	2e1e4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
   2e180:	e3730001 	cmn	r3, #1
   2e184:	13a02000 	movne	r2, #0
   2e188:	03a02001 	moveq	r2, #1
   2e18c:	e1510003 	cmp	r1, r3
   2e190:	83822001 	orrhi	r2, r2, #1
   2e194:	e1a01003 	mov	r1, r3
   2e198:	e3520000 	cmp	r2, #0
   2e19c:	1a000010 	bne	2e1e4 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
   2e1a0:	e0dc00d1 	ldrsb	r0, [ip], #1
   2e1a4:	e2403030 	sub	r3, r0, #48	@ 0x30
   2e1a8:	e3500000 	cmp	r0, #0
   2e1ac:	1affffef 	bne	2e170 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x54>
   2e1b0:	e2488001 	sub	r8, r8, #1
   2e1b4:	e4851004 	str	r1, [r5], #4
   2e1b8:	e3780001 	cmn	r8, #1
   2e1bc:	1affffe1 	bne	2e148 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x2c>
   2e1c0:	e1a02007 	mov	r2, r7
   2e1c4:	e3a00000 	mov	r0, #0
   2e1c8:	e30213c8 	movw	r1, #9160	@ 0x23c8
   2e1cc:	e3401004 	movt	r1, #4
   2e1d0:	eb001cb3 	bl	354a4 <strtok_r>
   2e1d4:	e16f0f10 	clz	r0, r0
   2e1d8:	e1a002a0 	lsr	r0, r0, #5
   2e1dc:	e28dd008 	add	sp, sp, #8
   2e1e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2e1e4:	e3a00000 	mov	r0, #0
   2e1e8:	e28dd008 	add	sp, sp, #8
   2e1ec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002e1f0 <CKernelOptions::CKernelOptions()>:
   2e1f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e1f4:	e1a04000 	mov	r4, r0
   2e1f8:	e3002838 	movw	r2, #2104	@ 0x838
   2e1fc:	e2807e81 	add	r7, r0, #2064	@ 0x810
   2e200:	e3a05000 	mov	r5, #0
   2e204:	e2877008 	add	r7, r7, #8
   2e208:	e24dd01c 	sub	sp, sp, #28
   2e20c:	e5805810 	str	r5, [r0, #2064]	@ 0x810
   2e210:	e3a03004 	mov	r3, #4
   2e214:	e5805814 	str	r5, [r0, #2068]	@ 0x814
   2e218:	e2849e83 	add	r9, r4, #2096	@ 0x830
   2e21c:	e580382c 	str	r3, [r0, #2092]	@ 0x82c
   2e220:	e30e11fc 	movw	r1, #57852	@ 0xe1fc
   2e224:	e3401003 	movt	r1, #3
   2e228:	e5805834 	str	r5, [r0, #2100]	@ 0x834
   2e22c:	e3a0303c 	mov	r3, #60	@ 0x3c
   2e230:	e18050b2 	strh	r5, [r0, r2]
   2e234:	e5803874 	str	r3, [r0, #2164]	@ 0x874
   2e238:	e5805850 	str	r5, [r0, #2128]	@ 0x850
   2e23c:	e5805854 	str	r5, [r0, #2132]	@ 0x854
   2e240:	e580586c 	str	r5, [r0, #2156]	@ 0x86c
   2e244:	e5c05870 	strb	r5, [r0, #2160]	@ 0x870
   2e248:	e1a00007 	mov	r0, r7
   2e24c:	e5845878 	str	r5, [r4, #2168]	@ 0x878
   2e250:	e5c4587c 	strb	r5, [r4, #2172]	@ 0x87c
   2e254:	e5845890 	str	r5, [r4, #2192]	@ 0x890
   2e258:	eb001c45 	bl	35374 <strcpy>
   2e25c:	e1a00009 	mov	r0, r9
   2e260:	e30c18e8 	movw	r1, #51432	@ 0xc8e8
   2e264:	e3401003 	movt	r1, #3
   2e268:	eb001c41 	bl	35374 <strcpy>
   2e26c:	e3043150 	movw	r3, #16720	@ 0x4150
   2e270:	e3403004 	movt	r3, #4
   2e274:	e1a01005 	mov	r1, r5
   2e278:	e28d0010 	add	r0, sp, #16
   2e27c:	e5c4583a 	strb	r5, [r4, #2106]	@ 0x83a
   2e280:	e5c45858 	strb	r5, [r4, #2136]	@ 0x858
   2e284:	e5834000 	str	r4, [r3]
   2e288:	ebfff6f4 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2e28c:	e1a02004 	mov	r2, r4
   2e290:	e3a01001 	mov	r1, #1
   2e294:	e3401005 	movt	r1, #5
   2e298:	e28d0010 	add	r0, sp, #16
   2e29c:	e58d5000 	str	r5, [sp]
   2e2a0:	e300380c 	movw	r3, #2060	@ 0x80c
   2e2a4:	ebfff73f 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2e2a8:	e1500005 	cmp	r0, r5
   2e2ac:	0a000027 	beq	2e350 <CKernelOptions::CKernelOptions()+0x160>
   2e2b0:	e5943008 	ldr	r3, [r4, #8]
   2e2b4:	e3530b02 	cmp	r3, #2048	@ 0x800
   2e2b8:	2a000024 	bcs	2e350 <CKernelOptions::CKernelOptions()+0x160>
   2e2bc:	e0843003 	add	r3, r4, r3
   2e2c0:	e30e6204 	movw	r6, #57860	@ 0xe204
   2e2c4:	e3406003 	movt	r6, #3
   2e2c8:	e30e820c 	movw	r8, #57868	@ 0xe20c
   2e2cc:	e3408003 	movt	r8, #3
   2e2d0:	e5c3500c 	strb	r5, [r3, #12]
   2e2d4:	e284300c 	add	r3, r4, #12
   2e2d8:	e584380c 	str	r3, [r4, #2060]	@ 0x80c
   2e2dc:	e1a00004 	mov	r0, r4
   2e2e0:	ebffff2e 	bl	2dfa0 <CKernelOptions::GetToken()>
   2e2e4:	e250a000 	subs	sl, r0, #0
   2e2e8:	0a000018 	beq	2e350 <CKernelOptions::CKernelOptions()+0x160>
   2e2ec:	e1da30d0 	ldrsb	r3, [sl]
   2e2f0:	e3530000 	cmp	r3, #0
   2e2f4:	11a0100a 	movne	r1, sl
   2e2f8:	1a000003 	bne	2e30c <CKernelOptions::CKernelOptions()+0x11c>
   2e2fc:	ea000018 	b	2e364 <CKernelOptions::CKernelOptions()+0x174>
   2e300:	e1f130d1 	ldrsb	r3, [r1, #1]!
   2e304:	e3530000 	cmp	r3, #0
   2e308:	0a000015 	beq	2e364 <CKernelOptions::CKernelOptions()+0x174>
   2e30c:	e353003d 	cmp	r3, #61	@ 0x3d
   2e310:	1afffffa 	bne	2e300 <CKernelOptions::CKernelOptions()+0x110>
   2e314:	e1a0b001 	mov	fp, r1
   2e318:	e4cb5001 	strb	r5, [fp], #1
   2e31c:	e1a01006 	mov	r1, r6
   2e320:	e1a0000a 	mov	r0, sl
   2e324:	eb001b7c 	bl	3511c <strcmp>
   2e328:	e3500000 	cmp	r0, #0
   2e32c:	1a00000e 	bne	2e36c <CKernelOptions::CKernelOptions()+0x17c>
   2e330:	e1a0000b 	mov	r0, fp
   2e334:	ebffff47 	bl	2e058 <CKernelOptions::GetDecimal(char const*)>
   2e338:	e3700001 	cmn	r0, #1
   2e33c:	15840810 	strne	r0, [r4, #2064]	@ 0x810
   2e340:	e1a00004 	mov	r0, r4
   2e344:	ebffff15 	bl	2dfa0 <CKernelOptions::GetToken()>
   2e348:	e250a000 	subs	sl, r0, #0
   2e34c:	1affffe6 	bne	2e2ec <CKernelOptions::CKernelOptions()+0xfc>
   2e350:	e28d0010 	add	r0, sp, #16
   2e354:	ebfff6c8 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   2e358:	e1a00004 	mov	r0, r4
   2e35c:	e28dd01c 	add	sp, sp, #28
   2e360:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e364:	e1a0b003 	mov	fp, r3
   2e368:	eaffffeb 	b	2e31c <CKernelOptions::CKernelOptions()+0x12c>
   2e36c:	e1a01008 	mov	r1, r8
   2e370:	e1a0000a 	mov	r0, sl
   2e374:	eb001b68 	bl	3511c <strcmp>
   2e378:	e3500000 	cmp	r0, #0
   2e37c:	1a000004 	bne	2e394 <CKernelOptions::CKernelOptions()+0x1a4>
   2e380:	e1a0000b 	mov	r0, fp
   2e384:	ebffff33 	bl	2e058 <CKernelOptions::GetDecimal(char const*)>
   2e388:	e3700001 	cmn	r0, #1
   2e38c:	15840814 	strne	r0, [r4, #2068]	@ 0x814
   2e390:	eaffffd1 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e394:	e1a0000a 	mov	r0, sl
   2e398:	e30e1214 	movw	r1, #57876	@ 0xe214
   2e39c:	e3401003 	movt	r1, #3
   2e3a0:	eb001b5d 	bl	3511c <strcmp>
   2e3a4:	e2503000 	subs	r3, r0, #0
   2e3a8:	e58d300c 	str	r3, [sp, #12]
   2e3ac:	0a00000a 	beq	2e3dc <CKernelOptions::CKernelOptions()+0x1ec>
   2e3b0:	e1a0000a 	mov	r0, sl
   2e3b4:	e30e121c 	movw	r1, #57884	@ 0xe21c
   2e3b8:	e3401003 	movt	r1, #3
   2e3bc:	eb001b56 	bl	3511c <strcmp>
   2e3c0:	e3500000 	cmp	r0, #0
   2e3c4:	1a00000b 	bne	2e3f8 <CKernelOptions::CKernelOptions()+0x208>
   2e3c8:	e1a0000b 	mov	r0, fp
   2e3cc:	ebffff21 	bl	2e058 <CKernelOptions::GetDecimal(char const*)>
   2e3d0:	e3500004 	cmp	r0, #4
   2e3d4:	9584082c 	strls	r0, [r4, #2092]	@ 0x82c
   2e3d8:	eaffffbf 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e3dc:	e1a0100b 	mov	r1, fp
   2e3e0:	e3a02013 	mov	r2, #19
   2e3e4:	e1a00007 	mov	r0, r7
   2e3e8:	eb001bec 	bl	353a0 <strncpy>
   2e3ec:	e59d300c 	ldr	r3, [sp, #12]
   2e3f0:	e5c4382b 	strb	r3, [r4, #2091]	@ 0x82b
   2e3f4:	eaffffb8 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e3f8:	e1a0000a 	mov	r0, sl
   2e3fc:	e30e1228 	movw	r1, #57896	@ 0xe228
   2e400:	e3401003 	movt	r1, #3
   2e404:	eb001b44 	bl	3511c <strcmp>
   2e408:	e2503000 	subs	r3, r0, #0
   2e40c:	e58d300c 	str	r3, [sp, #12]
   2e410:	0a00000c 	beq	2e448 <CKernelOptions::CKernelOptions()+0x258>
   2e414:	e1a0000a 	mov	r0, sl
   2e418:	e30e1230 	movw	r1, #57904	@ 0xe230
   2e41c:	e3401003 	movt	r1, #3
   2e420:	eb001b3d 	bl	3511c <strcmp>
   2e424:	e3500000 	cmp	r0, #0
   2e428:	1a00000d 	bne	2e464 <CKernelOptions::CKernelOptions()+0x274>
   2e42c:	e1a0000b 	mov	r0, fp
   2e430:	ebffff08 	bl	2e058 <CKernelOptions::GetDecimal(char const*)>
   2e434:	e24010c8 	sub	r1, r0, #200	@ 0xc8
   2e438:	e3012e78 	movw	r2, #7800	@ 0x1e78
   2e43c:	e1510002 	cmp	r1, r2
   2e440:	95840834 	strls	r0, [r4, #2100]	@ 0x834
   2e444:	eaffffa4 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e448:	e1a0100b 	mov	r1, fp
   2e44c:	e3a02002 	mov	r2, #2
   2e450:	e1a00009 	mov	r0, r9
   2e454:	eb001bd1 	bl	353a0 <strncpy>
   2e458:	e59d300c 	ldr	r3, [sp, #12]
   2e45c:	e5c43832 	strb	r3, [r4, #2098]	@ 0x832
   2e460:	eaffff9d 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e464:	e1a0000a 	mov	r0, sl
   2e468:	e30e1240 	movw	r1, #57920	@ 0xe240
   2e46c:	e3401003 	movt	r1, #3
   2e470:	eb001b29 	bl	3511c <strcmp>
   2e474:	e3500000 	cmp	r0, #0
   2e478:	1a000007 	bne	2e49c <CKernelOptions::CKernelOptions()+0x2ac>
   2e47c:	e1a0000b 	mov	r0, fp
   2e480:	e30e124c 	movw	r1, #57932	@ 0xe24c
   2e484:	e3401003 	movt	r1, #3
   2e488:	eb001b23 	bl	3511c <strcmp>
   2e48c:	e3500000 	cmp	r0, #0
   2e490:	03a03001 	moveq	r3, #1
   2e494:	05c43838 	strbeq	r3, [r4, #2104]	@ 0x838
   2e498:	eaffff8f 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e49c:	e1a0000a 	mov	r0, sl
   2e4a0:	e30e1254 	movw	r1, #57940	@ 0xe254
   2e4a4:	e3401003 	movt	r1, #3
   2e4a8:	eb001b1b 	bl	3511c <strcmp>
   2e4ac:	e3500000 	cmp	r0, #0
   2e4b0:	1a000007 	bne	2e4d4 <CKernelOptions::CKernelOptions()+0x2e4>
   2e4b4:	e1a0000b 	mov	r0, fp
   2e4b8:	e30e1260 	movw	r1, #57952	@ 0xe260
   2e4bc:	e3401003 	movt	r1, #3
   2e4c0:	eb001b15 	bl	3511c <strcmp>
   2e4c4:	e3500000 	cmp	r0, #0
   2e4c8:	03a03001 	moveq	r3, #1
   2e4cc:	05c43839 	strbeq	r3, [r4, #2105]	@ 0x839
   2e4d0:	eaffff81 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e4d4:	e1a0000a 	mov	r0, sl
   2e4d8:	e30e1268 	movw	r1, #57960	@ 0xe268
   2e4dc:	e3401003 	movt	r1, #3
   2e4e0:	eb001b0d 	bl	3511c <strcmp>
   2e4e4:	e2503000 	subs	r3, r0, #0
   2e4e8:	e58d300c 	str	r3, [sp, #12]
   2e4ec:	1a000007 	bne	2e510 <CKernelOptions::CKernelOptions()+0x320>
   2e4f0:	e2840e83 	add	r0, r4, #2096	@ 0x830
   2e4f4:	e1a0100b 	mov	r1, fp
   2e4f8:	e280000a 	add	r0, r0, #10
   2e4fc:	e3a02013 	mov	r2, #19
   2e500:	eb001ba6 	bl	353a0 <strncpy>
   2e504:	e59d300c 	ldr	r3, [sp, #12]
   2e508:	e5c4384d 	strb	r3, [r4, #2125]	@ 0x84d
   2e50c:	eaffff72 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e510:	e1a0000a 	mov	r0, sl
   2e514:	e30e1274 	movw	r1, #57972	@ 0xe274
   2e518:	e3401003 	movt	r1, #3
   2e51c:	eb001afe 	bl	3511c <strcmp>
   2e520:	e3500000 	cmp	r0, #0
   2e524:	1a000007 	bne	2e548 <CKernelOptions::CKernelOptions()+0x358>
   2e528:	e1a0000b 	mov	r0, fp
   2e52c:	e3a02002 	mov	r2, #2
   2e530:	e2841e85 	add	r1, r4, #2128	@ 0x850
   2e534:	ebfffef8 	bl	2e11c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   2e538:	e2503000 	subs	r3, r0, #0
   2e53c:	05843850 	streq	r3, [r4, #2128]	@ 0x850
   2e540:	05843854 	streq	r3, [r4, #2132]	@ 0x854
   2e544:	eaffff64 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e548:	e1a0000a 	mov	r0, sl
   2e54c:	e30e1288 	movw	r1, #57992	@ 0xe288
   2e550:	e3401003 	movt	r1, #3
   2e554:	eb001af0 	bl	3511c <strcmp>
   2e558:	e2503000 	subs	r3, r0, #0
   2e55c:	e58d300c 	str	r3, [sp, #12]
   2e560:	1a000007 	bne	2e584 <CKernelOptions::CKernelOptions()+0x394>
   2e564:	e2840e85 	add	r0, r4, #2128	@ 0x850
   2e568:	e1a0100b 	mov	r1, fp
   2e56c:	e2800008 	add	r0, r0, #8
   2e570:	e3a02013 	mov	r2, #19
   2e574:	eb001b89 	bl	353a0 <strncpy>
   2e578:	e59d300c 	ldr	r3, [sp, #12]
   2e57c:	e5c4386b 	strb	r3, [r4, #2155]	@ 0x86b
   2e580:	eaffff55 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e584:	e1a0000a 	mov	r0, sl
   2e588:	e30e1294 	movw	r1, #58004	@ 0xe294
   2e58c:	e3401003 	movt	r1, #3
   2e590:	eb001ae1 	bl	3511c <strcmp>
   2e594:	e3500000 	cmp	r0, #0
   2e598:	1a000009 	bne	2e5c4 <CKernelOptions::CKernelOptions()+0x3d4>
   2e59c:	e1a0000b 	mov	r0, fp
   2e5a0:	ebfffeac 	bl	2e058 <CKernelOptions::GetDecimal(char const*)>
   2e5a4:	e3500018 	cmp	r0, #24
   2e5a8:	8affff4b 	bhi	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e5ac:	e3a02007 	mov	r2, #7
   2e5b0:	e3402101 	movt	r2, #257	@ 0x101
   2e5b4:	e1a02032 	lsr	r2, r2, r0
   2e5b8:	e3120001 	tst	r2, #1
   2e5bc:	1584086c 	strne	r0, [r4, #2156]	@ 0x86c
   2e5c0:	eaffff45 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e5c4:	e1a0000a 	mov	r0, sl
   2e5c8:	e30e12a0 	movw	r1, #58016	@ 0xe2a0
   2e5cc:	e3401003 	movt	r1, #3
   2e5d0:	eb001ad1 	bl	3511c <strcmp>
   2e5d4:	e3500000 	cmp	r0, #0
   2e5d8:	1a000007 	bne	2e5fc <CKernelOptions::CKernelOptions()+0x40c>
   2e5dc:	e1a0000b 	mov	r0, fp
   2e5e0:	e30e1260 	movw	r1, #57952	@ 0xe260
   2e5e4:	e3401003 	movt	r1, #3
   2e5e8:	eb001acb 	bl	3511c <strcmp>
   2e5ec:	e3500000 	cmp	r0, #0
   2e5f0:	03a03001 	moveq	r3, #1
   2e5f4:	05c43870 	strbeq	r3, [r4, #2160]	@ 0x870
   2e5f8:	eaffff37 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e5fc:	e1a0000a 	mov	r0, sl
   2e600:	e30e12a8 	movw	r1, #58024	@ 0xe2a8
   2e604:	e3401003 	movt	r1, #3
   2e608:	eb001ac3 	bl	3511c <strcmp>
   2e60c:	e3500000 	cmp	r0, #0
   2e610:	1a000005 	bne	2e62c <CKernelOptions::CKernelOptions()+0x43c>
   2e614:	e1a0000b 	mov	r0, fp
   2e618:	ebfffe8e 	bl	2e058 <CKernelOptions::GetDecimal(char const*)>
   2e61c:	e2402028 	sub	r2, r0, #40	@ 0x28
   2e620:	e3520026 	cmp	r2, #38	@ 0x26
   2e624:	95840874 	strls	r0, [r4, #2164]	@ 0x874
   2e628:	eaffff2b 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e62c:	e1a0000a 	mov	r0, sl
   2e630:	e30e12b4 	movw	r1, #58036	@ 0xe2b4
   2e634:	e3401003 	movt	r1, #3
   2e638:	eb001ab7 	bl	3511c <strcmp>
   2e63c:	e3500000 	cmp	r0, #0
   2e640:	1a000005 	bne	2e65c <CKernelOptions::CKernelOptions()+0x46c>
   2e644:	e1a0000b 	mov	r0, fp
   2e648:	ebfffe82 	bl	2e058 <CKernelOptions::GetDecimal(char const*)>
   2e64c:	e2402002 	sub	r2, r0, #2
   2e650:	e3520019 	cmp	r2, #25
   2e654:	95840878 	strls	r0, [r4, #2168]	@ 0x878
   2e658:	eaffff1f 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e65c:	e1a0000a 	mov	r0, sl
   2e660:	e30e12c0 	movw	r1, #58048	@ 0xe2c0
   2e664:	e3401003 	movt	r1, #3
   2e668:	eb001aab 	bl	3511c <strcmp>
   2e66c:	e3500000 	cmp	r0, #0
   2e670:	1a000005 	bne	2e68c <CKernelOptions::CKernelOptions()+0x49c>
   2e674:	e1a0000b 	mov	r0, fp
   2e678:	e3a02004 	mov	r2, #4
   2e67c:	e2841d22 	add	r1, r4, #2176	@ 0x880
   2e680:	ebfffea5 	bl	2e11c <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   2e684:	e5c4087c 	strb	r0, [r4, #2172]	@ 0x87c
   2e688:	eaffff13 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>
   2e68c:	e3a0000c 	mov	r0, #12
   2e690:	eb001ea3 	bl	36124 <operator new(unsigned int)>
   2e694:	e58d000c 	str	r0, [sp, #12]
   2e698:	e1a0000a 	mov	r0, sl
   2e69c:	eb001a94 	bl	350f4 <strlen>
   2e6a0:	e2800001 	add	r0, r0, #1
   2e6a4:	eb001ea4 	bl	3613c <operator new[](unsigned int)>
   2e6a8:	e59d300c 	ldr	r3, [sp, #12]
   2e6ac:	e1a0100a 	mov	r1, sl
   2e6b0:	e5830004 	str	r0, [r3, #4]
   2e6b4:	eb001b2e 	bl	35374 <strcpy>
   2e6b8:	e1a0000b 	mov	r0, fp
   2e6bc:	eb001a8c 	bl	350f4 <strlen>
   2e6c0:	e2800001 	add	r0, r0, #1
   2e6c4:	eb001e9c 	bl	3613c <operator new[](unsigned int)>
   2e6c8:	e59da00c 	ldr	sl, [sp, #12]
   2e6cc:	e1a0100b 	mov	r1, fp
   2e6d0:	e58a0008 	str	r0, [sl, #8]
   2e6d4:	eb001b26 	bl	35374 <strcpy>
   2e6d8:	e5943890 	ldr	r3, [r4, #2192]	@ 0x890
   2e6dc:	e58a3000 	str	r3, [sl]
   2e6e0:	e584a890 	str	sl, [r4, #2192]	@ 0x890
   2e6e4:	eafffefc 	b	2e2dc <CKernelOptions::CKernelOptions()+0xec>

0002e6e8 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
   2e6e8:	e92d4010 	push	{r4, lr}
   2e6ec:	e1a04000 	mov	r4, r0
   2e6f0:	e3a0c000 	mov	ip, #0
   2e6f4:	e8800006 	stm	r0, {r1, r2}
   2e6f8:	e3a02001 	mov	r2, #1
   2e6fc:	e5c43008 	strb	r3, [r4, #8]
   2e700:	e3a00901 	mov	r0, #16384	@ 0x4000
   2e704:	e584c00c 	str	ip, [r4, #12]
   2e708:	e584c010 	str	ip, [r4, #16]
   2e70c:	e584c014 	str	ip, [r4, #20]
   2e710:	e584c018 	str	ip, [r4, #24]
   2e714:	e584201c 	str	r2, [r4, #28]
   2e718:	e584c0e8 	str	ip, [r4, #232]	@ 0xe8
   2e71c:	e584c0ec 	str	ip, [r4, #236]	@ 0xec
   2e720:	e58420f0 	str	r2, [r4, #240]	@ 0xf0
   2e724:	e584c0f4 	str	ip, [r4, #244]	@ 0xf4
   2e728:	e584c0f8 	str	ip, [r4, #248]	@ 0xf8
   2e72c:	eb001e82 	bl	3613c <operator new[](unsigned int)>
   2e730:	e3043154 	movw	r3, #16724	@ 0x4154
   2e734:	e3403004 	movt	r3, #4
   2e738:	e5840010 	str	r0, [r4, #16]
   2e73c:	e1a00004 	mov	r0, r4
   2e740:	e5834000 	str	r4, [r3]
   2e744:	e8bd8010 	pop	{r4, pc}

0002e748 <CLogger::~CLogger()>:
   2e748:	e3042154 	movw	r2, #16724	@ 0x4154
   2e74c:	e3402004 	movt	r2, #4
   2e750:	e92d4010 	push	{r4, lr}
   2e754:	e3a01000 	mov	r1, #0
   2e758:	e59030ec 	ldr	r3, [r0, #236]	@ 0xec
   2e75c:	e590c0e8 	ldr	ip, [r0, #232]	@ 0xe8
   2e760:	e1a04000 	mov	r4, r0
   2e764:	e5821000 	str	r1, [r2]
   2e768:	ea00000a 	b	2e798 <CLogger::~CLogger()+0x50>
   2e76c:	e7940102 	ldr	r0, [r4, r2, lsl #2]
   2e770:	e3500000 	cmp	r0, #0
   2e774:	0a000002 	beq	2e784 <CLogger::~CLogger()+0x3c>
   2e778:	eb001e81 	bl	36184 <operator delete(void*, unsigned int)>
   2e77c:	e59430ec 	ldr	r3, [r4, #236]	@ 0xec
   2e780:	e594c0e8 	ldr	ip, [r4, #232]	@ 0xe8
   2e784:	e2833001 	add	r3, r3, #1
   2e788:	e58430ec 	str	r3, [r4, #236]	@ 0xec
   2e78c:	e3530032 	cmp	r3, #50	@ 0x32
   2e790:	03a03000 	moveq	r3, #0
   2e794:	058430ec 	streq	r3, [r4, #236]	@ 0xec
   2e798:	e2832008 	add	r2, r3, #8
   2e79c:	e3a01f42 	mov	r1, #264	@ 0x108
   2e7a0:	e153000c 	cmp	r3, ip
   2e7a4:	1afffff0 	bne	2e76c <CLogger::~CLogger()+0x24>
   2e7a8:	e5940010 	ldr	r0, [r4, #16]
   2e7ac:	e3500000 	cmp	r0, #0
   2e7b0:	0a000000 	beq	2e7b8 <CLogger::~CLogger()+0x70>
   2e7b4:	eb001e6c 	bl	3616c <operator delete[](void*)>
   2e7b8:	e1a00004 	mov	r0, r4
   2e7bc:	e8bd8010 	pop	{r4, pc}

0002e7c0 <CLogger::SetNewTarget(CDevice*)>:
   2e7c0:	e580100c 	str	r1, [r0, #12]
   2e7c4:	e12fff1e 	bx	lr

0002e7c8 <CLogger::Get()>:
   2e7c8:	e92d4070 	push	{r4, r5, r6, lr}
   2e7cc:	e3045154 	movw	r5, #16724	@ 0x4154
   2e7d0:	e3405004 	movt	r5, #4
   2e7d4:	e5954000 	ldr	r4, [r5]
   2e7d8:	e3540000 	cmp	r4, #0
   2e7dc:	0a000001 	beq	2e7e8 <CLogger::Get()+0x20>
   2e7e0:	e1a00004 	mov	r0, r4
   2e7e4:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e7e8:	e3a000fc 	mov	r0, #252	@ 0xfc
   2e7ec:	eb001e4c 	bl	36124 <operator new(unsigned int)>
   2e7f0:	e1a04000 	mov	r4, r0
   2e7f4:	e3a03000 	mov	r3, #0
   2e7f8:	e3a02001 	mov	r2, #1
   2e7fc:	e3a00901 	mov	r0, #16384	@ 0x4000
   2e800:	e5843000 	str	r3, [r4]
   2e804:	e5843004 	str	r3, [r4, #4]
   2e808:	e5c42008 	strb	r2, [r4, #8]
   2e80c:	e584300c 	str	r3, [r4, #12]
   2e810:	e5843010 	str	r3, [r4, #16]
   2e814:	e5843014 	str	r3, [r4, #20]
   2e818:	e5843018 	str	r3, [r4, #24]
   2e81c:	e584201c 	str	r2, [r4, #28]
   2e820:	e58430e8 	str	r3, [r4, #232]	@ 0xe8
   2e824:	e58430ec 	str	r3, [r4, #236]	@ 0xec
   2e828:	e58420f0 	str	r2, [r4, #240]	@ 0xf0
   2e82c:	e58430f4 	str	r3, [r4, #244]	@ 0xf4
   2e830:	e58430f8 	str	r3, [r4, #248]	@ 0xf8
   2e834:	eb001e40 	bl	3613c <operator new[](unsigned int)>
   2e838:	e5854000 	str	r4, [r5]
   2e83c:	e5840010 	str	r0, [r4, #16]
   2e840:	e1a00004 	mov	r0, r4
   2e844:	e8bd8070 	pop	{r4, r5, r6, pc}

0002e848 <CLogger::Write(char const*)>:
   2e848:	e92d4070 	push	{r4, r5, r6, lr}
   2e84c:	e1a04000 	mov	r4, r0
   2e850:	e1a00001 	mov	r0, r1
   2e854:	e1a05001 	mov	r5, r1
   2e858:	eb001a25 	bl	350f4 <strlen>
   2e85c:	e594300c 	ldr	r3, [r4, #12]
   2e860:	e1a06000 	mov	r6, r0
   2e864:	e3530000 	cmp	r3, #0
   2e868:	0a000005 	beq	2e884 <CLogger::Write(char const*)+0x3c>
   2e86c:	e5932000 	ldr	r2, [r3]
   2e870:	e1a00003 	mov	r0, r3
   2e874:	e1a01005 	mov	r1, r5
   2e878:	e592300c 	ldr	r3, [r2, #12]
   2e87c:	e1a02006 	mov	r2, r6
   2e880:	e12fff33 	blx	r3
   2e884:	e594001c 	ldr	r0, [r4, #28]
   2e888:	e3500000 	cmp	r0, #0
   2e88c:	1a000021 	bne	2e918 <CLogger::Write(char const*)+0xd0>
   2e890:	e3560000 	cmp	r6, #0
   2e894:	08bd8070 	popeq	{r4, r5, r6, pc}
   2e898:	e1a0c005 	mov	ip, r5
   2e89c:	ea000002 	b	2e8ac <CLogger::Write(char const*)+0x64>
   2e8a0:	e045300c 	sub	r3, r5, ip
   2e8a4:	e1730006 	cmn	r3, r6
   2e8a8:	0a000015 	beq	2e904 <CLogger::Write(char const*)+0xbc>
   2e8ac:	e0dc30d1 	ldrsb	r3, [ip], #1
   2e8b0:	e353000d 	cmp	r3, #13
   2e8b4:	0afffff9 	beq	2e8a0 <CLogger::Write(char const*)+0x58>
   2e8b8:	e5942014 	ldr	r2, [r4, #20]
   2e8bc:	e5941010 	ldr	r1, [r4, #16]
   2e8c0:	e7c13002 	strb	r3, [r1, r2]
   2e8c4:	e5943014 	ldr	r3, [r4, #20]
   2e8c8:	e594e018 	ldr	lr, [r4, #24]
   2e8cc:	e2833001 	add	r3, r3, #1
   2e8d0:	e7ed3053 	ubfx	r3, r3, #0, #14
   2e8d4:	e5843014 	str	r3, [r4, #20]
   2e8d8:	e153000e 	cmp	r3, lr
   2e8dc:	1affffef 	bne	2e8a0 <CLogger::Write(char const*)+0x58>
   2e8e0:	e5d41008 	ldrb	r1, [r4, #8]
   2e8e4:	e2832001 	add	r2, r3, #1
   2e8e8:	e3510000 	cmp	r1, #0
   2e8ec:	0a00000d 	beq	2e928 <CLogger::Write(char const*)+0xe0>
   2e8f0:	e045300c 	sub	r3, r5, ip
   2e8f4:	e7ed2052 	ubfx	r2, r2, #0, #14
   2e8f8:	e1730006 	cmn	r3, r6
   2e8fc:	e5842018 	str	r2, [r4, #24]
   2e900:	1affffe9 	bne	2e8ac <CLogger::Write(char const*)+0x64>
   2e904:	e594301c 	ldr	r3, [r4, #28]
   2e908:	e3530000 	cmp	r3, #0
   2e90c:	08bd8070 	popeq	{r4, r5, r6, pc}
   2e910:	e8bd4070 	pop	{r4, r5, r6, lr}
   2e914:	ea002444 	b	37a2c <LeaveCritical>
   2e918:	eb002418 	bl	37980 <EnterCritical>
   2e91c:	e3560000 	cmp	r6, #0
   2e920:	1affffdc 	bne	2e898 <CLogger::Write(char const*)+0x50>
   2e924:	eafffff6 	b	2e904 <CLogger::Write(char const*)+0xbc>
   2e928:	e2433001 	sub	r3, r3, #1
   2e92c:	e7ed3053 	ubfx	r3, r3, #0, #14
   2e930:	e5843014 	str	r3, [r4, #20]
   2e934:	eafffff2 	b	2e904 <CLogger::Write(char const*)+0xbc>

0002e938 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   2e938:	e92d4070 	push	{r4, r5, r6, lr}
   2e93c:	e1a05003 	mov	r5, r3
   2e940:	e5903000 	ldr	r3, [r0]
   2e944:	e24dd0c8 	sub	sp, sp, #200	@ 0xc8
   2e948:	e1520003 	cmp	r2, r3
   2e94c:	8a000012 	bhi	2e99c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x64>
   2e950:	e3a03000 	mov	r3, #0
   2e954:	e1a04000 	mov	r4, r0
   2e958:	e3520000 	cmp	r2, #0
   2e95c:	e5cd3000 	strb	r3, [sp]
   2e960:	0a00000f 	beq	2e9a4 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
   2e964:	e1a0000d 	mov	r0, sp
   2e968:	eb001a99 	bl	353d4 <strcat>
   2e96c:	e59f1098 	ldr	r1, [pc, #152]	@ 2ea0c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   2e970:	e1a0000d 	mov	r0, sp
   2e974:	eb001a96 	bl	353d4 <strcat>
   2e978:	e1a01005 	mov	r1, r5
   2e97c:	e1a0000d 	mov	r0, sp
   2e980:	eb001a93 	bl	353d4 <strcat>
   2e984:	e59f1084 	ldr	r1, [pc, #132]	@ 2ea10 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   2e988:	e1a0000d 	mov	r0, sp
   2e98c:	eb001a90 	bl	353d4 <strcat>
   2e990:	e1a0100d 	mov	r1, sp
   2e994:	e1a00004 	mov	r0, r4
   2e998:	ebffffaa 	bl	2e848 <CLogger::Write(char const*)>
   2e99c:	e28dd0c8 	add	sp, sp, #200	@ 0xc8
   2e9a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   2e9a4:	e1a06001 	mov	r6, r1
   2e9a8:	e1a0000d 	mov	r0, sp
   2e9ac:	e30213cc 	movw	r1, #9164	@ 0x23cc
   2e9b0:	e3401004 	movt	r1, #4
   2e9b4:	eb001a6e 	bl	35374 <strcpy>
   2e9b8:	e1a01006 	mov	r1, r6
   2e9bc:	e1a0000d 	mov	r0, sp
   2e9c0:	eb001a83 	bl	353d4 <strcat>
   2e9c4:	e59f1040 	ldr	r1, [pc, #64]	@ 2ea0c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd4>
   2e9c8:	e1a0000d 	mov	r0, sp
   2e9cc:	eb001a80 	bl	353d4 <strcat>
   2e9d0:	e1a01005 	mov	r1, r5
   2e9d4:	e1a0000d 	mov	r0, sp
   2e9d8:	eb001a7d 	bl	353d4 <strcat>
   2e9dc:	e59f1030 	ldr	r1, [pc, #48]	@ 2ea14 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xdc>
   2e9e0:	e1a0000d 	mov	r0, sp
   2e9e4:	eb001a7a 	bl	353d4 <strcat>
   2e9e8:	e59f1020 	ldr	r1, [pc, #32]	@ 2ea10 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xd8>
   2e9ec:	e1a0000d 	mov	r0, sp
   2e9f0:	eb001a77 	bl	353d4 <strcat>
   2e9f4:	e1a0100d 	mov	r1, sp
   2e9f8:	e1a00004 	mov	r0, r4
   2e9fc:	ebffff91 	bl	2e848 <CLogger::Write(char const*)>
   2ea00:	e3a000ff 	mov	r0, #255	@ 0xff
   2ea04:	eb0015d6 	bl	34164 <set_qemu_exit_status>
   2ea08:	eb0015d6 	bl	34168 <halt>
   2ea0c:	000423d4 	.word	0x000423d4
   2ea10:	000423e0 	.word	0x000423e0
   2ea14:	000423d8 	.word	0x000423d8

0002ea18 <CLogger::Read(void*, unsigned int, bool)>:
   2ea18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ea1c:	e1a04000 	mov	r4, r0
   2ea20:	e590001c 	ldr	r0, [r0, #28]
   2ea24:	e1a05001 	mov	r5, r1
   2ea28:	e1a07002 	mov	r7, r2
   2ea2c:	e1a08003 	mov	r8, r3
   2ea30:	e3500000 	cmp	r0, #0
   2ea34:	1a00001a 	bne	2eaa4 <CLogger::Read(void*, unsigned int, bool)+0x8c>
   2ea38:	e594c018 	ldr	ip, [r4, #24]
   2ea3c:	e5943014 	ldr	r3, [r4, #20]
   2ea40:	e153000c 	cmp	r3, ip
   2ea44:	0a00001f 	beq	2eac8 <CLogger::Read(void*, unsigned int, bool)+0xb0>
   2ea48:	e1a09007 	mov	r9, r7
   2ea4c:	e3a0e000 	mov	lr, #0
   2ea50:	ea000007 	b	2ea74 <CLogger::Read(void*, unsigned int, bool)+0x5c>
   2ea54:	e5946010 	ldr	r6, [r4, #16]
   2ea58:	e28ee001 	add	lr, lr, #1
   2ea5c:	e19660dc 	ldrsb	r6, [r6, ip]
   2ea60:	e7edc051 	ubfx	ip, r1, #0, #14
   2ea64:	e4c56001 	strb	r6, [r5], #1
   2ea68:	e5941014 	ldr	r1, [r4, #20]
   2ea6c:	e151000c 	cmp	r1, ip
   2ea70:	0a000009 	beq	2ea9c <CLogger::Read(void*, unsigned int, bool)+0x84>
   2ea74:	e28c1001 	add	r1, ip, #1
   2ea78:	e15e0007 	cmp	lr, r7
   2ea7c:	1afffff4 	bne	2ea54 <CLogger::Read(void*, unsigned int, bool)+0x3c>
   2ea80:	e594301c 	ldr	r3, [r4, #28]
   2ea84:	e3580000 	cmp	r8, #0
   2ea88:	1584c018 	strne	ip, [r4, #24]
   2ea8c:	e3530000 	cmp	r3, #0
   2ea90:	1a00000e 	bne	2ead0 <CLogger::Read(void*, unsigned int, bool)+0xb8>
   2ea94:	e1a00009 	mov	r0, r9
   2ea98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ea9c:	e1a0900e 	mov	r9, lr
   2eaa0:	eafffff6 	b	2ea80 <CLogger::Read(void*, unsigned int, bool)+0x68>
   2eaa4:	eb0023b5 	bl	37980 <EnterCritical>
   2eaa8:	e594c018 	ldr	ip, [r4, #24]
   2eaac:	e5943014 	ldr	r3, [r4, #20]
   2eab0:	e153000c 	cmp	r3, ip
   2eab4:	1affffe3 	bne	2ea48 <CLogger::Read(void*, unsigned int, bool)+0x30>
   2eab8:	e594301c 	ldr	r3, [r4, #28]
   2eabc:	e3530000 	cmp	r3, #0
   2eac0:	0a000000 	beq	2eac8 <CLogger::Read(void*, unsigned int, bool)+0xb0>
   2eac4:	eb0023d8 	bl	37a2c <LeaveCritical>
   2eac8:	e3e09000 	mvn	r9, #0
   2eacc:	eafffff0 	b	2ea94 <CLogger::Read(void*, unsigned int, bool)+0x7c>
   2ead0:	eb0023d5 	bl	37a2c <LeaveCritical>
   2ead4:	e1a00009 	mov	r0, r9
   2ead8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002eadc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   2eadc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2eae0:	e1a05000 	mov	r5, r0
   2eae4:	e3a00f42 	mov	r0, #264	@ 0x108
   2eae8:	e24dd008 	sub	sp, sp, #8
   2eaec:	e1a06003 	mov	r6, r3
   2eaf0:	e1a07002 	mov	r7, r2
   2eaf4:	e1a08001 	mov	r8, r1
   2eaf8:	eb001d89 	bl	36124 <operator new(unsigned int)>
   2eafc:	e1a04000 	mov	r4, r0
   2eb00:	e1a01008 	mov	r1, r8
   2eb04:	e3a02032 	mov	r2, #50	@ 0x32
   2eb08:	e4c07001 	strb	r7, [r0], #1
   2eb0c:	eb001a23 	bl	353a0 <strncpy>
   2eb10:	e1a01006 	mov	r1, r6
   2eb14:	e3a020c8 	mov	r2, #200	@ 0xc8
   2eb18:	e3a06000 	mov	r6, #0
   2eb1c:	e2840033 	add	r0, r4, #51	@ 0x33
   2eb20:	e5c46032 	strb	r6, [r4, #50]	@ 0x32
   2eb24:	eb001a1d 	bl	353a0 <strncpy>
   2eb28:	e5950004 	ldr	r0, [r5, #4]
   2eb2c:	e5c460fa 	strb	r6, [r4, #250]	@ 0xfa
   2eb30:	e1500006 	cmp	r0, r6
   2eb34:	0a000004 	beq	2eb4c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x70>
   2eb38:	e28d2004 	add	r2, sp, #4
   2eb3c:	e1a0100d 	mov	r1, sp
   2eb40:	eb001670 	bl	34508 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   2eb44:	e1500006 	cmp	r0, r6
   2eb48:	1a000037 	bne	2ec2c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x150>
   2eb4c:	e3a03000 	mov	r3, #0
   2eb50:	e58430fc 	str	r3, [r4, #252]	@ 0xfc
   2eb54:	e1a00003 	mov	r0, r3
   2eb58:	e5843100 	str	r3, [r4, #256]	@ 0x100
   2eb5c:	e59520f0 	ldr	r2, [r5, #240]	@ 0xf0
   2eb60:	e5840104 	str	r0, [r4, #260]	@ 0x104
   2eb64:	e3520000 	cmp	r2, #0
   2eb68:	1a00002b 	bne	2ec1c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x140>
   2eb6c:	e59530e8 	ldr	r3, [r5, #232]	@ 0xe8
   2eb70:	e3530031 	cmp	r3, #49	@ 0x31
   2eb74:	e2831001 	add	r1, r3, #1
   2eb78:	e0850103 	add	r0, r5, r3, lsl #2
   2eb7c:	e5804020 	str	r4, [r0, #32]
   2eb80:	e595c0ec 	ldr	ip, [r5, #236]	@ 0xec
   2eb84:	0a000019 	beq	2ebf0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
   2eb88:	e151000c 	cmp	r1, ip
   2eb8c:	e58510e8 	str	r1, [r5, #232]	@ 0xe8
   2eb90:	0a000007 	beq	2ebb4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
   2eb94:	e3520000 	cmp	r2, #0
   2eb98:	1a000012 	bne	2ebe8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x10c>
   2eb9c:	e59530f4 	ldr	r3, [r5, #244]	@ 0xf4
   2eba0:	e3530000 	cmp	r3, #0
   2eba4:	0a000000 	beq	2ebac <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd0>
   2eba8:	e12fff33 	blx	r3
   2ebac:	e28dd008 	add	sp, sp, #8
   2ebb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ebb4:	e3530030 	cmp	r3, #48	@ 0x30
   2ebb8:	e5904024 	ldr	r4, [r0, #36]	@ 0x24
   2ebbc:	12833002 	addne	r3, r3, #2
   2ebc0:	03a03000 	moveq	r3, #0
   2ebc4:	e3520000 	cmp	r2, #0
   2ebc8:	e58530ec 	str	r3, [r5, #236]	@ 0xec
   2ebcc:	1a000010 	bne	2ec14 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   2ebd0:	e3540000 	cmp	r4, #0
   2ebd4:	0afffff0 	beq	2eb9c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   2ebd8:	e3a01f42 	mov	r1, #264	@ 0x108
   2ebdc:	e1a00004 	mov	r0, r4
   2ebe0:	eb001d67 	bl	36184 <operator delete(void*, unsigned int)>
   2ebe4:	eaffffec 	b	2eb9c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   2ebe8:	eb00238f 	bl	37a2c <LeaveCritical>
   2ebec:	eaffffea 	b	2eb9c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
   2ebf0:	e3a03000 	mov	r3, #0
   2ebf4:	e58530e8 	str	r3, [r5, #232]	@ 0xe8
   2ebf8:	e15c0003 	cmp	ip, r3
   2ebfc:	1affffe4 	bne	2eb94 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb8>
   2ec00:	e3a03001 	mov	r3, #1
   2ec04:	e5954020 	ldr	r4, [r5, #32]
   2ec08:	e3520000 	cmp	r2, #0
   2ec0c:	e58530ec 	str	r3, [r5, #236]	@ 0xec
   2ec10:	0affffee 	beq	2ebd0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
   2ec14:	eb002384 	bl	37a2c <LeaveCritical>
   2ec18:	eaffffec 	b	2ebd0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf4>
   2ec1c:	e1a00002 	mov	r0, r2
   2ec20:	eb002356 	bl	37980 <EnterCritical>
   2ec24:	e59520f0 	ldr	r2, [r5, #240]	@ 0xf0
   2ec28:	eaffffcf 	b	2eb6c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x90>
   2ec2c:	e59d3004 	ldr	r3, [sp, #4]
   2ec30:	e3012759 	movw	r2, #5977	@ 0x1759
   2ec34:	e34d21b7 	movt	r2, #53687	@ 0xd1b7
   2ec38:	e59d1000 	ldr	r1, [sp]
   2ec3c:	e5950004 	ldr	r0, [r5, #4]
   2ec40:	e58410fc 	str	r1, [r4, #252]	@ 0xfc
   2ec44:	e0832392 	umull	r2, r3, r2, r3
   2ec48:	e1a036a3 	lsr	r3, r3, #13
   2ec4c:	e5843100 	str	r3, [r4, #256]	@ 0x100
   2ec50:	eb0015fa 	bl	34440 <CTimer::GetTimeZone() const>
   2ec54:	eaffffc0 	b	2eb5c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x80>

0002ec58 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   2ec58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   2ec5c:	e1a04000 	mov	r4, r0
   2ec60:	e59000f0 	ldr	r0, [r0, #240]	@ 0xf0
   2ec64:	e1a06001 	mov	r6, r1
   2ec68:	e1a08002 	mov	r8, r2
   2ec6c:	e1a07003 	mov	r7, r3
   2ec70:	e3500000 	cmp	r0, #0
   2ec74:	1a00001e 	bne	2ecf4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x9c>
   2ec78:	e594c0ec 	ldr	ip, [r4, #236]	@ 0xec
   2ec7c:	e59430e8 	ldr	r3, [r4, #232]	@ 0xe8
   2ec80:	e153000c 	cmp	r3, ip
   2ec84:	0a00002e 	beq	2ed44 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
   2ec88:	e35c0031 	cmp	ip, #49	@ 0x31
   2ec8c:	128c0001 	addne	r0, ip, #1
   2ec90:	e28cc008 	add	ip, ip, #8
   2ec94:	e794510c 	ldr	r5, [r4, ip, lsl #2]
   2ec98:	e58400ec 	str	r0, [r4, #236]	@ 0xec
   2ec9c:	e1a01005 	mov	r1, r5
   2eca0:	e1a00008 	mov	r0, r8
   2eca4:	e4d13001 	ldrb	r3, [r1], #1
   2eca8:	e5c63000 	strb	r3, [r6]
   2ecac:	eb0019b0 	bl	35374 <strcpy>
   2ecb0:	e2851033 	add	r1, r5, #51	@ 0x33
   2ecb4:	e1a00007 	mov	r0, r7
   2ecb8:	eb0019ad 	bl	35374 <strcpy>
   2ecbc:	e59d1018 	ldr	r1, [sp, #24]
   2ecc0:	e59520fc 	ldr	r2, [r5, #252]	@ 0xfc
   2ecc4:	e1a00005 	mov	r0, r5
   2ecc8:	e5953100 	ldr	r3, [r5, #256]	@ 0x100
   2eccc:	e5812000 	str	r2, [r1]
   2ecd0:	e3a01f42 	mov	r1, #264	@ 0x108
   2ecd4:	e59d201c 	ldr	r2, [sp, #28]
   2ecd8:	e5823000 	str	r3, [r2]
   2ecdc:	e59d2020 	ldr	r2, [sp, #32]
   2ece0:	e5953104 	ldr	r3, [r5, #260]	@ 0x104
   2ece4:	e5823000 	str	r3, [r2]
   2ece8:	eb001d25 	bl	36184 <operator delete(void*, unsigned int)>
   2ecec:	e3a00001 	mov	r0, #1
   2ecf0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   2ecf4:	eb002321 	bl	37980 <EnterCritical>
   2ecf8:	e59430ec 	ldr	r3, [r4, #236]	@ 0xec
   2ecfc:	e59420e8 	ldr	r2, [r4, #232]	@ 0xe8
   2ed00:	e1520003 	cmp	r2, r3
   2ed04:	0a00000a 	beq	2ed34 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xdc>
   2ed08:	e2832008 	add	r2, r3, #8
   2ed0c:	e3530031 	cmp	r3, #49	@ 0x31
   2ed10:	12833001 	addne	r3, r3, #1
   2ed14:	03a03000 	moveq	r3, #0
   2ed18:	e7945102 	ldr	r5, [r4, r2, lsl #2]
   2ed1c:	e58430ec 	str	r3, [r4, #236]	@ 0xec
   2ed20:	e59430f0 	ldr	r3, [r4, #240]	@ 0xf0
   2ed24:	e3530000 	cmp	r3, #0
   2ed28:	0affffdb 	beq	2ec9c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x44>
   2ed2c:	eb00233e 	bl	37a2c <LeaveCritical>
   2ed30:	eaffffd9 	b	2ec9c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x44>
   2ed34:	e59430f0 	ldr	r3, [r4, #240]	@ 0xf0
   2ed38:	e3530000 	cmp	r3, #0
   2ed3c:	0a000000 	beq	2ed44 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xec>
   2ed40:	eb002339 	bl	37a2c <LeaveCritical>
   2ed44:	e3a00000 	mov	r0, #0
   2ed48:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0002ed4c <CLogger::RegisterEventNotificationHandler(void (*)())>:
   2ed4c:	e58010f4 	str	r1, [r0, #244]	@ 0xf4
   2ed50:	e12fff1e 	bx	lr

0002ed54 <CLogger::RegisterPanicHandler(void (*)())>:
   2ed54:	e58010f8 	str	r1, [r0, #248]	@ 0xf8
   2ed58:	e12fff1e 	bx	lr

0002ed5c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   2ed5c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   2ed60:	e1a06003 	mov	r6, r3
   2ed64:	e1a04000 	mov	r4, r0
   2ed68:	e24dd024 	sub	sp, sp, #36	@ 0x24
   2ed6c:	e1a05002 	mov	r5, r2
   2ed70:	e1a0000d 	mov	r0, sp
   2ed74:	e1a07001 	mov	r7, r1
   2ed78:	eb000f31 	bl	32a44 <CString::CString()>
   2ed7c:	e1a01006 	mov	r1, r6
   2ed80:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
   2ed84:	e1a0000d 	mov	r0, sp
   2ed88:	eb001184 	bl	333a0 <CString::FormatV(char const*, std::__va_list)>
   2ed8c:	e1a0000d 	mov	r0, sp
   2ed90:	eb000f63 	bl	32b24 <CString::operator char const*() const>
   2ed94:	e1a02005 	mov	r2, r5
   2ed98:	e1a03000 	mov	r3, r0
   2ed9c:	e1a01007 	mov	r1, r7
   2eda0:	e1a00004 	mov	r0, r4
   2eda4:	ebffff4c 	bl	2eadc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   2eda8:	e5943000 	ldr	r3, [r4]
   2edac:	e1550003 	cmp	r5, r3
   2edb0:	8a00002b 	bhi	2ee64 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x108>
   2edb4:	e28d0010 	add	r0, sp, #16
   2edb8:	eb000f21 	bl	32a44 <CString::CString()>
   2edbc:	e3550000 	cmp	r5, #0
   2edc0:	0a00002b 	beq	2ee74 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x118>
   2edc4:	e5940004 	ldr	r0, [r4, #4]
   2edc8:	e3500000 	cmp	r0, #0
   2edcc:	0a00000d 	beq	2ee08 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   2edd0:	eb001637 	bl	346b4 <CTimer::GetTimeString()>
   2edd4:	e2506000 	subs	r6, r0, #0
   2edd8:	0a00000a 	beq	2ee08 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   2eddc:	eb000f50 	bl	32b24 <CString::operator char const*() const>
   2ede0:	e1a01000 	mov	r1, r0
   2ede4:	e28d0010 	add	r0, sp, #16
   2ede8:	eb000f8f 	bl	32c2c <CString::Append(char const*)>
   2edec:	e28d0010 	add	r0, sp, #16
   2edf0:	e59f10e4 	ldr	r1, [pc, #228]	@ 2eedc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x180>
   2edf4:	eb000f8c 	bl	32c2c <CString::Append(char const*)>
   2edf8:	e5963000 	ldr	r3, [r6]
   2edfc:	e1a00006 	mov	r0, r6
   2ee00:	e5933004 	ldr	r3, [r3, #4]
   2ee04:	e12fff33 	blx	r3
   2ee08:	e1a01007 	mov	r1, r7
   2ee0c:	e28d0010 	add	r0, sp, #16
   2ee10:	eb000f85 	bl	32c2c <CString::Append(char const*)>
   2ee14:	e59f10c4 	ldr	r1, [pc, #196]	@ 2eee0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x184>
   2ee18:	e28d0010 	add	r0, sp, #16
   2ee1c:	eb000f82 	bl	32c2c <CString::Append(char const*)>
   2ee20:	e1a0000d 	mov	r0, sp
   2ee24:	eb000f3e 	bl	32b24 <CString::operator char const*() const>
   2ee28:	e1a01000 	mov	r1, r0
   2ee2c:	e28d0010 	add	r0, sp, #16
   2ee30:	eb000f7d 	bl	32c2c <CString::Append(char const*)>
   2ee34:	e3550000 	cmp	r5, #0
   2ee38:	0a000015 	beq	2ee94 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x138>
   2ee3c:	e59f10a0 	ldr	r1, [pc, #160]	@ 2eee4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
   2ee40:	e28d0010 	add	r0, sp, #16
   2ee44:	eb000f78 	bl	32c2c <CString::Append(char const*)>
   2ee48:	e28d0010 	add	r0, sp, #16
   2ee4c:	eb000f34 	bl	32b24 <CString::operator char const*() const>
   2ee50:	e1a01000 	mov	r1, r0
   2ee54:	e1a00004 	mov	r0, r4
   2ee58:	ebfffe7a 	bl	2e848 <CLogger::Write(char const*)>
   2ee5c:	e28d0010 	add	r0, sp, #16
   2ee60:	eb000ec4 	bl	32978 <CString::~CString()>
   2ee64:	e1a0000d 	mov	r0, sp
   2ee68:	eb000ec2 	bl	32978 <CString::~CString()>
   2ee6c:	e28dd024 	add	sp, sp, #36	@ 0x24
   2ee70:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   2ee74:	e28d0010 	add	r0, sp, #16
   2ee78:	e30213cc 	movw	r1, #9164	@ 0x23cc
   2ee7c:	e3401004 	movt	r1, #4
   2ee80:	eb000f2d 	bl	32b3c <CString::operator=(char const*)>
   2ee84:	e5940004 	ldr	r0, [r4, #4]
   2ee88:	e3500000 	cmp	r0, #0
   2ee8c:	1affffcf 	bne	2edd0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x74>
   2ee90:	eaffffdc 	b	2ee08 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xac>
   2ee94:	e59f104c 	ldr	r1, [pc, #76]	@ 2eee8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x18c>
   2ee98:	e28d0010 	add	r0, sp, #16
   2ee9c:	eb000f62 	bl	32c2c <CString::Append(char const*)>
   2eea0:	e59f103c 	ldr	r1, [pc, #60]	@ 2eee4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
   2eea4:	e28d0010 	add	r0, sp, #16
   2eea8:	eb000f5f 	bl	32c2c <CString::Append(char const*)>
   2eeac:	e28d0010 	add	r0, sp, #16
   2eeb0:	eb000f1b 	bl	32b24 <CString::operator char const*() const>
   2eeb4:	e1a01000 	mov	r1, r0
   2eeb8:	e1a00004 	mov	r0, r4
   2eebc:	ebfffe61 	bl	2e848 <CLogger::Write(char const*)>
   2eec0:	e59430f8 	ldr	r3, [r4, #248]	@ 0xf8
   2eec4:	e3530000 	cmp	r3, #0
   2eec8:	0a000000 	beq	2eed0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x174>
   2eecc:	e12fff33 	blx	r3
   2eed0:	e3a000ff 	mov	r0, #255	@ 0xff
   2eed4:	eb0014a2 	bl	34164 <set_qemu_exit_status>
   2eed8:	eb0014a2 	bl	34168 <halt>
   2eedc:	000423e4 	.word	0x000423e4
   2eee0:	000423d4 	.word	0x000423d4
   2eee4:	000423e0 	.word	0x000423e0
   2eee8:	000423d8 	.word	0x000423d8

0002eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   2eeec:	e52d3004 	push	{r3}		@ (str r3, [sp, #-4]!)
   2eef0:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   2eef4:	e24dd010 	sub	sp, sp, #16
   2eef8:	e28dc018 	add	ip, sp, #24
   2eefc:	e59d3014 	ldr	r3, [sp, #20]
   2ef00:	e58dc000 	str	ip, [sp]
   2ef04:	e58dc00c 	str	ip, [sp, #12]
   2ef08:	ebffff93 	bl	2ed5c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   2ef0c:	e28dd010 	add	sp, sp, #16
   2ef10:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
   2ef14:	e28dd004 	add	sp, sp, #4
   2ef18:	e12fff1e 	bx	lr

0002ef1c <CLogger::Initialize(CDevice*)>:
   2ef1c:	e92d4010 	push	{r4, lr}
   2ef20:	e1a04000 	mov	r4, r0
   2ef24:	e24dd008 	sub	sp, sp, #8
   2ef28:	e580100c 	str	r1, [r0, #12]
   2ef2c:	eb000235 	bl	2f808 <CMachineInfo::Get()>
   2ef30:	eb000131 	bl	2f3fc <CMachineInfo::GetMachineName() const>
   2ef34:	e30213cc 	movw	r1, #9164	@ 0x23cc
   2ef38:	e3401004 	movt	r1, #4
   2ef3c:	e1a0c000 	mov	ip, r0
   2ef40:	e281301c 	add	r3, r1, #28
   2ef44:	e1a00004 	mov	r0, r4
   2ef48:	e58dc004 	str	ip, [sp, #4]
   2ef4c:	e3a02003 	mov	r2, #3
   2ef50:	e2811034 	add	r1, r1, #52	@ 0x34
   2ef54:	e304c174 	movw	ip, #16756	@ 0x4174
   2ef58:	e340c004 	movt	ip, #4
   2ef5c:	e58dc000 	str	ip, [sp]
   2ef60:	ebffffe1 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   2ef64:	e3a00001 	mov	r0, #1
   2ef68:	e28dd008 	add	sp, sp, #8
   2ef6c:	e8bd8010 	pop	{r4, pc}

0002ef70 <CMachineInfo::CMachineInfo()>:
   2ef70:	e92d4830 	push	{r4, r5, fp, lr}
   2ef74:	e28db00c 	add	fp, sp, #12
   2ef78:	e24dd048 	sub	sp, sp, #72	@ 0x48
   2ef7c:	e50b0048 	str	r0, [fp, #-72]	@ 0xffffffb8
   2ef80:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2ef84:	e3a02000 	mov	r2, #0
   2ef88:	e5832000 	str	r2, [r3]
   2ef8c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2ef90:	e3a02014 	mov	r2, #20
   2ef94:	e5c32008 	strb	r2, [r3, #8]
   2ef98:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2ef9c:	e3a02000 	mov	r2, #0
   2efa0:	e5832010 	str	r2, [r3, #16]
   2efa4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2efa8:	e3a02000 	mov	r2, #0
   2efac:	e5832018 	str	r2, [r3, #24]
   2efb0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2efb4:	e3a02004 	mov	r2, #4
   2efb8:	e5c32020 	strb	r2, [r3, #32]
   2efbc:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2efc0:	e3a02000 	mov	r2, #0
   2efc4:	e5832028 	str	r2, [r3, #40]	@ 0x28
   2efc8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2efcc:	e3012f35 	movw	r2, #7989	@ 0x1f35
   2efd0:	e1c323b0 	strh	r2, [r3, #48]	@ 0x30
   2efd4:	e3043158 	movw	r3, #16728	@ 0x4158
   2efd8:	e3403004 	movt	r3, #4
   2efdc:	e5933000 	ldr	r3, [r3]
   2efe0:	e3530000 	cmp	r3, #0
   2efe4:	0a000025 	beq	2f080 <CMachineInfo::CMachineInfo()+0x110>
   2efe8:	e3043158 	movw	r3, #16728	@ 0x4158
   2efec:	e3403004 	movt	r3, #4
   2eff0:	e5933000 	ldr	r3, [r3]
   2eff4:	e5932000 	ldr	r2, [r3]
   2eff8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2effc:	e5832000 	str	r2, [r3]
   2f000:	e3043158 	movw	r3, #16728	@ 0x4158
   2f004:	e3403004 	movt	r3, #4
   2f008:	e5933000 	ldr	r3, [r3]
   2f00c:	e5d32008 	ldrb	r2, [r3, #8]
   2f010:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f014:	e5c32008 	strb	r2, [r3, #8]
   2f018:	e3043158 	movw	r3, #16728	@ 0x4158
   2f01c:	e3403004 	movt	r3, #4
   2f020:	e5933000 	ldr	r3, [r3]
   2f024:	e5932010 	ldr	r2, [r3, #16]
   2f028:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f02c:	e5832010 	str	r2, [r3, #16]
   2f030:	e3043158 	movw	r3, #16728	@ 0x4158
   2f034:	e3403004 	movt	r3, #4
   2f038:	e5933000 	ldr	r3, [r3]
   2f03c:	e5932018 	ldr	r2, [r3, #24]
   2f040:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f044:	e5832018 	str	r2, [r3, #24]
   2f048:	e3043158 	movw	r3, #16728	@ 0x4158
   2f04c:	e3403004 	movt	r3, #4
   2f050:	e5933000 	ldr	r3, [r3]
   2f054:	e5d32020 	ldrb	r2, [r3, #32]
   2f058:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f05c:	e5c32020 	strb	r2, [r3, #32]
   2f060:	e3043158 	movw	r3, #16728	@ 0x4158
   2f064:	e3403004 	movt	r3, #4
   2f068:	e5933000 	ldr	r3, [r3]
   2f06c:	e5932028 	ldr	r2, [r3, #40]	@ 0x28
   2f070:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f074:	e5832028 	str	r2, [r3, #40]	@ 0x28
   2f078:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   2f07c:	ea0000d1 	b	2f3c8 <CMachineInfo::CMachineInfo()+0x458>
   2f080:	e3043158 	movw	r3, #16728	@ 0x4158
   2f084:	e3403004 	movt	r3, #4
   2f088:	e51b2048 	ldr	r2, [fp, #-72]	@ 0xffffffb8
   2f08c:	e5832000 	str	r2, [r3]
   2f090:	e24b3020 	sub	r3, fp, #32
   2f094:	e3a01001 	mov	r1, #1
   2f098:	e1a00003 	mov	r0, r3
   2f09c:	ebfff36f 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2f0a0:	e24b2030 	sub	r2, fp, #48	@ 0x30
   2f0a4:	e24b0020 	sub	r0, fp, #32
   2f0a8:	e3a03000 	mov	r3, #0
   2f0ac:	e58d3000 	str	r3, [sp]
   2f0b0:	e3a03010 	mov	r3, #16
   2f0b4:	e3a01001 	mov	r1, #1
   2f0b8:	e3401006 	movt	r1, #6
   2f0bc:	ebfff3b9 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2f0c0:	e1a03000 	mov	r3, r0
   2f0c4:	e3530000 	cmp	r3, #0
   2f0c8:	0a000003 	beq	2f0dc <CMachineInfo::CMachineInfo()+0x16c>
   2f0cc:	e51b3024 	ldr	r3, [fp, #-36]	@ 0xffffffdc
   2f0d0:	e6ff2073 	uxth	r2, r3
   2f0d4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f0d8:	e1c323b0 	strh	r2, [r3, #48]	@ 0x30
   2f0dc:	e24b2040 	sub	r2, fp, #64	@ 0x40
   2f0e0:	e24b0020 	sub	r0, fp, #32
   2f0e4:	e3a03000 	mov	r3, #0
   2f0e8:	e58d3000 	str	r3, [sp]
   2f0ec:	e3a03010 	mov	r3, #16
   2f0f0:	e3a01002 	mov	r1, #2
   2f0f4:	e3401001 	movt	r1, #1
   2f0f8:	ebfff3aa 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2f0fc:	e1a03000 	mov	r3, r0
   2f100:	e2233001 	eor	r3, r3, #1
   2f104:	e6ef3073 	uxtb	r3, r3
   2f108:	e3530000 	cmp	r3, #0
   2f10c:	0a000002 	beq	2f11c <CMachineInfo::CMachineInfo()+0x1ac>
   2f110:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   2f114:	e3a05000 	mov	r5, #0
   2f118:	ea0000a3 	b	2f3ac <CMachineInfo::CMachineInfo()+0x43c>
   2f11c:	e51b2034 	ldr	r2, [fp, #-52]	@ 0xffffffcc
   2f120:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f124:	e5832000 	str	r2, [r3]
   2f128:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f12c:	e5933000 	ldr	r3, [r3]
   2f130:	e2033502 	and	r3, r3, #8388608	@ 0x800000
   2f134:	e3530000 	cmp	r3, #0
   2f138:	0a000063 	beq	2f2cc <CMachineInfo::CMachineInfo()+0x35c>
   2f13c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f140:	e5933000 	ldr	r3, [r3]
   2f144:	e1a03223 	lsr	r3, r3, #4
   2f148:	e6ef3073 	uxtb	r3, r3
   2f14c:	e50b3018 	str	r3, [fp, #-24]	@ 0xffffffe8
   2f150:	e3a03000 	mov	r3, #0
   2f154:	e50b3010 	str	r3, [fp, #-16]
   2f158:	ea00000c 	b	2f190 <CMachineInfo::CMachineInfo()+0x220>
   2f15c:	e3023408 	movw	r3, #9224	@ 0x2408
   2f160:	e3403004 	movt	r3, #4
   2f164:	e51b2010 	ldr	r2, [fp, #-16]
   2f168:	e3a0100c 	mov	r1, #12
   2f16c:	e0020291 	mul	r2, r1, r2
   2f170:	e0833002 	add	r3, r3, r2
   2f174:	e5933000 	ldr	r3, [r3]
   2f178:	e51b2018 	ldr	r2, [fp, #-24]	@ 0xffffffe8
   2f17c:	e1520003 	cmp	r2, r3
   2f180:	0a000006 	beq	2f1a0 <CMachineInfo::CMachineInfo()+0x230>
   2f184:	e51b3010 	ldr	r3, [fp, #-16]
   2f188:	e2833001 	add	r3, r3, #1
   2f18c:	e50b3010 	str	r3, [fp, #-16]
   2f190:	e51b3010 	ldr	r3, [fp, #-16]
   2f194:	e3530011 	cmp	r3, #17
   2f198:	9affffef 	bls	2f15c <CMachineInfo::CMachineInfo()+0x1ec>
   2f19c:	ea000000 	b	2f1a4 <CMachineInfo::CMachineInfo()+0x234>
   2f1a0:	e320f000 	nop	{0}
   2f1a4:	e51b3010 	ldr	r3, [fp, #-16]
   2f1a8:	e3530011 	cmp	r3, #17
   2f1ac:	9a000002 	bls	2f1bc <CMachineInfo::CMachineInfo()+0x24c>
   2f1b0:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   2f1b4:	e3a05000 	mov	r5, #0
   2f1b8:	ea00007b 	b	2f3ac <CMachineInfo::CMachineInfo()+0x43c>
   2f1bc:	e3023408 	movw	r3, #9224	@ 0x2408
   2f1c0:	e3403004 	movt	r3, #4
   2f1c4:	e51b2010 	ldr	r2, [fp, #-16]
   2f1c8:	e3a0100c 	mov	r1, #12
   2f1cc:	e0020291 	mul	r2, r1, r2
   2f1d0:	e0833002 	add	r3, r3, r2
   2f1d4:	e2833004 	add	r3, r3, #4
   2f1d8:	e5d32000 	ldrb	r2, [r3]
   2f1dc:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f1e0:	e5c32008 	strb	r2, [r3, #8]
   2f1e4:	e3023408 	movw	r3, #9224	@ 0x2408
   2f1e8:	e3403004 	movt	r3, #4
   2f1ec:	e51b2010 	ldr	r2, [fp, #-16]
   2f1f0:	e3a0100c 	mov	r1, #12
   2f1f4:	e0020291 	mul	r2, r1, r2
   2f1f8:	e0833002 	add	r3, r3, r2
   2f1fc:	e2833008 	add	r3, r3, #8
   2f200:	e5932000 	ldr	r2, [r3]
   2f204:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f208:	e5832010 	str	r2, [r3, #16]
   2f20c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f210:	e5933000 	ldr	r3, [r3]
   2f214:	e203300f 	and	r3, r3, #15
   2f218:	e2832001 	add	r2, r3, #1
   2f21c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f220:	e5832018 	str	r2, [r3, #24]
   2f224:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f228:	e5933000 	ldr	r3, [r3]
   2f22c:	e1a03623 	lsr	r3, r3, #12
   2f230:	e6ef3073 	uxtb	r3, r3
   2f234:	e203300f 	and	r3, r3, #15
   2f238:	e6ef2073 	uxtb	r2, r3
   2f23c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f240:	e5c32020 	strb	r2, [r3, #32]
   2f244:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f248:	e5933000 	ldr	r3, [r3]
   2f24c:	e1a03a23 	lsr	r3, r3, #20
   2f250:	e2033007 	and	r3, r3, #7
   2f254:	e3a02c01 	mov	r2, #256	@ 0x100
   2f258:	e1a03312 	lsl	r3, r2, r3
   2f25c:	e1a02003 	mov	r2, r3
   2f260:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f264:	e5832028 	str	r2, [r3, #40]	@ 0x28
   2f268:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f26c:	e5d33020 	ldrb	r3, [r3, #32]
   2f270:	e3530003 	cmp	r3, #3
   2f274:	9a000002 	bls	2f284 <CMachineInfo::CMachineInfo()+0x314>
   2f278:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f27c:	e3a02004 	mov	r2, #4
   2f280:	e5c32020 	strb	r2, [r3, #32]
   2f284:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f288:	e5d33008 	ldrb	r3, [r3, #8]
   2f28c:	e3530003 	cmp	r3, #3
   2f290:	1a000044 	bne	2f3a8 <CMachineInfo::CMachineInfo()+0x438>
   2f294:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f298:	e5933028 	ldr	r3, [r3, #40]	@ 0x28
   2f29c:	e3530c01 	cmp	r3, #256	@ 0x100
   2f2a0:	1a000040 	bne	2f3a8 <CMachineInfo::CMachineInfo()+0x438>
   2f2a4:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f2a8:	e5933018 	ldr	r3, [r3, #24]
   2f2ac:	e3530001 	cmp	r3, #1
   2f2b0:	1a000001 	bne	2f2bc <CMachineInfo::CMachineInfo()+0x34c>
   2f2b4:	e3a02001 	mov	r2, #1
   2f2b8:	ea000000 	b	2f2c0 <CMachineInfo::CMachineInfo()+0x350>
   2f2bc:	e3a02002 	mov	r2, #2
   2f2c0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f2c4:	e5c32008 	strb	r2, [r3, #8]
   2f2c8:	ea000036 	b	2f3a8 <CMachineInfo::CMachineInfo()+0x438>
   2f2cc:	e3a03000 	mov	r3, #0
   2f2d0:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
   2f2d4:	ea00000a 	b	2f304 <CMachineInfo::CMachineInfo()+0x394>
   2f2d8:	e30234e0 	movw	r3, #9440	@ 0x24e0
   2f2dc:	e3403004 	movt	r3, #4
   2f2e0:	e51b2014 	ldr	r2, [fp, #-20]	@ 0xffffffec
   2f2e4:	e7932202 	ldr	r2, [r3, r2, lsl #4]
   2f2e8:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f2ec:	e5933000 	ldr	r3, [r3]
   2f2f0:	e1520003 	cmp	r2, r3
   2f2f4:	0a000006 	beq	2f314 <CMachineInfo::CMachineInfo()+0x3a4>
   2f2f8:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2f2fc:	e2833001 	add	r3, r3, #1
   2f300:	e50b3014 	str	r3, [fp, #-20]	@ 0xffffffec
   2f304:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2f308:	e3530010 	cmp	r3, #16
   2f30c:	9afffff1 	bls	2f2d8 <CMachineInfo::CMachineInfo()+0x368>
   2f310:	ea000000 	b	2f318 <CMachineInfo::CMachineInfo()+0x3a8>
   2f314:	e320f000 	nop	{0}
   2f318:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2f31c:	e3530010 	cmp	r3, #16
   2f320:	9a000002 	bls	2f330 <CMachineInfo::CMachineInfo()+0x3c0>
   2f324:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   2f328:	e3a05000 	mov	r5, #0
   2f32c:	ea00001e 	b	2f3ac <CMachineInfo::CMachineInfo()+0x43c>
   2f330:	e30224e0 	movw	r2, #9440	@ 0x24e0
   2f334:	e3402004 	movt	r2, #4
   2f338:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2f33c:	e1a03203 	lsl	r3, r3, #4
   2f340:	e0823003 	add	r3, r2, r3
   2f344:	e5d32004 	ldrb	r2, [r3, #4]
   2f348:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f34c:	e5c32008 	strb	r2, [r3, #8]
   2f350:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f354:	e3a02001 	mov	r2, #1
   2f358:	e5832010 	str	r2, [r3, #16]
   2f35c:	e30224e0 	movw	r2, #9440	@ 0x24e0
   2f360:	e3402004 	movt	r2, #4
   2f364:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2f368:	e1a03203 	lsl	r3, r3, #4
   2f36c:	e0823003 	add	r3, r2, r3
   2f370:	e5932008 	ldr	r2, [r3, #8]
   2f374:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f378:	e5832018 	str	r2, [r3, #24]
   2f37c:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f380:	e3a02000 	mov	r2, #0
   2f384:	e5c32020 	strb	r2, [r3, #32]
   2f388:	e30224e0 	movw	r2, #9440	@ 0x24e0
   2f38c:	e3402004 	movt	r2, #4
   2f390:	e51b3014 	ldr	r3, [fp, #-20]	@ 0xffffffec
   2f394:	e1a03203 	lsl	r3, r3, #4
   2f398:	e0823003 	add	r3, r2, r3
   2f39c:	e593200c 	ldr	r2, [r3, #12]
   2f3a0:	e51b3048 	ldr	r3, [fp, #-72]	@ 0xffffffb8
   2f3a4:	e5832028 	str	r2, [r3, #40]	@ 0x28
   2f3a8:	e3a05001 	mov	r5, #1
   2f3ac:	e24b3020 	sub	r3, fp, #32
   2f3b0:	e1a00003 	mov	r0, r3
   2f3b4:	ebfff2b0 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   2f3b8:	e3550001 	cmp	r5, #1
   2f3bc:	1a000001 	bne	2f3c8 <CMachineInfo::CMachineInfo()+0x458>
   2f3c0:	e320f000 	nop	{0}
   2f3c4:	e51b4048 	ldr	r4, [fp, #-72]	@ 0xffffffb8
   2f3c8:	e1a03004 	mov	r3, r4
   2f3cc:	e1a00003 	mov	r0, r3
   2f3d0:	e24bd00c 	sub	sp, fp, #12
   2f3d4:	e8bd8830 	pop	{r4, r5, fp, pc}

0002f3d8 <CMachineInfo::~CMachineInfo()>:
   2f3d8:	e3043158 	movw	r3, #16728	@ 0x4158
   2f3dc:	e3403004 	movt	r3, #4
   2f3e0:	e5932000 	ldr	r2, [r3]
   2f3e4:	e1520000 	cmp	r2, r0
   2f3e8:	03a02000 	moveq	r2, #0
   2f3ec:	05832000 	streq	r2, [r3]
   2f3f0:	e12fff1e 	bx	lr

0002f3f4 <CMachineInfo::GetMachineModel() const>:
   2f3f4:	e5d00008 	ldrb	r0, [r0, #8]
   2f3f8:	e12fff1e 	bx	lr

0002f3fc <CMachineInfo::GetMachineName() const>:
   2f3fc:	e5d02008 	ldrb	r2, [r0, #8]
   2f400:	e30235f0 	movw	r3, #9712	@ 0x25f0
   2f404:	e3403004 	movt	r3, #4
   2f408:	e7930102 	ldr	r0, [r3, r2, lsl #2]
   2f40c:	e12fff1e 	bx	lr

0002f410 <CMachineInfo::GetModelMajor() const>:
   2f410:	e5900010 	ldr	r0, [r0, #16]
   2f414:	e12fff1e 	bx	lr

0002f418 <CMachineInfo::GetModelRevision() const>:
   2f418:	e5900018 	ldr	r0, [r0, #24]
   2f41c:	e12fff1e 	bx	lr

0002f420 <CMachineInfo::GetSoCType() const>:
   2f420:	e5d00020 	ldrb	r0, [r0, #32]
   2f424:	e12fff1e 	bx	lr

0002f428 <CMachineInfo::GetRAMSize() const>:
   2f428:	e5900028 	ldr	r0, [r0, #40]	@ 0x28
   2f42c:	e12fff1e 	bx	lr

0002f430 <CMachineInfo::GetSoCName() const>:
   2f430:	e5d02020 	ldrb	r2, [r0, #32]
   2f434:	e30235f0 	movw	r3, #9712	@ 0x25f0
   2f438:	e3403004 	movt	r3, #4
   2f43c:	e0833102 	add	r3, r3, r2, lsl #2
   2f440:	e5930058 	ldr	r0, [r3, #88]	@ 0x58
   2f444:	e12fff1e 	bx	lr

0002f448 <CMachineInfo::GetRevisionRaw() const>:
   2f448:	e5900000 	ldr	r0, [r0]
   2f44c:	e12fff1e 	bx	lr

0002f450 <CMachineInfo::GetActLEDInfo() const>:
   2f450:	e5d02008 	ldrb	r2, [r0, #8]
   2f454:	e30235f0 	movw	r3, #9712	@ 0x25f0
   2f458:	e3403004 	movt	r3, #4
   2f45c:	e0833102 	add	r3, r3, r2, lsl #2
   2f460:	e5930070 	ldr	r0, [r3, #112]	@ 0x70
   2f464:	e12fff1e 	bx	lr

0002f468 <CMachineInfo::GetClockRate(unsigned int) const>:
   2f468:	e92d4070 	push	{r4, r5, r6, lr}
   2f46c:	e1a04001 	mov	r4, r1
   2f470:	e1a06000 	mov	r6, r0
   2f474:	e24dd028 	sub	sp, sp, #40	@ 0x28
   2f478:	e3a01000 	mov	r1, #0
   2f47c:	e28d000c 	add	r0, sp, #12
   2f480:	ebfff276 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   2f484:	e3a03014 	mov	r3, #20
   2f488:	e3a02004 	mov	r2, #4
   2f48c:	e3a01002 	mov	r1, #2
   2f490:	e3401003 	movt	r1, #3
   2f494:	e58d2000 	str	r2, [sp]
   2f498:	e28d000c 	add	r0, sp, #12
   2f49c:	e08d2003 	add	r2, sp, r3
   2f4a0:	e58d4020 	str	r4, [sp, #32]
   2f4a4:	ebfff2bf 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2f4a8:	e3500000 	cmp	r0, #0
   2f4ac:	0a000002 	beq	2f4bc <CMachineInfo::GetClockRate(unsigned int) const+0x54>
   2f4b0:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
   2f4b4:	e3550000 	cmp	r5, #0
   2f4b8:	1a000026 	bne	2f558 <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   2f4bc:	e3a03014 	mov	r3, #20
   2f4c0:	e3a01004 	mov	r1, #4
   2f4c4:	e08d2003 	add	r2, sp, r3
   2f4c8:	e58d1000 	str	r1, [sp]
   2f4cc:	e28d000c 	add	r0, sp, #12
   2f4d0:	e3a01047 	mov	r1, #71	@ 0x47
   2f4d4:	e3401003 	movt	r1, #3
   2f4d8:	e58d4020 	str	r4, [sp, #32]
   2f4dc:	ebfff2b1 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   2f4e0:	e3500000 	cmp	r0, #0
   2f4e4:	0a000002 	beq	2f4f4 <CMachineInfo::GetClockRate(unsigned int) const+0x8c>
   2f4e8:	e59d5024 	ldr	r5, [sp, #36]	@ 0x24
   2f4ec:	e3550000 	cmp	r5, #0
   2f4f0:	1a000018 	bne	2f558 <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   2f4f4:	e2444001 	sub	r4, r4, #1
   2f4f8:	e354000d 	cmp	r4, #13
   2f4fc:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
   2f500:	ea000022 	b	2f590 <CMachineInfo::GetClockRate(unsigned int) const+0x128>
   2f504:	0002f56c 	.word	0x0002f56c
   2f508:	0002f584 	.word	0x0002f584
   2f50c:	0002f590 	.word	0x0002f590
   2f510:	0002f53c 	.word	0x0002f53c
   2f514:	0002f590 	.word	0x0002f590
   2f518:	0002f590 	.word	0x0002f590
   2f51c:	0002f590 	.word	0x0002f590
   2f520:	0002f590 	.word	0x0002f590
   2f524:	0002f590 	.word	0x0002f590
   2f528:	0002f590 	.word	0x0002f590
   2f52c:	0002f590 	.word	0x0002f590
   2f530:	0002f56c 	.word	0x0002f56c
   2f534:	0002f590 	.word	0x0002f590
   2f538:	0002f578 	.word	0x0002f578
   2f53c:	e5962010 	ldr	r2, [r6, #16]
   2f540:	e30b3280 	movw	r3, #45696	@ 0xb280
   2f544:	e3403ee6 	movt	r3, #3814	@ 0xee6
   2f548:	e3a05ca3 	mov	r5, #41728	@ 0xa300
   2f54c:	e34151e1 	movt	r5, #4577	@ 0x11e1
   2f550:	e3520002 	cmp	r2, #2
   2f554:	91a05003 	movls	r5, r3
   2f558:	e28d000c 	add	r0, sp, #12
   2f55c:	ebfff246 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   2f560:	e1a00005 	mov	r0, r5
   2f564:	e28dd028 	add	sp, sp, #40	@ 0x28
   2f568:	e8bd8070 	pop	{r4, r5, r6, pc}
   2f56c:	e3a05ce1 	mov	r5, #57600	@ 0xe100
   2f570:	e34055f5 	movt	r5, #1525	@ 0x5f5
   2f574:	eafffff7 	b	2f558 <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   2f578:	e30658c0 	movw	r5, #26816	@ 0x68c0
   2f57c:	e3405478 	movt	r5, #1144	@ 0x478
   2f580:	eafffff4 	b	2f558 <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   2f584:	e3a05b1b 	mov	r5, #27648	@ 0x6c00
   2f588:	e34052dc 	movt	r5, #732	@ 0x2dc
   2f58c:	eafffff1 	b	2f558 <CMachineInfo::GetClockRate(unsigned int) const+0xf0>
   2f590:	e59f1008 	ldr	r1, [pc, #8]	@ 2f5a0 <CMachineInfo::GetClockRate(unsigned int) const+0x138>
   2f594:	e3002161 	movw	r2, #353	@ 0x161
   2f598:	e2810010 	add	r0, r1, #16
   2f59c:	ebfff20e 	bl	2bddc <assertion_failed>
   2f5a0:	000426b4 	.word	0x000426b4

0002f5a4 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   2f5a4:	e3510036 	cmp	r1, #54	@ 0x36
   2f5a8:	0a000006 	beq	2f5c8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
   2f5ac:	e3510037 	cmp	r1, #55	@ 0x37
   2f5b0:	1a00000e 	bne	2f5f0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
   2f5b4:	e5d03008 	ldrb	r3, [r0, #8]
   2f5b8:	e3530004 	cmp	r3, #4
   2f5bc:	33a0002d 	movcc	r0, #45	@ 0x2d
   2f5c0:	23a00028 	movcs	r0, #40	@ 0x28
   2f5c4:	e12fff1e 	bx	lr
   2f5c8:	e5d03008 	ldrb	r3, [r0, #8]
   2f5cc:	e3530003 	cmp	r3, #3
   2f5d0:	9a000004 	bls	2f5e8 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
   2f5d4:	e5903010 	ldr	r3, [r0, #16]
   2f5d8:	e3530003 	cmp	r3, #3
   2f5dc:	33a0002d 	movcc	r0, #45	@ 0x2d
   2f5e0:	23a00029 	movcs	r0, #41	@ 0x29
   2f5e4:	e12fff1e 	bx	lr
   2f5e8:	e3a00028 	mov	r0, #40	@ 0x28
   2f5ec:	e12fff1e 	bx	lr
   2f5f0:	e59f100c 	ldr	r1, [pc, #12]	@ 2f604 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x60>
   2f5f4:	e3a02f69 	mov	r2, #420	@ 0x1a4
   2f5f8:	e92d4010 	push	{r4, lr}
   2f5fc:	e2810010 	add	r0, r1, #16
   2f600:	ebfff1f5 	bl	2bddc <assertion_failed>
   2f604:	000426b4 	.word	0x000426b4

0002f608 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   2f608:	e5903010 	ldr	r3, [r0, #16]
   2f60c:	e3530003 	cmp	r3, #3
   2f610:	8a000006 	bhi	2f630 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
   2f614:	e3510001 	cmp	r1, #1
   2f618:	0a00000b 	beq	2f64c <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
   2f61c:	e3510006 	cmp	r1, #6
   2f620:	e3a00c65 	mov	r0, #25856	@ 0x6500
   2f624:	e3410dcd 	movt	r0, #7629	@ 0x1dcd
   2f628:	13a00000 	movne	r0, #0
   2f62c:	e12fff1e 	bx	lr
   2f630:	e3510001 	cmp	r1, #1
   2f634:	0a000007 	beq	2f658 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
   2f638:	e3510006 	cmp	r1, #6
   2f63c:	e3a00d5e 	mov	r0, #6016	@ 0x1780
   2f640:	e3420cb4 	movt	r0, #11444	@ 0x2cb4
   2f644:	13a00000 	movne	r0, #0
   2f648:	e12fff1e 	bx	lr
   2f64c:	e3a00b3e 	mov	r0, #63488	@ 0xf800
   2f650:	e3400124 	movt	r0, #292	@ 0x124
   2f654:	e12fff1e 	bx	lr
   2f658:	e30f0980 	movw	r0, #63872	@ 0xf980
   2f65c:	e3400337 	movt	r0, #823	@ 0x337
   2f660:	e12fff1e 	bx	lr

0002f664 <CMachineInfo::GetDevice(TDeviceId) const>:
   2f664:	e3510000 	cmp	r1, #0
   2f668:	1a000003 	bne	2f67c <CMachineInfo::GetDevice(TDeviceId) const+0x18>
   2f66c:	e5d00008 	ldrb	r0, [r0, #8]
   2f670:	e2500001 	subs	r0, r0, #1
   2f674:	13a00001 	movne	r0, #1
   2f678:	e12fff1e 	bx	lr
   2f67c:	e59f100c 	ldr	r1, [pc, #12]	@ 2f690 <CMachineInfo::GetDevice(TDeviceId) const+0x2c>
   2f680:	e30021df 	movw	r2, #479	@ 0x1df
   2f684:	e92d4010 	push	{r4, lr}
   2f688:	e2810010 	add	r0, r1, #16
   2f68c:	ebfff1d2 	bl	2bddc <assertion_failed>
   2f690:	000426b4 	.word	0x000426b4

0002f694 <CMachineInfo::ArePWMChannelsSwapped() const>:
   2f694:	e5d03008 	ldrb	r3, [r0, #8]
   2f698:	e2430006 	sub	r0, r3, #6
   2f69c:	e3500002 	cmp	r0, #2
   2f6a0:	83530003 	cmphi	r3, #3
   2f6a4:	83a00001 	movhi	r0, #1
   2f6a8:	93a00000 	movls	r0, #0
   2f6ac:	e12fff1e 	bx	lr

0002f6b0 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   2f6b0:	e3042158 	movw	r2, #16728	@ 0x4158
   2f6b4:	e3402004 	movt	r2, #4
   2f6b8:	e92d4010 	push	{r4, lr}
   2f6bc:	e5922000 	ldr	r2, [r2]
   2f6c0:	e3520000 	cmp	r2, #0
   2f6c4:	11a03000 	movne	r3, r0
   2f6c8:	1a000001 	bne	2f6d4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x24>
   2f6cc:	ea00000f 	b	2f710 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x60>
   2f6d0:	e1a03002 	mov	r3, r2
   2f6d4:	e1520003 	cmp	r2, r3
   2f6d8:	1afffffc 	bne	2f6d0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
   2f6dc:	e351000f 	cmp	r1, #15
   2f6e0:	8a00000e 	bhi	2f720 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x70>
   2f6e4:	e351000b 	cmp	r1, #11
   2f6e8:	8a000020 	bhi	2f770 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   2f6ec:	e1d233b0 	ldrh	r3, [r2, #48]	@ 0x30
   2f6f0:	e1a00153 	asr	r0, r3, r1
   2f6f4:	e3100001 	tst	r0, #1
   2f6f8:	0a000015 	beq	2f754 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa4>
   2f6fc:	e3a0c001 	mov	ip, #1
   2f700:	e1a00001 	mov	r0, r1
   2f704:	e1c3311c 	bic	r3, r3, ip, lsl r1
   2f708:	e1c233b0 	strh	r3, [r2, #48]	@ 0x30
   2f70c:	e8bd8010 	pop	{r4, pc}
   2f710:	e59f1068 	ldr	r1, [pc, #104]	@ 2f780 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
   2f714:	e3a02e1f 	mov	r2, #496	@ 0x1f0
   2f718:	e2810014 	add	r0, r1, #20
   2f71c:	ebfff1ae 	bl	2bddc <assertion_failed>
   2f720:	e3510081 	cmp	r1, #129	@ 0x81
   2f724:	e1d3c3b0 	ldrh	ip, [r3, #48]	@ 0x30
   2f728:	13a0200b 	movne	r2, #11
   2f72c:	03a02006 	moveq	r2, #6
   2f730:	e1a0125c 	asr	r1, ip, r2
   2f734:	e3110001 	tst	r1, #1
   2f738:	0a000003 	beq	2f74c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x9c>
   2f73c:	ea000006 	b	2f75c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   2f740:	e1a0125c 	asr	r1, ip, r2
   2f744:	e3110001 	tst	r1, #1
   2f748:	1a000003 	bne	2f75c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xac>
   2f74c:	e2522001 	subs	r2, r2, #1
   2f750:	2afffffa 	bcs	2f740 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x90>
   2f754:	e3a00080 	mov	r0, #128	@ 0x80
   2f758:	e8bd8010 	pop	{r4, pc}
   2f75c:	e3a01001 	mov	r1, #1
   2f760:	e1a00002 	mov	r0, r2
   2f764:	e1ccc211 	bic	ip, ip, r1, lsl r2
   2f768:	e1c3c3b0 	strh	ip, [r3, #48]	@ 0x30
   2f76c:	e8bd8010 	pop	{r4, pc}
   2f770:	e59f1008 	ldr	r1, [pc, #8]	@ 2f780 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd0>
   2f774:	e30021f9 	movw	r2, #505	@ 0x1f9
   2f778:	e2810024 	add	r0, r1, #36	@ 0x24
   2f77c:	ebfff196 	bl	2bddc <assertion_failed>
   2f780:	000426b4 	.word	0x000426b4

0002f784 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   2f784:	e3043158 	movw	r3, #16728	@ 0x4158
   2f788:	e3403004 	movt	r3, #4
   2f78c:	e92d4010 	push	{r4, lr}
   2f790:	e5933000 	ldr	r3, [r3]
   2f794:	e3530000 	cmp	r3, #0
   2f798:	1a000001 	bne	2f7a4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x20>
   2f79c:	ea00000c 	b	2f7d4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x50>
   2f7a0:	e1a00003 	mov	r0, r3
   2f7a4:	e1530000 	cmp	r3, r0
   2f7a8:	1afffffc 	bne	2f7a0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   2f7ac:	e351000b 	cmp	r1, #11
   2f7b0:	8a00000b 	bhi	2f7e4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x60>
   2f7b4:	e1d323b0 	ldrh	r2, [r3, #48]	@ 0x30
   2f7b8:	e1e00152 	mvn	r0, r2, asr r1
   2f7bc:	e3100001 	tst	r0, #1
   2f7c0:	0a00000b 	beq	2f7f4 <CMachineInfo::FreeDMAChannel(unsigned int)+0x70>
   2f7c4:	e3a00001 	mov	r0, #1
   2f7c8:	e1822110 	orr	r2, r2, r0, lsl r1
   2f7cc:	e1c323b0 	strh	r2, [r3, #48]	@ 0x30
   2f7d0:	e8bd8010 	pop	{r4, pc}
   2f7d4:	e59f1028 	ldr	r1, [pc, #40]	@ 2f804 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   2f7d8:	e300221d 	movw	r2, #541	@ 0x21d
   2f7dc:	e2810014 	add	r0, r1, #20
   2f7e0:	ebfff17d 	bl	2bddc <assertion_failed>
   2f7e4:	e59f1018 	ldr	r1, [pc, #24]	@ 2f804 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   2f7e8:	e3002225 	movw	r2, #549	@ 0x225
   2f7ec:	e2810024 	add	r0, r1, #36	@ 0x24
   2f7f0:	ebfff179 	bl	2bddc <assertion_failed>
   2f7f4:	e59f1008 	ldr	r1, [pc, #8]	@ 2f804 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   2f7f8:	e3002226 	movw	r2, #550	@ 0x226
   2f7fc:	e2810040 	add	r0, r1, #64	@ 0x40
   2f800:	ebfff175 	bl	2bddc <assertion_failed>
   2f804:	000426b4 	.word	0x000426b4

0002f808 <CMachineInfo::Get()>:
   2f808:	e3043158 	movw	r3, #16728	@ 0x4158
   2f80c:	e3403004 	movt	r3, #4
   2f810:	e5930000 	ldr	r0, [r3]
   2f814:	e3500000 	cmp	r0, #0
   2f818:	112fff1e 	bxne	lr
   2f81c:	e59f100c 	ldr	r1, [pc, #12]	@ 2f830 <CMachineInfo::Get()+0x28>
   2f820:	e300226f 	movw	r2, #623	@ 0x26f
   2f824:	e92d4010 	push	{r4, lr}
   2f828:	e2810014 	add	r0, r1, #20
   2f82c:	ebfff16a 	bl	2bddc <assertion_failed>
   2f830:	000426b4 	.word	0x000426b4

0002f834 <CPtrArray::CPtrArray(unsigned int, unsigned int)>:
   2f834:	e3a03000 	mov	r3, #0
   2f838:	e92d4010 	push	{r4, lr}
   2f83c:	e1510003 	cmp	r1, r3
   2f840:	e880000e 	stm	r0, {r1, r2, r3}
   2f844:	e580300c 	str	r3, [r0, #12]
   2f848:	0a00000a 	beq	2f878 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x44>
   2f84c:	e3520000 	cmp	r2, #0
   2f850:	0a00000e 	beq	2f890 <CPtrArray::CPtrArray(unsigned int, unsigned int)+0x5c>
   2f854:	e1a04000 	mov	r4, r0
   2f858:	e371022e 	cmn	r1, #-536870910	@ 0xe0000002
   2f85c:	91a00101 	lslls	r0, r1, #2
   2f860:	83e00000 	mvnhi	r0, #0
   2f864:	eb001a34 	bl	3613c <operator new[](unsigned int)>
   2f868:	e1a03000 	mov	r3, r0
   2f86c:	e1a00004 	mov	r0, r4
   2f870:	e584300c 	str	r3, [r4, #12]
   2f874:	e8bd8010 	pop	{r4, pc}
   2f878:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2f87c:	e3401003 	movt	r1, #3
   2f880:	e30e02dc 	movw	r0, #58076	@ 0xe2dc
   2f884:	e3400003 	movt	r0, #3
   2f888:	e3a0201e 	mov	r2, #30
   2f88c:	ebfff152 	bl	2bddc <assertion_failed>
   2f890:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2f894:	e3401003 	movt	r1, #3
   2f898:	e30e02f0 	movw	r0, #58096	@ 0xe2f0
   2f89c:	e3400003 	movt	r0, #3
   2f8a0:	e3a0201f 	mov	r2, #31
   2f8a4:	ebfff14c 	bl	2bddc <assertion_failed>

0002f8a8 <CPtrArray::~CPtrArray()>:
   2f8a8:	e92d4010 	push	{r4, lr}
   2f8ac:	e1a04000 	mov	r4, r0
   2f8b0:	e590000c 	ldr	r0, [r0, #12]
   2f8b4:	e3a03000 	mov	r3, #0
   2f8b8:	e1500003 	cmp	r0, r3
   2f8bc:	e5843000 	str	r3, [r4]
   2f8c0:	e5843004 	str	r3, [r4, #4]
   2f8c4:	0a000000 	beq	2f8cc <CPtrArray::~CPtrArray()+0x24>
   2f8c8:	eb001a27 	bl	3616c <operator delete[](void*)>
   2f8cc:	e1a00004 	mov	r0, r4
   2f8d0:	e8bd8010 	pop	{r4, pc}

0002f8d4 <CPtrArray::GetCount() const>:
   2f8d4:	e5900008 	ldr	r0, [r0, #8]
   2f8d8:	e12fff1e 	bx	lr

0002f8dc <CPtrArray::operator[](unsigned int)>:
   2f8dc:	e5903008 	ldr	r3, [r0, #8]
   2f8e0:	e92d4010 	push	{r4, lr}
   2f8e4:	e1530001 	cmp	r3, r1
   2f8e8:	9a000007 	bls	2f90c <CPtrArray::operator[](unsigned int)+0x30>
   2f8ec:	e5902000 	ldr	r2, [r0]
   2f8f0:	e1530002 	cmp	r3, r2
   2f8f4:	8a00000a 	bhi	2f924 <CPtrArray::operator[](unsigned int)+0x48>
   2f8f8:	e590000c 	ldr	r0, [r0, #12]
   2f8fc:	e3500000 	cmp	r0, #0
   2f900:	0a00000d 	beq	2f93c <CPtrArray::operator[](unsigned int)+0x60>
   2f904:	e0800101 	add	r0, r0, r1, lsl #2
   2f908:	e8bd8010 	pop	{r4, pc}
   2f90c:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2f910:	e3401003 	movt	r1, #3
   2f914:	e30e0308 	movw	r0, #58120	@ 0xe308
   2f918:	e3400003 	movt	r0, #3
   2f91c:	e3a02035 	mov	r2, #53	@ 0x35
   2f920:	ebfff12d 	bl	2bddc <assertion_failed>
   2f924:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2f928:	e3401003 	movt	r1, #3
   2f92c:	e30e0320 	movw	r0, #58144	@ 0xe320
   2f930:	e3400003 	movt	r0, #3
   2f934:	e3a02036 	mov	r2, #54	@ 0x36
   2f938:	ebfff127 	bl	2bddc <assertion_failed>
   2f93c:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2f940:	e3401003 	movt	r1, #3
   2f944:	e30e0340 	movw	r0, #58176	@ 0xe340
   2f948:	e3400003 	movt	r0, #3
   2f94c:	e3a02037 	mov	r2, #55	@ 0x37
   2f950:	ebfff121 	bl	2bddc <assertion_failed>

0002f954 <CPtrArray::operator[](unsigned int) const>:
   2f954:	e5903008 	ldr	r3, [r0, #8]
   2f958:	e92d4010 	push	{r4, lr}
   2f95c:	e1530001 	cmp	r3, r1
   2f960:	9a000007 	bls	2f984 <CPtrArray::operator[](unsigned int) const+0x30>
   2f964:	e5902000 	ldr	r2, [r0]
   2f968:	e1530002 	cmp	r3, r2
   2f96c:	8a00000a 	bhi	2f99c <CPtrArray::operator[](unsigned int) const+0x48>
   2f970:	e590300c 	ldr	r3, [r0, #12]
   2f974:	e3530000 	cmp	r3, #0
   2f978:	0a00000d 	beq	2f9b4 <CPtrArray::operator[](unsigned int) const+0x60>
   2f97c:	e7930101 	ldr	r0, [r3, r1, lsl #2]
   2f980:	e8bd8010 	pop	{r4, pc}
   2f984:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2f988:	e3401003 	movt	r1, #3
   2f98c:	e30e0308 	movw	r0, #58120	@ 0xe308
   2f990:	e3400003 	movt	r0, #3
   2f994:	e3a0203e 	mov	r2, #62	@ 0x3e
   2f998:	ebfff10f 	bl	2bddc <assertion_failed>
   2f99c:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2f9a0:	e3401003 	movt	r1, #3
   2f9a4:	e30e0320 	movw	r0, #58144	@ 0xe320
   2f9a8:	e3400003 	movt	r0, #3
   2f9ac:	e3a0203f 	mov	r2, #63	@ 0x3f
   2f9b0:	ebfff109 	bl	2bddc <assertion_failed>
   2f9b4:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2f9b8:	e3401003 	movt	r1, #3
   2f9bc:	e30e0340 	movw	r0, #58176	@ 0xe340
   2f9c0:	e3400003 	movt	r0, #3
   2f9c4:	e3a02040 	mov	r2, #64	@ 0x40
   2f9c8:	ebfff103 	bl	2bddc <assertion_failed>

0002f9cc <CPtrArray::Append(void*)>:
   2f9cc:	e5903000 	ldr	r3, [r0]
   2f9d0:	e92d4070 	push	{r4, r5, r6, lr}
   2f9d4:	e3530000 	cmp	r3, #0
   2f9d8:	0a000024 	beq	2fa70 <CPtrArray::Append(void*)+0xa4>
   2f9dc:	e590500c 	ldr	r5, [r0, #12]
   2f9e0:	e1a04000 	mov	r4, r0
   2f9e4:	e3550000 	cmp	r5, #0
   2f9e8:	0a000026 	beq	2fa88 <CPtrArray::Append(void*)+0xbc>
   2f9ec:	e5900008 	ldr	r0, [r0, #8]
   2f9f0:	e1530000 	cmp	r3, r0
   2f9f4:	3a000029 	bcc	2faa0 <CPtrArray::Append(void*)+0xd4>
   2f9f8:	e1a06001 	mov	r6, r1
   2f9fc:	0a000003 	beq	2fa10 <CPtrArray::Append(void*)+0x44>
   2fa00:	e2803001 	add	r3, r0, #1
   2fa04:	e7856100 	str	r6, [r5, r0, lsl #2]
   2fa08:	e5843008 	str	r3, [r4, #8]
   2fa0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fa10:	e5942004 	ldr	r2, [r4, #4]
   2fa14:	e3520000 	cmp	r2, #0
   2fa18:	0a000026 	beq	2fab8 <CPtrArray::Append(void*)+0xec>
   2fa1c:	e0833002 	add	r3, r3, r2
   2fa20:	e373022e 	cmn	r3, #-536870910	@ 0xe0000002
   2fa24:	91a00103 	lslls	r0, r3, #2
   2fa28:	83e00000 	mvnhi	r0, #0
   2fa2c:	eb0019c2 	bl	3613c <operator new[](unsigned int)>
   2fa30:	e5942000 	ldr	r2, [r4]
   2fa34:	e594100c 	ldr	r1, [r4, #12]
   2fa38:	e1a05000 	mov	r5, r0
   2fa3c:	e1a02102 	lsl	r2, r2, #2
   2fa40:	eb0017af 	bl	35904 <memcpy>
   2fa44:	e594000c 	ldr	r0, [r4, #12]
   2fa48:	e3500000 	cmp	r0, #0
   2fa4c:	0a000000 	beq	2fa54 <CPtrArray::Append(void*)+0x88>
   2fa50:	eb0019c5 	bl	3616c <operator delete[](void*)>
   2fa54:	e5943000 	ldr	r3, [r4]
   2fa58:	e5942004 	ldr	r2, [r4, #4]
   2fa5c:	e5940008 	ldr	r0, [r4, #8]
   2fa60:	e0833002 	add	r3, r3, r2
   2fa64:	e584500c 	str	r5, [r4, #12]
   2fa68:	e5843000 	str	r3, [r4]
   2fa6c:	eaffffe3 	b	2fa00 <CPtrArray::Append(void*)+0x34>
   2fa70:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2fa74:	e3401003 	movt	r1, #3
   2fa78:	e30e02dc 	movw	r0, #58076	@ 0xe2dc
   2fa7c:	e3400003 	movt	r0, #3
   2fa80:	e3a02047 	mov	r2, #71	@ 0x47
   2fa84:	ebfff0d4 	bl	2bddc <assertion_failed>
   2fa88:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2fa8c:	e3401003 	movt	r1, #3
   2fa90:	e30e0340 	movw	r0, #58176	@ 0xe340
   2fa94:	e3400003 	movt	r0, #3
   2fa98:	e3a02048 	mov	r2, #72	@ 0x48
   2fa9c:	ebfff0ce 	bl	2bddc <assertion_failed>
   2faa0:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2faa4:	e3401003 	movt	r1, #3
   2faa8:	e30e0320 	movw	r0, #58144	@ 0xe320
   2faac:	e3400003 	movt	r0, #3
   2fab0:	e3a0204a 	mov	r2, #74	@ 0x4a
   2fab4:	ebfff0c8 	bl	2bddc <assertion_failed>
   2fab8:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2fabc:	e3401003 	movt	r1, #3
   2fac0:	e30e02f0 	movw	r0, #58096	@ 0xe2f0
   2fac4:	e3400003 	movt	r0, #3
   2fac8:	e3a0204d 	mov	r2, #77	@ 0x4d
   2facc:	ebfff0c2 	bl	2bddc <assertion_failed>

0002fad0 <CPtrArray::RemoveLast()>:
   2fad0:	e5903008 	ldr	r3, [r0, #8]
   2fad4:	e3530000 	cmp	r3, #0
   2fad8:	0a000002 	beq	2fae8 <CPtrArray::RemoveLast()+0x18>
   2fadc:	e2433001 	sub	r3, r3, #1
   2fae0:	e5803008 	str	r3, [r0, #8]
   2fae4:	e12fff1e 	bx	lr
   2fae8:	e30e12cc 	movw	r1, #58060	@ 0xe2cc
   2faec:	e3401003 	movt	r1, #3
   2faf0:	e30e0350 	movw	r0, #58192	@ 0xe350
   2faf4:	e3400003 	movt	r0, #3
   2faf8:	e3a02060 	mov	r2, #96	@ 0x60
   2fafc:	e92d4010 	push	{r4, lr}
   2fb00:	ebfff0b5 	bl	2bddc <assertion_failed>

0002fb04 <CPtrList::CPtrList()>:
   2fb04:	e3a02000 	mov	r2, #0
   2fb08:	e5802000 	str	r2, [r0]
   2fb0c:	e12fff1e 	bx	lr

0002fb10 <CPtrList::~CPtrList()>:
   2fb10:	e5903000 	ldr	r3, [r0]
   2fb14:	e3530000 	cmp	r3, #0
   2fb18:	012fff1e 	bxeq	lr
   2fb1c:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fb20:	e3401003 	movt	r1, #3
   2fb24:	e30e0370 	movw	r0, #58224	@ 0xe370
   2fb28:	e3400003 	movt	r0, #3
   2fb2c:	e3a0202a 	mov	r2, #42	@ 0x2a
   2fb30:	e92d4010 	push	{r4, lr}
   2fb34:	ebfff0a8 	bl	2bddc <assertion_failed>

0002fb38 <CPtrList::GetFirst()>:
   2fb38:	e5900000 	ldr	r0, [r0]
   2fb3c:	e12fff1e 	bx	lr

0002fb40 <CPtrList::GetNext(TPtrListElement*)>:
   2fb40:	e3510000 	cmp	r1, #0
   2fb44:	e92d4010 	push	{r4, lr}
   2fb48:	0a000006 	beq	2fb68 <CPtrList::GetNext(TPtrListElement*)+0x28>
   2fb4c:	e5912000 	ldr	r2, [r1]
   2fb50:	e3043d43 	movw	r3, #19779	@ 0x4d43
   2fb54:	e345304c 	movt	r3, #20556	@ 0x504c
   2fb58:	e1520003 	cmp	r2, r3
   2fb5c:	1a000007 	bne	2fb80 <CPtrList::GetNext(TPtrListElement*)+0x40>
   2fb60:	e5910008 	ldr	r0, [r1, #8]
   2fb64:	e8bd8010 	pop	{r4, pc}
   2fb68:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fb6c:	e3401003 	movt	r1, #3
   2fb70:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   2fb74:	e3400003 	movt	r0, #3
   2fb78:	e3a02034 	mov	r2, #52	@ 0x34
   2fb7c:	ebfff096 	bl	2bddc <assertion_failed>
   2fb80:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fb84:	e3401003 	movt	r1, #3
   2fb88:	e30e0380 	movw	r0, #58240	@ 0xe380
   2fb8c:	e3400003 	movt	r0, #3
   2fb90:	e3a02035 	mov	r2, #53	@ 0x35
   2fb94:	ebfff090 	bl	2bddc <assertion_failed>

0002fb98 <CPtrList::GetPtr(TPtrListElement*)>:
   2fb98:	e3510000 	cmp	r1, #0
   2fb9c:	e92d4010 	push	{r4, lr}
   2fba0:	0a000006 	beq	2fbc0 <CPtrList::GetPtr(TPtrListElement*)+0x28>
   2fba4:	e5912000 	ldr	r2, [r1]
   2fba8:	e3043d43 	movw	r3, #19779	@ 0x4d43
   2fbac:	e345304c 	movt	r3, #20556	@ 0x504c
   2fbb0:	e1520003 	cmp	r2, r3
   2fbb4:	1a000007 	bne	2fbd8 <CPtrList::GetPtr(TPtrListElement*)+0x40>
   2fbb8:	e591000c 	ldr	r0, [r1, #12]
   2fbbc:	e8bd8010 	pop	{r4, pc}
   2fbc0:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fbc4:	e3401003 	movt	r1, #3
   2fbc8:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   2fbcc:	e3400003 	movt	r0, #3
   2fbd0:	e3a0203c 	mov	r2, #60	@ 0x3c
   2fbd4:	ebfff080 	bl	2bddc <assertion_failed>
   2fbd8:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fbdc:	e3401003 	movt	r1, #3
   2fbe0:	e30e0380 	movw	r0, #58240	@ 0xe380
   2fbe4:	e3400003 	movt	r0, #3
   2fbe8:	e3a0203d 	mov	r2, #61	@ 0x3d
   2fbec:	ebfff07a 	bl	2bddc <assertion_failed>

0002fbf0 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   2fbf0:	e92d4070 	push	{r4, r5, r6, lr}
   2fbf4:	e1a05000 	mov	r5, r0
   2fbf8:	e3a00010 	mov	r0, #16
   2fbfc:	e1a06002 	mov	r6, r2
   2fc00:	e1a04001 	mov	r4, r1
   2fc04:	eb001946 	bl	36124 <operator new(unsigned int)>
   2fc08:	e5952000 	ldr	r2, [r5]
   2fc0c:	e3043d43 	movw	r3, #19779	@ 0x4d43
   2fc10:	e345304c 	movt	r3, #20556	@ 0x504c
   2fc14:	e3520000 	cmp	r2, #0
   2fc18:	e5803000 	str	r3, [r0]
   2fc1c:	e580600c 	str	r6, [r0, #12]
   2fc20:	0a000016 	beq	2fc80 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x90>
   2fc24:	e3540000 	cmp	r4, #0
   2fc28:	0a00001a 	beq	2fc98 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa8>
   2fc2c:	e5941000 	ldr	r1, [r4]
   2fc30:	e1510003 	cmp	r1, r3
   2fc34:	1a00001d 	bne	2fcb0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc0>
   2fc38:	e1520004 	cmp	r2, r4
   2fc3c:	0a000009 	beq	2fc68 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   2fc40:	e5943004 	ldr	r3, [r4, #4]
   2fc44:	e9800018 	stmib	r0, {r3, r4}
   2fc48:	e3530000 	cmp	r3, #0
   2fc4c:	0a000003 	beq	2fc60 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   2fc50:	e5932000 	ldr	r2, [r3]
   2fc54:	e1520001 	cmp	r2, r1
   2fc58:	05830008 	streq	r0, [r3, #8]
   2fc5c:	1a000019 	bne	2fcc8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd8>
   2fc60:	e5840004 	str	r0, [r4, #4]
   2fc64:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fc68:	e3a03000 	mov	r3, #0
   2fc6c:	e5820004 	str	r0, [r2, #4]
   2fc70:	e5803004 	str	r3, [r0, #4]
   2fc74:	e5802008 	str	r2, [r0, #8]
   2fc78:	e5850000 	str	r0, [r5]
   2fc7c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fc80:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fc84:	e3401003 	movt	r1, #3
   2fc88:	e30e03a4 	movw	r0, #58276	@ 0xe3a4
   2fc8c:	e3400003 	movt	r0, #3
   2fc90:	e3a0204c 	mov	r2, #76	@ 0x4c
   2fc94:	ebfff050 	bl	2bddc <assertion_failed>
   2fc98:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fc9c:	e3401003 	movt	r1, #3
   2fca0:	e30e03b4 	movw	r0, #58292	@ 0xe3b4
   2fca4:	e3400003 	movt	r0, #3
   2fca8:	e3a0204d 	mov	r2, #77	@ 0x4d
   2fcac:	ebfff04a 	bl	2bddc <assertion_failed>
   2fcb0:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fcb4:	e3401003 	movt	r1, #3
   2fcb8:	e30e03c0 	movw	r0, #58304	@ 0xe3c0
   2fcbc:	e3400003 	movt	r0, #3
   2fcc0:	e3a0204e 	mov	r2, #78	@ 0x4e
   2fcc4:	ebfff044 	bl	2bddc <assertion_failed>
   2fcc8:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fccc:	e3401003 	movt	r1, #3
   2fcd0:	e30e03e4 	movw	r0, #58340	@ 0xe3e4
   2fcd4:	e3400003 	movt	r0, #3
   2fcd8:	e3a02060 	mov	r2, #96	@ 0x60
   2fcdc:	ebfff03e 	bl	2bddc <assertion_failed>

0002fce0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   2fce0:	e92d4070 	push	{r4, r5, r6, lr}
   2fce4:	e1a04001 	mov	r4, r1
   2fce8:	e1a05000 	mov	r5, r0
   2fcec:	e3a00010 	mov	r0, #16
   2fcf0:	e1a06002 	mov	r6, r2
   2fcf4:	eb00190a 	bl	36124 <operator new(unsigned int)>
   2fcf8:	e3043d43 	movw	r3, #19779	@ 0x4d43
   2fcfc:	e345304c 	movt	r3, #20556	@ 0x504c
   2fd00:	e3540000 	cmp	r4, #0
   2fd04:	e5803000 	str	r3, [r0]
   2fd08:	e580600c 	str	r6, [r0, #12]
   2fd0c:	0a000010 	beq	2fd54 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   2fd10:	e5952000 	ldr	r2, [r5]
   2fd14:	e3520000 	cmp	r2, #0
   2fd18:	0a000014 	beq	2fd70 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x90>
   2fd1c:	e5942000 	ldr	r2, [r4]
   2fd20:	e1520003 	cmp	r2, r3
   2fd24:	1a000017 	bne	2fd88 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xa8>
   2fd28:	e5943008 	ldr	r3, [r4, #8]
   2fd2c:	e5804004 	str	r4, [r0, #4]
   2fd30:	e3530000 	cmp	r3, #0
   2fd34:	e5803008 	str	r3, [r0, #8]
   2fd38:	0a000003 	beq	2fd4c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x6c>
   2fd3c:	e5931000 	ldr	r1, [r3]
   2fd40:	e1510002 	cmp	r1, r2
   2fd44:	05830004 	streq	r0, [r3, #4]
   2fd48:	1a000014 	bne	2fda0 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xc0>
   2fd4c:	e5840008 	str	r0, [r4, #8]
   2fd50:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fd54:	e5953000 	ldr	r3, [r5]
   2fd58:	e3530000 	cmp	r3, #0
   2fd5c:	1a000015 	bne	2fdb8 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd8>
   2fd60:	e5803004 	str	r3, [r0, #4]
   2fd64:	e5803008 	str	r3, [r0, #8]
   2fd68:	e5850000 	str	r0, [r5]
   2fd6c:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fd70:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fd74:	e3401003 	movt	r1, #3
   2fd78:	e30e03a4 	movw	r0, #58276	@ 0xe3a4
   2fd7c:	e3400003 	movt	r0, #3
   2fd80:	e3a0207d 	mov	r2, #125	@ 0x7d
   2fd84:	ebfff014 	bl	2bddc <assertion_failed>
   2fd88:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fd8c:	e3401003 	movt	r1, #3
   2fd90:	e30e040c 	movw	r0, #58380	@ 0xe40c
   2fd94:	e3400003 	movt	r0, #3
   2fd98:	e3a0207e 	mov	r2, #126	@ 0x7e
   2fd9c:	ebfff00e 	bl	2bddc <assertion_failed>
   2fda0:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fda4:	e3401003 	movt	r1, #3
   2fda8:	e30e0430 	movw	r0, #58416	@ 0xe430
   2fdac:	e3400003 	movt	r0, #3
   2fdb0:	e3a02085 	mov	r2, #133	@ 0x85
   2fdb4:	ebfff008 	bl	2bddc <assertion_failed>
   2fdb8:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fdbc:	e3401003 	movt	r1, #3
   2fdc0:	e30e0370 	movw	r0, #58224	@ 0xe370
   2fdc4:	e3400003 	movt	r0, #3
   2fdc8:	e3a02074 	mov	r2, #116	@ 0x74
   2fdcc:	ebfff002 	bl	2bddc <assertion_failed>

0002fdd0 <CPtrList::Remove(TPtrListElement*)>:
   2fdd0:	e1a03000 	mov	r3, r0
   2fdd4:	e92d4010 	push	{r4, lr}
   2fdd8:	e2510000 	subs	r0, r1, #0
   2fddc:	0a00002d 	beq	2fe98 <CPtrList::Remove(TPtrListElement*)+0xc8>
   2fde0:	e5901000 	ldr	r1, [r0]
   2fde4:	e3042d43 	movw	r2, #19779	@ 0x4d43
   2fde8:	e345204c 	movt	r2, #20556	@ 0x504c
   2fdec:	e1510002 	cmp	r1, r2
   2fdf0:	1a00002e 	bne	2feb0 <CPtrList::Remove(TPtrListElement*)+0xe0>
   2fdf4:	e5932000 	ldr	r2, [r3]
   2fdf8:	e1520000 	cmp	r2, r0
   2fdfc:	0a000010 	beq	2fe44 <CPtrList::Remove(TPtrListElement*)+0x74>
   2fe00:	e5903004 	ldr	r3, [r0, #4]
   2fe04:	e3530000 	cmp	r3, #0
   2fe08:	0a00002e 	beq	2fec8 <CPtrList::Remove(TPtrListElement*)+0xf8>
   2fe0c:	e593c000 	ldr	ip, [r3]
   2fe10:	e15c0001 	cmp	ip, r1
   2fe14:	1a000019 	bne	2fe80 <CPtrList::Remove(TPtrListElement*)+0xb0>
   2fe18:	e5902008 	ldr	r2, [r0, #8]
   2fe1c:	e5832008 	str	r2, [r3, #8]
   2fe20:	e3520000 	cmp	r2, #0
   2fe24:	0a000003 	beq	2fe38 <CPtrList::Remove(TPtrListElement*)+0x68>
   2fe28:	e5921000 	ldr	r1, [r2]
   2fe2c:	e151000c 	cmp	r1, ip
   2fe30:	05823004 	streq	r3, [r2, #4]
   2fe34:	1a000029 	bne	2fee0 <CPtrList::Remove(TPtrListElement*)+0x110>
   2fe38:	e8bd4010 	pop	{r4, lr}
   2fe3c:	e3a01010 	mov	r1, #16
   2fe40:	ea0018cf 	b	36184 <operator delete(void*, unsigned int)>
   2fe44:	e5922008 	ldr	r2, [r2, #8]
   2fe48:	e5832000 	str	r2, [r3]
   2fe4c:	e3520000 	cmp	r2, #0
   2fe50:	0afffff8 	beq	2fe38 <CPtrList::Remove(TPtrListElement*)+0x68>
   2fe54:	e5923000 	ldr	r3, [r2]
   2fe58:	e1530001 	cmp	r3, r1
   2fe5c:	03a03000 	moveq	r3, #0
   2fe60:	05823004 	streq	r3, [r2, #4]
   2fe64:	0afffff3 	beq	2fe38 <CPtrList::Remove(TPtrListElement*)+0x68>
   2fe68:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fe6c:	e3401003 	movt	r1, #3
   2fe70:	e30e045c 	movw	r0, #58460	@ 0xe45c
   2fe74:	e3400003 	movt	r0, #3
   2fe78:	e3a02098 	mov	r2, #152	@ 0x98
   2fe7c:	ebffefd6 	bl	2bddc <assertion_failed>
   2fe80:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fe84:	e3401003 	movt	r1, #3
   2fe88:	e30e04a0 	movw	r0, #58528	@ 0xe4a0
   2fe8c:	e3400003 	movt	r0, #3
   2fe90:	e3a0209f 	mov	r2, #159	@ 0x9f
   2fe94:	ebffefd0 	bl	2bddc <assertion_failed>
   2fe98:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fe9c:	e3401003 	movt	r1, #3
   2fea0:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   2fea4:	e3400003 	movt	r0, #3
   2fea8:	e3a0208f 	mov	r2, #143	@ 0x8f
   2feac:	ebffefca 	bl	2bddc <assertion_failed>
   2feb0:	e30e1364 	movw	r1, #58212	@ 0xe364
   2feb4:	e3401003 	movt	r1, #3
   2feb8:	e30e0380 	movw	r0, #58240	@ 0xe380
   2febc:	e3400003 	movt	r0, #3
   2fec0:	e3a02090 	mov	r2, #144	@ 0x90
   2fec4:	ebffefc4 	bl	2bddc <assertion_failed>
   2fec8:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fecc:	e3401003 	movt	r1, #3
   2fed0:	e30e0488 	movw	r0, #58504	@ 0xe488
   2fed4:	e3400003 	movt	r0, #3
   2fed8:	e3a0209e 	mov	r2, #158	@ 0x9e
   2fedc:	ebffefbe 	bl	2bddc <assertion_failed>
   2fee0:	e30e1364 	movw	r1, #58212	@ 0xe364
   2fee4:	e3401003 	movt	r1, #3
   2fee8:	e30e045c 	movw	r0, #58460	@ 0xe45c
   2feec:	e3400003 	movt	r0, #3
   2fef0:	e3a020a4 	mov	r2, #164	@ 0xa4
   2fef4:	ebffefb8 	bl	2bddc <assertion_failed>

0002fef8 <CPtrList::Find(void*)>:
   2fef8:	e5900000 	ldr	r0, [r0]
   2fefc:	e3500000 	cmp	r0, #0
   2ff00:	012fff1e 	bxeq	lr
   2ff04:	e3042d43 	movw	r2, #19779	@ 0x4d43
   2ff08:	e345204c 	movt	r2, #20556	@ 0x504c
   2ff0c:	ea000005 	b	2ff28 <CPtrList::Find(void*)+0x30>
   2ff10:	e590300c 	ldr	r3, [r0, #12]
   2ff14:	e1530001 	cmp	r3, r1
   2ff18:	012fff1e 	bxeq	lr
   2ff1c:	e5900008 	ldr	r0, [r0, #8]
   2ff20:	e3500000 	cmp	r0, #0
   2ff24:	012fff1e 	bxeq	lr
   2ff28:	e5903000 	ldr	r3, [r0]
   2ff2c:	e1530002 	cmp	r3, r2
   2ff30:	0afffff6 	beq	2ff10 <CPtrList::Find(void*)+0x18>
   2ff34:	e30e1364 	movw	r1, #58212	@ 0xe364
   2ff38:	e3401003 	movt	r1, #3
   2ff3c:	e30e0380 	movw	r0, #58240	@ 0xe380
   2ff40:	e3400003 	movt	r0, #3
   2ff44:	e3a020b3 	mov	r2, #179	@ 0xb3
   2ff48:	e92d4010 	push	{r4, lr}
   2ff4c:	ebffefa2 	bl	2bddc <assertion_failed>

0002ff50 <CScreenDevice::~CScreenDevice()>:
   2ff50:	e92d4070 	push	{r4, r5, r6, lr}
   2ff54:	e1a04000 	mov	r4, r0
   2ff58:	e59f509c 	ldr	r5, [pc, #156]	@ 2fffc <CScreenDevice::~CScreenDevice()+0xac>
   2ff5c:	e5805000 	str	r5, [r0]
   2ff60:	ebfff331 	bl	2cc2c <CDeviceNameService::Get()>
   2ff64:	e5942014 	ldr	r2, [r4, #20]
   2ff68:	e3a03000 	mov	r3, #0
   2ff6c:	e2851020 	add	r1, r5, #32
   2ff70:	e2822001 	add	r2, r2, #1
   2ff74:	ebfff352 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   2ff78:	e5d43010 	ldrb	r3, [r4, #16]
   2ff7c:	e3530000 	cmp	r3, #0
   2ff80:	0a000003 	beq	2ff94 <CScreenDevice::~CScreenDevice()+0x44>
   2ff84:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
   2ff88:	e3500000 	cmp	r0, #0
   2ff8c:	0a000000 	beq	2ff94 <CScreenDevice::~CScreenDevice()+0x44>
   2ff90:	eb001875 	bl	3616c <operator delete[](void*)>
   2ff94:	e5945018 	ldr	r5, [r4, #24]
   2ff98:	e3a03000 	mov	r3, #0
   2ff9c:	e5843024 	str	r3, [r4, #36]	@ 0x24
   2ffa0:	e1550003 	cmp	r5, r3
   2ffa4:	0a000004 	beq	2ffbc <CScreenDevice::~CScreenDevice()+0x6c>
   2ffa8:	e1a00005 	mov	r0, r5
   2ffac:	eb002125 	bl	38448 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   2ffb0:	e3a01098 	mov	r1, #152	@ 0x98
   2ffb4:	e1a00005 	mov	r0, r5
   2ffb8:	eb001871 	bl	36184 <operator delete(void*, unsigned int)>
   2ffbc:	e5940020 	ldr	r0, [r4, #32]
   2ffc0:	e3a03000 	mov	r3, #0
   2ffc4:	e5843018 	str	r3, [r4, #24]
   2ffc8:	e1500003 	cmp	r0, r3
   2ffcc:	0a000000 	beq	2ffd4 <CScreenDevice::~CScreenDevice()+0x84>
   2ffd0:	eb001865 	bl	3616c <operator delete[](void*)>
   2ffd4:	e3a03000 	mov	r3, #0
   2ffd8:	e2840064 	add	r0, r4, #100	@ 0x64
   2ffdc:	e5843020 	str	r3, [r4, #32]
   2ffe0:	eb0022dd 	bl	38b5c <CDMAChannel::~CDMAChannel()>
   2ffe4:	e284001c 	add	r0, r4, #28
   2ffe8:	eb00227b 	bl	389dc <CCharGenerator::~CCharGenerator()>
   2ffec:	e1a00004 	mov	r0, r4
   2fff0:	ebfff1a5 	bl	2c68c <CDevice::~CDevice()>
   2fff4:	e1a00004 	mov	r0, r4
   2fff8:	e8bd8070 	pop	{r4, r5, r6, pc}
   2fffc:	000428f0 	.word	0x000428f0

00030000 <CScreenDevice::~CScreenDevice()>:
   30000:	e92d4010 	push	{r4, lr}
   30004:	e1a04000 	mov	r4, r0
   30008:	ebffffd0 	bl	2ff50 <CScreenDevice::~CScreenDevice()>
   3000c:	e1a00004 	mov	r0, r4
   30010:	e3a01090 	mov	r1, #144	@ 0x90
   30014:	eb00185a 	bl	36184 <operator delete(void*, unsigned int)>
   30018:	e1a00004 	mov	r0, r4
   3001c:	e8bd8010 	pop	{r4, pc}

00030020 <CScreenDevice::InvertCursor() [clone .part.0]>:
   30020:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30024:	e1a04000 	mov	r4, r0
   30028:	e280801c 	add	r8, r0, #28
   3002c:	e1a00008 	mov	r0, r8
   30030:	e5946020 	ldr	r6, [r4, #32]
   30034:	eb00226d 	bl	389f0 <CCharGenerator::GetUnderline() const>
   30038:	e1a07000 	mov	r7, r0
   3003c:	e1a00008 	mov	r0, r8
   30040:	eb002268 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30044:	e1570000 	cmp	r7, r0
   30048:	2a000030 	bcs	30110 <CScreenDevice::InvertCursor() [clone .part.0]+0xf0>
   3004c:	e3a05000 	mov	r5, #0
   30050:	ea000007 	b	30074 <CScreenDevice::InvertCursor() [clone .part.0]+0x54>
   30054:	e1530002 	cmp	r3, r2
   30058:	2a000002 	bcs	30068 <CScreenDevice::InvertCursor() [clone .part.0]+0x48>
   3005c:	e5942034 	ldr	r2, [r4, #52]	@ 0x34
   30060:	e1500002 	cmp	r0, r2
   30064:	3a00001b 	bcc	300d8 <CScreenDevice::InvertCursor() [clone .part.0]+0xb8>
   30068:	e1d435b4 	ldrh	r3, [r4, #84]	@ 0x54
   3006c:	e14630b2 	strh	r3, [r6, #-2]
   30070:	e2855001 	add	r5, r5, #1
   30074:	e1a00008 	mov	r0, r8
   30078:	eb002258 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   3007c:	e1550000 	cmp	r5, r0
   30080:	2a00001d 	bcs	300fc <CScreenDevice::InvertCursor() [clone .part.0]+0xdc>
   30084:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
   30088:	e2866002 	add	r6, r6, #2
   3008c:	e594004c 	ldr	r0, [r4, #76]	@ 0x4c
   30090:	e5d41051 	ldrb	r1, [r4, #81]	@ 0x51
   30094:	e0853003 	add	r3, r5, r3
   30098:	e5942030 	ldr	r2, [r4, #48]	@ 0x30
   3009c:	e0870000 	add	r0, r7, r0
   300a0:	e3510000 	cmp	r1, #0
   300a4:	0affffea 	beq	30054 <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
   300a8:	e1530002 	cmp	r3, r2
   300ac:	2affffef 	bcs	30070 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>
   300b0:	e5942034 	ldr	r2, [r4, #52]	@ 0x34
   300b4:	e1500002 	cmp	r0, r2
   300b8:	2affffec 	bcs	30070 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>
   300bc:	e594c02c 	ldr	ip, [r4, #44]	@ 0x2c
   300c0:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
   300c4:	e15610b2 	ldrh	r1, [r6, #-2]
   300c8:	e023309c 	mla	r3, ip, r0, r3
   300cc:	e1a03083 	lsl	r3, r3, #1
   300d0:	e18210b3 	strh	r1, [r2, r3]
   300d4:	eaffffe5 	b	30070 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>
   300d8:	e594202c 	ldr	r2, [r4, #44]	@ 0x2c
   300dc:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
   300e0:	e0233092 	mla	r3, r2, r0, r3
   300e4:	e1a03083 	lsl	r3, r3, #1
   300e8:	e19120b3 	ldrh	r2, [r1, r3]
   300ec:	e14620b2 	strh	r2, [r6, #-2]
   300f0:	e1d425b2 	ldrh	r2, [r4, #82]	@ 0x52
   300f4:	e18120b3 	strh	r2, [r1, r3]
   300f8:	eaffffdc 	b	30070 <CScreenDevice::InvertCursor() [clone .part.0]+0x50>
   300fc:	e2877001 	add	r7, r7, #1
   30100:	e1a00008 	mov	r0, r8
   30104:	eb002237 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30108:	e1570000 	cmp	r7, r0
   3010c:	3affffce 	bcc	3004c <CScreenDevice::InvertCursor() [clone .part.0]+0x2c>
   30110:	e5d43051 	ldrb	r3, [r4, #81]	@ 0x51
   30114:	e2233001 	eor	r3, r3, #1
   30118:	e5c43051 	strb	r3, [r4, #81]	@ 0x51
   3011c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00030120 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
   30120:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30124:	e1a04000 	mov	r4, r0
   30128:	e1a05001 	mov	r5, r1
   3012c:	e1a07002 	mov	r7, r2
   30130:	e1a06003 	mov	r6, r3
   30134:	ebfff181 	bl	2c740 <CDevice::CDevice()>
   30138:	e59d3018 	ldr	r3, [sp, #24]
   3013c:	e5843014 	str	r3, [r4, #20]
   30140:	e284001c 	add	r0, r4, #28
   30144:	e59f3064 	ldr	r3, [pc, #100]	@ 301b0 <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0x90>
   30148:	e5845008 	str	r5, [r4, #8]
   3014c:	e3a05000 	mov	r5, #0
   30150:	e5843000 	str	r3, [r4]
   30154:	e584700c 	str	r7, [r4, #12]
   30158:	e5c46010 	strb	r6, [r4, #16]
   3015c:	e5845018 	str	r5, [r4, #24]
   30160:	eb00221a 	bl	389d0 <CCharGenerator::CCharGenerator()>
   30164:	e1a02005 	mov	r2, r5
   30168:	e3a01081 	mov	r1, #129	@ 0x81
   3016c:	e2840064 	add	r0, r4, #100	@ 0x64
   30170:	e5845020 	str	r5, [r4, #32]
   30174:	e3a03001 	mov	r3, #1
   30178:	e34f3fdf 	movt	r3, #65503	@ 0xffdf
   3017c:	e5845024 	str	r5, [r4, #36]	@ 0x24
   30180:	e5843050 	str	r3, [r4, #80]	@ 0x50
   30184:	e584503c 	str	r5, [r4, #60]	@ 0x3c
   30188:	e5845040 	str	r5, [r4, #64]	@ 0x40
   3018c:	e5845048 	str	r5, [r4, #72]	@ 0x48
   30190:	e584504c 	str	r5, [r4, #76]	@ 0x4c
   30194:	e5845054 	str	r5, [r4, #84]	@ 0x54
   30198:	e5c45060 	strb	r5, [r4, #96]	@ 0x60
   3019c:	eb002236 	bl	38a7c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
   301a0:	e3a03001 	mov	r3, #1
   301a4:	e1a00004 	mov	r0, r4
   301a8:	e584308c 	str	r3, [r4, #140]	@ 0x8c
   301ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   301b0:	000428f0 	.word	0x000428f0

000301b4 <CScreenDevice::GetWidth() const>:
   301b4:	e5900030 	ldr	r0, [r0, #48]	@ 0x30
   301b8:	e12fff1e 	bx	lr

000301bc <CScreenDevice::GetHeight() const>:
   301bc:	e5900034 	ldr	r0, [r0, #52]	@ 0x34
   301c0:	e12fff1e 	bx	lr

000301c4 <CScreenDevice::GetColumns() const>:
   301c4:	e1a03000 	mov	r3, r0
   301c8:	e92d4010 	push	{r4, lr}
   301cc:	e280001c 	add	r0, r0, #28
   301d0:	e5934030 	ldr	r4, [r3, #48]	@ 0x30
   301d4:	eb002201 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   301d8:	e730f014 	udiv	r0, r4, r0
   301dc:	e8bd8010 	pop	{r4, pc}

000301e0 <CScreenDevice::GetRows() const>:
   301e0:	e1a03000 	mov	r3, r0
   301e4:	e92d4010 	push	{r4, lr}
   301e8:	e280001c 	add	r0, r0, #28
   301ec:	e5934038 	ldr	r4, [r3, #56]	@ 0x38
   301f0:	eb0021fc 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   301f4:	e730f014 	udiv	r0, r4, r0
   301f8:	e8bd8010 	pop	{r4, pc}

000301fc <CScreenDevice::GetFrameBuffer()>:
   301fc:	e5900018 	ldr	r0, [r0, #24]
   30200:	e12fff1e 	bx	lr

00030204 <CScreenDevice::GetStatus()>:
   30204:	e5912028 	ldr	r2, [r1, #40]	@ 0x28
   30208:	e5802004 	str	r2, [r0, #4]
   3020c:	e5912040 	ldr	r2, [r1, #64]	@ 0x40
   30210:	e591c024 	ldr	ip, [r1, #36]	@ 0x24
   30214:	e580200c 	str	r2, [r0, #12]
   30218:	e5912048 	ldr	r2, [r1, #72]	@ 0x48
   3021c:	e580c000 	str	ip, [r0]
   30220:	e5802014 	str	r2, [r0, #20]
   30224:	e591c03c 	ldr	ip, [r1, #60]	@ 0x3c
   30228:	e5d12050 	ldrb	r2, [r1, #80]	@ 0x50
   3022c:	e580c008 	str	ip, [r0, #8]
   30230:	e5c0201c 	strb	r2, [r0, #28]
   30234:	e591c044 	ldr	ip, [r1, #68]	@ 0x44
   30238:	e5912058 	ldr	r2, [r1, #88]	@ 0x58
   3023c:	e580c010 	str	ip, [r0, #16]
   30240:	e5802024 	str	r2, [r0, #36]	@ 0x24
   30244:	e591c04c 	ldr	ip, [r1, #76]	@ 0x4c
   30248:	e591205c 	ldr	r2, [r1, #92]	@ 0x5c
   3024c:	e580c018 	str	ip, [r0, #24]
   30250:	e5802028 	str	r2, [r0, #40]	@ 0x28
   30254:	e1d1c5b2 	ldrh	ip, [r1, #82]	@ 0x52
   30258:	e5d12060 	ldrb	r2, [r1, #96]	@ 0x60
   3025c:	e5911054 	ldr	r1, [r1, #84]	@ 0x54
   30260:	e1c0c1be 	strh	ip, [r0, #30]
   30264:	e5801020 	str	r1, [r0, #32]
   30268:	e5c0202c 	strb	r2, [r0, #44]	@ 0x2c
   3026c:	e12fff1e 	bx	lr

00030270 <CScreenDevice::SetStatus(TScreenStatus const&)>:
   30270:	e5902028 	ldr	r2, [r0, #40]	@ 0x28
   30274:	e5913004 	ldr	r3, [r1, #4]
   30278:	e1520003 	cmp	r2, r3
   3027c:	0a000001 	beq	30288 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
   30280:	e3a00000 	mov	r0, #0
   30284:	e12fff1e 	bx	lr
   30288:	e92d4070 	push	{r4, r5, r6, lr}
   3028c:	e1a05001 	mov	r5, r1
   30290:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
   30294:	e590102c 	ldr	r1, [r0, #44]	@ 0x2c
   30298:	e1a04000 	mov	r4, r0
   3029c:	e1510003 	cmp	r1, r3
   302a0:	0a000001 	beq	302ac <CScreenDevice::SetStatus(TScreenStatus const&)+0x3c>
   302a4:	e3a00000 	mov	r0, #0
   302a8:	e8bd8070 	pop	{r4, r5, r6, pc}
   302ac:	e590008c 	ldr	r0, [r0, #140]	@ 0x8c
   302b0:	e3500000 	cmp	r0, #0
   302b4:	1a000024 	bne	3034c <CScreenDevice::SetStatus(TScreenStatus const&)+0xdc>
   302b8:	e5d43060 	ldrb	r3, [r4, #96]	@ 0x60
   302bc:	e3530000 	cmp	r3, #0
   302c0:	1afffff7 	bne	302a4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   302c4:	e5d5302c 	ldrb	r3, [r5, #44]	@ 0x2c
   302c8:	e3530000 	cmp	r3, #0
   302cc:	1afffff4 	bne	302a4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   302d0:	e5951000 	ldr	r1, [r5]
   302d4:	e5940024 	ldr	r0, [r4, #36]	@ 0x24
   302d8:	eb001589 	bl	35904 <memcpy>
   302dc:	e5951008 	ldr	r1, [r5, #8]
   302e0:	e595200c 	ldr	r2, [r5, #12]
   302e4:	e5d5301c 	ldrb	r3, [r5, #28]
   302e8:	e584103c 	str	r1, [r4, #60]	@ 0x3c
   302ec:	e5842040 	str	r2, [r4, #64]	@ 0x40
   302f0:	e5951010 	ldr	r1, [r5, #16]
   302f4:	e5952014 	ldr	r2, [r5, #20]
   302f8:	e5842048 	str	r2, [r4, #72]	@ 0x48
   302fc:	e5841044 	str	r1, [r4, #68]	@ 0x44
   30300:	e594208c 	ldr	r2, [r4, #140]	@ 0x8c
   30304:	e5951018 	ldr	r1, [r5, #24]
   30308:	e5c43050 	strb	r3, [r4, #80]	@ 0x50
   3030c:	e3520000 	cmp	r2, #0
   30310:	e1d531be 	ldrh	r3, [r5, #30]
   30314:	e1c435b2 	strh	r3, [r4, #82]	@ 0x52
   30318:	e1d532b0 	ldrh	r3, [r5, #32]
   3031c:	e5952024 	ldr	r2, [r5, #36]	@ 0x24
   30320:	e584104c 	str	r1, [r4, #76]	@ 0x4c
   30324:	e1d512b2 	ldrh	r1, [r5, #34]	@ 0x22
   30328:	e1c435b4 	strh	r3, [r4, #84]	@ 0x54
   3032c:	e5953028 	ldr	r3, [r5, #40]	@ 0x28
   30330:	e584305c 	str	r3, [r4, #92]	@ 0x5c
   30334:	e1c415b6 	strh	r1, [r4, #86]	@ 0x56
   30338:	e5842058 	str	r2, [r4, #88]	@ 0x58
   3033c:	1a00000f 	bne	30380 <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
   30340:	f57ff05f 	dmb	sy
   30344:	e3a00001 	mov	r0, #1
   30348:	e8bd8070 	pop	{r4, r5, r6, pc}
   3034c:	eb001d8b 	bl	37980 <EnterCritical>
   30350:	e5d43060 	ldrb	r3, [r4, #96]	@ 0x60
   30354:	e3530000 	cmp	r3, #0
   30358:	1a000003 	bne	3036c <CScreenDevice::SetStatus(TScreenStatus const&)+0xfc>
   3035c:	e5d5302c 	ldrb	r3, [r5, #44]	@ 0x2c
   30360:	e3530000 	cmp	r3, #0
   30364:	05942028 	ldreq	r2, [r4, #40]	@ 0x28
   30368:	0affffd8 	beq	302d0 <CScreenDevice::SetStatus(TScreenStatus const&)+0x60>
   3036c:	e594308c 	ldr	r3, [r4, #140]	@ 0x8c
   30370:	e3530000 	cmp	r3, #0
   30374:	0affffca 	beq	302a4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   30378:	eb001dab 	bl	37a2c <LeaveCritical>
   3037c:	eaffffc8 	b	302a4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x34>
   30380:	eb001da9 	bl	37a2c <LeaveCritical>
   30384:	eaffffed 	b	30340 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd0>

00030388 <CScreenDevice::CarriageReturn()>:
   30388:	e3a03000 	mov	r3, #0
   3038c:	e5803048 	str	r3, [r0, #72]	@ 0x48
   30390:	e12fff1e 	bx	lr

00030394 <CScreenDevice::CursorHome()>:
   30394:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
   30398:	e3a02000 	mov	r2, #0
   3039c:	e580304c 	str	r3, [r0, #76]	@ 0x4c
   303a0:	e5802048 	str	r2, [r0, #72]	@ 0x48
   303a4:	e12fff1e 	bx	lr

000303a8 <CScreenDevice::CursorLeft()>:
   303a8:	e5903048 	ldr	r3, [r0, #72]	@ 0x48
   303ac:	e92d4070 	push	{r4, r5, r6, lr}
   303b0:	e1a04000 	mov	r4, r0
   303b4:	e3530000 	cmp	r3, #0
   303b8:	1a00000f 	bne	303fc <CScreenDevice::CursorLeft()+0x54>
   303bc:	e590204c 	ldr	r2, [r0, #76]	@ 0x4c
   303c0:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
   303c4:	e1520003 	cmp	r2, r3
   303c8:	98bd8070 	popls	{r4, r5, r6, pc}
   303cc:	e5905030 	ldr	r5, [r0, #48]	@ 0x30
   303d0:	e280601c 	add	r6, r0, #28
   303d4:	e1a00006 	mov	r0, r6
   303d8:	eb002180 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   303dc:	e0455000 	sub	r5, r5, r0
   303e0:	e1a00006 	mov	r0, r6
   303e4:	e5845048 	str	r5, [r4, #72]	@ 0x48
   303e8:	eb00217e 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   303ec:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   303f0:	e0433000 	sub	r3, r3, r0
   303f4:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   303f8:	e8bd8070 	pop	{r4, r5, r6, pc}
   303fc:	e280001c 	add	r0, r0, #28
   30400:	eb002176 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30404:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
   30408:	e0433000 	sub	r3, r3, r0
   3040c:	e5843048 	str	r3, [r4, #72]	@ 0x48
   30410:	e8bd8070 	pop	{r4, r5, r6, pc}

00030414 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
   30414:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30418:	e280701c 	add	r7, r0, #28
   3041c:	e1a04002 	mov	r4, r2
   30420:	e1a05000 	mov	r5, r0
   30424:	e1a00007 	mov	r0, r7
   30428:	e1a06001 	mov	r6, r1
   3042c:	e2444001 	sub	r4, r4, #1
   30430:	eb00216a 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30434:	e1a03000 	mov	r3, r0
   30438:	e1a00007 	mov	r0, r7
   3043c:	e0040493 	mul	r4, r3, r4
   30440:	eb002168 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30444:	e5953030 	ldr	r3, [r5, #48]	@ 0x30
   30448:	e1530004 	cmp	r3, r4
   3044c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   30450:	e2466001 	sub	r6, r6, #1
   30454:	e5953040 	ldr	r3, [r5, #64]	@ 0x40
   30458:	e0000690 	mul	r0, r0, r6
   3045c:	e1530000 	cmp	r3, r0
   30460:	88bd81f0 	pophi	{r4, r5, r6, r7, r8, pc}
   30464:	e5953044 	ldr	r3, [r5, #68]	@ 0x44
   30468:	e1530000 	cmp	r3, r0
   3046c:	85854048 	strhi	r4, [r5, #72]	@ 0x48
   30470:	8585004c 	strhi	r0, [r5, #76]	@ 0x4c
   30474:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00030478 <CScreenDevice::CursorUp()>:
   30478:	e590204c 	ldr	r2, [r0, #76]	@ 0x4c
   3047c:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
   30480:	e1520003 	cmp	r2, r3
   30484:	912fff1e 	bxls	lr
   30488:	e92d4010 	push	{r4, lr}
   3048c:	e1a04000 	mov	r4, r0
   30490:	e280001c 	add	r0, r0, #28
   30494:	eb002153 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30498:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   3049c:	e0433000 	sub	r3, r3, r0
   304a0:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   304a4:	e8bd8010 	pop	{r4, pc}

000304a8 <CScreenDevice::DeleteChars(unsigned int)>:
   304a8:	e12fff1e 	bx	lr

000304ac <CScreenDevice::DeleteLines(unsigned int)>:
   304ac:	e12fff1e 	bx	lr

000304b0 <CScreenDevice::GetTextBackgroundColor()>:
   304b0:	e5d03056 	ldrb	r3, [r0, #86]	@ 0x56
   304b4:	e3530000 	cmp	r3, #0
   304b8:	11d005b2 	ldrhne	r0, [r0, #82]	@ 0x52
   304bc:	01d005b4 	ldrheq	r0, [r0, #84]	@ 0x54
   304c0:	e12fff1e 	bx	lr

000304c4 <CScreenDevice::GetTextColor()>:
   304c4:	e5d03056 	ldrb	r3, [r0, #86]	@ 0x56
   304c8:	e3530000 	cmp	r3, #0
   304cc:	11d005b4 	ldrhne	r0, [r0, #84]	@ 0x54
   304d0:	01d005b2 	ldrheq	r0, [r0, #82]	@ 0x52
   304d4:	e12fff1e 	bx	lr

000304d8 <CScreenDevice::InsertLines(unsigned int)>:
   304d8:	e12fff1e 	bx	lr

000304dc <CScreenDevice::InsertMode(bool)>:
   304dc:	e5c01057 	strb	r1, [r0, #87]	@ 0x57
   304e0:	e12fff1e 	bx	lr

000304e4 <CScreenDevice::ReverseScroll()>:
   304e4:	e12fff1e 	bx	lr

000304e8 <CScreenDevice::SetCursorMode(bool)>:
   304e8:	e5c01050 	strb	r1, [r0, #80]	@ 0x50
   304ec:	e12fff1e 	bx	lr

000304f0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
   304f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   304f4:	e280701c 	add	r7, r0, #28
   304f8:	e1a05000 	mov	r5, r0
   304fc:	e1a04001 	mov	r4, r1
   30500:	e1a00007 	mov	r0, r7
   30504:	e1a06002 	mov	r6, r2
   30508:	e2444001 	sub	r4, r4, #1
   3050c:	eb002135 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30510:	e1a03000 	mov	r3, r0
   30514:	e1a00007 	mov	r0, r7
   30518:	e0040493 	mul	r4, r3, r4
   3051c:	eb002131 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30520:	e5953038 	ldr	r3, [r5, #56]	@ 0x38
   30524:	e0020096 	mul	r2, r6, r0
   30528:	e1530002 	cmp	r3, r2
   3052c:	21530004 	cmpcs	r3, r4
   30530:	83a03001 	movhi	r3, #1
   30534:	93a03000 	movls	r3, #0
   30538:	e1540002 	cmp	r4, r2
   3053c:	23a03000 	movcs	r3, #0
   30540:	32033001 	andcc	r3, r3, #1
   30544:	e3530000 	cmp	r3, #0
   30548:	e3a03000 	mov	r3, #0
   3054c:	15854040 	strne	r4, [r5, #64]	@ 0x40
   30550:	15852044 	strne	r2, [r5, #68]	@ 0x44
   30554:	05954040 	ldreq	r4, [r5, #64]	@ 0x40
   30558:	e585404c 	str	r4, [r5, #76]	@ 0x4c
   3055c:	e5853048 	str	r3, [r5, #72]	@ 0x48
   30560:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00030564 <CScreenDevice::SetStandoutMode(unsigned int)>:
   30564:	e351006b 	cmp	r1, #107	@ 0x6b
   30568:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
   3056c:	ea00006d 	b	30728 <CScreenDevice::SetStandoutMode(unsigned int)+0x1c4>
   30570:	00030748 	.word	0x00030748
   30574:	0003072c 	.word	0x0003072c
   30578:	0003073c 	.word	0x0003073c
   3057c:	00030728 	.word	0x00030728
   30580:	00030728 	.word	0x00030728
   30584:	00030728 	.word	0x00030728
   30588:	00030728 	.word	0x00030728
   3058c:	000308d4 	.word	0x000308d4
   30590:	00030728 	.word	0x00030728
   30594:	00030728 	.word	0x00030728
   30598:	00030728 	.word	0x00030728
   3059c:	00030728 	.word	0x00030728
   305a0:	00030728 	.word	0x00030728
   305a4:	00030728 	.word	0x00030728
   305a8:	00030728 	.word	0x00030728
   305ac:	00030728 	.word	0x00030728
   305b0:	00030728 	.word	0x00030728
   305b4:	00030728 	.word	0x00030728
   305b8:	00030728 	.word	0x00030728
   305bc:	00030728 	.word	0x00030728
   305c0:	00030728 	.word	0x00030728
   305c4:	00030728 	.word	0x00030728
   305c8:	00030728 	.word	0x00030728
   305cc:	00030728 	.word	0x00030728
   305d0:	00030728 	.word	0x00030728
   305d4:	00030728 	.word	0x00030728
   305d8:	00030728 	.word	0x00030728
   305dc:	00030748 	.word	0x00030748
   305e0:	00030728 	.word	0x00030728
   305e4:	00030728 	.word	0x00030728
   305e8:	00030828 	.word	0x00030828
   305ec:	0003081c 	.word	0x0003081c
   305f0:	00030810 	.word	0x00030810
   305f4:	00030800 	.word	0x00030800
   305f8:	0003073c 	.word	0x0003073c
   305fc:	000307f0 	.word	0x000307f0
   30600:	000307e4 	.word	0x000307e4
   30604:	000307d4 	.word	0x000307d4
   30608:	00030728 	.word	0x00030728
   3060c:	00030728 	.word	0x00030728
   30610:	000307c8 	.word	0x000307c8
   30614:	000307bc 	.word	0x000307bc
   30618:	000307b0 	.word	0x000307b0
   3061c:	000307a0 	.word	0x000307a0
   30620:	00030794 	.word	0x00030794
   30624:	00030784 	.word	0x00030784
   30628:	00030778 	.word	0x00030778
   3062c:	00030768 	.word	0x00030768
   30630:	00030728 	.word	0x00030728
   30634:	00030728 	.word	0x00030728
   30638:	00030728 	.word	0x00030728
   3063c:	00030728 	.word	0x00030728
   30640:	00030728 	.word	0x00030728
   30644:	00030728 	.word	0x00030728
   30648:	00030728 	.word	0x00030728
   3064c:	00030728 	.word	0x00030728
   30650:	00030728 	.word	0x00030728
   30654:	00030728 	.word	0x00030728
   30658:	00030728 	.word	0x00030728
   3065c:	00030728 	.word	0x00030728
   30660:	00030728 	.word	0x00030728
   30664:	00030728 	.word	0x00030728
   30668:	00030728 	.word	0x00030728
   3066c:	00030728 	.word	0x00030728
   30670:	00030728 	.word	0x00030728
   30674:	00030728 	.word	0x00030728
   30678:	00030728 	.word	0x00030728
   3067c:	00030728 	.word	0x00030728
   30680:	00030728 	.word	0x00030728
   30684:	00030728 	.word	0x00030728
   30688:	00030728 	.word	0x00030728
   3068c:	00030728 	.word	0x00030728
   30690:	00030728 	.word	0x00030728
   30694:	00030728 	.word	0x00030728
   30698:	00030728 	.word	0x00030728
   3069c:	00030728 	.word	0x00030728
   306a0:	00030728 	.word	0x00030728
   306a4:	00030728 	.word	0x00030728
   306a8:	00030728 	.word	0x00030728
   306ac:	00030728 	.word	0x00030728
   306b0:	00030728 	.word	0x00030728
   306b4:	00030728 	.word	0x00030728
   306b8:	00030728 	.word	0x00030728
   306bc:	00030728 	.word	0x00030728
   306c0:	00030728 	.word	0x00030728
   306c4:	00030728 	.word	0x00030728
   306c8:	00030728 	.word	0x00030728
   306cc:	00030728 	.word	0x00030728
   306d0:	00030728 	.word	0x00030728
   306d4:	00030728 	.word	0x00030728
   306d8:	000308c8 	.word	0x000308c8
   306dc:	0003072c 	.word	0x0003072c
   306e0:	0003075c 	.word	0x0003075c
   306e4:	0003088c 	.word	0x0003088c
   306e8:	00030880 	.word	0x00030880
   306ec:	00030874 	.word	0x00030874
   306f0:	00030868 	.word	0x00030868
   306f4:	0003085c 	.word	0x0003085c
   306f8:	00030728 	.word	0x00030728
   306fc:	00030728 	.word	0x00030728
   30700:	00030850 	.word	0x00030850
   30704:	00030840 	.word	0x00030840
   30708:	00030834 	.word	0x00030834
   3070c:	000308b0 	.word	0x000308b0
   30710:	000308a4 	.word	0x000308a4
   30714:	00030898 	.word	0x00030898
   30718:	000308bc 	.word	0x000308bc
   3071c:	00030720 	.word	0x00030720
   30720:	e3e03020 	mvn	r3, #32
   30724:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   30728:	e12fff1e 	bx	lr
   3072c:	e30f3a8a 	movw	r3, #64138	@ 0xfa8a
   30730:	e34f3fff 	movt	r3, #65535	@ 0xffff
   30734:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30738:	e12fff1e 	bx	lr
   3073c:	e3a03015 	mov	r3, #21
   30740:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30744:	e12fff1e 	bx	lr
   30748:	e3a02000 	mov	r2, #0
   3074c:	e3e03020 	mvn	r3, #32
   30750:	e5c02056 	strb	r2, [r0, #86]	@ 0x56
   30754:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30758:	e12fff1e 	bx	lr
   3075c:	e30537ca 	movw	r3, #22474	@ 0x57ca
   30760:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30764:	e12fff1e 	bx	lr
   30768:	e30a3d55 	movw	r3, #44373	@ 0xad55
   3076c:	e34f3fff 	movt	r3, #65535	@ 0xffff
   30770:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   30774:	e12fff1e 	bx	lr
   30778:	e3003555 	movw	r3, #1365	@ 0x555
   3077c:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   30780:	e12fff1e 	bx	lr
   30784:	e30a3815 	movw	r3, #43029	@ 0xa815
   30788:	e34f3fff 	movt	r3, #65535	@ 0xffff
   3078c:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   30790:	e12fff1e 	bx	lr
   30794:	e3a03015 	mov	r3, #21
   30798:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   3079c:	e12fff1e 	bx	lr
   307a0:	e30a3a80 	movw	r3, #43648	@ 0xaa80
   307a4:	e34f3fff 	movt	r3, #65535	@ 0xffff
   307a8:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   307ac:	e12fff1e 	bx	lr
   307b0:	e3a03d15 	mov	r3, #1344	@ 0x540
   307b4:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   307b8:	e12fff1e 	bx	lr
   307bc:	e3a03b2a 	mov	r3, #43008	@ 0xa800
   307c0:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   307c4:	e12fff1e 	bx	lr
   307c8:	e3a03000 	mov	r3, #0
   307cc:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   307d0:	e12fff1e 	bx	lr
   307d4:	e30a3d55 	movw	r3, #44373	@ 0xad55
   307d8:	e34f3fff 	movt	r3, #65535	@ 0xffff
   307dc:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   307e0:	e12fff1e 	bx	lr
   307e4:	e3003555 	movw	r3, #1365	@ 0x555
   307e8:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   307ec:	e12fff1e 	bx	lr
   307f0:	e30a3815 	movw	r3, #43029	@ 0xa815
   307f4:	e34f3fff 	movt	r3, #65535	@ 0xffff
   307f8:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   307fc:	e12fff1e 	bx	lr
   30800:	e30a3a80 	movw	r3, #43648	@ 0xaa80
   30804:	e34f3fff 	movt	r3, #65535	@ 0xffff
   30808:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   3080c:	e12fff1e 	bx	lr
   30810:	e3a03d15 	mov	r3, #1344	@ 0x540
   30814:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30818:	e12fff1e 	bx	lr
   3081c:	e3a03b2a 	mov	r3, #43008	@ 0xa800
   30820:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30824:	e12fff1e 	bx	lr
   30828:	e3a03000 	mov	r3, #0
   3082c:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30830:	e12fff1e 	bx	lr
   30834:	e30537ca 	movw	r3, #22474	@ 0x57ca
   30838:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   3083c:	e12fff1e 	bx	lr
   30840:	e30f3a8a 	movw	r3, #64138	@ 0xfa8a
   30844:	e34f3fff 	movt	r3, #65535	@ 0xffff
   30848:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   3084c:	e12fff1e 	bx	lr
   30850:	e305328a 	movw	r3, #21130	@ 0x528a
   30854:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   30858:	e12fff1e 	bx	lr
   3085c:	e3e03020 	mvn	r3, #32
   30860:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30864:	e12fff1e 	bx	lr
   30868:	e30537df 	movw	r3, #22495	@ 0x57df
   3086c:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30870:	e12fff1e 	bx	lr
   30874:	e3e03e56 	mvn	r3, #1376	@ 0x560
   30878:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   3087c:	e12fff1e 	bx	lr
   30880:	e305329f 	movw	r3, #21151	@ 0x529f
   30884:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30888:	e12fff1e 	bx	lr
   3088c:	e3e03035 	mvn	r3, #53	@ 0x35
   30890:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   30894:	e12fff1e 	bx	lr
   30898:	e3e03e56 	mvn	r3, #1376	@ 0x560
   3089c:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   308a0:	e12fff1e 	bx	lr
   308a4:	e305329f 	movw	r3, #21151	@ 0x529f
   308a8:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   308ac:	e12fff1e 	bx	lr
   308b0:	e3e03035 	mvn	r3, #53	@ 0x35
   308b4:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   308b8:	e12fff1e 	bx	lr
   308bc:	e30537df 	movw	r3, #22495	@ 0x57df
   308c0:	e1c035b4 	strh	r3, [r0, #84]	@ 0x54
   308c4:	e12fff1e 	bx	lr
   308c8:	e305328a 	movw	r3, #21130	@ 0x528a
   308cc:	e1c035b2 	strh	r3, [r0, #82]	@ 0x52
   308d0:	e12fff1e 	bx	lr
   308d4:	e3a03001 	mov	r3, #1
   308d8:	e5c03056 	strb	r3, [r0, #86]	@ 0x56
   308dc:	e12fff1e 	bx	lr

000308e0 <CScreenDevice::Scroll()>:
   308e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   308e4:	e1a06000 	mov	r6, r0
   308e8:	e280001c 	add	r0, r0, #28
   308ec:	e24dd008 	sub	sp, sp, #8
   308f0:	eb00203c 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   308f4:	e5961040 	ldr	r1, [r6, #64]	@ 0x40
   308f8:	e596302c 	ldr	r3, [r6, #44]	@ 0x2c
   308fc:	e1a04000 	mov	r4, r0
   30900:	e5967044 	ldr	r7, [r6, #68]	@ 0x44
   30904:	e5962024 	ldr	r2, [r6, #36]	@ 0x24
   30908:	e0477001 	sub	r7, r7, r1
   3090c:	e0477000 	sub	r7, r7, r0
   30910:	e1a00083 	lsl	r0, r3, #1
   30914:	e0050193 	mul	r5, r3, r1
   30918:	e0070790 	mul	r7, r0, r7
   3091c:	e0825085 	add	r5, r2, r5, lsl #1
   30920:	e3570000 	cmp	r7, #0
   30924:	1a00002a 	bne	309d4 <CScreenDevice::Scroll()+0xf4>
   30928:	e0020493 	mul	r2, r3, r4
   3092c:	e7fd20d2 	ubfx	r2, r2, #1, #30
   30930:	e2420001 	sub	r0, r2, #1
   30934:	e3520000 	cmp	r2, #0
   30938:	0a000023 	beq	309cc <CScreenDevice::Scroll()+0xec>
   3093c:	e1d6c5b4 	ldrh	ip, [r6, #84]	@ 0x54
   30940:	e7e03155 	ubfx	r3, r5, #2, #1
   30944:	e3500005 	cmp	r0, #5
   30948:	9a000010 	bls	30990 <CScreenDevice::Scroll()+0xb0>
   3094c:	e3530000 	cmp	r3, #0
   30950:	e1a0e005 	mov	lr, r5
   30954:	12420002 	subne	r0, r2, #2
   30958:	e0422003 	sub	r2, r2, r3
   3095c:	eea0cb90 	vdup.32	q8, ip
   30960:	e0853103 	add	r3, r5, r3, lsl #2
   30964:	e1a01122 	lsr	r1, r2, #2
   30968:	148ec004 	strne	ip, [lr], #4
   3096c:	e0831201 	add	r1, r3, r1, lsl #4
   30970:	f4430add 	vst1.64	{d16-d17}, [r3 :64]!
   30974:	e1510003 	cmp	r1, r3
   30978:	1afffffc 	bne	30970 <CScreenDevice::Scroll()+0x90>
   3097c:	e3120003 	tst	r2, #3
   30980:	0a000011 	beq	309cc <CScreenDevice::Scroll()+0xec>
   30984:	e3c22003 	bic	r2, r2, #3
   30988:	e0400002 	sub	r0, r0, r2
   3098c:	e08e5102 	add	r5, lr, r2, lsl #2
   30990:	e3500000 	cmp	r0, #0
   30994:	e585c000 	str	ip, [r5]
   30998:	0a00000b 	beq	309cc <CScreenDevice::Scroll()+0xec>
   3099c:	e3500001 	cmp	r0, #1
   309a0:	e585c004 	str	ip, [r5, #4]
   309a4:	0a000008 	beq	309cc <CScreenDevice::Scroll()+0xec>
   309a8:	e3500002 	cmp	r0, #2
   309ac:	e585c008 	str	ip, [r5, #8]
   309b0:	0a000005 	beq	309cc <CScreenDevice::Scroll()+0xec>
   309b4:	e3500003 	cmp	r0, #3
   309b8:	e585c00c 	str	ip, [r5, #12]
   309bc:	0a000002 	beq	309cc <CScreenDevice::Scroll()+0xec>
   309c0:	e3500004 	cmp	r0, #4
   309c4:	e585c010 	str	ip, [r5, #16]
   309c8:	1585c014 	strne	ip, [r5, #20]
   309cc:	e28dd008 	add	sp, sp, #8
   309d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   309d4:	e0811004 	add	r1, r1, r4
   309d8:	e2868064 	add	r8, r6, #100	@ 0x64
   309dc:	e3a03000 	mov	r3, #0
   309e0:	e58d3004 	str	r3, [sp, #4]
   309e4:	e3a03002 	mov	r3, #2
   309e8:	e58d3000 	str	r3, [sp]
   309ec:	e0222190 	mla	r2, r0, r1, r2
   309f0:	e1a03007 	mov	r3, r7
   309f4:	e1a01005 	mov	r1, r5
   309f8:	e1a00008 	mov	r0, r8
   309fc:	eb002091 	bl	38c48 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
   30a00:	e1a00008 	mov	r0, r8
   30a04:	eb002271 	bl	393d0 <CDMAChannel::Start()>
   30a08:	e3c77003 	bic	r7, r7, #3
   30a0c:	e1a00008 	mov	r0, r8
   30a10:	e0855007 	add	r5, r5, r7
   30a14:	eb0022c3 	bl	39528 <CDMAChannel::Wait()>
   30a18:	e596302c 	ldr	r3, [r6, #44]	@ 0x2c
   30a1c:	eaffffc1 	b	30928 <CScreenDevice::Scroll()+0x48>

00030a20 <CScreenDevice::CursorDown()>:
   30a20:	e92d4070 	push	{r4, r5, r6, lr}
   30a24:	e1a04000 	mov	r4, r0
   30a28:	e280501c 	add	r5, r0, #28
   30a2c:	e1a00005 	mov	r0, r5
   30a30:	eb001fec 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30a34:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   30a38:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
   30a3c:	e0800002 	add	r0, r0, r2
   30a40:	e584004c 	str	r0, [r4, #76]	@ 0x4c
   30a44:	e1500003 	cmp	r0, r3
   30a48:	38bd8070 	popcc	{r4, r5, r6, pc}
   30a4c:	e1a00004 	mov	r0, r4
   30a50:	ebffffa2 	bl	308e0 <CScreenDevice::Scroll()>
   30a54:	e1a00005 	mov	r0, r5
   30a58:	eb001fe2 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30a5c:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   30a60:	e0433000 	sub	r3, r3, r0
   30a64:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   30a68:	e8bd8070 	pop	{r4, r5, r6, pc}

00030a6c <CScreenDevice::NewLine()>:
   30a6c:	e92d4070 	push	{r4, r5, r6, lr}
   30a70:	e1a04000 	mov	r4, r0
   30a74:	e280501c 	add	r5, r0, #28
   30a78:	e3a03000 	mov	r3, #0
   30a7c:	e1a00005 	mov	r0, r5
   30a80:	e5843048 	str	r3, [r4, #72]	@ 0x48
   30a84:	eb001fd7 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30a88:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   30a8c:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
   30a90:	e0800002 	add	r0, r0, r2
   30a94:	e584004c 	str	r0, [r4, #76]	@ 0x4c
   30a98:	e1500003 	cmp	r0, r3
   30a9c:	38bd8070 	popcc	{r4, r5, r6, pc}
   30aa0:	e1a00004 	mov	r0, r4
   30aa4:	ebffff8d 	bl	308e0 <CScreenDevice::Scroll()>
   30aa8:	e1a00005 	mov	r0, r5
   30aac:	eb001fcd 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30ab0:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   30ab4:	e0433000 	sub	r3, r3, r0
   30ab8:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   30abc:	e8bd8070 	pop	{r4, r5, r6, pc}

00030ac0 <CScreenDevice::CursorRight()>:
   30ac0:	e92d4070 	push	{r4, r5, r6, lr}
   30ac4:	e1a04000 	mov	r4, r0
   30ac8:	e280501c 	add	r5, r0, #28
   30acc:	e1a00005 	mov	r0, r5
   30ad0:	eb001fc2 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30ad4:	e5942048 	ldr	r2, [r4, #72]	@ 0x48
   30ad8:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
   30adc:	e0800002 	add	r0, r0, r2
   30ae0:	e5840048 	str	r0, [r4, #72]	@ 0x48
   30ae4:	e1500003 	cmp	r0, r3
   30ae8:	38bd8070 	popcc	{r4, r5, r6, pc}
   30aec:	e3a03000 	mov	r3, #0
   30af0:	e1a00005 	mov	r0, r5
   30af4:	e5843048 	str	r3, [r4, #72]	@ 0x48
   30af8:	eb001fba 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30afc:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   30b00:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
   30b04:	e0800002 	add	r0, r0, r2
   30b08:	e584004c 	str	r0, [r4, #76]	@ 0x4c
   30b0c:	e1500003 	cmp	r0, r3
   30b10:	38bd8070 	popcc	{r4, r5, r6, pc}
   30b14:	e1a00004 	mov	r0, r4
   30b18:	ebffff70 	bl	308e0 <CScreenDevice::Scroll()>
   30b1c:	e1a00005 	mov	r0, r5
   30b20:	eb001fb0 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30b24:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   30b28:	e0433000 	sub	r3, r3, r0
   30b2c:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   30b30:	e8bd8070 	pop	{r4, r5, r6, pc}

00030b34 <CScreenDevice::Tabulator()>:
   30b34:	e92d4070 	push	{r4, r5, r6, lr}
   30b38:	e1a04000 	mov	r4, r0
   30b3c:	e280501c 	add	r5, r0, #28
   30b40:	e1a00005 	mov	r0, r5
   30b44:	eb001fa5 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30b48:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
   30b4c:	e1a00180 	lsl	r0, r0, #3
   30b50:	e5942030 	ldr	r2, [r4, #48]	@ 0x30
   30b54:	e0803003 	add	r3, r0, r3
   30b58:	e733f013 	udiv	r3, r3, r0
   30b5c:	e0030390 	mul	r3, r0, r3
   30b60:	e5843048 	str	r3, [r4, #72]	@ 0x48
   30b64:	e1530002 	cmp	r3, r2
   30b68:	38bd8070 	popcc	{r4, r5, r6, pc}
   30b6c:	e3a03000 	mov	r3, #0
   30b70:	e1a00005 	mov	r0, r5
   30b74:	e5843048 	str	r3, [r4, #72]	@ 0x48
   30b78:	eb001f9a 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30b7c:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   30b80:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
   30b84:	e0800002 	add	r0, r0, r2
   30b88:	e584004c 	str	r0, [r4, #76]	@ 0x4c
   30b8c:	e1500003 	cmp	r0, r3
   30b90:	38bd8070 	popcc	{r4, r5, r6, pc}
   30b94:	e1a00004 	mov	r0, r4
   30b98:	ebffff50 	bl	308e0 <CScreenDevice::Scroll()>
   30b9c:	e1a00005 	mov	r0, r5
   30ba0:	eb001f90 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30ba4:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   30ba8:	e0433000 	sub	r3, r3, r0
   30bac:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   30bb0:	e8bd8070 	pop	{r4, r5, r6, pc}

00030bb4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
   30bb4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30bb8:	e280701c 	add	r7, r0, #28
   30bbc:	e1a06000 	mov	r6, r0
   30bc0:	e24dd00c 	sub	sp, sp, #12
   30bc4:	e3a08000 	mov	r8, #0
   30bc8:	e1a00007 	mov	r0, r7
   30bcc:	e1a09001 	mov	r9, r1
   30bd0:	e1a0a003 	mov	sl, r3
   30bd4:	e1ddb3b0 	ldrh	fp, [sp, #48]	@ 0x30
   30bd8:	e58d2004 	str	r2, [sp, #4]
   30bdc:	eb001f81 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30be0:	e1500008 	cmp	r0, r8
   30be4:	9a000025 	bls	30c80 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xcc>
   30be8:	e59d5004 	ldr	r5, [sp, #4]
   30bec:	e3a04000 	mov	r4, #0
   30bf0:	ea000013 	b	30c44 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x90>
   30bf4:	eb001f7f 	bl	389f8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
   30bf8:	e1a0200b 	mov	r2, fp
   30bfc:	e3500000 	cmp	r0, #0
   30c00:	1a000003 	bne	30c14 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x60>
   30c04:	e5d63056 	ldrb	r3, [r6, #86]	@ 0x56
   30c08:	e3530000 	cmp	r3, #0
   30c0c:	11d625b2 	ldrhne	r2, [r6, #82]	@ 0x52
   30c10:	01d625b4 	ldrheq	r2, [r6, #84]	@ 0x54
   30c14:	e5963030 	ldr	r3, [r6, #48]	@ 0x30
   30c18:	e2844001 	add	r4, r4, #1
   30c1c:	e1550003 	cmp	r5, r3
   30c20:	2a000006 	bcs	30c40 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
   30c24:	e5963034 	ldr	r3, [r6, #52]	@ 0x34
   30c28:	e153000a 	cmp	r3, sl
   30c2c:	8596302c 	ldrhi	r3, [r6, #44]	@ 0x2c
   30c30:	85961024 	ldrhi	r1, [r6, #36]	@ 0x24
   30c34:	80235a93 	mlahi	r3, r3, sl, r5
   30c38:	81a03083 	lslhi	r3, r3, #1
   30c3c:	818120b3 	strhhi	r2, [r1, r3]
   30c40:	e2855001 	add	r5, r5, #1
   30c44:	e1a00007 	mov	r0, r7
   30c48:	eb001f64 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30c4c:	e1a0c000 	mov	ip, r0
   30c50:	e1a03008 	mov	r3, r8
   30c54:	e1a02004 	mov	r2, r4
   30c58:	e1a01009 	mov	r1, r9
   30c5c:	e1a00007 	mov	r0, r7
   30c60:	e15c0004 	cmp	ip, r4
   30c64:	8affffe2 	bhi	30bf4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x40>
   30c68:	e2888001 	add	r8, r8, #1
   30c6c:	e1a00007 	mov	r0, r7
   30c70:	eb001f5c 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30c74:	e28aa001 	add	sl, sl, #1
   30c78:	e1500008 	cmp	r0, r8
   30c7c:	8affffd9 	bhi	30be8 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x34>
   30c80:	e28dd00c 	add	sp, sp, #12
   30c84:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00030c88 <CScreenDevice::DisplayChar(char)>:
   30c88:	e6ef3071 	uxtb	r3, r1
   30c8c:	e353001f 	cmp	r3, #31
   30c90:	912fff1e 	bxls	lr
   30c94:	e92d4030 	push	{r4, r5, lr}
   30c98:	e1a04000 	mov	r4, r0
   30c9c:	e5d00056 	ldrb	r0, [r0, #86]	@ 0x56
   30ca0:	e24dd00c 	sub	sp, sp, #12
   30ca4:	e284501c 	add	r5, r4, #28
   30ca8:	e3500000 	cmp	r0, #0
   30cac:	e5942048 	ldr	r2, [r4, #72]	@ 0x48
   30cb0:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   30cb4:	11d405b4 	ldrhne	r0, [r4, #84]	@ 0x54
   30cb8:	01d405b2 	ldrheq	r0, [r4, #82]	@ 0x52
   30cbc:	e58d0000 	str	r0, [sp]
   30cc0:	e1a00004 	mov	r0, r4
   30cc4:	ebffffba 	bl	30bb4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   30cc8:	e1a00005 	mov	r0, r5
   30ccc:	eb001f43 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30cd0:	e5942048 	ldr	r2, [r4, #72]	@ 0x48
   30cd4:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
   30cd8:	e0800002 	add	r0, r0, r2
   30cdc:	e5840048 	str	r0, [r4, #72]	@ 0x48
   30ce0:	e1500003 	cmp	r0, r3
   30ce4:	2a000001 	bcs	30cf0 <CScreenDevice::DisplayChar(char)+0x68>
   30ce8:	e28dd00c 	add	sp, sp, #12
   30cec:	e8bd8030 	pop	{r4, r5, pc}
   30cf0:	e3a03000 	mov	r3, #0
   30cf4:	e1a00005 	mov	r0, r5
   30cf8:	e5843048 	str	r3, [r4, #72]	@ 0x48
   30cfc:	eb001f39 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30d00:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   30d04:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
   30d08:	e0800002 	add	r0, r0, r2
   30d0c:	e584004c 	str	r0, [r4, #76]	@ 0x4c
   30d10:	e1500003 	cmp	r0, r3
   30d14:	3afffff3 	bcc	30ce8 <CScreenDevice::DisplayChar(char)+0x60>
   30d18:	e1a00004 	mov	r0, r4
   30d1c:	ebfffeef 	bl	308e0 <CScreenDevice::Scroll()>
   30d20:	e1a00005 	mov	r0, r5
   30d24:	eb001f2f 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30d28:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   30d2c:	e0433000 	sub	r3, r3, r0
   30d30:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   30d34:	eaffffeb 	b	30ce8 <CScreenDevice::DisplayChar(char)+0x60>

00030d38 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
   30d38:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   30d3c:	e1a06000 	mov	r6, r0
   30d40:	e1a0a001 	mov	sl, r1
   30d44:	e1a08002 	mov	r8, r2
   30d48:	e3a09000 	mov	r9, #0
   30d4c:	e280701c 	add	r7, r0, #28
   30d50:	e1a00007 	mov	r0, r7
   30d54:	eb001f23 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30d58:	e1500009 	cmp	r0, r9
   30d5c:	98bd87f0 	popls	{r4, r5, r6, r7, r8, r9, sl, pc}
   30d60:	e1a0400a 	mov	r4, sl
   30d64:	e3a05000 	mov	r5, #0
   30d68:	ea00000d 	b	30da4 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x6c>
   30d6c:	e5963030 	ldr	r3, [r6, #48]	@ 0x30
   30d70:	e2855001 	add	r5, r5, #1
   30d74:	e1540003 	cmp	r4, r3
   30d78:	2a000008 	bcs	30da0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
   30d7c:	e5963034 	ldr	r3, [r6, #52]	@ 0x34
   30d80:	e1530008 	cmp	r3, r8
   30d84:	9a000005 	bls	30da0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x68>
   30d88:	e596302c 	ldr	r3, [r6, #44]	@ 0x2c
   30d8c:	e5962024 	ldr	r2, [r6, #36]	@ 0x24
   30d90:	e1d615b4 	ldrh	r1, [r6, #84]	@ 0x54
   30d94:	e0234893 	mla	r3, r3, r8, r4
   30d98:	e1a03083 	lsl	r3, r3, #1
   30d9c:	e18210b3 	strh	r1, [r2, r3]
   30da0:	e2844001 	add	r4, r4, #1
   30da4:	e1a00007 	mov	r0, r7
   30da8:	eb001f0c 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30dac:	e1500005 	cmp	r0, r5
   30db0:	8affffed 	bhi	30d6c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x34>
   30db4:	e2899001 	add	r9, r9, #1
   30db8:	e2888001 	add	r8, r8, #1
   30dbc:	eaffffe3 	b	30d50 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x18>

00030dc0 <CScreenDevice::ClearLineEnd()>:
   30dc0:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
   30dc4:	e92d4070 	push	{r4, r5, r6, lr}
   30dc8:	e5904048 	ldr	r4, [r0, #72]	@ 0x48
   30dcc:	e1540003 	cmp	r4, r3
   30dd0:	28bd8070 	popcs	{r4, r5, r6, pc}
   30dd4:	e1a05000 	mov	r5, r0
   30dd8:	e280601c 	add	r6, r0, #28
   30ddc:	e1a01004 	mov	r1, r4
   30de0:	e595204c 	ldr	r2, [r5, #76]	@ 0x4c
   30de4:	e1a00005 	mov	r0, r5
   30de8:	ebffffd2 	bl	30d38 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   30dec:	e1a00006 	mov	r0, r6
   30df0:	eb001efa 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30df4:	e5953030 	ldr	r3, [r5, #48]	@ 0x30
   30df8:	e0844000 	add	r4, r4, r0
   30dfc:	e1530004 	cmp	r3, r4
   30e00:	8afffff5 	bhi	30ddc <CScreenDevice::ClearLineEnd()+0x1c>
   30e04:	e8bd8070 	pop	{r4, r5, r6, pc}

00030e08 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
   30e08:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30e0c:	e1a05000 	mov	r5, r0
   30e10:	e1a04001 	mov	r4, r1
   30e14:	e280701c 	add	r7, r0, #28
   30e18:	e5956048 	ldr	r6, [r5, #72]	@ 0x48
   30e1c:	e1a00007 	mov	r0, r7
   30e20:	eb001eee 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30e24:	e5953030 	ldr	r3, [r5, #48]	@ 0x30
   30e28:	e0266094 	mla	r6, r4, r0, r6
   30e2c:	e5954048 	ldr	r4, [r5, #72]	@ 0x48
   30e30:	e1560003 	cmp	r6, r3
   30e34:	21a06003 	movcs	r6, r3
   30e38:	e1560004 	cmp	r6, r4
   30e3c:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   30e40:	e1a01004 	mov	r1, r4
   30e44:	e595204c 	ldr	r2, [r5, #76]	@ 0x4c
   30e48:	e1a00005 	mov	r0, r5
   30e4c:	ebffffb9 	bl	30d38 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   30e50:	e1a00007 	mov	r0, r7
   30e54:	eb001ee1 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30e58:	e0844000 	add	r4, r4, r0
   30e5c:	e1560004 	cmp	r6, r4
   30e60:	8afffff6 	bhi	30e40 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x38>
   30e64:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00030e68 <CScreenDevice::EraseChars(unsigned int)>:
   30e68:	e3510000 	cmp	r1, #0
   30e6c:	012fff1e 	bxeq	lr
   30e70:	eaffffe4 	b	30e08 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

00030e74 <CScreenDevice::ClearDisplayEnd()>:
   30e74:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   30e78:	e1a04000 	mov	r4, r0
   30e7c:	e5905048 	ldr	r5, [r0, #72]	@ 0x48
   30e80:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
   30e84:	e280601c 	add	r6, r0, #28
   30e88:	e1550003 	cmp	r5, r3
   30e8c:	2a000009 	bcs	30eb8 <CScreenDevice::ClearDisplayEnd()+0x44>
   30e90:	e1a01005 	mov	r1, r5
   30e94:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   30e98:	e1a00004 	mov	r0, r4
   30e9c:	ebffffa5 	bl	30d38 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   30ea0:	e1a00006 	mov	r0, r6
   30ea4:	eb001ecd 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   30ea8:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
   30eac:	e0855000 	add	r5, r5, r0
   30eb0:	e1550003 	cmp	r5, r3
   30eb4:	3afffff5 	bcc	30e90 <CScreenDevice::ClearDisplayEnd()+0x1c>
   30eb8:	e594504c 	ldr	r5, [r4, #76]	@ 0x4c
   30ebc:	e1a00006 	mov	r0, r6
   30ec0:	eb001ec8 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   30ec4:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
   30ec8:	e0850000 	add	r0, r5, r0
   30ecc:	e594c028 	ldr	ip, [r4, #40]	@ 0x28
   30ed0:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
   30ed4:	e0000093 	mul	r0, r3, r0
   30ed8:	e1a0c0ac 	lsr	ip, ip, #1
   30edc:	e04ce000 	sub	lr, ip, r0
   30ee0:	e35e0000 	cmp	lr, #0
   30ee4:	e1a06080 	lsl	r6, r0, #1
   30ee8:	e0812006 	add	r2, r1, r6
   30eec:	e24e3001 	sub	r3, lr, #1
   30ef0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   30ef4:	e353000d 	cmp	r3, #13
   30ef8:	9a000005 	bls	30f14 <CScreenDevice::ClearDisplayEnd()+0xa0>
   30efc:	e081c08c 	add	ip, r1, ip, lsl #1
   30f00:	e2845054 	add	r5, r4, #84	@ 0x54
   30f04:	e2847056 	add	r7, r4, #86	@ 0x56
   30f08:	e1520007 	cmp	r2, r7
   30f0c:	3155000c 	cmpcc	r5, ip
   30f10:	2a000005 	bcs	30f2c <CScreenDevice::ClearDisplayEnd()+0xb8>
   30f14:	e1d415b4 	ldrh	r1, [r4, #84]	@ 0x54
   30f18:	e2433001 	sub	r3, r3, #1
   30f1c:	e3730001 	cmn	r3, #1
   30f20:	e0c210b2 	strh	r1, [r2], #2
   30f24:	1afffffa 	bne	30f14 <CScreenDevice::ClearDisplayEnd()+0xa0>
   30f28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   30f2c:	e1a0c0a2 	lsr	ip, r2, #1
   30f30:	e26cc000 	rsb	ip, ip, #0
   30f34:	e21c5003 	ands	r5, ip, #3
   30f38:	0a00000d 	beq	30f74 <CScreenDevice::ClearDisplayEnd()+0x100>
   30f3c:	e1d435b4 	ldrh	r3, [r4, #84]	@ 0x54
   30f40:	e31c0002 	tst	ip, #2
   30f44:	e18130b6 	strh	r3, [r1, r6]
   30f48:	02822002 	addeq	r2, r2, #2
   30f4c:	024e3002 	subeq	r3, lr, #2
   30f50:	0a000007 	beq	30f74 <CScreenDevice::ClearDisplayEnd()+0x100>
   30f54:	e3550003 	cmp	r5, #3
   30f58:	e1c230b2 	strh	r3, [r2, #2]
   30f5c:	12822004 	addne	r2, r2, #4
   30f60:	124e3003 	subne	r3, lr, #3
   30f64:	01d435b4 	ldrheq	r3, [r4, #84]	@ 0x54
   30f68:	01c230b4 	strheq	r3, [r2, #4]
   30f6c:	02822006 	addeq	r2, r2, #6
   30f70:	024e3004 	subeq	r3, lr, #4
   30f74:	e0800005 	add	r0, r0, r5
   30f78:	e04ee005 	sub	lr, lr, r5
   30f7c:	e0811080 	add	r1, r1, r0, lsl #1
   30f80:	e1d405b4 	ldrh	r0, [r4, #84]	@ 0x54
   30f84:	e1a0c1ae 	lsr	ip, lr, #3
   30f88:	eea00bb0 	vdup.16	q8, r0
   30f8c:	e3a00000 	mov	r0, #0
   30f90:	e2800001 	add	r0, r0, #1
   30f94:	f4410add 	vst1.64	{d16-d17}, [r1 :64]!
   30f98:	e150000c 	cmp	r0, ip
   30f9c:	1afffffb 	bne	30f90 <CScreenDevice::ClearDisplayEnd()+0x11c>
   30fa0:	e3ce1007 	bic	r1, lr, #7
   30fa4:	e31e0007 	tst	lr, #7
   30fa8:	e0433001 	sub	r3, r3, r1
   30fac:	e1a01081 	lsl	r1, r1, #1
   30fb0:	e0820001 	add	r0, r2, r1
   30fb4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   30fb8:	e3530000 	cmp	r3, #0
   30fbc:	e1d4c5b4 	ldrh	ip, [r4, #84]	@ 0x54
   30fc0:	e182c0b1 	strh	ip, [r2, r1]
   30fc4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   30fc8:	e3530001 	cmp	r3, #1
   30fcc:	e1c0c0b2 	strh	ip, [r0, #2]
   30fd0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   30fd4:	e3530002 	cmp	r3, #2
   30fd8:	e1d425b4 	ldrh	r2, [r4, #84]	@ 0x54
   30fdc:	e1c020b4 	strh	r2, [r0, #4]
   30fe0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   30fe4:	e3530003 	cmp	r3, #3
   30fe8:	e1c020b6 	strh	r2, [r0, #6]
   30fec:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   30ff0:	e3530004 	cmp	r3, #4
   30ff4:	e1d425b4 	ldrh	r2, [r4, #84]	@ 0x54
   30ff8:	e1c020b8 	strh	r2, [r0, #8]
   30ffc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   31000:	e3530005 	cmp	r3, #5
   31004:	e1c020ba 	strh	r2, [r0, #10]
   31008:	11d435b4 	ldrhne	r3, [r4, #84]	@ 0x54
   3100c:	11c030bc 	strhne	r3, [r0, #12]
   31010:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00031014 <CScreenDevice::Initialize()>:
   31014:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31018:	e1a04000 	mov	r4, r0
   3101c:	e5d05010 	ldrb	r5, [r0, #16]
   31020:	e24dd010 	sub	sp, sp, #16
   31024:	e3550000 	cmp	r5, #0
   31028:	0a00002f 	beq	310ec <CScreenDevice::Initialize()+0xd8>
   3102c:	e5900008 	ldr	r0, [r0, #8]
   31030:	e284601c 	add	r6, r4, #28
   31034:	e594300c 	ldr	r3, [r4, #12]
   31038:	e5840030 	str	r0, [r4, #48]	@ 0x30
   3103c:	e584002c 	str	r0, [r4, #44]	@ 0x2c
   31040:	e5843034 	str	r3, [r4, #52]	@ 0x34
   31044:	e0000093 	mul	r0, r3, r0
   31048:	e370010f 	cmn	r0, #-1073741821	@ 0xc0000003
   3104c:	e1a00080 	lsl	r0, r0, #1
   31050:	e5840028 	str	r0, [r4, #40]	@ 0x28
   31054:	23e00000 	mvncs	r0, #0
   31058:	eb001437 	bl	3613c <operator new[](unsigned int)>
   3105c:	e5840024 	str	r0, [r4, #36]	@ 0x24
   31060:	e5945034 	ldr	r5, [r4, #52]	@ 0x34
   31064:	e1a00006 	mov	r0, r6
   31068:	eb001e5e 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   3106c:	e1a03000 	mov	r3, r0
   31070:	e1a00006 	mov	r0, r6
   31074:	e735f315 	udiv	r5, r5, r3
   31078:	eb001e5a 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   3107c:	e1a03000 	mov	r3, r0
   31080:	e5941040 	ldr	r1, [r4, #64]	@ 0x40
   31084:	e3a02000 	mov	r2, #0
   31088:	e1a00004 	mov	r0, r4
   3108c:	e584104c 	str	r1, [r4, #76]	@ 0x4c
   31090:	e0030593 	mul	r3, r3, r5
   31094:	e5842048 	str	r2, [r4, #72]	@ 0x48
   31098:	e5843038 	str	r3, [r4, #56]	@ 0x38
   3109c:	e5843044 	str	r3, [r4, #68]	@ 0x44
   310a0:	ebffff73 	bl	30e74 <CScreenDevice::ClearDisplayEnd()>
   310a4:	e5d43050 	ldrb	r3, [r4, #80]	@ 0x50
   310a8:	e3530000 	cmp	r3, #0
   310ac:	1a00000b 	bne	310e0 <CScreenDevice::Initialize()+0xcc>
   310b0:	ebffeedd 	bl	2cc2c <CDeviceNameService::Get()>
   310b4:	e5942014 	ldr	r2, [r4, #20]
   310b8:	e59f1144 	ldr	r1, [pc, #324]	@ 31204 <CScreenDevice::Initialize()+0x1f0>
   310bc:	e3a03000 	mov	r3, #0
   310c0:	e2822001 	add	r2, r2, #1
   310c4:	ebffef16 	bl	2cd24 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>
   310c8:	e2505000 	subs	r5, r0, #0
   310cc:	0a000044 	beq	311e4 <CScreenDevice::Initialize()+0x1d0>
   310d0:	e3a05001 	mov	r5, #1
   310d4:	e1a00005 	mov	r0, r5
   310d8:	e28dd010 	add	sp, sp, #16
   310dc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   310e0:	e1a00004 	mov	r0, r4
   310e4:	ebfffbcd 	bl	30020 <CScreenDevice::InvertCursor() [clone .part.0]>
   310e8:	eafffff0 	b	310b0 <CScreenDevice::Initialize()+0x9c>
   310ec:	e3a00098 	mov	r0, #152	@ 0x98
   310f0:	eb00140b 	bl	36124 <operator new(unsigned int)>
   310f4:	e5943014 	ldr	r3, [r4, #20]
   310f8:	e58d3008 	str	r3, [sp, #8]
   310fc:	e1a06000 	mov	r6, r0
   31100:	e58d500c 	str	r5, [sp, #12]
   31104:	e3a03010 	mov	r3, #16
   31108:	e58d5004 	str	r5, [sp, #4]
   3110c:	e58d5000 	str	r5, [sp]
   31110:	e594200c 	ldr	r2, [r4, #12]
   31114:	e5941008 	ldr	r1, [r4, #8]
   31118:	eb001c73 	bl	382ec <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
   3111c:	e1a00006 	mov	r0, r6
   31120:	e5846018 	str	r6, [r4, #24]
   31124:	eb001d36 	bl	38604 <CBcmFrameBuffer::Initialize()>
   31128:	e3500000 	cmp	r0, #0
   3112c:	0affffe8 	beq	310d4 <CScreenDevice::Initialize()+0xc0>
   31130:	e5940018 	ldr	r0, [r4, #24]
   31134:	eb001cfa 	bl	38524 <CBcmFrameBuffer::GetDepth() const>
   31138:	e3500010 	cmp	r0, #16
   3113c:	1affffe4 	bne	310d4 <CScreenDevice::Initialize()+0xc0>
   31140:	e5940018 	ldr	r0, [r4, #24]
   31144:	e284601c 	add	r6, r4, #28
   31148:	eb001cf7 	bl	3852c <CBcmFrameBuffer::GetBuffer() const>
   3114c:	e1a03000 	mov	r3, r0
   31150:	e5940018 	ldr	r0, [r4, #24]
   31154:	e5843024 	str	r3, [r4, #36]	@ 0x24
   31158:	eb001cf5 	bl	38534 <CBcmFrameBuffer::GetSize() const>
   3115c:	e1a03000 	mov	r3, r0
   31160:	e5940018 	ldr	r0, [r4, #24]
   31164:	e5843028 	str	r3, [r4, #40]	@ 0x28
   31168:	eb001ceb 	bl	3851c <CBcmFrameBuffer::GetPitch() const>
   3116c:	e1a03000 	mov	r3, r0
   31170:	e5940018 	ldr	r0, [r4, #24]
   31174:	e584302c 	str	r3, [r4, #44]	@ 0x2c
   31178:	eb001cdf 	bl	384fc <CBcmFrameBuffer::GetWidth() const>
   3117c:	e1a03000 	mov	r3, r0
   31180:	e5940018 	ldr	r0, [r4, #24]
   31184:	e5843030 	str	r3, [r4, #48]	@ 0x30
   31188:	eb001cdd 	bl	38504 <CBcmFrameBuffer::GetHeight() const>
   3118c:	e5840034 	str	r0, [r4, #52]	@ 0x34
   31190:	e1a00006 	mov	r0, r6
   31194:	eb001e11 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   31198:	e1a08000 	mov	r8, r0
   3119c:	e1a00006 	mov	r0, r6
   311a0:	eb001e10 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   311a4:	e1a07000 	mov	r7, r0
   311a8:	e1a00006 	mov	r0, r6
   311ac:	eb001e0f 	bl	389f0 <CCharGenerator::GetUnderline() const>
   311b0:	e0477000 	sub	r7, r7, r0
   311b4:	e0000798 	mul	r0, r8, r7
   311b8:	e3700113 	cmn	r0, #-1073741820	@ 0xc0000004
   311bc:	91a00080 	lslls	r0, r0, #1
   311c0:	83e00000 	mvnhi	r0, #0
   311c4:	eb0013dc 	bl	3613c <operator new[](unsigned int)>
   311c8:	e594302c 	ldr	r3, [r4, #44]	@ 0x2c
   311cc:	e5840020 	str	r0, [r4, #32]
   311d0:	e3130003 	tst	r3, #3
   311d4:	1affffbe 	bne	310d4 <CScreenDevice::Initialize()+0xc0>
   311d8:	e1a030a3 	lsr	r3, r3, #1
   311dc:	e584302c 	str	r3, [r4, #44]	@ 0x2c
   311e0:	eaffff9e 	b	31060 <CScreenDevice::Initialize()+0x4c>
   311e4:	ebffee90 	bl	2cc2c <CDeviceNameService::Get()>
   311e8:	e5942014 	ldr	r2, [r4, #20]
   311ec:	e59f1010 	ldr	r1, [pc, #16]	@ 31204 <CScreenDevice::Initialize()+0x1f0>
   311f0:	e1a03004 	mov	r3, r4
   311f4:	e2822001 	add	r2, r2, #1
   311f8:	e58d5000 	str	r5, [sp]
   311fc:	ebffee96 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   31200:	eaffffb2 	b	310d0 <CScreenDevice::Initialize()+0xbc>
   31204:	00042910 	.word	0x00042910

00031208 <CScreenDevice::Resize(unsigned int, unsigned int)>:
   31208:	e5d03010 	ldrb	r3, [r0, #16]
   3120c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   31210:	e1a04000 	mov	r4, r0
   31214:	e1a06001 	mov	r6, r1
   31218:	e1a05002 	mov	r5, r2
   3121c:	e3530000 	cmp	r3, #0
   31220:	0a000003 	beq	31234 <CScreenDevice::Resize(unsigned int, unsigned int)+0x2c>
   31224:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   31228:	e3500000 	cmp	r0, #0
   3122c:	0a000000 	beq	31234 <CScreenDevice::Resize(unsigned int, unsigned int)+0x2c>
   31230:	eb0013cd 	bl	3616c <operator delete[](void*)>
   31234:	e5947018 	ldr	r7, [r4, #24]
   31238:	e3a03000 	mov	r3, #0
   3123c:	e5843024 	str	r3, [r4, #36]	@ 0x24
   31240:	e1570003 	cmp	r7, r3
   31244:	0a000004 	beq	3125c <CScreenDevice::Resize(unsigned int, unsigned int)+0x54>
   31248:	e1a00007 	mov	r0, r7
   3124c:	eb001c7d 	bl	38448 <CBcmFrameBuffer::~CBcmFrameBuffer()>
   31250:	e3a01098 	mov	r1, #152	@ 0x98
   31254:	e1a00007 	mov	r0, r7
   31258:	eb0013c9 	bl	36184 <operator delete(void*, unsigned int)>
   3125c:	e5940020 	ldr	r0, [r4, #32]
   31260:	e3a03000 	mov	r3, #0
   31264:	e5843018 	str	r3, [r4, #24]
   31268:	e1500003 	cmp	r0, r3
   3126c:	0a000000 	beq	31274 <CScreenDevice::Resize(unsigned int, unsigned int)+0x6c>
   31270:	eb0013bd 	bl	3616c <operator delete[](void*)>
   31274:	e3a03000 	mov	r3, #0
   31278:	e3a02001 	mov	r2, #1
   3127c:	e34f2fdf 	movt	r2, #65503	@ 0xffdf
   31280:	e5843054 	str	r3, [r4, #84]	@ 0x54
   31284:	e5842050 	str	r2, [r4, #80]	@ 0x50
   31288:	e1a00004 	mov	r0, r4
   3128c:	e5843020 	str	r3, [r4, #32]
   31290:	e5846008 	str	r6, [r4, #8]
   31294:	e584500c 	str	r5, [r4, #12]
   31298:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   3129c:	e5843040 	str	r3, [r4, #64]	@ 0x40
   312a0:	e5843048 	str	r3, [r4, #72]	@ 0x48
   312a4:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   312a8:	e5c43060 	strb	r3, [r4, #96]	@ 0x60
   312ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   312b0:	eaffff57 	b	31014 <CScreenDevice::Initialize()>

000312b4 <CScreenDevice::Write(char)>:
   312b4:	e92d4070 	push	{r4, r5, r6, lr}
   312b8:	e1a04000 	mov	r4, r0
   312bc:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   312c0:	e24dd008 	sub	sp, sp, #8
   312c4:	e3530007 	cmp	r3, #7
   312c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   312cc:	ea000009 	b	312f8 <CScreenDevice::Write(char)+0x44>
   312d0:	00031340 	.word	0x00031340
   312d4:	000312f0 	.word	0x000312f0
   312d8:	000313a0 	.word	0x000313a0
   312dc:	000313f8 	.word	0x000313f8
   312e0:	000314d4 	.word	0x000314d4
   312e4:	000314f4 	.word	0x000314f4
   312e8:	00031514 	.word	0x00031514
   312ec:	00031308 	.word	0x00031308
   312f0:	e351005b 	cmp	r1, #91	@ 0x5b
   312f4:	0a0000ce 	beq	31634 <CScreenDevice::Write(char)+0x380>
   312f8:	e3a03000 	mov	r3, #0
   312fc:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   31300:	e28dd008 	add	sp, sp, #8
   31304:	e8bd8070 	pop	{r4, r5, r6, pc}
   31308:	e3c13004 	bic	r3, r1, #4
   3130c:	e3530068 	cmp	r3, #104	@ 0x68
   31310:	0a00008e 	beq	31550 <CScreenDevice::Write(char)+0x29c>
   31314:	e2411030 	sub	r1, r1, #48	@ 0x30
   31318:	e6ef3071 	uxtb	r3, r1
   3131c:	e3530009 	cmp	r3, #9
   31320:	8afffff4 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   31324:	e5903058 	ldr	r3, [r0, #88]	@ 0x58
   31328:	e3a0200a 	mov	r2, #10
   3132c:	e0211392 	mla	r1, r2, r3, r1
   31330:	e5801058 	str	r1, [r0, #88]	@ 0x58
   31334:	e3510063 	cmp	r1, #99	@ 0x63
   31338:	8affffee 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   3133c:	eaffffef 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31340:	e2413008 	sub	r3, r1, #8
   31344:	e3530013 	cmp	r3, #19
   31348:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   3134c:	ea000091 	b	31598 <CScreenDevice::Write(char)+0x2e4>
   31350:	000316c4 	.word	0x000316c4
   31354:	000316b8 	.word	0x000316b8
   31358:	00031688 	.word	0x00031688
   3135c:	00031598 	.word	0x00031598
   31360:	00031598 	.word	0x00031598
   31364:	0003167c 	.word	0x0003167c
   31368:	00031598 	.word	0x00031598
   3136c:	00031598 	.word	0x00031598
   31370:	00031598 	.word	0x00031598
   31374:	00031598 	.word	0x00031598
   31378:	00031598 	.word	0x00031598
   3137c:	00031598 	.word	0x00031598
   31380:	00031598 	.word	0x00031598
   31384:	00031598 	.word	0x00031598
   31388:	00031598 	.word	0x00031598
   3138c:	00031598 	.word	0x00031598
   31390:	00031598 	.word	0x00031598
   31394:	00031598 	.word	0x00031598
   31398:	00031598 	.word	0x00031598
   3139c:	00031670 	.word	0x00031670
   313a0:	e241303f 	sub	r3, r1, #63	@ 0x3f
   313a4:	e3530011 	cmp	r3, #17
   313a8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   313ac:	ea0000a7 	b	31650 <CScreenDevice::Write(char)+0x39c>
   313b0:	000316d0 	.word	0x000316d0
   313b4:	00031650 	.word	0x00031650
   313b8:	00031720 	.word	0x00031720
   313bc:	000316dc 	.word	0x000316dc
   313c0:	000317c0 	.word	0x000317c0
   313c4:	000317b0 	.word	0x000317b0
   313c8:	00031650 	.word	0x00031650
   313cc:	00031650 	.word	0x00031650
   313d0:	00031650 	.word	0x00031650
   313d4:	00031798 	.word	0x00031798
   313d8:	00031650 	.word	0x00031650
   313dc:	00031788 	.word	0x00031788
   313e0:	00031748 	.word	0x00031748
   313e4:	000312f8 	.word	0x000312f8
   313e8:	000312f8 	.word	0x000312f8
   313ec:	00031650 	.word	0x00031650
   313f0:	00031650 	.word	0x00031650
   313f4:	000312f8 	.word	0x000312f8
   313f8:	e241303b 	sub	r3, r1, #59	@ 0x3b
   313fc:	e3530032 	cmp	r3, #50	@ 0x32
   31400:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   31404:	ea000058 	b	3156c <CScreenDevice::Write(char)+0x2b8>
   31408:	00031814 	.word	0x00031814
   3140c:	0003156c 	.word	0x0003156c
   31410:	0003156c 	.word	0x0003156c
   31414:	0003156c 	.word	0x0003156c
   31418:	0003156c 	.word	0x0003156c
   3141c:	0003156c 	.word	0x0003156c
   31420:	0003156c 	.word	0x0003156c
   31424:	0003156c 	.word	0x0003156c
   31428:	0003156c 	.word	0x0003156c
   3142c:	0003156c 	.word	0x0003156c
   31430:	0003156c 	.word	0x0003156c
   31434:	0003156c 	.word	0x0003156c
   31438:	0003156c 	.word	0x0003156c
   3143c:	0003156c 	.word	0x0003156c
   31440:	0003156c 	.word	0x0003156c
   31444:	0003156c 	.word	0x0003156c
   31448:	0003156c 	.word	0x0003156c
   3144c:	000312f8 	.word	0x000312f8
   31450:	000312f8 	.word	0x000312f8
   31454:	0003156c 	.word	0x0003156c
   31458:	0003156c 	.word	0x0003156c
   3145c:	000312f8 	.word	0x000312f8
   31460:	0003156c 	.word	0x0003156c
   31464:	0003156c 	.word	0x0003156c
   31468:	0003156c 	.word	0x0003156c
   3146c:	0003156c 	.word	0x0003156c
   31470:	0003156c 	.word	0x0003156c
   31474:	0003156c 	.word	0x0003156c
   31478:	0003156c 	.word	0x0003156c
   3147c:	00031800 	.word	0x00031800
   31480:	0003156c 	.word	0x0003156c
   31484:	0003156c 	.word	0x0003156c
   31488:	0003156c 	.word	0x0003156c
   3148c:	0003156c 	.word	0x0003156c
   31490:	0003156c 	.word	0x0003156c
   31494:	0003156c 	.word	0x0003156c
   31498:	0003156c 	.word	0x0003156c
   3149c:	0003156c 	.word	0x0003156c
   314a0:	0003156c 	.word	0x0003156c
   314a4:	0003156c 	.word	0x0003156c
   314a8:	0003156c 	.word	0x0003156c
   314ac:	0003156c 	.word	0x0003156c
   314b0:	0003156c 	.word	0x0003156c
   314b4:	0003156c 	.word	0x0003156c
   314b8:	0003156c 	.word	0x0003156c
   314bc:	000317d0 	.word	0x000317d0
   314c0:	0003156c 	.word	0x0003156c
   314c4:	0003156c 	.word	0x0003156c
   314c8:	0003156c 	.word	0x0003156c
   314cc:	000317d0 	.word	0x000317d0
   314d0:	000317ec 	.word	0x000317ec
   314d4:	e2411030 	sub	r1, r1, #48	@ 0x30
   314d8:	e6ef3071 	uxtb	r3, r1
   314dc:	e3530009 	cmp	r3, #9
   314e0:	8affff84 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   314e4:	e3a03007 	mov	r3, #7
   314e8:	e5801058 	str	r1, [r0, #88]	@ 0x58
   314ec:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   314f0:	eaffff82 	b	31300 <CScreenDevice::Write(char)+0x4c>
   314f4:	e2411030 	sub	r1, r1, #48	@ 0x30
   314f8:	e6ef3071 	uxtb	r3, r1
   314fc:	e3530009 	cmp	r3, #9
   31500:	8affff7c 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   31504:	e3a03006 	mov	r3, #6
   31508:	e580105c 	str	r1, [r0, #92]	@ 0x5c
   3150c:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   31510:	eaffff7a 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31514:	e3510048 	cmp	r1, #72	@ 0x48
   31518:	0a0000c0 	beq	31820 <CScreenDevice::Write(char)+0x56c>
   3151c:	e3510072 	cmp	r1, #114	@ 0x72
   31520:	0a000046 	beq	31640 <CScreenDevice::Write(char)+0x38c>
   31524:	e2411030 	sub	r1, r1, #48	@ 0x30
   31528:	e6ef3071 	uxtb	r3, r1
   3152c:	e3530009 	cmp	r3, #9
   31530:	8affff70 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   31534:	e590305c 	ldr	r3, [r0, #92]	@ 0x5c
   31538:	e3a0200a 	mov	r2, #10
   3153c:	e0231392 	mla	r3, r2, r3, r1
   31540:	e580305c 	str	r3, [r0, #92]	@ 0x5c
   31544:	e35300c7 	cmp	r3, #199	@ 0xc7
   31548:	8affff6a 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   3154c:	eaffff6b 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31550:	e5903058 	ldr	r3, [r0, #88]	@ 0x58
   31554:	e3530019 	cmp	r3, #25
   31558:	02411068 	subeq	r1, r1, #104	@ 0x68
   3155c:	016f1f11 	clzeq	r1, r1
   31560:	01a012a1 	lsreq	r1, r1, #5
   31564:	05c01050 	strbeq	r1, [r0, #80]	@ 0x50
   31568:	eaffff62 	b	312f8 <CScreenDevice::Write(char)+0x44>
   3156c:	e2411030 	sub	r1, r1, #48	@ 0x30
   31570:	e6ef3071 	uxtb	r3, r1
   31574:	e3530009 	cmp	r3, #9
   31578:	8affff5e 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   3157c:	e5903058 	ldr	r3, [r0, #88]	@ 0x58
   31580:	e3a0200a 	mov	r2, #10
   31584:	e0231392 	mla	r3, r2, r3, r1
   31588:	e5803058 	str	r3, [r0, #88]	@ 0x58
   3158c:	e35300c7 	cmp	r3, #199	@ 0xc7
   31590:	8affff58 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   31594:	eaffff59 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31598:	e6ef3071 	uxtb	r3, r1
   3159c:	e353001f 	cmp	r3, #31
   315a0:	9affff56 	bls	31300 <CScreenDevice::Write(char)+0x4c>
   315a4:	e5d00056 	ldrb	r0, [r0, #86]	@ 0x56
   315a8:	e284501c 	add	r5, r4, #28
   315ac:	e5942048 	ldr	r2, [r4, #72]	@ 0x48
   315b0:	e3500000 	cmp	r0, #0
   315b4:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   315b8:	11d405b4 	ldrhne	r0, [r4, #84]	@ 0x54
   315bc:	01d405b2 	ldrheq	r0, [r4, #82]	@ 0x52
   315c0:	e58d0000 	str	r0, [sp]
   315c4:	e1a00004 	mov	r0, r4
   315c8:	ebfffd79 	bl	30bb4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   315cc:	e1a00005 	mov	r0, r5
   315d0:	eb001d02 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   315d4:	e5943048 	ldr	r3, [r4, #72]	@ 0x48
   315d8:	e5942030 	ldr	r2, [r4, #48]	@ 0x30
   315dc:	e0803003 	add	r3, r0, r3
   315e0:	e5843048 	str	r3, [r4, #72]	@ 0x48
   315e4:	e1530002 	cmp	r3, r2
   315e8:	3affff44 	bcc	31300 <CScreenDevice::Write(char)+0x4c>
   315ec:	e3a03000 	mov	r3, #0
   315f0:	e1a00005 	mov	r0, r5
   315f4:	e5843048 	str	r3, [r4, #72]	@ 0x48
   315f8:	eb001cfa 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   315fc:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   31600:	e5942044 	ldr	r2, [r4, #68]	@ 0x44
   31604:	e0803003 	add	r3, r0, r3
   31608:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   3160c:	e1530002 	cmp	r3, r2
   31610:	3affff3a 	bcc	31300 <CScreenDevice::Write(char)+0x4c>
   31614:	e1a00004 	mov	r0, r4
   31618:	ebfffcb0 	bl	308e0 <CScreenDevice::Scroll()>
   3161c:	e1a00005 	mov	r0, r5
   31620:	eb001cf0 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   31624:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   31628:	e0433000 	sub	r3, r3, r0
   3162c:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   31630:	eaffff32 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31634:	e3a03002 	mov	r3, #2
   31638:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   3163c:	eaffff2f 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31640:	e590205c 	ldr	r2, [r0, #92]	@ 0x5c
   31644:	e5901058 	ldr	r1, [r0, #88]	@ 0x58
   31648:	ebfffba8 	bl	304f0 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
   3164c:	eaffff29 	b	312f8 <CScreenDevice::Write(char)+0x44>
   31650:	e2411030 	sub	r1, r1, #48	@ 0x30
   31654:	e6ef3071 	uxtb	r3, r1
   31658:	e3530009 	cmp	r3, #9
   3165c:	8affff25 	bhi	312f8 <CScreenDevice::Write(char)+0x44>
   31660:	e3a03003 	mov	r3, #3
   31664:	e5801058 	str	r1, [r0, #88]	@ 0x58
   31668:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   3166c:	eaffff23 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31670:	e3a03001 	mov	r3, #1
   31674:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   31678:	eaffff20 	b	31300 <CScreenDevice::Write(char)+0x4c>
   3167c:	e3a03000 	mov	r3, #0
   31680:	e5803048 	str	r3, [r0, #72]	@ 0x48
   31684:	eaffff1d 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31688:	e280501c 	add	r5, r0, #28
   3168c:	e3a03000 	mov	r3, #0
   31690:	e1a00005 	mov	r0, r5
   31694:	e5843048 	str	r3, [r4, #72]	@ 0x48
   31698:	eb001cd2 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   3169c:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   316a0:	e5943044 	ldr	r3, [r4, #68]	@ 0x44
   316a4:	e0800002 	add	r0, r0, r2
   316a8:	e584004c 	str	r0, [r4, #76]	@ 0x4c
   316ac:	e1500003 	cmp	r0, r3
   316b0:	3affff12 	bcc	31300 <CScreenDevice::Write(char)+0x4c>
   316b4:	eaffffd6 	b	31614 <CScreenDevice::Write(char)+0x360>
   316b8:	e28dd008 	add	sp, sp, #8
   316bc:	e8bd4070 	pop	{r4, r5, r6, lr}
   316c0:	eafffd1b 	b	30b34 <CScreenDevice::Tabulator()>
   316c4:	e28dd008 	add	sp, sp, #8
   316c8:	e8bd4070 	pop	{r4, r5, r6, lr}
   316cc:	eafffb35 	b	303a8 <CScreenDevice::CursorLeft()>
   316d0:	e3a03004 	mov	r3, #4
   316d4:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   316d8:	eaffff08 	b	31300 <CScreenDevice::Write(char)+0x4c>
   316dc:	e280501c 	add	r5, r0, #28
   316e0:	e1a00005 	mov	r0, r5
   316e4:	eb001cbf 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   316e8:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   316ec:	e5942044 	ldr	r2, [r4, #68]	@ 0x44
   316f0:	e0803003 	add	r3, r0, r3
   316f4:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   316f8:	e1530002 	cmp	r3, r2
   316fc:	3afffefd 	bcc	312f8 <CScreenDevice::Write(char)+0x44>
   31700:	e1a00004 	mov	r0, r4
   31704:	ebfffc75 	bl	308e0 <CScreenDevice::Scroll()>
   31708:	e1a00005 	mov	r0, r5
   3170c:	eb001cb5 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   31710:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   31714:	e0433000 	sub	r3, r3, r0
   31718:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   3171c:	eafffef5 	b	312f8 <CScreenDevice::Write(char)+0x44>
   31720:	e590204c 	ldr	r2, [r0, #76]	@ 0x4c
   31724:	e5903040 	ldr	r3, [r0, #64]	@ 0x40
   31728:	e1520003 	cmp	r2, r3
   3172c:	9afffef1 	bls	312f8 <CScreenDevice::Write(char)+0x44>
   31730:	e280001c 	add	r0, r0, #28
   31734:	eb001cab 	bl	389e8 <CCharGenerator::GetCharHeight() const>
   31738:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   3173c:	e0433000 	sub	r3, r3, r0
   31740:	e584304c 	str	r3, [r4, #76]	@ 0x4c
   31744:	eafffeeb 	b	312f8 <CScreenDevice::Write(char)+0x44>
   31748:	e5905048 	ldr	r5, [r0, #72]	@ 0x48
   3174c:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
   31750:	e1550003 	cmp	r5, r3
   31754:	2afffee7 	bcs	312f8 <CScreenDevice::Write(char)+0x44>
   31758:	e280601c 	add	r6, r0, #28
   3175c:	e1a01005 	mov	r1, r5
   31760:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   31764:	e1a00004 	mov	r0, r4
   31768:	ebfffd72 	bl	30d38 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
   3176c:	e1a00006 	mov	r0, r6
   31770:	eb001c9a 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   31774:	e5943030 	ldr	r3, [r4, #48]	@ 0x30
   31778:	e0855000 	add	r5, r5, r0
   3177c:	e1550003 	cmp	r5, r3
   31780:	3afffff5 	bcc	3175c <CScreenDevice::Write(char)+0x4a8>
   31784:	eafffedb 	b	312f8 <CScreenDevice::Write(char)+0x44>
   31788:	ebfffdb9 	bl	30e74 <CScreenDevice::ClearDisplayEnd()>
   3178c:	e3a03000 	mov	r3, #0
   31790:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   31794:	eafffed9 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31798:	e5902040 	ldr	r2, [r0, #64]	@ 0x40
   3179c:	e3a03000 	mov	r3, #0
   317a0:	e580204c 	str	r2, [r0, #76]	@ 0x4c
   317a4:	e5803048 	str	r3, [r0, #72]	@ 0x48
   317a8:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   317ac:	eafffed3 	b	31300 <CScreenDevice::Write(char)+0x4c>
   317b0:	ebfffafc 	bl	303a8 <CScreenDevice::CursorLeft()>
   317b4:	e3a03000 	mov	r3, #0
   317b8:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   317bc:	eafffecf 	b	31300 <CScreenDevice::Write(char)+0x4c>
   317c0:	ebfffcbe 	bl	30ac0 <CScreenDevice::CursorRight()>
   317c4:	e3a03000 	mov	r3, #0
   317c8:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   317cc:	eafffecb 	b	31300 <CScreenDevice::Write(char)+0x4c>
   317d0:	e5903058 	ldr	r3, [r0, #88]	@ 0x58
   317d4:	e3530004 	cmp	r3, #4
   317d8:	02411068 	subeq	r1, r1, #104	@ 0x68
   317dc:	016f1f11 	clzeq	r1, r1
   317e0:	01a012a1 	lsreq	r1, r1, #5
   317e4:	05c01057 	strbeq	r1, [r0, #87]	@ 0x57
   317e8:	eafffec2 	b	312f8 <CScreenDevice::Write(char)+0x44>
   317ec:	e5901058 	ldr	r1, [r0, #88]	@ 0x58
   317f0:	ebfffb5b 	bl	30564 <CScreenDevice::SetStandoutMode(unsigned int)>
   317f4:	e3a03000 	mov	r3, #0
   317f8:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   317fc:	eafffebf 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31800:	e5901058 	ldr	r1, [r0, #88]	@ 0x58
   31804:	e3510000 	cmp	r1, #0
   31808:	0afffeba 	beq	312f8 <CScreenDevice::Write(char)+0x44>
   3180c:	ebfffd7d 	bl	30e08 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
   31810:	eafffeb8 	b	312f8 <CScreenDevice::Write(char)+0x44>
   31814:	e3a03005 	mov	r3, #5
   31818:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   3181c:	eafffeb7 	b	31300 <CScreenDevice::Write(char)+0x4c>
   31820:	e590205c 	ldr	r2, [r0, #92]	@ 0x5c
   31824:	e5901058 	ldr	r1, [r0, #88]	@ 0x58
   31828:	ebfffaf9 	bl	30414 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
   3182c:	e3a03000 	mov	r3, #0
   31830:	e584303c 	str	r3, [r4, #60]	@ 0x3c
   31834:	eafffeb1 	b	31300 <CScreenDevice::Write(char)+0x4c>

00031838 <CScreenDevice::Write(void const*, unsigned int)>:
   31838:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3183c:	e1a05000 	mov	r5, r0
   31840:	e590008c 	ldr	r0, [r0, #140]	@ 0x8c
   31844:	e1a07001 	mov	r7, r1
   31848:	e1a06002 	mov	r6, r2
   3184c:	e3500000 	cmp	r0, #0
   31850:	1a00001f 	bne	318d4 <CScreenDevice::Write(void const*, unsigned int)+0x9c>
   31854:	e5d53050 	ldrb	r3, [r5, #80]	@ 0x50
   31858:	e3a02001 	mov	r2, #1
   3185c:	e5c52060 	strb	r2, [r5, #96]	@ 0x60
   31860:	e3530000 	cmp	r3, #0
   31864:	1a000015 	bne	318c0 <CScreenDevice::Write(void const*, unsigned int)+0x88>
   31868:	e3560000 	cmp	r6, #0
   3186c:	0a00000b 	beq	318a0 <CScreenDevice::Write(void const*, unsigned int)+0x68>
   31870:	e1a04007 	mov	r4, r7
   31874:	e0d410d1 	ldrsb	r1, [r4], #1
   31878:	e1a00005 	mov	r0, r5
   3187c:	ebfffe8c 	bl	312b4 <CScreenDevice::Write(char)>
   31880:	e0463004 	sub	r3, r6, r4
   31884:	e1770003 	cmn	r7, r3
   31888:	1afffff9 	bne	31874 <CScreenDevice::Write(void const*, unsigned int)+0x3c>
   3188c:	e5d53050 	ldrb	r3, [r5, #80]	@ 0x50
   31890:	e3530000 	cmp	r3, #0
   31894:	0a000001 	beq	318a0 <CScreenDevice::Write(void const*, unsigned int)+0x68>
   31898:	e1a00005 	mov	r0, r5
   3189c:	ebfff9df 	bl	30020 <CScreenDevice::InvertCursor() [clone .part.0]>
   318a0:	e595308c 	ldr	r3, [r5, #140]	@ 0x8c
   318a4:	e3a02000 	mov	r2, #0
   318a8:	e5c52060 	strb	r2, [r5, #96]	@ 0x60
   318ac:	e1530002 	cmp	r3, r2
   318b0:	1a000009 	bne	318dc <CScreenDevice::Write(void const*, unsigned int)+0xa4>
   318b4:	f57ff05f 	dmb	sy
   318b8:	e1a00006 	mov	r0, r6
   318bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   318c0:	e1a00005 	mov	r0, r5
   318c4:	ebfff9d5 	bl	30020 <CScreenDevice::InvertCursor() [clone .part.0]>
   318c8:	e3560000 	cmp	r6, #0
   318cc:	1affffe7 	bne	31870 <CScreenDevice::Write(void const*, unsigned int)+0x38>
   318d0:	eaffffed 	b	3188c <CScreenDevice::Write(void const*, unsigned int)+0x54>
   318d4:	eb001829 	bl	37980 <EnterCritical>
   318d8:	eaffffdd 	b	31854 <CScreenDevice::Write(void const*, unsigned int)+0x1c>
   318dc:	eb001852 	bl	37a2c <LeaveCritical>
   318e0:	eafffff3 	b	318b4 <CScreenDevice::Write(void const*, unsigned int)+0x7c>

000318e4 <CScreenDevice::InvertCursor()>:
   318e4:	e5d03050 	ldrb	r3, [r0, #80]	@ 0x50
   318e8:	e3530000 	cmp	r3, #0
   318ec:	012fff1e 	bxeq	lr
   318f0:	eafff9ca 	b	30020 <CScreenDevice::InvertCursor() [clone .part.0]>

000318f4 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
   318f4:	e590c030 	ldr	ip, [r0, #48]	@ 0x30
   318f8:	e15c0001 	cmp	ip, r1
   318fc:	912fff1e 	bxls	lr
   31900:	e590c034 	ldr	ip, [r0, #52]	@ 0x34
   31904:	e15c0002 	cmp	ip, r2
   31908:	8590c02c 	ldrhi	ip, [r0, #44]	@ 0x2c
   3190c:	85900024 	ldrhi	r0, [r0, #36]	@ 0x24
   31910:	8021129c 	mlahi	r1, ip, r2, r1
   31914:	81a01081 	lslhi	r1, r1, #1
   31918:	818030b1 	strhhi	r3, [r0, r1]
   3191c:	e12fff1e 	bx	lr

00031920 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
   31920:	e5903030 	ldr	r3, [r0, #48]	@ 0x30
   31924:	e1530001 	cmp	r3, r1
   31928:	9a000002 	bls	31938 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
   3192c:	e5903034 	ldr	r3, [r0, #52]	@ 0x34
   31930:	e1530002 	cmp	r3, r2
   31934:	8a000001 	bhi	31940 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
   31938:	e1d005b4 	ldrh	r0, [r0, #84]	@ 0x54
   3193c:	e12fff1e 	bx	lr
   31940:	e590c02c 	ldr	ip, [r0, #44]	@ 0x2c
   31944:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   31948:	e022129c 	mla	r2, ip, r2, r1
   3194c:	e1a01082 	lsl	r1, r2, #1
   31950:	e19300b1 	ldrh	r0, [r3, r1]
   31954:	e12fff1e 	bx	lr

00031958 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
   31958:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   3195c:	e1a06000 	mov	r6, r0
   31960:	e1a05001 	mov	r5, r1
   31964:	e24dd00c 	sub	sp, sp, #12
   31968:	e280001c 	add	r0, r0, #28
   3196c:	e5967030 	ldr	r7, [r6, #48]	@ 0x30
   31970:	e1a04002 	mov	r4, r2
   31974:	e2055003 	and	r5, r5, #3
   31978:	eb001c18 	bl	389e0 <CCharGenerator::GetCharWidth() const>
   3197c:	e1a02000 	mov	r2, r0
   31980:	e2044003 	and	r4, r4, #3
   31984:	e30238e8 	movw	r3, #10472	@ 0x28e8
   31988:	e3403004 	movt	r3, #4
   3198c:	e0831004 	add	r1, r3, r4
   31990:	e1a00006 	mov	r0, r6
   31994:	e0222295 	mla	r2, r5, r2, r2
   31998:	e30f3a8a 	movw	r3, #64138	@ 0xfa8a
   3199c:	e58d3000 	str	r3, [sp]
   319a0:	e3a03000 	mov	r3, #0
   319a4:	e1d112dc 	ldrsb	r1, [r1, #44]	@ 0x2c
   319a8:	e0472002 	sub	r2, r7, r2
   319ac:	ebfffc80 	bl	30bb4 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
   319b0:	e28dd00c 	add	sp, sp, #12
   319b4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}

000319b8 <CSerialDevice::Read(void*, unsigned int)>:
   319b8:	e5d03018 	ldrb	r3, [r0, #24]
   319bc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   319c0:	e3530000 	cmp	r3, #0
   319c4:	0a00004d 	beq	31b00 <CSerialDevice::Read(void*, unsigned int)+0x148>
   319c8:	e1a06001 	mov	r6, r1
   319cc:	e3510000 	cmp	r1, #0
   319d0:	0a00004f 	beq	31b14 <CSerialDevice::Read(void*, unsigned int)+0x15c>
   319d4:	e5905008 	ldr	r5, [r0, #8]
   319d8:	e1a04000 	mov	r4, r0
   319dc:	e1a07002 	mov	r7, r2
   319e0:	e3550000 	cmp	r5, #0
   319e4:	0a000029 	beq	31a90 <CSerialDevice::Read(void*, unsigned int)+0xd8>
   319e8:	e2808a01 	add	r8, r0, #4096	@ 0x1000
   319ec:	e59800e0 	ldr	r0, [r8, #224]	@ 0xe0
   319f0:	e3500000 	cmp	r0, #0
   319f4:	1a00003c 	bne	31aec <CSerialDevice::Read(void*, unsigned int)+0x134>
   319f8:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   319fc:	e3530000 	cmp	r3, #0
   31a00:	ba00001a 	blt	31a70 <CSerialDevice::Read(void*, unsigned int)+0xb8>
   31a04:	e3570000 	cmp	r7, #0
   31a08:	01a05007 	moveq	r5, r7
   31a0c:	0a00001a 	beq	31a7c <CSerialDevice::Read(void*, unsigned int)+0xc4>
   31a10:	e3a05000 	mov	r5, #0
   31a14:	ea00000b 	b	31a48 <CSerialDevice::Read(void*, unsigned int)+0x90>
   31a18:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   31a1c:	e2855001 	add	r5, r5, #1
   31a20:	e1570005 	cmp	r7, r5
   31a24:	e0842003 	add	r2, r4, r3
   31a28:	e2833001 	add	r3, r3, #1
   31a2c:	e58438c0 	str	r3, [r4, #2240]	@ 0x8c0
   31a30:	e5d230bc 	ldrb	r3, [r2, #188]	@ 0xbc
   31a34:	e4c63001 	strb	r3, [r6], #1
   31a38:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   31a3c:	e7ea3053 	ubfx	r3, r3, #0, #11
   31a40:	e58438c0 	str	r3, [r4, #2240]	@ 0x8c0
   31a44:	0a00000c 	beq	31a7c <CSerialDevice::Read(void*, unsigned int)+0xc4>
   31a48:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   31a4c:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   31a50:	e1520003 	cmp	r2, r3
   31a54:	1affffef 	bne	31a18 <CSerialDevice::Read(void*, unsigned int)+0x60>
   31a58:	e59830e0 	ldr	r3, [r8, #224]	@ 0xe0
   31a5c:	e3530000 	cmp	r3, #0
   31a60:	0a000008 	beq	31a88 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   31a64:	eb0017f0 	bl	37a2c <LeaveCritical>
   31a68:	e1a00005 	mov	r0, r5
   31a6c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31a70:	e59458c4 	ldr	r5, [r4, #2244]	@ 0x8c4
   31a74:	e3a03000 	mov	r3, #0
   31a78:	e58438c4 	str	r3, [r4, #2244]	@ 0x8c4
   31a7c:	e59830e0 	ldr	r3, [r8, #224]	@ 0xe0
   31a80:	e3530000 	cmp	r3, #0
   31a84:	1afffff6 	bne	31a64 <CSerialDevice::Read(void*, unsigned int)+0xac>
   31a88:	e1a00005 	mov	r0, r5
   31a8c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   31a90:	e3520000 	cmp	r2, #0
   31a94:	01a05002 	moveq	r5, r2
   31a98:	1a00000a 	bne	31ac8 <CSerialDevice::Read(void*, unsigned int)+0x110>
   31a9c:	eafffff9 	b	31a88 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   31aa0:	e3130b02 	tst	r3, #2048	@ 0x800
   31aa4:	1a00001f 	bne	31b28 <CSerialDevice::Read(void*, unsigned int)+0x170>
   31aa8:	e3130c01 	tst	r3, #256	@ 0x100
   31aac:	1a00001f 	bne	31b30 <CSerialDevice::Read(void*, unsigned int)+0x178>
   31ab0:	e3130c02 	tst	r3, #512	@ 0x200
   31ab4:	1a00001f 	bne	31b38 <CSerialDevice::Read(void*, unsigned int)+0x180>
   31ab8:	e2855001 	add	r5, r5, #1
   31abc:	e4c63001 	strb	r3, [r6], #1
   31ac0:	e1570005 	cmp	r7, r5
   31ac4:	0affffef 	beq	31a88 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   31ac8:	e5943014 	ldr	r3, [r4, #20]
   31acc:	e5932018 	ldr	r2, [r3, #24]
   31ad0:	e3120010 	tst	r2, #16
   31ad4:	1affffeb 	bne	31a88 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   31ad8:	e5933000 	ldr	r3, [r3]
   31adc:	e3130b01 	tst	r3, #1024	@ 0x400
   31ae0:	0affffee 	beq	31aa0 <CSerialDevice::Read(void*, unsigned int)+0xe8>
   31ae4:	e3e05000 	mvn	r5, #0
   31ae8:	eaffffe6 	b	31a88 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   31aec:	eb0017a3 	bl	37980 <EnterCritical>
   31af0:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   31af4:	e3530000 	cmp	r3, #0
   31af8:	aaffffc1 	bge	31a04 <CSerialDevice::Read(void*, unsigned int)+0x4c>
   31afc:	eaffffdb 	b	31a70 <CSerialDevice::Read(void*, unsigned int)+0xb8>
   31b00:	e3021920 	movw	r1, #10528	@ 0x2920
   31b04:	e3401004 	movt	r1, #4
   31b08:	e3a02d07 	mov	r2, #448	@ 0x1c0
   31b0c:	e281000c 	add	r0, r1, #12
   31b10:	ebffe8b1 	bl	2bddc <assertion_failed>
   31b14:	e3021920 	movw	r1, #10528	@ 0x2920
   31b18:	e3401004 	movt	r1, #4
   31b1c:	e2810018 	add	r0, r1, #24
   31b20:	e30021c3 	movw	r2, #451	@ 0x1c3
   31b24:	ebffe8ac 	bl	2bddc <assertion_failed>
   31b28:	e3e05001 	mvn	r5, #1
   31b2c:	eaffffd5 	b	31a88 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   31b30:	e3e05002 	mvn	r5, #2
   31b34:	eaffffd3 	b	31a88 <CSerialDevice::Read(void*, unsigned int)+0xd0>
   31b38:	e3e05003 	mvn	r5, #3
   31b3c:	eaffffd1 	b	31a88 <CSerialDevice::Read(void*, unsigned int)+0xd0>

00031b40 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   31b40:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31b44:	e1a04000 	mov	r4, r0
   31b48:	e284b01c 	add	fp, r4, #28
   31b4c:	e24dd00c 	sub	sp, sp, #12
   31b50:	e302a920 	movw	sl, #10528	@ 0x2920
   31b54:	e340a004 	movt	sl, #4
   31b58:	e1a05001 	mov	r5, r1
   31b5c:	e1a06002 	mov	r6, r2
   31b60:	e1a07003 	mov	r7, r3
   31b64:	ebffeaf5 	bl	2c740 <CDevice::CDevice()>
   31b68:	e28a202c 	add	r2, sl, #44	@ 0x2c
   31b6c:	e5845008 	str	r5, [r4, #8]
   31b70:	e1a0000b 	mov	r0, fp
   31b74:	e3a05000 	mov	r5, #0
   31b78:	e5842000 	str	r2, [r4]
   31b7c:	e5c4600c 	strb	r6, [r4, #12]
   31b80:	e284906c 	add	r9, r4, #108	@ 0x6c
   31b84:	e5847010 	str	r7, [r4, #16]
   31b88:	e2848094 	add	r8, r4, #148	@ 0x94
   31b8c:	e5845014 	str	r5, [r4, #20]
   31b90:	e2866001 	add	r6, r6, #1
   31b94:	e5c45018 	strb	r5, [r4, #24]
   31b98:	ebffed98 	bl	2d200 <CGPIOPin::CGPIOPin()>
   31b9c:	e2843044 	add	r3, r4, #68	@ 0x44
   31ba0:	e1a00003 	mov	r0, r3
   31ba4:	e58d3004 	str	r3, [sp, #4]
   31ba8:	ebffed94 	bl	2d200 <CGPIOPin::CGPIOPin()>
   31bac:	e1a00009 	mov	r0, r9
   31bb0:	ebffed92 	bl	2d200 <CGPIOPin::CGPIOPin()>
   31bb4:	e1a00008 	mov	r0, r8
   31bb8:	ebffed90 	bl	2d200 <CGPIOPin::CGPIOPin()>
   31bbc:	e2841a01 	add	r1, r4, #4096	@ 0x1000
   31bc0:	e58458bc 	str	r5, [r4, #2236]	@ 0x8bc
   31bc4:	e3a02001 	mov	r2, #1
   31bc8:	e58458c0 	str	r5, [r4, #2240]	@ 0x8c0
   31bcc:	e58458c4 	str	r5, [r4, #2244]	@ 0x8c4
   31bd0:	e58150c8 	str	r5, [r1, #200]	@ 0xc8
   31bd4:	e58160e0 	str	r6, [r1, #224]	@ 0xe0
   31bd8:	e58150cc 	str	r5, [r1, #204]	@ 0xcc
   31bdc:	e58120d0 	str	r2, [r1, #208]	@ 0xd0
   31be0:	e58120e4 	str	r2, [r1, #228]	@ 0xe4
   31be4:	e58150d4 	str	r5, [r1, #212]	@ 0xd4
   31be8:	e5941010 	ldr	r1, [r4, #16]
   31bec:	e1510005 	cmp	r1, r5
   31bf0:	1a000025 	bne	31c8c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x14c>
   31bf4:	e1a05207 	lsl	r5, r7, #4
   31bf8:	e08a1005 	add	r1, sl, r5
   31bfc:	e5916050 	ldr	r6, [r1, #80]	@ 0x50
   31c00:	e3560035 	cmp	r6, #53	@ 0x35
   31c04:	8a000020 	bhi	31c8c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x14c>
   31c08:	e304115c 	movw	r1, #16732	@ 0x415c
   31c0c:	e3401004 	movt	r1, #4
   31c10:	e5910000 	ldr	r0, [r1]
   31c14:	e3500000 	cmp	r0, #0
   31c18:	1a00002e 	bne	31cd8 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x198>
   31c1c:	e5814000 	str	r4, [r1]
   31c20:	e3570000 	cmp	r7, #0
   31c24:	e3a01a01 	mov	r1, #4096	@ 0x1000
   31c28:	e3431f20 	movt	r1, #16160	@ 0x3f20
   31c2c:	e5841014 	str	r1, [r4, #20]
   31c30:	0a000018 	beq	31c98 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x158>
   31c34:	e08a5005 	add	r5, sl, r5
   31c38:	e1a01006 	mov	r1, r6
   31c3c:	e1a00009 	mov	r0, r9
   31c40:	ebffed7c 	bl	2d238 <CGPIOPin::AssignPin(unsigned int)>
   31c44:	e3a02001 	mov	r2, #1
   31c48:	e5951054 	ldr	r1, [r5, #84]	@ 0x54
   31c4c:	e1a00009 	mov	r0, r9
   31c50:	e2811004 	add	r1, r1, #4
   31c54:	e6ef1071 	uxtb	r1, r1
   31c58:	ebffefa1 	bl	2dae4 <CGPIOPin::SetMode(TGPIOMode, bool)>
   31c5c:	e5951058 	ldr	r1, [r5, #88]	@ 0x58
   31c60:	e1a00008 	mov	r0, r8
   31c64:	ebffed73 	bl	2d238 <CGPIOPin::AssignPin(unsigned int)>
   31c68:	e3a02001 	mov	r2, #1
   31c6c:	e3a01004 	mov	r1, #4
   31c70:	e1a00008 	mov	r0, r8
   31c74:	ebffef9a 	bl	2dae4 <CGPIOPin::SetMode(TGPIOMode, bool)>
   31c78:	e3a01002 	mov	r1, #2
   31c7c:	e1a00008 	mov	r0, r8
   31c80:	ebffef43 	bl	2d994 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   31c84:	e3a03001 	mov	r3, #1
   31c88:	e5c43018 	strb	r3, [r4, #24]
   31c8c:	e1a00004 	mov	r0, r4
   31c90:	e28dd00c 	add	sp, sp, #12
   31c94:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31c98:	e1a0000b 	mov	r0, fp
   31c9c:	e3a01020 	mov	r1, #32
   31ca0:	ebffed64 	bl	2d238 <CGPIOPin::AssignPin(unsigned int)>
   31ca4:	e3a02001 	mov	r2, #1
   31ca8:	e1a01007 	mov	r1, r7
   31cac:	e1a0000b 	mov	r0, fp
   31cb0:	ebffef8b 	bl	2dae4 <CGPIOPin::SetMode(TGPIOMode, bool)>
   31cb4:	e59db004 	ldr	fp, [sp, #4]
   31cb8:	e3a01021 	mov	r1, #33	@ 0x21
   31cbc:	e1a0000b 	mov	r0, fp
   31cc0:	ebffed5c 	bl	2d238 <CGPIOPin::AssignPin(unsigned int)>
   31cc4:	e3a02001 	mov	r2, #1
   31cc8:	e1a01007 	mov	r1, r7
   31ccc:	e1a0000b 	mov	r0, fp
   31cd0:	ebffef83 	bl	2dae4 <CGPIOPin::SetMode(TGPIOMode, bool)>
   31cd4:	eaffffd6 	b	31c34 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0xf4>
   31cd8:	e3a020b0 	mov	r2, #176	@ 0xb0
   31cdc:	e1a0100a 	mov	r1, sl
   31ce0:	e28a0060 	add	r0, sl, #96	@ 0x60
   31ce4:	ebffe83c 	bl	2bddc <assertion_failed>

00031ce8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
   31ce8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31cec:	e5d07018 	ldrb	r7, [r0, #24]
   31cf0:	e24dd00c 	sub	sp, sp, #12
   31cf4:	e3570000 	cmp	r7, #0
   31cf8:	e5dd8030 	ldrb	r8, [sp, #48]	@ 0x30
   31cfc:	1a000003 	bne	31d10 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x28>
   31d00:	e3a07000 	mov	r7, #0
   31d04:	e1a00007 	mov	r0, r7
   31d08:	e28dd00c 	add	sp, sp, #12
   31d0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31d10:	e1a0a001 	mov	sl, r1
   31d14:	e1a05002 	mov	r5, r2
   31d18:	e1a06003 	mov	r6, r3
   31d1c:	e1a04000 	mov	r4, r0
   31d20:	ebfff6b8 	bl	2f808 <CMachineInfo::Get()>
   31d24:	e3a01002 	mov	r1, #2
   31d28:	ebfff5ce 	bl	2f468 <CMachineInfo::GetClockRate(unsigned int) const>
   31d2c:	e3500000 	cmp	r0, #0
   31d30:	0a000083 	beq	31f44 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x25c>
   31d34:	e24a2f4b 	sub	r2, sl, #300	@ 0x12c
   31d38:	e30037d4 	movw	r3, #2004	@ 0x7d4
   31d3c:	e340303d 	movt	r3, #61	@ 0x3d
   31d40:	e1520003 	cmp	r2, r3
   31d44:	8a000083 	bhi	31f58 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x270>
   31d48:	e1a0320a 	lsl	r3, sl, #4
   31d4c:	e30f2ffe 	movw	r2, #65534	@ 0xfffe
   31d50:	e739f310 	udiv	r9, r0, r3
   31d54:	e2491001 	sub	r1, r9, #1
   31d58:	e1510002 	cmp	r1, r2
   31d5c:	8a000082 	bhi	31f6c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x284>
   31d60:	e0600993 	mls	r0, r3, r9, r0
   31d64:	e1a00180 	lsl	r0, r0, #3
   31d68:	e731fa10 	udiv	r1, r0, sl
   31d6c:	e201a001 	and	sl, r1, #1
   31d70:	e08aa0a1 	add	sl, sl, r1, lsr #1
   31d74:	e35a003f 	cmp	sl, #63	@ 0x3f
   31d78:	8a000080 	bhi	31f80 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x298>
   31d7c:	e5940008 	ldr	r0, [r4, #8]
   31d80:	e3500000 	cmp	r0, #0
   31d84:	0a000013 	beq	31dd8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xf0>
   31d88:	e304b15c 	movw	fp, #16732	@ 0x415c
   31d8c:	e340b004 	movt	fp, #4
   31d90:	e59b3004 	ldr	r3, [fp, #4]
   31d94:	e3530000 	cmp	r3, #0
   31d98:	1a00004a 	bne	31ec8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e0>
   31d9c:	e5d4200c 	ldrb	r2, [r4, #12]
   31da0:	e58b0008 	str	r0, [fp, #8]
   31da4:	e3520000 	cmp	r2, #0
   31da8:	e5cb200c 	strb	r2, [fp, #12]
   31dac:	1a000051 	bne	31ef8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x210>
   31db0:	e1a03002 	mov	r3, r2
   31db4:	e3a01039 	mov	r1, #57	@ 0x39
   31db8:	e30227cc 	movw	r2, #10188	@ 0x27cc
   31dbc:	e3402003 	movt	r2, #3
   31dc0:	eb001778 	bl	37ba8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   31dc4:	e59b3004 	ldr	r3, [fp, #4]
   31dc8:	e3530000 	cmp	r3, #0
   31dcc:	1a000052 	bne	31f1c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x234>
   31dd0:	e3a03001 	mov	r3, #1
   31dd4:	e58b3004 	str	r3, [fp, #4]
   31dd8:	e5943014 	ldr	r3, [r4, #20]
   31ddc:	e3a02000 	mov	r2, #0
   31de0:	e5832038 	str	r2, [r3, #56]	@ 0x38
   31de4:	e2453005 	sub	r3, r5, #5
   31de8:	e3530003 	cmp	r3, #3
   31dec:	e30027ff 	movw	r2, #2047	@ 0x7ff
   31df0:	e5943014 	ldr	r3, [r4, #20]
   31df4:	e5832044 	str	r2, [r3, #68]	@ 0x44
   31df8:	e5943014 	ldr	r3, [r4, #20]
   31dfc:	e5839024 	str	r9, [r3, #36]	@ 0x24
   31e00:	e5943014 	ldr	r3, [r4, #20]
   31e04:	e583a028 	str	sl, [r3, #40]	@ 0x28
   31e08:	8a000066 	bhi	31fa8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c0>
   31e0c:	e1a05285 	lsl	r5, r5, #5
   31e10:	e2463001 	sub	r3, r6, #1
   31e14:	e2455090 	sub	r5, r5, #144	@ 0x90
   31e18:	e3530001 	cmp	r3, #1
   31e1c:	8a000043 	bhi	31f30 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x248>
   31e20:	e3560002 	cmp	r6, #2
   31e24:	03855008 	orreq	r5, r5, #8
   31e28:	e3580001 	cmp	r8, #1
   31e2c:	0a00002f 	beq	31ef0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x208>
   31e30:	e3580002 	cmp	r8, #2
   31e34:	0a00002b 	beq	31ee8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x200>
   31e38:	e3580000 	cmp	r8, #0
   31e3c:	1a000054 	bne	31f94 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2ac>
   31e40:	e5942014 	ldr	r2, [r4, #20]
   31e44:	e5943008 	ldr	r3, [r4, #8]
   31e48:	e3530000 	cmp	r3, #0
   31e4c:	0582502c 	streq	r5, [r2, #44]	@ 0x2c
   31e50:	0a00000e 	beq	31e90 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1a8>
   31e54:	e3a03009 	mov	r3, #9
   31e58:	e5823034 	str	r3, [r2, #52]	@ 0x34
   31e5c:	e304315c 	movw	r3, #16732	@ 0x415c
   31e60:	e3403004 	movt	r3, #4
   31e64:	e5942014 	ldr	r2, [r4, #20]
   31e68:	e3a01e45 	mov	r1, #1104	@ 0x450
   31e6c:	e3a00001 	mov	r0, #1
   31e70:	e582502c 	str	r5, [r2, #44]	@ 0x2c
   31e74:	e5942014 	ldr	r2, [r4, #20]
   31e78:	e5821038 	str	r1, [r2, #56]	@ 0x38
   31e7c:	e5932010 	ldr	r2, [r3, #16]
   31e80:	e5941010 	ldr	r1, [r4, #16]
   31e84:	e1822110 	orr	r2, r2, r0, lsl r1
   31e88:	e5832010 	str	r2, [r3, #16]
   31e8c:	f57ff04f 	dsb	sy
   31e90:	e5943014 	ldr	r3, [r4, #20]
   31e94:	e3002301 	movw	r2, #769	@ 0x301
   31e98:	e5832030 	str	r2, [r3, #48]	@ 0x30
   31e9c:	ebffeb62 	bl	2cc2c <CDeviceNameService::Get()>
   31ea0:	e5942010 	ldr	r2, [r4, #16]
   31ea4:	e3a01000 	mov	r1, #0
   31ea8:	e1a03004 	mov	r3, r4
   31eac:	e58d1000 	str	r1, [sp]
   31eb0:	e2822001 	add	r2, r2, #1
   31eb4:	e59f1100 	ldr	r1, [pc, #256]	@ 31fbc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2d4>
   31eb8:	ebffeb67 	bl	2cc5c <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   31ebc:	e1a00007 	mov	r0, r7
   31ec0:	e28dd00c 	add	sp, sp, #12
   31ec4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ec8:	e59b3008 	ldr	r3, [fp, #8]
   31ecc:	e1500003 	cmp	r0, r3
   31ed0:	0a00000d 	beq	31f0c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x224>
   31ed4:	e5942010 	ldr	r2, [r4, #16]
   31ed8:	e3a03000 	mov	r3, #0
   31edc:	e5c43018 	strb	r3, [r4, #24]
   31ee0:	e78b3102 	str	r3, [fp, r2, lsl #2]
   31ee4:	eaffff85 	b	31d00 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x18>
   31ee8:	e3855006 	orr	r5, r5, #6
   31eec:	eaffffd3 	b	31e40 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x158>
   31ef0:	e3855002 	orr	r5, r5, #2
   31ef4:	eaffffd1 	b	31e40 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x158>
   31ef8:	e3a01039 	mov	r1, #57	@ 0x39
   31efc:	e30227cc 	movw	r2, #10188	@ 0x27cc
   31f00:	e3402003 	movt	r2, #3
   31f04:	eb00178e 	bl	37d44 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   31f08:	eaffffad 	b	31dc4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xdc>
   31f0c:	e5d4200c 	ldrb	r2, [r4, #12]
   31f10:	e5db300c 	ldrb	r3, [fp, #12]
   31f14:	e1520003 	cmp	r2, r3
   31f18:	1affffed 	bne	31ed4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1ec>
   31f1c:	e3021920 	movw	r1, #10528	@ 0x2920
   31f20:	e3401004 	movt	r1, #4
   31f24:	e28100ec 	add	r0, r1, #236	@ 0xec
   31f28:	e300212a 	movw	r2, #298	@ 0x12a
   31f2c:	ebffe7aa 	bl	2bddc <assertion_failed>
   31f30:	e3021920 	movw	r1, #10528	@ 0x2920
   31f34:	e3401004 	movt	r1, #4
   31f38:	e2810f46 	add	r0, r1, #280	@ 0x118
   31f3c:	e3002143 	movw	r2, #323	@ 0x143
   31f40:	ebffe7a5 	bl	2bddc <assertion_failed>
   31f44:	e3021920 	movw	r1, #10528	@ 0x2920
   31f48:	e3401004 	movt	r1, #4
   31f4c:	e3a02c01 	mov	r2, #256	@ 0x100
   31f50:	e2810078 	add	r0, r1, #120	@ 0x78
   31f54:	ebffe7a0 	bl	2bddc <assertion_failed>
   31f58:	e3021920 	movw	r1, #10528	@ 0x2920
   31f5c:	e3401004 	movt	r1, #4
   31f60:	e2810088 	add	r0, r1, #136	@ 0x88
   31f64:	e3002102 	movw	r2, #258	@ 0x102
   31f68:	ebffe79b 	bl	2bddc <assertion_failed>
   31f6c:	e3021920 	movw	r1, #10528	@ 0x2920
   31f70:	e3401004 	movt	r1, #4
   31f74:	e28100b4 	add	r0, r1, #180	@ 0xb4
   31f78:	e3002105 	movw	r2, #261	@ 0x105
   31f7c:	ebffe796 	bl	2bddc <assertion_failed>
   31f80:	e3021920 	movw	r1, #10528	@ 0x2920
   31f84:	e3401004 	movt	r1, #4
   31f88:	e3a02f42 	mov	r2, #264	@ 0x108
   31f8c:	e28100d8 	add	r0, r1, #216	@ 0xd8
   31f90:	ebffe791 	bl	2bddc <assertion_failed>
   31f94:	e3021920 	movw	r1, #10528	@ 0x2920
   31f98:	e3401004 	movt	r1, #4
   31f9c:	e2810f45 	add	r0, r1, #276	@ 0x114
   31fa0:	e3002157 	movw	r2, #343	@ 0x157
   31fa4:	ebffe78c 	bl	2bddc <assertion_failed>
   31fa8:	e3021920 	movw	r1, #10528	@ 0x2920
   31fac:	e3401004 	movt	r1, #4
   31fb0:	e2810f45 	add	r0, r1, #276	@ 0x114
   31fb4:	e300213f 	movw	r2, #319	@ 0x13f
   31fb8:	ebffe787 	bl	2bddc <assertion_failed>
   31fbc:	00042a5c 	.word	0x00042a5c

00031fc0 <CSerialDevice::GetOptions() const>:
   31fc0:	e2800a01 	add	r0, r0, #4096	@ 0x1000
   31fc4:	e59000d0 	ldr	r0, [r0, #208]	@ 0xd0
   31fc8:	e12fff1e 	bx	lr

00031fcc <CSerialDevice::SetOptions(unsigned int)>:
   31fcc:	e2800a01 	add	r0, r0, #4096	@ 0x1000
   31fd0:	e58010d0 	str	r1, [r0, #208]	@ 0xd0
   31fd4:	e12fff1e 	bx	lr

00031fd8 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   31fd8:	e5903008 	ldr	r3, [r0, #8]
   31fdc:	e92d4010 	push	{r4, lr}
   31fe0:	e3530000 	cmp	r3, #0
   31fe4:	0a00000e 	beq	32024 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x4c>
   31fe8:	e2800a01 	add	r0, r0, #4096	@ 0x1000
   31fec:	e59030d4 	ldr	r3, [r0, #212]	@ 0xd4
   31ff0:	e3530000 	cmp	r3, #0
   31ff4:	1a00000f 	bne	32038 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x60>
   31ff8:	e3510000 	cmp	r1, #0
   31ffc:	0a000012 	beq	3204c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x74>
   32000:	e1d130d0 	ldrsb	r3, [r1]
   32004:	e3530000 	cmp	r3, #0
   32008:	0a000014 	beq	32060 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x88>
   3200c:	e3520000 	cmp	r2, #0
   32010:	0a000017 	beq	32074 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x9c>
   32014:	e58020dc 	str	r2, [r0, #220]	@ 0xdc
   32018:	e58010d8 	str	r1, [r0, #216]	@ 0xd8
   3201c:	e58010d4 	str	r1, [r0, #212]	@ 0xd4
   32020:	e8bd8010 	pop	{r4, pc}
   32024:	e3021920 	movw	r1, #10528	@ 0x2920
   32028:	e3401004 	movt	r1, #4
   3202c:	e3a02e22 	mov	r2, #544	@ 0x220
   32030:	e2810f51 	add	r0, r1, #324	@ 0x144
   32034:	ebffe768 	bl	2bddc <assertion_failed>
   32038:	e3021920 	movw	r1, #10528	@ 0x2920
   3203c:	e3401004 	movt	r1, #4
   32040:	e2810f57 	add	r0, r1, #348	@ 0x15c
   32044:	e3002221 	movw	r2, #545	@ 0x221
   32048:	ebffe763 	bl	2bddc <assertion_failed>
   3204c:	e3021920 	movw	r1, #10528	@ 0x2920
   32050:	e3401004 	movt	r1, #4
   32054:	e2810f5b 	add	r0, r1, #364	@ 0x16c
   32058:	e3002223 	movw	r2, #547	@ 0x223
   3205c:	ebffe75e 	bl	2bddc <assertion_failed>
   32060:	e3021920 	movw	r1, #10528	@ 0x2920
   32064:	e3401004 	movt	r1, #4
   32068:	e3a02f89 	mov	r2, #548	@ 0x224
   3206c:	e2810f5e 	add	r0, r1, #376	@ 0x178
   32070:	ebffe759 	bl	2bddc <assertion_failed>
   32074:	e3021920 	movw	r1, #10528	@ 0x2920
   32078:	e3401004 	movt	r1, #4
   3207c:	e2810f62 	add	r0, r1, #392	@ 0x188
   32080:	e3002225 	movw	r2, #549	@ 0x225
   32084:	ebffe754 	bl	2bddc <assertion_failed>

00032088 <CSerialDevice::AvailableForWrite()>:
   32088:	e5d03018 	ldrb	r3, [r0, #24]
   3208c:	e92d4010 	push	{r4, lr}
   32090:	e3530000 	cmp	r3, #0
   32094:	0a000019 	beq	32100 <CSerialDevice::AvailableForWrite()+0x78>
   32098:	e5903008 	ldr	r3, [r0, #8]
   3209c:	e3530000 	cmp	r3, #0
   320a0:	0a00001b 	beq	32114 <CSerialDevice::AvailableForWrite()+0x8c>
   320a4:	e2804a01 	add	r4, r0, #4096	@ 0x1000
   320a8:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
   320ac:	e3500000 	cmp	r0, #0
   320b0:	1a00000c 	bne	320e8 <CSerialDevice::AvailableForWrite()+0x60>
   320b4:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
   320b8:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   320bc:	e1520003 	cmp	r2, r3
   320c0:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
   320c4:	e59420c8 	ldr	r2, [r4, #200]	@ 0xc8
   320c8:	92834e7f 	addls	r4, r3, #2032	@ 0x7f0
   320cc:	82434001 	subhi	r4, r3, #1
   320d0:	9284400f 	addls	r4, r4, #15
   320d4:	e3500000 	cmp	r0, #0
   320d8:	e0444002 	sub	r4, r4, r2
   320dc:	1a000004 	bne	320f4 <CSerialDevice::AvailableForWrite()+0x6c>
   320e0:	e1a00004 	mov	r0, r4
   320e4:	e8bd8010 	pop	{r4, pc}
   320e8:	eb001624 	bl	37980 <EnterCritical>
   320ec:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
   320f0:	eaffffef 	b	320b4 <CSerialDevice::AvailableForWrite()+0x2c>
   320f4:	eb00164c 	bl	37a2c <LeaveCritical>
   320f8:	e1a00004 	mov	r0, r4
   320fc:	e8bd8010 	pop	{r4, pc}
   32100:	e3021920 	movw	r1, #10528	@ 0x2920
   32104:	e3401004 	movt	r1, #4
   32108:	e281000c 	add	r0, r1, #12
   3210c:	e300222f 	movw	r2, #559	@ 0x22f
   32110:	ebffe731 	bl	2bddc <assertion_failed>
   32114:	e3021920 	movw	r1, #10528	@ 0x2920
   32118:	e3401004 	movt	r1, #4
   3211c:	e3a02e23 	mov	r2, #560	@ 0x230
   32120:	e2810f51 	add	r0, r1, #324	@ 0x144
   32124:	ebffe72c 	bl	2bddc <assertion_failed>

00032128 <CSerialDevice::AvailableForRead()>:
   32128:	e5d03018 	ldrb	r3, [r0, #24]
   3212c:	e92d4070 	push	{r4, r5, r6, lr}
   32130:	e3530000 	cmp	r3, #0
   32134:	0a000019 	beq	321a0 <CSerialDevice::AvailableForRead()+0x78>
   32138:	e5903008 	ldr	r3, [r0, #8]
   3213c:	e1a04000 	mov	r4, r0
   32140:	e3530000 	cmp	r3, #0
   32144:	0a00001a 	beq	321b4 <CSerialDevice::AvailableForRead()+0x8c>
   32148:	e2805a01 	add	r5, r0, #4096	@ 0x1000
   3214c:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
   32150:	e3500000 	cmp	r0, #0
   32154:	1a00000b 	bne	32188 <CSerialDevice::AvailableForRead()+0x60>
   32158:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   3215c:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   32160:	e1520003 	cmp	r2, r3
   32164:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
   32168:	e59428c0 	ldr	r2, [r4, #2240]	@ 0x8c0
   3216c:	32834b02 	addcc	r4, r3, #2048	@ 0x800
   32170:	30444002 	subcc	r4, r4, r2
   32174:	20434002 	subcs	r4, r3, r2
   32178:	e3500000 	cmp	r0, #0
   3217c:	1a000004 	bne	32194 <CSerialDevice::AvailableForRead()+0x6c>
   32180:	e1a00004 	mov	r0, r4
   32184:	e8bd8070 	pop	{r4, r5, r6, pc}
   32188:	eb0015fc 	bl	37980 <EnterCritical>
   3218c:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
   32190:	eafffff0 	b	32158 <CSerialDevice::AvailableForRead()+0x30>
   32194:	eb001624 	bl	37a2c <LeaveCritical>
   32198:	e1a00004 	mov	r0, r4
   3219c:	e8bd8070 	pop	{r4, r5, r6, pc}
   321a0:	e3021920 	movw	r1, #10528	@ 0x2920
   321a4:	e3401004 	movt	r1, #4
   321a8:	e281000c 	add	r0, r1, #12
   321ac:	e3002245 	movw	r2, #581	@ 0x245
   321b0:	ebffe709 	bl	2bddc <assertion_failed>
   321b4:	e3021920 	movw	r1, #10528	@ 0x2920
   321b8:	e3401004 	movt	r1, #4
   321bc:	e2810f51 	add	r0, r1, #324	@ 0x144
   321c0:	e3002246 	movw	r2, #582	@ 0x246
   321c4:	ebffe704 	bl	2bddc <assertion_failed>

000321c8 <CSerialDevice::Peek()>:
   321c8:	e5d03018 	ldrb	r3, [r0, #24]
   321cc:	e92d4070 	push	{r4, r5, r6, lr}
   321d0:	e3530000 	cmp	r3, #0
   321d4:	0a00001f 	beq	32258 <CSerialDevice::Peek()+0x90>
   321d8:	e5903008 	ldr	r3, [r0, #8]
   321dc:	e1a04000 	mov	r4, r0
   321e0:	e3530000 	cmp	r3, #0
   321e4:	0a000020 	beq	3226c <CSerialDevice::Peek()+0xa4>
   321e8:	e2805a01 	add	r5, r0, #4096	@ 0x1000
   321ec:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
   321f0:	e3500000 	cmp	r0, #0
   321f4:	1a000008 	bne	3221c <CSerialDevice::Peek()+0x54>
   321f8:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   321fc:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   32200:	e1520003 	cmp	r2, r3
   32204:	0a00001d 	beq	32280 <CSerialDevice::Peek()+0xb8>
   32208:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   3220c:	e0844003 	add	r4, r4, r3
   32210:	e5d440bc 	ldrb	r4, [r4, #188]	@ 0xbc
   32214:	e1a00004 	mov	r0, r4
   32218:	e8bd8070 	pop	{r4, r5, r6, pc}
   3221c:	eb0015d7 	bl	37980 <EnterCritical>
   32220:	e59428bc 	ldr	r2, [r4, #2236]	@ 0x8bc
   32224:	e59438c0 	ldr	r3, [r4, #2240]	@ 0x8c0
   32228:	e1520003 	cmp	r2, r3
   3222c:	03e04000 	mvneq	r4, #0
   32230:	159438c0 	ldrne	r3, [r4, #2240]	@ 0x8c0
   32234:	059520e0 	ldreq	r2, [r5, #224]	@ 0xe0
   32238:	10843003 	addne	r3, r4, r3
   3223c:	159520e0 	ldrne	r2, [r5, #224]	@ 0xe0
   32240:	15d340bc 	ldrbne	r4, [r3, #188]	@ 0xbc
   32244:	e3520000 	cmp	r2, #0
   32248:	0afffff1 	beq	32214 <CSerialDevice::Peek()+0x4c>
   3224c:	eb0015f6 	bl	37a2c <LeaveCritical>
   32250:	e1a00004 	mov	r0, r4
   32254:	e8bd8070 	pop	{r4, r5, r6, pc}
   32258:	e3021920 	movw	r1, #10528	@ 0x2920
   3225c:	e3401004 	movt	r1, #4
   32260:	e281000c 	add	r0, r1, #12
   32264:	e300225b 	movw	r2, #603	@ 0x25b
   32268:	ebffe6db 	bl	2bddc <assertion_failed>
   3226c:	e3021920 	movw	r1, #10528	@ 0x2920
   32270:	e3401004 	movt	r1, #4
   32274:	e3a02f97 	mov	r2, #604	@ 0x25c
   32278:	e2810f51 	add	r0, r1, #324	@ 0x144
   3227c:	ebffe6d6 	bl	2bddc <assertion_failed>
   32280:	e3e04000 	mvn	r4, #0
   32284:	eaffffe2 	b	32214 <CSerialDevice::Peek()+0x4c>

00032288 <CSerialDevice::Flush()>:
   32288:	e5902014 	ldr	r2, [r0, #20]
   3228c:	e2822018 	add	r2, r2, #24
   32290:	e5923000 	ldr	r3, [r2]
   32294:	e3130008 	tst	r3, #8
   32298:	1afffffc 	bne	32290 <CSerialDevice::Flush()+0x8>
   3229c:	e12fff1e 	bx	lr

000322a0 <CSerialDevice::Write(unsigned char)>:
   322a0:	e5903008 	ldr	r3, [r0, #8]
   322a4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   322a8:	e1a04000 	mov	r4, r0
   322ac:	e1a05001 	mov	r5, r1
   322b0:	e3530000 	cmp	r3, #0
   322b4:	0a000021 	beq	32340 <CSerialDevice::Write(unsigned char)+0xa0>
   322b8:	e2806a01 	add	r6, r0, #4096	@ 0x1000
   322bc:	e59600e0 	ldr	r0, [r6, #224]	@ 0xe0
   322c0:	e3500000 	cmp	r0, #0
   322c4:	1a000013 	bne	32318 <CSerialDevice::Write(unsigned char)+0x78>
   322c8:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   322cc:	e59610cc 	ldr	r1, [r6, #204]	@ 0xcc
   322d0:	e2833001 	add	r3, r3, #1
   322d4:	e7ea3053 	ubfx	r3, r3, #0, #11
   322d8:	e1530001 	cmp	r3, r1
   322dc:	0a000020 	beq	32364 <CSerialDevice::Write(unsigned char)+0xc4>
   322e0:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   322e4:	e3a07001 	mov	r7, #1
   322e8:	e0844003 	add	r4, r4, r3
   322ec:	e2833001 	add	r3, r3, #1
   322f0:	e58630c8 	str	r3, [r6, #200]	@ 0xc8
   322f4:	e5c458c8 	strb	r5, [r4, #2248]	@ 0x8c8
   322f8:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   322fc:	e7ea3053 	ubfx	r3, r3, #0, #11
   32300:	e58630c8 	str	r3, [r6, #200]	@ 0xc8
   32304:	e3500000 	cmp	r0, #0
   32308:	0a000000 	beq	32310 <CSerialDevice::Write(unsigned char)+0x70>
   3230c:	eb0015c6 	bl	37a2c <LeaveCritical>
   32310:	e1a00007 	mov	r0, r7
   32314:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32318:	eb001598 	bl	37980 <EnterCritical>
   3231c:	e59630c8 	ldr	r3, [r6, #200]	@ 0xc8
   32320:	e59620cc 	ldr	r2, [r6, #204]	@ 0xcc
   32324:	e2833001 	add	r3, r3, #1
   32328:	e59600e0 	ldr	r0, [r6, #224]	@ 0xe0
   3232c:	e7ea3053 	ubfx	r3, r3, #0, #11
   32330:	e1530002 	cmp	r3, r2
   32334:	03a07000 	moveq	r7, #0
   32338:	1affffe8 	bne	322e0 <CSerialDevice::Write(unsigned char)+0x40>
   3233c:	eafffff0 	b	32304 <CSerialDevice::Write(unsigned char)+0x64>
   32340:	e5901014 	ldr	r1, [r0, #20]
   32344:	e2812018 	add	r2, r1, #24
   32348:	e5923000 	ldr	r3, [r2]
   3234c:	e3130020 	tst	r3, #32
   32350:	1afffffc 	bne	32348 <CSerialDevice::Write(unsigned char)+0xa8>
   32354:	e3a07001 	mov	r7, #1
   32358:	e5815000 	str	r5, [r1]
   3235c:	e1a00007 	mov	r0, r7
   32360:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32364:	e1a07000 	mov	r7, r0
   32368:	e1a00007 	mov	r0, r7
   3236c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00032370 <CSerialDevice::Write(void const*, unsigned int)>:
   32370:	e5d03018 	ldrb	r3, [r0, #24]
   32374:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32378:	e3530000 	cmp	r3, #0
   3237c:	0a00008a 	beq	325ac <CSerialDevice::Write(void const*, unsigned int)+0x23c>
   32380:	e2804a01 	add	r4, r0, #4096	@ 0x1000
   32384:	e1a06000 	mov	r6, r0
   32388:	e1a05001 	mov	r5, r1
   3238c:	e1a08002 	mov	r8, r2
   32390:	e59400e4 	ldr	r0, [r4, #228]	@ 0xe4
   32394:	e3500000 	cmp	r0, #0
   32398:	1a000078 	bne	32580 <CSerialDevice::Write(void const*, unsigned int)+0x210>
   3239c:	e3550000 	cmp	r5, #0
   323a0:	0a000086 	beq	325c0 <CSerialDevice::Write(void const*, unsigned int)+0x250>
   323a4:	e3580000 	cmp	r8, #0
   323a8:	01a07008 	moveq	r7, r8
   323ac:	0a000025 	beq	32448 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
   323b0:	e2455001 	sub	r5, r5, #1
   323b4:	e3a07000 	mov	r7, #0
   323b8:	ea000002 	b	323c8 <CSerialDevice::Write(void const*, unsigned int)+0x58>
   323bc:	e2877001 	add	r7, r7, #1
   323c0:	e1570008 	cmp	r7, r8
   323c4:	0a00001f 	beq	32448 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
   323c8:	e5963008 	ldr	r3, [r6, #8]
   323cc:	e5f59001 	ldrb	r9, [r5, #1]!
   323d0:	e3530000 	cmp	r3, #0
   323d4:	0a000046 	beq	324f4 <CSerialDevice::Write(void const*, unsigned int)+0x184>
   323d8:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
   323dc:	e3500000 	cmp	r0, #0
   323e0:	1a00004a 	bne	32510 <CSerialDevice::Write(void const*, unsigned int)+0x1a0>
   323e4:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   323e8:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
   323ec:	e2833001 	add	r3, r3, #1
   323f0:	e7ea3053 	ubfx	r3, r3, #0, #11
   323f4:	e1520003 	cmp	r2, r3
   323f8:	0a000012 	beq	32448 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
   323fc:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   32400:	e0862003 	add	r2, r6, r3
   32404:	e2833001 	add	r3, r3, #1
   32408:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
   3240c:	e5c298c8 	strb	r9, [r2, #2248]	@ 0x8c8
   32410:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   32414:	e7ea3053 	ubfx	r3, r3, #0, #11
   32418:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
   3241c:	e5d53000 	ldrb	r3, [r5]
   32420:	e353000a 	cmp	r3, #10
   32424:	1affffe4 	bne	323bc <CSerialDevice::Write(void const*, unsigned int)+0x4c>
   32428:	e59430d0 	ldr	r3, [r4, #208]	@ 0xd0
   3242c:	e3130001 	tst	r3, #1
   32430:	0affffe1 	beq	323bc <CSerialDevice::Write(void const*, unsigned int)+0x4c>
   32434:	e3a0100d 	mov	r1, #13
   32438:	e1a00006 	mov	r0, r6
   3243c:	ebffff97 	bl	322a0 <CSerialDevice::Write(unsigned char)>
   32440:	e3500000 	cmp	r0, #0
   32444:	1affffdc 	bne	323bc <CSerialDevice::Write(void const*, unsigned int)+0x4c>
   32448:	e59430e4 	ldr	r3, [r4, #228]	@ 0xe4
   3244c:	e3530000 	cmp	r3, #0
   32450:	1a000048 	bne	32578 <CSerialDevice::Write(void const*, unsigned int)+0x208>
   32454:	e5963008 	ldr	r3, [r6, #8]
   32458:	e3530000 	cmp	r3, #0
   3245c:	0a000022 	beq	324ec <CSerialDevice::Write(void const*, unsigned int)+0x17c>
   32460:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
   32464:	e3500000 	cmp	r0, #0
   32468:	1a000049 	bne	32594 <CSerialDevice::Write(void const*, unsigned int)+0x224>
   3246c:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   32470:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
   32474:	e1520003 	cmp	r2, r3
   32478:	0a00001b 	beq	324ec <CSerialDevice::Write(void const*, unsigned int)+0x17c>
   3247c:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   32480:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
   32484:	e1520003 	cmp	r2, r3
   32488:	1a00000d 	bne	324c4 <CSerialDevice::Write(void const*, unsigned int)+0x154>
   3248c:	ea000013 	b	324e0 <CSerialDevice::Write(void const*, unsigned int)+0x170>
   32490:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
   32494:	e0861003 	add	r1, r6, r3
   32498:	e2833001 	add	r3, r3, #1
   3249c:	e58430cc 	str	r3, [r4, #204]	@ 0xcc
   324a0:	e5d138c8 	ldrb	r3, [r1, #2248]	@ 0x8c8
   324a4:	e5823000 	str	r3, [r2]
   324a8:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
   324ac:	e7ea3053 	ubfx	r3, r3, #0, #11
   324b0:	e58430cc 	str	r3, [r4, #204]	@ 0xcc
   324b4:	e59420c8 	ldr	r2, [r4, #200]	@ 0xc8
   324b8:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
   324bc:	e1520003 	cmp	r2, r3
   324c0:	0a000006 	beq	324e0 <CSerialDevice::Write(void const*, unsigned int)+0x170>
   324c4:	e5962014 	ldr	r2, [r6, #20]
   324c8:	e5923018 	ldr	r3, [r2, #24]
   324cc:	e3130020 	tst	r3, #32
   324d0:	0affffee 	beq	32490 <CSerialDevice::Write(void const*, unsigned int)+0x120>
   324d4:	e5923038 	ldr	r3, [r2, #56]	@ 0x38
   324d8:	e3833020 	orr	r3, r3, #32
   324dc:	e5823038 	str	r3, [r2, #56]	@ 0x38
   324e0:	e59430e0 	ldr	r3, [r4, #224]	@ 0xe0
   324e4:	e3530000 	cmp	r3, #0
   324e8:	1a000026 	bne	32588 <CSerialDevice::Write(void const*, unsigned int)+0x218>
   324ec:	e1a00007 	mov	r0, r7
   324f0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   324f4:	e5962014 	ldr	r2, [r6, #20]
   324f8:	e2821018 	add	r1, r2, #24
   324fc:	e5913000 	ldr	r3, [r1]
   32500:	e3130020 	tst	r3, #32
   32504:	1afffffc 	bne	324fc <CSerialDevice::Write(void const*, unsigned int)+0x18c>
   32508:	e5829000 	str	r9, [r2]
   3250c:	eaffffc2 	b	3241c <CSerialDevice::Write(void const*, unsigned int)+0xac>
   32510:	eb00151a 	bl	37980 <EnterCritical>
   32514:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   32518:	e59420cc 	ldr	r2, [r4, #204]	@ 0xcc
   3251c:	e2833001 	add	r3, r3, #1
   32520:	e59400e0 	ldr	r0, [r4, #224]	@ 0xe0
   32524:	e7ea3053 	ubfx	r3, r3, #0, #11
   32528:	e1530002 	cmp	r3, r2
   3252c:	0a00000b 	beq	32560 <CSerialDevice::Write(void const*, unsigned int)+0x1f0>
   32530:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   32534:	e3500000 	cmp	r0, #0
   32538:	e2832001 	add	r2, r3, #1
   3253c:	e0863003 	add	r3, r6, r3
   32540:	e58420c8 	str	r2, [r4, #200]	@ 0xc8
   32544:	e5c398c8 	strb	r9, [r3, #2248]	@ 0x8c8
   32548:	e59430c8 	ldr	r3, [r4, #200]	@ 0xc8
   3254c:	e7ea3053 	ubfx	r3, r3, #0, #11
   32550:	e58430c8 	str	r3, [r4, #200]	@ 0xc8
   32554:	0affffb0 	beq	3241c <CSerialDevice::Write(void const*, unsigned int)+0xac>
   32558:	eb001533 	bl	37a2c <LeaveCritical>
   3255c:	eaffffae 	b	3241c <CSerialDevice::Write(void const*, unsigned int)+0xac>
   32560:	e3500000 	cmp	r0, #0
   32564:	0affffb7 	beq	32448 <CSerialDevice::Write(void const*, unsigned int)+0xd8>
   32568:	eb00152f 	bl	37a2c <LeaveCritical>
   3256c:	e59430e4 	ldr	r3, [r4, #228]	@ 0xe4
   32570:	e3530000 	cmp	r3, #0
   32574:	0affffb6 	beq	32454 <CSerialDevice::Write(void const*, unsigned int)+0xe4>
   32578:	eb00152b 	bl	37a2c <LeaveCritical>
   3257c:	eaffffb4 	b	32454 <CSerialDevice::Write(void const*, unsigned int)+0xe4>
   32580:	eb0014fe 	bl	37980 <EnterCritical>
   32584:	eaffff84 	b	3239c <CSerialDevice::Write(void const*, unsigned int)+0x2c>
   32588:	eb001527 	bl	37a2c <LeaveCritical>
   3258c:	e1a00007 	mov	r0, r7
   32590:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32594:	eb0014f9 	bl	37980 <EnterCritical>
   32598:	e59420c8 	ldr	r2, [r4, #200]	@ 0xc8
   3259c:	e59430cc 	ldr	r3, [r4, #204]	@ 0xcc
   325a0:	e1520003 	cmp	r2, r3
   325a4:	1affffb4 	bne	3247c <CSerialDevice::Write(void const*, unsigned int)+0x10c>
   325a8:	eaffffcc 	b	324e0 <CSerialDevice::Write(void const*, unsigned int)+0x170>
   325ac:	e3021920 	movw	r1, #10528	@ 0x2920
   325b0:	e3401004 	movt	r1, #4
   325b4:	e281000c 	add	r0, r1, #12
   325b8:	e3002176 	movw	r2, #374	@ 0x176
   325bc:	ebffe606 	bl	2bddc <assertion_failed>
   325c0:	e3021920 	movw	r1, #10528	@ 0x2920
   325c4:	e3401004 	movt	r1, #4
   325c8:	e2810018 	add	r0, r1, #24
   325cc:	e3002183 	movw	r2, #387	@ 0x183
   325d0:	ebffe601 	bl	2bddc <assertion_failed>

000325d4 <CSerialDevice::InterruptHandler()>:
   325d4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   325d8:	e2805a01 	add	r5, r0, #4096	@ 0x1000
   325dc:	e1a04000 	mov	r4, r0
   325e0:	e59500e0 	ldr	r0, [r5, #224]	@ 0xe0
   325e4:	e3500000 	cmp	r0, #0
   325e8:	1a000069 	bne	32794 <CSerialDevice::InterruptHandler()+0x1c0>
   325ec:	e5943014 	ldr	r3, [r4, #20]
   325f0:	e5932040 	ldr	r2, [r3, #64]	@ 0x40
   325f4:	e5832044 	str	r2, [r3, #68]	@ 0x44
   325f8:	e5942014 	ldr	r2, [r4, #20]
   325fc:	e282c018 	add	ip, r2, #24
   32600:	e5926018 	ldr	r6, [r2, #24]
   32604:	e2166010 	ands	r6, r6, #16
   32608:	1a000067 	bne	327ac <CSerialDevice::InterruptHandler()+0x1d8>
   3260c:	e59500d4 	ldr	r0, [r5, #212]	@ 0xd4
   32610:	e3e0e001 	mvn	lr, #1
   32614:	e3e07000 	mvn	r7, #0
   32618:	ea000020 	b	326a0 <CSerialDevice::InterruptHandler()+0xcc>
   3261c:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   32620:	e3530000 	cmp	r3, #0
   32624:	058478c4 	streq	r7, [r4, #2244]	@ 0x8c4
   32628:	e3500000 	cmp	r0, #0
   3262c:	0a00000a 	beq	3265c <CSerialDevice::InterruptHandler()+0x88>
   32630:	e59580d8 	ldr	r8, [r5, #216]	@ 0xd8
   32634:	e6af3071 	sxtb	r3, r1
   32638:	e1d890d0 	ldrsb	r9, [r8]
   3263c:	e1590003 	cmp	r9, r3
   32640:	158500d8 	strne	r0, [r5, #216]	@ 0xd8
   32644:	1a000004 	bne	3265c <CSerialDevice::InterruptHandler()+0x88>
   32648:	e2883001 	add	r3, r8, #1
   3264c:	e58530d8 	str	r3, [r5, #216]	@ 0xd8
   32650:	e1d830d1 	ldrsb	r3, [r8, #1]
   32654:	e3530000 	cmp	r3, #0
   32658:	03a06001 	moveq	r6, #1
   3265c:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
   32660:	e59488c0 	ldr	r8, [r4, #2240]	@ 0x8c0
   32664:	e2833001 	add	r3, r3, #1
   32668:	e7ea3053 	ubfx	r3, r3, #0, #11
   3266c:	e1530008 	cmp	r3, r8
   32670:	0a000013 	beq	326c4 <CSerialDevice::InterruptHandler()+0xf0>
   32674:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
   32678:	e0848003 	add	r8, r4, r3
   3267c:	e2833001 	add	r3, r3, #1
   32680:	e58438bc 	str	r3, [r4, #2236]	@ 0x8bc
   32684:	e5c810bc 	strb	r1, [r8, #188]	@ 0xbc
   32688:	e59438bc 	ldr	r3, [r4, #2236]	@ 0x8bc
   3268c:	e7ea3053 	ubfx	r3, r3, #0, #11
   32690:	e58438bc 	str	r3, [r4, #2236]	@ 0x8bc
   32694:	e59c3000 	ldr	r3, [ip]
   32698:	e3130010 	tst	r3, #16
   3269c:	1a00000e 	bne	326dc <CSerialDevice::InterruptHandler()+0x108>
   326a0:	e5921000 	ldr	r1, [r2]
   326a4:	e3110b01 	tst	r1, #1024	@ 0x400
   326a8:	1affffdb 	bne	3261c <CSerialDevice::InterruptHandler()+0x48>
   326ac:	e3110b02 	tst	r1, #2048	@ 0x800
   326b0:	0a000029 	beq	3275c <CSerialDevice::InterruptHandler()+0x188>
   326b4:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   326b8:	e3530000 	cmp	r3, #0
   326bc:	0584e8c4 	streq	lr, [r4, #2244]	@ 0x8c4
   326c0:	eaffffd8 	b	32628 <CSerialDevice::InterruptHandler()+0x54>
   326c4:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   326c8:	e3530000 	cmp	r3, #0
   326cc:	0584e8c4 	streq	lr, [r4, #2244]	@ 0x8c4
   326d0:	e59c3000 	ldr	r3, [ip]
   326d4:	e3130010 	tst	r3, #16
   326d8:	0afffff0 	beq	326a0 <CSerialDevice::InterruptHandler()+0xcc>
   326dc:	e59c3000 	ldr	r3, [ip]
   326e0:	e3130020 	tst	r3, #32
   326e4:	0a00000d 	beq	32720 <CSerialDevice::InterruptHandler()+0x14c>
   326e8:	ea000013 	b	3273c <CSerialDevice::InterruptHandler()+0x168>
   326ec:	e59530cc 	ldr	r3, [r5, #204]	@ 0xcc
   326f0:	e0841003 	add	r1, r4, r3
   326f4:	e2833001 	add	r3, r3, #1
   326f8:	e58530cc 	str	r3, [r5, #204]	@ 0xcc
   326fc:	e5d138c8 	ldrb	r3, [r1, #2248]	@ 0x8c8
   32700:	e5823000 	str	r3, [r2]
   32704:	e59530cc 	ldr	r3, [r5, #204]	@ 0xcc
   32708:	e7ea3053 	ubfx	r3, r3, #0, #11
   3270c:	e58530cc 	str	r3, [r5, #204]	@ 0xcc
   32710:	e5942014 	ldr	r2, [r4, #20]
   32714:	e5923018 	ldr	r3, [r2, #24]
   32718:	e3130020 	tst	r3, #32
   3271c:	1a000006 	bne	3273c <CSerialDevice::InterruptHandler()+0x168>
   32720:	e59510c8 	ldr	r1, [r5, #200]	@ 0xc8
   32724:	e59530cc 	ldr	r3, [r5, #204]	@ 0xcc
   32728:	e1510003 	cmp	r1, r3
   3272c:	1affffee 	bne	326ec <CSerialDevice::InterruptHandler()+0x118>
   32730:	e5923038 	ldr	r3, [r2, #56]	@ 0x38
   32734:	e3c33020 	bic	r3, r3, #32
   32738:	e5823038 	str	r3, [r2, #56]	@ 0x38
   3273c:	e59530e0 	ldr	r3, [r5, #224]	@ 0xe0
   32740:	e3530000 	cmp	r3, #0
   32744:	1a000014 	bne	3279c <CSerialDevice::InterruptHandler()+0x1c8>
   32748:	e3560000 	cmp	r6, #0
   3274c:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   32750:	e59530dc 	ldr	r3, [r5, #220]	@ 0xdc
   32754:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   32758:	e12fff13 	bx	r3
   3275c:	e3110c01 	tst	r1, #256	@ 0x100
   32760:	0a000004 	beq	32778 <CSerialDevice::InterruptHandler()+0x1a4>
   32764:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   32768:	e3530000 	cmp	r3, #0
   3276c:	03e03002 	mvneq	r3, #2
   32770:	058438c4 	streq	r3, [r4, #2244]	@ 0x8c4
   32774:	eaffffab 	b	32628 <CSerialDevice::InterruptHandler()+0x54>
   32778:	e3110c02 	tst	r1, #512	@ 0x200
   3277c:	0affffa9 	beq	32628 <CSerialDevice::InterruptHandler()+0x54>
   32780:	e59438c4 	ldr	r3, [r4, #2244]	@ 0x8c4
   32784:	e3530000 	cmp	r3, #0
   32788:	03e03003 	mvneq	r3, #3
   3278c:	058438c4 	streq	r3, [r4, #2244]	@ 0x8c4
   32790:	eaffffa4 	b	32628 <CSerialDevice::InterruptHandler()+0x54>
   32794:	eb001479 	bl	37980 <EnterCritical>
   32798:	eaffff93 	b	325ec <CSerialDevice::InterruptHandler()+0x18>
   3279c:	eb0014a2 	bl	37a2c <LeaveCritical>
   327a0:	e3560000 	cmp	r6, #0
   327a4:	1affffe9 	bne	32750 <CSerialDevice::InterruptHandler()+0x17c>
   327a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   327ac:	e5923018 	ldr	r3, [r2, #24]
   327b0:	e2136020 	ands	r6, r3, #32
   327b4:	0affffd9 	beq	32720 <CSerialDevice::InterruptHandler()+0x14c>
   327b8:	e59530e0 	ldr	r3, [r5, #224]	@ 0xe0
   327bc:	e3530000 	cmp	r3, #0
   327c0:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   327c4:	e8bd47f0 	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   327c8:	ea001497 	b	37a2c <LeaveCritical>

000327cc <CSerialDevice::InterruptStub(void*)>:
   327cc:	f57ff05f 	dmb	sy
   327d0:	e304315c 	movw	r3, #16732	@ 0x415c
   327d4:	e3403004 	movt	r3, #4
   327d8:	e5932010 	ldr	r2, [r3, #16]
   327dc:	e3120001 	tst	r2, #1
   327e0:	012fff1e 	bxeq	lr
   327e4:	e5930000 	ldr	r0, [r3]
   327e8:	e3500000 	cmp	r0, #0
   327ec:	0a000000 	beq	327f4 <CSerialDevice::InterruptStub(void*)+0x28>
   327f0:	eaffff77 	b	325d4 <CSerialDevice::InterruptHandler()>
   327f4:	e3021920 	movw	r1, #10528	@ 0x2920
   327f8:	e3401004 	movt	r1, #4
   327fc:	e2810f66 	add	r0, r1, #408	@ 0x198
   32800:	e92d4010 	push	{r4, lr}
   32804:	e300230f 	movw	r2, #783	@ 0x30f
   32808:	ebffe573 	bl	2bddc <assertion_failed>

0003280c <CSerialDevice::~CSerialDevice()>:
   3280c:	e5d03018 	ldrb	r3, [r0, #24]
   32810:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32814:	e1a04000 	mov	r4, r0
   32818:	e59f6130 	ldr	r6, [pc, #304]	@ 32950 <CSerialDevice::~CSerialDevice()+0x144>
   3281c:	e3530000 	cmp	r3, #0
   32820:	e5806000 	str	r6, [r0]
   32824:	0a00003e 	beq	32924 <CSerialDevice::~CSerialDevice()+0x118>
   32828:	ebffe8ff 	bl	2cc2c <CDeviceNameService::Get()>
   3282c:	e304515c 	movw	r5, #16732	@ 0x415c
   32830:	e3405004 	movt	r5, #4
   32834:	e5942010 	ldr	r2, [r4, #16]
   32838:	e2861e11 	add	r1, r6, #272	@ 0x110
   3283c:	e3a03000 	mov	r3, #0
   32840:	e2822001 	add	r2, r2, #1
   32844:	ebffe91e 	bl	2ccc4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   32848:	e5953010 	ldr	r3, [r5, #16]
   3284c:	e5942010 	ldr	r2, [r4, #16]
   32850:	e3a01001 	mov	r1, #1
   32854:	e1c33211 	bic	r3, r3, r1, lsl r2
   32858:	e5853010 	str	r3, [r5, #16]
   3285c:	f57ff04f 	dsb	sy
   32860:	e5942014 	ldr	r2, [r4, #20]
   32864:	e3a03000 	mov	r3, #0
   32868:	e5823038 	str	r3, [r2, #56]	@ 0x38
   3286c:	e5942014 	ldr	r2, [r4, #20]
   32870:	e5823030 	str	r3, [r2, #48]	@ 0x30
   32874:	e5943008 	ldr	r3, [r4, #8]
   32878:	e3530000 	cmp	r3, #0
   3287c:	0a00000e 	beq	328bc <CSerialDevice::~CSerialDevice()+0xb0>
   32880:	e5953004 	ldr	r3, [r5, #4]
   32884:	e2433001 	sub	r3, r3, #1
   32888:	e5853004 	str	r3, [r5, #4]
   3288c:	e3530000 	cmp	r3, #0
   32890:	1a000009 	bne	328bc <CSerialDevice::~CSerialDevice()+0xb0>
   32894:	e5950008 	ldr	r0, [r5, #8]
   32898:	e3500000 	cmp	r0, #0
   3289c:	0a000027 	beq	32940 <CSerialDevice::~CSerialDevice()+0x134>
   328a0:	e5d5300c 	ldrb	r3, [r5, #12]
   328a4:	e3530000 	cmp	r3, #0
   328a8:	0a000021 	beq	32934 <CSerialDevice::~CSerialDevice()+0x128>
   328ac:	eb001558 	bl	37e14 <CInterruptSystem::DisconnectFIQ()>
   328b0:	e3a03000 	mov	r3, #0
   328b4:	e5853008 	str	r3, [r5, #8]
   328b8:	e5c5300c 	strb	r3, [r5, #12]
   328bc:	e284606c 	add	r6, r4, #108	@ 0x6c
   328c0:	e3a02001 	mov	r2, #1
   328c4:	e3a01000 	mov	r1, #0
   328c8:	e1a00006 	mov	r0, r6
   328cc:	e2847094 	add	r7, r4, #148	@ 0x94
   328d0:	ebffec83 	bl	2dae4 <CGPIOPin::SetMode(TGPIOMode, bool)>
   328d4:	e3a02001 	mov	r2, #1
   328d8:	e3a01000 	mov	r1, #0
   328dc:	e1a00007 	mov	r0, r7
   328e0:	ebffec7f 	bl	2dae4 <CGPIOPin::SetMode(TGPIOMode, bool)>
   328e4:	e5942010 	ldr	r2, [r4, #16]
   328e8:	e3a03000 	mov	r3, #0
   328ec:	e1a00007 	mov	r0, r7
   328f0:	e5c43018 	strb	r3, [r4, #24]
   328f4:	e7853102 	str	r3, [r5, r2, lsl #2]
   328f8:	ebffea39 	bl	2d1e4 <CGPIOPin::~CGPIOPin()>
   328fc:	e1a00006 	mov	r0, r6
   32900:	ebffea37 	bl	2d1e4 <CGPIOPin::~CGPIOPin()>
   32904:	e2840044 	add	r0, r4, #68	@ 0x44
   32908:	ebffea35 	bl	2d1e4 <CGPIOPin::~CGPIOPin()>
   3290c:	e284001c 	add	r0, r4, #28
   32910:	ebffea33 	bl	2d1e4 <CGPIOPin::~CGPIOPin()>
   32914:	e1a00004 	mov	r0, r4
   32918:	ebffe75b 	bl	2c68c <CDevice::~CDevice()>
   3291c:	e1a00004 	mov	r0, r4
   32920:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   32924:	e2800094 	add	r0, r0, #148	@ 0x94
   32928:	ebffea2d 	bl	2d1e4 <CGPIOPin::~CGPIOPin()>
   3292c:	e284006c 	add	r0, r4, #108	@ 0x6c
   32930:	eafffff2 	b	32900 <CSerialDevice::~CSerialDevice()+0xf4>
   32934:	e3a01039 	mov	r1, #57	@ 0x39
   32938:	eb0014cd 	bl	37c74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   3293c:	eaffffdb 	b	328b0 <CSerialDevice::~CSerialDevice()+0xa4>
   32940:	e3a020e2 	mov	r2, #226	@ 0xe2
   32944:	e246102c 	sub	r1, r6, #44	@ 0x2c
   32948:	e2860f5f 	add	r0, r6, #380	@ 0x17c
   3294c:	ebffe522 	bl	2bddc <assertion_failed>
   32950:	0004294c 	.word	0x0004294c

00032954 <CSerialDevice::~CSerialDevice()>:
   32954:	e92d4010 	push	{r4, lr}
   32958:	e1a04000 	mov	r4, r0
   3295c:	ebffffaa 	bl	3280c <CSerialDevice::~CSerialDevice()>
   32960:	e1a00004 	mov	r0, r4
   32964:	e30110e8 	movw	r1, #4328	@ 0x10e8
   32968:	eb000e05 	bl	36184 <operator delete(void*, unsigned int)>
   3296c:	e1a00004 	mov	r0, r4
   32970:	e8bd8010 	pop	{r4, pc}
   32974:	00000000 	andeq	r0, r0, r0

00032978 <CString::~CString()>:
   32978:	e92d4010 	push	{r4, lr}
   3297c:	e1a04000 	mov	r4, r0
   32980:	e5900004 	ldr	r0, [r0, #4]
   32984:	e59f3014 	ldr	r3, [pc, #20]	@ 329a0 <CString::~CString()+0x28>
   32988:	e3500000 	cmp	r0, #0
   3298c:	e5843000 	str	r3, [r4]
   32990:	0a000000 	beq	32998 <CString::~CString()+0x20>
   32994:	eb000df4 	bl	3616c <operator delete[](void*)>
   32998:	e1a00004 	mov	r0, r4
   3299c:	e8bd8010 	pop	{r4, pc}
   329a0:	00042ae8 	.word	0x00042ae8

000329a4 <CString::~CString()>:
   329a4:	e92d4010 	push	{r4, lr}
   329a8:	e1a04000 	mov	r4, r0
   329ac:	e5900004 	ldr	r0, [r0, #4]
   329b0:	e59f3020 	ldr	r3, [pc, #32]	@ 329d8 <CString::~CString()+0x34>
   329b4:	e3500000 	cmp	r0, #0
   329b8:	e5843000 	str	r3, [r4]
   329bc:	0a000000 	beq	329c4 <CString::~CString()+0x20>
   329c0:	eb000de9 	bl	3616c <operator delete[](void*)>
   329c4:	e1a00004 	mov	r0, r4
   329c8:	e3a01010 	mov	r1, #16
   329cc:	eb000dec 	bl	36184 <operator delete(void*, unsigned int)>
   329d0:	e1a00004 	mov	r0, r4
   329d4:	e8bd8010 	pop	{r4, pc}
   329d8:	00042ae8 	.word	0x00042ae8

000329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>:
   329dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   329e0:	e990004c 	ldmib	r0, {r2, r3, r6}
   329e4:	e0466002 	sub	r6, r6, r2
   329e8:	e0861001 	add	r1, r6, r1
   329ec:	e2812001 	add	r2, r1, #1
   329f0:	e1520003 	cmp	r2, r3
   329f4:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   329f8:	e1a04000 	mov	r4, r0
   329fc:	e2815041 	add	r5, r1, #65	@ 0x41
   32a00:	e1a00005 	mov	r0, r5
   32a04:	eb000dcc 	bl	3613c <operator new[](unsigned int)>
   32a08:	e3a02000 	mov	r2, #0
   32a0c:	e594300c 	ldr	r3, [r4, #12]
   32a10:	e1a07000 	mov	r7, r0
   32a14:	e5c32000 	strb	r2, [r3]
   32a18:	e5941004 	ldr	r1, [r4, #4]
   32a1c:	eb000a54 	bl	35374 <strcpy>
   32a20:	e5940004 	ldr	r0, [r4, #4]
   32a24:	e3500000 	cmp	r0, #0
   32a28:	0a000000 	beq	32a30 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x54>
   32a2c:	eb000dce 	bl	3616c <operator delete[](void*)>
   32a30:	e0876006 	add	r6, r7, r6
   32a34:	e5847004 	str	r7, [r4, #4]
   32a38:	e5845008 	str	r5, [r4, #8]
   32a3c:	e584600c 	str	r6, [r4, #12]
   32a40:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00032a44 <CString::CString()>:
   32a44:	e59f100c 	ldr	r1, [pc, #12]	@ 32a58 <CString::CString()+0x14>
   32a48:	e3a02000 	mov	r2, #0
   32a4c:	e8800006 	stm	r0, {r1, r2}
   32a50:	e5802008 	str	r2, [r0, #8]
   32a54:	e12fff1e 	bx	lr
   32a58:	00042ae8 	.word	0x00042ae8

00032a5c <CString::CString(char const*)>:
   32a5c:	e92d4070 	push	{r4, r5, r6, lr}
   32a60:	e1a04000 	mov	r4, r0
   32a64:	e59f302c 	ldr	r3, [pc, #44]	@ 32a98 <CString::CString(char const*)+0x3c>
   32a68:	e1a00001 	mov	r0, r1
   32a6c:	e1a05001 	mov	r5, r1
   32a70:	e5843000 	str	r3, [r4]
   32a74:	eb00099e 	bl	350f4 <strlen>
   32a78:	e2800001 	add	r0, r0, #1
   32a7c:	e5840008 	str	r0, [r4, #8]
   32a80:	eb000dad 	bl	3613c <operator new[](unsigned int)>
   32a84:	e1a01005 	mov	r1, r5
   32a88:	e5840004 	str	r0, [r4, #4]
   32a8c:	eb000a38 	bl	35374 <strcpy>
   32a90:	e1a00004 	mov	r0, r4
   32a94:	e8bd8070 	pop	{r4, r5, r6, pc}
   32a98:	00042ae8 	.word	0x00042ae8

00032a9c <CString::CString(CString const&)>:
   32a9c:	e92d4070 	push	{r4, r5, r6, lr}
   32aa0:	e1a04000 	mov	r4, r0
   32aa4:	e5910004 	ldr	r0, [r1, #4]
   32aa8:	e59f3040 	ldr	r3, [pc, #64]	@ 32af0 <CString::CString(CString const&)+0x54>
   32aac:	e1a06001 	mov	r6, r1
   32ab0:	e3500000 	cmp	r0, #0
   32ab4:	e30d5e48 	movw	r5, #56904	@ 0xde48
   32ab8:	e3405003 	movt	r5, #3
   32abc:	e5843000 	str	r3, [r4]
   32ac0:	01a00005 	moveq	r0, r5
   32ac4:	eb00098a 	bl	350f4 <strlen>
   32ac8:	e2800001 	add	r0, r0, #1
   32acc:	e5840008 	str	r0, [r4, #8]
   32ad0:	eb000d99 	bl	3613c <operator new[](unsigned int)>
   32ad4:	e5961004 	ldr	r1, [r6, #4]
   32ad8:	e5840004 	str	r0, [r4, #4]
   32adc:	e3510000 	cmp	r1, #0
   32ae0:	01a01005 	moveq	r1, r5
   32ae4:	eb000a22 	bl	35374 <strcpy>
   32ae8:	e1a00004 	mov	r0, r4
   32aec:	e8bd8070 	pop	{r4, r5, r6, pc}
   32af0:	00042ae8 	.word	0x00042ae8

00032af4 <CString::CString(CString&&)>:
   32af4:	e59fc024 	ldr	ip, [pc, #36]	@ 32b20 <CString::CString(CString&&)+0x2c>
   32af8:	e3a02000 	mov	r2, #0
   32afc:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   32b00:	e591e008 	ldr	lr, [r1, #8]
   32b04:	e580c000 	str	ip, [r0]
   32b08:	e591c004 	ldr	ip, [r1, #4]
   32b0c:	e580e008 	str	lr, [r0, #8]
   32b10:	e5812008 	str	r2, [r1, #8]
   32b14:	e580c004 	str	ip, [r0, #4]
   32b18:	e5812004 	str	r2, [r1, #4]
   32b1c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   32b20:	00042ae8 	.word	0x00042ae8

00032b24 <CString::operator char const*() const>:
   32b24:	e5900004 	ldr	r0, [r0, #4]
   32b28:	e30d3e48 	movw	r3, #56904	@ 0xde48
   32b2c:	e3403003 	movt	r3, #3
   32b30:	e3500000 	cmp	r0, #0
   32b34:	01a00003 	moveq	r0, r3
   32b38:	e12fff1e 	bx	lr

00032b3c <CString::operator=(char const*)>:
   32b3c:	e92d4070 	push	{r4, r5, r6, lr}
   32b40:	e1a04000 	mov	r4, r0
   32b44:	e5900004 	ldr	r0, [r0, #4]
   32b48:	e1a05001 	mov	r5, r1
   32b4c:	e3500000 	cmp	r0, #0
   32b50:	0a000000 	beq	32b58 <CString::operator=(char const*)+0x1c>
   32b54:	eb000d84 	bl	3616c <operator delete[](void*)>
   32b58:	e1a00005 	mov	r0, r5
   32b5c:	eb000964 	bl	350f4 <strlen>
   32b60:	e2800001 	add	r0, r0, #1
   32b64:	e5840008 	str	r0, [r4, #8]
   32b68:	eb000d73 	bl	3613c <operator new[](unsigned int)>
   32b6c:	e1a01005 	mov	r1, r5
   32b70:	e5840004 	str	r0, [r4, #4]
   32b74:	eb0009fe 	bl	35374 <strcpy>
   32b78:	e5940004 	ldr	r0, [r4, #4]
   32b7c:	e8bd8070 	pop	{r4, r5, r6, pc}

00032b80 <CString::operator=(CString const&)>:
   32b80:	e92d4070 	push	{r4, r5, r6, lr}
   32b84:	e1a04000 	mov	r4, r0
   32b88:	e5900004 	ldr	r0, [r0, #4]
   32b8c:	e1a06001 	mov	r6, r1
   32b90:	e3500000 	cmp	r0, #0
   32b94:	0a000000 	beq	32b9c <CString::operator=(CString const&)+0x1c>
   32b98:	eb000d73 	bl	3616c <operator delete[](void*)>
   32b9c:	e5960004 	ldr	r0, [r6, #4]
   32ba0:	e30d5e48 	movw	r5, #56904	@ 0xde48
   32ba4:	e3405003 	movt	r5, #3
   32ba8:	e3500000 	cmp	r0, #0
   32bac:	01a00005 	moveq	r0, r5
   32bb0:	eb00094f 	bl	350f4 <strlen>
   32bb4:	e2800001 	add	r0, r0, #1
   32bb8:	e5840008 	str	r0, [r4, #8]
   32bbc:	eb000d5e 	bl	3613c <operator new[](unsigned int)>
   32bc0:	e5840004 	str	r0, [r4, #4]
   32bc4:	e5961004 	ldr	r1, [r6, #4]
   32bc8:	e3510000 	cmp	r1, #0
   32bcc:	01a01005 	moveq	r1, r5
   32bd0:	eb0009e7 	bl	35374 <strcpy>
   32bd4:	e1a00004 	mov	r0, r4
   32bd8:	e8bd8070 	pop	{r4, r5, r6, pc}

00032bdc <CString::operator=(CString&&)>:
   32bdc:	e92d4070 	push	{r4, r5, r6, lr}
   32be0:	e1a05000 	mov	r5, r0
   32be4:	e5900004 	ldr	r0, [r0, #4]
   32be8:	e1a04001 	mov	r4, r1
   32bec:	e3500000 	cmp	r0, #0
   32bf0:	0a000000 	beq	32bf8 <CString::operator=(CString&&)+0x1c>
   32bf4:	eb000d5c 	bl	3616c <operator delete[](void*)>
   32bf8:	e5941008 	ldr	r1, [r4, #8]
   32bfc:	e3a03000 	mov	r3, #0
   32c00:	e5942004 	ldr	r2, [r4, #4]
   32c04:	e1a00005 	mov	r0, r5
   32c08:	e5851008 	str	r1, [r5, #8]
   32c0c:	e5852004 	str	r2, [r5, #4]
   32c10:	e5843008 	str	r3, [r4, #8]
   32c14:	e5843004 	str	r3, [r4, #4]
   32c18:	e8bd8070 	pop	{r4, r5, r6, pc}

00032c1c <CString::GetLength() const>:
   32c1c:	e5900004 	ldr	r0, [r0, #4]
   32c20:	e3500000 	cmp	r0, #0
   32c24:	012fff1e 	bxeq	lr
   32c28:	ea000931 	b	350f4 <strlen>

00032c2c <CString::Append(char const*)>:
   32c2c:	e92d4070 	push	{r4, r5, r6, lr}
   32c30:	e1a04000 	mov	r4, r0
   32c34:	e5900004 	ldr	r0, [r0, #4]
   32c38:	e3a03001 	mov	r3, #1
   32c3c:	e1a06001 	mov	r6, r1
   32c40:	e3500000 	cmp	r0, #0
   32c44:	e5843008 	str	r3, [r4, #8]
   32c48:	0a000003 	beq	32c5c <CString::Append(char const*)+0x30>
   32c4c:	eb000928 	bl	350f4 <strlen>
   32c50:	e5943008 	ldr	r3, [r4, #8]
   32c54:	e0833000 	add	r3, r3, r0
   32c58:	e5843008 	str	r3, [r4, #8]
   32c5c:	e1a00006 	mov	r0, r6
   32c60:	eb000923 	bl	350f4 <strlen>
   32c64:	e5943008 	ldr	r3, [r4, #8]
   32c68:	e0800003 	add	r0, r0, r3
   32c6c:	e5840008 	str	r0, [r4, #8]
   32c70:	eb000d31 	bl	3613c <operator new[](unsigned int)>
   32c74:	e5941004 	ldr	r1, [r4, #4]
   32c78:	e1a05000 	mov	r5, r0
   32c7c:	e3510000 	cmp	r1, #0
   32c80:	05c01000 	strbeq	r1, [r0]
   32c84:	0a000004 	beq	32c9c <CString::Append(char const*)+0x70>
   32c88:	eb0009b9 	bl	35374 <strcpy>
   32c8c:	e5940004 	ldr	r0, [r4, #4]
   32c90:	e3500000 	cmp	r0, #0
   32c94:	0a000000 	beq	32c9c <CString::Append(char const*)+0x70>
   32c98:	eb000d33 	bl	3616c <operator delete[](void*)>
   32c9c:	e1a01006 	mov	r1, r6
   32ca0:	e1a00005 	mov	r0, r5
   32ca4:	eb0009ca 	bl	353d4 <strcat>
   32ca8:	e5845004 	str	r5, [r4, #4]
   32cac:	e8bd8070 	pop	{r4, r5, r6, pc}

00032cb0 <CString::Compare(char const*) const>:
   32cb0:	e5900004 	ldr	r0, [r0, #4]
   32cb4:	ea000918 	b	3511c <strcmp>

00032cb8 <CString::Find(char) const>:
   32cb8:	e5902004 	ldr	r2, [r0, #4]
   32cbc:	e1d230d0 	ldrsb	r3, [r2]
   32cc0:	e3530000 	cmp	r3, #0
   32cc4:	0a000006 	beq	32ce4 <CString::Find(char) const+0x2c>
   32cc8:	e3a00000 	mov	r0, #0
   32ccc:	e1510003 	cmp	r1, r3
   32cd0:	012fff1e 	bxeq	lr
   32cd4:	e1f230d1 	ldrsb	r3, [r2, #1]!
   32cd8:	e2800001 	add	r0, r0, #1
   32cdc:	e3530000 	cmp	r3, #0
   32ce0:	1afffff9 	bne	32ccc <CString::Find(char) const+0x14>
   32ce4:	e3e00000 	mvn	r0, #0
   32ce8:	e12fff1e 	bx	lr

00032cec <CString::Replace(char const*, char const*)>:
   32cec:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32cf0:	e1d160d0 	ldrsb	r6, [r1]
   32cf4:	e3560000 	cmp	r6, #0
   32cf8:	1a000001 	bne	32d04 <CString::Replace(char const*, char const*)+0x18>
   32cfc:	e1a00006 	mov	r0, r6
   32d00:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32d04:	e5904004 	ldr	r4, [r0, #4]
   32d08:	e1a0a000 	mov	sl, r0
   32d0c:	e1a05001 	mov	r5, r1
   32d10:	e1a07002 	mov	r7, r2
   32d14:	e1a00004 	mov	r0, r4
   32d18:	eb0008f5 	bl	350f4 <strlen>
   32d1c:	e2800001 	add	r0, r0, #1
   32d20:	eb000d05 	bl	3613c <operator new[](unsigned int)>
   32d24:	e1a01004 	mov	r1, r4
   32d28:	e1a08000 	mov	r8, r0
   32d2c:	eb000990 	bl	35374 <strcpy>
   32d30:	e59a0004 	ldr	r0, [sl, #4]
   32d34:	e3500000 	cmp	r0, #0
   32d38:	0a000000 	beq	32d40 <CString::Replace(char const*, char const*)+0x54>
   32d3c:	eb000d0a 	bl	3616c <operator delete[](void*)>
   32d40:	e3a00040 	mov	r0, #64	@ 0x40
   32d44:	e1a04008 	mov	r4, r8
   32d48:	e58a0008 	str	r0, [sl, #8]
   32d4c:	e3a06000 	mov	r6, #0
   32d50:	eb000cf9 	bl	3613c <operator new[](unsigned int)>
   32d54:	e58a0004 	str	r0, [sl, #4]
   32d58:	e58a000c 	str	r0, [sl, #12]
   32d5c:	e1d510d0 	ldrsb	r1, [r5]
   32d60:	e1a00004 	mov	r0, r4
   32d64:	eb0009ab 	bl	35418 <strchr>
   32d68:	e2509000 	subs	r9, r0, #0
   32d6c:	0a000032 	beq	32e3c <CString::Replace(char const*, char const*)+0x150>
   32d70:	e1540009 	cmp	r4, r9
   32d74:	21a00004 	movcs	r0, r4
   32d78:	2a00000a 	bcs	32da8 <CString::Replace(char const*, char const*)+0xbc>
   32d7c:	e3a01001 	mov	r1, #1
   32d80:	e1a0000a 	mov	r0, sl
   32d84:	e0d4b0d1 	ldrsb	fp, [r4], #1
   32d88:	ebffff13 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   32d8c:	e59a300c 	ldr	r3, [sl, #12]
   32d90:	e1590004 	cmp	r9, r4
   32d94:	e2832001 	add	r2, r3, #1
   32d98:	e58a200c 	str	r2, [sl, #12]
   32d9c:	e5c3b000 	strb	fp, [r3]
   32da0:	1afffff5 	bne	32d7c <CString::Replace(char const*, char const*)+0x90>
   32da4:	e1a00009 	mov	r0, r9
   32da8:	e1d530d1 	ldrsb	r3, [r5, #1]
   32dac:	e2851001 	add	r1, r5, #1
   32db0:	e2894001 	add	r4, r9, #1
   32db4:	e3530000 	cmp	r3, #0
   32db8:	1a000003 	bne	32dcc <CString::Replace(char const*, char const*)+0xe0>
   32dbc:	ea00000f 	b	32e00 <CString::Replace(char const*, char const*)+0x114>
   32dc0:	e1f130d1 	ldrsb	r3, [r1, #1]!
   32dc4:	e3530000 	cmp	r3, #0
   32dc8:	0a00000c 	beq	32e00 <CString::Replace(char const*, char const*)+0x114>
   32dcc:	e0d420d1 	ldrsb	r2, [r4], #1
   32dd0:	e1520003 	cmp	r2, r3
   32dd4:	0afffff9 	beq	32dc0 <CString::Replace(char const*, char const*)+0xd4>
   32dd8:	e1a04000 	mov	r4, r0
   32ddc:	e3a01001 	mov	r1, #1
   32de0:	e1a0000a 	mov	r0, sl
   32de4:	e0d490d1 	ldrsb	r9, [r4], #1
   32de8:	ebfffefb 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   32dec:	e59a300c 	ldr	r3, [sl, #12]
   32df0:	e2832001 	add	r2, r3, #1
   32df4:	e58a200c 	str	r2, [sl, #12]
   32df8:	e5c39000 	strb	r9, [r3]
   32dfc:	eaffffd6 	b	32d5c <CString::Replace(char const*, char const*)+0x70>
   32e00:	e1a00007 	mov	r0, r7
   32e04:	eb0008ba 	bl	350f4 <strlen>
   32e08:	e2509000 	subs	r9, r0, #0
   32e0c:	0a000002 	beq	32e1c <CString::Replace(char const*, char const*)+0x130>
   32e10:	e1a01009 	mov	r1, r9
   32e14:	e1a0000a 	mov	r0, sl
   32e18:	ebfffeef 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   32e1c:	e59a000c 	ldr	r0, [sl, #12]
   32e20:	e1a01007 	mov	r1, r7
   32e24:	eb000952 	bl	35374 <strcpy>
   32e28:	e59a300c 	ldr	r3, [sl, #12]
   32e2c:	e2866001 	add	r6, r6, #1
   32e30:	e0833009 	add	r3, r3, r9
   32e34:	e58a300c 	str	r3, [sl, #12]
   32e38:	eaffffc7 	b	32d5c <CString::Replace(char const*, char const*)+0x70>
   32e3c:	e1a00004 	mov	r0, r4
   32e40:	eb0008ab 	bl	350f4 <strlen>
   32e44:	e2505000 	subs	r5, r0, #0
   32e48:	0a000002 	beq	32e58 <CString::Replace(char const*, char const*)+0x16c>
   32e4c:	e1a01005 	mov	r1, r5
   32e50:	e1a0000a 	mov	r0, sl
   32e54:	ebfffee0 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   32e58:	e1a01004 	mov	r1, r4
   32e5c:	e59a000c 	ldr	r0, [sl, #12]
   32e60:	eb000943 	bl	35374 <strcpy>
   32e64:	e59a300c 	ldr	r3, [sl, #12]
   32e68:	e1a00008 	mov	r0, r8
   32e6c:	e3a02000 	mov	r2, #0
   32e70:	e0831005 	add	r1, r3, r5
   32e74:	e58a100c 	str	r1, [sl, #12]
   32e78:	e7c32005 	strb	r2, [r3, r5]
   32e7c:	eb000cba 	bl	3616c <operator delete[](void*)>
   32e80:	e1a00006 	mov	r0, r6
   32e84:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00032e88 <CString::PutChar(char, unsigned int)>:
   32e88:	e92d4070 	push	{r4, r5, r6, lr}
   32e8c:	e2524000 	subs	r4, r2, #0
   32e90:	08bd8070 	popeq	{r4, r5, r6, pc}
   32e94:	e1a06001 	mov	r6, r1
   32e98:	e1a01004 	mov	r1, r4
   32e9c:	e1a05000 	mov	r5, r0
   32ea0:	ebfffecd 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   32ea4:	e2442001 	sub	r2, r4, #1
   32ea8:	e595300c 	ldr	r3, [r5, #12]
   32eac:	e2422001 	sub	r2, r2, #1
   32eb0:	e3720001 	cmn	r2, #1
   32eb4:	e2830001 	add	r0, r3, #1
   32eb8:	e585000c 	str	r0, [r5, #12]
   32ebc:	e5c36000 	strb	r6, [r3]
   32ec0:	1afffff8 	bne	32ea8 <CString::PutChar(char, unsigned int)+0x20>
   32ec4:	e8bd8070 	pop	{r4, r5, r6, pc}

00032ec8 <CString::PutString(char const*)>:
   32ec8:	e92d4070 	push	{r4, r5, r6, lr}
   32ecc:	e1a04000 	mov	r4, r0
   32ed0:	e1a00001 	mov	r0, r1
   32ed4:	e1a06001 	mov	r6, r1
   32ed8:	eb000885 	bl	350f4 <strlen>
   32edc:	e2505000 	subs	r5, r0, #0
   32ee0:	0a000002 	beq	32ef0 <CString::PutString(char const*)+0x28>
   32ee4:	e1a01005 	mov	r1, r5
   32ee8:	e1a00004 	mov	r0, r4
   32eec:	ebfffeba 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   32ef0:	e594000c 	ldr	r0, [r4, #12]
   32ef4:	e1a01006 	mov	r1, r6
   32ef8:	eb00091d 	bl	35374 <strcpy>
   32efc:	e594300c 	ldr	r3, [r4, #12]
   32f00:	e0833005 	add	r3, r3, r5
   32f04:	e584300c 	str	r3, [r4, #12]
   32f08:	e8bd8070 	pop	{r4, r5, r6, pc}

00032f0c <CString::ReserveSpace(unsigned int)>:
   32f0c:	e3510000 	cmp	r1, #0
   32f10:	012fff1e 	bxeq	lr
   32f14:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   32f18:	e1a05000 	mov	r5, r0
   32f1c:	e990004c 	ldmib	r0, {r2, r3, r6}
   32f20:	e0466002 	sub	r6, r6, r2
   32f24:	e0811006 	add	r1, r1, r6
   32f28:	e2812001 	add	r2, r1, #1
   32f2c:	e1520003 	cmp	r2, r3
   32f30:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
   32f34:	e2814041 	add	r4, r1, #65	@ 0x41
   32f38:	e1a00004 	mov	r0, r4
   32f3c:	eb000c7e 	bl	3613c <operator new[](unsigned int)>
   32f40:	e595300c 	ldr	r3, [r5, #12]
   32f44:	e3a02000 	mov	r2, #0
   32f48:	e1a07000 	mov	r7, r0
   32f4c:	e5c32000 	strb	r2, [r3]
   32f50:	e5951004 	ldr	r1, [r5, #4]
   32f54:	eb000906 	bl	35374 <strcpy>
   32f58:	e5950004 	ldr	r0, [r5, #4]
   32f5c:	e3500000 	cmp	r0, #0
   32f60:	0a000000 	beq	32f68 <CString::ReserveSpace(unsigned int)+0x5c>
   32f64:	eb000c80 	bl	3616c <operator delete[](void*)>
   32f68:	e0876006 	add	r6, r7, r6
   32f6c:	e5857004 	str	r7, [r5, #4]
   32f70:	e5854008 	str	r4, [r5, #8]
   32f74:	e585600c 	str	r6, [r5, #12]
   32f78:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

00032f7c <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   32f7c:	e1510002 	cmp	r1, r2
   32f80:	e92d4070 	push	{r4, r5, r6, lr}
   32f84:	23a0c001 	movcs	ip, #1
   32f88:	3a00001b 	bcc	32ffc <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x80>
   32f8c:	e00c0c92 	mul	ip, r2, ip
   32f90:	e734fc11 	udiv	r4, r1, ip
   32f94:	e1a0e004 	mov	lr, r4
   32f98:	e1540002 	cmp	r4, r2
   32f9c:	2afffffa 	bcs	32f8c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x10>
   32fa0:	e2233001 	eor	r3, r3, #1
   32fa4:	e1a05000 	mov	r5, r0
   32fa8:	e1a06283 	lsl	r6, r3, #5
   32fac:	e2866037 	add	r6, r6, #55	@ 0x37
   32fb0:	e6ef6076 	uxtb	r6, r6
   32fb4:	ea000002 	b	32fc4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>
   32fb8:	e73ef411 	udiv	lr, r1, r4
   32fbc:	e1a0c004 	mov	ip, r4
   32fc0:	e1a0400e 	mov	r4, lr
   32fc4:	e6ef307e 	uxtb	r3, lr
   32fc8:	e061149c 	mls	r1, ip, r4, r1
   32fcc:	e0864003 	add	r4, r6, r3
   32fd0:	e2833030 	add	r3, r3, #48	@ 0x30
   32fd4:	e35e0009 	cmp	lr, #9
   32fd8:	86af3074 	sxtbhi	r3, r4
   32fdc:	96af3073 	sxtbls	r3, r3
   32fe0:	e734f21c 	udiv	r4, ip, r2
   32fe4:	e15c0002 	cmp	ip, r2
   32fe8:	e4c53001 	strb	r3, [r5], #1
   32fec:	2afffff1 	bcs	32fb8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x3c>
   32ff0:	e3a03000 	mov	r3, #0
   32ff4:	e5c53000 	strb	r3, [r5]
   32ff8:	e8bd8070 	pop	{r4, r5, r6, pc}
   32ffc:	e1a0e001 	mov	lr, r1
   33000:	e3a0c001 	mov	ip, #1
   33004:	e1a04001 	mov	r4, r1
   33008:	eaffffe4 	b	32fa0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x24>

0003300c <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
   3300c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33010:	e1a0b002 	mov	fp, r2
   33014:	e1a0a000 	mov	sl, r0
   33018:	e24dd014 	sub	sp, sp, #20
   3301c:	e3a07000 	mov	r7, #0
   33020:	e59d8038 	ldr	r8, [sp, #56]	@ 0x38
   33024:	e58d3004 	str	r3, [sp, #4]
   33028:	e1520008 	cmp	r2, r8
   3302c:	e5dd903c 	ldrb	r9, [sp, #60]	@ 0x3c
   33030:	e2d33000 	sbcs	r3, r3, #0
   33034:	23a05001 	movcs	r5, #1
   33038:	259d4004 	ldrcs	r4, [sp, #4]
   3303c:	3a000040 	bcc	33144 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x138>
   33040:	e0030798 	mul	r3, r8, r7
   33044:	e1a0000b 	mov	r0, fp
   33048:	e0875895 	umull	r5, r7, r5, r8
   3304c:	e1a01004 	mov	r1, r4
   33050:	e0837007 	add	r7, r3, r7
   33054:	e1a02005 	mov	r2, r5
   33058:	e1a03007 	mov	r3, r7
   3305c:	fa001a29 	blx	39908 <__aeabi_uldivmod>
   33060:	e1500008 	cmp	r0, r8
   33064:	e2d13000 	sbcs	r3, r1, #0
   33068:	2afffff4 	bcs	33040 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x34>
   3306c:	e1a04000 	mov	r4, r0
   33070:	e1a06001 	mov	r6, r1
   33074:	e2299001 	eor	r9, r9, #1
   33078:	e58da00c 	str	sl, [sp, #12]
   3307c:	e58d8038 	str	r8, [sp, #56]	@ 0x38
   33080:	e1a09289 	lsl	r9, r9, #5
   33084:	e2899037 	add	r9, r9, #55	@ 0x37
   33088:	e6ef3079 	uxtb	r3, r9
   3308c:	e58d3008 	str	r3, [sp, #8]
   33090:	ea000003 	b	330a4 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x98>
   33094:	fa001a1b 	blx	39908 <__aeabi_uldivmod>
   33098:	e1a07008 	mov	r7, r8
   3309c:	e1a04000 	mov	r4, r0
   330a0:	e1a06001 	mov	r6, r1
   330a4:	e59d1004 	ldr	r1, [sp, #4]
   330a8:	e1a02005 	mov	r2, r5
   330ac:	e1a03007 	mov	r3, r7
   330b0:	e1a0000b 	mov	r0, fp
   330b4:	fa001a13 	blx	39908 <__aeabi_uldivmod>
   330b8:	e1a08003 	mov	r8, r3
   330bc:	e59d3008 	ldr	r3, [sp, #8]
   330c0:	e354000a 	cmp	r4, #10
   330c4:	e6ef4074 	uxtb	r4, r4
   330c8:	e2d66000 	sbcs	r6, r6, #0
   330cc:	e0831004 	add	r1, r3, r4
   330d0:	e2844030 	add	r4, r4, #48	@ 0x30
   330d4:	e1a09002 	mov	r9, r2
   330d8:	e3a03000 	mov	r3, #0
   330dc:	e6af1071 	sxtb	r1, r1
   330e0:	e1a00005 	mov	r0, r5
   330e4:	36af1074 	sxtbcc	r1, r4
   330e8:	e1a0b002 	mov	fp, r2
   330ec:	e4ca1001 	strb	r1, [sl], #1
   330f0:	e1a01007 	mov	r1, r7
   330f4:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
   330f8:	e58d8004 	str	r8, [sp, #4]
   330fc:	fa001a01 	blx	39908 <__aeabi_uldivmod>
   33100:	e59dc038 	ldr	ip, [sp, #56]	@ 0x38
   33104:	e1a02000 	mov	r2, r0
   33108:	e1a03001 	mov	r3, r1
   3310c:	e1a00009 	mov	r0, r9
   33110:	e155000c 	cmp	r5, ip
   33114:	e1a01008 	mov	r1, r8
   33118:	e1a05002 	mov	r5, r2
   3311c:	e1a08003 	mov	r8, r3
   33120:	e2d77000 	sbcs	r7, r7, #0
   33124:	2affffda 	bcs	33094 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x88>
   33128:	e1a0c00a 	mov	ip, sl
   3312c:	e59da00c 	ldr	sl, [sp, #12]
   33130:	e3a03000 	mov	r3, #0
   33134:	e1a0000a 	mov	r0, sl
   33138:	e5cc3000 	strb	r3, [ip]
   3313c:	e28dd014 	add	sp, sp, #20
   33140:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33144:	e59d6004 	ldr	r6, [sp, #4]
   33148:	e1a04002 	mov	r4, r2
   3314c:	e3a05001 	mov	r5, #1
   33150:	eaffffc7 	b	33074 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x68>

00033154 <CString::ftoa(char*, double, unsigned int)>:
   33154:	eeb50bc0 	vcmpe.f64	d0, #0.0
   33158:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   3315c:	eddf0b8d 	vldr	d16, [pc, #564]	@ 33398 <CString::ftoa(char*, double, unsigned int)+0x244>
   33160:	ed2d8b02 	vpush	{d8}
   33164:	eeb08b40 	vmov.f64	d8, d0
   33168:	e1a06000 	mov	r6, r0
   3316c:	e24dd014 	sub	sp, sp, #20
   33170:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   33174:	e1a04000 	mov	r4, r0
   33178:	e1a07001 	mov	r7, r1
   3317c:	4eb18b40 	vnegmi.f64	d8, d0
   33180:	43a0302d 	movmi	r3, #45	@ 0x2d
   33184:	44c63001 	strbmi	r3, [r6], #1
   33188:	eeb48be0 	vcmpe.f64	d8, d16
   3318c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
   33190:	ca00006d 	bgt	3334c <CString::ftoa(char*, double, unsigned int)+0x1f8>
   33194:	eefc7bc8 	vcvt.u32.f64	s15, d8
   33198:	ee175a90 	vmov	r5, s15
   3319c:	e3550009 	cmp	r5, #9
   331a0:	83a02001 	movhi	r2, #1
   331a4:	83a0100a 	movhi	r1, #10
   331a8:	9a00006f 	bls	3336c <CString::ftoa(char*, double, unsigned int)+0x218>
   331ac:	e0020291 	mul	r2, r1, r2
   331b0:	e733f215 	udiv	r3, r5, r2
   331b4:	e3530009 	cmp	r3, #9
   331b8:	8afffffb 	bhi	331ac <CString::ftoa(char*, double, unsigned int)+0x58>
   331bc:	e30c8ccd 	movw	r8, #52429	@ 0xcccd
   331c0:	e34c8ccc 	movt	r8, #52428	@ 0xcccc
   331c4:	e1a0e006 	mov	lr, r6
   331c8:	e1a01005 	mov	r1, r5
   331cc:	ea000001 	b	331d8 <CString::ftoa(char*, double, unsigned int)+0x84>
   331d0:	e1a02003 	mov	r2, r3
   331d4:	e733f311 	udiv	r3, r1, r3
   331d8:	e6ef0073 	uxtb	r0, r3
   331dc:	e3530009 	cmp	r3, #9
   331e0:	e739f211 	udiv	r9, r1, r2
   331e4:	e280c057 	add	ip, r0, #87	@ 0x57
   331e8:	e2800030 	add	r0, r0, #48	@ 0x30
   331ec:	e6afc07c 	sxtb	ip, ip
   331f0:	96afc070 	sxtbls	ip, r0
   331f4:	e0830298 	umull	r0, r3, r8, r2
   331f8:	e0611992 	mls	r1, r2, r9, r1
   331fc:	e3520009 	cmp	r2, #9
   33200:	e4cec001 	strb	ip, [lr], #1
   33204:	e1a031a3 	lsr	r3, r3, #3
   33208:	8afffff0 	bhi	331d0 <CString::ftoa(char*, double, unsigned int)+0x7c>
   3320c:	e3a03000 	mov	r3, #0
   33210:	e3570000 	cmp	r7, #0
   33214:	e5ce3000 	strb	r3, [lr]
   33218:	1a000003 	bne	3322c <CString::ftoa(char*, double, unsigned int)+0xd8>
   3321c:	e1a00004 	mov	r0, r4
   33220:	e28dd014 	add	sp, sp, #20
   33224:	ecbd8b02 	vpop	{d8}
   33228:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3322c:	e1a00006 	mov	r0, r6
   33230:	eb0007af 	bl	350f4 <strlen>
   33234:	e3570009 	cmp	r7, #9
   33238:	e0868000 	add	r8, r6, r0
   3323c:	e3a0302e 	mov	r3, #46	@ 0x2e
   33240:	e7c63000 	strb	r3, [r6, r0]
   33244:	31a06007 	movcc	r6, r7
   33248:	23a06009 	movcs	r6, #9
   3324c:	e3570001 	cmp	r7, #1
   33250:	e2887001 	add	r7, r8, #1
   33254:	0a000049 	beq	33380 <CString::ftoa(char*, double, unsigned int)+0x22c>
   33258:	e3a0200a 	mov	r2, #10
   3325c:	e3a03002 	mov	r3, #2
   33260:	e1a01002 	mov	r1, r2
   33264:	e2833001 	add	r3, r3, #1
   33268:	e0020291 	mul	r2, r1, r2
   3326c:	e1560003 	cmp	r6, r3
   33270:	2afffffb 	bcs	33264 <CString::ftoa(char*, double, unsigned int)+0x110>
   33274:	ee072a90 	vmov	s15, r2
   33278:	eef81b67 	vcvt.f64.u32	d17, s15
   3327c:	ee075a90 	vmov	s15, r5
   33280:	eef80b67 	vcvt.f64.u32	d16, s15
   33284:	ee388b60 	vsub.f64	d8, d8, d16
   33288:	ee288b21 	vmul.f64	d8, d8, d17
   3328c:	eefc7bc8 	vcvt.u32.f64	s15, d8
   33290:	ee172a90 	vmov	r2, s15
   33294:	e3520009 	cmp	r2, #9
   33298:	83a01001 	movhi	r1, #1
   3329c:	83a0c00a 	movhi	ip, #10
   332a0:	9a000038 	bls	33388 <CString::ftoa(char*, double, unsigned int)+0x234>
   332a4:	e001019c 	mul	r1, ip, r1
   332a8:	e730f112 	udiv	r0, r2, r1
   332ac:	e1a03000 	mov	r3, r0
   332b0:	e3500009 	cmp	r0, #9
   332b4:	8afffffa 	bhi	332a4 <CString::ftoa(char*, double, unsigned int)+0x150>
   332b8:	e30ceccd 	movw	lr, #52429	@ 0xcccd
   332bc:	e34ceccc 	movt	lr, #52428	@ 0xcccc
   332c0:	e28dc004 	add	ip, sp, #4
   332c4:	ea000002 	b	332d4 <CString::ftoa(char*, double, unsigned int)+0x180>
   332c8:	e1a01003 	mov	r1, r3
   332cc:	e733f312 	udiv	r3, r2, r3
   332d0:	e1a00003 	mov	r0, r3
   332d4:	e0622091 	mls	r2, r1, r0, r2
   332d8:	e6ef0073 	uxtb	r0, r3
   332dc:	e2805057 	add	r5, r0, #87	@ 0x57
   332e0:	e3530009 	cmp	r3, #9
   332e4:	e2800030 	add	r0, r0, #48	@ 0x30
   332e8:	86af0075 	sxtbhi	r0, r5
   332ec:	e083519e 	umull	r5, r3, lr, r1
   332f0:	96af0070 	sxtbls	r0, r0
   332f4:	e3510009 	cmp	r1, #9
   332f8:	e4cc0001 	strb	r0, [ip], #1
   332fc:	e1a031a3 	lsr	r3, r3, #3
   33300:	8afffff0 	bhi	332c8 <CString::ftoa(char*, double, unsigned int)+0x174>
   33304:	e3a03000 	mov	r3, #0
   33308:	e28d0004 	add	r0, sp, #4
   3330c:	e5cc3000 	strb	r3, [ip]
   33310:	eb000777 	bl	350f4 <strlen>
   33314:	e0566000 	subs	r6, r6, r0
   33318:	0a000016 	beq	33378 <CString::ftoa(char*, double, unsigned int)+0x224>
   3331c:	e2866001 	add	r6, r6, #1
   33320:	e3a03030 	mov	r3, #48	@ 0x30
   33324:	e0880006 	add	r0, r8, r6
   33328:	e4c73001 	strb	r3, [r7], #1
   3332c:	e1500007 	cmp	r0, r7
   33330:	1afffffc 	bne	33328 <CString::ftoa(char*, double, unsigned int)+0x1d4>
   33334:	e28d1004 	add	r1, sp, #4
   33338:	eb00080d 	bl	35374 <strcpy>
   3333c:	e1a00004 	mov	r0, r4
   33340:	e28dd014 	add	sp, sp, #20
   33344:	ecbd8b02 	vpop	{d8}
   33348:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3334c:	e1a00006 	mov	r0, r6
   33350:	e30e14cc 	movw	r1, #58572	@ 0xe4cc
   33354:	e3401003 	movt	r1, #3
   33358:	eb000805 	bl	35374 <strcpy>
   3335c:	e1a00004 	mov	r0, r4
   33360:	e28dd014 	add	sp, sp, #20
   33364:	ecbd8b02 	vpop	{d8}
   33368:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3336c:	e1a03005 	mov	r3, r5
   33370:	e3a02001 	mov	r2, #1
   33374:	eaffff90 	b	331bc <CString::ftoa(char*, double, unsigned int)+0x68>
   33378:	e1a00007 	mov	r0, r7
   3337c:	eaffffec 	b	33334 <CString::ftoa(char*, double, unsigned int)+0x1e0>
   33380:	eef21b04 	vmov.f64	d17, #36	@ 0x41200000  10.0
   33384:	eaffffbc 	b	3327c <CString::ftoa(char*, double, unsigned int)+0x128>
   33388:	e1a03002 	mov	r3, r2
   3338c:	e3a01001 	mov	r1, #1
   33390:	e1a00002 	mov	r0, r2
   33394:	eaffffc7 	b	332b8 <CString::ftoa(char*, double, unsigned int)+0x164>
   33398:	ffe00000 	.word	0xffe00000
   3339c:	41efffff 	.word	0x41efffff

000333a0 <CString::FormatV(char const*, std::__va_list)>:
   333a0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   333a4:	e1a04001 	mov	r4, r1
   333a8:	e24dd05c 	sub	sp, sp, #92	@ 0x5c
   333ac:	e58d001c 	str	r0, [sp, #28]
   333b0:	e5900004 	ldr	r0, [r0, #4]
   333b4:	e58d2010 	str	r2, [sp, #16]
   333b8:	e3500000 	cmp	r0, #0
   333bc:	0a000000 	beq	333c4 <CString::FormatV(char const*, std::__va_list)+0x24>
   333c0:	eb000b69 	bl	3616c <operator delete[](void*)>
   333c4:	e59db01c 	ldr	fp, [sp, #28]
   333c8:	e3a00040 	mov	r0, #64	@ 0x40
   333cc:	e1a05004 	mov	r5, r4
   333d0:	e58b0008 	str	r0, [fp, #8]
   333d4:	eb000b58 	bl	3613c <operator new[](unsigned int)>
   333d8:	e58b0004 	str	r0, [fp, #4]
   333dc:	e58b000c 	str	r0, [fp, #12]
   333e0:	e1d440d0 	ldrsb	r4, [r4]
   333e4:	e3540000 	cmp	r4, #0
   333e8:	0a000066 	beq	33588 <CString::FormatV(char const*, std::__va_list)+0x1e8>
   333ec:	e3540025 	cmp	r4, #37	@ 0x25
   333f0:	1a000057 	bne	33554 <CString::FormatV(char const*, std::__va_list)+0x1b4>
   333f4:	e1d530d1 	ldrsb	r3, [r5, #1]
   333f8:	e3530025 	cmp	r3, #37	@ 0x25
   333fc:	0a000065 	beq	33598 <CString::FormatV(char const*, std::__va_list)+0x1f8>
   33400:	e3530023 	cmp	r3, #35	@ 0x23
   33404:	e3a04000 	mov	r4, #0
   33408:	12855001 	addne	r5, r5, #1
   3340c:	13a00000 	movne	r0, #0
   33410:	03a00001 	moveq	r0, #1
   33414:	01d530d2 	ldrsbeq	r3, [r5, #2]
   33418:	02855002 	addeq	r5, r5, #2
   3341c:	e353002d 	cmp	r3, #45	@ 0x2d
   33420:	03a02001 	moveq	r2, #1
   33424:	13a02000 	movne	r2, #0
   33428:	058d2014 	streq	r2, [sp, #20]
   3342c:	01d530d1 	ldrsbeq	r3, [r5, #1]
   33430:	00855002 	addeq	r5, r5, r2
   33434:	158d2014 	strne	r2, [sp, #20]
   33438:	e3530030 	cmp	r3, #48	@ 0x30
   3343c:	03a02001 	moveq	r2, #1
   33440:	13a02000 	movne	r2, #0
   33444:	e58d2018 	str	r2, [sp, #24]
   33448:	01d530d1 	ldrsbeq	r3, [r5, #1]
   3344c:	02855001 	addeq	r5, r5, #1
   33450:	e2432030 	sub	r2, r3, #48	@ 0x30
   33454:	e6ef2072 	uxtb	r2, r2
   33458:	e3520009 	cmp	r2, #9
   3345c:	8a000007 	bhi	33480 <CString::FormatV(char const*, std::__va_list)+0xe0>
   33460:	e3a0100a 	mov	r1, #10
   33464:	e0243491 	mla	r4, r1, r4, r3
   33468:	e1f530d1 	ldrsb	r3, [r5, #1]!
   3346c:	e2432030 	sub	r2, r3, #48	@ 0x30
   33470:	e2444030 	sub	r4, r4, #48	@ 0x30
   33474:	e6ef2072 	uxtb	r2, r2
   33478:	e3520009 	cmp	r2, #9
   3347c:	9afffff8 	bls	33464 <CString::FormatV(char const*, std::__va_list)+0xc4>
   33480:	e353002e 	cmp	r3, #46	@ 0x2e
   33484:	13a01006 	movne	r1, #6
   33488:	11d5a0d0 	ldrsbne	sl, [r5]
   3348c:	0a0001c5 	beq	33ba8 <CString::FormatV(char const*, std::__va_list)+0x808>
   33490:	e35a006c 	cmp	sl, #108	@ 0x6c
   33494:	13a03000 	movne	r3, #0
   33498:	158d3004 	strne	r3, [sp, #4]
   3349c:	1a000007 	bne	334c0 <CString::FormatV(char const*, std::__va_list)+0x120>
   334a0:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   334a4:	e35a006c 	cmp	sl, #108	@ 0x6c
   334a8:	03a03001 	moveq	r3, #1
   334ac:	13a03000 	movne	r3, #0
   334b0:	e58d3004 	str	r3, [sp, #4]
   334b4:	01d5a0d2 	ldrsbeq	sl, [r5, #2]
   334b8:	02855001 	addeq	r5, r5, #1
   334bc:	e2855001 	add	r5, r5, #1
   334c0:	e24a3058 	sub	r3, sl, #88	@ 0x58
   334c4:	e3530020 	cmp	r3, #32
   334c8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
   334cc:	ea00003a 	b	335bc <CString::FormatV(char const*, std::__va_list)+0x21c>
   334d0:	000335ec 	.word	0x000335ec
   334d4:	000335bc 	.word	0x000335bc
   334d8:	000335bc 	.word	0x000335bc
   334dc:	000335bc 	.word	0x000335bc
   334e0:	000335bc 	.word	0x000335bc
   334e4:	000335bc 	.word	0x000335bc
   334e8:	000335bc 	.word	0x000335bc
   334ec:	000335bc 	.word	0x000335bc
   334f0:	000335bc 	.word	0x000335bc
   334f4:	000335bc 	.word	0x000335bc
   334f8:	000335bc 	.word	0x000335bc
   334fc:	000339b8 	.word	0x000339b8
   33500:	0003380c 	.word	0x0003380c
   33504:	000335bc 	.word	0x000335bc
   33508:	00033a00 	.word	0x00033a00
   3350c:	000335bc 	.word	0x000335bc
   33510:	000335bc 	.word	0x000335bc
   33514:	0003380c 	.word	0x0003380c
   33518:	000335bc 	.word	0x000335bc
   3351c:	000335bc 	.word	0x000335bc
   33520:	000335bc 	.word	0x000335bc
   33524:	000335bc 	.word	0x000335bc
   33528:	000335bc 	.word	0x000335bc
   3352c:	00033adc 	.word	0x00033adc
   33530:	000335ec 	.word	0x000335ec
   33534:	000335bc 	.word	0x000335bc
   33538:	000335bc 	.word	0x000335bc
   3353c:	00033a7c 	.word	0x00033a7c
   33540:	000335bc 	.word	0x000335bc
   33544:	00033dc8 	.word	0x00033dc8
   33548:	000335bc 	.word	0x000335bc
   3354c:	000335bc 	.word	0x000335bc
   33550:	000335ec 	.word	0x000335ec
   33554:	e3a01001 	mov	r1, #1
   33558:	e1a0000b 	mov	r0, fp
   3355c:	ebfffd1e 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33560:	e59b300c 	ldr	r3, [fp, #12]
   33564:	e2832001 	add	r2, r3, #1
   33568:	e58b200c 	str	r2, [fp, #12]
   3356c:	e5c34000 	strb	r4, [r3]
   33570:	e2855001 	add	r5, r5, #1
   33574:	e1d540d0 	ldrsb	r4, [r5]
   33578:	e3540000 	cmp	r4, #0
   3357c:	1affff9a 	bne	333ec <CString::FormatV(char const*, std::__va_list)+0x4c>
   33580:	e59d301c 	ldr	r3, [sp, #28]
   33584:	e593000c 	ldr	r0, [r3, #12]
   33588:	e3a03000 	mov	r3, #0
   3358c:	e5c03000 	strb	r3, [r0]
   33590:	e28dd05c 	add	sp, sp, #92	@ 0x5c
   33594:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33598:	e3a01001 	mov	r1, #1
   3359c:	e1a0000b 	mov	r0, fp
   335a0:	ebfffd0d 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   335a4:	e59b300c 	ldr	r3, [fp, #12]
   335a8:	e2855002 	add	r5, r5, #2
   335ac:	e2832001 	add	r2, r3, #1
   335b0:	e58b200c 	str	r2, [fp, #12]
   335b4:	e5c34000 	strb	r4, [r3]
   335b8:	eaffffed 	b	33574 <CString::FormatV(char const*, std::__va_list)+0x1d4>
   335bc:	e3a01001 	mov	r1, #1
   335c0:	e1a0000b 	mov	r0, fp
   335c4:	ebfffd04 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   335c8:	e59b300c 	ldr	r3, [fp, #12]
   335cc:	e3a01001 	mov	r1, #1
   335d0:	e1a0000b 	mov	r0, fp
   335d4:	e2832001 	add	r2, r3, #1
   335d8:	e58b200c 	str	r2, [fp, #12]
   335dc:	e3a02025 	mov	r2, #37	@ 0x25
   335e0:	e5c32000 	strb	r2, [r3]
   335e4:	e1d540d0 	ldrsb	r4, [r5]
   335e8:	eaffffdb 	b	3355c <CString::FormatV(char const*, std::__va_list)+0x1bc>
   335ec:	e3500000 	cmp	r0, #0
   335f0:	03a0c010 	moveq	ip, #16
   335f4:	1a0001dd 	bne	33d70 <CString::FormatV(char const*, std::__va_list)+0x9d0>
   335f8:	e59d3004 	ldr	r3, [sp, #4]
   335fc:	e3530000 	cmp	r3, #0
   33600:	e59d3010 	ldr	r3, [sp, #16]
   33604:	0a000145 	beq	33b20 <CString::FormatV(char const*, std::__va_list)+0x780>
   33608:	e2833007 	add	r3, r3, #7
   3360c:	e3a09000 	mov	r9, #0
   33610:	e3c33007 	bic	r3, r3, #7
   33614:	e5932004 	ldr	r2, [r3, #4]
   33618:	e4938008 	ldr	r8, [r3], #8
   3361c:	e58d3010 	str	r3, [sp, #16]
   33620:	e158000c 	cmp	r8, ip
   33624:	e58d2008 	str	r2, [sp, #8]
   33628:	e2d23000 	sbcs	r3, r2, #0
   3362c:	e58d8004 	str	r8, [sp, #4]
   33630:	3a0002a6 	bcc	340d0 <CString::FormatV(char const*, std::__va_list)+0xd30>
   33634:	e3a07001 	mov	r7, #1
   33638:	e58d400c 	str	r4, [sp, #12]
   3363c:	e1a03007 	mov	r3, r7
   33640:	e1a0600c 	mov	r6, ip
   33644:	e1a07005 	mov	r7, r5
   33648:	e1a04002 	mov	r4, r2
   3364c:	e1a05003 	mov	r5, r3
   33650:	e0030996 	mul	r3, r6, r9
   33654:	e1a00008 	mov	r0, r8
   33658:	e0895695 	umull	r5, r9, r5, r6
   3365c:	e1a01004 	mov	r1, r4
   33660:	e0839009 	add	r9, r3, r9
   33664:	e1a02005 	mov	r2, r5
   33668:	e1a03009 	mov	r3, r9
   3366c:	fa0018a5 	blx	39908 <__aeabi_uldivmod>
   33670:	e1500006 	cmp	r0, r6
   33674:	e2d13000 	sbcs	r3, r1, #0
   33678:	2afffff4 	bcs	33650 <CString::FormatV(char const*, std::__va_list)+0x2b0>
   3367c:	e1a03005 	mov	r3, r5
   33680:	e59d400c 	ldr	r4, [sp, #12]
   33684:	e1a0c006 	mov	ip, r6
   33688:	e1a05007 	mov	r5, r7
   3368c:	e1a06000 	mov	r6, r0
   33690:	e1a08001 	mov	r8, r1
   33694:	e1a07003 	mov	r7, r3
   33698:	e25aa058 	subs	sl, sl, #88	@ 0x58
   3369c:	e58db024 	str	fp, [sp, #36]	@ 0x24
   336a0:	13a0a001 	movne	sl, #1
   336a4:	e58d4020 	str	r4, [sp, #32]
   336a8:	e58d5028 	str	r5, [sp, #40]	@ 0x28
   336ac:	e1a0a28a 	lsl	sl, sl, #5
   336b0:	e28a3037 	add	r3, sl, #55	@ 0x37
   336b4:	e28da034 	add	sl, sp, #52	@ 0x34
   336b8:	e1a0b00a 	mov	fp, sl
   336bc:	e58da02c 	str	sl, [sp, #44]	@ 0x2c
   336c0:	e58d300c 	str	r3, [sp, #12]
   336c4:	e1a0a00c 	mov	sl, ip
   336c8:	ea000003 	b	336dc <CString::FormatV(char const*, std::__va_list)+0x33c>
   336cc:	fa00188d 	blx	39908 <__aeabi_uldivmod>
   336d0:	e1a09004 	mov	r9, r4
   336d4:	e1a06000 	mov	r6, r0
   336d8:	e1a08001 	mov	r8, r1
   336dc:	e99d0003 	ldmib	sp, {r0, r1}
   336e0:	e1a02007 	mov	r2, r7
   336e4:	e1a03009 	mov	r3, r9
   336e8:	fa001886 	blx	39908 <__aeabi_uldivmod>
   336ec:	e1a04003 	mov	r4, r3
   336f0:	e59d300c 	ldr	r3, [sp, #12]
   336f4:	e356000a 	cmp	r6, #10
   336f8:	e6ef6076 	uxtb	r6, r6
   336fc:	e2d88000 	sbcs	r8, r8, #0
   33700:	e0833006 	add	r3, r3, r6
   33704:	e2866030 	add	r6, r6, #48	@ 0x30
   33708:	e1a05002 	mov	r5, r2
   3370c:	e1a00007 	mov	r0, r7
   33710:	e6af3073 	sxtb	r3, r3
   33714:	e1a01009 	mov	r1, r9
   33718:	36af3076 	sxtbcc	r3, r6
   3371c:	e58d2004 	str	r2, [sp, #4]
   33720:	e4cb3001 	strb	r3, [fp], #1
   33724:	e1a0200a 	mov	r2, sl
   33728:	e3a03000 	mov	r3, #0
   3372c:	e58d4008 	str	r4, [sp, #8]
   33730:	fa001874 	blx	39908 <__aeabi_uldivmod>
   33734:	e157000a 	cmp	r7, sl
   33738:	e1a02000 	mov	r2, r0
   3373c:	e1a03001 	mov	r3, r1
   33740:	e1a00005 	mov	r0, r5
   33744:	e1a01004 	mov	r1, r4
   33748:	e1a07002 	mov	r7, r2
   3374c:	e1a04003 	mov	r4, r3
   33750:	e2d99000 	sbcs	r9, r9, #0
   33754:	2affffdc 	bcs	336cc <CString::FormatV(char const*, std::__va_list)+0x32c>
   33758:	e1a0e00b 	mov	lr, fp
   3375c:	e59d4020 	ldr	r4, [sp, #32]
   33760:	e59db024 	ldr	fp, [sp, #36]	@ 0x24
   33764:	e3a03000 	mov	r3, #0
   33768:	e59d5028 	ldr	r5, [sp, #40]	@ 0x28
   3376c:	e59da02c 	ldr	sl, [sp, #44]	@ 0x2c
   33770:	e5ce3000 	strb	r3, [lr]
   33774:	e1a0000a 	mov	r0, sl
   33778:	eb00065d 	bl	350f4 <strlen>
   3377c:	e59d3014 	ldr	r3, [sp, #20]
   33780:	e1a06000 	mov	r6, r0
   33784:	e3530000 	cmp	r3, #0
   33788:	1a000116 	bne	33be8 <CString::FormatV(char const*, std::__va_list)+0x848>
   3378c:	e1540000 	cmp	r4, r0
   33790:	9a00000f 	bls	337d4 <CString::FormatV(char const*, std::__va_list)+0x434>
   33794:	e59d3018 	ldr	r3, [sp, #24]
   33798:	e0444000 	sub	r4, r4, r0
   3379c:	e1a01004 	mov	r1, r4
   337a0:	e1a0000b 	mov	r0, fp
   337a4:	e3530000 	cmp	r3, #0
   337a8:	13a06030 	movne	r6, #48	@ 0x30
   337ac:	03a06020 	moveq	r6, #32
   337b0:	ebfffc89 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   337b4:	e2443001 	sub	r3, r4, #1
   337b8:	e59b200c 	ldr	r2, [fp, #12]
   337bc:	e2433001 	sub	r3, r3, #1
   337c0:	e3730001 	cmn	r3, #1
   337c4:	e2821001 	add	r1, r2, #1
   337c8:	e58b100c 	str	r1, [fp, #12]
   337cc:	e5c26000 	strb	r6, [r2]
   337d0:	1afffff8 	bne	337b8 <CString::FormatV(char const*, std::__va_list)+0x418>
   337d4:	e1a0000a 	mov	r0, sl
   337d8:	eb000645 	bl	350f4 <strlen>
   337dc:	e2504000 	subs	r4, r0, #0
   337e0:	0a000002 	beq	337f0 <CString::FormatV(char const*, std::__va_list)+0x450>
   337e4:	e1a01004 	mov	r1, r4
   337e8:	e1a0000b 	mov	r0, fp
   337ec:	ebfffc7a 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   337f0:	e59b000c 	ldr	r0, [fp, #12]
   337f4:	e1a0100a 	mov	r1, sl
   337f8:	eb0006dd 	bl	35374 <strcpy>
   337fc:	e59b300c 	ldr	r3, [fp, #12]
   33800:	e0833004 	add	r3, r3, r4
   33804:	e58b300c 	str	r3, [fp, #12]
   33808:	eaffff58 	b	33570 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   3380c:	e59d3004 	ldr	r3, [sp, #4]
   33810:	e3530000 	cmp	r3, #0
   33814:	0a000110 	beq	33c5c <CString::FormatV(char const*, std::__va_list)+0x8bc>
   33818:	e59d3010 	ldr	r3, [sp, #16]
   3381c:	e2833007 	add	r3, r3, #7
   33820:	e3c33007 	bic	r3, r3, #7
   33824:	e593e004 	ldr	lr, [r3, #4]
   33828:	e493a008 	ldr	sl, [r3], #8
   3382c:	e35e0000 	cmp	lr, #0
   33830:	e58d3010 	str	r3, [sp, #16]
   33834:	a3a03000 	movge	r3, #0
   33838:	a58d3004 	strge	r3, [sp, #4]
   3383c:	aa000001 	bge	33848 <CString::FormatV(char const*, std::__va_list)+0x4a8>
   33840:	e27aa000 	rsbs	sl, sl, #0
   33844:	e2eee000 	rsc	lr, lr, #0
   33848:	e35a000a 	cmp	sl, #10
   3384c:	e1a0300e 	mov	r3, lr
   33850:	e2d33000 	sbcs	r3, r3, #0
   33854:	e58da00c 	str	sl, [sp, #12]
   33858:	a3a06001 	movge	r6, #1
   3385c:	a3a07000 	movge	r7, #0
   33860:	a1a0800e 	movge	r8, lr
   33864:	e58de020 	str	lr, [sp, #32]
   33868:	ba000226 	blt	34108 <CString::FormatV(char const*, std::__va_list)+0xd68>
   3386c:	e0961006 	adds	r1, r6, r6
   33870:	e1a0000a 	mov	r0, sl
   33874:	e0a73007 	adc	r3, r7, r7
   33878:	e0911001 	adds	r1, r1, r1
   3387c:	e0a33003 	adc	r3, r3, r3
   33880:	e0911006 	adds	r1, r1, r6
   33884:	e0a73003 	adc	r3, r7, r3
   33888:	e0911001 	adds	r1, r1, r1
   3388c:	e0a33003 	adc	r3, r3, r3
   33890:	e1a02001 	mov	r2, r1
   33894:	e1a06001 	mov	r6, r1
   33898:	e1a01008 	mov	r1, r8
   3389c:	e1a07003 	mov	r7, r3
   338a0:	fa001818 	blx	39908 <__aeabi_uldivmod>
   338a4:	e350000a 	cmp	r0, #10
   338a8:	e2d13000 	sbcs	r3, r1, #0
   338ac:	2affffee 	bcs	3386c <CString::FormatV(char const*, std::__va_list)+0x4cc>
   338b0:	e1a08000 	mov	r8, r0
   338b4:	e1a09001 	mov	r9, r1
   338b8:	e28da034 	add	sl, sp, #52	@ 0x34
   338bc:	e30c3ccd 	movw	r3, #52429	@ 0xcccd
   338c0:	e34c3ccc 	movt	r3, #52428	@ 0xcccc
   338c4:	e30c2ccc 	movw	r2, #52428	@ 0xcccc
   338c8:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
   338cc:	e58d4024 	str	r4, [sp, #36]	@ 0x24
   338d0:	e58db028 	str	fp, [sp, #40]	@ 0x28
   338d4:	e1a04003 	mov	r4, r3
   338d8:	e59db020 	ldr	fp, [sp, #32]
   338dc:	e58d502c 	str	r5, [sp, #44]	@ 0x2c
   338e0:	e1a0500a 	mov	r5, sl
   338e4:	e58da020 	str	sl, [sp, #32]
   338e8:	e58d2008 	str	r2, [sp, #8]
   338ec:	e59da00c 	ldr	sl, [sp, #12]
   338f0:	ea000003 	b	33904 <CString::FormatV(char const*, std::__va_list)+0x564>
   338f4:	e1a03007 	mov	r3, r7
   338f8:	fa001802 	blx	39908 <__aeabi_uldivmod>
   338fc:	e1a08000 	mov	r8, r0
   33900:	e1a09001 	mov	r9, r1
   33904:	e1a03007 	mov	r3, r7
   33908:	e1a02006 	mov	r2, r6
   3390c:	e1a0000a 	mov	r0, sl
   33910:	e1a0100b 	mov	r1, fp
   33914:	fa0017fb 	blx	39908 <__aeabi_uldivmod>
   33918:	e358000a 	cmp	r8, #10
   3391c:	e6ef8078 	uxtb	r8, r8
   33920:	e2d99000 	sbcs	r9, r9, #0
   33924:	e288c057 	add	ip, r8, #87	@ 0x57
   33928:	e2888030 	add	r8, r8, #48	@ 0x30
   3392c:	e1a01003 	mov	r1, r3
   33930:	e1a0b003 	mov	fp, r3
   33934:	e6afc07c 	sxtb	ip, ip
   33938:	36afc078 	sxtbcc	ip, r8
   3393c:	e0963007 	adds	r3, r6, r7
   33940:	e1a00002 	mov	r0, r2
   33944:	e2a33000 	adc	r3, r3, #0
   33948:	e1a0a002 	mov	sl, r2
   3394c:	e4c5c001 	strb	ip, [r5], #1
   33950:	e08c2394 	umull	r2, ip, r4, r3
   33954:	e3cc2003 	bic	r2, ip, #3
   33958:	e082212c 	add	r2, r2, ip, lsr #2
   3395c:	e59dc008 	ldr	ip, [sp, #8]
   33960:	e0433002 	sub	r3, r3, r2
   33964:	e0563003 	subs	r3, r6, r3
   33968:	e2c72000 	sbc	r2, r7, #0
   3396c:	e356000a 	cmp	r6, #10
   33970:	e2d77000 	sbcs	r7, r7, #0
   33974:	e007039c 	mul	r7, ip, r3
   33978:	e0277294 	mla	r7, r4, r2, r7
   3397c:	e0836493 	umull	r6, r3, r3, r4
   33980:	e0877003 	add	r7, r7, r3
   33984:	e1a060a6 	lsr	r6, r6, #1
   33988:	e1866f87 	orr	r6, r6, r7, lsl #31
   3398c:	e1a070a7 	lsr	r7, r7, #1
   33990:	e1a02006 	mov	r2, r6
   33994:	2affffd6 	bcs	338f4 <CString::FormatV(char const*, std::__va_list)+0x554>
   33998:	e1a03005 	mov	r3, r5
   3399c:	e3a02000 	mov	r2, #0
   339a0:	e59d4024 	ldr	r4, [sp, #36]	@ 0x24
   339a4:	e59db028 	ldr	fp, [sp, #40]	@ 0x28
   339a8:	e59d502c 	ldr	r5, [sp, #44]	@ 0x2c
   339ac:	e59da020 	ldr	sl, [sp, #32]
   339b0:	e5c32000 	strb	r2, [r3]
   339b4:	ea0000ce 	b	33cf4 <CString::FormatV(char const*, std::__va_list)+0x954>
   339b8:	e59d3014 	ldr	r3, [sp, #20]
   339bc:	e3530000 	cmp	r3, #0
   339c0:	e59d3010 	ldr	r3, [sp, #16]
   339c4:	e1d360d0 	ldrsb	r6, [r3]
   339c8:	1a000189 	bne	33ff4 <CString::FormatV(char const*, std::__va_list)+0xc54>
   339cc:	e3540001 	cmp	r4, #1
   339d0:	8a0000fe 	bhi	33dd0 <CString::FormatV(char const*, std::__va_list)+0xa30>
   339d4:	e3a01001 	mov	r1, #1
   339d8:	e1a0000b 	mov	r0, fp
   339dc:	ebfffbfe 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   339e0:	e59b300c 	ldr	r3, [fp, #12]
   339e4:	e2832001 	add	r2, r3, #1
   339e8:	e58b200c 	str	r2, [fp, #12]
   339ec:	e5c36000 	strb	r6, [r3]
   339f0:	e59d3010 	ldr	r3, [sp, #16]
   339f4:	e2833004 	add	r3, r3, #4
   339f8:	e58d3010 	str	r3, [sp, #16]
   339fc:	eafffedb 	b	33570 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   33a00:	e59d3010 	ldr	r3, [sp, #16]
   33a04:	e28da034 	add	sl, sp, #52	@ 0x34
   33a08:	e1a0000a 	mov	r0, sl
   33a0c:	e2836007 	add	r6, r3, #7
   33a10:	e3c66007 	bic	r6, r6, #7
   33a14:	ed960b00 	vldr	d0, [r6]
   33a18:	ebfffdcd 	bl	33154 <CString::ftoa(char*, double, unsigned int)>
   33a1c:	e1a0000a 	mov	r0, sl
   33a20:	eb0005b3 	bl	350f4 <strlen>
   33a24:	e59d3014 	ldr	r3, [sp, #20]
   33a28:	e1a07000 	mov	r7, r0
   33a2c:	e3530000 	cmp	r3, #0
   33a30:	1a000185 	bne	3404c <CString::FormatV(char const*, std::__va_list)+0xcac>
   33a34:	e1540000 	cmp	r4, r0
   33a38:	8a0000ff 	bhi	33e3c <CString::FormatV(char const*, std::__va_list)+0xa9c>
   33a3c:	e1a0000a 	mov	r0, sl
   33a40:	eb0005ab 	bl	350f4 <strlen>
   33a44:	e2504000 	subs	r4, r0, #0
   33a48:	0a000002 	beq	33a58 <CString::FormatV(char const*, std::__va_list)+0x6b8>
   33a4c:	e1a01004 	mov	r1, r4
   33a50:	e1a0000b 	mov	r0, fp
   33a54:	ebfffbe0 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33a58:	e59b000c 	ldr	r0, [fp, #12]
   33a5c:	e1a0100a 	mov	r1, sl
   33a60:	eb000643 	bl	35374 <strcpy>
   33a64:	e59b300c 	ldr	r3, [fp, #12]
   33a68:	e0833004 	add	r3, r3, r4
   33a6c:	e58b300c 	str	r3, [fp, #12]
   33a70:	e2863008 	add	r3, r6, #8
   33a74:	e58d3010 	str	r3, [sp, #16]
   33a78:	eafffebc 	b	33570 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   33a7c:	e59d3010 	ldr	r3, [sp, #16]
   33a80:	e5937000 	ldr	r7, [r3]
   33a84:	e1a00007 	mov	r0, r7
   33a88:	eb000599 	bl	350f4 <strlen>
   33a8c:	e59d3014 	ldr	r3, [sp, #20]
   33a90:	e1a06000 	mov	r6, r0
   33a94:	e3530000 	cmp	r3, #0
   33a98:	1a000138 	bne	33f80 <CString::FormatV(char const*, std::__va_list)+0xbe0>
   33a9c:	e1540000 	cmp	r4, r0
   33aa0:	8a0000d7 	bhi	33e04 <CString::FormatV(char const*, std::__va_list)+0xa64>
   33aa4:	e1a00007 	mov	r0, r7
   33aa8:	eb000591 	bl	350f4 <strlen>
   33aac:	e2504000 	subs	r4, r0, #0
   33ab0:	0a000002 	beq	33ac0 <CString::FormatV(char const*, std::__va_list)+0x720>
   33ab4:	e1a01004 	mov	r1, r4
   33ab8:	e1a0000b 	mov	r0, fp
   33abc:	ebfffbc6 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33ac0:	e59b000c 	ldr	r0, [fp, #12]
   33ac4:	e1a01007 	mov	r1, r7
   33ac8:	eb000629 	bl	35374 <strcpy>
   33acc:	e59b300c 	ldr	r3, [fp, #12]
   33ad0:	e0833004 	add	r3, r3, r4
   33ad4:	e58b300c 	str	r3, [fp, #12]
   33ad8:	eaffffc4 	b	339f0 <CString::FormatV(char const*, std::__va_list)+0x650>
   33adc:	e3500000 	cmp	r0, #0
   33ae0:	03a0c008 	moveq	ip, #8
   33ae4:	0afffec3 	beq	335f8 <CString::FormatV(char const*, std::__va_list)+0x258>
   33ae8:	e3a01001 	mov	r1, #1
   33aec:	e1a0000b 	mov	r0, fp
   33af0:	ebfffbb9 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33af4:	e59b300c 	ldr	r3, [fp, #12]
   33af8:	e3a02030 	mov	r2, #48	@ 0x30
   33afc:	e3a0c008 	mov	ip, #8
   33b00:	e2831001 	add	r1, r3, #1
   33b04:	e58b100c 	str	r1, [fp, #12]
   33b08:	e5c32000 	strb	r2, [r3]
   33b0c:	e59d3004 	ldr	r3, [sp, #4]
   33b10:	e1d5a0d0 	ldrsb	sl, [r5]
   33b14:	e3530000 	cmp	r3, #0
   33b18:	e59d3010 	ldr	r3, [sp, #16]
   33b1c:	1afffeb9 	bne	33608 <CString::FormatV(char const*, std::__va_list)+0x268>
   33b20:	e4930004 	ldr	r0, [r3], #4
   33b24:	e58d3010 	str	r3, [sp, #16]
   33b28:	e15c0000 	cmp	ip, r0
   33b2c:	8a000163 	bhi	340c0 <CString::FormatV(char const*, std::__va_list)+0xd20>
   33b30:	e3a03001 	mov	r3, #1
   33b34:	e003039c 	mul	r3, ip, r3
   33b38:	e731f310 	udiv	r1, r0, r3
   33b3c:	e1a02001 	mov	r2, r1
   33b40:	e15c0001 	cmp	ip, r1
   33b44:	9afffffa 	bls	33b34 <CString::FormatV(char const*, std::__va_list)+0x794>
   33b48:	e25a6058 	subs	r6, sl, #88	@ 0x58
   33b4c:	e28da034 	add	sl, sp, #52	@ 0x34
   33b50:	13a06001 	movne	r6, #1
   33b54:	e1a0e00a 	mov	lr, sl
   33b58:	e1a06286 	lsl	r6, r6, #5
   33b5c:	e2866037 	add	r6, r6, #55	@ 0x37
   33b60:	ea000002 	b	33b70 <CString::FormatV(char const*, std::__va_list)+0x7d0>
   33b64:	e732f110 	udiv	r2, r0, r1
   33b68:	e1a03001 	mov	r3, r1
   33b6c:	e1a01002 	mov	r1, r2
   33b70:	e0600193 	mls	r0, r3, r1, r0
   33b74:	e6ef1072 	uxtb	r1, r2
   33b78:	e0867001 	add	r7, r6, r1
   33b7c:	e2811030 	add	r1, r1, #48	@ 0x30
   33b80:	e3520009 	cmp	r2, #9
   33b84:	96af2071 	sxtbls	r2, r1
   33b88:	86af2077 	sxtbhi	r2, r7
   33b8c:	e731fc13 	udiv	r1, r3, ip
   33b90:	e15c0003 	cmp	ip, r3
   33b94:	e4ce2001 	strb	r2, [lr], #1
   33b98:	9afffff1 	bls	33b64 <CString::FormatV(char const*, std::__va_list)+0x7c4>
   33b9c:	e3a03000 	mov	r3, #0
   33ba0:	e5ce3000 	strb	r3, [lr]
   33ba4:	eafffef2 	b	33774 <CString::FormatV(char const*, std::__va_list)+0x3d4>
   33ba8:	e1d5a0d1 	ldrsb	sl, [r5, #1]
   33bac:	e3a01000 	mov	r1, #0
   33bb0:	e2855001 	add	r5, r5, #1
   33bb4:	e24a3030 	sub	r3, sl, #48	@ 0x30
   33bb8:	e6ef3073 	uxtb	r3, r3
   33bbc:	e3530009 	cmp	r3, #9
   33bc0:	8afffe32 	bhi	33490 <CString::FormatV(char const*, std::__va_list)+0xf0>
   33bc4:	e3a0200a 	mov	r2, #10
   33bc8:	e021a192 	mla	r1, r2, r1, sl
   33bcc:	e1f5a0d1 	ldrsb	sl, [r5, #1]!
   33bd0:	e24a3030 	sub	r3, sl, #48	@ 0x30
   33bd4:	e2411030 	sub	r1, r1, #48	@ 0x30
   33bd8:	e6ef3073 	uxtb	r3, r3
   33bdc:	e3530009 	cmp	r3, #9
   33be0:	9afffff8 	bls	33bc8 <CString::FormatV(char const*, std::__va_list)+0x828>
   33be4:	eafffe29 	b	33490 <CString::FormatV(char const*, std::__va_list)+0xf0>
   33be8:	e1a0000a 	mov	r0, sl
   33bec:	eb000540 	bl	350f4 <strlen>
   33bf0:	e2507000 	subs	r7, r0, #0
   33bf4:	0a000002 	beq	33c04 <CString::FormatV(char const*, std::__va_list)+0x864>
   33bf8:	e1a01007 	mov	r1, r7
   33bfc:	e1a0000b 	mov	r0, fp
   33c00:	ebfffb75 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33c04:	e59b000c 	ldr	r0, [fp, #12]
   33c08:	e1a0100a 	mov	r1, sl
   33c0c:	eb0005d8 	bl	35374 <strcpy>
   33c10:	e59b300c 	ldr	r3, [fp, #12]
   33c14:	e1540006 	cmp	r4, r6
   33c18:	e0833007 	add	r3, r3, r7
   33c1c:	e58b300c 	str	r3, [fp, #12]
   33c20:	9afffe52 	bls	33570 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   33c24:	e0446006 	sub	r6, r4, r6
   33c28:	e1a0000b 	mov	r0, fp
   33c2c:	e1a01006 	mov	r1, r6
   33c30:	ebfffb69 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33c34:	e3a00020 	mov	r0, #32
   33c38:	e2463001 	sub	r3, r6, #1
   33c3c:	e59b200c 	ldr	r2, [fp, #12]
   33c40:	e2433001 	sub	r3, r3, #1
   33c44:	e3730001 	cmn	r3, #1
   33c48:	e2821001 	add	r1, r2, #1
   33c4c:	e58b100c 	str	r1, [fp, #12]
   33c50:	e5c20000 	strb	r0, [r2]
   33c54:	1afffff8 	bne	33c3c <CString::FormatV(char const*, std::__va_list)+0x89c>
   33c58:	eafffe44 	b	33570 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   33c5c:	e59d9010 	ldr	r9, [sp, #16]
   33c60:	e4991004 	ldr	r1, [r9], #4
   33c64:	e3510000 	cmp	r1, #0
   33c68:	b2611000 	rsblt	r1, r1, #0
   33c6c:	b3a03001 	movlt	r3, #1
   33c70:	b58d3004 	strlt	r3, [sp, #4]
   33c74:	e3510009 	cmp	r1, #9
   33c78:	e1a0c001 	mov	ip, r1
   33c7c:	c3a02001 	movgt	r2, #1
   33c80:	c3a0000a 	movgt	r0, #10
   33c84:	da000124 	ble	3411c <CString::FormatV(char const*, std::__va_list)+0xd7c>
   33c88:	e0020290 	mul	r2, r0, r2
   33c8c:	e733f211 	udiv	r3, r1, r2
   33c90:	e3530009 	cmp	r3, #9
   33c94:	8afffffb 	bhi	33c88 <CString::FormatV(char const*, std::__va_list)+0x8e8>
   33c98:	e28da034 	add	sl, sp, #52	@ 0x34
   33c9c:	e30c8ccd 	movw	r8, #52429	@ 0xcccd
   33ca0:	e34c8ccc 	movt	r8, #52428	@ 0xcccc
   33ca4:	e1a0e00a 	mov	lr, sl
   33ca8:	ea000001 	b	33cb4 <CString::FormatV(char const*, std::__va_list)+0x914>
   33cac:	e1a02003 	mov	r2, r3
   33cb0:	e733f31c 	udiv	r3, ip, r3
   33cb4:	e6ef0073 	uxtb	r0, r3
   33cb8:	e3530009 	cmp	r3, #9
   33cbc:	e736f21c 	udiv	r6, ip, r2
   33cc0:	e2801057 	add	r1, r0, #87	@ 0x57
   33cc4:	e2800030 	add	r0, r0, #48	@ 0x30
   33cc8:	e6af1071 	sxtb	r1, r1
   33ccc:	96af1070 	sxtbls	r1, r0
   33cd0:	e0830298 	umull	r0, r3, r8, r2
   33cd4:	e06cc692 	mls	ip, r2, r6, ip
   33cd8:	e3520009 	cmp	r2, #9
   33cdc:	e4ce1001 	strb	r1, [lr], #1
   33ce0:	e1a031a3 	lsr	r3, r3, #3
   33ce4:	8afffff0 	bhi	33cac <CString::FormatV(char const*, std::__va_list)+0x90c>
   33ce8:	e3a03000 	mov	r3, #0
   33cec:	e58d9010 	str	r9, [sp, #16]
   33cf0:	e5ce3000 	strb	r3, [lr]
   33cf4:	e1a0000a 	mov	r0, sl
   33cf8:	eb0004fd 	bl	350f4 <strlen>
   33cfc:	e59d3004 	ldr	r3, [sp, #4]
   33d00:	e1a07000 	mov	r7, r0
   33d04:	e3530000 	cmp	r3, #0
   33d08:	e59d3014 	ldr	r3, [sp, #20]
   33d0c:	1a000073 	bne	33ee0 <CString::FormatV(char const*, std::__va_list)+0xb40>
   33d10:	e3530000 	cmp	r3, #0
   33d14:	1a00007c 	bne	33f0c <CString::FormatV(char const*, std::__va_list)+0xb6c>
   33d18:	e59d3018 	ldr	r3, [sp, #24]
   33d1c:	e3530000 	cmp	r3, #0
   33d20:	1a00005e 	bne	33ea0 <CString::FormatV(char const*, std::__va_list)+0xb00>
   33d24:	e1500004 	cmp	r0, r4
   33d28:	2afffea9 	bcs	337d4 <CString::FormatV(char const*, std::__va_list)+0x434>
   33d2c:	e0444007 	sub	r4, r4, r7
   33d30:	e1a0000b 	mov	r0, fp
   33d34:	e1a01004 	mov	r1, r4
   33d38:	ebfffb27 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33d3c:	e2443001 	sub	r3, r4, #1
   33d40:	e3a00020 	mov	r0, #32
   33d44:	e59b200c 	ldr	r2, [fp, #12]
   33d48:	e2433001 	sub	r3, r3, #1
   33d4c:	e3730001 	cmn	r3, #1
   33d50:	e2821001 	add	r1, r2, #1
   33d54:	e58b100c 	str	r1, [fp, #12]
   33d58:	e5c20000 	strb	r0, [r2]
   33d5c:	1afffff8 	bne	33d44 <CString::FormatV(char const*, std::__va_list)+0x9a4>
   33d60:	e59d3004 	ldr	r3, [sp, #4]
   33d64:	e3530000 	cmp	r3, #0
   33d68:	0afffe99 	beq	337d4 <CString::FormatV(char const*, std::__va_list)+0x434>
   33d6c:	ea0000dc 	b	340e4 <CString::FormatV(char const*, std::__va_list)+0xd44>
   33d70:	e35a0058 	cmp	sl, #88	@ 0x58
   33d74:	e30e34d8 	movw	r3, #58584	@ 0xe4d8
   33d78:	e3403003 	movt	r3, #3
   33d7c:	e30e74dc 	movw	r7, #58588	@ 0xe4dc
   33d80:	e3407003 	movt	r7, #3
   33d84:	01a07003 	moveq	r7, r3
   33d88:	e1a00007 	mov	r0, r7
   33d8c:	eb0004d8 	bl	350f4 <strlen>
   33d90:	e2508000 	subs	r8, r0, #0
   33d94:	0a000002 	beq	33da4 <CString::FormatV(char const*, std::__va_list)+0xa04>
   33d98:	e1a01008 	mov	r1, r8
   33d9c:	e1a0000b 	mov	r0, fp
   33da0:	ebfffb0d 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33da4:	e59b000c 	ldr	r0, [fp, #12]
   33da8:	e1a01007 	mov	r1, r7
   33dac:	eb000570 	bl	35374 <strcpy>
   33db0:	e59b300c 	ldr	r3, [fp, #12]
   33db4:	e3a0c010 	mov	ip, #16
   33db8:	e0833008 	add	r3, r3, r8
   33dbc:	e58b300c 	str	r3, [fp, #12]
   33dc0:	e1d5a0d0 	ldrsb	sl, [r5]
   33dc4:	eafffe0b 	b	335f8 <CString::FormatV(char const*, std::__va_list)+0x258>
   33dc8:	e3a0c00a 	mov	ip, #10
   33dcc:	eafffe09 	b	335f8 <CString::FormatV(char const*, std::__va_list)+0x258>
   33dd0:	e2441001 	sub	r1, r4, #1
   33dd4:	e1a0000b 	mov	r0, fp
   33dd8:	ebfffaff 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33ddc:	e2444002 	sub	r4, r4, #2
   33de0:	e3a01020 	mov	r1, #32
   33de4:	e59b300c 	ldr	r3, [fp, #12]
   33de8:	e2444001 	sub	r4, r4, #1
   33dec:	e3740001 	cmn	r4, #1
   33df0:	e2832001 	add	r2, r3, #1
   33df4:	e58b200c 	str	r2, [fp, #12]
   33df8:	e5c31000 	strb	r1, [r3]
   33dfc:	1afffff8 	bne	33de4 <CString::FormatV(char const*, std::__va_list)+0xa44>
   33e00:	eafffef3 	b	339d4 <CString::FormatV(char const*, std::__va_list)+0x634>
   33e04:	e0446000 	sub	r6, r4, r0
   33e08:	e1a0000b 	mov	r0, fp
   33e0c:	e1a01006 	mov	r1, r6
   33e10:	ebfffaf1 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33e14:	e2463001 	sub	r3, r6, #1
   33e18:	e3a00020 	mov	r0, #32
   33e1c:	e59b200c 	ldr	r2, [fp, #12]
   33e20:	e2433001 	sub	r3, r3, #1
   33e24:	e3730001 	cmn	r3, #1
   33e28:	e2821001 	add	r1, r2, #1
   33e2c:	e58b100c 	str	r1, [fp, #12]
   33e30:	e5c20000 	strb	r0, [r2]
   33e34:	1afffff8 	bne	33e1c <CString::FormatV(char const*, std::__va_list)+0xa7c>
   33e38:	eaffff19 	b	33aa4 <CString::FormatV(char const*, std::__va_list)+0x704>
   33e3c:	e0447000 	sub	r7, r4, r0
   33e40:	e1a0000b 	mov	r0, fp
   33e44:	e1a01007 	mov	r1, r7
   33e48:	ebfffae3 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33e4c:	e2473001 	sub	r3, r7, #1
   33e50:	e3a00020 	mov	r0, #32
   33e54:	e59b200c 	ldr	r2, [fp, #12]
   33e58:	e2433001 	sub	r3, r3, #1
   33e5c:	e3730001 	cmn	r3, #1
   33e60:	e2821001 	add	r1, r2, #1
   33e64:	e58b100c 	str	r1, [fp, #12]
   33e68:	e5c20000 	strb	r0, [r2]
   33e6c:	1afffff8 	bne	33e54 <CString::FormatV(char const*, std::__va_list)+0xab4>
   33e70:	eafffef1 	b	33a3c <CString::FormatV(char const*, std::__va_list)+0x69c>
   33e74:	e59d3018 	ldr	r3, [sp, #24]
   33e78:	e3530000 	cmp	r3, #0
   33e7c:	0a000096 	beq	340dc <CString::FormatV(char const*, std::__va_list)+0xd3c>
   33e80:	e3a01001 	mov	r1, #1
   33e84:	e1a0000b 	mov	r0, fp
   33e88:	ebfffad3 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33e8c:	e59b300c 	ldr	r3, [fp, #12]
   33e90:	e3a0202d 	mov	r2, #45	@ 0x2d
   33e94:	e2831001 	add	r1, r3, #1
   33e98:	e58b100c 	str	r1, [fp, #12]
   33e9c:	e5c32000 	strb	r2, [r3]
   33ea0:	e1540007 	cmp	r4, r7
   33ea4:	9afffe4a 	bls	337d4 <CString::FormatV(char const*, std::__va_list)+0x434>
   33ea8:	e0444007 	sub	r4, r4, r7
   33eac:	e1a0000b 	mov	r0, fp
   33eb0:	e1a01004 	mov	r1, r4
   33eb4:	ebfffac8 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33eb8:	e2443001 	sub	r3, r4, #1
   33ebc:	e3a00030 	mov	r0, #48	@ 0x30
   33ec0:	e59b200c 	ldr	r2, [fp, #12]
   33ec4:	e2433001 	sub	r3, r3, #1
   33ec8:	e3730001 	cmn	r3, #1
   33ecc:	e2821001 	add	r1, r2, #1
   33ed0:	e58b100c 	str	r1, [fp, #12]
   33ed4:	e5c20000 	strb	r0, [r2]
   33ed8:	1afffff8 	bne	33ec0 <CString::FormatV(char const*, std::__va_list)+0xb20>
   33edc:	eafffe3c 	b	337d4 <CString::FormatV(char const*, std::__va_list)+0x434>
   33ee0:	e3530000 	cmp	r3, #0
   33ee4:	e2807001 	add	r7, r0, #1
   33ee8:	0affffe1 	beq	33e74 <CString::FormatV(char const*, std::__va_list)+0xad4>
   33eec:	e3a01001 	mov	r1, #1
   33ef0:	e1a0000b 	mov	r0, fp
   33ef4:	ebfffab8 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33ef8:	e59b300c 	ldr	r3, [fp, #12]
   33efc:	e3a0202d 	mov	r2, #45	@ 0x2d
   33f00:	e2831001 	add	r1, r3, #1
   33f04:	e58b100c 	str	r1, [fp, #12]
   33f08:	e5c32000 	strb	r2, [r3]
   33f0c:	e1a0000a 	mov	r0, sl
   33f10:	eb000477 	bl	350f4 <strlen>
   33f14:	e2506000 	subs	r6, r0, #0
   33f18:	0a000002 	beq	33f28 <CString::FormatV(char const*, std::__va_list)+0xb88>
   33f1c:	e1a01006 	mov	r1, r6
   33f20:	e1a0000b 	mov	r0, fp
   33f24:	ebfffaac 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33f28:	e59b000c 	ldr	r0, [fp, #12]
   33f2c:	e1a0100a 	mov	r1, sl
   33f30:	eb00050f 	bl	35374 <strcpy>
   33f34:	e59b300c 	ldr	r3, [fp, #12]
   33f38:	e1540007 	cmp	r4, r7
   33f3c:	e0833006 	add	r3, r3, r6
   33f40:	e58b300c 	str	r3, [fp, #12]
   33f44:	9afffd89 	bls	33570 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   33f48:	e0444007 	sub	r4, r4, r7
   33f4c:	e1a0000b 	mov	r0, fp
   33f50:	e1a01004 	mov	r1, r4
   33f54:	ebfffaa0 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33f58:	e3a00020 	mov	r0, #32
   33f5c:	e2443001 	sub	r3, r4, #1
   33f60:	e59b200c 	ldr	r2, [fp, #12]
   33f64:	e2433001 	sub	r3, r3, #1
   33f68:	e3730001 	cmn	r3, #1
   33f6c:	e2821001 	add	r1, r2, #1
   33f70:	e58b100c 	str	r1, [fp, #12]
   33f74:	e5c20000 	strb	r0, [r2]
   33f78:	1afffff8 	bne	33f60 <CString::FormatV(char const*, std::__va_list)+0xbc0>
   33f7c:	eafffd7b 	b	33570 <CString::FormatV(char const*, std::__va_list)+0x1d0>
   33f80:	e1a00007 	mov	r0, r7
   33f84:	eb00045a 	bl	350f4 <strlen>
   33f88:	e2508000 	subs	r8, r0, #0
   33f8c:	0a000002 	beq	33f9c <CString::FormatV(char const*, std::__va_list)+0xbfc>
   33f90:	e1a01008 	mov	r1, r8
   33f94:	e1a0000b 	mov	r0, fp
   33f98:	ebfffa8f 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33f9c:	e59b000c 	ldr	r0, [fp, #12]
   33fa0:	e1a01007 	mov	r1, r7
   33fa4:	eb0004f2 	bl	35374 <strcpy>
   33fa8:	e59b300c 	ldr	r3, [fp, #12]
   33fac:	e1540006 	cmp	r4, r6
   33fb0:	e0833008 	add	r3, r3, r8
   33fb4:	e58b300c 	str	r3, [fp, #12]
   33fb8:	9afffe8c 	bls	339f0 <CString::FormatV(char const*, std::__va_list)+0x650>
   33fbc:	e0446006 	sub	r6, r4, r6
   33fc0:	e1a0000b 	mov	r0, fp
   33fc4:	e1a01006 	mov	r1, r6
   33fc8:	ebfffa83 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   33fcc:	e3a00020 	mov	r0, #32
   33fd0:	e2463001 	sub	r3, r6, #1
   33fd4:	e59b200c 	ldr	r2, [fp, #12]
   33fd8:	e2433001 	sub	r3, r3, #1
   33fdc:	e3730001 	cmn	r3, #1
   33fe0:	e2821001 	add	r1, r2, #1
   33fe4:	e58b100c 	str	r1, [fp, #12]
   33fe8:	e5c20000 	strb	r0, [r2]
   33fec:	1afffff8 	bne	33fd4 <CString::FormatV(char const*, std::__va_list)+0xc34>
   33ff0:	eafffe7e 	b	339f0 <CString::FormatV(char const*, std::__va_list)+0x650>
   33ff4:	e3a01001 	mov	r1, #1
   33ff8:	e1a0000b 	mov	r0, fp
   33ffc:	ebfffa76 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34000:	e59b300c 	ldr	r3, [fp, #12]
   34004:	e3540001 	cmp	r4, #1
   34008:	e2832001 	add	r2, r3, #1
   3400c:	e58b200c 	str	r2, [fp, #12]
   34010:	e5c36000 	strb	r6, [r3]
   34014:	9afffe75 	bls	339f0 <CString::FormatV(char const*, std::__va_list)+0x650>
   34018:	e2441001 	sub	r1, r4, #1
   3401c:	e1a0000b 	mov	r0, fp
   34020:	ebfffa6d 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34024:	e2444002 	sub	r4, r4, #2
   34028:	e3a01020 	mov	r1, #32
   3402c:	e59b300c 	ldr	r3, [fp, #12]
   34030:	e2444001 	sub	r4, r4, #1
   34034:	e3740001 	cmn	r4, #1
   34038:	e2832001 	add	r2, r3, #1
   3403c:	e58b200c 	str	r2, [fp, #12]
   34040:	e5c31000 	strb	r1, [r3]
   34044:	1afffff8 	bne	3402c <CString::FormatV(char const*, std::__va_list)+0xc8c>
   34048:	eafffe68 	b	339f0 <CString::FormatV(char const*, std::__va_list)+0x650>
   3404c:	e1a0000a 	mov	r0, sl
   34050:	eb000427 	bl	350f4 <strlen>
   34054:	e2508000 	subs	r8, r0, #0
   34058:	0a000002 	beq	34068 <CString::FormatV(char const*, std::__va_list)+0xcc8>
   3405c:	e1a01008 	mov	r1, r8
   34060:	e1a0000b 	mov	r0, fp
   34064:	ebfffa5c 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34068:	e59b000c 	ldr	r0, [fp, #12]
   3406c:	e1a0100a 	mov	r1, sl
   34070:	eb0004bf 	bl	35374 <strcpy>
   34074:	e59b300c 	ldr	r3, [fp, #12]
   34078:	e1540007 	cmp	r4, r7
   3407c:	e0833008 	add	r3, r3, r8
   34080:	e58b300c 	str	r3, [fp, #12]
   34084:	9afffe79 	bls	33a70 <CString::FormatV(char const*, std::__va_list)+0x6d0>
   34088:	e0447007 	sub	r7, r4, r7
   3408c:	e1a0000b 	mov	r0, fp
   34090:	e1a01007 	mov	r1, r7
   34094:	ebfffa50 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   34098:	e3a00020 	mov	r0, #32
   3409c:	e2473001 	sub	r3, r7, #1
   340a0:	e59b200c 	ldr	r2, [fp, #12]
   340a4:	e2433001 	sub	r3, r3, #1
   340a8:	e3730001 	cmn	r3, #1
   340ac:	e2821001 	add	r1, r2, #1
   340b0:	e58b100c 	str	r1, [fp, #12]
   340b4:	e5c20000 	strb	r0, [r2]
   340b8:	1afffff8 	bne	340a0 <CString::FormatV(char const*, std::__va_list)+0xd00>
   340bc:	eafffe6b 	b	33a70 <CString::FormatV(char const*, std::__va_list)+0x6d0>
   340c0:	e1a02000 	mov	r2, r0
   340c4:	e3a03001 	mov	r3, #1
   340c8:	e1a01000 	mov	r1, r0
   340cc:	eafffe9d 	b	33b48 <CString::FormatV(char const*, std::__va_list)+0x7a8>
   340d0:	e99d0140 	ldmib	sp, {r6, r8}
   340d4:	e3a07001 	mov	r7, #1
   340d8:	eafffd6e 	b	33698 <CString::FormatV(char const*, std::__va_list)+0x2f8>
   340dc:	e1540007 	cmp	r4, r7
   340e0:	8affff11 	bhi	33d2c <CString::FormatV(char const*, std::__va_list)+0x98c>
   340e4:	e3a01001 	mov	r1, #1
   340e8:	e1a0000b 	mov	r0, fp
   340ec:	ebfffa3a 	bl	329dc <CString::ReserveSpace(unsigned int) [clone .part.0]>
   340f0:	e59b300c 	ldr	r3, [fp, #12]
   340f4:	e3a0202d 	mov	r2, #45	@ 0x2d
   340f8:	e2831001 	add	r1, r3, #1
   340fc:	e58b100c 	str	r1, [fp, #12]
   34100:	e5c32000 	strb	r2, [r3]
   34104:	eafffdb2 	b	337d4 <CString::FormatV(char const*, std::__va_list)+0x434>
   34108:	e1a0800a 	mov	r8, sl
   3410c:	e1a0900e 	mov	r9, lr
   34110:	e3a06001 	mov	r6, #1
   34114:	e3a07000 	mov	r7, #0
   34118:	eafffde6 	b	338b8 <CString::FormatV(char const*, std::__va_list)+0x518>
   3411c:	e1a03001 	mov	r3, r1
   34120:	e3a02001 	mov	r2, #1
   34124:	eafffedb 	b	33c98 <CString::FormatV(char const*, std::__va_list)+0x8f8>

00034128 <CString::Format(char const*, ...)>:
   34128:	e92d000e 	push	{r1, r2, r3}
   3412c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   34130:	e24dd008 	sub	sp, sp, #8
   34134:	e28d2010 	add	r2, sp, #16
   34138:	e59d100c 	ldr	r1, [sp, #12]
   3413c:	e58d2004 	str	r2, [sp, #4]
   34140:	ebfffc96 	bl	333a0 <CString::FormatV(char const*, std::__va_list)>
   34144:	e28dd008 	add	sp, sp, #8
   34148:	e49de004 	pop	{lr}		@ (ldr lr, [sp], #4)
   3414c:	e28dd00c 	add	sp, sp, #12
   34150:	e12fff1e 	bx	lr

00034154 <__aeabi_atexit>:
   34154:	e12fff1e 	bx	lr

00034158 <__errno>:
   34158:	e3040170 	movw	r0, #16752	@ 0x4170
   3415c:	e3400004 	movt	r0, #4
   34160:	e12fff1e 	bx	lr

00034164 <set_qemu_exit_status>:
   34164:	e12fff1e 	bx	lr

00034168 <halt>:
   34168:	f10c0080 	cpsid	i
   3416c:	f10c0040 	cpsid	f
   34170:	f57ff04f 	dsb	sy
   34174:	e320f003 	wfi
   34178:	eafffffc 	b	34170 <halt+0x8>

0003417c <reboot>:
   3417c:	e3a03000 	mov	r3, #0
   34180:	e3433f10 	movt	r3, #16144	@ 0x3f10
   34184:	e3a01001 	mov	r1, #1
   34188:	e3451a00 	movt	r1, #23040	@ 0x5a00
   3418c:	e3a02020 	mov	r2, #32
   34190:	e3452a00 	movt	r2, #23040	@ 0x5a00
   34194:	e5831024 	str	r1, [r3, #36]	@ 0x24
   34198:	e583201c 	str	r2, [r3, #28]
   3419c:	eafffffe 	b	3419c <reboot+0x20>

000341a0 <sysinit>:
   341a0:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   341a4:	e24ddf4d 	sub	sp, sp, #308	@ 0x134
   341a8:	f1080040 	cpsie	f
   341ac:	f1080080 	cpsie	i
   341b0:	eb000b36 	bl	36e90 <InvalidateDataCacheL1Only>
   341b4:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
   341b8:	e383360f 	orr	r3, r3, #15728640	@ 0xf00000
   341bc:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
   341c0:	f57ff06f 	isb	sy
   341c4:	e3a03101 	mov	r3, #1073741824	@ 0x40000000
   341c8:	eee83a10 	vmsr	fpexc, r3
   341cc:	e3a03403 	mov	r3, #50331648	@ 0x3000000
   341d0:	eee13a10 	vmsr	fpscr, r3
   341d4:	e3044220 	movw	r4, #16928	@ 0x4220
   341d8:	e3404004 	movt	r4, #4
   341dc:	e3040050 	movw	r0, #16464	@ 0x4050
   341e0:	e3400004 	movt	r0, #4
   341e4:	e0442000 	sub	r2, r4, r0
   341e8:	e3a01000 	mov	r1, #0
   341ec:	eb0005ad 	bl	358a8 <memset>
   341f0:	e3540982 	cmp	r4, #2129920	@ 0x208000
   341f4:	8a000020 	bhi	3427c <sysinit+0xdc>
   341f8:	e28d0018 	add	r0, sp, #24
   341fc:	e3034e30 	movw	r4, #15920	@ 0x3e30
   34200:	e3404004 	movt	r4, #4
   34204:	ebffeb59 	bl	2ef70 <CMachineInfo::CMachineInfo()>
   34208:	e3a01001 	mov	r1, #1
   3420c:	e28d0054 	add	r0, sp, #84	@ 0x54
   34210:	eb000d5a 	bl	37780 <CMemorySystem::CMemorySystem(bool)>
   34214:	e28d0008 	add	r0, sp, #8
   34218:	ebfffa09 	bl	32a44 <CString::CString()>
   3421c:	e3a03003 	mov	r3, #3
   34220:	e3a0202d 	mov	r2, #45	@ 0x2d
   34224:	e3a01001 	mov	r1, #1
   34228:	e28d0008 	add	r0, sp, #8
   3422c:	e58d1000 	str	r1, [sp]
   34230:	e30e14e0 	movw	r1, #58592	@ 0xe4e0
   34234:	e3401003 	movt	r1, #3
   34238:	ebffffba 	bl	34128 <CString::Format(char const*, ...)>
   3423c:	e28d0008 	add	r0, sp, #8
   34240:	ebfffa37 	bl	32b24 <CString::operator char const*() const>
   34244:	e3035e6c 	movw	r5, #15980	@ 0x3e6c
   34248:	e3405004 	movt	r5, #4
   3424c:	e1a01000 	mov	r1, r0
   34250:	e59f004c 	ldr	r0, [pc, #76]	@ 342a4 <sysinit+0x104>
   34254:	eb000446 	bl	35374 <strcpy>
   34258:	e1540005 	cmp	r4, r5
   3425c:	2a000003 	bcs	34270 <sysinit+0xd0>
   34260:	e4943004 	ldr	r3, [r4], #4
   34264:	e12fff33 	blx	r3
   34268:	e1540005 	cmp	r4, r5
   3426c:	3afffffb 	bcc	34260 <sysinit+0xc0>
   34270:	ebff4f7e 	bl	8070 <main>
   34274:	e3500001 	cmp	r0, #1
   34278:	0a000000 	beq	34280 <sysinit+0xe0>
   3427c:	ebffffb9 	bl	34168 <halt>
   34280:	eb000684 	bl	35c98 <IsChainBootEnabled>
   34284:	e3500000 	cmp	r0, #0
   34288:	1a000000 	bne	34290 <sysinit+0xf0>
   3428c:	ebffffba 	bl	3417c <reboot>
   34290:	e28d0054 	add	r0, sp, #84	@ 0x54
   34294:	eb000cdf 	bl	37618 <CMemorySystem::Destructor()>
   34298:	f10c0040 	cpsid	f
   3429c:	eb000683 	bl	35cb0 <DoChainBoot>
   342a0:	eafffff9 	b	3428c <sysinit+0xec>
   342a4:	00044174 	.word	0x00044174

000342a8 <CTimer::CTimer(CInterruptSystem*)>:
   342a8:	e92d4070 	push	{r4, r5, r6, lr}
   342ac:	e1a04000 	mov	r4, r0
   342b0:	e3a05000 	mov	r5, #0
   342b4:	e3a06001 	mov	r6, #1
   342b8:	e2800018 	add	r0, r0, #24
   342bc:	e5845004 	str	r5, [r4, #4]
   342c0:	e5841000 	str	r1, [r4]
   342c4:	e5845008 	str	r5, [r4, #8]
   342c8:	e5846010 	str	r6, [r4, #16]
   342cc:	e584500c 	str	r5, [r4, #12]
   342d0:	e5845014 	str	r5, [r4, #20]
   342d4:	ebffee0a 	bl	2fb04 <CPtrList::CPtrList()>
   342d8:	e3043184 	movw	r3, #16772	@ 0x4184
   342dc:	e3403004 	movt	r3, #4
   342e0:	e3a02d35 	mov	r2, #3392	@ 0xd40
   342e4:	e3402003 	movt	r2, #3
   342e8:	e5842020 	str	r2, [r4, #32]
   342ec:	e3a010c8 	mov	r1, #200	@ 0xc8
   342f0:	e584601c 	str	r6, [r4, #28]
   342f4:	e5932000 	ldr	r2, [r3]
   342f8:	e5841024 	str	r1, [r4, #36]	@ 0x24
   342fc:	e1520005 	cmp	r2, r5
   34300:	e5845028 	str	r5, [r4, #40]	@ 0x28
   34304:	e584503c 	str	r5, [r4, #60]	@ 0x3c
   34308:	1a000002 	bne	34318 <CTimer::CTimer(CInterruptSystem*)+0x70>
   3430c:	e1a00004 	mov	r0, r4
   34310:	e5834000 	str	r4, [r3]
   34314:	e8bd8070 	pop	{r4, r5, r6, pc}
   34318:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   3431c:	e3401003 	movt	r1, #3
   34320:	e30c0b90 	movw	r0, #52112	@ 0xcb90
   34324:	e3400003 	movt	r0, #3
   34328:	e3a02040 	mov	r2, #64	@ 0x40
   3432c:	ebffdeaa 	bl	2bddc <assertion_failed>

00034330 <CTimer::~CTimer()>:
   34330:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34334:	e1a08000 	mov	r8, r0
   34338:	e5900000 	ldr	r0, [r0]
   3433c:	e3500000 	cmp	r0, #0
   34340:	0a00002f 	beq	34404 <CTimer::~CTimer()+0xd4>
   34344:	e3a03000 	mov	r3, #0
   34348:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   3434c:	e3a01049 	mov	r1, #73	@ 0x49
   34350:	e2886018 	add	r6, r8, #24
   34354:	eb000e46 	bl	37c74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   34358:	e1a00006 	mov	r0, r6
   3435c:	e3047d43 	movw	r7, #19779	@ 0x4d43
   34360:	e3447b54 	movt	r7, #19284	@ 0x4b54
   34364:	ebffedf3 	bl	2fb38 <CPtrList::GetFirst()>
   34368:	e2504000 	subs	r4, r0, #0
   3436c:	0a000011 	beq	343b8 <CTimer::~CTimer()+0x88>
   34370:	e1a01004 	mov	r1, r4
   34374:	e1a00006 	mov	r0, r6
   34378:	ebffee06 	bl	2fb98 <CPtrList::GetPtr(TPtrListElement*)>
   3437c:	e2505000 	subs	r5, r0, #0
   34380:	0a000013 	beq	343d4 <CTimer::~CTimer()+0xa4>
   34384:	e5953000 	ldr	r3, [r5]
   34388:	e1530007 	cmp	r3, r7
   3438c:	1a000016 	bne	343ec <CTimer::~CTimer()+0xbc>
   34390:	e1a01004 	mov	r1, r4
   34394:	e1a00006 	mov	r0, r6
   34398:	ebffee8c 	bl	2fdd0 <CPtrList::Remove(TPtrListElement*)>
   3439c:	e3a01014 	mov	r1, #20
   343a0:	e1a00005 	mov	r0, r5
   343a4:	eb000776 	bl	36184 <operator delete(void*, unsigned int)>
   343a8:	e1a00006 	mov	r0, r6
   343ac:	ebffede1 	bl	2fb38 <CPtrList::GetFirst()>
   343b0:	e2504000 	subs	r4, r0, #0
   343b4:	1affffed 	bne	34370 <CTimer::~CTimer()+0x40>
   343b8:	e3043184 	movw	r3, #16772	@ 0x4184
   343bc:	e3403004 	movt	r3, #4
   343c0:	e1a00006 	mov	r0, r6
   343c4:	e5834000 	str	r4, [r3]
   343c8:	ebffedd0 	bl	2fb10 <CPtrList::~CPtrList()>
   343cc:	e1a00008 	mov	r0, r8
   343d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   343d4:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   343d8:	e3401003 	movt	r1, #3
   343dc:	e30c02b4 	movw	r0, #49844	@ 0xc2b4
   343e0:	e3400003 	movt	r0, #3
   343e4:	e3a02057 	mov	r2, #87	@ 0x57
   343e8:	ebffde7b 	bl	2bddc <assertion_failed>
   343ec:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   343f0:	e3401003 	movt	r1, #3
   343f4:	e30e04f8 	movw	r0, #58616	@ 0xe4f8
   343f8:	e3400003 	movt	r0, #3
   343fc:	e3a02058 	mov	r2, #88	@ 0x58
   34400:	ebffde75 	bl	2bddc <assertion_failed>
   34404:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34408:	e3401003 	movt	r1, #3
   3440c:	e3090d7c 	movw	r0, #40316	@ 0x9d7c
   34410:	e3400003 	movt	r0, #3
   34414:	e3a02046 	mov	r2, #70	@ 0x46
   34418:	ebffde6f 	bl	2bddc <assertion_failed>

0003441c <CTimer::SetTimeZone(int)>:
   3441c:	e1a02000 	mov	r2, r0
   34420:	e2813e59 	add	r3, r1, #1424	@ 0x590
   34424:	e283300f 	add	r3, r3, #15
   34428:	e300cb3e 	movw	ip, #2878	@ 0xb3e
   3442c:	e153000c 	cmp	r3, ip
   34430:	93a00001 	movls	r0, #1
   34434:	95821014 	strls	r1, [r2, #20]
   34438:	83a00000 	movhi	r0, #0
   3443c:	e12fff1e 	bx	lr

00034440 <CTimer::GetTimeZone() const>:
   34440:	e5900014 	ldr	r0, [r0, #20]
   34444:	e12fff1e 	bx	lr

00034448 <CTimer::SetTime(unsigned int, bool)>:
   34448:	e5903014 	ldr	r3, [r0, #20]
   3444c:	e3a0c03c 	mov	ip, #60	@ 0x3c
   34450:	e92d4070 	push	{r4, r5, r6, lr}
   34454:	e3520000 	cmp	r2, #0
   34458:	e1a04000 	mov	r4, r0
   3445c:	e1a05001 	mov	r5, r1
   34460:	e003039c 	mul	r3, ip, r3
   34464:	1a000002 	bne	34474 <CTimer::SetTime(unsigned int, bool)+0x2c>
   34468:	e3530000 	cmp	r3, #0
   3446c:	ba000017 	blt	344d0 <CTimer::SetTime(unsigned int, bool)+0x88>
   34470:	e0855003 	add	r5, r5, r3
   34474:	e5942028 	ldr	r2, [r4, #40]	@ 0x28
   34478:	e3520000 	cmp	r2, #0
   3447c:	0a000007 	beq	344a0 <CTimer::SetTime(unsigned int, bool)+0x58>
   34480:	e594100c 	ldr	r1, [r4, #12]
   34484:	e0450003 	sub	r0, r5, r3
   34488:	e1530001 	cmp	r3, r1
   3448c:	d0411003 	suble	r1, r1, r3
   34490:	c3a01000 	movgt	r1, #0
   34494:	e12fff32 	blx	r2
   34498:	e3500000 	cmp	r0, #0
   3449c:	0a00000e 	beq	344dc <CTimer::SetTime(unsigned int, bool)+0x94>
   344a0:	e5940010 	ldr	r0, [r4, #16]
   344a4:	e3500000 	cmp	r0, #0
   344a8:	0584500c 	streq	r5, [r4, #12]
   344ac:	0a000005 	beq	344c8 <CTimer::SetTime(unsigned int, bool)+0x80>
   344b0:	eb000d32 	bl	37980 <EnterCritical>
   344b4:	e5943010 	ldr	r3, [r4, #16]
   344b8:	e584500c 	str	r5, [r4, #12]
   344bc:	e3530000 	cmp	r3, #0
   344c0:	0a000000 	beq	344c8 <CTimer::SetTime(unsigned int, bool)+0x80>
   344c4:	eb000d58 	bl	37a2c <LeaveCritical>
   344c8:	e3a00001 	mov	r0, #1
   344cc:	e8bd8070 	pop	{r4, r5, r6, pc}
   344d0:	e2632000 	rsb	r2, r3, #0
   344d4:	e1520001 	cmp	r2, r1
   344d8:	daffffe4 	ble	34470 <CTimer::SetTime(unsigned int, bool)+0x28>
   344dc:	e3a00000 	mov	r0, #0
   344e0:	e8bd8070 	pop	{r4, r5, r6, pc}

000344e4 <CTimer::GetClockTicks()>:
   344e4:	f57ff06f 	isb	sy
   344e8:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
   344ec:	e12fff1e 	bx	lr

000344f0 <CTimer::GetTicks() const>:
   344f0:	e5900004 	ldr	r0, [r0, #4]
   344f4:	e12fff1e 	bx	lr

000344f8 <CTimer::GetUptime() const>:
   344f8:	e5900008 	ldr	r0, [r0, #8]
   344fc:	e12fff1e 	bx	lr

00034500 <CTimer::GetTime() const>:
   34500:	e590000c 	ldr	r0, [r0, #12]
   34504:	e12fff1e 	bx	lr

00034508 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   34508:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3450c:	e1a04000 	mov	r4, r0
   34510:	e5900010 	ldr	r0, [r0, #16]
   34514:	e1a06001 	mov	r6, r1
   34518:	e1a07002 	mov	r7, r2
   3451c:	e3500000 	cmp	r0, #0
   34520:	1a000011 	bne	3456c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x64>
   34524:	e594800c 	ldr	r8, [r4, #12]
   34528:	e5945004 	ldr	r5, [r4, #4]
   3452c:	e3560000 	cmp	r6, #0
   34530:	0a000016 	beq	34590 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x88>
   34534:	e3570000 	cmp	r7, #0
   34538:	e5868000 	str	r8, [r6]
   3453c:	0a000019 	beq	345a8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa0>
   34540:	e308351f 	movw	r3, #34079	@ 0x851f
   34544:	e34531eb 	movt	r3, #20971	@ 0x51eb
   34548:	e3a01064 	mov	r1, #100	@ 0x64
   3454c:	e3022710 	movw	r2, #10000	@ 0x2710
   34550:	e0830593 	umull	r0, r3, r3, r5
   34554:	e3a00001 	mov	r0, #1
   34558:	e1a032a3 	lsr	r3, r3, #5
   3455c:	e0655391 	mls	r5, r1, r3, r5
   34560:	e0050592 	mul	r5, r2, r5
   34564:	e5875000 	str	r5, [r7]
   34568:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3456c:	eb000d03 	bl	37980 <EnterCritical>
   34570:	e5943010 	ldr	r3, [r4, #16]
   34574:	e594800c 	ldr	r8, [r4, #12]
   34578:	e3530000 	cmp	r3, #0
   3457c:	e5945004 	ldr	r5, [r4, #4]
   34580:	0affffe9 	beq	3452c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x24>
   34584:	eb000d28 	bl	37a2c <LeaveCritical>
   34588:	e3560000 	cmp	r6, #0
   3458c:	1affffe8 	bne	34534 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x2c>
   34590:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34594:	e3401003 	movt	r1, #3
   34598:	e30e0520 	movw	r0, #58656	@ 0xe520
   3459c:	e3400003 	movt	r0, #3
   345a0:	e300210a 	movw	r2, #266	@ 0x10a
   345a4:	ebffde0c 	bl	2bddc <assertion_failed>
   345a8:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   345ac:	e3401003 	movt	r1, #3
   345b0:	e30e0530 	movw	r0, #58672	@ 0xe530
   345b4:	e3400003 	movt	r0, #3
   345b8:	e300210d 	movw	r2, #269	@ 0x10d
   345bc:	ebffde06 	bl	2bddc <assertion_failed>

000345c0 <CTimer::GetUniversalTime() const>:
   345c0:	e5903014 	ldr	r3, [r0, #20]
   345c4:	e3a0203c 	mov	r2, #60	@ 0x3c
   345c8:	e590000c 	ldr	r0, [r0, #12]
   345cc:	e0030392 	mul	r3, r2, r3
   345d0:	e1500003 	cmp	r0, r3
   345d4:	a0400003 	subge	r0, r0, r3
   345d8:	b3a00000 	movlt	r0, #0
   345dc:	e12fff1e 	bx	lr

000345e0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   345e0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   345e4:	e1a04000 	mov	r4, r0
   345e8:	e5900010 	ldr	r0, [r0, #16]
   345ec:	e1a05001 	mov	r5, r1
   345f0:	e1a06002 	mov	r6, r2
   345f4:	e3500000 	cmp	r0, #0
   345f8:	1a000019 	bne	34664 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
   345fc:	e594700c 	ldr	r7, [r4, #12]
   34600:	e5948004 	ldr	r8, [r4, #4]
   34604:	e5943014 	ldr	r3, [r4, #20]
   34608:	e3a0203c 	mov	r2, #60	@ 0x3c
   3460c:	e0030392 	mul	r3, r2, r3
   34610:	e1570003 	cmp	r7, r3
   34614:	ba000010 	blt	3465c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x7c>
   34618:	e3550000 	cmp	r5, #0
   3461c:	0a000018 	beq	34684 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa4>
   34620:	e0477003 	sub	r7, r7, r3
   34624:	e3560000 	cmp	r6, #0
   34628:	e5857000 	str	r7, [r5]
   3462c:	0a00001a 	beq	3469c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xbc>
   34630:	e308351f 	movw	r3, #34079	@ 0x851f
   34634:	e34531eb 	movt	r3, #20971	@ 0x51eb
   34638:	e3a01064 	mov	r1, #100	@ 0x64
   3463c:	e3022710 	movw	r2, #10000	@ 0x2710
   34640:	e0830893 	umull	r0, r3, r3, r8
   34644:	e3a00001 	mov	r0, #1
   34648:	e1a032a3 	lsr	r3, r3, #5
   3464c:	e0638391 	mls	r3, r1, r3, r8
   34650:	e0030392 	mul	r3, r2, r3
   34654:	e5863000 	str	r3, [r6]
   34658:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   3465c:	e3a00000 	mov	r0, #0
   34660:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   34664:	eb000cc5 	bl	37980 <EnterCritical>
   34668:	e5943010 	ldr	r3, [r4, #16]
   3466c:	e594700c 	ldr	r7, [r4, #12]
   34670:	e3530000 	cmp	r3, #0
   34674:	e5948004 	ldr	r8, [r4, #4]
   34678:	0affffe1 	beq	34604 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   3467c:	eb000cea 	bl	37a2c <LeaveCritical>
   34680:	eaffffdf 	b	34604 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x24>
   34684:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34688:	e3401003 	movt	r1, #3
   3468c:	e30e0520 	movw	r0, #58656	@ 0xe520
   34690:	e3400003 	movt	r0, #3
   34694:	e300212f 	movw	r2, #303	@ 0x12f
   34698:	ebffddcf 	bl	2bddc <assertion_failed>
   3469c:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   346a0:	e3401003 	movt	r1, #3
   346a4:	e30e0530 	movw	r0, #58672	@ 0xe530
   346a8:	e3400003 	movt	r0, #3
   346ac:	e3002132 	movw	r2, #306	@ 0x132
   346b0:	ebffddc9 	bl	2bddc <assertion_failed>

000346b4 <CTimer::GetTimeString()>:
   346b4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   346b8:	e1a04000 	mov	r4, r0
   346bc:	e5900010 	ldr	r0, [r0, #16]
   346c0:	e24dd014 	sub	sp, sp, #20
   346c4:	e3500000 	cmp	r0, #0
   346c8:	1a000067 	bne	3486c <CTimer::GetTimeString()+0x1b8>
   346cc:	e594500c 	ldr	r5, [r4, #12]
   346d0:	e594a004 	ldr	sl, [r4, #4]
   346d4:	e195300a 	orrs	r3, r5, sl
   346d8:	01a0a003 	moveq	sl, r3
   346dc:	0a000054 	beq	34834 <CTimer::GetTimeString()+0x180>
   346e0:	e3088889 	movw	r8, #34953	@ 0x8889
   346e4:	e3488888 	movt	r8, #34952	@ 0x8888
   346e8:	e30a4aab 	movw	r4, #43691	@ 0xaaab
   346ec:	e34a4aaa 	movt	r4, #43690	@ 0xaaaa
   346f0:	e3050c29 	movw	r0, #23593	@ 0x5c29
   346f4:	e34c028f 	movt	r0, #49807	@ 0xc28f
   346f8:	e0832598 	umull	r2, r3, r8, r5
   346fc:	e30de70a 	movw	lr, #55050	@ 0xd70a
   34700:	e340e0a3 	movt	lr, #163	@ 0xa3
   34704:	e30067b2 	movw	r6, #1970	@ 0x7b2
   34708:	e300c16d 	movw	ip, #365	@ 0x16d
   3470c:	e1a072a3 	lsr	r7, r3, #5
   34710:	e1a03007 	mov	r3, r7
   34714:	e0882798 	umull	r2, r8, r8, r7
   34718:	e3a0203c 	mov	r2, #60	@ 0x3c
   3471c:	e1a092a8 	lsr	r9, r8, #5
   34720:	e0675792 	mls	r7, r2, r7, r5
   34724:	e0683992 	mls	r8, r2, r9, r3
   34728:	e3052c28 	movw	r2, #23592	@ 0x5c28
   3472c:	e340228f 	movt	r2, #655	@ 0x28f
   34730:	e0843994 	umull	r3, r4, r4, r9
   34734:	e1a04224 	lsr	r4, r4, #4
   34738:	ea000007 	b	3475c <CTimer::GetTimeString()+0xa8>
   3473c:	e3160003 	tst	r6, #3
   34740:	03a03001 	moveq	r3, #1
   34744:	13a03000 	movne	r3, #0
   34748:	e083100c 	add	r1, r3, ip
   3474c:	e1540001 	cmp	r4, r1
   34750:	3a00000a 	bcc	34780 <CTimer::GetTimeString()+0xcc>
   34754:	e0444001 	sub	r4, r4, r1
   34758:	e2866001 	add	r6, r6, #1
   3475c:	e0030690 	mul	r3, r0, r6
   34760:	e1520163 	cmp	r2, r3, ror #2
   34764:	3afffff4 	bcc	3473c <CTimer::GetTimeString()+0x88>
   34768:	e15e0263 	cmp	lr, r3, ror #4
   3476c:	23a03001 	movcs	r3, #1
   34770:	33a03000 	movcc	r3, #0
   34774:	e083100c 	add	r1, r3, ip
   34778:	e1540001 	cmp	r4, r1
   3477c:	2afffff4 	bcs	34754 <CTimer::GetTimeString()+0xa0>
   34780:	e3020af0 	movw	r0, #10992	@ 0x2af0
   34784:	e3400004 	movt	r0, #4
   34788:	e3a05000 	mov	r5, #0
   3478c:	ea000001 	b	34798 <CTimer::GetTimeString()+0xe4>
   34790:	e0444001 	sub	r4, r4, r1
   34794:	e2855001 	add	r5, r5, #1
   34798:	e3550001 	cmp	r5, #1
   3479c:	13a02000 	movne	r2, #0
   347a0:	02032001 	andeq	r2, r3, #1
   347a4:	e3520000 	cmp	r2, #0
   347a8:	13a0101d 	movne	r1, #29
   347ac:	07901105 	ldreq	r1, [r0, r5, lsl #2]
   347b0:	e1540001 	cmp	r4, r1
   347b4:	2afffff5 	bcs	34790 <CTimer::GetTimeString()+0xdc>
   347b8:	e308b51f 	movw	fp, #34079	@ 0x851f
   347bc:	e345b1eb 	movt	fp, #20971	@ 0x51eb
   347c0:	e3a00010 	mov	r0, #16
   347c4:	e08b3a9b 	umull	r3, fp, fp, sl
   347c8:	e3a03064 	mov	r3, #100	@ 0x64
   347cc:	e1a0b2ab 	lsr	fp, fp, #5
   347d0:	e06bab93 	mls	fp, r3, fp, sl
   347d4:	eb000652 	bl	36124 <operator new(unsigned int)>
   347d8:	e1a0a000 	mov	sl, r0
   347dc:	ebfff898 	bl	32a44 <CString::CString()>
   347e0:	e30037b7 	movw	r3, #1975	@ 0x7b7
   347e4:	e1560003 	cmp	r6, r3
   347e8:	9a000014 	bls	34840 <CTimer::GetTimeString()+0x18c>
   347ec:	e30a2aab 	movw	r2, #43691	@ 0xaaab
   347f0:	e34a2aaa 	movt	r2, #43690	@ 0xaaaa
   347f4:	e58db00c 	str	fp, [sp, #12]
   347f8:	e2843001 	add	r3, r4, #1
   347fc:	e58d7008 	str	r7, [sp, #8]
   34800:	e1a0000a 	mov	r0, sl
   34804:	e0821992 	umull	r1, r2, r2, r9
   34808:	e3a01018 	mov	r1, #24
   3480c:	e58d8004 	str	r8, [sp, #4]
   34810:	e1a02222 	lsr	r2, r2, #4
   34814:	e0629291 	mls	r2, r1, r2, r9
   34818:	e30e1544 	movw	r1, #58692	@ 0xe544
   3481c:	e3401003 	movt	r1, #3
   34820:	e58d2000 	str	r2, [sp]
   34824:	e3032fc0 	movw	r2, #16320	@ 0x3fc0
   34828:	e3402004 	movt	r2, #4
   3482c:	e7922105 	ldr	r2, [r2, r5, lsl #2]
   34830:	ebfffe3c 	bl	34128 <CString::Format(char const*, ...)>
   34834:	e1a0000a 	mov	r0, sl
   34838:	e28dd014 	add	sp, sp, #20
   3483c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34840:	e1a0000a 	mov	r0, sl
   34844:	e1a03008 	mov	r3, r8
   34848:	e1a02009 	mov	r2, r9
   3484c:	e58db004 	str	fp, [sp, #4]
   34850:	e58d7000 	str	r7, [sp]
   34854:	e30e1560 	movw	r1, #58720	@ 0xe560
   34858:	e3401003 	movt	r1, #3
   3485c:	ebfffe31 	bl	34128 <CString::Format(char const*, ...)>
   34860:	e1a0000a 	mov	r0, sl
   34864:	e28dd014 	add	sp, sp, #20
   34868:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3486c:	eb000c43 	bl	37980 <EnterCritical>
   34870:	e5943010 	ldr	r3, [r4, #16]
   34874:	e594500c 	ldr	r5, [r4, #12]
   34878:	e3530000 	cmp	r3, #0
   3487c:	e594a004 	ldr	sl, [r4, #4]
   34880:	0affff93 	beq	346d4 <CTimer::GetTimeString()+0x20>
   34884:	eb000c68 	bl	37a2c <LeaveCritical>
   34888:	eaffff91 	b	346d4 <CTimer::GetTimeString()+0x20>

0003488c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
   3488c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34890:	e1a08000 	mov	r8, r0
   34894:	e3a00014 	mov	r0, #20
   34898:	e1a05001 	mov	r5, r1
   3489c:	e1a04002 	mov	r4, r2
   348a0:	e1a09003 	mov	r9, r3
   348a4:	eb00061e 	bl	36124 <operator new(unsigned int)>
   348a8:	e5987004 	ldr	r7, [r8, #4]
   348ac:	e3540000 	cmp	r4, #0
   348b0:	e0877005 	add	r7, r7, r5
   348b4:	0a00003c 	beq	349ac <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x120>
   348b8:	e1a06000 	mov	r6, r0
   348bc:	e5804004 	str	r4, [r0, #4]
   348c0:	e598001c 	ldr	r0, [r8, #28]
   348c4:	e59d3020 	ldr	r3, [sp, #32]
   348c8:	e5863010 	str	r3, [r6, #16]
   348cc:	e3500000 	cmp	r0, #0
   348d0:	e3043d43 	movw	r3, #19779	@ 0x4d43
   348d4:	e3443b54 	movt	r3, #19284	@ 0x4b54
   348d8:	e5867008 	str	r7, [r6, #8]
   348dc:	e586900c 	str	r9, [r6, #12]
   348e0:	e5863000 	str	r3, [r6]
   348e4:	1a000025 	bne	34980 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf4>
   348e8:	e2885018 	add	r5, r8, #24
   348ec:	e1a00005 	mov	r0, r5
   348f0:	ebffec90 	bl	2fb38 <CPtrList::GetFirst()>
   348f4:	e2504000 	subs	r4, r0, #0
   348f8:	0a000033 	beq	349cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   348fc:	e3049d43 	movw	r9, #19779	@ 0x4d43
   34900:	e3449b54 	movt	r9, #19284	@ 0x4b54
   34904:	e1a01004 	mov	r1, r4
   34908:	e1a00005 	mov	r0, r5
   3490c:	ebffeca1 	bl	2fb98 <CPtrList::GetPtr(TPtrListElement*)>
   34910:	e3500000 	cmp	r0, #0
   34914:	0a00000d 	beq	34950 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc4>
   34918:	e5903000 	ldr	r3, [r0]
   3491c:	e1530009 	cmp	r3, r9
   34920:	1a000010 	bne	34968 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xdc>
   34924:	e5903008 	ldr	r3, [r0, #8]
   34928:	e0433007 	sub	r3, r3, r7
   3492c:	e3530000 	cmp	r3, #0
   34930:	ca000014 	bgt	34988 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xfc>
   34934:	e1a01004 	mov	r1, r4
   34938:	e1a00005 	mov	r0, r5
   3493c:	ebffec7f 	bl	2fb40 <CPtrList::GetNext(TPtrListElement*)>
   34940:	e3500000 	cmp	r0, #0
   34944:	0a000020 	beq	349cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x140>
   34948:	e1a04000 	mov	r4, r0
   3494c:	eaffffec 	b	34904 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x78>
   34950:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34954:	e3401003 	movt	r1, #3
   34958:	e30e0574 	movw	r0, #58740	@ 0xe574
   3495c:	e3400003 	movt	r0, #3
   34960:	e3002199 	movw	r2, #409	@ 0x199
   34964:	ebffdd1c 	bl	2bddc <assertion_failed>
   34968:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   3496c:	e3401003 	movt	r1, #3
   34970:	e30e0584 	movw	r0, #58756	@ 0xe584
   34974:	e3400003 	movt	r0, #3
   34978:	e300219a 	movw	r2, #410	@ 0x19a
   3497c:	ebffdd16 	bl	2bddc <assertion_failed>
   34980:	eb000bfe 	bl	37980 <EnterCritical>
   34984:	eaffffd7 	b	348e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x5c>
   34988:	e1a02006 	mov	r2, r6
   3498c:	e1a01004 	mov	r1, r4
   34990:	e1a00005 	mov	r0, r5
   34994:	ebffec95 	bl	2fbf0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   34998:	e598301c 	ldr	r3, [r8, #28]
   3499c:	e3530000 	cmp	r3, #0
   349a0:	1a000007 	bne	349c4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x138>
   349a4:	e1a00006 	mov	r0, r6
   349a8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   349ac:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   349b0:	e3401003 	movt	r1, #3
   349b4:	e30e0ad0 	movw	r0, #60112	@ 0xead0
   349b8:	e3400003 	movt	r0, #3
   349bc:	e3002189 	movw	r2, #393	@ 0x189
   349c0:	ebffdd05 	bl	2bddc <assertion_failed>
   349c4:	eb000c18 	bl	37a2c <LeaveCritical>
   349c8:	eafffff5 	b	349a4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x118>
   349cc:	e1a02006 	mov	r2, r6
   349d0:	e1a01004 	mov	r1, r4
   349d4:	e1a00005 	mov	r0, r5
   349d8:	ebffecc0 	bl	2fce0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   349dc:	eaffffed 	b	34998 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x10c>

000349e0 <CTimer::CancelKernelTimer(unsigned int)>:
   349e0:	e92d4070 	push	{r4, r5, r6, lr}
   349e4:	e2514000 	subs	r4, r1, #0
   349e8:	0a00001a 	beq	34a58 <CTimer::CancelKernelTimer(unsigned int)+0x78>
   349ec:	e1a05000 	mov	r5, r0
   349f0:	e590001c 	ldr	r0, [r0, #28]
   349f4:	e3500000 	cmp	r0, #0
   349f8:	1a000014 	bne	34a50 <CTimer::CancelKernelTimer(unsigned int)+0x70>
   349fc:	e2856018 	add	r6, r5, #24
   34a00:	e1a01004 	mov	r1, r4
   34a04:	e1a00006 	mov	r0, r6
   34a08:	ebffed3a 	bl	2fef8 <CPtrList::Find(void*)>
   34a0c:	e2501000 	subs	r1, r0, #0
   34a10:	0a000009 	beq	34a3c <CTimer::CancelKernelTimer(unsigned int)+0x5c>
   34a14:	e5942000 	ldr	r2, [r4]
   34a18:	e3043d43 	movw	r3, #19779	@ 0x4d43
   34a1c:	e3443b54 	movt	r3, #19284	@ 0x4b54
   34a20:	e1520003 	cmp	r2, r3
   34a24:	1a000011 	bne	34a70 <CTimer::CancelKernelTimer(unsigned int)+0x90>
   34a28:	e1a00006 	mov	r0, r6
   34a2c:	ebffece7 	bl	2fdd0 <CPtrList::Remove(TPtrListElement*)>
   34a30:	e3a01014 	mov	r1, #20
   34a34:	e1a00004 	mov	r0, r4
   34a38:	eb0005d1 	bl	36184 <operator delete(void*, unsigned int)>
   34a3c:	e595301c 	ldr	r3, [r5, #28]
   34a40:	e3530000 	cmp	r3, #0
   34a44:	08bd8070 	popeq	{r4, r5, r6, pc}
   34a48:	e8bd4070 	pop	{r4, r5, r6, lr}
   34a4c:	ea000bf6 	b	37a2c <LeaveCritical>
   34a50:	eb000bca 	bl	37980 <EnterCritical>
   34a54:	eaffffe8 	b	349fc <CTimer::CancelKernelTimer(unsigned int)+0x1c>
   34a58:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34a5c:	e3401003 	movt	r1, #3
   34a60:	e30c02b4 	movw	r0, #49844	@ 0xc2b4
   34a64:	e3400003 	movt	r0, #3
   34a68:	e30021b6 	movw	r2, #438	@ 0x1b6
   34a6c:	ebffdcda 	bl	2bddc <assertion_failed>
   34a70:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34a74:	e3401003 	movt	r1, #3
   34a78:	e30e04f8 	movw	r0, #58616	@ 0xe4f8
   34a7c:	e3400003 	movt	r0, #3
   34a80:	e30021bd 	movw	r2, #445	@ 0x1bd
   34a84:	ebffdcd4 	bl	2bddc <assertion_failed>

00034a88 <CTimer::PollKernelTimers()>:
   34a88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   34a8c:	e1a06000 	mov	r6, r0
   34a90:	e590001c 	ldr	r0, [r0, #28]
   34a94:	e3500000 	cmp	r0, #0
   34a98:	1a00003e 	bne	34b98 <CTimer::PollKernelTimers()+0x110>
   34a9c:	e2867018 	add	r7, r6, #24
   34aa0:	e1a00007 	mov	r0, r7
   34aa4:	ebffec23 	bl	2fb38 <CPtrList::GetFirst()>
   34aa8:	e2505000 	subs	r5, r0, #0
   34aac:	0a000028 	beq	34b54 <CTimer::PollKernelTimers()+0xcc>
   34ab0:	e3048d43 	movw	r8, #19779	@ 0x4d43
   34ab4:	e3448b54 	movt	r8, #19284	@ 0x4b54
   34ab8:	e1a01005 	mov	r1, r5
   34abc:	e1a00007 	mov	r0, r7
   34ac0:	ebffec34 	bl	2fb98 <CPtrList::GetPtr(TPtrListElement*)>
   34ac4:	e2504000 	subs	r4, r0, #0
   34ac8:	0a000034 	beq	34ba0 <CTimer::PollKernelTimers()+0x118>
   34acc:	e5943000 	ldr	r3, [r4]
   34ad0:	e1530008 	cmp	r3, r8
   34ad4:	1a000037 	bne	34bb8 <CTimer::PollKernelTimers()+0x130>
   34ad8:	e5962004 	ldr	r2, [r6, #4]
   34adc:	e5943008 	ldr	r3, [r4, #8]
   34ae0:	e0433002 	sub	r3, r3, r2
   34ae4:	e3530000 	cmp	r3, #0
   34ae8:	ca000019 	bgt	34b54 <CTimer::PollKernelTimers()+0xcc>
   34aec:	e1a01005 	mov	r1, r5
   34af0:	e1a00007 	mov	r0, r7
   34af4:	ebffec11 	bl	2fb40 <CPtrList::GetNext(TPtrListElement*)>
   34af8:	e1a01005 	mov	r1, r5
   34afc:	e1a03000 	mov	r3, r0
   34b00:	e1a00007 	mov	r0, r7
   34b04:	e1a05003 	mov	r5, r3
   34b08:	ebffecb0 	bl	2fdd0 <CPtrList::Remove(TPtrListElement*)>
   34b0c:	e596301c 	ldr	r3, [r6, #28]
   34b10:	e3530000 	cmp	r3, #0
   34b14:	1a000013 	bne	34b68 <CTimer::PollKernelTimers()+0xe0>
   34b18:	e5943004 	ldr	r3, [r4, #4]
   34b1c:	e3530000 	cmp	r3, #0
   34b20:	0a000014 	beq	34b78 <CTimer::PollKernelTimers()+0xf0>
   34b24:	e5942010 	ldr	r2, [r4, #16]
   34b28:	e1a00004 	mov	r0, r4
   34b2c:	e594100c 	ldr	r1, [r4, #12]
   34b30:	e12fff33 	blx	r3
   34b34:	e1a00004 	mov	r0, r4
   34b38:	e3a01014 	mov	r1, #20
   34b3c:	eb000590 	bl	36184 <operator delete(void*, unsigned int)>
   34b40:	e596001c 	ldr	r0, [r6, #28]
   34b44:	e3500000 	cmp	r0, #0
   34b48:	1a000010 	bne	34b90 <CTimer::PollKernelTimers()+0x108>
   34b4c:	e3550000 	cmp	r5, #0
   34b50:	1affffd8 	bne	34ab8 <CTimer::PollKernelTimers()+0x30>
   34b54:	e596301c 	ldr	r3, [r6, #28]
   34b58:	e3530000 	cmp	r3, #0
   34b5c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
   34b60:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   34b64:	ea000bb0 	b	37a2c <LeaveCritical>
   34b68:	eb000baf 	bl	37a2c <LeaveCritical>
   34b6c:	e5943004 	ldr	r3, [r4, #4]
   34b70:	e3530000 	cmp	r3, #0
   34b74:	1affffea 	bne	34b24 <CTimer::PollKernelTimers()+0x9c>
   34b78:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34b7c:	e3401003 	movt	r1, #3
   34b80:	e30e0ad0 	movw	r0, #60112	@ 0xead0
   34b84:	e3400003 	movt	r0, #3
   34b88:	e30021e1 	movw	r2, #481	@ 0x1e1
   34b8c:	ebffdc92 	bl	2bddc <assertion_failed>
   34b90:	eb000b7a 	bl	37980 <EnterCritical>
   34b94:	eaffffec 	b	34b4c <CTimer::PollKernelTimers()+0xc4>
   34b98:	eb000b78 	bl	37980 <EnterCritical>
   34b9c:	eaffffbe 	b	34a9c <CTimer::PollKernelTimers()+0x14>
   34ba0:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34ba4:	e3401003 	movt	r1, #3
   34ba8:	e30c02b4 	movw	r0, #49844	@ 0xc2b4
   34bac:	e3400003 	movt	r0, #3
   34bb0:	e30021d2 	movw	r2, #466	@ 0x1d2
   34bb4:	ebffdc88 	bl	2bddc <assertion_failed>
   34bb8:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34bbc:	e3401003 	movt	r1, #3
   34bc0:	e30e04f8 	movw	r0, #58616	@ 0xe4f8
   34bc4:	e3400003 	movt	r0, #3
   34bc8:	e30021d3 	movw	r2, #467	@ 0x1d3
   34bcc:	ebffdc82 	bl	2bddc <assertion_failed>

00034bd0 <CTimer::InterruptHandler()>:
   34bd0:	e92d4070 	push	{r4, r5, r6, lr}
   34bd4:	e1a04000 	mov	r4, r0
   34bd8:	ec5e3f2e 	mrrc	15, 2, r3, lr, cr14
   34bdc:	e3a0c000 	mov	ip, #0
   34be0:	e3022710 	movw	r2, #10000	@ 0x2710
   34be4:	e0933002 	adds	r3, r3, r2
   34be8:	e1a0100c 	mov	r1, ip
   34bec:	e1a00003 	mov	r0, r3
   34bf0:	e2ae2000 	adc	r2, lr, #0
   34bf4:	e1a0300c 	mov	r3, ip
   34bf8:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
   34bfc:	e5940010 	ldr	r0, [r4, #16]
   34c00:	e150000c 	cmp	r0, ip
   34c04:	1a00001e 	bne	34c84 <CTimer::InterruptHandler()+0xb4>
   34c08:	e5943004 	ldr	r3, [r4, #4]
   34c0c:	e3051c29 	movw	r1, #23593	@ 0x5c29
   34c10:	e34c128f 	movt	r1, #49807	@ 0xc28f
   34c14:	e3052c28 	movw	r2, #23592	@ 0x5c28
   34c18:	e340228f 	movt	r2, #655	@ 0x28f
   34c1c:	e2833001 	add	r3, r3, #1
   34c20:	e5843004 	str	r3, [r4, #4]
   34c24:	e0030391 	mul	r3, r1, r3
   34c28:	e1520163 	cmp	r2, r3, ror #2
   34c2c:	2a00000d 	bcs	34c68 <CTimer::InterruptHandler()+0x98>
   34c30:	e1a00004 	mov	r0, r4
   34c34:	ebffff93 	bl	34a88 <CTimer::PollKernelTimers()>
   34c38:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
   34c3c:	e3530000 	cmp	r3, #0
   34c40:	08bd8070 	popeq	{r4, r5, r6, pc}
   34c44:	e2846028 	add	r6, r4, #40	@ 0x28
   34c48:	e3a05000 	mov	r5, #0
   34c4c:	e5b63004 	ldr	r3, [r6, #4]!
   34c50:	e2855001 	add	r5, r5, #1
   34c54:	e12fff33 	blx	r3
   34c58:	e594303c 	ldr	r3, [r4, #60]	@ 0x3c
   34c5c:	e1530005 	cmp	r3, r5
   34c60:	8afffff9 	bhi	34c4c <CTimer::InterruptHandler()+0x7c>
   34c64:	e8bd8070 	pop	{r4, r5, r6, pc}
   34c68:	e5943008 	ldr	r3, [r4, #8]
   34c6c:	e2833001 	add	r3, r3, #1
   34c70:	e5843008 	str	r3, [r4, #8]
   34c74:	e594300c 	ldr	r3, [r4, #12]
   34c78:	e2833001 	add	r3, r3, #1
   34c7c:	e584300c 	str	r3, [r4, #12]
   34c80:	eaffffea 	b	34c30 <CTimer::InterruptHandler()+0x60>
   34c84:	eb000b3d 	bl	37980 <EnterCritical>
   34c88:	e5943004 	ldr	r3, [r4, #4]
   34c8c:	e3051c29 	movw	r1, #23593	@ 0x5c29
   34c90:	e34c128f 	movt	r1, #49807	@ 0xc28f
   34c94:	e2833001 	add	r3, r3, #1
   34c98:	e5843004 	str	r3, [r4, #4]
   34c9c:	e3052c28 	movw	r2, #23592	@ 0x5c28
   34ca0:	e340228f 	movt	r2, #655	@ 0x28f
   34ca4:	e5940010 	ldr	r0, [r4, #16]
   34ca8:	e0030391 	mul	r3, r1, r3
   34cac:	e1520163 	cmp	r2, r3, ror #2
   34cb0:	2a000003 	bcs	34cc4 <CTimer::InterruptHandler()+0xf4>
   34cb4:	e3500000 	cmp	r0, #0
   34cb8:	0affffdc 	beq	34c30 <CTimer::InterruptHandler()+0x60>
   34cbc:	eb000b5a 	bl	37a2c <LeaveCritical>
   34cc0:	eaffffda 	b	34c30 <CTimer::InterruptHandler()+0x60>
   34cc4:	e5943008 	ldr	r3, [r4, #8]
   34cc8:	e2833001 	add	r3, r3, #1
   34ccc:	e5843008 	str	r3, [r4, #8]
   34cd0:	e594300c 	ldr	r3, [r4, #12]
   34cd4:	e2833001 	add	r3, r3, #1
   34cd8:	e584300c 	str	r3, [r4, #12]
   34cdc:	eafffff4 	b	34cb4 <CTimer::InterruptHandler()+0xe4>

00034ce0 <CTimer::InterruptHandler(void*)>:
   34ce0:	e3500000 	cmp	r0, #0
   34ce4:	0a000000 	beq	34cec <CTimer::InterruptHandler(void*)+0xc>
   34ce8:	eaffffb8 	b	34bd0 <CTimer::InterruptHandler()>
   34cec:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34cf0:	e3401003 	movt	r1, #3
   34cf4:	e3090d50 	movw	r0, #40272	@ 0x9d50
   34cf8:	e3400003 	movt	r0, #3
   34cfc:	e3a02f8a 	mov	r2, #552	@ 0x228
   34d00:	e92d4010 	push	{r4, lr}
   34d04:	ebffdc34 	bl	2bddc <assertion_failed>

00034d08 <CTimer::TuneMsDelay()>:
   34d08:	e92d4070 	push	{r4, r5, r6, lr}
   34d0c:	e1a06000 	mov	r6, r0
   34d10:	e5900020 	ldr	r0, [r0, #32]
   34d14:	e3a02ffa 	mov	r2, #1000	@ 0x3e8
   34d18:	e24dd008 	sub	sp, sp, #8
   34d1c:	e5964004 	ldr	r4, [r6, #4]
   34d20:	e3025710 	movw	r5, #10000	@ 0x2710
   34d24:	e0000092 	mul	r0, r2, r0
   34d28:	eb000f4e 	bl	38a68 <DelayLoop>
   34d2c:	e5962004 	ldr	r2, [r6, #4]
   34d30:	e5963020 	ldr	r3, [r6, #32]
   34d34:	e0422004 	sub	r2, r2, r4
   34d38:	e308451f 	movw	r4, #34079	@ 0x851f
   34d3c:	e34541eb 	movt	r4, #20971	@ 0x51eb
   34d40:	e735f215 	udiv	r5, r5, r2
   34d44:	e0030593 	mul	r3, r3, r5
   34d48:	e0832394 	umull	r2, r3, r4, r3
   34d4c:	e3042dd3 	movw	r2, #19923	@ 0x4dd3
   34d50:	e3412062 	movt	r2, #4194	@ 0x1062
   34d54:	e1a032a3 	lsr	r3, r3, #5
   34d58:	e5863020 	str	r3, [r6, #32]
   34d5c:	e2833f7d 	add	r3, r3, #500	@ 0x1f4
   34d60:	e0832392 	umull	r2, r3, r2, r3
   34d64:	e1a03323 	lsr	r3, r3, #6
   34d68:	e5863024 	str	r3, [r6, #36]	@ 0x24
   34d6c:	e0843594 	umull	r3, r4, r4, r5
   34d70:	ebffe694 	bl	2e7c8 <CLogger::Get()>
   34d74:	e3a02064 	mov	r2, #100	@ 0x64
   34d78:	e59f1024 	ldr	r1, [pc, #36]	@ 34da4 <CTimer::TuneMsDelay()+0x9c>
   34d7c:	e30e35ac 	movw	r3, #58796	@ 0xe5ac
   34d80:	e3403003 	movt	r3, #3
   34d84:	e1a042a4 	lsr	r4, r4, #5
   34d88:	e58d4000 	str	r4, [sp]
   34d8c:	e0655492 	mls	r5, r2, r4, r5
   34d90:	e3a02003 	mov	r2, #3
   34d94:	e58d5004 	str	r5, [sp, #4]
   34d98:	ebffe853 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34d9c:	e28dd008 	add	sp, sp, #8
   34da0:	e8bd8070 	pop	{r4, r5, r6, pc}
   34da4:	00042b20 	.word	0x00042b20

00034da8 <CTimer::Initialize()>:
   34da8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   34dac:	e1a04000 	mov	r4, r0
   34db0:	e5900000 	ldr	r0, [r0]
   34db4:	e24dd00c 	sub	sp, sp, #12
   34db8:	e3500000 	cmp	r0, #0
   34dbc:	0a000028 	beq	34e64 <CTimer::Initialize()+0xbc>
   34dc0:	e1a03004 	mov	r3, r4
   34dc4:	e3a01049 	mov	r1, #73	@ 0x49
   34dc8:	e3042ce0 	movw	r2, #19680	@ 0x4ce0
   34dcc:	e3402003 	movt	r2, #3
   34dd0:	eb000b74 	bl	37ba8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   34dd4:	ec5c3f0e 	mrrc	15, 0, r3, ip, cr14
   34dd8:	e3a05000 	mov	r5, #0
   34ddc:	e3022710 	movw	r2, #10000	@ 0x2710
   34de0:	e0933002 	adds	r3, r3, r2
   34de4:	e1a01005 	mov	r1, r5
   34de8:	e1a00003 	mov	r0, r3
   34dec:	e2ac6000 	adc	r6, ip, #0
   34df0:	e1a07005 	mov	r7, r5
   34df4:	ec460f2e 	mcrr	15, 2, r0, r6, cr14
   34df8:	e3a03001 	mov	r3, #1
   34dfc:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
   34e00:	e1a00004 	mov	r0, r4
   34e04:	ebffffbf 	bl	34d08 <CTimer::TuneMsDelay()>
   34e08:	ee1e4f10 	mrc	15, 0, r4, cr14, cr0, {0}
   34e0c:	e3a01101 	mov	r1, #1073741824	@ 0x40000000
   34e10:	e3a02b3e 	mov	r2, #63488	@ 0xf800
   34e14:	e3402124 	movt	r2, #292	@ 0x124
   34e18:	e30a3aab 	movw	r3, #43691	@ 0xaaab
   34e1c:	e34036aa 	movt	r3, #1706	@ 0x6aa
   34e20:	e5916008 	ldr	r6, [r1, #8]
   34e24:	e1560003 	cmp	r6, r3
   34e28:	01540002 	cmpeq	r4, r2
   34e2c:	1a000002 	bne	34e3c <CTimer::Initialize()+0x94>
   34e30:	e3a00001 	mov	r0, #1
   34e34:	e28dd00c 	add	sp, sp, #12
   34e38:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   34e3c:	ebffe661 	bl	2e7c8 <CLogger::Get()>
   34e40:	e59f1034 	ldr	r1, [pc, #52]	@ 34e7c <CTimer::Initialize()+0xd4>
   34e44:	e1a02005 	mov	r2, r5
   34e48:	e88d0050 	stm	sp, {r4, r6}
   34e4c:	e30e35c4 	movw	r3, #58820	@ 0xe5c4
   34e50:	e3403003 	movt	r3, #3
   34e54:	ebffe824 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   34e58:	e3a00001 	mov	r0, #1
   34e5c:	e28dd00c 	add	sp, sp, #12
   34e60:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   34e64:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34e68:	e3401003 	movt	r1, #3
   34e6c:	e3090d7c 	movw	r0, #40316	@ 0x9d7c
   34e70:	e3400003 	movt	r0, #3
   34e74:	e3a02064 	mov	r2, #100	@ 0x64
   34e78:	ebffdbd7 	bl	2bddc <assertion_failed>
   34e7c:	00042b20 	.word	0x00042b20

00034e80 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   34e80:	e5903028 	ldr	r3, [r0, #40]	@ 0x28
   34e84:	e92d4010 	push	{r4, lr}
   34e88:	e3530000 	cmp	r3, #0
   34e8c:	1a000008 	bne	34eb4 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x34>
   34e90:	e3510000 	cmp	r1, #0
   34e94:	e5801028 	str	r1, [r0, #40]	@ 0x28
   34e98:	18bd8010 	popne	{r4, pc}
   34e9c:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34ea0:	e3401003 	movt	r1, #3
   34ea4:	e30e061c 	movw	r0, #58908	@ 0xe61c
   34ea8:	e3400003 	movt	r0, #3
   34eac:	e3a02d09 	mov	r2, #576	@ 0x240
   34eb0:	ebffdbc9 	bl	2bddc <assertion_failed>
   34eb4:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34eb8:	e3401003 	movt	r1, #3
   34ebc:	e30e0600 	movw	r0, #58880	@ 0xe600
   34ec0:	e3400003 	movt	r0, #3
   34ec4:	e300223e 	movw	r2, #574	@ 0x23e
   34ec8:	ebffdbc3 	bl	2bddc <assertion_failed>

00034ecc <CTimer::RegisterPeriodicHandler(void (*)())>:
   34ecc:	e3510000 	cmp	r1, #0
   34ed0:	e92d4010 	push	{r4, lr}
   34ed4:	0a00000a 	beq	34f04 <CTimer::RegisterPeriodicHandler(void (*)())+0x38>
   34ed8:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   34edc:	e3530003 	cmp	r3, #3
   34ee0:	8a00000d 	bhi	34f1c <CTimer::RegisterPeriodicHandler(void (*)())+0x50>
   34ee4:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   34ee8:	e0803103 	add	r3, r0, r3, lsl #2
   34eec:	e583102c 	str	r1, [r3, #44]	@ 0x2c
   34ef0:	f57ff04f 	dsb	sy
   34ef4:	e590303c 	ldr	r3, [r0, #60]	@ 0x3c
   34ef8:	e2833001 	add	r3, r3, #1
   34efc:	e580303c 	str	r3, [r0, #60]	@ 0x3c
   34f00:	e8bd8010 	pop	{r4, pc}
   34f04:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34f08:	e3401003 	movt	r1, #3
   34f0c:	e30e0ad0 	movw	r0, #60112	@ 0xead0
   34f10:	e3400003 	movt	r0, #3
   34f14:	e3002245 	movw	r2, #581	@ 0x245
   34f18:	ebffdbaf 	bl	2bddc <assertion_failed>
   34f1c:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   34f20:	e3401003 	movt	r1, #3
   34f24:	e30e0638 	movw	r0, #58936	@ 0xe638
   34f28:	e3400003 	movt	r0, #3
   34f2c:	e3002247 	movw	r2, #583	@ 0x247
   34f30:	ebffdba9 	bl	2bddc <assertion_failed>

00034f34 <CTimer::SimpleMsDelay(unsigned int)>:
   34f34:	e3500000 	cmp	r0, #0
   34f38:	012fff1e 	bxeq	lr
   34f3c:	e3a03ffa 	mov	r3, #1000	@ 0x3e8
   34f40:	e0000093 	mul	r0, r3, r0
   34f44:	e3500000 	cmp	r0, #0
   34f48:	012fff1e 	bxeq	lr
   34f4c:	e2800001 	add	r0, r0, #1
   34f50:	f57ff06f 	isb	sy
   34f54:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   34f58:	f57ff06f 	isb	sy
   34f5c:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   34f60:	e0433002 	sub	r3, r3, r2
   34f64:	e1500003 	cmp	r0, r3
   34f68:	8afffffa 	bhi	34f58 <CTimer::SimpleMsDelay(unsigned int)+0x24>
   34f6c:	e12fff1e 	bx	lr

00034f70 <CTimer::SimpleusDelay(unsigned int)>:
   34f70:	e3500000 	cmp	r0, #0
   34f74:	012fff1e 	bxeq	lr
   34f78:	e2800001 	add	r0, r0, #1
   34f7c:	f57ff06f 	isb	sy
   34f80:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
   34f84:	f57ff06f 	isb	sy
   34f88:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
   34f8c:	e0433002 	sub	r3, r3, r2
   34f90:	e1500003 	cmp	r0, r3
   34f94:	8afffffa 	bhi	34f84 <CTimer::SimpleusDelay(unsigned int)+0x14>
   34f98:	e12fff1e 	bx	lr

00034f9c <CTimer::IsLeapYear(unsigned int)>:
   34f9c:	e3053c29 	movw	r3, #23593	@ 0x5c29
   34fa0:	e34c328f 	movt	r3, #49807	@ 0xc28f
   34fa4:	e3052c28 	movw	r2, #23592	@ 0x5c28
   34fa8:	e340228f 	movt	r2, #655	@ 0x28f
   34fac:	e0030093 	mul	r3, r3, r0
   34fb0:	e1520163 	cmp	r2, r3, ror #2
   34fb4:	2a000003 	bcs	34fc8 <CTimer::IsLeapYear(unsigned int)+0x2c>
   34fb8:	e3100003 	tst	r0, #3
   34fbc:	03a00001 	moveq	r0, #1
   34fc0:	13a00000 	movne	r0, #0
   34fc4:	e12fff1e 	bx	lr
   34fc8:	e30d270a 	movw	r2, #55050	@ 0xd70a
   34fcc:	e34020a3 	movt	r2, #163	@ 0xa3
   34fd0:	e1520263 	cmp	r2, r3, ror #4
   34fd4:	23a00001 	movcs	r0, #1
   34fd8:	33a00000 	movcc	r0, #0
   34fdc:	e12fff1e 	bx	lr

00034fe0 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   34fe0:	e3500001 	cmp	r0, #1
   34fe4:	0a000003 	beq	34ff8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
   34fe8:	e3023af0 	movw	r3, #10992	@ 0x2af0
   34fec:	e3403004 	movt	r3, #4
   34ff0:	e7930100 	ldr	r0, [r3, r0, lsl #2]
   34ff4:	e12fff1e 	bx	lr
   34ff8:	e3053c29 	movw	r3, #23593	@ 0x5c29
   34ffc:	e34c328f 	movt	r3, #49807	@ 0xc28f
   35000:	e3052c28 	movw	r2, #23592	@ 0x5c28
   35004:	e340228f 	movt	r2, #655	@ 0x28f
   35008:	e0030193 	mul	r3, r3, r1
   3500c:	e1520163 	cmp	r2, r3, ror #2
   35010:	2a000003 	bcs	35024 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x44>
   35014:	e3110003 	tst	r1, #3
   35018:	1afffff2 	bne	34fe8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   3501c:	e3a0001d 	mov	r0, #29
   35020:	e12fff1e 	bx	lr
   35024:	e30d270a 	movw	r2, #55050	@ 0xd70a
   35028:	e34020a3 	movt	r2, #163	@ 0xa3
   3502c:	e1520263 	cmp	r2, r3, ror #4
   35030:	3affffec 	bcc	34fe8 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
   35034:	eafffff8 	b	3501c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x3c>

00035038 <CTimer::Get()>:
   35038:	e3043184 	movw	r3, #16772	@ 0x4184
   3503c:	e3403004 	movt	r3, #4
   35040:	e5930000 	ldr	r0, [r3]
   35044:	e3500000 	cmp	r0, #0
   35048:	112fff1e 	bxne	lr
   3504c:	e30e14ec 	movw	r1, #58604	@ 0xe4ec
   35050:	e3401003 	movt	r1, #3
   35054:	e30b051c 	movw	r0, #46364	@ 0xb51c
   35058:	e3400003 	movt	r0, #3
   3505c:	e3a02fa2 	mov	r2, #648	@ 0x288
   35060:	e92d4010 	push	{r4, lr}
   35064:	ebffdb5c 	bl	2bddc <assertion_failed>

00035068 <memmove>:
   35068:	e1500001 	cmp	r0, r1
   3506c:	9a000002 	bls	3507c <memmove+0x14>
   35070:	e0813002 	add	r3, r1, r2
   35074:	e1530000 	cmp	r3, r0
   35078:	8a000000 	bhi	35080 <memmove+0x18>
   3507c:	ea000220 	b	35904 <memcpy>
   35080:	e3520000 	cmp	r2, #0
   35084:	e080c002 	add	ip, r0, r2
   35088:	012fff1e 	bxeq	lr
   3508c:	e1a0200c 	mov	r2, ip
   35090:	e173c0d1 	ldrsb	ip, [r3, #-1]!
   35094:	e562c001 	strb	ip, [r2, #-1]!
   35098:	e1510003 	cmp	r1, r3
   3509c:	1afffffb 	bne	35090 <memmove+0x28>
   350a0:	e12fff1e 	bx	lr

000350a4 <memcmp>:
   350a4:	e242c001 	sub	ip, r2, #1
   350a8:	e3520000 	cmp	r2, #0
   350ac:	0a00000c 	beq	350e4 <memcmp+0x40>
   350b0:	e2403001 	sub	r3, r0, #1
   350b4:	e2411001 	sub	r1, r1, #1
   350b8:	e080000c 	add	r0, r0, ip
   350bc:	ea000002 	b	350cc <memcmp+0x28>
   350c0:	3a000009 	bcc	350ec <memcmp+0x48>
   350c4:	e1530000 	cmp	r3, r0
   350c8:	0a000005 	beq	350e4 <memcmp+0x40>
   350cc:	e5f3c001 	ldrb	ip, [r3, #1]!
   350d0:	e5f12001 	ldrb	r2, [r1, #1]!
   350d4:	e15c0002 	cmp	ip, r2
   350d8:	9afffff8 	bls	350c0 <memcmp+0x1c>
   350dc:	e3a00001 	mov	r0, #1
   350e0:	e12fff1e 	bx	lr
   350e4:	e3a00000 	mov	r0, #0
   350e8:	e12fff1e 	bx	lr
   350ec:	e3e00000 	mvn	r0, #0
   350f0:	e12fff1e 	bx	lr

000350f4 <strlen>:
   350f4:	e1a03000 	mov	r3, r0
   350f8:	e0d300d1 	ldrsb	r0, [r3], #1
   350fc:	e3500000 	cmp	r0, #0
   35100:	012fff1e 	bxeq	lr
   35104:	e3a00000 	mov	r0, #0
   35108:	e0d320d1 	ldrsb	r2, [r3], #1
   3510c:	e2800001 	add	r0, r0, #1
   35110:	e3520000 	cmp	r2, #0
   35114:	1afffffb 	bne	35108 <strlen+0x14>
   35118:	e12fff1e 	bx	lr

0003511c <strcmp>:
   3511c:	e1d030d0 	ldrsb	r3, [r0]
   35120:	e3530000 	cmp	r3, #0
   35124:	01d120d0 	ldrsbeq	r2, [r1]
   35128:	1a000006 	bne	35148 <strcmp+0x2c>
   3512c:	ea000009 	b	35158 <strcmp+0x3c>
   35130:	e1520003 	cmp	r2, r3
   35134:	ba00000c 	blt	3516c <strcmp+0x50>
   35138:	ca00000d 	bgt	35174 <strcmp+0x58>
   3513c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   35140:	e3530000 	cmp	r3, #0
   35144:	0a00000c 	beq	3517c <strcmp+0x60>
   35148:	e1a0c001 	mov	ip, r1
   3514c:	e0d120d1 	ldrsb	r2, [r1], #1
   35150:	e3520000 	cmp	r2, #0
   35154:	1afffff5 	bne	35130 <strcmp+0x14>
   35158:	e1530002 	cmp	r3, r2
   3515c:	ca000002 	bgt	3516c <strcmp+0x50>
   35160:	a3a00000 	movge	r0, #0
   35164:	b3e00000 	mvnlt	r0, #0
   35168:	e12fff1e 	bx	lr
   3516c:	e3a00001 	mov	r0, #1
   35170:	e12fff1e 	bx	lr
   35174:	e3e00000 	mvn	r0, #0
   35178:	e12fff1e 	bx	lr
   3517c:	e1dc20d1 	ldrsb	r2, [ip, #1]
   35180:	e1530002 	cmp	r3, r2
   35184:	dafffff5 	ble	35160 <strcmp+0x44>
   35188:	eafffff7 	b	3516c <strcmp+0x50>

0003518c <strcasecmp>:
   3518c:	e2400001 	sub	r0, r0, #1
   35190:	ea000009 	b	351bc <strcasecmp+0x30>
   35194:	e0d130d1 	ldrsb	r3, [r1], #1
   35198:	e243c061 	sub	ip, r3, #97	@ 0x61
   3519c:	e35c0019 	cmp	ip, #25
   351a0:	92433020 	subls	r3, r3, #32
   351a4:	9a000001 	bls	351b0 <strcasecmp+0x24>
   351a8:	e3530000 	cmp	r3, #0
   351ac:	0a000012 	beq	351fc <strcasecmp+0x70>
   351b0:	e1520003 	cmp	r2, r3
   351b4:	ca000012 	bgt	35204 <strcasecmp+0x78>
   351b8:	ba000013 	blt	3520c <strcasecmp+0x80>
   351bc:	e1f020d1 	ldrsb	r2, [r0, #1]!
   351c0:	e2423061 	sub	r3, r2, #97	@ 0x61
   351c4:	e3530019 	cmp	r3, #25
   351c8:	92422020 	subls	r2, r2, #32
   351cc:	9afffff0 	bls	35194 <strcasecmp+0x8>
   351d0:	e3520000 	cmp	r2, #0
   351d4:	1affffee 	bne	35194 <strcasecmp+0x8>
   351d8:	e1d130d0 	ldrsb	r3, [r1]
   351dc:	e2431061 	sub	r1, r3, #97	@ 0x61
   351e0:	e3510019 	cmp	r1, #25
   351e4:	8a000004 	bhi	351fc <strcasecmp+0x70>
   351e8:	e2433020 	sub	r3, r3, #32
   351ec:	e1530002 	cmp	r3, r2
   351f0:	d3a00000 	movle	r0, #0
   351f4:	c3e00000 	mvngt	r0, #0
   351f8:	e12fff1e 	bx	lr
   351fc:	e1530002 	cmp	r3, r2
   35200:	aafffff9 	bge	351ec <strcasecmp+0x60>
   35204:	e3a00001 	mov	r0, #1
   35208:	e12fff1e 	bx	lr
   3520c:	e3e00000 	mvn	r0, #0
   35210:	e12fff1e 	bx	lr

00035214 <strncmp>:
   35214:	e3520000 	cmp	r2, #0
   35218:	0a00001b 	beq	3528c <strncmp+0x78>
   3521c:	e92d4010 	push	{r4, lr}
   35220:	ea000007 	b	35244 <strncmp+0x30>
   35224:	e0d1c0d1 	ldrsb	ip, [r1], #1
   35228:	e35c0000 	cmp	ip, #0
   3522c:	0a000009 	beq	35258 <strncmp+0x44>
   35230:	e153000c 	cmp	r3, ip
   35234:	ca00000e 	bgt	35274 <strncmp+0x60>
   35238:	ba00000f 	blt	3527c <strncmp+0x68>
   3523c:	e2522001 	subs	r2, r2, #1
   35240:	0a00000f 	beq	35284 <strncmp+0x70>
   35244:	e1a04000 	mov	r4, r0
   35248:	e0d030d1 	ldrsb	r3, [r0], #1
   3524c:	e1a0e001 	mov	lr, r1
   35250:	e3530000 	cmp	r3, #0
   35254:	1afffff2 	bne	35224 <strncmp+0x10>
   35258:	e1d420d0 	ldrsb	r2, [r4]
   3525c:	e1de30d0 	ldrsb	r3, [lr]
   35260:	e1520003 	cmp	r2, r3
   35264:	ca000002 	bgt	35274 <strncmp+0x60>
   35268:	a3a00000 	movge	r0, #0
   3526c:	b3e00000 	mvnlt	r0, #0
   35270:	e8bd8010 	pop	{r4, pc}
   35274:	e3a00001 	mov	r0, #1
   35278:	e8bd8010 	pop	{r4, pc}
   3527c:	e3e00000 	mvn	r0, #0
   35280:	e8bd8010 	pop	{r4, pc}
   35284:	e1a00002 	mov	r0, r2
   35288:	e8bd8010 	pop	{r4, pc}
   3528c:	e1a00002 	mov	r0, r2
   35290:	e12fff1e 	bx	lr

00035294 <strncasecmp>:
   35294:	e1a0c000 	mov	ip, r0
   35298:	e2520000 	subs	r0, r2, #0
   3529c:	012fff1e 	bxeq	lr
   352a0:	e24cc001 	sub	ip, ip, #1
   352a4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   352a8:	e2432061 	sub	r2, r3, #97	@ 0x61
   352ac:	e3520019 	cmp	r2, #25
   352b0:	92433020 	subls	r3, r3, #32
   352b4:	8a00000c 	bhi	352ec <strncasecmp+0x58>
   352b8:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   352bc:	e0d120d1 	ldrsb	r2, [r1], #1
   352c0:	e242e061 	sub	lr, r2, #97	@ 0x61
   352c4:	e35e0019 	cmp	lr, #25
   352c8:	92422020 	subls	r2, r2, #32
   352cc:	9a000011 	bls	35318 <strncasecmp+0x84>
   352d0:	e3520000 	cmp	r2, #0
   352d4:	1a00000f 	bne	35318 <strncasecmp+0x84>
   352d8:	e1530002 	cmp	r3, r2
   352dc:	ca00001e 	bgt	3535c <strncasecmp+0xc8>
   352e0:	a3a00000 	movge	r0, #0
   352e4:	b3e00000 	mvnlt	r0, #0
   352e8:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   352ec:	e3530000 	cmp	r3, #0
   352f0:	1afffff0 	bne	352b8 <strncasecmp+0x24>
   352f4:	e1d120d0 	ldrsb	r2, [r1]
   352f8:	e2421061 	sub	r1, r2, #97	@ 0x61
   352fc:	e3510019 	cmp	r1, #25
   35300:	92422020 	subls	r2, r2, #32
   35304:	e1530002 	cmp	r3, r2
   35308:	ca000017 	bgt	3536c <strncasecmp+0xd8>
   3530c:	a3a00000 	movge	r0, #0
   35310:	b3e00000 	mvnlt	r0, #0
   35314:	e12fff1e 	bx	lr
   35318:	e1520003 	cmp	r2, r3
   3531c:	ba00000e 	blt	3535c <strncasecmp+0xc8>
   35320:	ca00000f 	bgt	35364 <strncasecmp+0xd0>
   35324:	e2500001 	subs	r0, r0, #1
   35328:	049df004 	popeq	{pc}		@ (ldreq pc, [sp], #4)
   3532c:	e1fc30d1 	ldrsb	r3, [ip, #1]!
   35330:	e2432061 	sub	r2, r3, #97	@ 0x61
   35334:	e3520019 	cmp	r2, #25
   35338:	92433020 	subls	r3, r3, #32
   3533c:	9affffde 	bls	352bc <strncasecmp+0x28>
   35340:	e3530000 	cmp	r3, #0
   35344:	1affffdc 	bne	352bc <strncasecmp+0x28>
   35348:	e1d120d0 	ldrsb	r2, [r1]
   3534c:	e2421061 	sub	r1, r2, #97	@ 0x61
   35350:	e3510019 	cmp	r1, #25
   35354:	92422020 	subls	r2, r2, #32
   35358:	eaffffde 	b	352d8 <strncasecmp+0x44>
   3535c:	e3a00001 	mov	r0, #1
   35360:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   35364:	e3e00000 	mvn	r0, #0
   35368:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   3536c:	e3a00001 	mov	r0, #1
   35370:	e12fff1e 	bx	lr

00035374 <strcpy>:
   35374:	e1d130d0 	ldrsb	r3, [r1]
   35378:	e1a02000 	mov	r2, r0
   3537c:	e3530000 	cmp	r3, #0
   35380:	0a000003 	beq	35394 <strcpy+0x20>
   35384:	e4c23001 	strb	r3, [r2], #1
   35388:	e1f130d1 	ldrsb	r3, [r1, #1]!
   3538c:	e3530000 	cmp	r3, #0
   35390:	1afffffb 	bne	35384 <strcpy+0x10>
   35394:	e3a03000 	mov	r3, #0
   35398:	e5c23000 	strb	r3, [r2]
   3539c:	e12fff1e 	bx	lr

000353a0 <strncpy>:
   353a0:	e3520000 	cmp	r2, #0
   353a4:	012fff1e 	bxeq	lr
   353a8:	e2411001 	sub	r1, r1, #1
   353ac:	e1a0c000 	mov	ip, r0
   353b0:	ea000002 	b	353c0 <strncpy+0x20>
   353b4:	e2522001 	subs	r2, r2, #1
   353b8:	e4cc3001 	strb	r3, [ip], #1
   353bc:	012fff1e 	bxeq	lr
   353c0:	e1f130d1 	ldrsb	r3, [r1, #1]!
   353c4:	e3530000 	cmp	r3, #0
   353c8:	1afffff9 	bne	353b4 <strncpy+0x14>
   353cc:	e5cc3000 	strb	r3, [ip]
   353d0:	e12fff1e 	bx	lr

000353d4 <strcat>:
   353d4:	e1d030d0 	ldrsb	r3, [r0]
   353d8:	e3530000 	cmp	r3, #0
   353dc:	e1a03000 	mov	r3, r0
   353e0:	0a000002 	beq	353f0 <strcat+0x1c>
   353e4:	e1f320d1 	ldrsb	r2, [r3, #1]!
   353e8:	e3520000 	cmp	r2, #0
   353ec:	1afffffc 	bne	353e4 <strcat+0x10>
   353f0:	e1d120d0 	ldrsb	r2, [r1]
   353f4:	e3520000 	cmp	r2, #0
   353f8:	0a000003 	beq	3540c <strcat+0x38>
   353fc:	e4c32001 	strb	r2, [r3], #1
   35400:	e1f120d1 	ldrsb	r2, [r1, #1]!
   35404:	e3520000 	cmp	r2, #0
   35408:	1afffffb 	bne	353fc <strcat+0x28>
   3540c:	e3a02000 	mov	r2, #0
   35410:	e5c32000 	strb	r2, [r3]
   35414:	e12fff1e 	bx	lr

00035418 <strchr>:
   35418:	e1d030d0 	ldrsb	r3, [r0]
   3541c:	e3530000 	cmp	r3, #0
   35420:	0a000004 	beq	35438 <strchr+0x20>
   35424:	e1530001 	cmp	r3, r1
   35428:	012fff1e 	bxeq	lr
   3542c:	e1f030d1 	ldrsb	r3, [r0, #1]!
   35430:	e3530000 	cmp	r3, #0
   35434:	1afffffa 	bne	35424 <strchr+0xc>
   35438:	e1a00003 	mov	r0, r3
   3543c:	e12fff1e 	bx	lr

00035440 <strstr>:
   35440:	e92d4010 	push	{r4, lr}
   35444:	e1d140d0 	ldrsb	r4, [r1]
   35448:	e1d030d0 	ldrsb	r3, [r0]
   3544c:	e3530000 	cmp	r3, #0
   35450:	1a000002 	bne	35460 <strstr+0x20>
   35454:	e3540000 	cmp	r4, #0
   35458:	13a00000 	movne	r0, #0
   3545c:	e8bd8010 	pop	{r4, pc}
   35460:	e3540000 	cmp	r4, #0
   35464:	08bd8010 	popeq	{r4, pc}
   35468:	e2402001 	sub	r2, r0, #1
   3546c:	e1a0e001 	mov	lr, r1
   35470:	e1a03004 	mov	r3, r4
   35474:	ea000002 	b	35484 <strstr+0x44>
   35478:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   3547c:	e3530000 	cmp	r3, #0
   35480:	08bd8010 	popeq	{r4, pc}
   35484:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   35488:	e15c0003 	cmp	ip, r3
   3548c:	0afffff9 	beq	35478 <strstr+0x38>
   35490:	e1f030d1 	ldrsb	r3, [r0, #1]!
   35494:	e3530000 	cmp	r3, #0
   35498:	1afffff2 	bne	35468 <strstr+0x28>
   3549c:	e1a00003 	mov	r0, r3
   354a0:	e8bd8010 	pop	{r4, pc}

000354a4 <strtok_r>:
   354a4:	e92d4030 	push	{r4, r5, lr}
   354a8:	e3500000 	cmp	r0, #0
   354ac:	e1a05001 	mov	r5, r1
   354b0:	e1a04002 	mov	r4, r2
   354b4:	0a00002d 	beq	35570 <strtok_r+0xcc>
   354b8:	e1d0c0d0 	ldrsb	ip, [r0]
   354bc:	e35c0000 	cmp	ip, #0
   354c0:	0a000026 	beq	35560 <strtok_r+0xbc>
   354c4:	e1d510d0 	ldrsb	r1, [r5]
   354c8:	e2802001 	add	r2, r0, #1
   354cc:	e3510000 	cmp	r1, #0
   354d0:	0a00000a 	beq	35500 <strtok_r+0x5c>
   354d4:	e1a0e005 	mov	lr, r5
   354d8:	e1a03001 	mov	r3, r1
   354dc:	ea000002 	b	354ec <strtok_r+0x48>
   354e0:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   354e4:	e3530000 	cmp	r3, #0
   354e8:	0a000004 	beq	35500 <strtok_r+0x5c>
   354ec:	e153000c 	cmp	r3, ip
   354f0:	1afffffa 	bne	354e0 <strtok_r+0x3c>
   354f4:	e1a00002 	mov	r0, r2
   354f8:	e0d2c0d1 	ldrsb	ip, [r2], #1
   354fc:	eafffff4 	b	354d4 <strtok_r+0x30>
   35500:	e35c0000 	cmp	ip, #0
   35504:	0a000015 	beq	35560 <strtok_r+0xbc>
   35508:	e1a02000 	mov	r2, r0
   3550c:	e3510000 	cmp	r1, #0
   35510:	1a000006 	bne	35530 <strtok_r+0x8c>
   35514:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   35518:	e35c0000 	cmp	ip, #0
   3551c:	1afffffc 	bne	35514 <strtok_r+0x70>
   35520:	ea00000c 	b	35558 <strtok_r+0xb4>
   35524:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
   35528:	e35c0000 	cmp	ip, #0
   3552c:	0a000009 	beq	35558 <strtok_r+0xb4>
   35530:	e1a0e005 	mov	lr, r5
   35534:	e1a03001 	mov	r3, r1
   35538:	ea000002 	b	35548 <strtok_r+0xa4>
   3553c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
   35540:	e3530000 	cmp	r3, #0
   35544:	0afffff6 	beq	35524 <strtok_r+0x80>
   35548:	e153000c 	cmp	r3, ip
   3554c:	1afffffa 	bne	3553c <strtok_r+0x98>
   35550:	e3a03000 	mov	r3, #0
   35554:	e4c23001 	strb	r3, [r2], #1
   35558:	e5842000 	str	r2, [r4]
   3555c:	e8bd8030 	pop	{r4, r5, pc}
   35560:	e3a03000 	mov	r3, #0
   35564:	e5843000 	str	r3, [r4]
   35568:	e3a00000 	mov	r0, #0
   3556c:	e8bd8030 	pop	{r4, r5, pc}
   35570:	e5920000 	ldr	r0, [r2]
   35574:	e3500000 	cmp	r0, #0
   35578:	1affffce 	bne	354b8 <strtok_r+0x14>
   3557c:	eafffff9 	b	35568 <strtok_r+0xc4>

00035580 <strtoul>:
   35580:	e92d4070 	push	{r4, r5, r6, lr}
   35584:	e2515000 	subs	r5, r1, #0
   35588:	e2423002 	sub	r3, r2, #2
   3558c:	15850000 	strne	r0, [r5]
   35590:	e3520000 	cmp	r2, #0
   35594:	13530022 	cmpne	r3, #34	@ 0x22
   35598:	8a000049 	bhi	356c4 <strtoul+0x144>
   3559c:	e1d030d0 	ldrsb	r3, [r0]
   355a0:	e1a0e000 	mov	lr, r0
   355a4:	e2800001 	add	r0, r0, #1
   355a8:	e243c009 	sub	ip, r3, #9
   355ac:	e3530020 	cmp	r3, #32
   355b0:	0afffff9 	beq	3559c <strtoul+0x1c>
   355b4:	e6efc07c 	uxtb	ip, ip
   355b8:	e35c0004 	cmp	ip, #4
   355bc:	9afffff6 	bls	3559c <strtoul+0x1c>
   355c0:	e353002b 	cmp	r3, #43	@ 0x2b
   355c4:	0a00002c 	beq	3567c <strtoul+0xfc>
   355c8:	e353002d 	cmp	r3, #45	@ 0x2d
   355cc:	03a06001 	moveq	r6, #1
   355d0:	13a06000 	movne	r6, #0
   355d4:	01de30d1 	ldrsbeq	r3, [lr, #1]
   355d8:	01a0e000 	moveq	lr, r0
   355dc:	e3530030 	cmp	r3, #48	@ 0x30
   355e0:	0a00002a 	beq	35690 <strtoul+0x110>
   355e4:	e3520000 	cmp	r2, #0
   355e8:	03a0200a 	moveq	r2, #10
   355ec:	e353002f 	cmp	r3, #47	@ 0x2f
   355f0:	e1a0c003 	mov	ip, r3
   355f4:	da000030 	ble	356bc <strtoul+0x13c>
   355f8:	e3a04001 	mov	r4, #1
   355fc:	e3a01000 	mov	r1, #0
   35600:	ea00000d 	b	3563c <strtoul+0xbc>
   35604:	e35c0040 	cmp	ip, #64	@ 0x40
   35608:	ca00000f 	bgt	3564c <strtoul+0xcc>
   3560c:	e24cc030 	sub	ip, ip, #48	@ 0x30
   35610:	e15c0002 	cmp	ip, r2
   35614:	aa000010 	bge	3565c <strtoul+0xdc>
   35618:	e020c291 	mla	r0, r1, r2, ip
   3561c:	e3a04000 	mov	r4, #0
   35620:	e1500001 	cmp	r0, r1
   35624:	3a00002c 	bcc	356dc <strtoul+0x15c>
   35628:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   3562c:	e1a01000 	mov	r1, r0
   35630:	e1a0300c 	mov	r3, ip
   35634:	e35c002f 	cmp	ip, #47	@ 0x2f
   35638:	da00002b 	ble	356ec <strtoul+0x16c>
   3563c:	e2433061 	sub	r3, r3, #97	@ 0x61
   35640:	e3530019 	cmp	r3, #25
   35644:	924cc020 	subls	ip, ip, #32
   35648:	8affffed 	bhi	35604 <strtoul+0x84>
   3564c:	e24cc007 	sub	ip, ip, #7
   35650:	e24cc030 	sub	ip, ip, #48	@ 0x30
   35654:	e15c0002 	cmp	ip, r2
   35658:	baffffee 	blt	35618 <strtoul+0x98>
   3565c:	e2243001 	eor	r3, r4, #1
   35660:	e1a00001 	mov	r0, r1
   35664:	e0033006 	and	r3, r3, r6
   35668:	e3550000 	cmp	r5, #0
   3566c:	1585e000 	strne	lr, [r5]
   35670:	e3530000 	cmp	r3, #0
   35674:	12600000 	rsbne	r0, r0, #0
   35678:	e8bd8070 	pop	{r4, r5, r6, pc}
   3567c:	e1de30d1 	ldrsb	r3, [lr, #1]
   35680:	e3a06000 	mov	r6, #0
   35684:	e1a0e000 	mov	lr, r0
   35688:	e3530030 	cmp	r3, #48	@ 0x30
   3568c:	1affffd4 	bne	355e4 <strtoul+0x64>
   35690:	e1de30d1 	ldrsb	r3, [lr, #1]
   35694:	e28e0001 	add	r0, lr, #1
   35698:	e3c31020 	bic	r1, r3, #32
   3569c:	e3510058 	cmp	r1, #88	@ 0x58
   356a0:	1a000009 	bne	356cc <strtoul+0x14c>
   356a4:	e3d23010 	bics	r3, r2, #16
   356a8:	1a000005 	bne	356c4 <strtoul+0x144>
   356ac:	e1de30d2 	ldrsb	r3, [lr, #2]
   356b0:	e3a02010 	mov	r2, #16
   356b4:	e28ee002 	add	lr, lr, #2
   356b8:	eaffffcb 	b	355ec <strtoul+0x6c>
   356bc:	e3550000 	cmp	r5, #0
   356c0:	1585e000 	strne	lr, [r5]
   356c4:	e3a00000 	mov	r0, #0
   356c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   356cc:	e3520000 	cmp	r2, #0
   356d0:	e1a0e000 	mov	lr, r0
   356d4:	03a02008 	moveq	r2, #8
   356d8:	eaffffc3 	b	355ec <strtoul+0x6c>
   356dc:	e1550004 	cmp	r5, r4
   356e0:	e3e00000 	mvn	r0, #0
   356e4:	1585e000 	strne	lr, [r5]
   356e8:	e8bd8070 	pop	{r4, r5, r6, pc}
   356ec:	e3a03001 	mov	r3, #1
   356f0:	eaffffdb 	b	35664 <strtoul+0xe4>

000356f4 <strtoull>:
   356f4:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   356f8:	e2514000 	subs	r4, r1, #0
   356fc:	e2423002 	sub	r3, r2, #2
   35700:	15840000 	strne	r0, [r4]
   35704:	e3520000 	cmp	r2, #0
   35708:	13530022 	cmpne	r3, #34	@ 0x22
   3570c:	8a000048 	bhi	35834 <strtoull+0x140>
   35710:	e1d030d0 	ldrsb	r3, [r0]
   35714:	e1a0e000 	mov	lr, r0
   35718:	e2800001 	add	r0, r0, #1
   3571c:	e243c009 	sub	ip, r3, #9
   35720:	e3530020 	cmp	r3, #32
   35724:	0afffff9 	beq	35710 <strtoull+0x1c>
   35728:	e6efc07c 	uxtb	ip, ip
   3572c:	e35c0004 	cmp	ip, #4
   35730:	9afffff6 	bls	35710 <strtoull+0x1c>
   35734:	e353002b 	cmp	r3, #43	@ 0x2b
   35738:	0a00002b 	beq	357ec <strtoull+0xf8>
   3573c:	e353002d 	cmp	r3, #45	@ 0x2d
   35740:	03a07001 	moveq	r7, #1
   35744:	13a07000 	movne	r7, #0
   35748:	01de30d1 	ldrsbeq	r3, [lr, #1]
   3574c:	01a0e000 	moveq	lr, r0
   35750:	e3530030 	cmp	r3, #48	@ 0x30
   35754:	0a000029 	beq	35800 <strtoull+0x10c>
   35758:	e3520000 	cmp	r2, #0
   3575c:	03a0200a 	moveq	r2, #10
   35760:	e353002f 	cmp	r3, #47	@ 0x2f
   35764:	e1a0c003 	mov	ip, r3
   35768:	da00002f 	ble	3582c <strtoull+0x138>
   3576c:	e3a05000 	mov	r5, #0
   35770:	e3a09001 	mov	r9, #1
   35774:	e1a06005 	mov	r6, r5
   35778:	e1a08fc2 	asr	r8, r2, #31
   3577c:	ea000014 	b	357d4 <strtoull+0xe0>
   35780:	e35c0040 	cmp	ip, #64	@ 0x40
   35784:	ca000016 	bgt	357e4 <strtoull+0xf0>
   35788:	e0010692 	mul	r1, r2, r6
   3578c:	e24cc030 	sub	ip, ip, #48	@ 0x30
   35790:	e0830592 	umull	r0, r3, r2, r5
   35794:	e15c0002 	cmp	ip, r2
   35798:	e0211895 	mla	r1, r5, r8, r1
   3579c:	aa000027 	bge	35840 <strtoull+0x14c>
   357a0:	e09c0000 	adds	r0, ip, r0
   357a4:	e0811003 	add	r1, r1, r3
   357a8:	e0a11fcc 	adc	r1, r1, ip, asr #31
   357ac:	e1500005 	cmp	r0, r5
   357b0:	e0d16006 	sbcs	r6, r1, r6
   357b4:	3a000030 	bcc	3587c <strtoull+0x188>
   357b8:	e1fec0d1 	ldrsb	ip, [lr, #1]!
   357bc:	e3a09000 	mov	r9, #0
   357c0:	e1a05000 	mov	r5, r0
   357c4:	e1a06001 	mov	r6, r1
   357c8:	e1a0300c 	mov	r3, ip
   357cc:	e35c002f 	cmp	ip, #47	@ 0x2f
   357d0:	da00002e 	ble	35890 <strtoull+0x19c>
   357d4:	e2433061 	sub	r3, r3, #97	@ 0x61
   357d8:	e3530019 	cmp	r3, #25
   357dc:	924cc020 	subls	ip, ip, #32
   357e0:	8affffe6 	bhi	35780 <strtoull+0x8c>
   357e4:	e24cc007 	sub	ip, ip, #7
   357e8:	eaffffe6 	b	35788 <strtoull+0x94>
   357ec:	e1de30d1 	ldrsb	r3, [lr, #1]
   357f0:	e3a07000 	mov	r7, #0
   357f4:	e1a0e000 	mov	lr, r0
   357f8:	e3530030 	cmp	r3, #48	@ 0x30
   357fc:	1affffd5 	bne	35758 <strtoull+0x64>
   35800:	e1de30d1 	ldrsb	r3, [lr, #1]
   35804:	e28e0001 	add	r0, lr, #1
   35808:	e3c31020 	bic	r1, r3, #32
   3580c:	e3510058 	cmp	r1, #88	@ 0x58
   35810:	1a000015 	bne	3586c <strtoull+0x178>
   35814:	e3d23010 	bics	r3, r2, #16
   35818:	1a000005 	bne	35834 <strtoull+0x140>
   3581c:	e1de30d2 	ldrsb	r3, [lr, #2]
   35820:	e3a02010 	mov	r2, #16
   35824:	e28ee002 	add	lr, lr, #2
   35828:	eaffffcc 	b	35760 <strtoull+0x6c>
   3582c:	e3540000 	cmp	r4, #0
   35830:	1584e000 	strne	lr, [r4]
   35834:	e3a00000 	mov	r0, #0
   35838:	e1a01000 	mov	r1, r0
   3583c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   35840:	e2293001 	eor	r3, r9, #1
   35844:	e1a00005 	mov	r0, r5
   35848:	e1a01006 	mov	r1, r6
   3584c:	e0033007 	and	r3, r3, r7
   35850:	e3540000 	cmp	r4, #0
   35854:	1584e000 	strne	lr, [r4]
   35858:	e3530000 	cmp	r3, #0
   3585c:	08bd83f0 	popeq	{r4, r5, r6, r7, r8, r9, pc}
   35860:	e2700000 	rsbs	r0, r0, #0
   35864:	e2e11000 	rsc	r1, r1, #0
   35868:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   3586c:	e3520000 	cmp	r2, #0
   35870:	e1a0e000 	mov	lr, r0
   35874:	03a02008 	moveq	r2, #8
   35878:	eaffffb8 	b	35760 <strtoull+0x6c>
   3587c:	e3540000 	cmp	r4, #0
   35880:	e3a01000 	mov	r1, #0
   35884:	1584e000 	strne	lr, [r4]
   35888:	e3e00000 	mvn	r0, #0
   3588c:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   35890:	e3a03001 	mov	r3, #1
   35894:	eaffffec 	b	3584c <strtoull+0x158>

00035898 <atoi>:
   35898:	e3a0200a 	mov	r2, #10
   3589c:	e3a01000 	mov	r1, #0
   358a0:	eaffff36 	b	35580 <strtoul>

000358a4 <char2int>:
   358a4:	e12fff1e 	bx	lr

000358a8 <memset>:
   358a8:	e3100003 	tst	r0, #3
   358ac:	1a00000d 	bne	358e8 <memset+0x40>
   358b0:	e3520010 	cmp	r2, #16
   358b4:	3a00000b 	bcc	358e8 <memset+0x40>
   358b8:	e1813401 	orr	r3, r1, r1, lsl #8
   358bc:	e183c803 	orr	ip, r3, r3, lsl #16
   358c0:	e1a03000 	mov	r3, r0
   358c4:	e583c000 	str	ip, [r3]
   358c8:	e583c004 	str	ip, [r3, #4]
   358cc:	e583c008 	str	ip, [r3, #8]
   358d0:	e583c00c 	str	ip, [r3, #12]
   358d4:	e2833010 	add	r3, r3, #16
   358d8:	e2422010 	sub	r2, r2, #16
   358dc:	e352000f 	cmp	r2, #15
   358e0:	8afffff7 	bhi	358c4 <memset+0x1c>
   358e4:	ea000000 	b	358ec <memset+0x44>
   358e8:	e1a03000 	mov	r3, r0
   358ec:	e3520000 	cmp	r2, #0
   358f0:	012fff1e 	bxeq	lr
   358f4:	e4c31001 	strb	r1, [r3], #1
   358f8:	e2522001 	subs	r2, r2, #1
   358fc:	1afffffc 	bne	358f4 <memset+0x4c>
   35900:	e12fff1e 	bx	lr

00035904 <memcpy>:
   35904:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
   35908:	e352007f 	cmp	r2, #127	@ 0x7f
   3590c:	9a00000b 	bls	35940 <memcpy+0x3c>
   35910:	e3110003 	tst	r1, #3
   35914:	1a000009 	bne	35940 <memcpy+0x3c>
   35918:	e3100003 	tst	r0, #3
   3591c:	1a000007 	bne	35940 <memcpy+0x3c>
   35920:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
   35924:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
   35928:	e2422020 	sub	r2, r2, #32
   3592c:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
   35930:	f5d1f040 	pld	[r1, #64]	@ 0x40
   35934:	e352001f 	cmp	r2, #31
   35938:	8afffff9 	bhi	35924 <memcpy+0x20>
   3593c:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
   35940:	e3520000 	cmp	r2, #0
   35944:	0a000003 	beq	35958 <memcpy+0x54>
   35948:	e4d13001 	ldrb	r3, [r1], #1
   3594c:	e2522001 	subs	r2, r2, #1
   35950:	e4c03001 	strb	r3, [r0], #1
   35954:	1afffffb 	bne	35948 <memcpy+0x44>
   35958:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
   3595c:	e12fff1e 	bx	lr

00035960 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   35960:	e12fff1e 	bx	lr

00035964 <CVirtualGPIOPin::~CVirtualGPIOPin()>:
   35964:	e92d4010 	push	{r4, lr}
   35968:	e3a01014 	mov	r1, #20
   3596c:	e1a04000 	mov	r4, r0
   35970:	eb000203 	bl	36184 <operator delete(void*, unsigned int)>
   35974:	e1a00004 	mov	r0, r4
   35978:	e8bd8010 	pop	{r4, pc}

0003597c <CVirtualGPIOPin::Write(unsigned int)>:
   3597c:	e92d4070 	push	{r4, r5, r6, lr}
   35980:	e1a05001 	mov	r5, r1
   35984:	e5d03004 	ldrb	r3, [r0, #4]
   35988:	e5901008 	ldr	r1, [r0, #8]
   3598c:	e24dd028 	sub	sp, sp, #40	@ 0x28
   35990:	e3530000 	cmp	r3, #0
   35994:	0a000012 	beq	359e4 <CVirtualGPIOPin::Write(unsigned int)+0x68>
   35998:	e3510000 	cmp	r1, #0
   3599c:	1a000032 	bne	35a6c <CVirtualGPIOPin::Write(unsigned int)+0xf0>
   359a0:	e28d000c 	add	r0, sp, #12
   359a4:	ebffd92d 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   359a8:	e3a03014 	mov	r3, #20
   359ac:	e3a01008 	mov	r1, #8
   359b0:	e08d2003 	add	r2, sp, r3
   359b4:	e58d1000 	str	r1, [sp]
   359b8:	e28d000c 	add	r0, sp, #12
   359bc:	e3a01082 	mov	r1, #130	@ 0x82
   359c0:	e58d1020 	str	r1, [sp, #32]
   359c4:	e3081041 	movw	r1, #32833	@ 0x8041
   359c8:	e3401003 	movt	r1, #3
   359cc:	e58d5024 	str	r5, [sp, #36]	@ 0x24
   359d0:	ebffd974 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   359d4:	e28d000c 	add	r0, sp, #12
   359d8:	ebffd927 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   359dc:	e28dd028 	add	sp, sp, #40	@ 0x28
   359e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   359e4:	e1853001 	orr	r3, r5, r1
   359e8:	e3530001 	cmp	r3, #1
   359ec:	8afffffa 	bhi	359dc <CVirtualGPIOPin::Write(unsigned int)+0x60>
   359f0:	e3046188 	movw	r6, #16776	@ 0x4188
   359f4:	e3406004 	movt	r6, #4
   359f8:	e5963000 	ldr	r3, [r6]
   359fc:	e3530000 	cmp	r3, #0
   35a00:	0afffff5 	beq	359dc <CVirtualGPIOPin::Write(unsigned int)+0x60>
   35a04:	e1a04000 	mov	r4, r0
   35a08:	e5960004 	ldr	r0, [r6, #4]
   35a0c:	e3500000 	cmp	r0, #0
   35a10:	1a000020 	bne	35a98 <CVirtualGPIOPin::Write(unsigned int)+0x11c>
   35a14:	e1d421b0 	ldrh	r2, [r4, #16]
   35a18:	e1d431b2 	ldrh	r3, [r4, #18]
   35a1c:	e584500c 	str	r5, [r4, #12]
   35a20:	e0421003 	sub	r1, r2, r3
   35a24:	e6bf1071 	sxth	r1, r1
   35a28:	e3510000 	cmp	r1, #0
   35a2c:	da000013 	ble	35a80 <CVirtualGPIOPin::Write(unsigned int)+0x104>
   35a30:	e3550000 	cmp	r5, #0
   35a34:	1a000006 	bne	35a54 <CVirtualGPIOPin::Write(unsigned int)+0xd8>
   35a38:	e2833001 	add	r3, r3, #1
   35a3c:	e6ff3073 	uxth	r3, r3
   35a40:	e1c431b2 	strh	r3, [r4, #18]
   35a44:	e5940008 	ldr	r0, [r4, #8]
   35a48:	e1833802 	orr	r3, r3, r2, lsl #16
   35a4c:	e5961000 	ldr	r1, [r6]
   35a50:	e7813100 	str	r3, [r1, r0, lsl #2]
   35a54:	e5963004 	ldr	r3, [r6, #4]
   35a58:	e3530000 	cmp	r3, #0
   35a5c:	0affffde 	beq	359dc <CVirtualGPIOPin::Write(unsigned int)+0x60>
   35a60:	e28dd028 	add	sp, sp, #40	@ 0x28
   35a64:	e8bd4070 	pop	{r4, r5, r6, lr}
   35a68:	ea0007ef 	b	37a2c <LeaveCritical>
   35a6c:	e3021b28 	movw	r1, #11048	@ 0x2b28
   35a70:	e3401004 	movt	r1, #4
   35a74:	e3a0205b 	mov	r2, #91	@ 0x5b
   35a78:	e2810014 	add	r0, r1, #20
   35a7c:	ebffd8d6 	bl	2bddc <assertion_failed>
   35a80:	e3550000 	cmp	r5, #0
   35a84:	0afffff2 	beq	35a54 <CVirtualGPIOPin::Write(unsigned int)+0xd8>
   35a88:	e2822001 	add	r2, r2, #1
   35a8c:	e6ff2072 	uxth	r2, r2
   35a90:	e1c421b0 	strh	r2, [r4, #16]
   35a94:	eaffffea 	b	35a44 <CVirtualGPIOPin::Write(unsigned int)+0xc8>
   35a98:	eb0007b8 	bl	37980 <EnterCritical>
   35a9c:	eaffffdc 	b	35a14 <CVirtualGPIOPin::Write(unsigned int)+0x98>

00035aa0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)>:
   35aa0:	e92d4070 	push	{r4, r5, r6, lr}
   35aa4:	e1a04000 	mov	r4, r0
   35aa8:	e59f313c 	ldr	r3, [pc, #316]	@ 35bec <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x14c>
   35aac:	e3a00000 	mov	r0, #0
   35ab0:	e3510001 	cmp	r1, #1
   35ab4:	91a0c002 	movls	ip, r2
   35ab8:	8382c001 	orrhi	ip, r2, #1
   35abc:	e24dd020 	sub	sp, sp, #32
   35ac0:	e15c0000 	cmp	ip, r0
   35ac4:	e5840010 	str	r0, [r4, #16]
   35ac8:	e5843000 	str	r3, [r4]
   35acc:	e5c42004 	strb	r2, [r4, #4]
   35ad0:	e5841008 	str	r1, [r4, #8]
   35ad4:	0a000002 	beq	35ae4 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x44>
   35ad8:	e1a00004 	mov	r0, r4
   35adc:	e28dd020 	add	sp, sp, #32
   35ae0:	e8bd8070 	pop	{r4, r5, r6, pc}
   35ae4:	e3045188 	movw	r5, #16776	@ 0x4188
   35ae8:	e3405004 	movt	r5, #4
   35aec:	e5950004 	ldr	r0, [r5, #4]
   35af0:	e3500000 	cmp	r0, #0
   35af4:	1a00000e 	bne	35b34 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x94>
   35af8:	e5956000 	ldr	r6, [r5]
   35afc:	e3560000 	cmp	r6, #0
   35b00:	0a00000f 	beq	35b44 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xa4>
   35b04:	e5943008 	ldr	r3, [r4, #8]
   35b08:	e3a02000 	mov	r2, #0
   35b0c:	e7862103 	str	r2, [r6, r3, lsl #2]
   35b10:	e5953004 	ldr	r3, [r5, #4]
   35b14:	e3530000 	cmp	r3, #0
   35b18:	1a000024 	bne	35bb0 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x110>
   35b1c:	e1a00004 	mov	r0, r4
   35b20:	e3a01000 	mov	r1, #0
   35b24:	ebffff94 	bl	3597c <CVirtualGPIOPin::Write(unsigned int)>
   35b28:	e1a00004 	mov	r0, r4
   35b2c:	e28dd020 	add	sp, sp, #32
   35b30:	e8bd8070 	pop	{r4, r5, r6, pc}
   35b34:	eb000791 	bl	37980 <EnterCritical>
   35b38:	e5956000 	ldr	r6, [r5]
   35b3c:	e3560000 	cmp	r6, #0
   35b40:	1affffef 	bne	35b04 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   35b44:	e3a00001 	mov	r0, #1
   35b48:	eb00075d 	bl	378c4 <CMemorySystem::GetCoherentPage(unsigned int)>
   35b4c:	e1a01006 	mov	r1, r6
   35b50:	e5850000 	str	r0, [r5]
   35b54:	e28d0008 	add	r0, sp, #8
   35b58:	ebffd8c0 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   35b5c:	e5953000 	ldr	r3, [r5]
   35b60:	e28d0008 	add	r0, sp, #8
   35b64:	e3081020 	movw	r1, #32800	@ 0x8020
   35b68:	e3401004 	movt	r1, #4
   35b6c:	e3833103 	orr	r3, r3, #-1073741824	@ 0xc0000000
   35b70:	e58d301c 	str	r3, [sp, #28]
   35b74:	e3a03004 	mov	r3, #4
   35b78:	e58d3000 	str	r3, [sp]
   35b7c:	e3a03010 	mov	r3, #16
   35b80:	e08d2003 	add	r2, sp, r3
   35b84:	ebffd907 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   35b88:	e3500000 	cmp	r0, #0
   35b8c:	0a000009 	beq	35bb8 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x118>
   35b90:	e28d0008 	add	r0, sp, #8
   35b94:	ebffd8b8 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   35b98:	e5956000 	ldr	r6, [r5]
   35b9c:	e3560000 	cmp	r6, #0
   35ba0:	1affffd7 	bne	35b04 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x64>
   35ba4:	e5953004 	ldr	r3, [r5, #4]
   35ba8:	e3530000 	cmp	r3, #0
   35bac:	0affffda 	beq	35b1c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   35bb0:	eb00079d 	bl	37a2c <LeaveCritical>
   35bb4:	eaffffd8 	b	35b1c <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0x7c>
   35bb8:	e3a03010 	mov	r3, #16
   35bbc:	e58d0000 	str	r0, [sp]
   35bc0:	e1a01003 	mov	r1, r3
   35bc4:	e28d2010 	add	r2, sp, #16
   35bc8:	e3401004 	movt	r1, #4
   35bcc:	e28d0008 	add	r0, sp, #8
   35bd0:	ebffd8f4 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   35bd4:	e3500000 	cmp	r0, #0
   35bd8:	05850000 	streq	r0, [r5]
   35bdc:	159d301c 	ldrne	r3, [sp, #28]
   35be0:	13c33103 	bicne	r3, r3, #-1073741824	@ 0xc0000000
   35be4:	15853000 	strne	r3, [r5]
   35be8:	eaffffe8 	b	35b90 <CVirtualGPIOPin::CVirtualGPIOPin(unsigned int, bool)+0xf0>
   35bec:	00042b50 	.word	0x00042b50

00035bf0 <CVirtualGPIOPin::Invert()>:
   35bf0:	e590100c 	ldr	r1, [r0, #12]
   35bf4:	e2211001 	eor	r1, r1, #1
   35bf8:	eaffff5f 	b	3597c <CVirtualGPIOPin::Write(unsigned int)>

00035bfc <_GLOBAL__sub_I__ZN15CVirtualGPIOPin18s_nGPIOBaseAddressE>:
   35bfc:	e3043188 	movw	r3, #16776	@ 0x4188
   35c00:	e3403004 	movt	r3, #4
   35c04:	e3a02000 	mov	r2, #0
   35c08:	e5832004 	str	r2, [r3, #4]
   35c0c:	e12fff1e 	bx	lr

00035c10 <ChainBootStub(void const*, unsigned int)>:
   35c10:	e2811003 	add	r1, r1, #3
   35c14:	e1b01121 	lsrs	r1, r1, #2
   35c18:	0a000007 	beq	35c3c <ChainBootStub(void const*, unsigned int)+0x2c>
   35c1c:	e1a03000 	mov	r3, r0
   35c20:	e0800101 	add	r0, r0, r1, lsl #2
   35c24:	e263c902 	rsb	ip, r3, #32768	@ 0x8000
   35c28:	e083200c 	add	r2, r3, ip
   35c2c:	e4931004 	ldr	r1, [r3], #4
   35c30:	e1530000 	cmp	r3, r0
   35c34:	e5821000 	str	r1, [r2]
   35c38:	1afffffa 	bne	35c28 <ChainBootStub(void const*, unsigned int)+0x18>
   35c3c:	e3a03000 	mov	r3, #0
   35c40:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   35c44:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   35c48:	f57ff04f 	dsb	sy
   35c4c:	f57ff06f 	isb	sy
   35c50:	e3a03902 	mov	r3, #32768	@ 0x8000
   35c54:	e12fff13 	bx	r3

00035c58 <EnableChainBoot>:
   35c58:	e3043190 	movw	r3, #16784	@ 0x4190
   35c5c:	e3403004 	movt	r3, #4
   35c60:	e1a0c001 	mov	ip, r1
   35c64:	e92d4010 	push	{r4, lr}
   35c68:	e3a02b01 	mov	r2, #1024	@ 0x400
   35c6c:	e8831001 	stm	r3, {r0, ip}
   35c70:	e3051c10 	movw	r1, #23568	@ 0x5c10
   35c74:	e3401003 	movt	r1, #3
   35c78:	e3a00b1f 	mov	r0, #31744	@ 0x7c00
   35c7c:	ebffff20 	bl	35904 <memcpy>
   35c80:	e3a03000 	mov	r3, #0
   35c84:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   35c88:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   35c8c:	f57ff04f 	dsb	sy
   35c90:	f57ff06f 	isb	sy
   35c94:	e8bd8010 	pop	{r4, pc}

00035c98 <IsChainBootEnabled>:
   35c98:	e3043190 	movw	r3, #16784	@ 0x4190
   35c9c:	e3403004 	movt	r3, #4
   35ca0:	e5930000 	ldr	r0, [r3]
   35ca4:	e2500000 	subs	r0, r0, #0
   35ca8:	13a00001 	movne	r0, #1
   35cac:	e12fff1e 	bx	lr

00035cb0 <DoChainBoot>:
   35cb0:	e3043190 	movw	r3, #16784	@ 0x4190
   35cb4:	e3403004 	movt	r3, #4
   35cb8:	e3a02b1f 	mov	r2, #31744	@ 0x7c00
   35cbc:	e8930003 	ldm	r3, {r0, r1}
   35cc0:	e12fff12 	bx	r2

00035cc4 <CMACAddress::CMACAddress()>:
   35cc4:	e3a02000 	mov	r2, #0
   35cc8:	e5c02000 	strb	r2, [r0]
   35ccc:	e12fff1e 	bx	lr

00035cd0 <CMACAddress::CMACAddress(unsigned char const*)>:
   35cd0:	e3510000 	cmp	r1, #0
   35cd4:	e92d4010 	push	{r4, lr}
   35cd8:	0a000007 	beq	35cfc <CMACAddress::CMACAddress(unsigned char const*)+0x2c>
   35cdc:	e1a04000 	mov	r4, r0
   35ce0:	e3a02006 	mov	r2, #6
   35ce4:	e2800001 	add	r0, r0, #1
   35ce8:	ebffff05 	bl	35904 <memcpy>
   35cec:	e3a03001 	mov	r3, #1
   35cf0:	e1a00004 	mov	r0, r4
   35cf4:	e5c43000 	strb	r3, [r4]
   35cf8:	e8bd8010 	pop	{r4, pc}
   35cfc:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35d00:	e3401003 	movt	r1, #3
   35d04:	e30d0638 	movw	r0, #54840	@ 0xd638
   35d08:	e3400003 	movt	r0, #3
   35d0c:	e3a02034 	mov	r2, #52	@ 0x34
   35d10:	ebffd831 	bl	2bddc <assertion_failed>

00035d14 <CMACAddress::~CMACAddress()>:
   35d14:	e12fff1e 	bx	lr

00035d18 <CMACAddress::operator==(CMACAddress const&) const>:
   35d18:	e5d03000 	ldrb	r3, [r0]
   35d1c:	e92d4010 	push	{r4, lr}
   35d20:	e3530000 	cmp	r3, #0
   35d24:	0a000009 	beq	35d50 <CMACAddress::operator==(CMACAddress const&) const+0x38>
   35d28:	e5d13000 	ldrb	r3, [r1]
   35d2c:	e2800001 	add	r0, r0, #1
   35d30:	e3530000 	cmp	r3, #0
   35d34:	0a00000b 	beq	35d68 <CMACAddress::operator==(CMACAddress const&) const+0x50>
   35d38:	e3a02006 	mov	r2, #6
   35d3c:	e2811001 	add	r1, r1, #1
   35d40:	ebfffcd7 	bl	350a4 <memcmp>
   35d44:	e16f0f10 	clz	r0, r0
   35d48:	e1a002a0 	lsr	r0, r0, #5
   35d4c:	e8bd8010 	pop	{r4, pc}
   35d50:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35d54:	e3401003 	movt	r1, #3
   35d58:	e30c0164 	movw	r0, #49508	@ 0xc164
   35d5c:	e3400003 	movt	r0, #3
   35d60:	e3a02029 	mov	r2, #41	@ 0x29
   35d64:	ebffd81c 	bl	2bddc <assertion_failed>
   35d68:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35d6c:	e3401003 	movt	r1, #3
   35d70:	e30c0164 	movw	r0, #49508	@ 0xc164
   35d74:	e3400003 	movt	r0, #3
   35d78:	e3a02041 	mov	r2, #65	@ 0x41
   35d7c:	ebffd816 	bl	2bddc <assertion_failed>

00035d80 <CMACAddress::operator!=(CMACAddress const&) const>:
   35d80:	e5d03000 	ldrb	r3, [r0]
   35d84:	e92d4010 	push	{r4, lr}
   35d88:	e3530000 	cmp	r3, #0
   35d8c:	0a000009 	beq	35db8 <CMACAddress::operator!=(CMACAddress const&) const+0x38>
   35d90:	e5d13000 	ldrb	r3, [r1]
   35d94:	e2800001 	add	r0, r0, #1
   35d98:	e3530000 	cmp	r3, #0
   35d9c:	0a00000b 	beq	35dd0 <CMACAddress::operator!=(CMACAddress const&) const+0x50>
   35da0:	e3a02006 	mov	r2, #6
   35da4:	e2811001 	add	r1, r1, #1
   35da8:	ebfffcbd 	bl	350a4 <memcmp>
   35dac:	e2500000 	subs	r0, r0, #0
   35db0:	13a00001 	movne	r0, #1
   35db4:	e8bd8010 	pop	{r4, pc}
   35db8:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35dbc:	e3401003 	movt	r1, #3
   35dc0:	e30c0164 	movw	r0, #49508	@ 0xc164
   35dc4:	e3400003 	movt	r0, #3
   35dc8:	e3a02029 	mov	r2, #41	@ 0x29
   35dcc:	ebffd802 	bl	2bddc <assertion_failed>
   35dd0:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35dd4:	e3401003 	movt	r1, #3
   35dd8:	e30c0164 	movw	r0, #49508	@ 0xc164
   35ddc:	e3400003 	movt	r0, #3
   35de0:	e3a02041 	mov	r2, #65	@ 0x41
   35de4:	ebffd7fc 	bl	2bddc <assertion_failed>

00035de8 <CMACAddress::Set(unsigned char const*)>:
   35de8:	e3510000 	cmp	r1, #0
   35dec:	e92d4010 	push	{r4, lr}
   35df0:	0a000006 	beq	35e10 <CMACAddress::Set(unsigned char const*)+0x28>
   35df4:	e1a04000 	mov	r4, r0
   35df8:	e3a02006 	mov	r2, #6
   35dfc:	e2800001 	add	r0, r0, #1
   35e00:	ebfffebf 	bl	35904 <memcpy>
   35e04:	e3a03001 	mov	r3, #1
   35e08:	e5c43000 	strb	r3, [r4]
   35e0c:	e8bd8010 	pop	{r4, pc}
   35e10:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35e14:	e3401003 	movt	r1, #3
   35e18:	e30d0638 	movw	r0, #54840	@ 0xd638
   35e1c:	e3400003 	movt	r0, #3
   35e20:	e3a02034 	mov	r2, #52	@ 0x34
   35e24:	ebffd7ec 	bl	2bddc <assertion_failed>

00035e28 <CMACAddress::SetBroadcast()>:
   35e28:	e92d4010 	push	{r4, lr}
   35e2c:	e1a04000 	mov	r4, r0
   35e30:	e3a02006 	mov	r2, #6
   35e34:	e3a010ff 	mov	r1, #255	@ 0xff
   35e38:	e2800001 	add	r0, r0, #1
   35e3c:	ebfffe99 	bl	358a8 <memset>
   35e40:	e3a03001 	mov	r3, #1
   35e44:	e5c43000 	strb	r3, [r4]
   35e48:	e8bd8010 	pop	{r4, pc}

00035e4c <CMACAddress::Get() const>:
   35e4c:	e5d03000 	ldrb	r3, [r0]
   35e50:	e3530000 	cmp	r3, #0
   35e54:	0a000001 	beq	35e60 <CMACAddress::Get() const+0x14>
   35e58:	e2800001 	add	r0, r0, #1
   35e5c:	e12fff1e 	bx	lr
   35e60:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35e64:	e3401003 	movt	r1, #3
   35e68:	e30c0164 	movw	r0, #49508	@ 0xc164
   35e6c:	e3400003 	movt	r0, #3
   35e70:	e3a02041 	mov	r2, #65	@ 0x41
   35e74:	e92d4010 	push	{r4, lr}
   35e78:	ebffd7d7 	bl	2bddc <assertion_failed>

00035e7c <CMACAddress::CopyTo(unsigned char*) const>:
   35e7c:	e5d02000 	ldrb	r2, [r0]
   35e80:	e1a03000 	mov	r3, r0
   35e84:	e92d4010 	push	{r4, lr}
   35e88:	e3520000 	cmp	r2, #0
   35e8c:	0a000006 	beq	35eac <CMACAddress::CopyTo(unsigned char*) const+0x30>
   35e90:	e1a00001 	mov	r0, r1
   35e94:	e3510000 	cmp	r1, #0
   35e98:	0a000009 	beq	35ec4 <CMACAddress::CopyTo(unsigned char*) const+0x48>
   35e9c:	e8bd4010 	pop	{r4, lr}
   35ea0:	e3a02006 	mov	r2, #6
   35ea4:	e2831001 	add	r1, r3, #1
   35ea8:	eafffe95 	b	35904 <memcpy>
   35eac:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35eb0:	e3401003 	movt	r1, #3
   35eb4:	e30c0164 	movw	r0, #49508	@ 0xc164
   35eb8:	e3400003 	movt	r0, #3
   35ebc:	e3a02047 	mov	r2, #71	@ 0x47
   35ec0:	ebffd7c5 	bl	2bddc <assertion_failed>
   35ec4:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35ec8:	e3401003 	movt	r1, #3
   35ecc:	e30b0400 	movw	r0, #46080	@ 0xb400
   35ed0:	e3400003 	movt	r0, #3
   35ed4:	e3a02048 	mov	r2, #72	@ 0x48
   35ed8:	ebffd7bf 	bl	2bddc <assertion_failed>

00035edc <CMACAddress::IsBroadcast() const>:
   35edc:	e1a03000 	mov	r3, r0
   35ee0:	e5d00000 	ldrb	r0, [r0]
   35ee4:	e3500000 	cmp	r0, #0
   35ee8:	12831006 	addne	r1, r3, #6
   35eec:	1a000002 	bne	35efc <CMACAddress::IsBroadcast() const+0x20>
   35ef0:	ea000006 	b	35f10 <CMACAddress::IsBroadcast() const+0x34>
   35ef4:	e1530001 	cmp	r3, r1
   35ef8:	012fff1e 	bxeq	lr
   35efc:	e5f32001 	ldrb	r2, [r3, #1]!
   35f00:	e35200ff 	cmp	r2, #255	@ 0xff
   35f04:	0afffffa 	beq	35ef4 <CMACAddress::IsBroadcast() const+0x18>
   35f08:	e3a00000 	mov	r0, #0
   35f0c:	e12fff1e 	bx	lr
   35f10:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35f14:	e3401003 	movt	r1, #3
   35f18:	e30c0164 	movw	r0, #49508	@ 0xc164
   35f1c:	e3400003 	movt	r0, #3
   35f20:	e3a0204e 	mov	r2, #78	@ 0x4e
   35f24:	e92d4010 	push	{r4, lr}
   35f28:	ebffd7ab 	bl	2bddc <assertion_failed>

00035f2c <CMACAddress::GetSize() const>:
   35f2c:	e3a00006 	mov	r0, #6
   35f30:	e12fff1e 	bx	lr

00035f34 <CMACAddress::Format(CString*) const>:
   35f34:	e5d03000 	ldrb	r3, [r0]
   35f38:	e1a02000 	mov	r2, r0
   35f3c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   35f40:	e3530000 	cmp	r3, #0
   35f44:	e24dd014 	sub	sp, sp, #20
   35f48:	0a000010 	beq	35f90 <CMACAddress::Format(CString*) const+0x5c>
   35f4c:	e1a00001 	mov	r0, r1
   35f50:	e3510000 	cmp	r1, #0
   35f54:	0a000013 	beq	35fa8 <CMACAddress::Format(CString*) const+0x74>
   35f58:	e5d21006 	ldrb	r1, [r2, #6]
   35f5c:	e5d23005 	ldrb	r3, [r2, #5]
   35f60:	e5d2c004 	ldrb	ip, [r2, #4]
   35f64:	e58d100c 	str	r1, [sp, #12]
   35f68:	e58d3008 	str	r3, [sp, #8]
   35f6c:	e5d21003 	ldrb	r1, [r2, #3]
   35f70:	e5d23002 	ldrb	r3, [r2, #2]
   35f74:	e5d22001 	ldrb	r2, [r2, #1]
   35f78:	e88d1002 	stm	sp, {r1, ip}
   35f7c:	e30e16ac 	movw	r1, #59052	@ 0xe6ac
   35f80:	e3401003 	movt	r1, #3
   35f84:	ebfff867 	bl	34128 <CString::Format(char const*, ...)>
   35f88:	e28dd014 	add	sp, sp, #20
   35f8c:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   35f90:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35f94:	e3401003 	movt	r1, #3
   35f98:	e30c0164 	movw	r0, #49508	@ 0xc164
   35f9c:	e3400003 	movt	r0, #3
   35fa0:	e3a02062 	mov	r2, #98	@ 0x62
   35fa4:	ebffd78c 	bl	2bddc <assertion_failed>
   35fa8:	e30e169c 	movw	r1, #59036	@ 0xe69c
   35fac:	e3401003 	movt	r1, #3
   35fb0:	e30d0680 	movw	r0, #54912	@ 0xd680
   35fb4:	e3400003 	movt	r0, #3
   35fb8:	e3a02063 	mov	r2, #99	@ 0x63
   35fbc:	ebffd786 	bl	2bddc <assertion_failed>

00035fc0 <CNetDevice::AddNetDevice()>:
   35fc0:	e3043198 	movw	r3, #16792	@ 0x4198
   35fc4:	e3403004 	movt	r3, #4
   35fc8:	e5932000 	ldr	r2, [r3]
   35fcc:	e3520004 	cmp	r2, #4
   35fd0:	90831102 	addls	r1, r3, r2, lsl #2
   35fd4:	92822001 	addls	r2, r2, #1
   35fd8:	95832000 	strls	r2, [r3]
   35fdc:	95810008 	strls	r0, [r1, #8]
   35fe0:	e12fff1e 	bx	lr

00035fe4 <CNetDevice::GetSpeedString(TNetDeviceSpeed)>:
   35fe4:	e3500005 	cmp	r0, #5
   35fe8:	93033ff0 	movwls	r3, #16368	@ 0x3ff0
   35fec:	93403004 	movtls	r3, #4
   35ff0:	97930100 	ldrls	r0, [r3, r0, lsl #2]
   35ff4:	830e06cc 	movwhi	r0, #59084	@ 0xe6cc
   35ff8:	83400003 	movthi	r0, #3
   35ffc:	e12fff1e 	bx	lr

00036000 <CNetDevice::GetNetDevice(unsigned int)>:
   36000:	e3043198 	movw	r3, #16792	@ 0x4198
   36004:	e3403004 	movt	r3, #4
   36008:	e5932000 	ldr	r2, [r3]
   3600c:	e1520000 	cmp	r2, r0
   36010:	80833100 	addhi	r3, r3, r0, lsl #2
   36014:	85930008 	ldrhi	r0, [r3, #8]
   36018:	93a00000 	movls	r0, #0
   3601c:	e12fff1e 	bx	lr

00036020 <CNetDevice::GetNetDevice(TNetDeviceType)>:
   36020:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36024:	e3047198 	movw	r7, #16792	@ 0x4198
   36028:	e3407004 	movt	r7, #4
   3602c:	e5973000 	ldr	r3, [r7]
   36030:	e3530000 	cmp	r3, #0
   36034:	0a00001f 	beq	360b8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   36038:	e5974008 	ldr	r4, [r7, #8]
   3603c:	e287600c 	add	r6, r7, #12
   36040:	e3540000 	cmp	r4, #0
   36044:	0a00001b 	beq	360b8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   36048:	e1a08000 	mov	r8, r0
   3604c:	e3500002 	cmp	r0, #2
   36050:	0a000016 	beq	360b0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x90>
   36054:	e30b96a0 	movw	r9, #46752	@ 0xb6a0
   36058:	e3409001 	movt	r9, #1
   3605c:	e3a05000 	mov	r5, #0
   36060:	ea000008 	b	36088 <CNetDevice::GetNetDevice(TNetDeviceType)+0x68>
   36064:	e2855001 	add	r5, r5, #1
   36068:	e1500008 	cmp	r0, r8
   3606c:	0a00000f 	beq	360b0 <CNetDevice::GetNetDevice(TNetDeviceType)+0x90>
   36070:	e5973000 	ldr	r3, [r7]
   36074:	e1530005 	cmp	r3, r5
   36078:	9a00000e 	bls	360b8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   3607c:	e4964004 	ldr	r4, [r6], #4
   36080:	e3540000 	cmp	r4, #0
   36084:	0a00000b 	beq	360b8 <CNetDevice::GetNetDevice(TNetDeviceType)+0x98>
   36088:	e5943000 	ldr	r3, [r4]
   3608c:	e3a00000 	mov	r0, #0
   36090:	e5933008 	ldr	r3, [r3, #8]
   36094:	e1530009 	cmp	r3, r9
   36098:	0afffff1 	beq	36064 <CNetDevice::GetNetDevice(TNetDeviceType)+0x44>
   3609c:	e1a00004 	mov	r0, r4
   360a0:	e2855001 	add	r5, r5, #1
   360a4:	e12fff33 	blx	r3
   360a8:	e1500008 	cmp	r0, r8
   360ac:	1affffef 	bne	36070 <CNetDevice::GetNetDevice(TNetDeviceType)+0x50>
   360b0:	e1a00004 	mov	r0, r4
   360b4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   360b8:	e3a04000 	mov	r4, #0
   360bc:	e1a00004 	mov	r0, r4
   360c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000360c4 <operator new(unsigned int, int)>:
   360c4:	e3d13002 	bics	r3, r1, #2
   360c8:	0a000001 	beq	360d4 <operator new(unsigned int, int)+0x10>
   360cc:	e3a00000 	mov	r0, #0
   360d0:	e12fff1e 	bx	lr
   360d4:	e30431bc 	movw	r3, #16828	@ 0x41bc
   360d8:	e3403004 	movt	r3, #4
   360dc:	e1a01000 	mov	r1, r0
   360e0:	e5930000 	ldr	r0, [r3]
   360e4:	e280000c 	add	r0, r0, #12
   360e8:	ea00004f 	b	3622c <CHeapAllocator::Allocate(unsigned int)>

000360ec <operator new[](unsigned int, int)>:
   360ec:	e3d13002 	bics	r3, r1, #2
   360f0:	0a000001 	beq	360fc <operator new[](unsigned int, int)+0x10>
   360f4:	e3a00000 	mov	r0, #0
   360f8:	e12fff1e 	bx	lr
   360fc:	e30431bc 	movw	r3, #16828	@ 0x41bc
   36100:	e3403004 	movt	r3, #4
   36104:	e1a01000 	mov	r1, r0
   36108:	e5930000 	ldr	r0, [r3]
   3610c:	e280000c 	add	r0, r0, #12
   36110:	ea000045 	b	3622c <CHeapAllocator::Allocate(unsigned int)>

00036114 <operator new(unsigned int, void*)>:
   36114:	e1a00001 	mov	r0, r1
   36118:	e12fff1e 	bx	lr

0003611c <operator new[](unsigned int, void*)>:
   3611c:	e1a00001 	mov	r0, r1
   36120:	e12fff1e 	bx	lr

00036124 <operator new(unsigned int)>:
   36124:	e30431bc 	movw	r3, #16828	@ 0x41bc
   36128:	e3403004 	movt	r3, #4
   3612c:	e1a01000 	mov	r1, r0
   36130:	e5930000 	ldr	r0, [r3]
   36134:	e280000c 	add	r0, r0, #12
   36138:	ea00003b 	b	3622c <CHeapAllocator::Allocate(unsigned int)>

0003613c <operator new[](unsigned int)>:
   3613c:	e30431bc 	movw	r3, #16828	@ 0x41bc
   36140:	e3403004 	movt	r3, #4
   36144:	e1a01000 	mov	r1, r0
   36148:	e5930000 	ldr	r0, [r3]
   3614c:	e280000c 	add	r0, r0, #12
   36150:	ea000035 	b	3622c <CHeapAllocator::Allocate(unsigned int)>

00036154 <operator delete(void*)>:
   36154:	e30431bc 	movw	r3, #16828	@ 0x41bc
   36158:	e3403004 	movt	r3, #4
   3615c:	e1a01000 	mov	r1, r0
   36160:	e5930000 	ldr	r0, [r3]
   36164:	e280000c 	add	r0, r0, #12
   36168:	ea0000a9 	b	36414 <CHeapAllocator::Free(void*)>

0003616c <operator delete[](void*)>:
   3616c:	e30431bc 	movw	r3, #16828	@ 0x41bc
   36170:	e3403004 	movt	r3, #4
   36174:	e1a01000 	mov	r1, r0
   36178:	e5930000 	ldr	r0, [r3]
   3617c:	e280000c 	add	r0, r0, #12
   36180:	ea0000a3 	b	36414 <CHeapAllocator::Free(void*)>

00036184 <operator delete(void*, unsigned int)>:
   36184:	e30431bc 	movw	r3, #16828	@ 0x41bc
   36188:	e3403004 	movt	r3, #4
   3618c:	e1a01000 	mov	r1, r0
   36190:	e5930000 	ldr	r0, [r3]
   36194:	e280000c 	add	r0, r0, #12
   36198:	ea00009d 	b	36414 <CHeapAllocator::Free(void*)>

0003619c <operator delete[](void*, unsigned int)>:
   3619c:	e30431bc 	movw	r3, #16828	@ 0x41bc
   361a0:	e3403004 	movt	r3, #4
   361a4:	e1a01000 	mov	r1, r0
   361a8:	e5930000 	ldr	r0, [r3]
   361ac:	e280000c 	add	r0, r0, #12
   361b0:	ea000097 	b	36414 <CHeapAllocator::Free(void*)>

000361b4 <CHeapAllocator::CHeapAllocator(char const*)>:
   361b4:	e92d4010 	push	{r4, lr}
   361b8:	e1a04000 	mov	r4, r0
   361bc:	e3a03000 	mov	r3, #0
   361c0:	e3a00001 	mov	r0, #1
   361c4:	e3a020a8 	mov	r2, #168	@ 0xa8
   361c8:	e884000a 	stm	r4, {r1, r3}
   361cc:	e1a01003 	mov	r1, r3
   361d0:	e5843008 	str	r3, [r4, #8]
   361d4:	e584300c 	str	r3, [r4, #12]
   361d8:	e58400b8 	str	r0, [r4, #184]	@ 0xb8
   361dc:	e2840010 	add	r0, r4, #16
   361e0:	ebfffdb0 	bl	358a8 <memset>
   361e4:	e59f3020 	ldr	r3, [pc, #32]	@ 3620c <CHeapAllocator::CHeapAllocator(char const*)+0x58>
   361e8:	e1a02004 	mov	r2, r4
   361ec:	e283001c 	add	r0, r3, #28
   361f0:	e2822008 	add	r2, r2, #8
   361f4:	e5b31004 	ldr	r1, [r3, #4]!
   361f8:	e1530000 	cmp	r3, r0
   361fc:	e5821008 	str	r1, [r2, #8]
   36200:	1afffffa 	bne	361f0 <CHeapAllocator::CHeapAllocator(char const*)+0x3c>
   36204:	e1a00004 	mov	r0, r4
   36208:	e8bd8010 	pop	{r4, pc}
   3620c:	00044004 	.word	0x00044004

00036210 <CHeapAllocator::~CHeapAllocator()>:
   36210:	e12fff1e 	bx	lr

00036214 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
   36214:	e0812002 	add	r2, r1, r2
   36218:	e980000e 	stmib	r0, {r1, r2, r3}
   3621c:	e12fff1e 	bx	lr

00036220 <CHeapAllocator::GetFreeSpace() const>:
   36220:	e9900005 	ldmib	r0, {r0, r2}
   36224:	e0420000 	sub	r0, r2, r0
   36228:	e12fff1e 	bx	lr

0003622c <CHeapAllocator::Allocate(unsigned int)>:
   3622c:	e5903004 	ldr	r3, [r0, #4]
   36230:	e3530000 	cmp	r3, #0
   36234:	0a000074 	beq	3640c <CHeapAllocator::Allocate(unsigned int)+0x1e0>
   36238:	e92d4070 	push	{r4, r5, r6, lr}
   3623c:	e1a06000 	mov	r6, r0
   36240:	e59000b8 	ldr	r0, [r0, #184]	@ 0xb8
   36244:	e1a04001 	mov	r4, r1
   36248:	e3500000 	cmp	r0, #0
   3624c:	1a000060 	bne	363d4 <CHeapAllocator::Allocate(unsigned int)+0x1a8>
   36250:	e5963010 	ldr	r3, [r6, #16]
   36254:	e2862010 	add	r2, r6, #16
   36258:	e3530000 	cmp	r3, #0
   3625c:	1a000003 	bne	36270 <CHeapAllocator::Allocate(unsigned int)+0x44>
   36260:	ea00002c 	b	36318 <CHeapAllocator::Allocate(unsigned int)+0xec>
   36264:	e5b23008 	ldr	r3, [r2, #8]!
   36268:	e3530000 	cmp	r3, #0
   3626c:	0a000029 	beq	36318 <CHeapAllocator::Allocate(unsigned int)+0xec>
   36270:	e1530004 	cmp	r3, r4
   36274:	3afffffa 	bcc	36264 <CHeapAllocator::Allocate(unsigned int)+0x38>
   36278:	e5925004 	ldr	r5, [r2, #4]
   3627c:	e3550000 	cmp	r5, #0
   36280:	01a04003 	moveq	r4, r3
   36284:	0a000023 	beq	36318 <CHeapAllocator::Allocate(unsigned int)+0xec>
   36288:	e5d51001 	ldrb	r1, [r5, #1]
   3628c:	e5d53000 	ldrb	r3, [r5]
   36290:	e1833401 	orr	r3, r3, r1, lsl #8
   36294:	e5d51002 	ldrb	r1, [r5, #2]
   36298:	e1833801 	orr	r3, r3, r1, lsl #16
   3629c:	e5d51003 	ldrb	r1, [r5, #3]
   362a0:	e1833c01 	orr	r3, r3, r1, lsl #24
   362a4:	e3041d43 	movw	r1, #19779	@ 0x4d43
   362a8:	e344124c 	movt	r1, #16972	@ 0x424c
   362ac:	e1530001 	cmp	r3, r1
   362b0:	1a00004f 	bne	363f4 <CHeapAllocator::Allocate(unsigned int)+0x1c8>
   362b4:	e5d51009 	ldrb	r1, [r5, #9]
   362b8:	e5d53008 	ldrb	r3, [r5, #8]
   362bc:	e1833401 	orr	r3, r3, r1, lsl #8
   362c0:	e5d5100a 	ldrb	r1, [r5, #10]
   362c4:	e1833801 	orr	r3, r3, r1, lsl #16
   362c8:	e5d5100b 	ldrb	r1, [r5, #11]
   362cc:	e1833c01 	orr	r3, r3, r1, lsl #24
   362d0:	e5823004 	str	r3, [r2, #4]
   362d4:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   362d8:	e3530000 	cmp	r3, #0
   362dc:	1a00002b 	bne	36390 <CHeapAllocator::Allocate(unsigned int)+0x164>
   362e0:	e315003f 	tst	r5, #63	@ 0x3f
   362e4:	e3a03000 	mov	r3, #0
   362e8:	e2850040 	add	r0, r5, #64	@ 0x40
   362ec:	e5c53008 	strb	r3, [r5, #8]
   362f0:	e5c53009 	strb	r3, [r5, #9]
   362f4:	e5c5300a 	strb	r3, [r5, #10]
   362f8:	e5c5300b 	strb	r3, [r5, #11]
   362fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   36300:	e30e1764 	movw	r1, #59236	@ 0xe764
   36304:	e3401003 	movt	r1, #3
   36308:	e30e07b4 	movw	r0, #59316	@ 0xe7b4
   3630c:	e3400003 	movt	r0, #3
   36310:	e3a0208e 	mov	r2, #142	@ 0x8e
   36314:	ebffd6b0 	bl	2bddc <assertion_failed>
   36318:	e5965004 	ldr	r5, [r6, #4]
   3631c:	e284307f 	add	r3, r4, #127	@ 0x7f
   36320:	e3c3303f 	bic	r3, r3, #63	@ 0x3f
   36324:	e596100c 	ldr	r1, [r6, #12]
   36328:	e0853003 	add	r3, r5, r3
   3632c:	e1550003 	cmp	r5, r3
   36330:	2a000018 	bcs	36398 <CHeapAllocator::Allocate(unsigned int)+0x16c>
   36334:	e5962008 	ldr	r2, [r6, #8]
   36338:	e0422001 	sub	r2, r2, r1
   3633c:	e1530002 	cmp	r3, r2
   36340:	8a000014 	bhi	36398 <CHeapAllocator::Allocate(unsigned int)+0x16c>
   36344:	e5863004 	str	r3, [r6, #4]
   36348:	e3a02043 	mov	r2, #67	@ 0x43
   3634c:	e3a0304d 	mov	r3, #77	@ 0x4d
   36350:	e5c52000 	strb	r2, [r5]
   36354:	e5c53001 	strb	r3, [r5, #1]
   36358:	e3a0204c 	mov	r2, #76	@ 0x4c
   3635c:	e3a03042 	mov	r3, #66	@ 0x42
   36360:	e5c52002 	strb	r2, [r5, #2]
   36364:	e5c53003 	strb	r3, [r5, #3]
   36368:	e7e72454 	ubfx	r2, r4, #8, #8
   3636c:	e7e73854 	ubfx	r3, r4, #16, #8
   36370:	e5c54004 	strb	r4, [r5, #4]
   36374:	e5c52005 	strb	r2, [r5, #5]
   36378:	e1a04c24 	lsr	r4, r4, #24
   3637c:	e5c53006 	strb	r3, [r5, #6]
   36380:	e5c54007 	strb	r4, [r5, #7]
   36384:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   36388:	e3530000 	cmp	r3, #0
   3638c:	0affffd3 	beq	362e0 <CHeapAllocator::Allocate(unsigned int)+0xb4>
   36390:	eb0005a5 	bl	37a2c <LeaveCritical>
   36394:	eaffffd1 	b	362e0 <CHeapAllocator::Allocate(unsigned int)+0xb4>
   36398:	e59630b8 	ldr	r3, [r6, #184]	@ 0xb8
   3639c:	e3510000 	cmp	r1, #0
   363a0:	0a00000d 	beq	363dc <CHeapAllocator::Allocate(unsigned int)+0x1b0>
   363a4:	e3a02000 	mov	r2, #0
   363a8:	e586200c 	str	r2, [r6, #12]
   363ac:	e1530002 	cmp	r3, r2
   363b0:	1a00000d 	bne	363ec <CHeapAllocator::Allocate(unsigned int)+0x1c0>
   363b4:	ebffe103 	bl	2e7c8 <CLogger::Get()>
   363b8:	e30e37a4 	movw	r3, #59300	@ 0xe7a4
   363bc:	e3403003 	movt	r3, #3
   363c0:	e5961000 	ldr	r1, [r6]
   363c4:	e3a02000 	mov	r2, #0
   363c8:	ebffe2c7 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   363cc:	e3a00000 	mov	r0, #0
   363d0:	e8bd8070 	pop	{r4, r5, r6, pc}
   363d4:	eb000569 	bl	37980 <EnterCritical>
   363d8:	eaffff9c 	b	36250 <CHeapAllocator::Allocate(unsigned int)+0x24>
   363dc:	e3530000 	cmp	r3, #0
   363e0:	0afffff9 	beq	363cc <CHeapAllocator::Allocate(unsigned int)+0x1a0>
   363e4:	eb000590 	bl	37a2c <LeaveCritical>
   363e8:	eafffff7 	b	363cc <CHeapAllocator::Allocate(unsigned int)+0x1a0>
   363ec:	eb00058e 	bl	37a2c <LeaveCritical>
   363f0:	eaffffef 	b	363b4 <CHeapAllocator::Allocate(unsigned int)+0x188>
   363f4:	e30e1764 	movw	r1, #59236	@ 0xe764
   363f8:	e3401003 	movt	r1, #3
   363fc:	e30e0778 	movw	r0, #59256	@ 0xe778
   36400:	e3400003 	movt	r0, #3
   36404:	e3a0205e 	mov	r2, #94	@ 0x5e
   36408:	ebffd673 	bl	2bddc <assertion_failed>
   3640c:	e3a00000 	mov	r0, #0
   36410:	e12fff1e 	bx	lr

00036414 <CHeapAllocator::Free(void*)>:
   36414:	e3510000 	cmp	r1, #0
   36418:	012fff1e 	bxeq	lr
   3641c:	e92d4070 	push	{r4, r5, r6, lr}
   36420:	e1a05000 	mov	r5, r0
   36424:	e2416040 	sub	r6, r1, #64	@ 0x40
   36428:	e5513040 	ldrb	r3, [r1, #-64]	@ 0xffffffc0
   3642c:	e551003f 	ldrb	r0, [r1, #-63]	@ 0xffffffc1
   36430:	e551203e 	ldrb	r2, [r1, #-62]	@ 0xffffffc2
   36434:	e551103d 	ldrb	r1, [r1, #-61]	@ 0xffffffc3
   36438:	e1833400 	orr	r3, r3, r0, lsl #8
   3643c:	e1833802 	orr	r3, r3, r2, lsl #16
   36440:	e3042d43 	movw	r2, #19779	@ 0x4d43
   36444:	e344224c 	movt	r2, #16972	@ 0x424c
   36448:	e1833c01 	orr	r3, r3, r1, lsl #24
   3644c:	e1530002 	cmp	r3, r2
   36450:	1a00002c 	bne	36508 <CHeapAllocator::Free(void*)+0xf4>
   36454:	e5953010 	ldr	r3, [r5, #16]
   36458:	e3530000 	cmp	r3, #0
   3645c:	08bd8070 	popeq	{r4, r5, r6, pc}
   36460:	e5d61005 	ldrb	r1, [r6, #5]
   36464:	e2854010 	add	r4, r5, #16
   36468:	e5d62004 	ldrb	r2, [r6, #4]
   3646c:	e1822401 	orr	r2, r2, r1, lsl #8
   36470:	e5d61006 	ldrb	r1, [r6, #6]
   36474:	e1822801 	orr	r2, r2, r1, lsl #16
   36478:	e5d61007 	ldrb	r1, [r6, #7]
   3647c:	e1822c01 	orr	r2, r2, r1, lsl #24
   36480:	ea000002 	b	36490 <CHeapAllocator::Free(void*)+0x7c>
   36484:	e5b43008 	ldr	r3, [r4, #8]!
   36488:	e3530000 	cmp	r3, #0
   3648c:	08bd8070 	popeq	{r4, r5, r6, pc}
   36490:	e1530002 	cmp	r3, r2
   36494:	1afffffa 	bne	36484 <CHeapAllocator::Free(void*)+0x70>
   36498:	e59500b8 	ldr	r0, [r5, #184]	@ 0xb8
   3649c:	e3500000 	cmp	r0, #0
   364a0:	1a000009 	bne	364cc <CHeapAllocator::Free(void*)+0xb8>
   364a4:	e5943004 	ldr	r3, [r4, #4]
   364a8:	e5c63008 	strb	r3, [r6, #8]
   364ac:	e7e71453 	ubfx	r1, r3, #8, #8
   364b0:	e7e72853 	ubfx	r2, r3, #16, #8
   364b4:	e5c61009 	strb	r1, [r6, #9]
   364b8:	e1a03c23 	lsr	r3, r3, #24
   364bc:	e5c6200a 	strb	r2, [r6, #10]
   364c0:	e5c6300b 	strb	r3, [r6, #11]
   364c4:	e5846004 	str	r6, [r4, #4]
   364c8:	e8bd8070 	pop	{r4, r5, r6, pc}
   364cc:	eb00052b 	bl	37980 <EnterCritical>
   364d0:	e59510b8 	ldr	r1, [r5, #184]	@ 0xb8
   364d4:	e5943004 	ldr	r3, [r4, #4]
   364d8:	e3510000 	cmp	r1, #0
   364dc:	e5c63008 	strb	r3, [r6, #8]
   364e0:	e7e72453 	ubfx	r2, r3, #8, #8
   364e4:	e5c62009 	strb	r2, [r6, #9]
   364e8:	e7e72853 	ubfx	r2, r3, #16, #8
   364ec:	e1a03c23 	lsr	r3, r3, #24
   364f0:	e5c6200a 	strb	r2, [r6, #10]
   364f4:	e5c6300b 	strb	r3, [r6, #11]
   364f8:	e5846004 	str	r6, [r4, #4]
   364fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   36500:	e8bd4070 	pop	{r4, r5, r6, lr}
   36504:	ea000548 	b	37a2c <LeaveCritical>
   36508:	e30e1764 	movw	r1, #59236	@ 0xe764
   3650c:	e3401003 	movt	r1, #3
   36510:	e30e0778 	movw	r0, #59256	@ 0xe778
   36514:	e3400003 	movt	r0, #3
   36518:	e3a020bf 	mov	r2, #191	@ 0xbf
   3651c:	ebffd62e 	bl	2bddc <assertion_failed>

00036520 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
   36520:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   36524:	e1a05002 	mov	r5, r2
   36528:	e2514000 	subs	r4, r1, #0
   3652c:	0a00002c 	beq	365e4 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xc4>
   36530:	e3520000 	cmp	r2, #0
   36534:	0a000027 	beq	365d8 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xb8>
   36538:	e554203f 	ldrb	r2, [r4, #-63]	@ 0xffffffc1
   3653c:	e2447040 	sub	r7, r4, #64	@ 0x40
   36540:	e5543040 	ldrb	r3, [r4, #-64]	@ 0xffffffc0
   36544:	e1833402 	orr	r3, r3, r2, lsl #8
   36548:	e554203e 	ldrb	r2, [r4, #-62]	@ 0xffffffc2
   3654c:	e1833802 	orr	r3, r3, r2, lsl #16
   36550:	e554203d 	ldrb	r2, [r4, #-61]	@ 0xffffffc3
   36554:	e1833c02 	orr	r3, r3, r2, lsl #24
   36558:	e3042d43 	movw	r2, #19779	@ 0x4d43
   3655c:	e344224c 	movt	r2, #16972	@ 0x424c
   36560:	e1530002 	cmp	r3, r2
   36564:	1a000021 	bne	365f0 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xd0>
   36568:	e5d72005 	ldrb	r2, [r7, #5]
   3656c:	e5d73004 	ldrb	r3, [r7, #4]
   36570:	e1833402 	orr	r3, r3, r2, lsl #8
   36574:	e5d72006 	ldrb	r2, [r7, #6]
   36578:	e1833802 	orr	r3, r3, r2, lsl #16
   3657c:	e5d72007 	ldrb	r2, [r7, #7]
   36580:	e1833c02 	orr	r3, r3, r2, lsl #24
   36584:	e1530005 	cmp	r3, r5
   36588:	21a05004 	movcs	r5, r4
   3658c:	3a000001 	bcc	36598 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x78>
   36590:	e1a00005 	mov	r0, r5
   36594:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   36598:	e1a01005 	mov	r1, r5
   3659c:	e1a06000 	mov	r6, r0
   365a0:	ebffff21 	bl	3622c <CHeapAllocator::Allocate(unsigned int)>
   365a4:	e2505000 	subs	r5, r0, #0
   365a8:	0afffff8 	beq	36590 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x70>
   365ac:	e5d72005 	ldrb	r2, [r7, #5]
   365b0:	e1a01004 	mov	r1, r4
   365b4:	e5d73004 	ldrb	r3, [r7, #4]
   365b8:	e1833402 	orr	r3, r3, r2, lsl #8
   365bc:	e5d72006 	ldrb	r2, [r7, #6]
   365c0:	e1833802 	orr	r3, r3, r2, lsl #16
   365c4:	e5d72007 	ldrb	r2, [r7, #7]
   365c8:	e1832c02 	orr	r2, r3, r2, lsl #24
   365cc:	ebfffccc 	bl	35904 <memcpy>
   365d0:	e1a01004 	mov	r1, r4
   365d4:	e1a00006 	mov	r0, r6
   365d8:	ebffff8d 	bl	36414 <CHeapAllocator::Free(void*)>
   365dc:	e1a00005 	mov	r0, r5
   365e0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   365e4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   365e8:	e1a01002 	mov	r1, r2
   365ec:	eaffff0e 	b	3622c <CHeapAllocator::Allocate(unsigned int)>
   365f0:	e30e1764 	movw	r1, #59236	@ 0xe764
   365f4:	e3401003 	movt	r1, #3
   365f8:	e30e0778 	movw	r0, #59256	@ 0xe778
   365fc:	e3400003 	movt	r0, #3
   36600:	e3a020a3 	mov	r2, #163	@ 0xa3
   36604:	ebffd5f4 	bl	2bddc <assertion_failed>

00036608 <CNumberPool::CNumberPool(unsigned int, unsigned int)>:
   36608:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   3660c:	e92d4010 	push	{r4, lr}
   36610:	e352003f 	cmp	r2, #63	@ 0x3f
   36614:	e8800006 	stm	r0, {r1, r2}
   36618:	edc00b02 	vstr	d16, [r0, #8]
   3661c:	8a000007 	bhi	36640 <CNumberPool::CNumberPool(unsigned int, unsigned int)+0x38>
   36620:	e1510002 	cmp	r1, r2
   36624:	98bd8010 	popls	{r4, pc}
   36628:	e30e17e0 	movw	r1, #59360	@ 0xe7e0
   3662c:	e3401003 	movt	r1, #3
   36630:	e30e0800 	movw	r0, #59392	@ 0xe800
   36634:	e3400003 	movt	r0, #3
   36638:	e3a0201e 	mov	r2, #30
   3663c:	ebffd5e6 	bl	2bddc <assertion_failed>
   36640:	e30e17e0 	movw	r1, #59360	@ 0xe7e0
   36644:	e3401003 	movt	r1, #3
   36648:	e30e07f0 	movw	r0, #59376	@ 0xe7f0
   3664c:	e3400003 	movt	r0, #3
   36650:	e3a0201d 	mov	r2, #29
   36654:	ebffd5e0 	bl	2bddc <assertion_failed>

00036658 <CNumberPool::~CNumberPool()>:
   36658:	e12fff1e 	bx	lr

0003665c <CNumberPool::AllocateNumber(bool, char const*)>:
   3665c:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36660:	e1a07000 	mov	r7, r0
   36664:	e5900000 	ldr	r0, [r0]
   36668:	e1a04002 	mov	r4, r2
   3666c:	e5975004 	ldr	r5, [r7, #4]
   36670:	e1550000 	cmp	r5, r0
   36674:	3a000013 	bcc	366c8 <CNumberPool::AllocateNumber(bool, char const*)+0x6c>
   36678:	e3a06001 	mov	r6, #1
   3667c:	e5972008 	ldr	r2, [r7, #8]
   36680:	e597e00c 	ldr	lr, [r7, #12]
   36684:	e1a03016 	lsl	r3, r6, r0
   36688:	e0038002 	and	r8, r3, r2
   3668c:	e1a0c003 	mov	ip, r3
   36690:	e1a03fc3 	asr	r3, r3, #31
   36694:	e003900e 	and	r9, r3, lr
   36698:	e1988009 	orrs	r8, r8, r9
   3669c:	1a000006 	bne	366bc <CNumberPool::AllocateNumber(bool, char const*)+0x60>
   366a0:	ea000014 	b	366f8 <CNumberPool::AllocateNumber(bool, char const*)+0x9c>
   366a4:	e1a0c016 	lsl	ip, r6, r0
   366a8:	e00c8002 	and	r8, ip, r2
   366ac:	e1a03fcc 	asr	r3, ip, #31
   366b0:	e003900e 	and	r9, r3, lr
   366b4:	e1988009 	orrs	r8, r8, r9
   366b8:	0a00000e 	beq	366f8 <CNumberPool::AllocateNumber(bool, char const*)+0x9c>
   366bc:	e2800001 	add	r0, r0, #1
   366c0:	e1550000 	cmp	r5, r0
   366c4:	2afffff6 	bcs	366a4 <CNumberPool::AllocateNumber(bool, char const*)+0x48>
   366c8:	e3510000 	cmp	r1, #0
   366cc:	0a000007 	beq	366f0 <CNumberPool::AllocateNumber(bool, char const*)+0x94>
   366d0:	e3540000 	cmp	r4, #0
   366d4:	0a00000c 	beq	3670c <CNumberPool::AllocateNumber(bool, char const*)+0xb0>
   366d8:	ebffe03a 	bl	2e7c8 <CLogger::Get()>
   366dc:	e30e381c 	movw	r3, #59420	@ 0xe81c
   366e0:	e3403003 	movt	r3, #3
   366e4:	e3a02000 	mov	r2, #0
   366e8:	e1a01004 	mov	r1, r4
   366ec:	ebffe1fe 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   366f0:	e3a00040 	mov	r0, #64	@ 0x40
   366f4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   366f8:	e182200c 	orr	r2, r2, ip
   366fc:	e18ee003 	orr	lr, lr, r3
   36700:	e5872008 	str	r2, [r7, #8]
   36704:	e587e00c 	str	lr, [r7, #12]
   36708:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3670c:	e30e17e0 	movw	r1, #59360	@ 0xe7e0
   36710:	e3401003 	movt	r1, #3
   36714:	e30e0810 	movw	r0, #59408	@ 0xe810
   36718:	e3400003 	movt	r0, #3
   3671c:	e3a02034 	mov	r2, #52	@ 0x34
   36720:	ebffd5ad 	bl	2bddc <assertion_failed>

00036724 <CNumberPool::FreeNumber(unsigned int)>:
   36724:	e5903000 	ldr	r3, [r0]
   36728:	e92d4010 	push	{r4, lr}
   3672c:	e1530001 	cmp	r3, r1
   36730:	8a000010 	bhi	36778 <CNumberPool::FreeNumber(unsigned int)+0x54>
   36734:	e5903004 	ldr	r3, [r0, #4]
   36738:	e1530001 	cmp	r3, r1
   3673c:	3a00000d 	bcc	36778 <CNumberPool::FreeNumber(unsigned int)+0x54>
   36740:	e3a03001 	mov	r3, #1
   36744:	e590200c 	ldr	r2, [r0, #12]
   36748:	e590c008 	ldr	ip, [r0, #8]
   3674c:	e1a03113 	lsl	r3, r3, r1
   36750:	e003100c 	and	r1, r3, ip
   36754:	e002efc3 	and	lr, r2, r3, asr #31
   36758:	e191100e 	orrs	r1, r1, lr
   3675c:	0a00000b 	beq	36790 <CNumberPool::FreeNumber(unsigned int)+0x6c>
   36760:	e1e01003 	mvn	r1, r3
   36764:	e1ccc003 	bic	ip, ip, r3
   36768:	e580c008 	str	ip, [r0, #8]
   3676c:	e0022fc1 	and	r2, r2, r1, asr #31
   36770:	e580200c 	str	r2, [r0, #12]
   36774:	e8bd8010 	pop	{r4, pc}
   36778:	e30e17e0 	movw	r1, #59360	@ 0xe7e0
   3677c:	e3401003 	movt	r1, #3
   36780:	e30e0834 	movw	r0, #59444	@ 0xe834
   36784:	e3400003 	movt	r0, #3
   36788:	e3a02042 	mov	r2, #66	@ 0x42
   3678c:	ebffd592 	bl	2bddc <assertion_failed>
   36790:	e30e17e0 	movw	r1, #59360	@ 0xe7e0
   36794:	e3401003 	movt	r1, #3
   36798:	e30e085c 	movw	r0, #59484	@ 0xe85c
   3679c:	e3400003 	movt	r0, #3
   367a0:	e3a02043 	mov	r2, #67	@ 0x43
   367a4:	ebffd58c 	bl	2bddc <assertion_failed>

000367a8 <TPtrListElement::operator new(unsigned int)>:
   367a8:	e3500010 	cmp	r0, #16
   367ac:	e92d4010 	push	{r4, lr}
   367b0:	1a000006 	bne	367d0 <TPtrListElement::operator new(unsigned int)+0x28>
   367b4:	e30431b4 	movw	r3, #16820	@ 0x41b4
   367b8:	e3403004 	movt	r3, #4
   367bc:	e5930000 	ldr	r0, [r3]
   367c0:	e3500000 	cmp	r0, #0
   367c4:	0a000007 	beq	367e8 <TPtrListElement::operator new(unsigned int)+0x40>
   367c8:	e8bd4010 	pop	{r4, lr}
   367cc:	eaffd6cb 	b	2c300 <CClassAllocator::Allocate()>
   367d0:	e30e1874 	movw	r1, #59508	@ 0xe874
   367d4:	e3401003 	movt	r1, #3
   367d8:	e30e0884 	movw	r0, #59524	@ 0xe884
   367dc:	e3400003 	movt	r0, #3
   367e0:	e3a02027 	mov	r2, #39	@ 0x27
   367e4:	ebffd57c 	bl	2bddc <assertion_failed>
   367e8:	e30e1874 	movw	r1, #59508	@ 0xe874
   367ec:	e3401003 	movt	r1, #3
   367f0:	e30a0354 	movw	r0, #41812	@ 0xa354
   367f4:	e3400003 	movt	r0, #3
   367f8:	e3a02027 	mov	r2, #39	@ 0x27
   367fc:	ebffd576 	bl	2bddc <assertion_failed>

00036800 <TPtrListElement::operator delete(void*, unsigned int)>:
   36800:	e3510010 	cmp	r1, #16
   36804:	e92d4010 	push	{r4, lr}
   36808:	1a000008 	bne	36830 <TPtrListElement::operator delete(void*, unsigned int)+0x30>
   3680c:	e30421b4 	movw	r2, #16820	@ 0x41b4
   36810:	e3402004 	movt	r2, #4
   36814:	e1a03000 	mov	r3, r0
   36818:	e5920000 	ldr	r0, [r2]
   3681c:	e3500000 	cmp	r0, #0
   36820:	0a000008 	beq	36848 <TPtrListElement::operator delete(void*, unsigned int)+0x48>
   36824:	e8bd4010 	pop	{r4, lr}
   36828:	e1a01003 	mov	r1, r3
   3682c:	eaffd6ee 	b	2c3ec <CClassAllocator::Free(void*)>
   36830:	e30e1874 	movw	r1, #59508	@ 0xe874
   36834:	e3401003 	movt	r1, #3
   36838:	e30e0884 	movw	r0, #59524	@ 0xe884
   3683c:	e3400003 	movt	r0, #3
   36840:	e3a02027 	mov	r2, #39	@ 0x27
   36844:	ebffd564 	bl	2bddc <assertion_failed>
   36848:	e30e1874 	movw	r1, #59508	@ 0xe874
   3684c:	e3401003 	movt	r1, #3
   36850:	e30a0354 	movw	r0, #41812	@ 0xa354
   36854:	e3400003 	movt	r0, #3
   36858:	e3a02027 	mov	r2, #39	@ 0x27
   3685c:	ebffd55e 	bl	2bddc <assertion_failed>

00036860 <TPtrListElement::InitAllocator(unsigned int)>:
   36860:	e92d4070 	push	{r4, r5, r6, lr}
   36864:	e30441b4 	movw	r4, #16820	@ 0x41b4
   36868:	e3404004 	movt	r4, #4
   3686c:	e5943000 	ldr	r3, [r4]
   36870:	e3530000 	cmp	r3, #0
   36874:	1a00000a 	bne	368a4 <TPtrListElement::InitAllocator(unsigned int)+0x44>
   36878:	e1a05000 	mov	r5, r0
   3687c:	e3a00020 	mov	r0, #32
   36880:	ebfffe27 	bl	36124 <operator new(unsigned int)>
   36884:	e1a02005 	mov	r2, r5
   36888:	e3a01010 	mov	r1, #16
   3688c:	e30e38a8 	movw	r3, #59560	@ 0xe8a8
   36890:	e3403003 	movt	r3, #3
   36894:	e1a05000 	mov	r5, r0
   36898:	ebffd63a 	bl	2c188 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, char const*)>
   3689c:	e5845000 	str	r5, [r4]
   368a0:	e8bd8070 	pop	{r4, r5, r6, pc}
   368a4:	e30e1874 	movw	r1, #59508	@ 0xe874
   368a8:	e3401003 	movt	r1, #3
   368ac:	e30a039c 	movw	r0, #41884	@ 0xa39c
   368b0:	e3400003 	movt	r0, #3
   368b4:	e3a02027 	mov	r2, #39	@ 0x27
   368b8:	ebffd547 	bl	2bddc <assertion_failed>

000368bc <TPtrListElement::InitProtectedAllocator(unsigned int, unsigned int)>:
   368bc:	e92d4070 	push	{r4, r5, r6, lr}
   368c0:	e30441b4 	movw	r4, #16820	@ 0x41b4
   368c4:	e3404004 	movt	r4, #4
   368c8:	e1a05000 	mov	r5, r0
   368cc:	e24dd008 	sub	sp, sp, #8
   368d0:	e1a06001 	mov	r6, r1
   368d4:	e5940000 	ldr	r0, [r4]
   368d8:	e3500000 	cmp	r0, #0
   368dc:	0a000004 	beq	368f4 <TPtrListElement::InitProtectedAllocator(unsigned int, unsigned int)+0x38>
   368e0:	e1a02001 	mov	r2, r1
   368e4:	e1a01005 	mov	r1, r5
   368e8:	e28dd008 	add	sp, sp, #8
   368ec:	e8bd4070 	pop	{r4, r5, r6, lr}
   368f0:	eaffd63e 	b	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
   368f4:	e3a00020 	mov	r0, #32
   368f8:	ebfffe09 	bl	36124 <operator new(unsigned int)>
   368fc:	e1a02005 	mov	r2, r5
   36900:	e1a03006 	mov	r3, r6
   36904:	e3a01010 	mov	r1, #16
   36908:	e30ec8a8 	movw	ip, #59560	@ 0xe8a8
   3690c:	e340c003 	movt	ip, #3
   36910:	e58dc000 	str	ip, [sp]
   36914:	e1a05000 	mov	r5, r0
   36918:	ebffd626 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   3691c:	e5845000 	str	r5, [r4]
   36920:	e28dd008 	add	sp, sp, #8
   36924:	e8bd8070 	pop	{r4, r5, r6, pc}

00036928 <CPtrListFIQ::CPtrListFIQ(unsigned int)>:
   36928:	e92d4070 	push	{r4, r5, r6, lr}
   3692c:	e30461b4 	movw	r6, #16820	@ 0x41b4
   36930:	e3406004 	movt	r6, #4
   36934:	e3a03000 	mov	r3, #0
   36938:	e1a04000 	mov	r4, r0
   3693c:	e5803000 	str	r3, [r0]
   36940:	e24dd008 	sub	sp, sp, #8
   36944:	e5960000 	ldr	r0, [r6]
   36948:	e1500003 	cmp	r0, r3
   3694c:	0a000004 	beq	36964 <CPtrListFIQ::CPtrListFIQ(unsigned int)+0x3c>
   36950:	e3a02002 	mov	r2, #2
   36954:	ebffd625 	bl	2c1f0 <CClassAllocator::Extend(unsigned int, unsigned int)>
   36958:	e1a00004 	mov	r0, r4
   3695c:	e28dd008 	add	sp, sp, #8
   36960:	e8bd8070 	pop	{r4, r5, r6, pc}
   36964:	e1a05001 	mov	r5, r1
   36968:	e3a00020 	mov	r0, #32
   3696c:	ebfffdec 	bl	36124 <operator new(unsigned int)>
   36970:	e1a02005 	mov	r2, r5
   36974:	e3a03002 	mov	r3, #2
   36978:	e3a01010 	mov	r1, #16
   3697c:	e30ec8a8 	movw	ip, #59560	@ 0xe8a8
   36980:	e340c003 	movt	ip, #3
   36984:	e58dc000 	str	ip, [sp]
   36988:	e1a05000 	mov	r5, r0
   3698c:	ebffd609 	bl	2c1b8 <CClassAllocator::CClassAllocator(unsigned int, unsigned int, unsigned int, char const*)>
   36990:	e1a00004 	mov	r0, r4
   36994:	e5865000 	str	r5, [r6]
   36998:	e28dd008 	add	sp, sp, #8
   3699c:	e8bd8070 	pop	{r4, r5, r6, pc}

000369a0 <CPtrListFIQ::~CPtrListFIQ()>:
   369a0:	e5903000 	ldr	r3, [r0]
   369a4:	e3530000 	cmp	r3, #0
   369a8:	012fff1e 	bxeq	lr
   369ac:	e30e1874 	movw	r1, #59508	@ 0xe874
   369b0:	e3401003 	movt	r1, #3
   369b4:	e30e0370 	movw	r0, #58224	@ 0xe370
   369b8:	e3400003 	movt	r0, #3
   369bc:	e3a02031 	mov	r2, #49	@ 0x31
   369c0:	e92d4010 	push	{r4, lr}
   369c4:	ebffd504 	bl	2bddc <assertion_failed>

000369c8 <CPtrListFIQ::GetFirst()>:
   369c8:	e5900000 	ldr	r0, [r0]
   369cc:	e12fff1e 	bx	lr

000369d0 <CPtrListFIQ::GetNext(TPtrListElement*)>:
   369d0:	e3510000 	cmp	r1, #0
   369d4:	e92d4010 	push	{r4, lr}
   369d8:	0a000006 	beq	369f8 <CPtrListFIQ::GetNext(TPtrListElement*)+0x28>
   369dc:	e5912000 	ldr	r2, [r1]
   369e0:	e3043651 	movw	r3, #18001	@ 0x4651
   369e4:	e345304c 	movt	r3, #20556	@ 0x504c
   369e8:	e1520003 	cmp	r2, r3
   369ec:	1a000007 	bne	36a10 <CPtrListFIQ::GetNext(TPtrListElement*)+0x40>
   369f0:	e5910008 	ldr	r0, [r1, #8]
   369f4:	e8bd8010 	pop	{r4, pc}
   369f8:	e30e1874 	movw	r1, #59508	@ 0xe874
   369fc:	e3401003 	movt	r1, #3
   36a00:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   36a04:	e3400003 	movt	r0, #3
   36a08:	e3a0203b 	mov	r2, #59	@ 0x3b
   36a0c:	ebffd4f2 	bl	2bddc <assertion_failed>
   36a10:	e30e1874 	movw	r1, #59508	@ 0xe874
   36a14:	e3401003 	movt	r1, #3
   36a18:	e30e0380 	movw	r0, #58240	@ 0xe380
   36a1c:	e3400003 	movt	r0, #3
   36a20:	e3a0203c 	mov	r2, #60	@ 0x3c
   36a24:	ebffd4ec 	bl	2bddc <assertion_failed>

00036a28 <CPtrListFIQ::GetPtr(TPtrListElement*)>:
   36a28:	e3510000 	cmp	r1, #0
   36a2c:	e92d4010 	push	{r4, lr}
   36a30:	0a000006 	beq	36a50 <CPtrListFIQ::GetPtr(TPtrListElement*)+0x28>
   36a34:	e5912000 	ldr	r2, [r1]
   36a38:	e3043651 	movw	r3, #18001	@ 0x4651
   36a3c:	e345304c 	movt	r3, #20556	@ 0x504c
   36a40:	e1520003 	cmp	r2, r3
   36a44:	1a000007 	bne	36a68 <CPtrListFIQ::GetPtr(TPtrListElement*)+0x40>
   36a48:	e591000c 	ldr	r0, [r1, #12]
   36a4c:	e8bd8010 	pop	{r4, pc}
   36a50:	e30e1874 	movw	r1, #59508	@ 0xe874
   36a54:	e3401003 	movt	r1, #3
   36a58:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   36a5c:	e3400003 	movt	r0, #3
   36a60:	e3a02043 	mov	r2, #67	@ 0x43
   36a64:	ebffd4dc 	bl	2bddc <assertion_failed>
   36a68:	e30e1874 	movw	r1, #59508	@ 0xe874
   36a6c:	e3401003 	movt	r1, #3
   36a70:	e30e0380 	movw	r0, #58240	@ 0xe380
   36a74:	e3400003 	movt	r0, #3
   36a78:	e3a02044 	mov	r2, #68	@ 0x44
   36a7c:	ebffd4d6 	bl	2bddc <assertion_failed>

00036a80 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)>:
   36a80:	e30431b4 	movw	r3, #16820	@ 0x41b4
   36a84:	e3403004 	movt	r3, #4
   36a88:	e92d4070 	push	{r4, r5, r6, lr}
   36a8c:	e1a06000 	mov	r6, r0
   36a90:	e5930000 	ldr	r0, [r3]
   36a94:	e3500000 	cmp	r0, #0
   36a98:	0a000022 	beq	36b28 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xa8>
   36a9c:	e1a04001 	mov	r4, r1
   36aa0:	e1a05002 	mov	r5, r2
   36aa4:	ebffd615 	bl	2c300 <CClassAllocator::Allocate()>
   36aa8:	e2503000 	subs	r3, r0, #0
   36aac:	0a000023 	beq	36b40 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xc0>
   36ab0:	e5961000 	ldr	r1, [r6]
   36ab4:	e3042651 	movw	r2, #18001	@ 0x4651
   36ab8:	e345204c 	movt	r2, #20556	@ 0x504c
   36abc:	e583500c 	str	r5, [r3, #12]
   36ac0:	e3510000 	cmp	r1, #0
   36ac4:	e5832000 	str	r2, [r3]
   36ac8:	0a000022 	beq	36b58 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xd8>
   36acc:	e3540000 	cmp	r4, #0
   36ad0:	0a000026 	beq	36b70 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0xf0>
   36ad4:	e5940000 	ldr	r0, [r4]
   36ad8:	e1500002 	cmp	r0, r2
   36adc:	1a000029 	bne	36b88 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x108>
   36ae0:	e1510004 	cmp	r1, r4
   36ae4:	0a000009 	beq	36b10 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x90>
   36ae8:	e5942004 	ldr	r2, [r4, #4]
   36aec:	e9830014 	stmib	r3, {r2, r4}
   36af0:	e3520000 	cmp	r2, #0
   36af4:	0a000003 	beq	36b08 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x88>
   36af8:	e5921000 	ldr	r1, [r2]
   36afc:	e1510000 	cmp	r1, r0
   36b00:	05823008 	streq	r3, [r2, #8]
   36b04:	1a000025 	bne	36ba0 <CPtrListFIQ::InsertBefore(TPtrListElement*, void*)+0x120>
   36b08:	e5843004 	str	r3, [r4, #4]
   36b0c:	e8bd8070 	pop	{r4, r5, r6, pc}
   36b10:	e5831008 	str	r1, [r3, #8]
   36b14:	e3a02000 	mov	r2, #0
   36b18:	e5832004 	str	r2, [r3, #4]
   36b1c:	e5813004 	str	r3, [r1, #4]
   36b20:	e5863000 	str	r3, [r6]
   36b24:	e8bd8070 	pop	{r4, r5, r6, pc}
   36b28:	e30e1874 	movw	r1, #59508	@ 0xe874
   36b2c:	e3401003 	movt	r1, #3
   36b30:	e30a0354 	movw	r0, #41812	@ 0xa354
   36b34:	e3400003 	movt	r0, #3
   36b38:	e3a02027 	mov	r2, #39	@ 0x27
   36b3c:	ebffd4a6 	bl	2bddc <assertion_failed>
   36b40:	e30e1874 	movw	r1, #59508	@ 0xe874
   36b44:	e3401003 	movt	r1, #3
   36b48:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   36b4c:	e3400003 	movt	r0, #3
   36b50:	e3a0204c 	mov	r2, #76	@ 0x4c
   36b54:	ebffd4a0 	bl	2bddc <assertion_failed>
   36b58:	e30e1874 	movw	r1, #59508	@ 0xe874
   36b5c:	e3401003 	movt	r1, #3
   36b60:	e30e03a4 	movw	r0, #58276	@ 0xe3a4
   36b64:	e3400003 	movt	r0, #3
   36b68:	e3a02053 	mov	r2, #83	@ 0x53
   36b6c:	ebffd49a 	bl	2bddc <assertion_failed>
   36b70:	e30e1874 	movw	r1, #59508	@ 0xe874
   36b74:	e3401003 	movt	r1, #3
   36b78:	e30e03b4 	movw	r0, #58292	@ 0xe3b4
   36b7c:	e3400003 	movt	r0, #3
   36b80:	e3a02054 	mov	r2, #84	@ 0x54
   36b84:	ebffd494 	bl	2bddc <assertion_failed>
   36b88:	e30e1874 	movw	r1, #59508	@ 0xe874
   36b8c:	e3401003 	movt	r1, #3
   36b90:	e30e03c0 	movw	r0, #58304	@ 0xe3c0
   36b94:	e3400003 	movt	r0, #3
   36b98:	e3a02055 	mov	r2, #85	@ 0x55
   36b9c:	ebffd48e 	bl	2bddc <assertion_failed>
   36ba0:	e30e1874 	movw	r1, #59508	@ 0xe874
   36ba4:	e3401003 	movt	r1, #3
   36ba8:	e30e03e4 	movw	r0, #58340	@ 0xe3e4
   36bac:	e3400003 	movt	r0, #3
   36bb0:	e3a02067 	mov	r2, #103	@ 0x67
   36bb4:	ebffd488 	bl	2bddc <assertion_failed>

00036bb8 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)>:
   36bb8:	e30431b4 	movw	r3, #16820	@ 0x41b4
   36bbc:	e3403004 	movt	r3, #4
   36bc0:	e92d4070 	push	{r4, r5, r6, lr}
   36bc4:	e1a05000 	mov	r5, r0
   36bc8:	e5930000 	ldr	r0, [r3]
   36bcc:	e3500000 	cmp	r0, #0
   36bd0:	0a000027 	beq	36c74 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xbc>
   36bd4:	e1a04001 	mov	r4, r1
   36bd8:	e1a06002 	mov	r6, r2
   36bdc:	ebffd5c7 	bl	2c300 <CClassAllocator::Allocate()>
   36be0:	e2503000 	subs	r3, r0, #0
   36be4:	0a000028 	beq	36c8c <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xd4>
   36be8:	e3042651 	movw	r2, #18001	@ 0x4651
   36bec:	e345204c 	movt	r2, #20556	@ 0x504c
   36bf0:	e5951000 	ldr	r1, [r5]
   36bf4:	e3540000 	cmp	r4, #0
   36bf8:	e5832000 	str	r2, [r3]
   36bfc:	e583600c 	str	r6, [r3, #12]
   36c00:	0a00000f 	beq	36c44 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x8c>
   36c04:	e3510000 	cmp	r1, #0
   36c08:	0a000013 	beq	36c5c <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xa4>
   36c0c:	e5941000 	ldr	r1, [r4]
   36c10:	e1510002 	cmp	r1, r2
   36c14:	1a000028 	bne	36cbc <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x104>
   36c18:	e5942008 	ldr	r2, [r4, #8]
   36c1c:	e5832008 	str	r2, [r3, #8]
   36c20:	e3520000 	cmp	r2, #0
   36c24:	e5834004 	str	r4, [r3, #4]
   36c28:	0a000003 	beq	36c3c <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x84>
   36c2c:	e5920000 	ldr	r0, [r2]
   36c30:	e1500001 	cmp	r0, r1
   36c34:	05823004 	streq	r3, [r2, #4]
   36c38:	1a000025 	bne	36cd4 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0x11c>
   36c3c:	e5843008 	str	r3, [r4, #8]
   36c40:	e8bd8070 	pop	{r4, r5, r6, pc}
   36c44:	e3510000 	cmp	r1, #0
   36c48:	1a000015 	bne	36ca4 <CPtrListFIQ::InsertAfter(TPtrListElement*, void*)+0xec>
   36c4c:	e5831004 	str	r1, [r3, #4]
   36c50:	e5831008 	str	r1, [r3, #8]
   36c54:	e5853000 	str	r3, [r5]
   36c58:	e8bd8070 	pop	{r4, r5, r6, pc}
   36c5c:	e30e1874 	movw	r1, #59508	@ 0xe874
   36c60:	e3401003 	movt	r1, #3
   36c64:	e30e03a4 	movw	r0, #58276	@ 0xe3a4
   36c68:	e3400003 	movt	r0, #3
   36c6c:	e3a02084 	mov	r2, #132	@ 0x84
   36c70:	ebffd459 	bl	2bddc <assertion_failed>
   36c74:	e30e1874 	movw	r1, #59508	@ 0xe874
   36c78:	e3401003 	movt	r1, #3
   36c7c:	e30a0354 	movw	r0, #41812	@ 0xa354
   36c80:	e3400003 	movt	r0, #3
   36c84:	e3a02027 	mov	r2, #39	@ 0x27
   36c88:	ebffd453 	bl	2bddc <assertion_failed>
   36c8c:	e30e1874 	movw	r1, #59508	@ 0xe874
   36c90:	e3401003 	movt	r1, #3
   36c94:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   36c98:	e3400003 	movt	r0, #3
   36c9c:	e3a02072 	mov	r2, #114	@ 0x72
   36ca0:	ebffd44d 	bl	2bddc <assertion_failed>
   36ca4:	e30e1874 	movw	r1, #59508	@ 0xe874
   36ca8:	e3401003 	movt	r1, #3
   36cac:	e30e0370 	movw	r0, #58224	@ 0xe370
   36cb0:	e3400003 	movt	r0, #3
   36cb4:	e3a0207b 	mov	r2, #123	@ 0x7b
   36cb8:	ebffd447 	bl	2bddc <assertion_failed>
   36cbc:	e30e1874 	movw	r1, #59508	@ 0xe874
   36cc0:	e3401003 	movt	r1, #3
   36cc4:	e30e040c 	movw	r0, #58380	@ 0xe40c
   36cc8:	e3400003 	movt	r0, #3
   36ccc:	e3a02085 	mov	r2, #133	@ 0x85
   36cd0:	ebffd441 	bl	2bddc <assertion_failed>
   36cd4:	e30e1874 	movw	r1, #59508	@ 0xe874
   36cd8:	e3401003 	movt	r1, #3
   36cdc:	e30e0430 	movw	r0, #58416	@ 0xe430
   36ce0:	e3400003 	movt	r0, #3
   36ce4:	e3a0208c 	mov	r2, #140	@ 0x8c
   36ce8:	ebffd43b 	bl	2bddc <assertion_failed>

00036cec <CPtrListFIQ::Remove(TPtrListElement*)>:
   36cec:	e3510000 	cmp	r1, #0
   36cf0:	e92d4010 	push	{r4, lr}
   36cf4:	0a000031 	beq	36dc0 <CPtrListFIQ::Remove(TPtrListElement*)+0xd4>
   36cf8:	e5912000 	ldr	r2, [r1]
   36cfc:	e3043651 	movw	r3, #18001	@ 0x4651
   36d00:	e345304c 	movt	r3, #20556	@ 0x504c
   36d04:	e1520003 	cmp	r2, r3
   36d08:	1a000032 	bne	36dd8 <CPtrListFIQ::Remove(TPtrListElement*)+0xec>
   36d0c:	e5903000 	ldr	r3, [r0]
   36d10:	e1530001 	cmp	r3, r1
   36d14:	0a000014 	beq	36d6c <CPtrListFIQ::Remove(TPtrListElement*)+0x80>
   36d18:	e5913004 	ldr	r3, [r1, #4]
   36d1c:	e3530000 	cmp	r3, #0
   36d20:	0a000038 	beq	36e08 <CPtrListFIQ::Remove(TPtrListElement*)+0x11c>
   36d24:	e5930000 	ldr	r0, [r3]
   36d28:	e1500002 	cmp	r0, r2
   36d2c:	1a00001d 	bne	36da8 <CPtrListFIQ::Remove(TPtrListElement*)+0xbc>
   36d30:	e5912008 	ldr	r2, [r1, #8]
   36d34:	e5832008 	str	r2, [r3, #8]
   36d38:	e3520000 	cmp	r2, #0
   36d3c:	0a000003 	beq	36d50 <CPtrListFIQ::Remove(TPtrListElement*)+0x64>
   36d40:	e592c000 	ldr	ip, [r2]
   36d44:	e15c0000 	cmp	ip, r0
   36d48:	05823004 	streq	r3, [r2, #4]
   36d4c:	1a000033 	bne	36e20 <CPtrListFIQ::Remove(TPtrListElement*)+0x134>
   36d50:	e30431b4 	movw	r3, #16820	@ 0x41b4
   36d54:	e3403004 	movt	r3, #4
   36d58:	e5930000 	ldr	r0, [r3]
   36d5c:	e3500000 	cmp	r0, #0
   36d60:	0a000022 	beq	36df0 <CPtrListFIQ::Remove(TPtrListElement*)+0x104>
   36d64:	e8bd4010 	pop	{r4, lr}
   36d68:	eaffd59f 	b	2c3ec <CClassAllocator::Free(void*)>
   36d6c:	e5933008 	ldr	r3, [r3, #8]
   36d70:	e5803000 	str	r3, [r0]
   36d74:	e3530000 	cmp	r3, #0
   36d78:	0afffff4 	beq	36d50 <CPtrListFIQ::Remove(TPtrListElement*)+0x64>
   36d7c:	e5930000 	ldr	r0, [r3]
   36d80:	e1500002 	cmp	r0, r2
   36d84:	03a02000 	moveq	r2, #0
   36d88:	05832004 	streq	r2, [r3, #4]
   36d8c:	0affffef 	beq	36d50 <CPtrListFIQ::Remove(TPtrListElement*)+0x64>
   36d90:	e30e1874 	movw	r1, #59508	@ 0xe874
   36d94:	e3401003 	movt	r1, #3
   36d98:	e30e045c 	movw	r0, #58460	@ 0xe45c
   36d9c:	e3400003 	movt	r0, #3
   36da0:	e3a0209f 	mov	r2, #159	@ 0x9f
   36da4:	ebffd40c 	bl	2bddc <assertion_failed>
   36da8:	e30e1874 	movw	r1, #59508	@ 0xe874
   36dac:	e3401003 	movt	r1, #3
   36db0:	e30e04a0 	movw	r0, #58528	@ 0xe4a0
   36db4:	e3400003 	movt	r0, #3
   36db8:	e3a020a6 	mov	r2, #166	@ 0xa6
   36dbc:	ebffd406 	bl	2bddc <assertion_failed>
   36dc0:	e30e1874 	movw	r1, #59508	@ 0xe874
   36dc4:	e3401003 	movt	r1, #3
   36dc8:	e30e00d8 	movw	r0, #57560	@ 0xe0d8
   36dcc:	e3400003 	movt	r0, #3
   36dd0:	e3a02096 	mov	r2, #150	@ 0x96
   36dd4:	ebffd400 	bl	2bddc <assertion_failed>
   36dd8:	e30e1874 	movw	r1, #59508	@ 0xe874
   36ddc:	e3401003 	movt	r1, #3
   36de0:	e30e0380 	movw	r0, #58240	@ 0xe380
   36de4:	e3400003 	movt	r0, #3
   36de8:	e3a02097 	mov	r2, #151	@ 0x97
   36dec:	ebffd3fa 	bl	2bddc <assertion_failed>
   36df0:	e30e1874 	movw	r1, #59508	@ 0xe874
   36df4:	e3401003 	movt	r1, #3
   36df8:	e30a0354 	movw	r0, #41812	@ 0xa354
   36dfc:	e3400003 	movt	r0, #3
   36e00:	e3a02027 	mov	r2, #39	@ 0x27
   36e04:	ebffd3f4 	bl	2bddc <assertion_failed>
   36e08:	e30e1874 	movw	r1, #59508	@ 0xe874
   36e0c:	e3401003 	movt	r1, #3
   36e10:	e30e0488 	movw	r0, #58504	@ 0xe488
   36e14:	e3400003 	movt	r0, #3
   36e18:	e3a020a5 	mov	r2, #165	@ 0xa5
   36e1c:	ebffd3ee 	bl	2bddc <assertion_failed>
   36e20:	e30e1874 	movw	r1, #59508	@ 0xe874
   36e24:	e3401003 	movt	r1, #3
   36e28:	e30e045c 	movw	r0, #58460	@ 0xe45c
   36e2c:	e3400003 	movt	r0, #3
   36e30:	e3a020ab 	mov	r2, #171	@ 0xab
   36e34:	ebffd3e8 	bl	2bddc <assertion_failed>

00036e38 <CPtrListFIQ::Find(void*)>:
   36e38:	e5900000 	ldr	r0, [r0]
   36e3c:	e3500000 	cmp	r0, #0
   36e40:	012fff1e 	bxeq	lr
   36e44:	e3042651 	movw	r2, #18001	@ 0x4651
   36e48:	e345204c 	movt	r2, #20556	@ 0x504c
   36e4c:	ea000005 	b	36e68 <CPtrListFIQ::Find(void*)+0x30>
   36e50:	e590300c 	ldr	r3, [r0, #12]
   36e54:	e1530001 	cmp	r3, r1
   36e58:	012fff1e 	bxeq	lr
   36e5c:	e5900008 	ldr	r0, [r0, #8]
   36e60:	e3500000 	cmp	r0, #0
   36e64:	012fff1e 	bxeq	lr
   36e68:	e5903000 	ldr	r3, [r0]
   36e6c:	e1530002 	cmp	r3, r2
   36e70:	0afffff6 	beq	36e50 <CPtrListFIQ::Find(void*)+0x18>
   36e74:	e30e1874 	movw	r1, #59508	@ 0xe874
   36e78:	e3401003 	movt	r1, #3
   36e7c:	e30e0380 	movw	r0, #58240	@ 0xe380
   36e80:	e3400003 	movt	r0, #3
   36e84:	e3a020ba 	mov	r2, #186	@ 0xba
   36e88:	e92d4010 	push	{r4, lr}
   36e8c:	ebffd3d2 	bl	2bddc <assertion_failed>

00036e90 <InvalidateDataCacheL1Only>:
   36e90:	e92d0070 	push	{r4, r5, r6}
   36e94:	e3a00000 	mov	r0, #0
   36e98:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   36e9c:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   36ea0:	e3071fff 	movw	r1, #32767	@ 0x7fff
   36ea4:	e00126a0 	and	r2, r1, r0, lsr #13
   36ea8:	e30013ff 	movw	r1, #1023	@ 0x3ff
   36eac:	e00131a0 	and	r3, r1, r0, lsr #3
   36eb0:	e2822001 	add	r2, r2, #1
   36eb4:	e2000007 	and	r0, r0, #7
   36eb8:	e2800004 	add	r0, r0, #4
   36ebc:	e16f1f13 	clz	r1, r3
   36ec0:	e2834001 	add	r4, r3, #1
   36ec4:	e2422001 	sub	r2, r2, #1
   36ec8:	e1a03004 	mov	r3, r4
   36ecc:	e2533001 	subs	r3, r3, #1
   36ed0:	e1a05113 	lsl	r5, r3, r1
   36ed4:	e1a06012 	lsl	r6, r2, r0
   36ed8:	e1855006 	orr	r5, r5, r6
   36edc:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   36ee0:	cafffff9 	bgt	36ecc <InvalidateDataCacheL1Only+0x3c>
   36ee4:	e3520000 	cmp	r2, #0
   36ee8:	cafffff5 	bgt	36ec4 <InvalidateDataCacheL1Only+0x34>
   36eec:	f57ff04e 	dsb	st
   36ef0:	f57ff06f 	isb	sy
   36ef4:	e8bd0070 	pop	{r4, r5, r6}
   36ef8:	e12fff1e 	bx	lr

00036efc <InvalidateDataCache>:
   36efc:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   36f00:	f57ff05f 	dmb	sy
   36f04:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   36f08:	e1a03ba0 	lsr	r3, r0, #23
   36f0c:	e213300e 	ands	r3, r3, #14
   36f10:	0a00001d 	beq	36f8c <InvalidateDataCache+0x90>
   36f14:	e3a0a000 	mov	sl, #0
   36f18:	e08a20aa 	add	r2, sl, sl, lsr #1
   36f1c:	e1a01230 	lsr	r1, r0, r2
   36f20:	e2011007 	and	r1, r1, #7
   36f24:	e3510002 	cmp	r1, #2
   36f28:	ba000014 	blt	36f80 <InvalidateDataCache+0x84>
   36f2c:	e10f9000 	mrs	r9, CPSR
   36f30:	f10c0080 	cpsid	i
   36f34:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   36f38:	f57ff06f 	isb	sy
   36f3c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   36f40:	e121f009 	msr	CPSR_c, r9
   36f44:	e2012007 	and	r2, r1, #7
   36f48:	e2822004 	add	r2, r2, #4
   36f4c:	e30043ff 	movw	r4, #1023	@ 0x3ff
   36f50:	e01441a1 	ands	r4, r4, r1, lsr #3
   36f54:	e16f5f14 	clz	r5, r4
   36f58:	e3077fff 	movw	r7, #32767	@ 0x7fff
   36f5c:	e01776a1 	ands	r7, r7, r1, lsr #13
   36f60:	e1a09007 	mov	r9, r7
   36f64:	e18ab514 	orr	fp, sl, r4, lsl r5
   36f68:	e18bb219 	orr	fp, fp, r9, lsl r2
   36f6c:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   36f70:	e2599001 	subs	r9, r9, #1
   36f74:	aafffffa 	bge	36f64 <InvalidateDataCache+0x68>
   36f78:	e2544001 	subs	r4, r4, #1
   36f7c:	aafffff7 	bge	36f60 <InvalidateDataCache+0x64>
   36f80:	e28aa002 	add	sl, sl, #2
   36f84:	e153000a 	cmp	r3, sl
   36f88:	caffffe2 	bgt	36f18 <InvalidateDataCache+0x1c>
   36f8c:	e3a0a000 	mov	sl, #0
   36f90:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   36f94:	f57ff04e 	dsb	st
   36f98:	f57ff06f 	isb	sy
   36f9c:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   36fa0:	e12fff1e 	bx	lr

00036fa4 <CleanDataCache>:
   36fa4:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   36fa8:	f57ff05f 	dmb	sy
   36fac:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   36fb0:	e1a03ba0 	lsr	r3, r0, #23
   36fb4:	e213300e 	ands	r3, r3, #14
   36fb8:	0a00001d 	beq	37034 <CleanDataCache+0x90>
   36fbc:	e3a0a000 	mov	sl, #0
   36fc0:	e08a20aa 	add	r2, sl, sl, lsr #1
   36fc4:	e1a01230 	lsr	r1, r0, r2
   36fc8:	e2011007 	and	r1, r1, #7
   36fcc:	e3510002 	cmp	r1, #2
   36fd0:	ba000014 	blt	37028 <CleanDataCache+0x84>
   36fd4:	e10f9000 	mrs	r9, CPSR
   36fd8:	f10c0080 	cpsid	i
   36fdc:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   36fe0:	f57ff06f 	isb	sy
   36fe4:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   36fe8:	e121f009 	msr	CPSR_c, r9
   36fec:	e2012007 	and	r2, r1, #7
   36ff0:	e2822004 	add	r2, r2, #4
   36ff4:	e30043ff 	movw	r4, #1023	@ 0x3ff
   36ff8:	e01441a1 	ands	r4, r4, r1, lsr #3
   36ffc:	e16f5f14 	clz	r5, r4
   37000:	e3077fff 	movw	r7, #32767	@ 0x7fff
   37004:	e01776a1 	ands	r7, r7, r1, lsr #13
   37008:	e1a09007 	mov	r9, r7
   3700c:	e18ab514 	orr	fp, sl, r4, lsl r5
   37010:	e18bb219 	orr	fp, fp, r9, lsl r2
   37014:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   37018:	e2599001 	subs	r9, r9, #1
   3701c:	aafffffa 	bge	3700c <CleanDataCache+0x68>
   37020:	e2544001 	subs	r4, r4, #1
   37024:	aafffff7 	bge	37008 <CleanDataCache+0x64>
   37028:	e28aa002 	add	sl, sl, #2
   3702c:	e153000a 	cmp	r3, sl
   37030:	caffffe2 	bgt	36fc0 <CleanDataCache+0x1c>
   37034:	e3a0a000 	mov	sl, #0
   37038:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   3703c:	f57ff04e 	dsb	st
   37040:	f57ff06f 	isb	sy
   37044:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   37048:	e12fff1e 	bx	lr

0003704c <CleanAndInvalidateDataCacheRange>:
   3704c:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   37050:	e1a03823 	lsr	r3, r3, #16
   37054:	e203300f 	and	r3, r3, #15
   37058:	e3a02004 	mov	r2, #4
   3705c:	e1a02312 	lsl	r2, r2, r3
   37060:	e0801001 	add	r1, r0, r1
   37064:	e2423001 	sub	r3, r2, #1
   37068:	e1c00003 	bic	r0, r0, r3
   3706c:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   37070:	e0800002 	add	r0, r0, r2
   37074:	e1500001 	cmp	r0, r1
   37078:	3afffffb 	bcc	3706c <CleanAndInvalidateDataCacheRange+0x20>
   3707c:	f57ff04e 	dsb	st
   37080:	e12fff1e 	bx	lr

00037084 <CExceptionHandler::~CExceptionHandler()>:
   37084:	e30431b8 	movw	r3, #16824	@ 0x41b8
   37088:	e3403004 	movt	r3, #4
   3708c:	e3a02000 	mov	r2, #0
   37090:	e5832000 	str	r2, [r3]
   37094:	e12fff1e 	bx	lr

00037098 <CExceptionHandler::~CExceptionHandler()>:
   37098:	e30431b8 	movw	r3, #16824	@ 0x41b8
   3709c:	e3403004 	movt	r3, #4
   370a0:	e92d4010 	push	{r4, lr}
   370a4:	e3a01004 	mov	r1, #4
   370a8:	e1a04000 	mov	r4, r0
   370ac:	e3a02000 	mov	r2, #0
   370b0:	e5832000 	str	r2, [r3]
   370b4:	ebfffc32 	bl	36184 <operator delete(void*, unsigned int)>
   370b8:	e1a00004 	mov	r0, r4
   370bc:	e8bd8010 	pop	{r4, pc}

000370c0 <CExceptionHandler::Throw(unsigned int)>:
   370c0:	e92d4010 	push	{r4, lr}
   370c4:	e1a04001 	mov	r4, r1
   370c8:	e24dd008 	sub	sp, sp, #8
   370cc:	ebffddbd 	bl	2e7c8 <CLogger::Get()>
   370d0:	e304c028 	movw	ip, #16424	@ 0x4028
   370d4:	e340c004 	movt	ip, #4
   370d8:	e3a02000 	mov	r2, #0
   370dc:	e30e38b8 	movw	r3, #59576	@ 0xe8b8
   370e0:	e3403003 	movt	r3, #3
   370e4:	e79c1104 	ldr	r1, [ip, r4, lsl #2]
   370e8:	e58d1000 	str	r1, [sp]
   370ec:	e3021b58 	movw	r1, #11096	@ 0x2b58
   370f0:	e3401004 	movt	r1, #4
   370f4:	ebffdf7c 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   370f8:	e28dd008 	add	sp, sp, #8
   370fc:	e8bd8010 	pop	{r4, pc}

00037100 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   37100:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
   37104:	e3510002 	cmp	r1, #2
   37108:	e1a05001 	mov	r5, r1
   3710c:	e24dd024 	sub	sp, sp, #36	@ 0x24
   37110:	e1a04002 	mov	r4, r2
   37114:	0a000030 	beq	371dc <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   37118:	e3510003 	cmp	r1, #3
   3711c:	13a08000 	movne	r8, #0
   37120:	11a09008 	movne	r9, r8
   37124:	0a000022 	beq	371b4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xb4>
   37128:	e3540000 	cmp	r4, #0
   3712c:	0a000024 	beq	371c4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xc4>
   37130:	e594304c 	ldr	r3, [r4, #76]	@ 0x4c
   37134:	e5947048 	ldr	r7, [r4, #72]	@ 0x48
   37138:	e203301f 	and	r3, r3, #31
   3713c:	e5946044 	ldr	r6, [r4, #68]	@ 0x44
   37140:	e3530011 	cmp	r3, #17
   37144:	0a000027 	beq	371e8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   37148:	e3530012 	cmp	r3, #18
   3714c:	089400c0 	ldmeq	r4, {r6, r7}
   37150:	e1a00006 	mov	r0, r6
   37154:	e3021b58 	movw	r1, #11096	@ 0x2b58
   37158:	e3401004 	movt	r1, #4
   3715c:	ebffd51b 	bl	2c5d0 <debug_stacktrace(unsigned int const*, char const*)>
   37160:	ebffdd98 	bl	2e7c8 <CLogger::Get()>
   37164:	e58d7014 	str	r7, [sp, #20]
   37168:	e58d6010 	str	r6, [sp, #16]
   3716c:	e3043028 	movw	r3, #16424	@ 0x4028
   37170:	e3403004 	movt	r3, #4
   37174:	e58d800c 	str	r8, [sp, #12]
   37178:	e3021b58 	movw	r1, #11096	@ 0x2b58
   3717c:	e3401004 	movt	r1, #4
   37180:	e5942050 	ldr	r2, [r4, #80]	@ 0x50
   37184:	e58d2004 	str	r2, [sp, #4]
   37188:	e594204c 	ldr	r2, [r4, #76]	@ 0x4c
   3718c:	e58d2018 	str	r2, [sp, #24]
   37190:	e3a02000 	mov	r2, #0
   37194:	e58d9008 	str	r9, [sp, #8]
   37198:	e793c105 	ldr	ip, [r3, r5, lsl #2]
   3719c:	e30e38e0 	movw	r3, #59616	@ 0xe8e0
   371a0:	e3403003 	movt	r3, #3
   371a4:	e58dc000 	str	ip, [sp]
   371a8:	ebffdf4f 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   371ac:	e28dd024 	add	sp, sp, #36	@ 0x24
   371b0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
   371b4:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   371b8:	ee168f10 	mrc	15, 0, r8, cr6, cr0, {0}
   371bc:	e3540000 	cmp	r4, #0
   371c0:	1affffda 	bne	37130 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x30>
   371c4:	e30e18c8 	movw	r1, #59592	@ 0xe8c8
   371c8:	e3401003 	movt	r1, #3
   371cc:	e30c0ec8 	movw	r0, #52936	@ 0xcec8
   371d0:	e3400003 	movt	r0, #3
   371d4:	e3a02069 	mov	r2, #105	@ 0x69
   371d8:	ebffd2ff 	bl	2bddc <assertion_failed>
   371dc:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   371e0:	ee168f50 	mrc	15, 0, r8, cr6, cr0, {2}
   371e4:	eaffffcf 	b	37128 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x28>
   371e8:	e594700c 	ldr	r7, [r4, #12]
   371ec:	e5946008 	ldr	r6, [r4, #8]
   371f0:	eaffffd6 	b	37150 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x50>

000371f4 <CExceptionHandler::CExceptionHandler()>:
   371f4:	e30421b8 	movw	r2, #16824	@ 0x41b8
   371f8:	e3402004 	movt	r2, #4
   371fc:	e92d4010 	push	{r4, lr}
   37200:	e59f10bc 	ldr	r1, [pc, #188]	@ 372c4 <CExceptionHandler::CExceptionHandler()+0xd0>
   37204:	e5923000 	ldr	r3, [r2]
   37208:	e24dd008 	sub	sp, sp, #8
   3720c:	e5801000 	str	r1, [r0]
   37210:	e3530000 	cmp	r3, #0
   37214:	1a000024 	bne	372ac <CExceptionHandler::CExceptionHandler()+0xb8>
   37218:	e3a03004 	mov	r3, #4
   3721c:	e58d3004 	str	r3, [sp, #4]
   37220:	e59d1004 	ldr	r1, [sp, #4]
   37224:	e30734d8 	movw	r3, #29912	@ 0x74d8
   37228:	e3403003 	movt	r3, #3
   3722c:	e1a04000 	mov	r4, r0
   37230:	e0433001 	sub	r3, r3, r1
   37234:	e59d0004 	ldr	r0, [sp, #4]
   37238:	e59d1004 	ldr	r1, [sp, #4]
   3723c:	e1a03143 	asr	r3, r3, #2
   37240:	e5824000 	str	r4, [r2]
   37244:	e2433002 	sub	r3, r3, #2
   37248:	e2812008 	add	r2, r1, #8
   3724c:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   37250:	e5803000 	str	r3, [r0]
   37254:	e59d0004 	ldr	r0, [sp, #4]
   37258:	e3073438 	movw	r3, #29752	@ 0x7438
   3725c:	e3403003 	movt	r3, #3
   37260:	e59d1004 	ldr	r1, [sp, #4]
   37264:	e0432002 	sub	r2, r3, r2
   37268:	e3073488 	movw	r3, #29832	@ 0x7488
   3726c:	e3403003 	movt	r3, #3
   37270:	e281100c 	add	r1, r1, #12
   37274:	e0433001 	sub	r3, r3, r1
   37278:	e59d1004 	ldr	r1, [sp, #4]
   3727c:	e1a02142 	asr	r2, r2, #2
   37280:	e1a03143 	asr	r3, r3, #2
   37284:	e2422002 	sub	r2, r2, #2
   37288:	e2433002 	sub	r3, r3, #2
   3728c:	e38224ea 	orr	r2, r2, #-369098752	@ 0xea000000
   37290:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   37294:	e5802008 	str	r2, [r0, #8]
   37298:	e581300c 	str	r3, [r1, #12]
   3729c:	eb0001f7 	bl	37a80 <SyncDataAndInstructionCache>
   372a0:	e1a00004 	mov	r0, r4
   372a4:	e28dd008 	add	sp, sp, #8
   372a8:	e8bd8010 	pop	{r4, pc}
   372ac:	e30e18c8 	movw	r1, #59592	@ 0xe8c8
   372b0:	e3401003 	movt	r1, #3
   372b4:	e30c0b90 	movw	r0, #52112	@ 0xcb90
   372b8:	e3400003 	movt	r0, #3
   372bc:	e3a02030 	mov	r2, #48	@ 0x30
   372c0:	ebffd2c5 	bl	2bddc <assertion_failed>
   372c4:	00042b68 	.word	0x00042b68

000372c8 <CExceptionHandler::Get()>:
   372c8:	e30431b8 	movw	r3, #16824	@ 0x41b8
   372cc:	e3403004 	movt	r3, #4
   372d0:	e5930000 	ldr	r0, [r3]
   372d4:	e3500000 	cmp	r0, #0
   372d8:	112fff1e 	bxne	lr
   372dc:	e30e18c8 	movw	r1, #59592	@ 0xe8c8
   372e0:	e3401003 	movt	r1, #3
   372e4:	e30b051c 	movw	r0, #46364	@ 0xb51c
   372e8:	e3400003 	movt	r0, #3
   372ec:	e3a02087 	mov	r2, #135	@ 0x87
   372f0:	e92d4010 	push	{r4, lr}
   372f4:	ebffd2b8 	bl	2bddc <assertion_failed>

000372f8 <ExceptionHandler>:
   372f8:	e92d4070 	push	{r4, r5, r6, lr}
   372fc:	e1a04000 	mov	r4, r0
   37300:	e1a05001 	mov	r5, r1
   37304:	eb00033c 	bl	37ffc <CInterruptSystem::DisableFIQ()>
   37308:	f1080040 	cpsie	f
   3730c:	e30431b8 	movw	r3, #16824	@ 0x41b8
   37310:	e3403004 	movt	r3, #4
   37314:	e5930000 	ldr	r0, [r3]
   37318:	e3500000 	cmp	r0, #0
   3731c:	0a000005 	beq	37338 <ExceptionHandler+0x40>
   37320:	e5903000 	ldr	r3, [r0]
   37324:	e1a02005 	mov	r2, r5
   37328:	e1a01004 	mov	r1, r4
   3732c:	e8bd4070 	pop	{r4, r5, r6, lr}
   37330:	e593300c 	ldr	r3, [r3, #12]
   37334:	e12fff13 	bx	r3
   37338:	e30e18c8 	movw	r1, #59592	@ 0xe8c8
   3733c:	e3401003 	movt	r1, #3
   37340:	e30b051c 	movw	r0, #46364	@ 0xb51c
   37344:	e3400003 	movt	r0, #3
   37348:	e3a02087 	mov	r2, #135	@ 0x87
   3734c:	ebffd2a2 	bl	2bddc <assertion_failed>

00037350 <raise>:
   37350:	e30431b8 	movw	r3, #16824	@ 0x41b8
   37354:	e3403004 	movt	r3, #4
   37358:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   3735c:	e5930000 	ldr	r0, [r3]
   37360:	e24dd00c 	sub	sp, sp, #12
   37364:	e3500000 	cmp	r0, #0
   37368:	0a000018 	beq	373d0 <raise+0x80>
   3736c:	e5902000 	ldr	r2, [r0]
   37370:	e30730c0 	movw	r3, #28864	@ 0x70c0
   37374:	e3403003 	movt	r3, #3
   37378:	e5922008 	ldr	r2, [r2, #8]
   3737c:	e1520003 	cmp	r2, r3
   37380:	1a00000d 	bne	373bc <raise+0x6c>
   37384:	ebffdd0f 	bl	2e7c8 <CLogger::Get()>
   37388:	e304c028 	movw	ip, #16424	@ 0x4028
   3738c:	e340c004 	movt	ip, #4
   37390:	e3a02000 	mov	r2, #0
   37394:	e30e38b8 	movw	r3, #59576	@ 0xe8b8
   37398:	e3403003 	movt	r3, #3
   3739c:	e3021b58 	movw	r1, #11096	@ 0x2b58
   373a0:	e3401004 	movt	r1, #4
   373a4:	e59cc010 	ldr	ip, [ip, #16]
   373a8:	e58dc000 	str	ip, [sp]
   373ac:	ebffdece 	bl	2eeec <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   373b0:	e3a00000 	mov	r0, #0
   373b4:	e28dd00c 	add	sp, sp, #12
   373b8:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   373bc:	e3a01004 	mov	r1, #4
   373c0:	e12fff32 	blx	r2
   373c4:	e3a00000 	mov	r0, #0
   373c8:	e28dd00c 	add	sp, sp, #12
   373cc:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
   373d0:	e30e18c8 	movw	r1, #59592	@ 0xe8c8
   373d4:	e3401003 	movt	r1, #3
   373d8:	e30b051c 	movw	r0, #46364	@ 0xb51c
   373dc:	e3400003 	movt	r0, #3
   373e0:	e3a02087 	mov	r2, #135	@ 0x87
   373e4:	ebffd27c 	bl	2bddc <assertion_failed>

000373e8 <UndefinedInstructionInternal>:
   373e8:	e24dd004 	sub	sp, sp, #4
   373ec:	e24ee004 	sub	lr, lr, #4
   373f0:	e92d4000 	stmfd	sp!, {lr}
   373f4:	e14fe000 	mrs	lr, SPSR
   373f8:	e92d4000 	stmfd	sp!, {lr}
   373fc:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   37400:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   37404:	e1a0100d 	mov	r1, sp
   37408:	f1020012 	cps	#18
   3740c:	e1a0200d 	mov	r2, sp
   37410:	e1a0300e 	mov	r3, lr
   37414:	f1020011 	cps	#17
   37418:	e1a0400d 	mov	r4, sp
   3741c:	e1a0500e 	mov	r5, lr
   37420:	f102001f 	cps	#31
   37424:	e1a0d001 	mov	sp, r1
   37428:	e92d003c 	push	{r2, r3, r4, r5}
   3742c:	e1a0100d 	mov	r1, sp
   37430:	e3a00001 	mov	r0, #1
   37434:	eaffffaf 	b	372f8 <ExceptionHandler>

00037438 <PrefetchAbortStub>:
   37438:	e24dd004 	sub	sp, sp, #4
   3743c:	e24ee004 	sub	lr, lr, #4
   37440:	e92d4000 	stmfd	sp!, {lr}
   37444:	e14fe000 	mrs	lr, SPSR
   37448:	e92d4000 	stmfd	sp!, {lr}
   3744c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   37450:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   37454:	e1a0100d 	mov	r1, sp
   37458:	f1020012 	cps	#18
   3745c:	e1a0200d 	mov	r2, sp
   37460:	e1a0300e 	mov	r3, lr
   37464:	f1020011 	cps	#17
   37468:	e1a0400d 	mov	r4, sp
   3746c:	e1a0500e 	mov	r5, lr
   37470:	f102001f 	cps	#31
   37474:	e1a0d001 	mov	sp, r1
   37478:	e92d003c 	push	{r2, r3, r4, r5}
   3747c:	e1a0100d 	mov	r1, sp
   37480:	e3a00002 	mov	r0, #2
   37484:	eaffff9b 	b	372f8 <ExceptionHandler>

00037488 <DataAbortStub>:
   37488:	e24dd004 	sub	sp, sp, #4
   3748c:	e24ee008 	sub	lr, lr, #8
   37490:	e92d4000 	stmfd	sp!, {lr}
   37494:	e14fe000 	mrs	lr, SPSR
   37498:	e92d4000 	stmfd	sp!, {lr}
   3749c:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   374a0:	e24dd03c 	sub	sp, sp, #60	@ 0x3c
   374a4:	e1a0100d 	mov	r1, sp
   374a8:	f1020012 	cps	#18
   374ac:	e1a0200d 	mov	r2, sp
   374b0:	e1a0300e 	mov	r3, lr
   374b4:	f1020011 	cps	#17
   374b8:	e1a0400d 	mov	r4, sp
   374bc:	e1a0500e 	mov	r5, lr
   374c0:	f102001f 	cps	#31
   374c4:	e1a0d001 	mov	sp, r1
   374c8:	e92d003c 	push	{r2, r3, r4, r5}
   374cc:	e1a0100d 	mov	r1, sp
   374d0:	e3a00003 	mov	r0, #3
   374d4:	eaffff87 	b	372f8 <ExceptionHandler>

000374d8 <UndefinedInstructionStub>:
   374d8:	e92d4001 	push	{r0, lr}
   374dc:	eef80a10 	vmrs	r0, fpexc
   374e0:	e3100102 	tst	r0, #-2147483648	@ 0x80000000
   374e4:	0affffbf 	beq	373e8 <UndefinedInstructionInternal>
   374e8:	e3c00102 	bic	r0, r0, #-2147483648	@ 0x80000000
   374ec:	eee80a10 	vmsr	fpexc, r0
   374f0:	e8fd8001 	ldm	sp!, {r0, pc}^

000374f4 <IRQStub>:
   374f4:	e24ee004 	sub	lr, lr, #4
   374f8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   374fc:	e24dd004 	sub	sp, sp, #4
   37500:	eef10a10 	vmrs	r0, fpscr
   37504:	e92d0001 	stmfd	sp!, {r0}
   37508:	ed2d0b20 	vpush	{d0-d15}
   3750c:	ed6d0b20 	vpush	{d16-d31}
   37510:	e59f008c 	ldr	r0, [pc, #140]	@ 375a4 <FIQStub+0x70>
   37514:	e580e000 	str	lr, [r0]
   37518:	eb00032f 	bl	381dc <InterruptHandler>
   3751c:	ecfd0b20 	vpop	{d16-d31}
   37520:	ecbd0b20 	vpop	{d0-d15}
   37524:	e8bd0001 	ldmfd	sp!, {r0}
   37528:	eee10a10 	vmsr	fpscr, r0
   3752c:	e28dd004 	add	sp, sp, #4
   37530:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00037534 <FIQStub>:
   37534:	e24ee004 	sub	lr, lr, #4
   37538:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   3753c:	e24dd004 	sub	sp, sp, #4
   37540:	eef10a10 	vmrs	r0, fpscr
   37544:	e92d0001 	stmfd	sp!, {r0}
   37548:	ed2d0b20 	vpush	{d0-d15}
   3754c:	ed6d0b20 	vpush	{d16-d31}
   37550:	e59f2050 	ldr	r2, [pc, #80]	@ 375a8 <FIQStub+0x74>
   37554:	e5921000 	ldr	r1, [r2]
   37558:	e3510000 	cmp	r1, #0
   3755c:	0a000007 	beq	37580 <FIQStub+0x4c>
   37560:	e5920004 	ldr	r0, [r2, #4]
   37564:	e12fff31 	blx	r1
   37568:	ecfd0b20 	vpop	{d16-d31}
   3756c:	ecbd0b20 	vpop	{d0-d15}
   37570:	e8bd0001 	ldmfd	sp!, {r0}
   37574:	eee10a10 	vmsr	fpscr, r0
   37578:	e28dd004 	add	sp, sp, #4
   3757c:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   37580:	e59f1024 	ldr	r1, [pc, #36]	@ 375ac <FIQStub+0x78>
   37584:	e3a00000 	mov	r0, #0
   37588:	e5810000 	str	r0, [r1]
   3758c:	ecfd0b20 	vpop	{d16-d31}
   37590:	ecbd0b20 	vpop	{d0-d15}
   37594:	e8bd0001 	ldmfd	sp!, {r0}
   37598:	eee10a10 	vmsr	fpscr, r0
   3759c:	e28dd004 	add	sp, sp, #4
   375a0:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   375a4:	00044048 	.word	0x00044048
   375a8:	0004403c 	.word	0x0004403c
   375ac:	3f00b20c 	.word	0x3f00b20c

000375b0 <CMemorySystem::~CMemorySystem()>:
   375b0:	e30431bc 	movw	r3, #16828	@ 0x41bc
   375b4:	e3403004 	movt	r3, #4
   375b8:	e92d4070 	push	{r4, r5, r6, lr}
   375bc:	e1a04000 	mov	r4, r0
   375c0:	e5932000 	ldr	r2, [r3]
   375c4:	e1500002 	cmp	r0, r2
   375c8:	0a000005 	beq	375e4 <CMemorySystem::~CMemorySystem()+0x34>
   375cc:	e28400c8 	add	r0, r4, #200	@ 0xc8
   375d0:	eb000861 	bl	3975c <CPageAllocator::~CPageAllocator()>
   375d4:	e284000c 	add	r0, r4, #12
   375d8:	ebfffb0c 	bl	36210 <CHeapAllocator::~CHeapAllocator()>
   375dc:	e1a00004 	mov	r0, r4
   375e0:	e8bd8070 	pop	{r4, r5, r6, pc}
   375e4:	e5d02000 	ldrb	r2, [r0]
   375e8:	e3a05000 	mov	r5, #0
   375ec:	e5835000 	str	r5, [r3]
   375f0:	e1520005 	cmp	r2, r5
   375f4:	0afffff4 	beq	375cc <CMemorySystem::~CMemorySystem()+0x1c>
   375f8:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   375fc:	e3c33005 	bic	r3, r3, #5
   37600:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   37604:	ebfffe66 	bl	36fa4 <CleanDataCache>
   37608:	ebfffe3b 	bl	36efc <InvalidateDataCache>
   3760c:	ee085f17 	mcr	15, 0, r5, cr8, cr7, {0}
   37610:	f57ff04f 	dsb	sy
   37614:	eaffffec 	b	375cc <CMemorySystem::~CMemorySystem()+0x1c>

00037618 <CMemorySystem::Destructor()>:
   37618:	e30431bc 	movw	r3, #16828	@ 0x41bc
   3761c:	e3403004 	movt	r3, #4
   37620:	e5932000 	ldr	r2, [r3]
   37624:	e1520000 	cmp	r2, r0
   37628:	112fff1e 	bxne	lr
   3762c:	e5d22000 	ldrb	r2, [r2]
   37630:	e92d4010 	push	{r4, lr}
   37634:	e3a04000 	mov	r4, #0
   37638:	e1520004 	cmp	r2, r4
   3763c:	e5834000 	str	r4, [r3]
   37640:	08bd8010 	popeq	{r4, pc}
   37644:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   37648:	e3c33005 	bic	r3, r3, #5
   3764c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   37650:	ebfffe53 	bl	36fa4 <CleanDataCache>
   37654:	ebfffe28 	bl	36efc <InvalidateDataCache>
   37658:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   3765c:	f57ff04f 	dsb	sy
   37660:	e8bd8010 	pop	{r4, pc}

00037664 <CMemorySystem::GetMemSize() const>:
   37664:	e30431bc 	movw	r3, #16828	@ 0x41bc
   37668:	e3403004 	movt	r3, #4
   3766c:	e5933000 	ldr	r3, [r3]
   37670:	e3530000 	cmp	r3, #0
   37674:	0a000002 	beq	37684 <CMemorySystem::GetMemSize() const+0x20>
   37678:	e9930009 	ldmib	r3, {r0, r3}
   3767c:	e0800003 	add	r0, r0, r3
   37680:	e12fff1e 	bx	lr
   37684:	e3021b78 	movw	r1, #11128	@ 0x2b78
   37688:	e3401004 	movt	r1, #4
   3768c:	e3a020a0 	mov	r2, #160	@ 0xa0
   37690:	e281000c 	add	r0, r1, #12
   37694:	e92d4010 	push	{r4, lr}
   37698:	ebffd1cf 	bl	2bddc <assertion_failed>

0003769c <CMemorySystem::Get()>:
   3769c:	e30431bc 	movw	r3, #16828	@ 0x41bc
   376a0:	e3403004 	movt	r3, #4
   376a4:	e5930000 	ldr	r0, [r3]
   376a8:	e3500000 	cmp	r0, #0
   376ac:	112fff1e 	bxne	lr
   376b0:	e3021b78 	movw	r1, #11128	@ 0x2b78
   376b4:	e3401004 	movt	r1, #4
   376b8:	e3a020a6 	mov	r2, #166	@ 0xa6
   376bc:	e281000c 	add	r0, r1, #12
   376c0:	e92d4010 	push	{r4, lr}
   376c4:	ebffd1c4 	bl	2bddc <assertion_failed>

000376c8 <CMemorySystem::EnableMMU()>:
   376c8:	e5d03000 	ldrb	r3, [r0]
   376cc:	e92d4010 	push	{r4, lr}
   376d0:	e3530000 	cmp	r3, #0
   376d4:	0a00001a 	beq	37744 <CMemorySystem::EnableMMU()+0x7c>
   376d8:	ee113f30 	mrc	15, 0, r3, cr1, cr0, {1}
   376dc:	e3833040 	orr	r3, r3, #64	@ 0x40
   376e0:	ee013f30 	mcr	15, 0, r3, cr1, cr0, {1}
   376e4:	ee103f70 	mrc	15, 0, r3, cr0, cr0, {3}
   376e8:	e3130001 	tst	r3, #1
   376ec:	1a000019 	bne	37758 <CMemorySystem::EnableMMU()+0x90>
   376f0:	e3a04000 	mov	r4, #0
   376f4:	ee024f50 	mcr	15, 0, r4, cr2, cr0, {2}
   376f8:	e59000d8 	ldr	r0, [r0, #216]	@ 0xd8
   376fc:	e1500004 	cmp	r0, r4
   37700:	0a000019 	beq	3776c <CMemorySystem::EnableMMU()+0xa4>
   37704:	eb000095 	bl	37960 <CPageTable::GetBaseAddress() const>
   37708:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
   3770c:	e3a03001 	mov	r3, #1
   37710:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   37714:	ebfffdf8 	bl	36efc <InvalidateDataCache>
   37718:	ee074f15 	mcr	15, 0, r4, cr7, cr5, {0}
   3771c:	ee074fd5 	mcr	15, 0, r4, cr7, cr5, {6}
   37720:	ee084f17 	mcr	15, 0, r4, cr8, cr7, {0}
   37724:	f57ff04f 	dsb	sy
   37728:	f57ff06f 	isb	sy
   3772c:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   37730:	e3c33002 	bic	r3, r3, #2
   37734:	e3833b06 	orr	r3, r3, #6144	@ 0x1800
   37738:	e3833005 	orr	r3, r3, #5
   3773c:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   37740:	e8bd8010 	pop	{r4, pc}
   37744:	e3021b78 	movw	r1, #11128	@ 0x2b78
   37748:	e3401004 	movt	r1, #4
   3774c:	e3a020ac 	mov	r2, #172	@ 0xac
   37750:	e281001c 	add	r0, r1, #28
   37754:	ebffd1a0 	bl	2bddc <assertion_failed>
   37758:	e3021b78 	movw	r1, #11128	@ 0x2b78
   3775c:	e3401004 	movt	r1, #4
   37760:	e3a020ba 	mov	r2, #186	@ 0xba
   37764:	e281002c 	add	r0, r1, #44	@ 0x2c
   37768:	ebffd19b 	bl	2bddc <assertion_failed>
   3776c:	e3021b78 	movw	r1, #11128	@ 0x2b78
   37770:	e3401004 	movt	r1, #4
   37774:	e3a020c0 	mov	r2, #192	@ 0xc0
   37778:	e2810058 	add	r0, r1, #88	@ 0x58
   3777c:	ebffd196 	bl	2bddc <assertion_failed>

00037780 <CMemorySystem::CMemorySystem(bool)>:
   37780:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   37784:	e1a04000 	mov	r4, r0
   37788:	e280700c 	add	r7, r0, #12
   3778c:	e1a03001 	mov	r3, r1
   37790:	e3a05000 	mov	r5, #0
   37794:	e5c03000 	strb	r3, [r0]
   37798:	e24dd02c 	sub	sp, sp, #44	@ 0x2c
   3779c:	e5805004 	str	r5, [r0, #4]
   377a0:	e28460c8 	add	r6, r4, #200	@ 0xc8
   377a4:	e5805008 	str	r5, [r0, #8]
   377a8:	e1a00007 	mov	r0, r7
   377ac:	e59f110c 	ldr	r1, [pc, #268]	@ 378c0 <CMemorySystem::CMemorySystem(bool)+0x140>
   377b0:	ebfffa7f 	bl	361b4 <CHeapAllocator::CHeapAllocator(char const*)>
   377b4:	e1a00006 	mov	r0, r6
   377b8:	eb0007e0 	bl	39740 <CPageAllocator::CPageAllocator()>
   377bc:	e30431bc 	movw	r3, #16828	@ 0x41bc
   377c0:	e3403004 	movt	r3, #4
   377c4:	e58450d8 	str	r5, [r4, #216]	@ 0xd8
   377c8:	e5935000 	ldr	r5, [r3]
   377cc:	e3550000 	cmp	r5, #0
   377d0:	0a000002 	beq	377e0 <CMemorySystem::CMemorySystem(bool)+0x60>
   377d4:	e1a00004 	mov	r0, r4
   377d8:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   377dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   377e0:	e3a01001 	mov	r1, #1
   377e4:	e28d000c 	add	r0, sp, #12
   377e8:	e5834000 	str	r4, [r3]
   377ec:	ebffd19b 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   377f0:	e3a03014 	mov	r3, #20
   377f4:	e3a01005 	mov	r1, #5
   377f8:	e3401001 	movt	r1, #1
   377fc:	e08d2003 	add	r2, sp, r3
   37800:	e28d000c 	add	r0, sp, #12
   37804:	e58d5000 	str	r5, [sp]
   37808:	ebffd1e6 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3780c:	e3500000 	cmp	r0, #0
   37810:	0a000016 	beq	37870 <CMemorySystem::CMemorySystem(bool)+0xf0>
   37814:	e59d3020 	ldr	r3, [sp, #32]
   37818:	e3530000 	cmp	r3, #0
   3781c:	1a000022 	bne	378ac <CMemorySystem::CMemorySystem(bool)+0x12c>
   37820:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   37824:	e2435501 	sub	r5, r3, #4194304	@ 0x400000
   37828:	e2432609 	sub	r2, r3, #9437184	@ 0x900000
   3782c:	e1a00007 	mov	r0, r7
   37830:	e3a01605 	mov	r1, #5242880	@ 0x500000
   37834:	e5843004 	str	r3, [r4, #4]
   37838:	e3a03701 	mov	r3, #262144	@ 0x40000
   3783c:	ebfffa74 	bl	36214 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   37840:	e3a02501 	mov	r2, #4194304	@ 0x400000
   37844:	e1a01005 	mov	r1, r5
   37848:	e1a00006 	mov	r0, r6
   3784c:	eb0007c3 	bl	39760 <CPageAllocator::Setup(unsigned int, unsigned int)>
   37850:	e5d43000 	ldrb	r3, [r4]
   37854:	e3530000 	cmp	r3, #0
   37858:	1a00000a 	bne	37888 <CMemorySystem::CMemorySystem(bool)+0x108>
   3785c:	e28d000c 	add	r0, sp, #12
   37860:	ebffd185 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   37864:	e1a00004 	mov	r0, r4
   37868:	e28dd02c 	add	sp, sp, #44	@ 0x2c
   3786c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   37870:	e3a03303 	mov	r3, #201326592	@ 0xc000000
   37874:	e3a026b7 	mov	r2, #191889408	@ 0xb700000
   37878:	e3a0552f 	mov	r5, #197132288	@ 0xbc00000
   3787c:	e58d0020 	str	r0, [sp, #32]
   37880:	e58d3024 	str	r3, [sp, #36]	@ 0x24
   37884:	eaffffe8 	b	3782c <CMemorySystem::CMemorySystem(bool)+0xac>
   37888:	e3a00004 	mov	r0, #4
   3788c:	ebfffa24 	bl	36124 <operator new(unsigned int)>
   37890:	e5941004 	ldr	r1, [r4, #4]
   37894:	e1a05000 	mov	r5, r0
   37898:	eb00000c 	bl	378d0 <CPageTable::CPageTable(unsigned int)>
   3789c:	e1a00004 	mov	r0, r4
   378a0:	e58450d8 	str	r5, [r4, #216]	@ 0xd8
   378a4:	ebffff87 	bl	376c8 <CMemorySystem::EnableMMU()>
   378a8:	eaffffeb 	b	3785c <CMemorySystem::CMemorySystem(bool)+0xdc>
   378ac:	e3021b78 	movw	r1, #11128	@ 0x2b78
   378b0:	e3401004 	movt	r1, #4
   378b4:	e3a0204e 	mov	r2, #78	@ 0x4e
   378b8:	e2810074 	add	r0, r1, #116	@ 0x74
   378bc:	ebffd146 	bl	2bddc <assertion_failed>
   378c0:	00042be4 	.word	0x00042be4

000378c4 <CMemorySystem::GetCoherentPage(unsigned int)>:
   378c4:	e1a00600 	lsl	r0, r0, #12
   378c8:	e2800501 	add	r0, r0, #4194304	@ 0x400000
   378cc:	e12fff1e 	bx	lr

000378d0 <CPageTable::CPageTable(unsigned int)>:
   378d0:	e3a039ba 	mov	r3, #3047424	@ 0x2e8000
   378d4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   378d8:	e1a02003 	mov	r2, r3
   378dc:	e309ec94 	movw	lr, #40084	@ 0x9c94
   378e0:	e340e003 	movt	lr, #3
   378e4:	e5803000 	str	r3, [r0]
   378e8:	e3007412 	movw	r7, #1042	@ 0x412
   378ec:	e3407041 	movt	r7, #65	@ 0x41
   378f0:	e30f5ffe 	movw	r5, #65534	@ 0xfffe
   378f4:	e3445003 	movt	r5, #16387	@ 0x4003
   378f8:	e1a08000 	mov	r8, r0
   378fc:	e3a03000 	mov	r3, #0
   37900:	e1a04001 	mov	r4, r1
   37904:	e300641e 	movw	r6, #1054	@ 0x41e
   37908:	e300140e 	movw	r1, #1038	@ 0x40e
   3790c:	e153000e 	cmp	r3, lr
   37910:	3183c001 	orrcc	ip, r3, r1
   37914:	3a000009 	bcc	37940 <CPageTable::CPageTable(unsigned int)+0x70>
   37918:	e3530501 	cmp	r3, #4194304	@ 0x400000
   3791c:	01a0c007 	moveq	ip, r7
   37920:	0a000006 	beq	37940 <CPageTable::CPageTable(unsigned int)+0x70>
   37924:	e1530004 	cmp	r3, r4
   37928:	e1a0c003 	mov	ip, r3
   3792c:	3183c006 	orrcc	ip, r3, r6
   37930:	3a000002 	bcc	37940 <CPageTable::CPageTable(unsigned int)+0x70>
   37934:	e1530005 	cmp	r3, r5
   37938:	9383cb41 	orrls	ip, r3, #66560	@ 0x10400
   3793c:	938cc016 	orrls	ip, ip, #22
   37940:	e482c004 	str	ip, [r2], #4
   37944:	e2833601 	add	r3, r3, #1048576	@ 0x100000
   37948:	e35209bb 	cmp	r2, #3063808	@ 0x2ec000
   3794c:	1affffee 	bne	3790c <CPageTable::CPageTable(unsigned int)+0x3c>
   37950:	ebfffd93 	bl	36fa4 <CleanDataCache>
   37954:	e1a00008 	mov	r0, r8
   37958:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0003795c <CPageTable::~CPageTable()>:
   3795c:	e12fff1e 	bx	lr

00037960 <CPageTable::GetBaseAddress() const>:
   37960:	e5900000 	ldr	r0, [r0]
   37964:	e3800059 	orr	r0, r0, #89	@ 0x59
   37968:	e12fff1e 	bx	lr

0003796c <CurrentExecutionLevel>:
   3796c:	e10f0000 	mrs	r0, CPSR
   37970:	e3100040 	tst	r0, #64	@ 0x40
   37974:	07e003d0 	ubfxeq	r0, r0, #7, #1
   37978:	13a00002 	movne	r0, #2
   3797c:	e12fff1e 	bx	lr

00037980 <EnterCritical>:
   37980:	e2403001 	sub	r3, r0, #1
   37984:	e92d4010 	push	{r4, lr}
   37988:	e3530001 	cmp	r3, #1
   3798c:	8a000012 	bhi	379dc <EnterCritical+0x5c>
   37990:	e10f1000 	mrs	r1, CPSR
   37994:	e3500002 	cmp	r0, #2
   37998:	1a000015 	bne	379f4 <EnterCritical+0x74>
   3799c:	f10c00c0 	cpsid	if
   379a0:	e30431c0 	movw	r3, #16832	@ 0x41c0
   379a4:	e3403004 	movt	r3, #4
   379a8:	e5932000 	ldr	r2, [r3]
   379ac:	e3520013 	cmp	r2, #19
   379b0:	8a000017 	bhi	37a14 <EnterCritical+0x94>
   379b4:	e5932000 	ldr	r2, [r3]
   379b8:	e3500001 	cmp	r0, #1
   379bc:	e2820001 	add	r0, r2, #1
   379c0:	e5830000 	str	r0, [r3]
   379c4:	e0833102 	add	r3, r3, r2, lsl #2
   379c8:	e5831008 	str	r1, [r3, #8]
   379cc:	1a000000 	bne	379d4 <EnterCritical+0x54>
   379d0:	f1080040 	cpsie	f
   379d4:	f57ff05f 	dmb	sy
   379d8:	e8bd8010 	pop	{r4, pc}
   379dc:	e30e1968 	movw	r1, #59752	@ 0xe968
   379e0:	e3401003 	movt	r1, #3
   379e4:	e30e0978 	movw	r0, #59768	@ 0xe978
   379e8:	e3400003 	movt	r0, #3
   379ec:	e3a02064 	mov	r2, #100	@ 0x64
   379f0:	ebffd0f9 	bl	2bddc <assertion_failed>
   379f4:	e3110040 	tst	r1, #64	@ 0x40
   379f8:	0affffe7 	beq	3799c <EnterCritical+0x1c>
   379fc:	e30e1968 	movw	r1, #59752	@ 0xe968
   37a00:	e3401003 	movt	r1, #3
   37a04:	e30e09b0 	movw	r0, #59824	@ 0xe9b0
   37a08:	e3400003 	movt	r0, #3
   37a0c:	e3a0206a 	mov	r2, #106	@ 0x6a
   37a10:	ebffd0f1 	bl	2bddc <assertion_failed>
   37a14:	e30e1968 	movw	r1, #59752	@ 0xe968
   37a18:	e3401003 	movt	r1, #3
   37a1c:	e30e09e0 	movw	r0, #59872	@ 0xe9e0
   37a20:	e3400003 	movt	r0, #3
   37a24:	e3a0206e 	mov	r2, #110	@ 0x6e
   37a28:	ebffd0eb 	bl	2bddc <assertion_failed>

00037a2c <LeaveCritical>:
   37a2c:	f57ff05f 	dmb	sy
   37a30:	f10c0040 	cpsid	f
   37a34:	e30431c0 	movw	r3, #16832	@ 0x41c0
   37a38:	e3403004 	movt	r3, #4
   37a3c:	e5932000 	ldr	r2, [r3]
   37a40:	e3520000 	cmp	r2, #0
   37a44:	0a000006 	beq	37a64 <LeaveCritical+0x38>
   37a48:	e5932000 	ldr	r2, [r3]
   37a4c:	e2422001 	sub	r2, r2, #1
   37a50:	e5832000 	str	r2, [r3]
   37a54:	e0833102 	add	r3, r3, r2, lsl #2
   37a58:	e5933008 	ldr	r3, [r3, #8]
   37a5c:	e121f003 	msr	CPSR_c, r3
   37a60:	e12fff1e 	bx	lr
   37a64:	e30e1968 	movw	r1, #59752	@ 0xe968
   37a68:	e3401003 	movt	r1, #3
   37a6c:	e30e0a08 	movw	r0, #59912	@ 0xea08
   37a70:	e3400003 	movt	r0, #3
   37a74:	e3a0207f 	mov	r2, #127	@ 0x7f
   37a78:	e92d4010 	push	{r4, lr}
   37a7c:	ebffd0d6 	bl	2bddc <assertion_failed>

00037a80 <SyncDataAndInstructionCache>:
   37a80:	e92d4010 	push	{r4, lr}
   37a84:	ebfffd46 	bl	36fa4 <CleanDataCache>
   37a88:	e3a03000 	mov	r3, #0
   37a8c:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   37a90:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   37a94:	f57ff04f 	dsb	sy
   37a98:	f57ff06f 	isb	sy
   37a9c:	e8bd8010 	pop	{r4, pc}

00037aa0 <CInterruptSystem::CInterruptSystem()>:
   37aa0:	e3a02000 	mov	r2, #0
   37aa4:	e2403004 	sub	r3, r0, #4
   37aa8:	e2801f53 	add	r1, r0, #332	@ 0x14c
   37aac:	e5a32004 	str	r2, [r3, #4]!
   37ab0:	e1530001 	cmp	r3, r1
   37ab4:	e5832150 	str	r2, [r3, #336]	@ 0x150
   37ab8:	1afffffb 	bne	37aac <CInterruptSystem::CInterruptSystem()+0xc>
   37abc:	e3043218 	movw	r3, #16920	@ 0x4218
   37ac0:	e3403004 	movt	r3, #4
   37ac4:	e5830000 	str	r0, [r3]
   37ac8:	e12fff1e 	bx	lr

00037acc <CInterruptSystem::~CInterruptSystem()>:
   37acc:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   37ad0:	f10c0080 	cpsid	i
   37ad4:	e3a0e101 	mov	lr, #1073741824	@ 0x40000000
   37ad8:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   37adc:	e3433f00 	movt	r3, #16128	@ 0x3f00
   37ae0:	e3042218 	movw	r2, #16920	@ 0x4218
   37ae4:	e3402004 	movt	r2, #4
   37ae8:	e3a01000 	mov	r1, #0
   37aec:	e3e0c000 	mvn	ip, #0
   37af0:	e583120c 	str	r1, [r3, #524]	@ 0x20c
   37af4:	e583c21c 	str	ip, [r3, #540]	@ 0x21c
   37af8:	e583c220 	str	ip, [r3, #544]	@ 0x220
   37afc:	e583c224 	str	ip, [r3, #548]	@ 0x224
   37b00:	e58e1040 	str	r1, [lr, #64]	@ 0x40
   37b04:	e5821000 	str	r1, [r2]
   37b08:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

00037b0c <CInterruptSystem::Initialize()>:
   37b0c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
   37b10:	e3a03004 	mov	r3, #4
   37b14:	e30724f4 	movw	r2, #29940	@ 0x74f4
   37b18:	e3402003 	movt	r2, #3
   37b1c:	e24dd00c 	sub	sp, sp, #12
   37b20:	e58d3004 	str	r3, [sp, #4]
   37b24:	e3073534 	movw	r3, #30004	@ 0x7534
   37b28:	e3403003 	movt	r3, #3
   37b2c:	e59d0004 	ldr	r0, [sp, #4]
   37b30:	e59dc004 	ldr	ip, [sp, #4]
   37b34:	e59d1004 	ldr	r1, [sp, #4]
   37b38:	e2800014 	add	r0, r0, #20
   37b3c:	e0422000 	sub	r2, r2, r0
   37b40:	e2811018 	add	r1, r1, #24
   37b44:	e0433001 	sub	r3, r3, r1
   37b48:	e59d1004 	ldr	r1, [sp, #4]
   37b4c:	e1a02142 	asr	r2, r2, #2
   37b50:	e1a03143 	asr	r3, r3, #2
   37b54:	e2422002 	sub	r2, r2, #2
   37b58:	e2433002 	sub	r3, r3, #2
   37b5c:	e38224ea 	orr	r2, r2, #-369098752	@ 0xea000000
   37b60:	e38334ea 	orr	r3, r3, #-369098752	@ 0xea000000
   37b64:	e58c2014 	str	r2, [ip, #20]
   37b68:	e5813018 	str	r3, [r1, #24]
   37b6c:	ebffffc3 	bl	37a80 <SyncDataAndInstructionCache>
   37b70:	e3a00101 	mov	r0, #1073741824	@ 0x40000000
   37b74:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   37b78:	e3433f00 	movt	r3, #16128	@ 0x3f00
   37b7c:	e3e02000 	mvn	r2, #0
   37b80:	e3a01000 	mov	r1, #0
   37b84:	e583120c 	str	r1, [r3, #524]	@ 0x20c
   37b88:	e583221c 	str	r2, [r3, #540]	@ 0x21c
   37b8c:	e5832220 	str	r2, [r3, #544]	@ 0x220
   37b90:	e5832224 	str	r2, [r3, #548]	@ 0x224
   37b94:	e5801040 	str	r1, [r0, #64]	@ 0x40
   37b98:	f1080080 	cpsie	i
   37b9c:	e3a00001 	mov	r0, #1
   37ba0:	e28dd00c 	add	sp, sp, #12
   37ba4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)

00037ba8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   37ba8:	e3510053 	cmp	r1, #83	@ 0x53
   37bac:	e92d4010 	push	{r4, lr}
   37bb0:	8a00001d 	bhi	37c2c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x84>
   37bb4:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   37bb8:	e080e101 	add	lr, r0, r1, lsl #2
   37bbc:	e35c0000 	cmp	ip, #0
   37bc0:	1a00001f 	bne	37c44 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x9c>
   37bc4:	e7802101 	str	r2, [r0, r1, lsl #2]
   37bc8:	e3510047 	cmp	r1, #71	@ 0x47
   37bcc:	e58e3150 	str	r3, [lr, #336]	@ 0x150
   37bd0:	9a000006 	bls	37bf0 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x48>
   37bd4:	e3510049 	cmp	r1, #73	@ 0x49
   37bd8:	1a00001f 	bne	37c5c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0xb4>
   37bdc:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   37be0:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   37be4:	e3833002 	orr	r3, r3, #2
   37be8:	e5823040 	str	r3, [r2, #64]	@ 0x40
   37bec:	e8bd8010 	pop	{r4, pc}
   37bf0:	e351001f 	cmp	r1, #31
   37bf4:	930b3210 	movwls	r3, #45584	@ 0xb210
   37bf8:	93433f00 	movtls	r3, #16128	@ 0x3f00
   37bfc:	9a000005 	bls	37c18 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x70>
   37c00:	e351003f 	cmp	r1, #63	@ 0x3f
   37c04:	e30b2214 	movw	r2, #45588	@ 0xb214
   37c08:	e3432f00 	movt	r2, #16128	@ 0x3f00
   37c0c:	e30b3218 	movw	r3, #45592	@ 0xb218
   37c10:	e3433f00 	movt	r3, #16128	@ 0x3f00
   37c14:	91a03002 	movls	r3, r2
   37c18:	e201101f 	and	r1, r1, #31
   37c1c:	e3a02001 	mov	r2, #1
   37c20:	e1a02112 	lsl	r2, r2, r1
   37c24:	e5832000 	str	r2, [r3]
   37c28:	e8bd8010 	pop	{r4, pc}
   37c2c:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37c30:	e3401003 	movt	r1, #3
   37c34:	e30e0a30 	movw	r0, #59952	@ 0xea30
   37c38:	e3400003 	movt	r0, #3
   37c3c:	e3a02076 	mov	r2, #118	@ 0x76
   37c40:	ebffd065 	bl	2bddc <assertion_failed>
   37c44:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37c48:	e3401003 	movt	r1, #3
   37c4c:	e30e0a44 	movw	r0, #59972	@ 0xea44
   37c50:	e3400003 	movt	r0, #3
   37c54:	e3a02077 	mov	r2, #119	@ 0x77
   37c58:	ebffd05f 	bl	2bddc <assertion_failed>
   37c5c:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37c60:	e3401003 	movt	r1, #3
   37c64:	e30e0a60 	movw	r0, #60000	@ 0xea60
   37c68:	e3400003 	movt	r0, #3
   37c6c:	e3a020b0 	mov	r2, #176	@ 0xb0
   37c70:	ebffd059 	bl	2bddc <assertion_failed>

00037c74 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   37c74:	e3510053 	cmp	r1, #83	@ 0x53
   37c78:	e92d4010 	push	{r4, lr}
   37c7c:	8a00001e 	bhi	37cfc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x88>
   37c80:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   37c84:	e0802101 	add	r2, r0, r1, lsl #2
   37c88:	e3530000 	cmp	r3, #0
   37c8c:	0a000020 	beq	37d14 <CInterruptSystem::DisconnectIRQ(unsigned int)+0xa0>
   37c90:	e3510047 	cmp	r1, #71	@ 0x47
   37c94:	9a000009 	bls	37cc0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>
   37c98:	e3510049 	cmp	r1, #73	@ 0x49
   37c9c:	1a000022 	bne	37d2c <CInterruptSystem::DisconnectIRQ(unsigned int)+0xb8>
   37ca0:	e3a0c101 	mov	ip, #1073741824	@ 0x40000000
   37ca4:	e59c3040 	ldr	r3, [ip, #64]	@ 0x40
   37ca8:	e3c33002 	bic	r3, r3, #2
   37cac:	e58c3040 	str	r3, [ip, #64]	@ 0x40
   37cb0:	e3a03000 	mov	r3, #0
   37cb4:	e7803101 	str	r3, [r0, r1, lsl #2]
   37cb8:	e5823150 	str	r3, [r2, #336]	@ 0x150
   37cbc:	e8bd8010 	pop	{r4, pc}
   37cc0:	e351001f 	cmp	r1, #31
   37cc4:	930b321c 	movwls	r3, #45596	@ 0xb21c
   37cc8:	93433f00 	movtls	r3, #16128	@ 0x3f00
   37ccc:	9a000005 	bls	37ce8 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x74>
   37cd0:	e351003f 	cmp	r1, #63	@ 0x3f
   37cd4:	e30bc220 	movw	ip, #45600	@ 0xb220
   37cd8:	e343cf00 	movt	ip, #16128	@ 0x3f00
   37cdc:	e30b3224 	movw	r3, #45604	@ 0xb224
   37ce0:	e3433f00 	movt	r3, #16128	@ 0x3f00
   37ce4:	91a0300c 	movls	r3, ip
   37ce8:	e201e01f 	and	lr, r1, #31
   37cec:	e3a0c001 	mov	ip, #1
   37cf0:	e1a0ce1c 	lsl	ip, ip, lr
   37cf4:	e583c000 	str	ip, [r3]
   37cf8:	eaffffec 	b	37cb0 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x3c>
   37cfc:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37d00:	e3401003 	movt	r1, #3
   37d04:	e30e0a30 	movw	r0, #59952	@ 0xea30
   37d08:	e3400003 	movt	r0, #3
   37d0c:	e3a02081 	mov	r2, #129	@ 0x81
   37d10:	ebffd031 	bl	2bddc <assertion_failed>
   37d14:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37d18:	e3401003 	movt	r1, #3
   37d1c:	e30e0a80 	movw	r0, #60032	@ 0xea80
   37d20:	e3400003 	movt	r0, #3
   37d24:	e3a02082 	mov	r2, #130	@ 0x82
   37d28:	ebffd02b 	bl	2bddc <assertion_failed>
   37d2c:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37d30:	e3401003 	movt	r1, #3
   37d34:	e30e0a60 	movw	r0, #60000	@ 0xea60
   37d38:	e3400003 	movt	r0, #3
   37d3c:	e3a020c8 	mov	r2, #200	@ 0xc8
   37d40:	ebffd025 	bl	2bddc <assertion_failed>

00037d44 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   37d44:	e3510047 	cmp	r1, #71	@ 0x47
   37d48:	e92d4010 	push	{r4, lr}
   37d4c:	8a00001e 	bhi	37dcc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x88>
   37d50:	e3520000 	cmp	r2, #0
   37d54:	0a000022 	beq	37de4 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xa0>
   37d58:	e304003c 	movw	r0, #16444	@ 0x403c
   37d5c:	e3400004 	movt	r0, #4
   37d60:	e5d0e001 	ldrb	lr, [r0, #1]
   37d64:	e5d0c000 	ldrb	ip, [r0]
   37d68:	e18cc40e 	orr	ip, ip, lr, lsl #8
   37d6c:	e5d0e002 	ldrb	lr, [r0, #2]
   37d70:	e18cc80e 	orr	ip, ip, lr, lsl #16
   37d74:	e5d0e003 	ldrb	lr, [r0, #3]
   37d78:	e19ccc0e 	orrs	ip, ip, lr, lsl #24
   37d7c:	1a00001e 	bne	37dfc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0xb8>
   37d80:	e7e7c452 	ubfx	ip, r2, #8, #8
   37d84:	e5c0c001 	strb	ip, [r0, #1]
   37d88:	e7e7c852 	ubfx	ip, r2, #16, #8
   37d8c:	e5c0c002 	strb	ip, [r0, #2]
   37d90:	e3a0ca0b 	mov	ip, #45056	@ 0xb000
   37d94:	e343cf00 	movt	ip, #16128	@ 0x3f00
   37d98:	e7e7e453 	ubfx	lr, r3, #8, #8
   37d9c:	e5c02000 	strb	r2, [r0]
   37da0:	e5c03004 	strb	r3, [r0, #4]
   37da4:	e1a02c22 	lsr	r2, r2, #24
   37da8:	e3811080 	orr	r1, r1, #128	@ 0x80
   37dac:	e5c02003 	strb	r2, [r0, #3]
   37db0:	e5c0e005 	strb	lr, [r0, #5]
   37db4:	e7e72853 	ubfx	r2, r3, #16, #8
   37db8:	e1a03c23 	lsr	r3, r3, #24
   37dbc:	e5c02006 	strb	r2, [r0, #6]
   37dc0:	e5c03007 	strb	r3, [r0, #7]
   37dc4:	e58c120c 	str	r1, [ip, #524]	@ 0x20c
   37dc8:	e8bd8010 	pop	{r4, pc}
   37dcc:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37dd0:	e3401003 	movt	r1, #3
   37dd4:	e30e0a9c 	movw	r0, #60060	@ 0xea9c
   37dd8:	e3400003 	movt	r0, #3
   37ddc:	e3a0208f 	mov	r2, #143	@ 0x8f
   37de0:	ebffcffd 	bl	2bddc <assertion_failed>
   37de4:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37de8:	e3401003 	movt	r1, #3
   37dec:	e30e0ad0 	movw	r0, #60112	@ 0xead0
   37df0:	e3400003 	movt	r0, #3
   37df4:	e3a02090 	mov	r2, #144	@ 0x90
   37df8:	ebffcff7 	bl	2bddc <assertion_failed>
   37dfc:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37e00:	e3401003 	movt	r1, #3
   37e04:	e30e0ab0 	movw	r0, #60080	@ 0xeab0
   37e08:	e3400003 	movt	r0, #3
   37e0c:	e3a02091 	mov	r2, #145	@ 0x91
   37e10:	ebffcff1 	bl	2bddc <assertion_failed>

00037e14 <CInterruptSystem::DisconnectFIQ()>:
   37e14:	e304303c 	movw	r3, #16444	@ 0x403c
   37e18:	e3403004 	movt	r3, #4
   37e1c:	e5d32000 	ldrb	r2, [r3]
   37e20:	e5d3c001 	ldrb	ip, [r3, #1]
   37e24:	e5d30002 	ldrb	r0, [r3, #2]
   37e28:	e5d31003 	ldrb	r1, [r3, #3]
   37e2c:	e182240c 	orr	r2, r2, ip, lsl #8
   37e30:	e1822800 	orr	r2, r2, r0, lsl #16
   37e34:	e1922c01 	orrs	r2, r2, r1, lsl #24
   37e38:	0a00000c 	beq	37e70 <CInterruptSystem::DisconnectFIQ()+0x5c>
   37e3c:	e3a01a0b 	mov	r1, #45056	@ 0xb000
   37e40:	e3431f00 	movt	r1, #16128	@ 0x3f00
   37e44:	e3a02000 	mov	r2, #0
   37e48:	e581220c 	str	r2, [r1, #524]	@ 0x20c
   37e4c:	e5c32000 	strb	r2, [r3]
   37e50:	e5c32001 	strb	r2, [r3, #1]
   37e54:	e5c32002 	strb	r2, [r3, #2]
   37e58:	e5c32003 	strb	r2, [r3, #3]
   37e5c:	e5c32004 	strb	r2, [r3, #4]
   37e60:	e5c32005 	strb	r2, [r3, #5]
   37e64:	e5c32006 	strb	r2, [r3, #6]
   37e68:	e5c32007 	strb	r2, [r3, #7]
   37e6c:	e12fff1e 	bx	lr
   37e70:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37e74:	e3401003 	movt	r1, #3
   37e78:	e30e0ac8 	movw	r0, #60104	@ 0xeac8
   37e7c:	e3400003 	movt	r0, #3
   37e80:	e3a0209b 	mov	r2, #155	@ 0x9b
   37e84:	e92d4010 	push	{r4, lr}
   37e88:	ebffcfd3 	bl	2bddc <assertion_failed>

00037e8c <CInterruptSystem::EnableIRQ(unsigned int)>:
   37e8c:	e3500053 	cmp	r0, #83	@ 0x53
   37e90:	e92d4010 	push	{r4, lr}
   37e94:	8a000017 	bhi	37ef8 <CInterruptSystem::EnableIRQ(unsigned int)+0x6c>
   37e98:	e3500047 	cmp	r0, #71	@ 0x47
   37e9c:	8a00000e 	bhi	37edc <CInterruptSystem::EnableIRQ(unsigned int)+0x50>
   37ea0:	e350001f 	cmp	r0, #31
   37ea4:	930b3210 	movwls	r3, #45584	@ 0xb210
   37ea8:	93433f00 	movtls	r3, #16128	@ 0x3f00
   37eac:	9a000005 	bls	37ec8 <CInterruptSystem::EnableIRQ(unsigned int)+0x3c>
   37eb0:	e350003f 	cmp	r0, #63	@ 0x3f
   37eb4:	e30b2214 	movw	r2, #45588	@ 0xb214
   37eb8:	e3432f00 	movt	r2, #16128	@ 0x3f00
   37ebc:	e30b3218 	movw	r3, #45592	@ 0xb218
   37ec0:	e3433f00 	movt	r3, #16128	@ 0x3f00
   37ec4:	91a03002 	movls	r3, r2
   37ec8:	e200001f 	and	r0, r0, #31
   37ecc:	e3a02001 	mov	r2, #1
   37ed0:	e1a02012 	lsl	r2, r2, r0
   37ed4:	e5832000 	str	r2, [r3]
   37ed8:	e8bd8010 	pop	{r4, pc}
   37edc:	e3500049 	cmp	r0, #73	@ 0x49
   37ee0:	1a00000a 	bne	37f10 <CInterruptSystem::EnableIRQ(unsigned int)+0x84>
   37ee4:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   37ee8:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   37eec:	e3833002 	orr	r3, r3, #2
   37ef0:	e5823040 	str	r3, [r2, #64]	@ 0x40
   37ef4:	e8bd8010 	pop	{r4, pc}
   37ef8:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37efc:	e3401003 	movt	r1, #3
   37f00:	e30e0a30 	movw	r0, #59952	@ 0xea30
   37f04:	e3400003 	movt	r0, #3
   37f08:	e3a020a7 	mov	r2, #167	@ 0xa7
   37f0c:	ebffcfb2 	bl	2bddc <assertion_failed>
   37f10:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37f14:	e3401003 	movt	r1, #3
   37f18:	e30e0a60 	movw	r0, #60000	@ 0xea60
   37f1c:	e3400003 	movt	r0, #3
   37f20:	e3a020b0 	mov	r2, #176	@ 0xb0
   37f24:	ebffcfac 	bl	2bddc <assertion_failed>

00037f28 <CInterruptSystem::DisableIRQ(unsigned int)>:
   37f28:	e3500053 	cmp	r0, #83	@ 0x53
   37f2c:	e92d4010 	push	{r4, lr}
   37f30:	8a000017 	bhi	37f94 <CInterruptSystem::DisableIRQ(unsigned int)+0x6c>
   37f34:	e3500047 	cmp	r0, #71	@ 0x47
   37f38:	8a00000e 	bhi	37f78 <CInterruptSystem::DisableIRQ(unsigned int)+0x50>
   37f3c:	e350001f 	cmp	r0, #31
   37f40:	930b321c 	movwls	r3, #45596	@ 0xb21c
   37f44:	93433f00 	movtls	r3, #16128	@ 0x3f00
   37f48:	9a000005 	bls	37f64 <CInterruptSystem::DisableIRQ(unsigned int)+0x3c>
   37f4c:	e350003f 	cmp	r0, #63	@ 0x3f
   37f50:	e30b2220 	movw	r2, #45600	@ 0xb220
   37f54:	e3432f00 	movt	r2, #16128	@ 0x3f00
   37f58:	e30b3224 	movw	r3, #45604	@ 0xb224
   37f5c:	e3433f00 	movt	r3, #16128	@ 0x3f00
   37f60:	91a03002 	movls	r3, r2
   37f64:	e200001f 	and	r0, r0, #31
   37f68:	e3a02001 	mov	r2, #1
   37f6c:	e1a02012 	lsl	r2, r2, r0
   37f70:	e5832000 	str	r2, [r3]
   37f74:	e8bd8010 	pop	{r4, pc}
   37f78:	e3500049 	cmp	r0, #73	@ 0x49
   37f7c:	1a00000a 	bne	37fac <CInterruptSystem::DisableIRQ(unsigned int)+0x84>
   37f80:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   37f84:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   37f88:	e3c33002 	bic	r3, r3, #2
   37f8c:	e5823040 	str	r3, [r2, #64]	@ 0x40
   37f90:	e8bd8010 	pop	{r4, pc}
   37f94:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37f98:	e3401003 	movt	r1, #3
   37f9c:	e30e0a30 	movw	r0, #59952	@ 0xea30
   37fa0:	e3400003 	movt	r0, #3
   37fa4:	e3a020bf 	mov	r2, #191	@ 0xbf
   37fa8:	ebffcf8b 	bl	2bddc <assertion_failed>
   37fac:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37fb0:	e3401003 	movt	r1, #3
   37fb4:	e30e0a60 	movw	r0, #60000	@ 0xea60
   37fb8:	e3400003 	movt	r0, #3
   37fbc:	e3a020c8 	mov	r2, #200	@ 0xc8
   37fc0:	ebffcf85 	bl	2bddc <assertion_failed>

00037fc4 <CInterruptSystem::EnableFIQ(unsigned int)>:
   37fc4:	e3500047 	cmp	r0, #71	@ 0x47
   37fc8:	8a000004 	bhi	37fe0 <CInterruptSystem::EnableFIQ(unsigned int)+0x1c>
   37fcc:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   37fd0:	e3433f00 	movt	r3, #16128	@ 0x3f00
   37fd4:	e3800080 	orr	r0, r0, #128	@ 0x80
   37fd8:	e583020c 	str	r0, [r3, #524]	@ 0x20c
   37fdc:	e12fff1e 	bx	lr
   37fe0:	e30e1a20 	movw	r1, #59936	@ 0xea20
   37fe4:	e3401003 	movt	r1, #3
   37fe8:	e30e0a9c 	movw	r0, #60060	@ 0xea9c
   37fec:	e3400003 	movt	r0, #3
   37ff0:	e3a020d7 	mov	r2, #215	@ 0xd7
   37ff4:	e92d4010 	push	{r4, lr}
   37ff8:	ebffcf77 	bl	2bddc <assertion_failed>

00037ffc <CInterruptSystem::DisableFIQ()>:
   37ffc:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   38000:	e3433f00 	movt	r3, #16128	@ 0x3f00
   38004:	e3a02000 	mov	r2, #0
   38008:	e583220c 	str	r2, [r3, #524]	@ 0x20c
   3800c:	e12fff1e 	bx	lr

00038010 <CInterruptSystem::Get()>:
   38010:	e3043218 	movw	r3, #16920	@ 0x4218
   38014:	e3403004 	movt	r3, #4
   38018:	e5930000 	ldr	r0, [r3]
   3801c:	e3500000 	cmp	r0, #0
   38020:	112fff1e 	bxne	lr
   38024:	e30e1a20 	movw	r1, #59936	@ 0xea20
   38028:	e3401003 	movt	r1, #3
   3802c:	e30b051c 	movw	r0, #46364	@ 0xb51c
   38030:	e3400003 	movt	r0, #3
   38034:	e3a020e9 	mov	r2, #233	@ 0xe9
   38038:	e92d4010 	push	{r4, lr}
   3803c:	ebffcf66 	bl	2bddc <assertion_failed>

00038040 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   38040:	e3510053 	cmp	r1, #83	@ 0x53
   38044:	e92d4010 	push	{r4, lr}
   38048:	8a00000b 	bhi	3807c <CInterruptSystem::CallIRQHandler(unsigned int)+0x3c>
   3804c:	e7904101 	ldr	r4, [r0, r1, lsl #2]
   38050:	e0803101 	add	r3, r0, r1, lsl #2
   38054:	e3540000 	cmp	r4, #0
   38058:	0a000003 	beq	3806c <CInterruptSystem::CallIRQHandler(unsigned int)+0x2c>
   3805c:	e5930150 	ldr	r0, [r3, #336]	@ 0x150
   38060:	e12fff34 	blx	r4
   38064:	e3a00001 	mov	r0, #1
   38068:	e8bd8010 	pop	{r4, pc}
   3806c:	e1a00001 	mov	r0, r1
   38070:	ebffffac 	bl	37f28 <CInterruptSystem::DisableIRQ(unsigned int)>
   38074:	e1a00004 	mov	r0, r4
   38078:	e8bd8010 	pop	{r4, pc}
   3807c:	e30e1a20 	movw	r1, #59936	@ 0xea20
   38080:	e3401003 	movt	r1, #3
   38084:	e30e0a30 	movw	r0, #59952	@ 0xea30
   38088:	e3400003 	movt	r0, #3
   3808c:	e3a020ef 	mov	r2, #239	@ 0xef
   38090:	ebffcf51 	bl	2bddc <assertion_failed>

00038094 <CInterruptSystem::InterruptHandler()>:
   38094:	e3043218 	movw	r3, #16920	@ 0x4218
   38098:	e3403004 	movt	r3, #4
   3809c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   380a0:	e5938000 	ldr	r8, [r3]
   380a4:	e24dd010 	sub	sp, sp, #16
   380a8:	e3580000 	cmp	r8, #0
   380ac:	0a00003a 	beq	3819c <CInterruptSystem::InterruptHandler()+0x108>
   380b0:	e3a02101 	mov	r2, #1073741824	@ 0x40000000
   380b4:	e5926060 	ldr	r6, [r2, #96]	@ 0x60
   380b8:	e3c63e1f 	bic	r3, r6, #496	@ 0x1f0
   380bc:	e3c33002 	bic	r3, r3, #2
   380c0:	e3530000 	cmp	r3, #0
   380c4:	1a00003a 	bne	381b4 <CInterruptSystem::InterruptHandler()+0x120>
   380c8:	e2166002 	ands	r6, r6, #2
   380cc:	1a000025 	bne	38168 <CInterruptSystem::InterruptHandler()+0xd4>
   380d0:	e3a03a0b 	mov	r3, #45056	@ 0xb000
   380d4:	e3433f00 	movt	r3, #16128	@ 0x3f00
   380d8:	e28d7004 	add	r7, sp, #4
   380dc:	e5932204 	ldr	r2, [r3, #516]	@ 0x204
   380e0:	e58d2004 	str	r2, [sp, #4]
   380e4:	e5932208 	ldr	r2, [r3, #520]	@ 0x208
   380e8:	e58d2008 	str	r2, [sp, #8]
   380ec:	e5933200 	ldr	r3, [r3, #512]	@ 0x200
   380f0:	e6ef3073 	uxtb	r3, r3
   380f4:	e58d300c 	str	r3, [sp, #12]
   380f8:	e4974004 	ldr	r4, [r7], #4
   380fc:	e3540000 	cmp	r4, #0
   38100:	1a000004 	bne	38118 <CInterruptSystem::InterruptHandler()+0x84>
   38104:	e2866020 	add	r6, r6, #32
   38108:	e3560060 	cmp	r6, #96	@ 0x60
   3810c:	1afffff9 	bne	380f8 <CInterruptSystem::InterruptHandler()+0x64>
   38110:	e28dd010 	add	sp, sp, #16
   38114:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   38118:	e1a05006 	mov	r5, r6
   3811c:	ea000002 	b	3812c <CInterruptSystem::InterruptHandler()+0x98>
   38120:	e2855001 	add	r5, r5, #1
   38124:	e1b040a4 	lsrs	r4, r4, #1
   38128:	0afffff5 	beq	38104 <CInterruptSystem::InterruptHandler()+0x70>
   3812c:	e3140001 	tst	r4, #1
   38130:	0afffffa 	beq	38120 <CInterruptSystem::InterruptHandler()+0x8c>
   38134:	e3550053 	cmp	r5, #83	@ 0x53
   38138:	8a000011 	bhi	38184 <CInterruptSystem::InterruptHandler()+0xf0>
   3813c:	e7983105 	ldr	r3, [r8, r5, lsl #2]
   38140:	e3530000 	cmp	r3, #0
   38144:	0a000004 	beq	3815c <CInterruptSystem::InterruptHandler()+0xc8>
   38148:	e2855054 	add	r5, r5, #84	@ 0x54
   3814c:	e7980105 	ldr	r0, [r8, r5, lsl #2]
   38150:	e28dd010 	add	sp, sp, #16
   38154:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   38158:	e12fff13 	bx	r3
   3815c:	e1a00005 	mov	r0, r5
   38160:	ebffff70 	bl	37f28 <CInterruptSystem::DisableIRQ(unsigned int)>
   38164:	eaffffed 	b	38120 <CInterruptSystem::InterruptHandler()+0x8c>
   38168:	e5983124 	ldr	r3, [r8, #292]	@ 0x124
   3816c:	e3530000 	cmp	r3, #0
   38170:	0a000015 	beq	381cc <CInterruptSystem::InterruptHandler()+0x138>
   38174:	e5980274 	ldr	r0, [r8, #628]	@ 0x274
   38178:	e28dd010 	add	sp, sp, #16
   3817c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   38180:	e12fff13 	bx	r3
   38184:	e30e1a20 	movw	r1, #59936	@ 0xea20
   38188:	e3401003 	movt	r1, #3
   3818c:	e30e0a30 	movw	r0, #59952	@ 0xea30
   38190:	e3400003 	movt	r0, #3
   38194:	e3a020ef 	mov	r2, #239	@ 0xef
   38198:	ebffcf0f 	bl	2bddc <assertion_failed>
   3819c:	e30e1a20 	movw	r1, #59936	@ 0xea20
   381a0:	e3401003 	movt	r1, #3
   381a4:	e30b051c 	movw	r0, #46364	@ 0xb51c
   381a8:	e3400003 	movt	r0, #3
   381ac:	e3002102 	movw	r2, #258	@ 0x102
   381b0:	ebffcf09 	bl	2bddc <assertion_failed>
   381b4:	e30e1a20 	movw	r1, #59936	@ 0xea20
   381b8:	e3401003 	movt	r1, #3
   381bc:	e30e0ae0 	movw	r0, #60128	@ 0xeae0
   381c0:	e3400003 	movt	r0, #3
   381c4:	e3002106 	movw	r2, #262	@ 0x106
   381c8:	ebffcf03 	bl	2bddc <assertion_failed>
   381cc:	e5923040 	ldr	r3, [r2, #64]	@ 0x40
   381d0:	e3c33002 	bic	r3, r3, #2
   381d4:	e5823040 	str	r3, [r2, #64]	@ 0x40
   381d8:	eaffffcc 	b	38110 <CInterruptSystem::InterruptHandler()+0x7c>

000381dc <InterruptHandler>:
   381dc:	eaffffac 	b	38094 <CInterruptSystem::InterruptHandler()>

000381e0 <malloc>:
   381e0:	e30431bc 	movw	r3, #16828	@ 0x41bc
   381e4:	e3403004 	movt	r3, #4
   381e8:	e1a01000 	mov	r1, r0
   381ec:	e5930000 	ldr	r0, [r3]
   381f0:	e280000c 	add	r0, r0, #12
   381f4:	eafff80c 	b	3622c <CHeapAllocator::Allocate(unsigned int)>

000381f8 <memalign>:
   381f8:	e3500040 	cmp	r0, #64	@ 0x40
   381fc:	8a000004 	bhi	38214 <memalign+0x1c>
   38200:	e30431bc 	movw	r3, #16828	@ 0x41bc
   38204:	e3403004 	movt	r3, #4
   38208:	e5930000 	ldr	r0, [r3]
   3820c:	e280000c 	add	r0, r0, #12
   38210:	eafff805 	b	3622c <CHeapAllocator::Allocate(unsigned int)>
   38214:	e3021c08 	movw	r1, #11272	@ 0x2c08
   38218:	e3401004 	movt	r1, #4
   3821c:	e3a02021 	mov	r2, #33	@ 0x21
   38220:	e281000c 	add	r0, r1, #12
   38224:	e92d4010 	push	{r4, lr}
   38228:	ebffceeb 	bl	2bddc <assertion_failed>

0003822c <free>:
   3822c:	e30431bc 	movw	r3, #16828	@ 0x41bc
   38230:	e3403004 	movt	r3, #4
   38234:	e1a01000 	mov	r1, r0
   38238:	e5930000 	ldr	r0, [r3]
   3823c:	e280000c 	add	r0, r0, #12
   38240:	eafff873 	b	36414 <CHeapAllocator::Free(void*)>

00038244 <calloc>:
   38244:	e92d4070 	push	{r4, r5, r6, lr}
   38248:	e0040190 	mul	r4, r0, r1
   3824c:	e3540001 	cmp	r4, #1
   38250:	33a04001 	movcc	r4, #1
   38254:	e1500004 	cmp	r0, r4
   38258:	8a00000c 	bhi	38290 <calloc+0x4c>
   3825c:	e30431bc 	movw	r3, #16828	@ 0x41bc
   38260:	e3403004 	movt	r3, #4
   38264:	e1a01004 	mov	r1, r4
   38268:	e5930000 	ldr	r0, [r3]
   3826c:	e280000c 	add	r0, r0, #12
   38270:	ebfff7ed 	bl	3622c <CHeapAllocator::Allocate(unsigned int)>
   38274:	e2505000 	subs	r5, r0, #0
   38278:	0a000002 	beq	38288 <calloc+0x44>
   3827c:	e1a02004 	mov	r2, r4
   38280:	e3a01000 	mov	r1, #0
   38284:	ebfff587 	bl	358a8 <memset>
   38288:	e1a00005 	mov	r0, r5
   3828c:	e8bd8070 	pop	{r4, r5, r6, pc}
   38290:	e3021c08 	movw	r1, #11272	@ 0x2c08
   38294:	e3401004 	movt	r1, #4
   38298:	e3a02031 	mov	r2, #49	@ 0x31
   3829c:	e2810028 	add	r0, r1, #40	@ 0x28
   382a0:	ebffcecd 	bl	2bddc <assertion_failed>

000382a4 <realloc>:
   382a4:	e30431bc 	movw	r3, #16828	@ 0x41bc
   382a8:	e3403004 	movt	r3, #4
   382ac:	e1a02001 	mov	r2, r1
   382b0:	e1a01000 	mov	r1, r0
   382b4:	e5930000 	ldr	r0, [r3]
   382b8:	e280000c 	add	r0, r0, #12
   382bc:	eafff897 	b	36520 <CHeapAllocator::ReAllocate(void*, unsigned int)>

000382c0 <palloc>:
   382c0:	e30431bc 	movw	r3, #16828	@ 0x41bc
   382c4:	e3403004 	movt	r3, #4
   382c8:	e5930000 	ldr	r0, [r3]
   382cc:	e28000c8 	add	r0, r0, #200	@ 0xc8
   382d0:	ea00053f 	b	397d4 <CPageAllocator::Allocate()>

000382d4 <pfree>:
   382d4:	e30431bc 	movw	r3, #16828	@ 0x41bc
   382d8:	e3403004 	movt	r3, #4
   382dc:	e1a01000 	mov	r1, r0
   382e0:	e5930000 	ldr	r0, [r3]
   382e4:	e28000c8 	add	r0, r0, #200	@ 0xc8
   382e8:	ea00056c 	b	398a0 <CPageAllocator::Free(void*)>

000382ec <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   382ec:	e92d4070 	push	{r4, r5, r6, lr}
   382f0:	e1a04000 	mov	r4, r0
   382f4:	e24dd028 	sub	sp, sp, #40	@ 0x28
   382f8:	e5803010 	str	r3, [r0, #16]
   382fc:	e59d5040 	ldr	r5, [sp, #64]	@ 0x40
   38300:	e59dc038 	ldr	ip, [sp, #56]	@ 0x38
   38304:	e8801006 	stm	r0, {r1, r2, ip}
   38308:	e3550000 	cmp	r5, #0
   3830c:	e5dd6044 	ldrb	r6, [sp, #68]	@ 0x44
   38310:	e5805014 	str	r5, [r0, #20]
   38314:	e59d003c 	ldr	r0, [sp, #60]	@ 0x3c
   38318:	e584000c 	str	r0, [r4, #12]
   3831c:	e3a00000 	mov	r0, #0
   38320:	e5840018 	str	r0, [r4, #24]
   38324:	e584001c 	str	r0, [r4, #28]
   38328:	e5840020 	str	r0, [r4, #32]
   3832c:	e5840024 	str	r0, [r4, #36]	@ 0x24
   38330:	1a000033 	bne	38404 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x118>
   38334:	e1510000 	cmp	r1, r0
   38338:	11520000 	cmpne	r2, r0
   3833c:	1a00001a 	bne	383ac <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc0>
   38340:	e1a01005 	mov	r1, r5
   38344:	e28d000c 	add	r0, sp, #12
   38348:	ebffcec4 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3834c:	e3a03014 	mov	r3, #20
   38350:	e08d2003 	add	r2, sp, r3
   38354:	e3a01003 	mov	r1, #3
   38358:	e3401004 	movt	r1, #4
   3835c:	e28d000c 	add	r0, sp, #12
   38360:	e58d5000 	str	r5, [sp]
   38364:	ebffcf0f 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   38368:	e3500000 	cmp	r0, #0
   3836c:	0a000007 	beq	38390 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xa4>
   38370:	e59d2020 	ldr	r2, [sp, #32]
   38374:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
   38378:	e884000c 	stm	r4, {r2, r3}
   3837c:	e2422d0a 	sub	r2, r2, #640	@ 0x280
   38380:	e2433e1e 	sub	r3, r3, #480	@ 0x1e0
   38384:	e3530e69 	cmp	r3, #1680	@ 0x690
   38388:	93520d36 	cmpls	r2, #3456	@ 0xd80
   3838c:	9a000002 	bls	3839c <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xb0>
   38390:	e3a02d0a 	mov	r2, #640	@ 0x280
   38394:	e3a03e1e 	mov	r3, #480	@ 0x1e0
   38398:	e884000c 	stm	r4, {r2, r3}
   3839c:	e28d000c 	add	r0, sp, #12
   383a0:	ebffceb5 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   383a4:	e594c008 	ldr	ip, [r4, #8]
   383a8:	e5943010 	ldr	r3, [r4, #16]
   383ac:	e35c0000 	cmp	ip, #0
   383b0:	1a000016 	bne	38410 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x124>
   383b4:	e8940006 	ldm	r4, {r1, r2}
   383b8:	e3530008 	cmp	r3, #8
   383bc:	e5841008 	str	r1, [r4, #8]
   383c0:	e0222296 	mla	r2, r6, r2, r2
   383c4:	e584200c 	str	r2, [r4, #12]
   383c8:	9a000015 	bls	38424 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x138>
   383cc:	e3a02070 	mov	r2, #112	@ 0x70
   383d0:	e2840028 	add	r0, r4, #40	@ 0x28
   383d4:	e3021c44 	movw	r1, #11332	@ 0x2c44
   383d8:	e3401004 	movt	r1, #4
   383dc:	ebfff548 	bl	35904 <memcpy>
   383e0:	e5941008 	ldr	r1, [r4, #8]
   383e4:	e8940009 	ldm	r4, {r0, r3}
   383e8:	e5843038 	str	r3, [r4, #56]	@ 0x38
   383ec:	e594200c 	ldr	r2, [r4, #12]
   383f0:	e5943010 	ldr	r3, [r4, #16]
   383f4:	e5840034 	str	r0, [r4, #52]	@ 0x34
   383f8:	e5841048 	str	r1, [r4, #72]	@ 0x48
   383fc:	e584204c 	str	r2, [r4, #76]	@ 0x4c
   38400:	e584305c 	str	r3, [r4, #92]	@ 0x5c
   38404:	e1a00004 	mov	r0, r4
   38408:	e28dd028 	add	sp, sp, #40	@ 0x28
   3840c:	e8bd8070 	pop	{r4, r5, r6, pc}
   38410:	e594200c 	ldr	r2, [r4, #12]
   38414:	e3520000 	cmp	r2, #0
   38418:	0affffe5 	beq	383b4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xc8>
   3841c:	e3530008 	cmp	r3, #8
   38420:	8affffe9 	bhi	383cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe0>
   38424:	e3000414 	movw	r0, #1044	@ 0x414
   38428:	ebfff743 	bl	3613c <operator new[](unsigned int)>
   3842c:	e3a02b01 	mov	r2, #1024	@ 0x400
   38430:	e1a03000 	mov	r3, r0
   38434:	e3a01000 	mov	r1, #0
   38438:	e5843024 	str	r3, [r4, #36]	@ 0x24
   3843c:	e2800014 	add	r0, r0, #20
   38440:	ebfff518 	bl	358a8 <memset>
   38444:	eaffffe0 	b	383cc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xe0>

00038448 <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   38448:	e92d4010 	push	{r4, lr}
   3844c:	e1a04000 	mov	r4, r0
   38450:	e5900024 	ldr	r0, [r0, #36]	@ 0x24
   38454:	e3500000 	cmp	r0, #0
   38458:	0a000001 	beq	38464 <CBcmFrameBuffer::~CBcmFrameBuffer()+0x1c>
   3845c:	e3a01014 	mov	r1, #20
   38460:	ebfff747 	bl	36184 <operator delete(void*, unsigned int)>
   38464:	e1a00004 	mov	r0, r4
   38468:	e8bd8010 	pop	{r4, pc}

0003846c <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   3846c:	e5903010 	ldr	r3, [r0, #16]
   38470:	e3530008 	cmp	r3, #8
   38474:	812fff1e 	bxhi	lr
   38478:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   3847c:	e1a0c5a2 	lsr	ip, r2, #11
   38480:	e1a00982 	lsl	r0, r2, #19
   38484:	e2811004 	add	r1, r1, #4
   38488:	e200073e 	and	r0, r0, #16252928	@ 0xf80000
   3848c:	e1a02282 	lsl	r2, r2, #5
   38490:	e180018c 	orr	r0, r0, ip, lsl #3
   38494:	e2022b3f 	and	r2, r2, #64512	@ 0xfc00
   38498:	e0833101 	add	r3, r3, r1, lsl #2
   3849c:	e1822000 	orr	r2, r2, r0
   384a0:	e38214ff 	orr	r1, r2, #-16777216	@ 0xff000000
   384a4:	e5c32004 	strb	r2, [r3, #4]
   384a8:	e1a00421 	lsr	r0, r1, #8
   384ac:	e1a02821 	lsr	r2, r1, #16
   384b0:	e5c30005 	strb	r0, [r3, #5]
   384b4:	e1a01c21 	lsr	r1, r1, #24
   384b8:	e5c32006 	strb	r2, [r3, #6]
   384bc:	e5c31007 	strb	r1, [r3, #7]
   384c0:	e12fff1e 	bx	lr

000384c4 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   384c4:	e5903010 	ldr	r3, [r0, #16]
   384c8:	e3530008 	cmp	r3, #8
   384cc:	812fff1e 	bxhi	lr
   384d0:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   384d4:	e2811004 	add	r1, r1, #4
   384d8:	e7e7c452 	ubfx	ip, r2, #8, #8
   384dc:	e7e70852 	ubfx	r0, r2, #16, #8
   384e0:	e0833101 	add	r3, r3, r1, lsl #2
   384e4:	e5c32004 	strb	r2, [r3, #4]
   384e8:	e1a02c22 	lsr	r2, r2, #24
   384ec:	e5c3c005 	strb	ip, [r3, #5]
   384f0:	e5c30006 	strb	r0, [r3, #6]
   384f4:	e5c32007 	strb	r2, [r3, #7]
   384f8:	e12fff1e 	bx	lr

000384fc <CBcmFrameBuffer::GetWidth() const>:
   384fc:	e5900000 	ldr	r0, [r0]
   38500:	e12fff1e 	bx	lr

00038504 <CBcmFrameBuffer::GetHeight() const>:
   38504:	e5900004 	ldr	r0, [r0, #4]
   38508:	e12fff1e 	bx	lr

0003850c <CBcmFrameBuffer::GetVirtWidth() const>:
   3850c:	e5900008 	ldr	r0, [r0, #8]
   38510:	e12fff1e 	bx	lr

00038514 <CBcmFrameBuffer::GetVirtHeight() const>:
   38514:	e590000c 	ldr	r0, [r0, #12]
   38518:	e12fff1e 	bx	lr

0003851c <CBcmFrameBuffer::GetPitch() const>:
   3851c:	e5900020 	ldr	r0, [r0, #32]
   38520:	e12fff1e 	bx	lr

00038524 <CBcmFrameBuffer::GetDepth() const>:
   38524:	e5900010 	ldr	r0, [r0, #16]
   38528:	e12fff1e 	bx	lr

0003852c <CBcmFrameBuffer::GetBuffer() const>:
   3852c:	e5900018 	ldr	r0, [r0, #24]
   38530:	e12fff1e 	bx	lr

00038534 <CBcmFrameBuffer::GetSize() const>:
   38534:	e590001c 	ldr	r0, [r0, #28]
   38538:	e12fff1e 	bx	lr

0003853c <CBcmFrameBuffer::UpdatePalette()>:
   3853c:	e5903010 	ldr	r3, [r0, #16]
   38540:	e3530008 	cmp	r3, #8
   38544:	9a000001 	bls	38550 <CBcmFrameBuffer::UpdatePalette()+0x14>
   38548:	e3a00001 	mov	r0, #1
   3854c:	e12fff1e 	bx	lr
   38550:	e92d4010 	push	{r4, lr}
   38554:	e1a04000 	mov	r4, r0
   38558:	e5903024 	ldr	r3, [r0, #36]	@ 0x24
   3855c:	e24dd010 	sub	sp, sp, #16
   38560:	e3a01000 	mov	r1, #0
   38564:	e3a02001 	mov	r2, #1
   38568:	e28d0008 	add	r0, sp, #8
   3856c:	e5c3100c 	strb	r1, [r3, #12]
   38570:	e5c3100d 	strb	r1, [r3, #13]
   38574:	e5c3100e 	strb	r1, [r3, #14]
   38578:	e5c3100f 	strb	r1, [r3, #15]
   3857c:	e5c31010 	strb	r1, [r3, #16]
   38580:	e5c32011 	strb	r2, [r3, #17]
   38584:	e5c31012 	strb	r1, [r3, #18]
   38588:	e5c31013 	strb	r1, [r3, #19]
   3858c:	ebffce33 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   38590:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
   38594:	e3003408 	movw	r3, #1032	@ 0x408
   38598:	e28d0008 	add	r0, sp, #8
   3859c:	e58d3000 	str	r3, [sp]
   385a0:	e308100b 	movw	r1, #32779	@ 0x800b
   385a4:	e3401004 	movt	r1, #4
   385a8:	e3003414 	movw	r3, #1044	@ 0x414
   385ac:	ebffce7d 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   385b0:	e3500000 	cmp	r0, #0
   385b4:	0a000008 	beq	385dc <CBcmFrameBuffer::UpdatePalette()+0xa0>
   385b8:	e5942024 	ldr	r2, [r4, #36]	@ 0x24
   385bc:	e5d2300c 	ldrb	r3, [r2, #12]
   385c0:	e5d2000d 	ldrb	r0, [r2, #13]
   385c4:	e5d2100e 	ldrb	r1, [r2, #14]
   385c8:	e5d2200f 	ldrb	r2, [r2, #15]
   385cc:	e1833400 	orr	r3, r3, r0, lsl #8
   385d0:	e1833801 	orr	r3, r3, r1, lsl #16
   385d4:	e1933c02 	orrs	r3, r3, r2, lsl #24
   385d8:	0a000004 	beq	385f0 <CBcmFrameBuffer::UpdatePalette()+0xb4>
   385dc:	e28d0008 	add	r0, sp, #8
   385e0:	ebffce25 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   385e4:	e3a00000 	mov	r0, #0
   385e8:	e28dd010 	add	sp, sp, #16
   385ec:	e8bd8010 	pop	{r4, pc}
   385f0:	e28d0008 	add	r0, sp, #8
   385f4:	ebffce20 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   385f8:	e3a00001 	mov	r0, #1
   385fc:	e28dd010 	add	sp, sp, #16
   38600:	e8bd8010 	pop	{r4, pc}

00038604 <CBcmFrameBuffer::Initialize()>:
   38604:	e5901014 	ldr	r1, [r0, #20]
   38608:	e92d4030 	push	{r4, r5, lr}
   3860c:	e3510000 	cmp	r1, #0
   38610:	e24dd00c 	sub	sp, sp, #12
   38614:	13a04000 	movne	r4, #0
   38618:	0a000002 	beq	38628 <CBcmFrameBuffer::Initialize()+0x24>
   3861c:	e1a00004 	mov	r0, r4
   38620:	e28dd00c 	add	sp, sp, #12
   38624:	e8bd8030 	pop	{r4, r5, pc}
   38628:	e1a05000 	mov	r5, r0
   3862c:	e1a0000d 	mov	r0, sp
   38630:	ebffce0a 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   38634:	e3a02070 	mov	r2, #112	@ 0x70
   38638:	e2851028 	add	r1, r5, #40	@ 0x28
   3863c:	e1a0000d 	mov	r0, sp
   38640:	ebffce12 	bl	2be90 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   38644:	e2504000 	subs	r4, r0, #0
   38648:	0a00001a 	beq	386b8 <CBcmFrameBuffer::Initialize()+0xb4>
   3864c:	e5954034 	ldr	r4, [r5, #52]	@ 0x34
   38650:	e3540000 	cmp	r4, #0
   38654:	0a000017 	beq	386b8 <CBcmFrameBuffer::Initialize()+0xb4>
   38658:	e5954038 	ldr	r4, [r5, #56]	@ 0x38
   3865c:	e3540000 	cmp	r4, #0
   38660:	0a000014 	beq	386b8 <CBcmFrameBuffer::Initialize()+0xb4>
   38664:	e5954048 	ldr	r4, [r5, #72]	@ 0x48
   38668:	e3540000 	cmp	r4, #0
   3866c:	0a000011 	beq	386b8 <CBcmFrameBuffer::Initialize()+0xb4>
   38670:	e595404c 	ldr	r4, [r5, #76]	@ 0x4c
   38674:	e3540000 	cmp	r4, #0
   38678:	0a00000e 	beq	386b8 <CBcmFrameBuffer::Initialize()+0xb4>
   3867c:	e595405c 	ldr	r4, [r5, #92]	@ 0x5c
   38680:	e3540000 	cmp	r4, #0
   38684:	0a00000b 	beq	386b8 <CBcmFrameBuffer::Initialize()+0xb4>
   38688:	e5954080 	ldr	r4, [r5, #128]	@ 0x80
   3868c:	e3540000 	cmp	r4, #0
   38690:	0a000008 	beq	386b8 <CBcmFrameBuffer::Initialize()+0xb4>
   38694:	e5952084 	ldr	r2, [r5, #132]	@ 0x84
   38698:	e3c44103 	bic	r4, r4, #-1073741824	@ 0xc0000000
   3869c:	e5953094 	ldr	r3, [r5, #148]	@ 0x94
   386a0:	e1a00005 	mov	r0, r5
   386a4:	e5854018 	str	r4, [r5, #24]
   386a8:	e585201c 	str	r2, [r5, #28]
   386ac:	e5853020 	str	r3, [r5, #32]
   386b0:	ebffffa1 	bl	3853c <CBcmFrameBuffer::UpdatePalette()>
   386b4:	e1a04000 	mov	r4, r0
   386b8:	e1a0000d 	mov	r0, sp
   386bc:	ebffcdee 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   386c0:	e1a00004 	mov	r0, r4
   386c4:	e28dd00c 	add	sp, sp, #12
   386c8:	e8bd8030 	pop	{r4, r5, pc}

000386cc <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   386cc:	e92d4070 	push	{r4, r5, r6, lr}
   386d0:	e1a05001 	mov	r5, r1
   386d4:	e3a01000 	mov	r1, #0
   386d8:	e24dd028 	sub	sp, sp, #40	@ 0x28
   386dc:	e1a06002 	mov	r6, r2
   386e0:	e28d000c 	add	r0, sp, #12
   386e4:	ebffcddd 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   386e8:	e3a03014 	mov	r3, #20
   386ec:	e3a02008 	mov	r2, #8
   386f0:	e28d000c 	add	r0, sp, #12
   386f4:	e58d2000 	str	r2, [sp]
   386f8:	e3081009 	movw	r1, #32777	@ 0x8009
   386fc:	e3401004 	movt	r1, #4
   38700:	e08d2003 	add	r2, sp, r3
   38704:	e58d5020 	str	r5, [sp, #32]
   38708:	e58d6024 	str	r6, [sp, #36]	@ 0x24
   3870c:	ebffce25 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   38710:	e2504000 	subs	r4, r0, #0
   38714:	0a000006 	beq	38734 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x68>
   38718:	e59d3020 	ldr	r3, [sp, #32]
   3871c:	e1530005 	cmp	r3, r5
   38720:	13a04000 	movne	r4, #0
   38724:	059d0024 	ldreq	r0, [sp, #36]	@ 0x24
   38728:	00404006 	subeq	r4, r0, r6
   3872c:	016f4f14 	clzeq	r4, r4
   38730:	01a042a4 	lsreq	r4, r4, #5
   38734:	e28d000c 	add	r0, sp, #12
   38738:	ebffcdcf 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   3873c:	e1a00004 	mov	r0, r4
   38740:	e28dd028 	add	sp, sp, #40	@ 0x28
   38744:	e8bd8070 	pop	{r4, r5, r6, pc}

00038748 <CBcmFrameBuffer::WaitForVerticalSync()>:
   38748:	e92d4010 	push	{r4, lr}
   3874c:	e3a01000 	mov	r1, #0
   38750:	e24dd020 	sub	sp, sp, #32
   38754:	e28d0008 	add	r0, sp, #8
   38758:	ebffcdc0 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   3875c:	e3a03010 	mov	r3, #16
   38760:	e08d2003 	add	r2, sp, r3
   38764:	e3a01000 	mov	r1, #0
   38768:	e28d0008 	add	r0, sp, #8
   3876c:	e58d1000 	str	r1, [sp]
   38770:	e308100e 	movw	r1, #32782	@ 0x800e
   38774:	e3401004 	movt	r1, #4
   38778:	ebffce0a 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   3877c:	e1a04000 	mov	r4, r0
   38780:	e28d0008 	add	r0, sp, #8
   38784:	ebffcdbc 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   38788:	e1a00004 	mov	r0, r4
   3878c:	e28dd020 	add	sp, sp, #32
   38790:	e8bd8010 	pop	{r4, pc}

00038794 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   38794:	e92d4010 	push	{r4, lr}
   38798:	e1a04001 	mov	r4, r1
   3879c:	e3a01000 	mov	r1, #0
   387a0:	e24dd020 	sub	sp, sp, #32
   387a4:	e28d0008 	add	r0, sp, #8
   387a8:	ebffcdac 	bl	2be60 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   387ac:	e3a03010 	mov	r3, #16
   387b0:	e08d2003 	add	r2, sp, r3
   387b4:	e3a01004 	mov	r1, #4
   387b8:	e28d0008 	add	r0, sp, #8
   387bc:	e58d1000 	str	r1, [sp]
   387c0:	e308100f 	movw	r1, #32783	@ 0x800f
   387c4:	e3401004 	movt	r1, #4
   387c8:	e58d401c 	str	r4, [sp, #28]
   387cc:	ebffcdf5 	bl	2bfa8 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   387d0:	e1a04000 	mov	r4, r0
   387d4:	e28d0008 	add	r0, sp, #8
   387d8:	ebffcda7 	bl	2be7c <CBcmPropertyTags::~CBcmPropertyTags()>
   387dc:	e1a00004 	mov	r0, r4
   387e0:	e28dd020 	add	sp, sp, #32
   387e4:	e8bd8010 	pop	{r4, pc}

000387e8 <CBcmFrameBuffer::SetDisplay()>:
   387e8:	e12fff1e 	bx	lr

000387ec <CBcmFrameBuffer::GetNumDisplays()>:
   387ec:	e3a00001 	mov	r0, #1
   387f0:	e12fff1e 	bx	lr

000387f4 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   387f4:	e5801000 	str	r1, [r0]
   387f8:	e5c02004 	strb	r2, [r0, #4]
   387fc:	e12fff1e 	bx	lr

00038800 <CBcmMailBox::~CBcmMailBox()>:
   38800:	e12fff1e 	bx	lr

00038804 <CBcmMailBox::WriteRead(unsigned int)>:
   38804:	e92d4070 	push	{r4, r5, r6, lr}
   38808:	e1a05000 	mov	r5, r0
   3880c:	e5d03004 	ldrb	r3, [r0, #4]
   38810:	e24dd008 	sub	sp, sp, #8
   38814:	e1a06001 	mov	r6, r1
   38818:	e3530000 	cmp	r3, #0
   3881c:	1a000004 	bne	38834 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   38820:	e304321c 	movw	r3, #16924	@ 0x421c
   38824:	e3403004 	movt	r3, #4
   38828:	e5930000 	ldr	r0, [r3]
   3882c:	e3500000 	cmp	r0, #0
   38830:	1a000029 	bne	388dc <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   38834:	e3a04a0b 	mov	r4, #45056	@ 0xb000
   38838:	e3434f00 	movt	r4, #16128	@ 0x3f00
   3883c:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   38840:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   38844:	1a000005 	bne	38860 <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   38848:	e3a00014 	mov	r0, #20
   3884c:	e5943880 	ldr	r3, [r4, #2176]	@ 0x880
   38850:	ebfff1b7 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   38854:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   38858:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   3885c:	0afffff9 	beq	38848 <CBcmMailBox::WriteRead(unsigned int)+0x44>
   38860:	e3a00a0b 	mov	r0, #45056	@ 0xb000
   38864:	e3430f00 	movt	r0, #16128	@ 0x3f00
   38868:	e59038b8 	ldr	r3, [r0, #2232]	@ 0x8b8
   3886c:	e3530000 	cmp	r3, #0
   38870:	bafffffc 	blt	38868 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   38874:	e316000f 	tst	r6, #15
   38878:	1a00001e 	bne	388f8 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   3887c:	e5953000 	ldr	r3, [r5]
   38880:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   38884:	e3432f00 	movt	r2, #16128	@ 0x3f00
   38888:	e1866003 	orr	r6, r6, r3
   3888c:	e58068a0 	str	r6, [r0, #2208]	@ 0x8a0
   38890:	e5950000 	ldr	r0, [r5]
   38894:	e5923898 	ldr	r3, [r2, #2200]	@ 0x898
   38898:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   3889c:	1afffffc 	bne	38894 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   388a0:	e5923880 	ldr	r3, [r2, #2176]	@ 0x880
   388a4:	e203100f 	and	r1, r3, #15
   388a8:	e1510000 	cmp	r1, r0
   388ac:	1afffff8 	bne	38894 <CBcmMailBox::WriteRead(unsigned int)+0x90>
   388b0:	e5d52004 	ldrb	r2, [r5, #4]
   388b4:	e3c3000f 	bic	r0, r3, #15
   388b8:	e3520000 	cmp	r2, #0
   388bc:	1a000004 	bne	388d4 <CBcmMailBox::WriteRead(unsigned int)+0xd0>
   388c0:	e304321c 	movw	r3, #16924	@ 0x421c
   388c4:	e3403004 	movt	r3, #4
   388c8:	e5933000 	ldr	r3, [r3]
   388cc:	e3530000 	cmp	r3, #0
   388d0:	1a000003 	bne	388e4 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   388d4:	e28dd008 	add	sp, sp, #8
   388d8:	e8bd8070 	pop	{r4, r5, r6, pc}
   388dc:	ebfffc27 	bl	37980 <EnterCritical>
   388e0:	eaffffd3 	b	38834 <CBcmMailBox::WriteRead(unsigned int)+0x30>
   388e4:	e58d0004 	str	r0, [sp, #4]
   388e8:	ebfffc4f 	bl	37a2c <LeaveCritical>
   388ec:	e59d0004 	ldr	r0, [sp, #4]
   388f0:	e28dd008 	add	sp, sp, #8
   388f4:	e8bd8070 	pop	{r4, r5, r6, pc}
   388f8:	e30e1b14 	movw	r1, #60180	@ 0xeb14
   388fc:	e3401003 	movt	r1, #3
   38900:	e30e0b24 	movw	r0, #60196	@ 0xeb24
   38904:	e3400003 	movt	r0, #3
   38908:	e3a02062 	mov	r2, #98	@ 0x62
   3890c:	ebffcd32 	bl	2bddc <assertion_failed>

00038910 <CBcmMailBox::Flush()>:
   38910:	e92d4010 	push	{r4, lr}
   38914:	e3a04a0b 	mov	r4, #45056	@ 0xb000
   38918:	e3434f00 	movt	r4, #16128	@ 0x3f00
   3891c:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   38920:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   38924:	18bd8010 	popne	{r4, pc}
   38928:	e3a00014 	mov	r0, #20
   3892c:	e5943880 	ldr	r3, [r4, #2176]	@ 0x880
   38930:	ebfff17f 	bl	34f34 <CTimer::SimpleMsDelay(unsigned int)>
   38934:	e5943898 	ldr	r3, [r4, #2200]	@ 0x898
   38938:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   3893c:	0afffff9 	beq	38928 <CBcmMailBox::Flush()+0x18>
   38940:	e8bd8010 	pop	{r4, pc}

00038944 <CBcmMailBox::Read()>:
   38944:	e5901000 	ldr	r1, [r0]
   38948:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   3894c:	e3432f00 	movt	r2, #16128	@ 0x3f00
   38950:	e5923898 	ldr	r3, [r2, #2200]	@ 0x898
   38954:	e3130101 	tst	r3, #1073741824	@ 0x40000000
   38958:	1afffffc 	bne	38950 <CBcmMailBox::Read()+0xc>
   3895c:	e5920880 	ldr	r0, [r2, #2176]	@ 0x880
   38960:	e200300f 	and	r3, r0, #15
   38964:	e1530001 	cmp	r3, r1
   38968:	1afffff8 	bne	38950 <CBcmMailBox::Read()+0xc>
   3896c:	e3c0000f 	bic	r0, r0, #15
   38970:	e12fff1e 	bx	lr

00038974 <CBcmMailBox::Write(unsigned int)>:
   38974:	e3a02a0b 	mov	r2, #45056	@ 0xb000
   38978:	e3432f00 	movt	r2, #16128	@ 0x3f00
   3897c:	e59238b8 	ldr	r3, [r2, #2232]	@ 0x8b8
   38980:	e3530000 	cmp	r3, #0
   38984:	bafffffc 	blt	3897c <CBcmMailBox::Write(unsigned int)+0x8>
   38988:	e311000f 	tst	r1, #15
   3898c:	1a000003 	bne	389a0 <CBcmMailBox::Write(unsigned int)+0x2c>
   38990:	e5903000 	ldr	r3, [r0]
   38994:	e1811003 	orr	r1, r1, r3
   38998:	e58218a0 	str	r1, [r2, #2208]	@ 0x8a0
   3899c:	e12fff1e 	bx	lr
   389a0:	e30e1b14 	movw	r1, #60180	@ 0xeb14
   389a4:	e3401003 	movt	r1, #3
   389a8:	e30e0b24 	movw	r0, #60196	@ 0xeb24
   389ac:	e3400003 	movt	r0, #3
   389b0:	e3a02062 	mov	r2, #98	@ 0x62
   389b4:	e92d4010 	push	{r4, lr}
   389b8:	ebffcd07 	bl	2bddc <assertion_failed>

000389bc <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   389bc:	e304321c 	movw	r3, #16924	@ 0x421c
   389c0:	e3403004 	movt	r3, #4
   389c4:	e3a02000 	mov	r2, #0
   389c8:	e5832000 	str	r2, [r3]
   389cc:	e12fff1e 	bx	lr

000389d0 <CCharGenerator::CCharGenerator()>:
   389d0:	e3a03008 	mov	r3, #8
   389d4:	e5803000 	str	r3, [r0]
   389d8:	e12fff1e 	bx	lr

000389dc <CCharGenerator::~CCharGenerator()>:
   389dc:	e12fff1e 	bx	lr

000389e0 <CCharGenerator::GetCharWidth() const>:
   389e0:	e5900000 	ldr	r0, [r0]
   389e4:	e12fff1e 	bx	lr

000389e8 <CCharGenerator::GetCharHeight() const>:
   389e8:	e3a00013 	mov	r0, #19
   389ec:	e12fff1e 	bx	lr

000389f0 <CCharGenerator::GetUnderline() const>:
   389f0:	e3a00010 	mov	r0, #16
   389f4:	e12fff1e 	bx	lr

000389f8 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   389f8:	e6ef1071 	uxtb	r1, r1
   389fc:	e2411021 	sub	r1, r1, #33	@ 0x21
   38a00:	e35100de 	cmp	r1, #222	@ 0xde
   38a04:	8a00000d 	bhi	38a40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   38a08:	e5900000 	ldr	r0, [r0]
   38a0c:	e1500002 	cmp	r0, r2
   38a10:	9a00000c 	bls	38a48 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   38a14:	e353000f 	cmp	r3, #15
   38a18:	8a000008 	bhi	38a40 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   38a1c:	e3020cb8 	movw	r0, #11448	@ 0x2cb8
   38a20:	e3400004 	movt	r0, #4
   38a24:	e0800201 	add	r0, r0, r1, lsl #4
   38a28:	e3a01080 	mov	r1, #128	@ 0x80
   38a2c:	e7d03003 	ldrb	r3, [r0, r3]
   38a30:	e0133251 	ands	r3, r3, r1, asr r2
   38a34:	13a00001 	movne	r0, #1
   38a38:	03a00000 	moveq	r0, #0
   38a3c:	e12fff1e 	bx	lr
   38a40:	e3a00000 	mov	r0, #0
   38a44:	e12fff1e 	bx	lr
   38a48:	e30e1b38 	movw	r1, #60216	@ 0xeb38
   38a4c:	e3401003 	movt	r1, #3
   38a50:	e30e0b4c 	movw	r0, #60236	@ 0xeb4c
   38a54:	e3400003 	movt	r0, #3
   38a58:	e3a0204e 	mov	r2, #78	@ 0x4e
   38a5c:	e92d4010 	push	{r4, lr}
   38a60:	ebffccdd 	bl	2bddc <assertion_failed>
   38a64:	00000000 	andeq	r0, r0, r0

00038a68 <DelayLoop>:
   38a68:	e1a01001 	mov	r1, r1
   38a6c:	e1a02002 	mov	r2, r2
   38a70:	e2500001 	subs	r0, r0, #1
   38a74:	8afffffb 	bhi	38a68 <DelayLoop>
   38a78:	e1a0f00e 	mov	pc, lr

00038a7c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   38a7c:	e92d4070 	push	{r4, r5, r6, lr}
   38a80:	e1a04000 	mov	r4, r0
   38a84:	e1a06001 	mov	r6, r1
   38a88:	e1a05002 	mov	r5, r2
   38a8c:	ebffdb5d 	bl	2f808 <CMachineInfo::Get()>
   38a90:	e1a01006 	mov	r1, r6
   38a94:	ebffdb05 	bl	2f6b0 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   38a98:	e3a01000 	mov	r1, #0
   38a9c:	e3500080 	cmp	r0, #128	@ 0x80
   38aa0:	e8840003 	stm	r4, {r0, r1}
   38aa4:	e5841008 	str	r1, [r4, #8]
   38aa8:	e584500c 	str	r5, [r4, #12]
   38aac:	e5c41010 	strb	r1, [r4, #16]
   38ab0:	e5841014 	str	r1, [r4, #20]
   38ab4:	e5841018 	str	r1, [r4, #24]
   38ab8:	e5c4101c 	strb	r1, [r4, #28]
   38abc:	0a00001c 	beq	38b34 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xb8>
   38ac0:	e350000b 	cmp	r0, #11
   38ac4:	8a00001f 	bhi	38b48 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xcc>
   38ac8:	e3a0003f 	mov	r0, #63	@ 0x3f
   38acc:	ebfff586 	bl	360ec <operator new[](unsigned int, int)>
   38ad0:	f2c00010 	vmov.i32	d16, #0	@ 0x00000000
   38ad4:	e280301f 	add	r3, r0, #31
   38ad8:	e3a02a07 	mov	r2, #28672	@ 0x7000
   38adc:	e3432f00 	movt	r2, #16128	@ 0x3f00
   38ae0:	e3c3301f 	bic	r3, r3, #31
   38ae4:	e5941000 	ldr	r1, [r4]
   38ae8:	e9840009 	stmib	r4, {r0, r3}
   38aec:	e3a00001 	mov	r0, #1
   38af0:	edc30b06 	vstr	d16, [r3, #24]
   38af4:	e5923ff0 	ldr	r3, [r2, #4080]	@ 0xff0
   38af8:	e1833110 	orr	r3, r3, r0, lsl r1
   38afc:	e3a00ffa 	mov	r0, #1000	@ 0x3e8
   38b00:	e5823ff0 	str	r3, [r2, #4080]	@ 0xff0
   38b04:	ebfff119 	bl	34f70 <CTimer::SimpleusDelay(unsigned int)>
   38b08:	e5942000 	ldr	r2, [r4]
   38b0c:	e3a03102 	mov	r3, #-2147483648	@ 0x80000000
   38b10:	e282283f 	add	r2, r2, #4128768	@ 0x3f0000
   38b14:	e2822070 	add	r2, r2, #112	@ 0x70
   38b18:	e1a02402 	lsl	r2, r2, #8
   38b1c:	e5823000 	str	r3, [r2]
   38b20:	e5923000 	ldr	r3, [r2]
   38b24:	e3530000 	cmp	r3, #0
   38b28:	bafffffc 	blt	38b20 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0xa4>
   38b2c:	e1a00004 	mov	r0, r4
   38b30:	e8bd8070 	pop	{r4, r5, r6, pc}
   38b34:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38b38:	e3401004 	movt	r1, #4
   38b3c:	e3a02039 	mov	r2, #57	@ 0x39
   38b40:	e2810010 	add	r0, r1, #16
   38b44:	ebffcca4 	bl	2bddc <assertion_failed>
   38b48:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38b4c:	e3401004 	movt	r1, #4
   38b50:	e3a0203a 	mov	r2, #58	@ 0x3a
   38b54:	e2810030 	add	r0, r1, #48	@ 0x30
   38b58:	ebffcc9f 	bl	2bddc <assertion_failed>

00038b5c <CDMAChannel::~CDMAChannel()>:
   38b5c:	e5903000 	ldr	r3, [r0]
   38b60:	e92d4010 	push	{r4, lr}
   38b64:	e353000b 	cmp	r3, #11
   38b68:	8a00002c 	bhi	38c20 <CDMAChannel::~CDMAChannel()+0xc4>
   38b6c:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   38b70:	e3a02102 	mov	r2, #-2147483648	@ 0x80000000
   38b74:	e2833070 	add	r3, r3, #112	@ 0x70
   38b78:	e1a04000 	mov	r4, r0
   38b7c:	e1a03403 	lsl	r3, r3, #8
   38b80:	e5832000 	str	r2, [r3]
   38b84:	e5901000 	ldr	r1, [r0]
   38b88:	e281283f 	add	r2, r1, #4128768	@ 0x3f0000
   38b8c:	e2822070 	add	r2, r2, #112	@ 0x70
   38b90:	e1a02402 	lsl	r2, r2, #8
   38b94:	e5923000 	ldr	r3, [r2]
   38b98:	e3530000 	cmp	r3, #0
   38b9c:	bafffffc 	blt	38b94 <CDMAChannel::~CDMAChannel()+0x38>
   38ba0:	e3a03a07 	mov	r3, #28672	@ 0x7000
   38ba4:	e3433f00 	movt	r3, #16128	@ 0x3f00
   38ba8:	e594000c 	ldr	r0, [r4, #12]
   38bac:	e3a0e001 	mov	lr, #1
   38bb0:	e3a0c000 	mov	ip, #0
   38bb4:	e5932ff0 	ldr	r2, [r3, #4080]	@ 0xff0
   38bb8:	e150000c 	cmp	r0, ip
   38bbc:	e1c2211e 	bic	r2, r2, lr, lsl r1
   38bc0:	e5832ff0 	str	r2, [r3, #4080]	@ 0xff0
   38bc4:	e584c014 	str	ip, [r4, #20]
   38bc8:	0a000009 	beq	38bf4 <CDMAChannel::~CDMAChannel()+0x98>
   38bcc:	e5d43010 	ldrb	r3, [r4, #16]
   38bd0:	e153000c 	cmp	r3, ip
   38bd4:	0a000004 	beq	38bec <CDMAChannel::~CDMAChannel()+0x90>
   38bd8:	e5941000 	ldr	r1, [r4]
   38bdc:	e351000c 	cmp	r1, #12
   38be0:	8a000013 	bhi	38c34 <CDMAChannel::~CDMAChannel()+0xd8>
   38be4:	e2811010 	add	r1, r1, #16
   38be8:	ebfffc21 	bl	37c74 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   38bec:	e3a03000 	mov	r3, #0
   38bf0:	e584300c 	str	r3, [r4, #12]
   38bf4:	ebffdb03 	bl	2f808 <CMachineInfo::Get()>
   38bf8:	e5941000 	ldr	r1, [r4]
   38bfc:	ebffdae0 	bl	2f784 <CMachineInfo::FreeDMAChannel(unsigned int)>
   38c00:	e5940004 	ldr	r0, [r4, #4]
   38c04:	e3a03000 	mov	r3, #0
   38c08:	e5843008 	str	r3, [r4, #8]
   38c0c:	e1500003 	cmp	r0, r3
   38c10:	0a000000 	beq	38c18 <CDMAChannel::~CDMAChannel()+0xbc>
   38c14:	ebfff554 	bl	3616c <operator delete[](void*)>
   38c18:	e1a00004 	mov	r0, r4
   38c1c:	e8bd8010 	pop	{r4, pc}
   38c20:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38c24:	e3401004 	movt	r1, #4
   38c28:	e3a02062 	mov	r2, #98	@ 0x62
   38c2c:	e2810030 	add	r0, r1, #48	@ 0x30
   38c30:	ebffcc69 	bl	2bddc <assertion_failed>
   38c34:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38c38:	e3401004 	movt	r1, #4
   38c3c:	e3a02074 	mov	r2, #116	@ 0x74
   38c40:	e281004c 	add	r0, r1, #76	@ 0x4c
   38c44:	ebffcc64 	bl	2bddc <assertion_failed>

00038c48 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   38c48:	e92d4070 	push	{r4, r5, r6, lr}
   38c4c:	e1a06000 	mov	r6, r0
   38c50:	e59de010 	ldr	lr, [sp, #16]
   38c54:	e1a00002 	mov	r0, r2
   38c58:	e2515000 	subs	r5, r1, #0
   38c5c:	e5dd2014 	ldrb	r2, [sp, #20]
   38c60:	0a00004b 	beq	38d94 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x14c>
   38c64:	e3500000 	cmp	r0, #0
   38c68:	0a00004e 	beq	38da8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x160>
   38c6c:	e1a04003 	mov	r4, r3
   38c70:	e3530000 	cmp	r3, #0
   38c74:	0a000050 	beq	38dbc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x174>
   38c78:	e35e000f 	cmp	lr, #15
   38c7c:	8a000053 	bhi	38dd0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x188>
   38c80:	e596c008 	ldr	ip, [r6, #8]
   38c84:	e35c0000 	cmp	ip, #0
   38c88:	0a000055 	beq	38de4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x19c>
   38c8c:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   38c90:	8a000058 	bhi	38df8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1b0>
   38c94:	e5961000 	ldr	r1, [r6]
   38c98:	e3073020 	movw	r3, #28704	@ 0x7020
   38c9c:	e3433f00 	movt	r3, #16128	@ 0x3f00
   38ca0:	e7933401 	ldr	r3, [r3, r1, lsl #8]
   38ca4:	e2233201 	eor	r3, r3, #268435456	@ 0x10000000
   38ca8:	e7e03e53 	ubfx	r3, r3, #28, #1
   38cac:	e3540801 	cmp	r4, #65536	@ 0x10000
   38cb0:	33833001 	orrcc	r3, r3, #1
   38cb4:	e3530000 	cmp	r3, #0
   38cb8:	0a000053 	beq	38e0c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1c4>
   38cbc:	e3803103 	orr	r3, r0, #-1073741824	@ 0xc0000000
   38cc0:	e1a0e60e 	lsl	lr, lr, #12
   38cc4:	e38eee33 	orr	lr, lr, #816	@ 0x330
   38cc8:	e3520000 	cmp	r2, #0
   38ccc:	e1a03c23 	lsr	r3, r3, #24
   38cd0:	e5cc3007 	strb	r3, [ip, #7]
   38cd4:	e3853103 	orr	r3, r5, #-1073741824	@ 0xc0000000
   38cd8:	e5cc0004 	strb	r0, [ip, #4]
   38cdc:	e5cc5008 	strb	r5, [ip, #8]
   38ce0:	e1a03c23 	lsr	r3, r3, #24
   38ce4:	e5cc400c 	strb	r4, [ip, #12]
   38ce8:	e5cc300b 	strb	r3, [ip, #11]
   38cec:	e3a03000 	mov	r3, #0
   38cf0:	e5cc3010 	strb	r3, [ip, #16]
   38cf4:	e5cc3011 	strb	r3, [ip, #17]
   38cf8:	e5cc3012 	strb	r3, [ip, #18]
   38cfc:	e5cc3013 	strb	r3, [ip, #19]
   38d00:	e5cc3014 	strb	r3, [ip, #20]
   38d04:	e5cc3015 	strb	r3, [ip, #21]
   38d08:	e5cc3016 	strb	r3, [ip, #22]
   38d0c:	e5cc3017 	strb	r3, [ip, #23]
   38d10:	e3a03030 	mov	r3, #48	@ 0x30
   38d14:	e5cc3000 	strb	r3, [ip]
   38d18:	e1a0342e 	lsr	r3, lr, #8
   38d1c:	e5cc3001 	strb	r3, [ip, #1]
   38d20:	e7e7385e 	ubfx	r3, lr, #16, #8
   38d24:	e1a0ec2e 	lsr	lr, lr, #24
   38d28:	e5cc3002 	strb	r3, [ip, #2]
   38d2c:	e5cce003 	strb	lr, [ip, #3]
   38d30:	e7e73450 	ubfx	r3, r0, #8, #8
   38d34:	e5cc3005 	strb	r3, [ip, #5]
   38d38:	e7e73850 	ubfx	r3, r0, #16, #8
   38d3c:	e5cc3006 	strb	r3, [ip, #6]
   38d40:	e7e73455 	ubfx	r3, r5, #8, #8
   38d44:	e5cc3009 	strb	r3, [ip, #9]
   38d48:	e7e73855 	ubfx	r3, r5, #16, #8
   38d4c:	e5cc300a 	strb	r3, [ip, #10]
   38d50:	e7e73454 	ubfx	r3, r4, #8, #8
   38d54:	e5cc300d 	strb	r3, [ip, #13]
   38d58:	e7e73854 	ubfx	r3, r4, #16, #8
   38d5c:	e5cc300e 	strb	r3, [ip, #14]
   38d60:	e1a03c24 	lsr	r3, r4, #24
   38d64:	e5cc300f 	strb	r3, [ip, #15]
   38d68:	1a000001 	bne	38d74 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x12c>
   38d6c:	e5862020 	str	r2, [r6, #32]
   38d70:	e8bd8070 	pop	{r4, r5, r6, pc}
   38d74:	e1a01004 	mov	r1, r4
   38d78:	e5865020 	str	r5, [r6, #32]
   38d7c:	e5864024 	str	r4, [r6, #36]	@ 0x24
   38d80:	ebfff8b1 	bl	3704c <CleanAndInvalidateDataCacheRange>
   38d84:	e1a01004 	mov	r1, r4
   38d88:	e1a00005 	mov	r0, r5
   38d8c:	e8bd4070 	pop	{r4, r5, r6, lr}
   38d90:	eafff8ad 	b	3704c <CleanAndInvalidateDataCacheRange>
   38d94:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38d98:	e3401004 	movt	r1, #4
   38d9c:	e3a0208f 	mov	r2, #143	@ 0x8f
   38da0:	e2810060 	add	r0, r1, #96	@ 0x60
   38da4:	ebffcc0c 	bl	2bddc <assertion_failed>
   38da8:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38dac:	e3401004 	movt	r1, #4
   38db0:	e3a02090 	mov	r2, #144	@ 0x90
   38db4:	e2810074 	add	r0, r1, #116	@ 0x74
   38db8:	ebffcc07 	bl	2bddc <assertion_failed>
   38dbc:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38dc0:	e3401004 	movt	r1, #4
   38dc4:	e3a02091 	mov	r2, #145	@ 0x91
   38dc8:	e2810084 	add	r0, r1, #132	@ 0x84
   38dcc:	ebffcc02 	bl	2bddc <assertion_failed>
   38dd0:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38dd4:	e3401004 	movt	r1, #4
   38dd8:	e3a02092 	mov	r2, #146	@ 0x92
   38ddc:	e2810090 	add	r0, r1, #144	@ 0x90
   38de0:	ebffcbfd 	bl	2bddc <assertion_failed>
   38de4:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38de8:	e3401004 	movt	r1, #4
   38dec:	e3a02094 	mov	r2, #148	@ 0x94
   38df0:	e28100a4 	add	r0, r1, #164	@ 0xa4
   38df4:	ebffcbf8 	bl	2bddc <assertion_failed>
   38df8:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38dfc:	e3401004 	movt	r1, #4
   38e00:	e3a02095 	mov	r2, #149	@ 0x95
   38e04:	e28100bc 	add	r0, r1, #188	@ 0xbc
   38e08:	ebffcbf3 	bl	2bddc <assertion_failed>
   38e0c:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38e10:	e3401004 	movt	r1, #4
   38e14:	e3a02096 	mov	r2, #150	@ 0x96
   38e18:	e28100d4 	add	r0, r1, #212	@ 0xd4
   38e1c:	ebffcbee 	bl	2bddc <assertion_failed>

00038e20 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   38e20:	e92d4010 	push	{r4, lr}
   38e24:	e1a0e000 	mov	lr, r0
   38e28:	e2510000 	subs	r0, r1, #0
   38e2c:	e5dd4008 	ldrb	r4, [sp, #8]
   38e30:	0a00003d 	beq	38f2c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x10c>
   38e34:	e3530000 	cmp	r3, #0
   38e38:	0a000040 	beq	38f40 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x120>
   38e3c:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   38e40:	8a000043 	bhi	38f54 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x134>
   38e44:	e59ec000 	ldr	ip, [lr]
   38e48:	e3071020 	movw	r1, #28704	@ 0x7020
   38e4c:	e3431f00 	movt	r1, #16128	@ 0x3f00
   38e50:	e791140c 	ldr	r1, [r1, ip, lsl #8]
   38e54:	e2211201 	eor	r1, r1, #268435456	@ 0x10000000
   38e58:	e7e01e51 	ubfx	r1, r1, #28, #1
   38e5c:	e3530801 	cmp	r3, #65536	@ 0x10000
   38e60:	33811001 	orrcc	r1, r1, #1
   38e64:	e3510000 	cmp	r1, #0
   38e68:	0a000048 	beq	38f90 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x170>
   38e6c:	e3d224ff 	bics	r2, r2, #-16777216	@ 0xff000000
   38e70:	0a00003c 	beq	38f68 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x148>
   38e74:	e59ec008 	ldr	ip, [lr, #8]
   38e78:	e282247e 	add	r2, r2, #2113929216	@ 0x7e000000
   38e7c:	e35c0000 	cmp	ip, #0
   38e80:	0a00003d 	beq	38f7c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x15c>
   38e84:	e3801103 	orr	r1, r0, #-1073741824	@ 0xc0000000
   38e88:	e5cc4002 	strb	r4, [ip, #2]
   38e8c:	e5cc2004 	strb	r2, [ip, #4]
   38e90:	e1a01c21 	lsr	r1, r1, #24
   38e94:	e5cc100b 	strb	r1, [ip, #11]
   38e98:	e3001438 	movw	r1, #1080	@ 0x438
   38e9c:	e5cc0008 	strb	r0, [ip, #8]
   38ea0:	e5cc1000 	strb	r1, [ip]
   38ea4:	e1a01421 	lsr	r1, r1, #8
   38ea8:	e5cc300c 	strb	r3, [ip, #12]
   38eac:	e5cc1001 	strb	r1, [ip, #1]
   38eb0:	e3a01000 	mov	r1, #0
   38eb4:	e5cc1010 	strb	r1, [ip, #16]
   38eb8:	e5cc1011 	strb	r1, [ip, #17]
   38ebc:	e5cc1012 	strb	r1, [ip, #18]
   38ec0:	e5cc1013 	strb	r1, [ip, #19]
   38ec4:	e5cc1014 	strb	r1, [ip, #20]
   38ec8:	e5cc1015 	strb	r1, [ip, #21]
   38ecc:	e5cc1016 	strb	r1, [ip, #22]
   38ed0:	e5cc1017 	strb	r1, [ip, #23]
   38ed4:	e5cc1003 	strb	r1, [ip, #3]
   38ed8:	e7e71452 	ubfx	r1, r2, #8, #8
   38edc:	e5cc1005 	strb	r1, [ip, #5]
   38ee0:	e7e71852 	ubfx	r1, r2, #16, #8
   38ee4:	e1a02c22 	lsr	r2, r2, #24
   38ee8:	e5cc1006 	strb	r1, [ip, #6]
   38eec:	e5cc2007 	strb	r2, [ip, #7]
   38ef0:	e1a01003 	mov	r1, r3
   38ef4:	e7e72450 	ubfx	r2, r0, #8, #8
   38ef8:	e5cc2009 	strb	r2, [ip, #9]
   38efc:	e7e72850 	ubfx	r2, r0, #16, #8
   38f00:	e5cc200a 	strb	r2, [ip, #10]
   38f04:	e7e72453 	ubfx	r2, r3, #8, #8
   38f08:	e5cc200d 	strb	r2, [ip, #13]
   38f0c:	e7e72853 	ubfx	r2, r3, #16, #8
   38f10:	e5cc200e 	strb	r2, [ip, #14]
   38f14:	e1a02c23 	lsr	r2, r3, #24
   38f18:	e5cc200f 	strb	r2, [ip, #15]
   38f1c:	e58e0020 	str	r0, [lr, #32]
   38f20:	e58e3024 	str	r3, [lr, #36]	@ 0x24
   38f24:	e8bd4010 	pop	{r4, lr}
   38f28:	eafff847 	b	3704c <CleanAndInvalidateDataCacheRange>
   38f2c:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38f30:	e3401004 	movt	r1, #4
   38f34:	e3a020bd 	mov	r2, #189	@ 0xbd
   38f38:	e2810060 	add	r0, r1, #96	@ 0x60
   38f3c:	ebffcba6 	bl	2bddc <assertion_failed>
   38f40:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38f44:	e3401004 	movt	r1, #4
   38f48:	e3a020be 	mov	r2, #190	@ 0xbe
   38f4c:	e2810084 	add	r0, r1, #132	@ 0x84
   38f50:	ebffcba1 	bl	2bddc <assertion_failed>
   38f54:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38f58:	e3401004 	movt	r1, #4
   38f5c:	e3a020bf 	mov	r2, #191	@ 0xbf
   38f60:	e28100bc 	add	r0, r1, #188	@ 0xbc
   38f64:	ebffcb9c 	bl	2bddc <assertion_failed>
   38f68:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38f6c:	e3401004 	movt	r1, #4
   38f70:	e3a020c4 	mov	r2, #196	@ 0xc4
   38f74:	e2810f4b 	add	r0, r1, #300	@ 0x12c
   38f78:	ebffcb97 	bl	2bddc <assertion_failed>
   38f7c:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38f80:	e3401004 	movt	r1, #4
   38f84:	e3a020c7 	mov	r2, #199	@ 0xc7
   38f88:	e28100a4 	add	r0, r1, #164	@ 0xa4
   38f8c:	ebffcb92 	bl	2bddc <assertion_failed>
   38f90:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   38f94:	e3401004 	movt	r1, #4
   38f98:	e3a020c0 	mov	r2, #192	@ 0xc0
   38f9c:	e28100d4 	add	r0, r1, #212	@ 0xd4
   38fa0:	ebffcb8d 	bl	2bddc <assertion_failed>

00038fa4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   38fa4:	e92d4070 	push	{r4, r5, r6, lr}
   38fa8:	e1a04000 	mov	r4, r0
   38fac:	e2520000 	subs	r0, r2, #0
   38fb0:	e5dd5010 	ldrb	r5, [sp, #16]
   38fb4:	0a00003d 	beq	390b0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x10c>
   38fb8:	e1a0e001 	mov	lr, r1
   38fbc:	e3530000 	cmp	r3, #0
   38fc0:	e1a01003 	mov	r1, r3
   38fc4:	0a00003e 	beq	390c4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x120>
   38fc8:	e3730107 	cmn	r3, #-1073741823	@ 0xc0000001
   38fcc:	8a000041 	bhi	390d8 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x134>
   38fd0:	e5942000 	ldr	r2, [r4]
   38fd4:	e3073020 	movw	r3, #28704	@ 0x7020
   38fd8:	e3433f00 	movt	r3, #16128	@ 0x3f00
   38fdc:	e793c402 	ldr	ip, [r3, r2, lsl #8]
   38fe0:	e22cc201 	eor	ip, ip, #268435456	@ 0x10000000
   38fe4:	e7e0ce5c 	ubfx	ip, ip, #28, #1
   38fe8:	e3510801 	cmp	r1, #65536	@ 0x10000
   38fec:	338cc001 	orrcc	ip, ip, #1
   38ff0:	e35c0000 	cmp	ip, #0
   38ff4:	0a000046 	beq	39114 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x170>
   38ff8:	e3dee4ff 	bics	lr, lr, #-16777216	@ 0xff000000
   38ffc:	0a00003a 	beq	390ec <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x148>
   39000:	e594c008 	ldr	ip, [r4, #8]
   39004:	e28ee47e 	add	lr, lr, #2113929216	@ 0x7e000000
   39008:	e35c0000 	cmp	ip, #0
   3900c:	0a00003b 	beq	39100 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x15c>
   39010:	e3803103 	orr	r3, r0, #-1073741824	@ 0xc0000000
   39014:	e3a02048 	mov	r2, #72	@ 0x48
   39018:	e5cc5002 	strb	r5, [ip, #2]
   3901c:	e1a03c23 	lsr	r3, r3, #24
   39020:	e5cce008 	strb	lr, [ip, #8]
   39024:	e5cc3007 	strb	r3, [ip, #7]
   39028:	e3a03000 	mov	r3, #0
   3902c:	e5cc2000 	strb	r2, [ip]
   39030:	e3a02003 	mov	r2, #3
   39034:	e5cc0004 	strb	r0, [ip, #4]
   39038:	e5cc2001 	strb	r2, [ip, #1]
   3903c:	e7e72450 	ubfx	r2, r0, #8, #8
   39040:	e5cc100c 	strb	r1, [ip, #12]
   39044:	e5cc2005 	strb	r2, [ip, #5]
   39048:	e7e72850 	ubfx	r2, r0, #16, #8
   3904c:	e5cc3010 	strb	r3, [ip, #16]
   39050:	e5cc2006 	strb	r2, [ip, #6]
   39054:	e7e7245e 	ubfx	r2, lr, #8, #8
   39058:	e5cc3011 	strb	r3, [ip, #17]
   3905c:	e5cc2009 	strb	r2, [ip, #9]
   39060:	e7e7285e 	ubfx	r2, lr, #16, #8
   39064:	e5cc3012 	strb	r3, [ip, #18]
   39068:	e1a0ec2e 	lsr	lr, lr, #24
   3906c:	e5cc200a 	strb	r2, [ip, #10]
   39070:	e7e72451 	ubfx	r2, r1, #8, #8
   39074:	e5cce00b 	strb	lr, [ip, #11]
   39078:	e5cc200d 	strb	r2, [ip, #13]
   3907c:	e7e72851 	ubfx	r2, r1, #16, #8
   39080:	e5cc3013 	strb	r3, [ip, #19]
   39084:	e5cc200e 	strb	r2, [ip, #14]
   39088:	e1a02c21 	lsr	r2, r1, #24
   3908c:	e5cc3014 	strb	r3, [ip, #20]
   39090:	e5cc3015 	strb	r3, [ip, #21]
   39094:	e5cc3016 	strb	r3, [ip, #22]
   39098:	e5cc3017 	strb	r3, [ip, #23]
   3909c:	e5cc3003 	strb	r3, [ip, #3]
   390a0:	e5cc200f 	strb	r2, [ip, #15]
   390a4:	e5843020 	str	r3, [r4, #32]
   390a8:	e8bd4070 	pop	{r4, r5, r6, lr}
   390ac:	eafff7e6 	b	3704c <CleanAndInvalidateDataCacheRange>
   390b0:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   390b4:	e3401004 	movt	r1, #4
   390b8:	e3a020e5 	mov	r2, #229	@ 0xe5
   390bc:	e2810074 	add	r0, r1, #116	@ 0x74
   390c0:	ebffcb45 	bl	2bddc <assertion_failed>
   390c4:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   390c8:	e3401004 	movt	r1, #4
   390cc:	e3a020e6 	mov	r2, #230	@ 0xe6
   390d0:	e2810084 	add	r0, r1, #132	@ 0x84
   390d4:	ebffcb40 	bl	2bddc <assertion_failed>
   390d8:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   390dc:	e3401004 	movt	r1, #4
   390e0:	e3a020e7 	mov	r2, #231	@ 0xe7
   390e4:	e28100bc 	add	r0, r1, #188	@ 0xbc
   390e8:	ebffcb3b 	bl	2bddc <assertion_failed>
   390ec:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   390f0:	e3401004 	movt	r1, #4
   390f4:	e3a020ec 	mov	r2, #236	@ 0xec
   390f8:	e2810f4b 	add	r0, r1, #300	@ 0x12c
   390fc:	ebffcb36 	bl	2bddc <assertion_failed>
   39100:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39104:	e3401004 	movt	r1, #4
   39108:	e3a020ef 	mov	r2, #239	@ 0xef
   3910c:	e28100a4 	add	r0, r1, #164	@ 0xa4
   39110:	ebffcb31 	bl	2bddc <assertion_failed>
   39114:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39118:	e3401004 	movt	r1, #4
   3911c:	e3a020e8 	mov	r2, #232	@ 0xe8
   39120:	e28100d4 	add	r0, r1, #212	@ 0xd4
   39124:	ebffcb2c 	bl	2bddc <assertion_failed>

00039128 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   39128:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   3912c:	e2516000 	subs	r6, r1, #0
   39130:	e59d7018 	ldr	r7, [sp, #24]
   39134:	e59de01c 	ldr	lr, [sp, #28]
   39138:	e59d4020 	ldr	r4, [sp, #32]
   3913c:	0a00004d 	beq	39278 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x150>
   39140:	e1a05000 	mov	r5, r0
   39144:	e3520000 	cmp	r2, #0
   39148:	e1a00002 	mov	r0, r2
   3914c:	0a00004e 	beq	3928c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x164>
   39150:	e3530000 	cmp	r3, #0
   39154:	0a000051 	beq	392a0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x178>
   39158:	e3530801 	cmp	r3, #65536	@ 0x10000
   3915c:	2a000054 	bcs	392b4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x18c>
   39160:	e3570000 	cmp	r7, #0
   39164:	0a000057 	beq	392c8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a0>
   39168:	e3570901 	cmp	r7, #16384	@ 0x4000
   3916c:	2a00005a 	bcs	392dc <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b4>
   39170:	e35e0801 	cmp	lr, #65536	@ 0x10000
   39174:	2a00003a 	bcs	39264 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x13c>
   39178:	e354000f 	cmp	r4, #15
   3917c:	8a00005b 	bhi	392f0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c8>
   39180:	e5951000 	ldr	r1, [r5]
   39184:	e3072020 	movw	r2, #28704	@ 0x7020
   39188:	e3432f00 	movt	r2, #16128	@ 0x3f00
   3918c:	e7922401 	ldr	r2, [r2, r1, lsl #8]
   39190:	e3120201 	tst	r2, #268435456	@ 0x10000000
   39194:	1a00005a 	bne	39304 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1dc>
   39198:	e595c008 	ldr	ip, [r5, #8]
   3919c:	e35c0000 	cmp	ip, #0
   391a0:	0a00005c 	beq	39318 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1f0>
   391a4:	e2472001 	sub	r2, r7, #1
   391a8:	e0010397 	mul	r1, r7, r3
   391ac:	e5cc300c 	strb	r3, [ip, #12]
   391b0:	e1832802 	orr	r2, r3, r2, lsl #16
   391b4:	e7e73453 	ubfx	r3, r3, #8, #8
   391b8:	e5cc300d 	strb	r3, [ip, #13]
   391bc:	e3003332 	movw	r3, #818	@ 0x332
   391c0:	e1834604 	orr	r4, r3, r4, lsl #12
   391c4:	e5cc3000 	strb	r3, [ip]
   391c8:	e3803103 	orr	r3, r0, #-1073741824	@ 0xc0000000
   391cc:	e5cc6008 	strb	r6, [ip, #8]
   391d0:	e5cce012 	strb	lr, [ip, #18]
   391d4:	e7e7e45e 	ubfx	lr, lr, #8, #8
   391d8:	e1a03c23 	lsr	r3, r3, #24
   391dc:	e5cc3007 	strb	r3, [ip, #7]
   391e0:	e3863103 	orr	r3, r6, #-1073741824	@ 0xc0000000
   391e4:	e5cce013 	strb	lr, [ip, #19]
   391e8:	e5cc0004 	strb	r0, [ip, #4]
   391ec:	e3a0e000 	mov	lr, #0
   391f0:	e1a03c23 	lsr	r3, r3, #24
   391f4:	e5cce014 	strb	lr, [ip, #20]
   391f8:	e5cc300b 	strb	r3, [ip, #11]
   391fc:	e1a03424 	lsr	r3, r4, #8
   39200:	e5cce015 	strb	lr, [ip, #21]
   39204:	e5cce016 	strb	lr, [ip, #22]
   39208:	e5cce017 	strb	lr, [ip, #23]
   3920c:	e5cc3001 	strb	r3, [ip, #1]
   39210:	e7e73854 	ubfx	r3, r4, #16, #8
   39214:	e5cce010 	strb	lr, [ip, #16]
   39218:	e1a04c24 	lsr	r4, r4, #24
   3921c:	e5cc3002 	strb	r3, [ip, #2]
   39220:	e7e73450 	ubfx	r3, r0, #8, #8
   39224:	e5cc4003 	strb	r4, [ip, #3]
   39228:	e5cc3005 	strb	r3, [ip, #5]
   3922c:	e7e73850 	ubfx	r3, r0, #16, #8
   39230:	e5cce011 	strb	lr, [ip, #17]
   39234:	e5cc3006 	strb	r3, [ip, #6]
   39238:	e7e73456 	ubfx	r3, r6, #8, #8
   3923c:	e5cc3009 	strb	r3, [ip, #9]
   39240:	e7e73856 	ubfx	r3, r6, #16, #8
   39244:	e5cc300a 	strb	r3, [ip, #10]
   39248:	e7e73852 	ubfx	r3, r2, #16, #8
   3924c:	e1a02c22 	lsr	r2, r2, #24
   39250:	e5cc300e 	strb	r3, [ip, #14]
   39254:	e5cc200f 	strb	r2, [ip, #15]
   39258:	e585e020 	str	lr, [r5, #32]
   3925c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
   39260:	eafff779 	b	3704c <CleanAndInvalidateDataCacheRange>
   39264:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39268:	e3401004 	movt	r1, #4
   3926c:	e2810e19 	add	r0, r1, #400	@ 0x190
   39270:	e3002115 	movw	r2, #277	@ 0x115
   39274:	ebffcad8 	bl	2bddc <assertion_failed>
   39278:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   3927c:	e3401004 	movt	r1, #4
   39280:	e2810060 	add	r0, r1, #96	@ 0x60
   39284:	e300210f 	movw	r2, #271	@ 0x10f
   39288:	ebffcad3 	bl	2bddc <assertion_failed>
   3928c:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39290:	e3401004 	movt	r1, #4
   39294:	e3a02e11 	mov	r2, #272	@ 0x110
   39298:	e2810074 	add	r0, r1, #116	@ 0x74
   3929c:	ebffcace 	bl	2bddc <assertion_failed>
   392a0:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   392a4:	e3401004 	movt	r1, #4
   392a8:	e2810f4f 	add	r0, r1, #316	@ 0x13c
   392ac:	e3002111 	movw	r2, #273	@ 0x111
   392b0:	ebffcac9 	bl	2bddc <assertion_failed>
   392b4:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   392b8:	e3401004 	movt	r1, #4
   392bc:	e2810e15 	add	r0, r1, #336	@ 0x150
   392c0:	e3002112 	movw	r2, #274	@ 0x112
   392c4:	ebffcac4 	bl	2bddc <assertion_failed>
   392c8:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   392cc:	e3401004 	movt	r1, #4
   392d0:	e2810f5a 	add	r0, r1, #360	@ 0x168
   392d4:	e3002113 	movw	r2, #275	@ 0x113
   392d8:	ebffcabf 	bl	2bddc <assertion_failed>
   392dc:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   392e0:	e3401004 	movt	r1, #4
   392e4:	e3a02f45 	mov	r2, #276	@ 0x114
   392e8:	e2810f5e 	add	r0, r1, #376	@ 0x178
   392ec:	ebffcaba 	bl	2bddc <assertion_failed>
   392f0:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   392f4:	e3401004 	movt	r1, #4
   392f8:	e2810090 	add	r0, r1, #144	@ 0x90
   392fc:	e3002116 	movw	r2, #278	@ 0x116
   39300:	ebffcab5 	bl	2bddc <assertion_failed>
   39304:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39308:	e3401004 	movt	r1, #4
   3930c:	e3a02f46 	mov	r2, #280	@ 0x118
   39310:	e2810f6a 	add	r0, r1, #424	@ 0x1a8
   39314:	ebffcab0 	bl	2bddc <assertion_failed>
   39318:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   3931c:	e3401004 	movt	r1, #4
   39320:	e28100a4 	add	r0, r1, #164	@ 0xa4
   39324:	e300211a 	movw	r2, #282	@ 0x11a
   39328:	ebffcaab 	bl	2bddc <assertion_failed>

0003932c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   3932c:	e92d4070 	push	{r4, r5, r6, lr}
   39330:	e1a05001 	mov	r5, r1
   39334:	e5901000 	ldr	r1, [r0]
   39338:	e351000c 	cmp	r1, #12
   3933c:	8a000014 	bhi	39394 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   39340:	e1a04000 	mov	r4, r0
   39344:	e590000c 	ldr	r0, [r0, #12]
   39348:	e3500000 	cmp	r0, #0
   3934c:	0a000015 	beq	393a8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   39350:	e5d43010 	ldrb	r3, [r4, #16]
   39354:	e1a06002 	mov	r6, r2
   39358:	e3530000 	cmp	r3, #0
   3935c:	0a000004 	beq	39374 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x48>
   39360:	e3550000 	cmp	r5, #0
   39364:	e5845014 	str	r5, [r4, #20]
   39368:	0a000013 	beq	393bc <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x90>
   3936c:	e5846018 	str	r6, [r4, #24]
   39370:	e8bd8070 	pop	{r4, r5, r6, pc}
   39374:	e1a03004 	mov	r3, r4
   39378:	e2811010 	add	r1, r1, #16
   3937c:	e309271c 	movw	r2, #38684	@ 0x971c
   39380:	e3402003 	movt	r2, #3
   39384:	ebfffa07 	bl	37ba8 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   39388:	e3a03001 	mov	r3, #1
   3938c:	e5c43010 	strb	r3, [r4, #16]
   39390:	eafffff2 	b	39360 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x34>
   39394:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39398:	e3401004 	movt	r1, #4
   3939c:	e2810e1e 	add	r0, r1, #480	@ 0x1e0
   393a0:	e3002139 	movw	r2, #313	@ 0x139
   393a4:	ebffca8c 	bl	2bddc <assertion_failed>
   393a8:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   393ac:	e3401004 	movt	r1, #4
   393b0:	e2810f7f 	add	r0, r1, #508	@ 0x1fc
   393b4:	e300213a 	movw	r2, #314	@ 0x13a
   393b8:	ebffca87 	bl	2bddc <assertion_failed>
   393bc:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   393c0:	e3401004 	movt	r1, #4
   393c4:	e3a02f51 	mov	r2, #324	@ 0x144
   393c8:	e2810f85 	add	r0, r1, #532	@ 0x214
   393cc:	ebffca82 	bl	2bddc <assertion_failed>

000393d0 <CDMAChannel::Start()>:
   393d0:	e5902000 	ldr	r2, [r0]
   393d4:	e92d4010 	push	{r4, lr}
   393d8:	e352000b 	cmp	r2, #11
   393dc:	8a000038 	bhi	394c4 <CDMAChannel::Start()+0xf4>
   393e0:	e1a04000 	mov	r4, r0
   393e4:	e5900008 	ldr	r0, [r0, #8]
   393e8:	e3500000 	cmp	r0, #0
   393ec:	0a000039 	beq	394d8 <CDMAChannel::Start()+0x108>
   393f0:	e5943014 	ldr	r3, [r4, #20]
   393f4:	e3530000 	cmp	r3, #0
   393f8:	0a000014 	beq	39450 <CDMAChannel::Start()+0x80>
   393fc:	e594300c 	ldr	r3, [r4, #12]
   39400:	e3530000 	cmp	r3, #0
   39404:	0a000042 	beq	39514 <CDMAChannel::Start()+0x144>
   39408:	e5d43010 	ldrb	r3, [r4, #16]
   3940c:	e3530000 	cmp	r3, #0
   39410:	0a000026 	beq	394b0 <CDMAChannel::Start()+0xe0>
   39414:	e5d01001 	ldrb	r1, [r0, #1]
   39418:	e5d03000 	ldrb	r3, [r0]
   3941c:	e1833401 	orr	r3, r3, r1, lsl #8
   39420:	e5d01002 	ldrb	r1, [r0, #2]
   39424:	e1833801 	orr	r3, r3, r1, lsl #16
   39428:	e5d01003 	ldrb	r1, [r0, #3]
   3942c:	e1833c01 	orr	r3, r3, r1, lsl #24
   39430:	e3833001 	orr	r3, r3, #1
   39434:	e5c03000 	strb	r3, [r0]
   39438:	e7e71453 	ubfx	r1, r3, #8, #8
   3943c:	e5c01001 	strb	r1, [r0, #1]
   39440:	e7e71853 	ubfx	r1, r3, #16, #8
   39444:	e1a03c23 	lsr	r3, r3, #24
   39448:	e5c01002 	strb	r1, [r0, #2]
   3944c:	e5c03003 	strb	r3, [r0, #3]
   39450:	e282383f 	add	r3, r2, #4128768	@ 0x3f0000
   39454:	e2833070 	add	r3, r3, #112	@ 0x70
   39458:	e1a03403 	lsl	r3, r3, #8
   3945c:	e5931000 	ldr	r1, [r3]
   39460:	e3110004 	tst	r1, #4
   39464:	1a000020 	bne	394ec <CDMAChannel::Start()+0x11c>
   39468:	e3a01a07 	mov	r1, #28672	@ 0x7000
   3946c:	e3431f00 	movt	r1, #16128	@ 0x3f00
   39470:	e3a0c001 	mov	ip, #1
   39474:	e5911fe0 	ldr	r1, [r1, #4064]	@ 0xfe0
   39478:	e011121c 	ands	r1, r1, ip, lsl r2
   3947c:	1a00001f 	bne	39500 <CDMAChannel::Start()+0x130>
   39480:	e3802103 	orr	r2, r0, #-1073741824	@ 0xc0000000
   39484:	e3a01020 	mov	r1, #32
   39488:	e5832004 	str	r2, [r3, #4]
   3948c:	ebfff6ee 	bl	3704c <CleanAndInvalidateDataCacheRange>
   39490:	e5943000 	ldr	r3, [r4]
   39494:	e3a02001 	mov	r2, #1
   39498:	e34120f1 	movt	r2, #4337	@ 0x10f1
   3949c:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   394a0:	e2833070 	add	r3, r3, #112	@ 0x70
   394a4:	e1a03403 	lsl	r3, r3, #8
   394a8:	e5832000 	str	r2, [r3]
   394ac:	e8bd8010 	pop	{r4, pc}
   394b0:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   394b4:	e3401004 	movt	r1, #4
   394b8:	e2810e23 	add	r0, r1, #560	@ 0x230
   394bc:	e300215a 	movw	r2, #346	@ 0x15a
   394c0:	ebffca45 	bl	2bddc <assertion_failed>
   394c4:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   394c8:	e3401004 	movt	r1, #4
   394cc:	e3a02f55 	mov	r2, #340	@ 0x154
   394d0:	e2810030 	add	r0, r1, #48	@ 0x30
   394d4:	ebffca40 	bl	2bddc <assertion_failed>
   394d8:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   394dc:	e3401004 	movt	r1, #4
   394e0:	e28100a4 	add	r0, r1, #164	@ 0xa4
   394e4:	e3002155 	movw	r2, #341	@ 0x155
   394e8:	ebffca3b 	bl	2bddc <assertion_failed>
   394ec:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   394f0:	e3401004 	movt	r1, #4
   394f4:	e3a02e16 	mov	r2, #352	@ 0x160
   394f8:	e2810d09 	add	r0, r1, #576	@ 0x240
   394fc:	ebffca36 	bl	2bddc <assertion_failed>
   39500:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39504:	e3401004 	movt	r1, #4
   39508:	e2810f9d 	add	r0, r1, #628	@ 0x274
   3950c:	e3002161 	movw	r2, #353	@ 0x161
   39510:	ebffca31 	bl	2bddc <assertion_failed>
   39514:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39518:	e3401004 	movt	r1, #4
   3951c:	e2810f7f 	add	r0, r1, #508	@ 0x1fc
   39520:	e3002159 	movw	r2, #345	@ 0x159
   39524:	ebffca2c 	bl	2bddc <assertion_failed>

00039528 <CDMAChannel::Wait()>:
   39528:	e5902000 	ldr	r2, [r0]
   3952c:	e92d4010 	push	{r4, lr}
   39530:	e352000b 	cmp	r2, #11
   39534:	8a000014 	bhi	3958c <CDMAChannel::Wait()+0x64>
   39538:	e5903014 	ldr	r3, [r0, #20]
   3953c:	e1a04000 	mov	r4, r0
   39540:	e3530000 	cmp	r3, #0
   39544:	0282283f 	addeq	r2, r2, #4128768	@ 0x3f0000
   39548:	02822070 	addeq	r2, r2, #112	@ 0x70
   3954c:	01a02402 	lsleq	r2, r2, #8
   39550:	1a000012 	bne	395a0 <CDMAChannel::Wait()+0x78>
   39554:	e5923000 	ldr	r3, [r2]
   39558:	e3130001 	tst	r3, #1
   3955c:	1afffffc 	bne	39554 <CDMAChannel::Wait()+0x2c>
   39560:	e5942020 	ldr	r2, [r4, #32]
   39564:	e2233c01 	eor	r3, r3, #256	@ 0x100
   39568:	e3520000 	cmp	r2, #0
   3956c:	e7e00453 	ubfx	r0, r3, #8, #1
   39570:	e5c4001c 	strb	r0, [r4, #28]
   39574:	08bd8010 	popeq	{r4, pc}
   39578:	e1a00002 	mov	r0, r2
   3957c:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
   39580:	ebfff6b1 	bl	3704c <CleanAndInvalidateDataCacheRange>
   39584:	e5d4001c 	ldrb	r0, [r4, #28]
   39588:	e8bd8010 	pop	{r4, pc}
   3958c:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   39590:	e3401004 	movt	r1, #4
   39594:	e3a02f5e 	mov	r2, #376	@ 0x178
   39598:	e2810030 	add	r0, r1, #48	@ 0x30
   3959c:	ebffca0e 	bl	2bddc <assertion_failed>
   395a0:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   395a4:	e3401004 	movt	r1, #4
   395a8:	e2810faa 	add	r0, r1, #680	@ 0x2a8
   395ac:	e3002179 	movw	r2, #377	@ 0x179
   395b0:	ebffca09 	bl	2bddc <assertion_failed>

000395b4 <CDMAChannel::GetStatus()>:
   395b4:	e5903000 	ldr	r3, [r0]
   395b8:	e92d4010 	push	{r4, lr}
   395bc:	e353000b 	cmp	r3, #11
   395c0:	8a000007 	bhi	395e4 <CDMAChannel::GetStatus()+0x30>
   395c4:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   395c8:	e2833070 	add	r3, r3, #112	@ 0x70
   395cc:	e1a03403 	lsl	r3, r3, #8
   395d0:	e5933000 	ldr	r3, [r3]
   395d4:	e3130001 	tst	r3, #1
   395d8:	1a000006 	bne	395f8 <CDMAChannel::GetStatus()+0x44>
   395dc:	e5d0001c 	ldrb	r0, [r0, #28]
   395e0:	e8bd8010 	pop	{r4, pc}
   395e4:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   395e8:	e3401004 	movt	r1, #4
   395ec:	e3a02f66 	mov	r2, #408	@ 0x198
   395f0:	e2810030 	add	r0, r1, #48	@ 0x30
   395f4:	ebffc9f8 	bl	2bddc <assertion_failed>
   395f8:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   395fc:	e3401004 	movt	r1, #4
   39600:	e2810fb1 	add	r0, r1, #708	@ 0x2c4
   39604:	e3002199 	movw	r2, #409	@ 0x199
   39608:	ebffc9f3 	bl	2bddc <assertion_failed>

0003960c <CDMAChannel::InterruptHandler()>:
   3960c:	e92d4010 	push	{r4, lr}
   39610:	e1a04000 	mov	r4, r0
   39614:	e5900020 	ldr	r0, [r0, #32]
   39618:	e3500000 	cmp	r0, #0
   3961c:	1a000020 	bne	396a4 <CDMAChannel::InterruptHandler()+0x98>
   39620:	e5941000 	ldr	r1, [r4]
   39624:	e351000b 	cmp	r1, #11
   39628:	8a000022 	bhi	396b8 <CDMAChannel::InterruptHandler()+0xac>
   3962c:	e3a02a07 	mov	r2, #28672	@ 0x7000
   39630:	e3432f00 	movt	r2, #16128	@ 0x3f00
   39634:	e3a03001 	mov	r3, #1
   39638:	e5920fe0 	ldr	r0, [r2, #4064]	@ 0xfe0
   3963c:	e1a03113 	lsl	r3, r3, r1
   39640:	e1130000 	tst	r3, r0
   39644:	0a000020 	beq	396cc <CDMAChannel::InterruptHandler()+0xc0>
   39648:	e5823fe0 	str	r3, [r2, #4064]	@ 0xfe0
   3964c:	e5943000 	ldr	r3, [r4]
   39650:	e283383f 	add	r3, r3, #4128768	@ 0x3f0000
   39654:	e2833070 	add	r3, r3, #112	@ 0x70
   39658:	e1a03403 	lsl	r3, r3, #8
   3965c:	e5931000 	ldr	r1, [r3]
   39660:	e3110004 	tst	r1, #4
   39664:	0a00001d 	beq	396e0 <CDMAChannel::InterruptHandler()+0xd4>
   39668:	e3110001 	tst	r1, #1
   3966c:	1a000020 	bne	396f4 <CDMAChannel::InterruptHandler()+0xe8>
   39670:	e594e014 	ldr	lr, [r4, #20]
   39674:	e2211c01 	eor	r1, r1, #256	@ 0x100
   39678:	e3a02004 	mov	r2, #4
   3967c:	e5832000 	str	r2, [r3]
   39680:	e7e01451 	ubfx	r1, r1, #8, #1
   39684:	e35e0000 	cmp	lr, #0
   39688:	e5c4101c 	strb	r1, [r4, #28]
   3968c:	0a00001d 	beq	39708 <CDMAChannel::InterruptHandler()+0xfc>
   39690:	e5942018 	ldr	r2, [r4, #24]
   39694:	e1a0300e 	mov	r3, lr
   39698:	e5940000 	ldr	r0, [r4]
   3969c:	e8bd4010 	pop	{r4, lr}
   396a0:	e12fff13 	bx	r3
   396a4:	e5941024 	ldr	r1, [r4, #36]	@ 0x24
   396a8:	ebfff667 	bl	3704c <CleanAndInvalidateDataCacheRange>
   396ac:	e5941000 	ldr	r1, [r4]
   396b0:	e351000b 	cmp	r1, #11
   396b4:	9affffdc 	bls	3962c <CDMAChannel::InterruptHandler()+0x20>
   396b8:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   396bc:	e3401004 	movt	r1, #4
   396c0:	e2810030 	add	r0, r1, #48	@ 0x30
   396c4:	e30021a7 	movw	r2, #423	@ 0x1a7
   396c8:	ebffc9c3 	bl	2bddc <assertion_failed>
   396cc:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   396d0:	e3401004 	movt	r1, #4
   396d4:	e2810fbe 	add	r0, r1, #760	@ 0x2f8
   396d8:	e30021ad 	movw	r2, #429	@ 0x1ad
   396dc:	ebffc9be 	bl	2bddc <assertion_failed>
   396e0:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   396e4:	e3401004 	movt	r1, #4
   396e8:	e2810e31 	add	r0, r1, #784	@ 0x310
   396ec:	e30021b1 	movw	r2, #433	@ 0x1b1
   396f0:	ebffc9b9 	bl	2bddc <assertion_failed>
   396f4:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   396f8:	e3401004 	movt	r1, #4
   396fc:	e2810e32 	add	r0, r1, #800	@ 0x320
   39700:	e30021b2 	movw	r2, #434	@ 0x1b2
   39704:	ebffc9b4 	bl	2bddc <assertion_failed>
   39708:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   3970c:	e3401004 	movt	r1, #4
   39710:	e2810f85 	add	r0, r1, #532	@ 0x214
   39714:	e30021b9 	movw	r2, #441	@ 0x1b9
   39718:	ebffc9af 	bl	2bddc <assertion_failed>

0003971c <CDMAChannel::InterruptStub(void*)>:
   3971c:	e3500000 	cmp	r0, #0
   39720:	0a000000 	beq	39728 <CDMAChannel::InterruptStub(void*)+0xc>
   39724:	eaffffb8 	b	3960c <CDMAChannel::InterruptHandler()>
   39728:	e3031aa8 	movw	r1, #15016	@ 0x3aa8
   3972c:	e3401004 	movt	r1, #4
   39730:	e3a02d07 	mov	r2, #448	@ 0x1c0
   39734:	e2810fcd 	add	r0, r1, #820	@ 0x334
   39738:	e92d4010 	push	{r4, lr}
   3973c:	ebffc9a6 	bl	2bddc <assertion_failed>

00039740 <CPageAllocator::CPageAllocator()>:
   39740:	e3a02000 	mov	r2, #0
   39744:	e3a01001 	mov	r1, #1
   39748:	e5802000 	str	r2, [r0]
   3974c:	e5802004 	str	r2, [r0, #4]
   39750:	e5802008 	str	r2, [r0, #8]
   39754:	e580100c 	str	r1, [r0, #12]
   39758:	e12fff1e 	bx	lr

0003975c <CPageAllocator::~CPageAllocator()>:
   3975c:	e12fff1e 	bx	lr

00039760 <CPageAllocator::Setup(unsigned int, unsigned int)>:
   39760:	e52db004 	push	{fp}		@ (str fp, [sp, #-4]!)
   39764:	e28db000 	add	fp, sp, #0
   39768:	e24dd014 	sub	sp, sp, #20
   3976c:	e50b0008 	str	r0, [fp, #-8]
   39770:	e50b100c 	str	r1, [fp, #-12]
   39774:	e50b2010 	str	r2, [fp, #-16]
   39778:	e51b300c 	ldr	r3, [fp, #-12]
   3977c:	e2833eff 	add	r3, r3, #4080	@ 0xff0
   39780:	e283300f 	add	r3, r3, #15
   39784:	e3c33eff 	bic	r3, r3, #4080	@ 0xff0
   39788:	e3c3300f 	bic	r3, r3, #15
   3978c:	e1a02003 	mov	r2, r3
   39790:	e51b3008 	ldr	r3, [fp, #-8]
   39794:	e5832000 	str	r2, [r3]
   39798:	e51b200c 	ldr	r2, [fp, #-12]
   3979c:	e51b3010 	ldr	r3, [fp, #-16]
   397a0:	e0823003 	add	r3, r2, r3
   397a4:	e3c33eff 	bic	r3, r3, #4080	@ 0xff0
   397a8:	e3c3300f 	bic	r3, r3, #15
   397ac:	e1a02003 	mov	r2, r3
   397b0:	e51b3008 	ldr	r3, [fp, #-8]
   397b4:	e5832004 	str	r2, [r3, #4]
   397b8:	e320f000 	nop	{0}
   397bc:	e28bd000 	add	sp, fp, #0
   397c0:	e49db004 	pop	{fp}		@ (ldr fp, [sp], #4)
   397c4:	e12fff1e 	bx	lr

000397c8 <CPageAllocator::GetFreeSpace() const>:
   397c8:	e8900005 	ldm	r0, {r0, r2}
   397cc:	e0420000 	sub	r0, r2, r0
   397d0:	e12fff1e 	bx	lr

000397d4 <CPageAllocator::Allocate()>:
   397d4:	e5903000 	ldr	r3, [r0]
   397d8:	e92d4070 	push	{r4, r5, r6, lr}
   397dc:	e3530000 	cmp	r3, #0
   397e0:	0a000024 	beq	39878 <CPageAllocator::Allocate()+0xa4>
   397e4:	e1a04000 	mov	r4, r0
   397e8:	e590000c 	ldr	r0, [r0, #12]
   397ec:	e3500000 	cmp	r0, #0
   397f0:	1a000010 	bne	39838 <CPageAllocator::Allocate()+0x64>
   397f4:	e5945008 	ldr	r5, [r4, #8]
   397f8:	e3550000 	cmp	r5, #0
   397fc:	0a000011 	beq	39848 <CPageAllocator::Allocate()+0x74>
   39800:	e5952000 	ldr	r2, [r5]
   39804:	e3043d43 	movw	r3, #19779	@ 0x4d43
   39808:	e3453047 	movt	r3, #20551	@ 0x5047
   3980c:	e1520003 	cmp	r2, r3
   39810:	1a00001d 	bne	3988c <CPageAllocator::Allocate()+0xb8>
   39814:	e594000c 	ldr	r0, [r4, #12]
   39818:	e3a03000 	mov	r3, #0
   3981c:	e5952004 	ldr	r2, [r5, #4]
   39820:	e5842008 	str	r2, [r4, #8]
   39824:	e3500000 	cmp	r0, #0
   39828:	e5853000 	str	r3, [r5]
   3982c:	1a00000e 	bne	3986c <CPageAllocator::Allocate()+0x98>
   39830:	e1a00005 	mov	r0, r5
   39834:	e8bd8070 	pop	{r4, r5, r6, pc}
   39838:	ebfff850 	bl	37980 <EnterCritical>
   3983c:	e5945008 	ldr	r5, [r4, #8]
   39840:	e3550000 	cmp	r5, #0
   39844:	1affffed 	bne	39800 <CPageAllocator::Allocate()+0x2c>
   39848:	e5942000 	ldr	r2, [r4]
   3984c:	e5941004 	ldr	r1, [r4, #4]
   39850:	e2823a01 	add	r3, r2, #4096	@ 0x1000
   39854:	e594000c 	ldr	r0, [r4, #12]
   39858:	e1530001 	cmp	r3, r1
   3985c:	e5843000 	str	r3, [r4]
   39860:	91a05002 	movls	r5, r2
   39864:	e3500000 	cmp	r0, #0
   39868:	0afffff0 	beq	39830 <CPageAllocator::Allocate()+0x5c>
   3986c:	ebfff86e 	bl	37a2c <LeaveCritical>
   39870:	e1a00005 	mov	r0, r5
   39874:	e8bd8070 	pop	{r4, r5, r6, pc}
   39878:	e3031de8 	movw	r1, #15848	@ 0x3de8
   3987c:	e3401004 	movt	r1, #4
   39880:	e3a02036 	mov	r2, #54	@ 0x36
   39884:	e2810014 	add	r0, r1, #20
   39888:	ebffc953 	bl	2bddc <assertion_failed>
   3988c:	e3031de8 	movw	r1, #15848	@ 0x3de8
   39890:	e3401004 	movt	r1, #4
   39894:	e3a02044 	mov	r2, #68	@ 0x44
   39898:	e2810024 	add	r0, r1, #36	@ 0x24
   3989c:	ebffc94e 	bl	2bddc <assertion_failed>

000398a0 <CPageAllocator::Free(void*)>:
   398a0:	e92d4070 	push	{r4, r5, r6, lr}
   398a4:	e2514000 	subs	r4, r1, #0
   398a8:	08bd8070 	popeq	{r4, r5, r6, pc}
   398ac:	e1a05000 	mov	r5, r0
   398b0:	e590000c 	ldr	r0, [r0, #12]
   398b4:	e3500000 	cmp	r0, #0
   398b8:	1a000006 	bne	398d8 <CPageAllocator::Free(void*)+0x38>
   398bc:	e5952008 	ldr	r2, [r5, #8]
   398c0:	e3043d43 	movw	r3, #19779	@ 0x4d43
   398c4:	e3453047 	movt	r3, #20551	@ 0x5047
   398c8:	e5842004 	str	r2, [r4, #4]
   398cc:	e5843000 	str	r3, [r4]
   398d0:	e5854008 	str	r4, [r5, #8]
   398d4:	e8bd8070 	pop	{r4, r5, r6, pc}
   398d8:	ebfff828 	bl	37980 <EnterCritical>
   398dc:	e595200c 	ldr	r2, [r5, #12]
   398e0:	e5951008 	ldr	r1, [r5, #8]
   398e4:	e3043d43 	movw	r3, #19779	@ 0x4d43
   398e8:	e3453047 	movt	r3, #20551	@ 0x5047
   398ec:	e3520000 	cmp	r2, #0
   398f0:	e5841004 	str	r1, [r4, #4]
   398f4:	e5843000 	str	r3, [r4]
   398f8:	e5854008 	str	r4, [r5, #8]
   398fc:	08bd8070 	popeq	{r4, r5, r6, pc}
   39900:	e8bd4070 	pop	{r4, r5, r6, lr}
   39904:	eafff848 	b	37a2c <LeaveCritical>

00039908 <__aeabi_uldivmod>:
   39908:	b953      	cbnz	r3, 39920 <__aeabi_uldivmod+0x18>
   3990a:	b94a      	cbnz	r2, 39920 <__aeabi_uldivmod+0x18>
   3990c:	2900      	cmp	r1, #0
   3990e:	bf08      	it	eq
   39910:	2800      	cmpeq	r0, #0
   39912:	bf1c      	itt	ne
   39914:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
   39918:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
   3991c:	f000 b9b8 	b.w	39c90 <__aeabi_idiv0>
   39920:	f1ad 0c08 	sub.w	ip, sp, #8
   39924:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   39928:	f000 f806 	bl	39938 <__udivmoddi4>
   3992c:	f8dd e004 	ldr.w	lr, [sp, #4]
   39930:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   39934:	b004      	add	sp, #16
   39936:	4770      	bx	lr

00039938 <__udivmoddi4>:
   39938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3993c:	460e      	mov	r6, r1
   3993e:	4604      	mov	r4, r0
   39940:	b083      	sub	sp, #12
   39942:	460f      	mov	r7, r1
   39944:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
   39946:	2b00      	cmp	r3, #0
   39948:	d158      	bne.n	399fc <__udivmoddi4+0xc4>
   3994a:	4694      	mov	ip, r2
   3994c:	fab2 f382 	clz	r3, r2
   39950:	428a      	cmp	r2, r1
   39952:	d970      	bls.n	39a36 <__udivmoddi4+0xfe>
   39954:	b143      	cbz	r3, 39968 <__udivmoddi4+0x30>
   39956:	fa02 fc03 	lsl.w	ip, r2, r3
   3995a:	f1c3 0220 	rsb	r2, r3, #32
   3995e:	409f      	lsls	r7, r3
   39960:	fa20 f202 	lsr.w	r2, r0, r2
   39964:	4317      	orrs	r7, r2
   39966:	409c      	lsls	r4, r3
   39968:	ea4f 461c 	mov.w	r6, ip, lsr #16
   3996c:	fa1f fe8c 	uxth.w	lr, ip
   39970:	0c22      	lsrs	r2, r4, #16
   39972:	fbb7 f1f6 	udiv	r1, r7, r6
   39976:	fb06 7711 	mls	r7, r6, r1, r7
   3997a:	fb01 f00e 	mul.w	r0, r1, lr
   3997e:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   39982:	4290      	cmp	r0, r2
   39984:	d910      	bls.n	399a8 <__udivmoddi4+0x70>
   39986:	eb1c 0202 	adds.w	r2, ip, r2
   3998a:	f04f 0701 	mov.w	r7, #1
   3998e:	bf28      	it	cs
   39990:	2700      	movcs	r7, #0
   39992:	4290      	cmp	r0, r2
   39994:	f007 0701 	and.w	r7, r7, #1
   39998:	f101 38ff 	add.w	r8, r1, #4294967295	@ 0xffffffff
   3999c:	bf98      	it	ls
   3999e:	2700      	movls	r7, #0
   399a0:	2f00      	cmp	r7, #0
   399a2:	f040 8169 	bne.w	39c78 <__udivmoddi4+0x340>
   399a6:	4641      	mov	r1, r8
   399a8:	1a12      	subs	r2, r2, r0
   399aa:	b2a4      	uxth	r4, r4
   399ac:	fbb2 f0f6 	udiv	r0, r2, r6
   399b0:	fb06 2210 	mls	r2, r6, r0, r2
   399b4:	fb00 fe0e 	mul.w	lr, r0, lr
   399b8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   399bc:	45a6      	cmp	lr, r4
   399be:	d910      	bls.n	399e2 <__udivmoddi4+0xaa>
   399c0:	eb1c 0404 	adds.w	r4, ip, r4
   399c4:	f04f 0201 	mov.w	r2, #1
   399c8:	bf28      	it	cs
   399ca:	2200      	movcs	r2, #0
   399cc:	45a6      	cmp	lr, r4
   399ce:	f002 0201 	and.w	r2, r2, #1
   399d2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
   399d6:	bf98      	it	ls
   399d8:	2200      	movls	r2, #0
   399da:	2a00      	cmp	r2, #0
   399dc:	f040 814f 	bne.w	39c7e <__udivmoddi4+0x346>
   399e0:	4630      	mov	r0, r6
   399e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   399e6:	eba4 040e 	sub.w	r4, r4, lr
   399ea:	2100      	movs	r1, #0
   399ec:	b11d      	cbz	r5, 399f6 <__udivmoddi4+0xbe>
   399ee:	40dc      	lsrs	r4, r3
   399f0:	2300      	movs	r3, #0
   399f2:	e9c5 4300 	strd	r4, r3, [r5]
   399f6:	b003      	add	sp, #12
   399f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   399fc:	428b      	cmp	r3, r1
   399fe:	d905      	bls.n	39a0c <__udivmoddi4+0xd4>
   39a00:	b10d      	cbz	r5, 39a06 <__udivmoddi4+0xce>
   39a02:	e9c5 0100 	strd	r0, r1, [r5]
   39a06:	2100      	movs	r1, #0
   39a08:	4608      	mov	r0, r1
   39a0a:	e7f4      	b.n	399f6 <__udivmoddi4+0xbe>
   39a0c:	fab3 f183 	clz	r1, r3
   39a10:	2900      	cmp	r1, #0
   39a12:	d15a      	bne.n	39aca <__udivmoddi4+0x192>
   39a14:	42b3      	cmp	r3, r6
   39a16:	bf28      	it	cs
   39a18:	4282      	cmpcs	r2, r0
   39a1a:	bf88      	it	hi
   39a1c:	4608      	movhi	r0, r1
   39a1e:	d805      	bhi.n	39a2c <__udivmoddi4+0xf4>
   39a20:	1aa6      	subs	r6, r4, r2
   39a22:	eb67 0203 	sbc.w	r2, r7, r3
   39a26:	2001      	movs	r0, #1
   39a28:	4617      	mov	r7, r2
   39a2a:	4634      	mov	r4, r6
   39a2c:	2d00      	cmp	r5, #0
   39a2e:	d0e2      	beq.n	399f6 <__udivmoddi4+0xbe>
   39a30:	e9c5 4700 	strd	r4, r7, [r5]
   39a34:	e7df      	b.n	399f6 <__udivmoddi4+0xbe>
   39a36:	2b00      	cmp	r3, #0
   39a38:	f040 80bf 	bne.w	39bba <__udivmoddi4+0x282>
   39a3c:	1a8a      	subs	r2, r1, r2
   39a3e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   39a42:	fa1f fa8c 	uxth.w	sl, ip
   39a46:	2101      	movs	r1, #1
   39a48:	fbb2 f6fe 	udiv	r6, r2, lr
   39a4c:	fb0e 2016 	mls	r0, lr, r6, r2
   39a50:	0c22      	lsrs	r2, r4, #16
   39a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   39a56:	fb0a f006 	mul.w	r0, sl, r6
   39a5a:	4290      	cmp	r0, r2
   39a5c:	d912      	bls.n	39a84 <__udivmoddi4+0x14c>
   39a5e:	eb1c 0202 	adds.w	r2, ip, r2
   39a62:	f04f 0701 	mov.w	r7, #1
   39a66:	bf38      	it	cc
   39a68:	2700      	movcc	r7, #0
   39a6a:	4290      	cmp	r0, r2
   39a6c:	f087 0801 	eor.w	r8, r7, #1
   39a70:	f106 39ff 	add.w	r9, r6, #4294967295	@ 0xffffffff
   39a74:	f008 0701 	and.w	r7, r8, #1
   39a78:	bf98      	it	ls
   39a7a:	2700      	movls	r7, #0
   39a7c:	2f00      	cmp	r7, #0
   39a7e:	f040 8104 	bne.w	39c8a <__udivmoddi4+0x352>
   39a82:	464e      	mov	r6, r9
   39a84:	1a12      	subs	r2, r2, r0
   39a86:	b2a4      	uxth	r4, r4
   39a88:	fbb2 f0fe 	udiv	r0, r2, lr
   39a8c:	fb0e 2210 	mls	r2, lr, r0, r2
   39a90:	fb00 f70a 	mul.w	r7, r0, sl
   39a94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   39a98:	42a7      	cmp	r7, r4
   39a9a:	d912      	bls.n	39ac2 <__udivmoddi4+0x18a>
   39a9c:	eb1c 0404 	adds.w	r4, ip, r4
   39aa0:	f04f 0201 	mov.w	r2, #1
   39aa4:	bf38      	it	cc
   39aa6:	2200      	movcc	r2, #0
   39aa8:	42a7      	cmp	r7, r4
   39aaa:	f082 0201 	eor.w	r2, r2, #1
   39aae:	f100 3eff 	add.w	lr, r0, #4294967295	@ 0xffffffff
   39ab2:	f002 0201 	and.w	r2, r2, #1
   39ab6:	bf98      	it	ls
   39ab8:	2200      	movls	r2, #0
   39aba:	2a00      	cmp	r2, #0
   39abc:	f040 80e2 	bne.w	39c84 <__udivmoddi4+0x34c>
   39ac0:	4670      	mov	r0, lr
   39ac2:	1be4      	subs	r4, r4, r7
   39ac4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   39ac8:	e790      	b.n	399ec <__udivmoddi4+0xb4>
   39aca:	f1c1 0720 	rsb	r7, r1, #32
   39ace:	408b      	lsls	r3, r1
   39ad0:	fa06 f401 	lsl.w	r4, r6, r1
   39ad4:	fa22 fe07 	lsr.w	lr, r2, r7
   39ad8:	ea4e 0e03 	orr.w	lr, lr, r3
   39adc:	40fe      	lsrs	r6, r7
   39ade:	fa20 fc07 	lsr.w	ip, r0, r7
   39ae2:	ea4f 491e 	mov.w	r9, lr, lsr #16
   39ae6:	fa00 f801 	lsl.w	r8, r0, r1
   39aea:	ea4c 0c04 	orr.w	ip, ip, r4
   39aee:	fa1f f48e 	uxth.w	r4, lr
   39af2:	fa02 f301 	lsl.w	r3, r2, r1
   39af6:	9301      	str	r3, [sp, #4]
   39af8:	fbb6 f0f9 	udiv	r0, r6, r9
   39afc:	ea4f 431c 	mov.w	r3, ip, lsr #16
   39b00:	fb09 6610 	mls	r6, r9, r0, r6
   39b04:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   39b08:	fb00 f604 	mul.w	r6, r0, r4
   39b0c:	429e      	cmp	r6, r3
   39b0e:	d912      	bls.n	39b36 <__udivmoddi4+0x1fe>
   39b10:	eb1e 0303 	adds.w	r3, lr, r3
   39b14:	f04f 0201 	mov.w	r2, #1
   39b18:	bf38      	it	cc
   39b1a:	2200      	movcc	r2, #0
   39b1c:	429e      	cmp	r6, r3
   39b1e:	f082 0a01 	eor.w	sl, r2, #1
   39b22:	f100 3bff 	add.w	fp, r0, #4294967295	@ 0xffffffff
   39b26:	f00a 0201 	and.w	r2, sl, #1
   39b2a:	bf98      	it	ls
   39b2c:	2200      	movls	r2, #0
   39b2e:	2a00      	cmp	r2, #0
   39b30:	f040 8099 	bne.w	39c66 <__udivmoddi4+0x32e>
   39b34:	4658      	mov	r0, fp
   39b36:	1b9b      	subs	r3, r3, r6
   39b38:	fa1f fc8c 	uxth.w	ip, ip
   39b3c:	fbb3 f6f9 	udiv	r6, r3, r9
   39b40:	fb09 3316 	mls	r3, r9, r6, r3
   39b44:	fb06 f404 	mul.w	r4, r6, r4
   39b48:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   39b4c:	429c      	cmp	r4, r3
   39b4e:	d911      	bls.n	39b74 <__udivmoddi4+0x23c>
   39b50:	eb1e 0303 	adds.w	r3, lr, r3
   39b54:	f04f 0201 	mov.w	r2, #1
   39b58:	bf38      	it	cc
   39b5a:	2200      	movcc	r2, #0
   39b5c:	429c      	cmp	r4, r3
   39b5e:	f082 0c01 	eor.w	ip, r2, #1
   39b62:	f106 39ff 	add.w	r9, r6, #4294967295	@ 0xffffffff
   39b66:	f00c 0201 	and.w	r2, ip, #1
   39b6a:	bf98      	it	ls
   39b6c:	2200      	movls	r2, #0
   39b6e:	2a00      	cmp	r2, #0
   39b70:	d17f      	bne.n	39c72 <__udivmoddi4+0x33a>
   39b72:	464e      	mov	r6, r9
   39b74:	1b1c      	subs	r4, r3, r4
   39b76:	9b01      	ldr	r3, [sp, #4]
   39b78:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   39b7c:	fba0 9303 	umull	r9, r3, r0, r3
   39b80:	46cc      	mov	ip, r9
   39b82:	461e      	mov	r6, r3
   39b84:	429c      	cmp	r4, r3
   39b86:	d363      	bcc.n	39c50 <__udivmoddi4+0x318>
   39b88:	f04f 0201 	mov.w	r2, #1
   39b8c:	bf18      	it	ne
   39b8e:	2200      	movne	r2, #0
   39b90:	45c8      	cmp	r8, r9
   39b92:	f002 0201 	and.w	r2, r2, #1
   39b96:	bf28      	it	cs
   39b98:	2200      	movcs	r2, #0
   39b9a:	2a00      	cmp	r2, #0
   39b9c:	d158      	bne.n	39c50 <__udivmoddi4+0x318>
   39b9e:	b155      	cbz	r5, 39bb6 <__udivmoddi4+0x27e>
   39ba0:	ebb8 020c 	subs.w	r2, r8, ip
   39ba4:	eb64 0406 	sbc.w	r4, r4, r6
   39ba8:	fa04 f307 	lsl.w	r3, r4, r7
   39bac:	40ca      	lsrs	r2, r1
   39bae:	4313      	orrs	r3, r2
   39bb0:	40cc      	lsrs	r4, r1
   39bb2:	e9c5 3400 	strd	r3, r4, [r5]
   39bb6:	2100      	movs	r1, #0
   39bb8:	e71d      	b.n	399f6 <__udivmoddi4+0xbe>
   39bba:	fa02 fc03 	lsl.w	ip, r2, r3
   39bbe:	f1c3 0220 	rsb	r2, r3, #32
   39bc2:	4099      	lsls	r1, r3
   39bc4:	40d6      	lsrs	r6, r2
   39bc6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   39bca:	fa20 f202 	lsr.w	r2, r0, r2
   39bce:	fa1f fa8c 	uxth.w	sl, ip
   39bd2:	430a      	orrs	r2, r1
   39bd4:	409c      	lsls	r4, r3
   39bd6:	fbb6 f0fe 	udiv	r0, r6, lr
   39bda:	0c11      	lsrs	r1, r2, #16
   39bdc:	fb0e 6610 	mls	r6, lr, r0, r6
   39be0:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
   39be4:	fb00 f60a 	mul.w	r6, r0, sl
   39be8:	428e      	cmp	r6, r1
   39bea:	d910      	bls.n	39c0e <__udivmoddi4+0x2d6>
   39bec:	eb1c 0101 	adds.w	r1, ip, r1
   39bf0:	f04f 0701 	mov.w	r7, #1
   39bf4:	bf38      	it	cc
   39bf6:	2700      	movcc	r7, #0
   39bf8:	428e      	cmp	r6, r1
   39bfa:	f087 0801 	eor.w	r8, r7, #1
   39bfe:	f100 39ff 	add.w	r9, r0, #4294967295	@ 0xffffffff
   39c02:	f008 0701 	and.w	r7, r8, #1
   39c06:	bf98      	it	ls
   39c08:	2700      	movls	r7, #0
   39c0a:	bb4f      	cbnz	r7, 39c60 <__udivmoddi4+0x328>
   39c0c:	4648      	mov	r0, r9
   39c0e:	1b89      	subs	r1, r1, r6
   39c10:	b292      	uxth	r2, r2
   39c12:	fbb1 f6fe 	udiv	r6, r1, lr
   39c16:	fb0e 1116 	mls	r1, lr, r6, r1
   39c1a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   39c1e:	fb06 f10a 	mul.w	r1, r6, sl
   39c22:	4291      	cmp	r1, r2
   39c24:	d910      	bls.n	39c48 <__udivmoddi4+0x310>
   39c26:	eb1c 0202 	adds.w	r2, ip, r2
   39c2a:	f04f 0701 	mov.w	r7, #1
   39c2e:	bf38      	it	cc
   39c30:	2700      	movcc	r7, #0
   39c32:	4291      	cmp	r1, r2
   39c34:	f087 0801 	eor.w	r8, r7, #1
   39c38:	f106 39ff 	add.w	r9, r6, #4294967295	@ 0xffffffff
   39c3c:	f008 0701 	and.w	r7, r8, #1
   39c40:	bf98      	it	ls
   39c42:	2700      	movls	r7, #0
   39c44:	b997      	cbnz	r7, 39c6c <__udivmoddi4+0x334>
   39c46:	464e      	mov	r6, r9
   39c48:	1a52      	subs	r2, r2, r1
   39c4a:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
   39c4e:	e6fb      	b.n	39a48 <__udivmoddi4+0x110>
   39c50:	9a01      	ldr	r2, [sp, #4]
   39c52:	3801      	subs	r0, #1
   39c54:	ebb9 0c02 	subs.w	ip, r9, r2
   39c58:	eb63 030e 	sbc.w	r3, r3, lr
   39c5c:	461e      	mov	r6, r3
   39c5e:	e79e      	b.n	39b9e <__udivmoddi4+0x266>
   39c60:	3802      	subs	r0, #2
   39c62:	4461      	add	r1, ip
   39c64:	e7d3      	b.n	39c0e <__udivmoddi4+0x2d6>
   39c66:	3802      	subs	r0, #2
   39c68:	4473      	add	r3, lr
   39c6a:	e764      	b.n	39b36 <__udivmoddi4+0x1fe>
   39c6c:	3e02      	subs	r6, #2
   39c6e:	4462      	add	r2, ip
   39c70:	e7ea      	b.n	39c48 <__udivmoddi4+0x310>
   39c72:	3e02      	subs	r6, #2
   39c74:	4473      	add	r3, lr
   39c76:	e77d      	b.n	39b74 <__udivmoddi4+0x23c>
   39c78:	3902      	subs	r1, #2
   39c7a:	4462      	add	r2, ip
   39c7c:	e694      	b.n	399a8 <__udivmoddi4+0x70>
   39c7e:	4464      	add	r4, ip
   39c80:	3802      	subs	r0, #2
   39c82:	e6ae      	b.n	399e2 <__udivmoddi4+0xaa>
   39c84:	4464      	add	r4, ip
   39c86:	3802      	subs	r0, #2
   39c88:	e71b      	b.n	39ac2 <__udivmoddi4+0x18a>
   39c8a:	3e02      	subs	r6, #2
   39c8c:	4462      	add	r2, ip
   39c8e:	e6f9      	b.n	39a84 <__udivmoddi4+0x14c>

00039c90 <__aeabi_idiv0>:
   39c90:	4770      	bx	lr
   39c92:	bf00      	nop
